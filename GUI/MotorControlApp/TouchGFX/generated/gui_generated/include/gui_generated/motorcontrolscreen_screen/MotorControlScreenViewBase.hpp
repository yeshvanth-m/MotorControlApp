/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MOTORCONTROLSCREENVIEWBASE_HPP
#define MOTORCONTROLSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/motorcontrolscreen_screen/MotorControlScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class MotorControlScreenViewBase : public touchgfx::View<MotorControlScreenPresenter>
{
public:
    MotorControlScreenViewBase();
    virtual ~MotorControlScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box BG;
    touchgfx::Gauge M2_RPM_Guage;
    touchgfx::PainterRGB565Bitmap M2_RPM_GuagePainter;
    touchgfx::TextArea M2_G;
    touchgfx::Slider M3_RPM_Slider;
    touchgfx::Slider M1_RPM_Slider;
    touchgfx::Gauge M3_RPM_Guage;
    touchgfx::PainterRGB565Bitmap M3_RPM_GuagePainter;
    touchgfx::Slider M2_RPM_Slider;
    touchgfx::TextArea M3_G;
    touchgfx::Gauge M1_RPM_Guage;
    touchgfx::PainterRGB565Bitmap M1_RPM_GuagePainter;
    touchgfx::Button ClearFault_M3;
    touchgfx::Button ClearFault_M1;
    touchgfx::Button ClearFault_M2;
    touchgfx::Image E14;
    touchgfx::TextArea M3_S;
    touchgfx::TextArea RPM;
    touchgfx::TextArea RPM_0;
    touchgfx::TextArea MAX_RPM;
    touchgfx::TextArea RPM_2000;
    touchgfx::TextArea RPM_1000;
    touchgfx::TextArea RPM_1500;
    touchgfx::TextArea RPM_500;
    touchgfx::TextArea M2_S;
    touchgfx::TextArea M1_S;
    touchgfx::TextArea M1_G;
    touchgfx::TextArea F1;
    touchgfx::TextArea F2;
    touchgfx::TextArea F3;
    touchgfx::Button TempScreen;
    touchgfx::Circle Fault1_Indicator;
    touchgfx::PainterRGB565 Fault1_IndicatorPainter;
    touchgfx::Circle Fault2_Indicator;
    touchgfx::PainterRGB565 Fault2_IndicatorPainter;
    touchgfx::Circle Fault3_Indicator;
    touchgfx::PainterRGB565 Fault3_IndicatorPainter;
    touchgfx::TextArea TItle;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MotorControlScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MOTORCONTROLSCREENVIEWBASE_HPP
