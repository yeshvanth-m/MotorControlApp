
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a874  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004770  0802aa48  0802aa48  0003aa48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  0802f1b8  0802f1b8  0003f1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802f1d4  0802f1d4  00067b28  2**0
                  CONTENTS
  5 .ARM          00000008  0802f1d4  0802f1d4  0003f1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802f1dc  0802f1dc  00067b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802f1dc  0802f1dc  0003f1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802f1f8  0802f1f8  0003f1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  0802f200  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015b44  20000124  0802f324  00040124  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20015c68  0802f324  00045c68  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00067b28  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00070000  2**2
                  ALLOC
 14 ExtFlashSection 00017700  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00000404  90017700  90017700  00067700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000024  90017b04  90017b04  00067b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .comment      000000c2  00000000  00000000  00067b58  2**0
                  CONTENTS, READONLY
 18 .debug_info   000c5394  00000000  00000000  00067c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00017f12  00000000  00000000  0012cfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000031f8  00000000  00000000  00144ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00003760  00000000  00000000  001480b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  000381a5  00000000  00000000  0014b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0007161a  00000000  00000000  001839bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00129323  00000000  00000000  001f4fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00009cf8  00000000  00000000  0031e2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loclists 00033e6d  00000000  00000000  00327ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000077  00000000  00000000  0035be61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802aa2c 	.word	0x0802aa2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802aa2c 	.word	0x0802aa2c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000de8:	4901      	ldr	r1, [pc, #4]	; (8000df0 <vApplicationIdleHook+0x8>)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f007 bcec 	b.w	80087c8 <vTaskSetApplicationTaskTag>
 8000df0:	08001ead 	.word	0x08001ead

08000df4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000df6:	2064      	movs	r0, #100	; 0x64
 8000df8:	f005 fee4 	bl	8006bc4 <osDelay>
  for(;;)
 8000dfc:	e7fb      	b.n	8000df6 <StartDefaultTask+0x2>
	...

08000e00 <SystemClock_Config>:
{
 8000e00:	b510      	push	{r4, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e04:	2210      	movs	r2, #16
 8000e06:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e08:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	a80a      	add	r0, sp, #40	; 0x28
 8000e0c:	f028 fec4 	bl	8029b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	2214      	movs	r2, #20
 8000e12:	2100      	movs	r1, #0
 8000e14:	a803      	add	r0, sp, #12
 8000e16:	f028 febf 	bl	8029b98 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e1c:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e26:	641a      	str	r2, [r3, #64]	; 0x40
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <SystemClock_Config+0x94>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e54:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e58:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e5c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e60:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f004 fe74 	bl	8005b50 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e68:	f004 fb16 	bl	8005498 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6e:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e70:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7a:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e82:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e84:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e86:	f005 f84b 	bl	8005f20 <HAL_RCC_ClockConfig>
}
 8000e8a:	b014      	add	sp, #80	; 0x50
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40007000 	.word	0x40007000

08000e98 <main>:
{
 8000e98:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000e9c:	b09b      	sub	sp, #108	; 0x6c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ea2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ea6:	4ac6      	ldr	r2, [pc, #792]	; (80011c0 <main+0x328>)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eb2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000eb6:	6953      	ldr	r3, [r2, #20]
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ec2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ec6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000eca:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ece:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ed2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ed6:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000eda:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000ede:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ee0:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ee4:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ee6:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000eea:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eec:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000ef0:	d2f9      	bcs.n	8000ee6 <main+0x4e>
    } while(sets-- != 0U);
 8000ef2:	3b20      	subs	r3, #32
 8000ef4:	f113 0f20 	cmn.w	r3, #32
 8000ef8:	d1f2      	bne.n	8000ee0 <main+0x48>
 8000efa:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f0e:	f04f 0810 	mov.w	r8, #16
  HAL_Init();
 8000f12:	f003 f989 	bl	8004228 <HAL_Init>
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f16:	2100      	movs	r1, #0
 8000f18:	a80d      	add	r0, sp, #52	; 0x34
 8000f1a:	4642      	mov	r2, r8
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f1c:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f1e:	2601      	movs	r6, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f20:	f028 fe3a 	bl	8029b98 <memset>
  HAL_MPU_Disable();
 8000f24:	f003 fa1a 	bl	800435c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000f28:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8000f2c:	4ba5      	ldr	r3, [pc, #660]	; (80011c4 <main+0x32c>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2e:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f30:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	f04f 0b03 	mov.w	fp, #3
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f38:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f3a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000f3e:	4da2      	ldr	r5, [pc, #648]	; (80011c8 <main+0x330>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f40:	f04f 0904 	mov.w	r9, #4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f44:	4fa1      	ldr	r7, [pc, #644]	; (80011cc <main+0x334>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000f46:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f4a:	f003 fa25 	bl	8004398 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000f4e:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f50:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f52:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000f56:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f5a:	f88d 6042 	strb.w	r6, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f5e:	f003 fa1b 	bl	8004398 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f003 fa08 	bl	8004378 <HAL_MPU_Enable>
  SystemClock_Config();
 8000f68:	f7ff ff4a 	bl	8000e00 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	4621      	mov	r1, r4
 8000f70:	a80d      	add	r0, sp, #52	; 0x34
 8000f72:	f028 fe11 	bl	8029b98 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f76:	4b96      	ldr	r3, [pc, #600]	; (80011d0 <main+0x338>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f78:	4641      	mov	r1, r8
 8000f7a:	4896      	ldr	r0, [pc, #600]	; (80011d4 <main+0x33c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7e:	ea42 0208 	orr.w	r2, r2, r8
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
 8000f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f86:	ea02 0208 	and.w	r2, r2, r8
 8000f8a:	9202      	str	r2, [sp, #8]
 8000f8c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f90:	f042 0202 	orr.w	r2, r2, #2
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
 8000f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f98:	f002 0202 	and.w	r2, r2, #2
 8000f9c:	9203      	str	r2, [sp, #12]
 8000f9e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	4332      	orrs	r2, r6
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa8:	4032      	ands	r2, r6
 8000faa:	9204      	str	r2, [sp, #16]
 8000fac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fbc:	9205      	str	r2, [sp, #20]
 8000fbe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fce:	9206      	str	r2, [sp, #24]
 8000fd0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd4:	f042 0208 	orr.w	r2, r2, #8
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fdc:	f002 0208 	and.w	r2, r2, #8
 8000fe0:	9207      	str	r2, [sp, #28]
 8000fe2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
 8000fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fee:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000ff2:	9208      	str	r2, [sp, #32]
 8000ff4:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff8:	f042 0220 	orr.w	r2, r2, #32
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001000:	f002 0220 	and.w	r2, r2, #32
 8001004:	9209      	str	r2, [sp, #36]	; 0x24
 8001006:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
 8001010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001012:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001016:	920a      	str	r2, [sp, #40]	; 0x28
 8001018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001024:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001028:	920b      	str	r2, [sp, #44]	; 0x2c
 800102a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102e:	f042 0204 	orr.w	r2, r2, #4
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001034:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	930c      	str	r3, [sp, #48]	; 0x30
 800103e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001040:	f003 fcfc 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001044:	4632      	mov	r2, r6
 8001046:	2108      	movs	r1, #8
 8001048:	4863      	ldr	r0, [pc, #396]	; (80011d8 <main+0x340>)
 800104a:	f003 fcf7 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800104e:	4632      	mov	r2, r6
 8001050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001054:	4861      	ldr	r0, [pc, #388]	; (80011dc <main+0x344>)
 8001056:	f003 fcf1 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 800105a:	4622      	mov	r2, r4
 800105c:	21c0      	movs	r1, #192	; 0xc0
 800105e:	4860      	ldr	r0, [pc, #384]	; (80011e0 <main+0x348>)
 8001060:	f003 fcec 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001064:	4622      	mov	r2, r4
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	485e      	ldr	r0, [pc, #376]	; (80011e4 <main+0x34c>)
 800106a:	f003 fce7 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800106e:	a90d      	add	r1, sp, #52	; 0x34
 8001070:	4858      	ldr	r0, [pc, #352]	; (80011d4 <main+0x33c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	e9cd 860d 	strd	r8, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	f003 fb56 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001080:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001082:	a90d      	add	r1, sp, #52	; 0x34
 8001084:	4854      	ldr	r0, [pc, #336]	; (80011d8 <main+0x340>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800108e:	f003 fb4d 	bl	800472c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001092:	a90d      	add	r1, sp, #52	; 0x34
 8001094:	4851      	ldr	r0, [pc, #324]	; (80011dc <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	e9cd a60d 	strd	sl, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800109e:	f003 fb45 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010a2:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	a90d      	add	r1, sp, #52	; 0x34
 80010a6:	484e      	ldr	r0, [pc, #312]	; (80011e0 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	e9cd 260d 	strd	r2, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f003 fb3c 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010b4:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010b6:	a90d      	add	r1, sp, #52	; 0x34
 80010b8:	484a      	ldr	r0, [pc, #296]	; (80011e4 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	e9cd 260d 	strd	r2, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f003 fb33 	bl	800472c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010c6:	4848      	ldr	r0, [pc, #288]	; (80011e8 <main+0x350>)
 80010c8:	4948      	ldr	r1, [pc, #288]	; (80011ec <main+0x354>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010ca:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80010cc:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010ce:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010d0:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010d4:	f003 f98c 	bl	80043f0 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 80010d8:	4945      	ldr	r1, [pc, #276]	; (80011f0 <main+0x358>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010da:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010dc:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010e0:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80010e4:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80010e8:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010ec:	f003 fa1d 	bl	800452a <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010f0:	4631      	mov	r1, r6
 80010f2:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010f4:	4d3f      	ldr	r5, [pc, #252]	; (80011f4 <main+0x35c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010f6:	f003 fad1 	bl	800469c <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010fa:	493f      	ldr	r1, [pc, #252]	; (80011f8 <main+0x360>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001100:	4638      	mov	r0, r7
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001102:	60bc      	str	r4, [r7, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001104:	61fc      	str	r4, [r7, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001106:	62bc      	str	r4, [r7, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001108:	e9c7 1400 	strd	r1, r4, [r7]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	e9c7 1205 	strd	r1, r2, [r7, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001112:	f44f 6200 	mov.w	r2, #2048	; 0x800
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001116:	a90d      	add	r1, sp, #52	; 0x34
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001118:	e9c7 2a08 	strd	r2, sl, [r7, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800111c:	f04f 0a02 	mov.w	sl, #2
 8001120:	2207      	movs	r2, #7
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001122:	e9c7 9803 	strd	r9, r8, [r7, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001126:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 800112a:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800112e:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  SdramTiming.RCDDelay = 2;
 8001132:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001136:	f005 fa49 	bl	80065cc <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800113a:	4629      	mov	r1, r5
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	4638      	mov	r0, r7
  __IO uint32_t tmpmrd = 0;
 8001142:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001144:	e9c5 6800 	strd	r6, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001148:	e9c5 6402 	strd	r6, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800114c:	f005 fa5e 	bl	800660c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8001150:	4630      	mov	r0, r6
 8001152:	f003 f88d 	bl	8004270 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001156:	4629      	mov	r1, r5
 8001158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115c:	4638      	mov	r0, r7
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800115e:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001162:	e9c5 6402 	strd	r6, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001166:	f005 fa51 	bl	800660c <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 800116a:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800116c:	4629      	mov	r1, r5
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	4638      	mov	r0, r7
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001174:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001178:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800117c:	f005 fa46 	bl	800660c <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001180:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800118a:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800118c:	4638      	mov	r0, r7
    Command.ModeRegisterDefinition = tmpmrd;
 800118e:	9b01      	ldr	r3, [sp, #4]
  hltdc.Init.TotalHeigh = 285;
 8001190:	f240 2b35 	movw	fp, #565	; 0x235
    Command.AutoRefreshNumber      = 1;
 8001194:	60ae      	str	r6, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8001196:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001198:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800119c:	f005 fa36 	bl	800660c <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a0:	f240 712b 	movw	r1, #1835	; 0x72b
 80011a4:	4638      	mov	r0, r7
  hi2c3.Instance = I2C3;
 80011a6:	4d15      	ldr	r5, [pc, #84]	; (80011fc <main+0x364>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a8:	f005 fa4f 	bl	800664a <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011b0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 80011b4:	2064      	movs	r0, #100	; 0x64
  hltdc.Init.VerticalSync = 9;
 80011b6:	2728      	movs	r7, #40	; 0x28
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011b8:	601a      	str	r2, [r3, #0]
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 80011ba:	f003 f859 	bl	8004270 <HAL_Delay>
 80011be:	e01f      	b.n	8001200 <main+0x368>
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	0300001b 	.word	0x0300001b
 80011c8:	2000017c 	.word	0x2000017c
 80011cc:	20000304 	.word	0x20000304
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40022800 	.word	0x40022800
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40021800 	.word	0x40021800
 80011e8:	20000158 	.word	0x20000158
 80011ec:	40023000 	.word	0x40023000
 80011f0:	4002b000 	.word	0x4002b000
 80011f4:	20000140 	.word	0x20000140
 80011f8:	a0000140 	.word	0xa0000140
 80011fc:	200001bc 	.word	0x200001bc
  hi2c3.Init.Timing = 0x20404768;
 8001200:	4b48      	ldr	r3, [pc, #288]	; (8001324 <main+0x48c>)
 8001202:	4849      	ldr	r0, [pc, #292]	; (8001328 <main+0x490>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 8001206:	e9c5 0300 	strd	r0, r3, [r5]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800120a:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120c:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8001210:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001218:	f003 fd38 	bl	8004c8c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121c:	4621      	mov	r1, r4
 800121e:	4628      	mov	r0, r5
 8001220:	f003 ff56 	bl	80050d0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001224:	4621      	mov	r1, r4
 8001226:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8001228:	4d40      	ldr	r5, [pc, #256]	; (800132c <main+0x494>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800122a:	f003 ff77 	bl	800511c <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800122e:	2234      	movs	r2, #52	; 0x34
 8001230:	4621      	mov	r1, r4
 8001232:	eb0d 0002 	add.w	r0, sp, r2
 8001236:	f028 fcaf 	bl	8029b98 <memset>
  hltdc.Instance = LTDC;
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <main+0x498>)
  hltdc.Init.AccumulatedVBP = 11;
 800123c:	f04f 0c35 	mov.w	ip, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8001240:	f240 2e15 	movw	lr, #533	; 0x215
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001244:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8001246:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001248:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 800124a:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800124e:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8001252:	2309      	movs	r3, #9
 8001254:	e9c5 7305 	strd	r7, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8001258:	230b      	movs	r3, #11
 800125a:	e9c5 c307 	strd	ip, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 800125e:	f240 131b 	movw	r3, #283	; 0x11b
 8001262:	e9c5 e309 	strd	lr, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8001266:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800126a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800126e:	e9c5 b30b 	strd	fp, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001272:	f003 fffb 	bl	800526c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001276:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001278:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 800127c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8001280:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 8001284:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001286:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.ImageHeight = 272;
 800128a:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Red = 0;
 800128c:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 8001290:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001294:	2105      	movs	r1, #5
 8001296:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 800129a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800129e:	4628      	mov	r0, r5
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012a0:	2518      	movs	r5, #24
  pLayerCfg.ImageWidth = 480;
 80012a2:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  pLayerCfg.WindowY0 = 0;
 80012a6:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012aa:	a90d      	add	r1, sp, #52	; 0x34
 80012ac:	4622      	mov	r2, r4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012ae:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b2:	f004 f8a6 	bl	8005402 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012b6:	481f      	ldr	r0, [pc, #124]	; (8001334 <main+0x49c>)
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <main+0x4a0>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012ba:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012bc:	e9c0 3600 	strd	r3, r6, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012c0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012c4:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012c8:	e9c0 5304 	strd	r5, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012cc:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012d0:	f004 f9fc 	bl	80056cc <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80012d4:	f002 fe26 	bl	8003f24 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80012d8:	f002 fd6a 	bl	8003db0 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80012dc:	205c      	movs	r0, #92	; 0x5c
 80012de:	f003 f82b 	bl	8004338 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80012e2:	f000 fb63 	bl	80019ac <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80012e6:	f000 fb8d 	bl	8001a04 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80012ea:	f000 fb8a 	bl	8001a02 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 80012ee:	f005 fbdb 	bl	8006aa8 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <main+0x4a4>)
 80012f4:	4621      	mov	r1, r4
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <main+0x4a8>)
 80012f8:	f005 fc10 	bl	8006b1c <osThreadNew>
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <main+0x4ac>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <main+0x4b0>)
 8001300:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001302:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <main+0x4b4>)
 8001306:	f005 fc09 	bl	8006b1c <osThreadNew>
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <main+0x4b8>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <main+0x4bc>)
 800130e:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001310:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <main+0x4c0>)
 8001314:	f005 fc02 	bl	8006b1c <osThreadNew>
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <main+0x4c4>)
 800131a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800131c:	f005 fbde 	bl	8006adc <osKernelStart>
  while (1)
 8001320:	e7fe      	b.n	8001320 <main+0x488>
 8001322:	bf00      	nop
 8001324:	20404768 	.word	0x20404768
 8001328:	40005c00 	.word	0x40005c00
 800132c:	20000210 	.word	0x20000210
 8001330:	40016800 	.word	0x40016800
 8001334:	200002b8 	.word	0x200002b8
 8001338:	a0001000 	.word	0xa0001000
 800133c:	0802aad0 	.word	0x0802aad0
 8001340:	08000df5 	.word	0x08000df5
 8001344:	20000154 	.word	0x20000154
 8001348:	0802aaac 	.word	0x0802aaac
 800134c:	08001a13 	.word	0x08001a13
 8001350:	20000150 	.word	0x20000150
 8001354:	0802aaf4 	.word	0x0802aaf4
 8001358:	0800328d 	.word	0x0800328d
 800135c:	20000338 	.word	0x20000338

08001360 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001360:	6802      	ldr	r2, [r0, #0]
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001364:	429a      	cmp	r2, r3
 8001366:	d101      	bne.n	800136c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001368:	f002 bf70 	b.w	800424c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40001000 	.word	0x40001000

08001374 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001374:	4770      	bx	lr
	...

08001378 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x38>)
{
 800137a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137c:	210f      	movs	r1, #15
 800137e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001384:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013aa:	f002 bf85 	b.w	80042b8 <HAL_NVIC_SetPriority>
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013b4:	6802      	ldr	r2, [r0, #0]
{
 80013b6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_CRC_MspInit+0x28>)
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d10b      	bne.n	80013d6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013be:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013d6:	b002      	add	sp, #8
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023000 	.word	0x40023000

080013e0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_DMA2D_MspInit+0x3c>)
{
 80013e2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013e4:	6802      	ldr	r2, [r0, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d115      	bne.n	8001416 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013ea:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013ee:	2105      	movs	r1, #5
 80013f0:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fa:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001406:	f002 ff57 	bl	80042b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800140a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800140c:	b003      	add	sp, #12
 800140e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001412:	f002 bf83 	b.w	800431c <HAL_NVIC_EnableIRQ>
}
 8001416:	b003      	add	sp, #12
 8001418:	f85d fb04 	ldr.w	pc, [sp], #4
 800141c:	4002b000 	.word	0x4002b000

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b510      	push	{r4, lr}
 8001422:	b0a8      	sub	sp, #160	; 0xa0
 8001424:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	2214      	movs	r2, #20
 8001428:	2100      	movs	r1, #0
 800142a:	a802      	add	r0, sp, #8
 800142c:	f028 fbb4 	bl	8029b98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	2284      	movs	r2, #132	; 0x84
 8001432:	2100      	movs	r1, #0
 8001434:	a807      	add	r0, sp, #28
 8001436:	f028 fbaf 	bl	8029b98 <memset>
  if(hi2c->Instance==I2C3)
 800143a:	6822      	ldr	r2, [r4, #0]
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_I2C_MspInit+0x7c>)
 800143e:	429a      	cmp	r2, r3
 8001440:	d12a      	bne.n	8001498 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001448:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	f004 fe35 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	b108      	cbz	r0, 8001454 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001450:	f7ff ff90 	bl	8001374 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001454:	4c12      	ldr	r4, [pc, #72]	; (80014a0 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001456:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6323      	str	r3, [r4, #48]	; 0x30
 8001466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800147e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001480:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	f003 f953 	bl	800472c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148c:	6423      	str	r3, [r4, #64]	; 0x40
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001498:	b028      	add	sp, #160	; 0xa0
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40005c00 	.word	0x40005c00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021c00 	.word	0x40021c00

080014a8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014a8:	6802      	ldr	r2, [r0, #0]
{
 80014aa:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspDeInit+0x2c>)
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d10f      	bne.n	80014d2 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014c0:	f003 fa16 	bl	80048f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014ce:	f003 ba0f 	b.w	80048f0 <HAL_GPIO_DeInit>
}
 80014d2:	bd08      	pop	{r3, pc}
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021c00 	.word	0x40021c00

080014e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	b0ac      	sub	sp, #176	; 0xb0
 80014e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	2214      	movs	r2, #20
 80014e8:	2100      	movs	r1, #0
 80014ea:	a806      	add	r0, sp, #24
 80014ec:	f028 fb54 	bl	8029b98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	2284      	movs	r2, #132	; 0x84
 80014f2:	2100      	movs	r1, #0
 80014f4:	a80b      	add	r0, sp, #44	; 0x2c
 80014f6:	f028 fb4f 	bl	8029b98 <memset>
  if(hltdc->Instance==LTDC)
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_LTDC_MspInit+0x140>)
 80014fe:	429a      	cmp	r2, r3
 8001500:	f040 808c 	bne.w	800161c <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001504:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001506:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001508:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800150a:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800150c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001510:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001512:	2302      	movs	r3, #2
 8001514:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800151e:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f004 fdc9 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	b108      	cbz	r0, 800152c <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001528:	f7ff ff24 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800152c:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001532:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	a906      	add	r1, sp, #24
 8001538:	483b      	ldr	r0, [pc, #236]	; (8001628 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800153a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
 8001540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001542:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154c:	f042 0210 	orr.w	r2, r2, #16
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
 8001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001554:	f002 0210 	and.w	r2, r2, #16
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001566:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800157c:	9203      	str	r2, [sp, #12]
 800157e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800158e:	9204      	str	r2, [sp, #16]
 8001590:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2310      	movs	r3, #16
 80015a6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ae:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f003 f8bc 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015b8:	a906      	add	r1, sp, #24
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015bc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015c6:	f003 f8b1 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80015ca:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015cc:	a906      	add	r1, sp, #24
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015da:	f003 f8a7 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e2:	a906      	add	r1, sp, #24
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015ea:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015f0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f2:	f003 f89b 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80015f6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fa:	a906      	add	r1, sp, #24
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fe:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001608:	f003 f890 	bl	800472c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800160c:	2058      	movs	r0, #88	; 0x58
 800160e:	4622      	mov	r2, r4
 8001610:	2105      	movs	r1, #5
 8001612:	f002 fe51 	bl	80042b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001616:	2058      	movs	r0, #88	; 0x58
 8001618:	f002 fe80 	bl	800431c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800161c:	b02c      	add	sp, #176	; 0xb0
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	40016800 	.word	0x40016800
 8001624:	40023800 	.word	0x40023800
 8001628:	40021000 	.word	0x40021000
 800162c:	40022400 	.word	0x40022400
 8001630:	40022800 	.word	0x40022800
 8001634:	40021800 	.word	0x40021800
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	2214      	movs	r2, #20
 800163e:	2100      	movs	r1, #0
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001644:	b08a      	sub	sp, #40	; 0x28
 8001646:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	eb0d 0002 	add.w	r0, sp, r2
 800164c:	f028 faa4 	bl	8029b98 <memset>
  if(hqspi->Instance==QUADSPI)
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_QSPI_MspInit+0xc8>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d151      	bne.n	80016fc <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800165c:	2403      	movs	r4, #3
 800165e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	a905      	add	r1, sp, #20
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166a:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
 8001672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001674:	f002 0202 	and.w	r2, r2, #2
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
 8001684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001686:	f002 0210 	and.w	r2, r2, #16
 800168a:	9202      	str	r2, [sp, #8]
 800168c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	f042 0202 	orr.w	r2, r2, #2
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
 8001696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001698:	f002 0202 	and.w	r2, r2, #2
 800169c:	9203      	str	r2, [sp, #12]
 800169e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b6:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	f003 f837 	bl	800472c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016be:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	a905      	add	r1, sp, #20
 80016c2:	4813      	ldr	r0, [pc, #76]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016c8:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ce:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f003 f82c 	bl	800472c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	a905      	add	r1, sp, #20
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016d8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f003 f823 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80016e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	a905      	add	r1, sp, #20
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ee:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f003 f818 	bl	800472c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80016fc:	b00a      	add	sp, #40	; 0x28
 80016fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001702:	bf00      	nop
 8001704:	a0001000 	.word	0xa0001000
 8001708:	40023800 	.word	0x40023800
 800170c:	40021000 	.word	0x40021000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020c00 	.word	0x40020c00

08001718 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001718:	6802      	ldr	r2, [r0, #0]
{
 800171a:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_QSPI_MspDeInit+0x34>)
 800171e:	429a      	cmp	r2, r3
 8001720:	d113      	bne.n	800174a <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001724:	2104      	movs	r1, #4
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001728:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001730:	f003 f8de 	bl	80048f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001734:	2144      	movs	r1, #68	; 0x44
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <HAL_QSPI_MspDeInit+0x40>)
 8001738:	f003 f8da 	bl	80048f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800173c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001746:	f003 b8d3 	b.w	80048f0 <HAL_GPIO_DeInit>
}
 800174a:	bd08      	pop	{r3, pc}
 800174c:	a0001000 	.word	0xa0001000
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020c00 	.word	0x40020c00

08001760 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001762:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001764:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001766:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_SDRAM_MspInit+0xb0>)
 800176a:	681e      	ldr	r6, [r3, #0]
 800176c:	2e00      	cmp	r6, #0
 800176e:	d14d      	bne.n	800180c <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8001770:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	2503      	movs	r5, #3
 8001776:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8001778:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001796:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f002 ffc5 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017a2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a6:	a901      	add	r1, sp, #4
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f002 ffba 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80017b8:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	a901      	add	r1, sp, #4
 80017be:	4818      	ldr	r0, [pc, #96]	; (8001820 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f002 ffaf 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d2:	a901      	add	r1, sp, #4
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e0:	f002 ffa4 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80017e4:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017e6:	a901      	add	r1, sp, #4
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f4:	f002 ff9a 	bl	800472c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	a901      	add	r1, sp, #4
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f002 ff90 	bl	800472c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800180c:	b007      	add	sp, #28
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001810:	2000033c 	.word	0x2000033c
 8001814:	40023800 	.word	0x40023800
 8001818:	40021000 	.word	0x40021000
 800181c:	40021800 	.word	0x40021800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021400 	.word	0x40021400
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40020800 	.word	0x40020800

08001830 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_InitTick+0x88>)
 8001832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001834:	f042 0210 	orr.w	r2, r2, #16
{
 8001838:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800183c:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8001840:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001842:	a901      	add	r1, sp, #4
 8001844:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184e:	f004 fc15 	bl	800607c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001852:	9b06      	ldr	r3, [sp, #24]
 8001854:	bb4b      	cbnz	r3, 80018aa <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001856:	f004 fc01 	bl	800605c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800185a:	4e18      	ldr	r6, [pc, #96]	; (80018bc <HAL_InitTick+0x8c>)
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_InitTick+0x90>)
 800185e:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001860:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001864:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_InitTick+0x94>)
 8001868:	fbb0 f3f3 	udiv	r3, r0, r3
 800186c:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 800186e:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8001870:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 800187a:	f005 f857 	bl	800692c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800187e:	4604      	mov	r4, r0
 8001880:	b980      	cbnz	r0, 80018a4 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001882:	4630      	mov	r0, r6
 8001884:	f004 fefa 	bl	800667c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001888:	4604      	mov	r4, r0
 800188a:	b958      	cbnz	r0, 80018a4 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800188c:	2036      	movs	r0, #54	; 0x36
 800188e:	f002 fd45 	bl	800431c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	2d0f      	cmp	r5, #15
 8001894:	d80d      	bhi.n	80018b2 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001896:	4622      	mov	r2, r4
 8001898:	4629      	mov	r1, r5
 800189a:	2036      	movs	r0, #54	; 0x36
 800189c:	f002 fd0c 	bl	80042b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_InitTick+0x98>)
 80018a2:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80018a4:	4620      	mov	r0, r4
 80018a6:	b008      	add	sp, #32
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018aa:	f004 fbd7 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 80018ae:	0040      	lsls	r0, r0, #1
 80018b0:	e7d3      	b.n	800185a <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80018b2:	2401      	movs	r4, #1
 80018b4:	e7f6      	b.n	80018a4 <HAL_InitTick+0x74>
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	20000340 	.word	0x20000340
 80018c0:	40001000 	.word	0x40001000
 80018c4:	000f4240 	.word	0x000f4240
 80018c8:	2000003c 	.word	0x2000003c

080018cc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018cc:	4770      	bx	lr

080018ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler>

080018d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler>

080018d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <BusFault_Handler>

080018d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler>

080018d6 <DebugMon_Handler>:
 80018d6:	4770      	bx	lr

080018d8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d8:	4801      	ldr	r0, [pc, #4]	; (80018e0 <TIM6_DAC_IRQHandler+0x8>)
 80018da:	f004 bf11 	b.w	8006700 <HAL_TIM_IRQHandler>
 80018de:	bf00      	nop
 80018e0:	20000340 	.word	0x20000340

080018e4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018e4:	4801      	ldr	r0, [pc, #4]	; (80018ec <LTDC_IRQHandler+0x8>)
 80018e6:	f003 bd2f 	b.w	8005348 <HAL_LTDC_IRQHandler>
 80018ea:	bf00      	nop
 80018ec:	20000210 	.word	0x20000210

080018f0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018f0:	4801      	ldr	r0, [pc, #4]	; (80018f8 <DMA2D_IRQHandler+0x8>)
 80018f2:	f002 be48 	b.w	8004586 <HAL_DMA2D_IRQHandler>
 80018f6:	bf00      	nop
 80018f8:	2000017c 	.word	0x2000017c

080018fc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80018fc:	2001      	movs	r0, #1
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001902:	f028 f9fd 	bl	8029d00 <__errno>
 8001906:	2316      	movs	r3, #22
 8001908:	6003      	str	r3, [r0, #0]
	return -1;
}
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	bd08      	pop	{r3, pc}

08001910 <_exit>:

void _exit (int status)
{
 8001910:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001912:	f028 f9f5 	bl	8029d00 <__errno>
 8001916:	2316      	movs	r3, #22
 8001918:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800191a:	e7fe      	b.n	800191a <_exit+0xa>

0800191c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	460d      	mov	r5, r1
 8001920:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	460e      	mov	r6, r1
 8001924:	1b73      	subs	r3, r6, r5
 8001926:	429c      	cmp	r4, r3
 8001928:	dc01      	bgt.n	800192e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800192a:	4620      	mov	r0, r4
 800192c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800192e:	f3af 8000 	nop.w
 8001932:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	e7f5      	b.n	8001924 <_read+0x8>

08001938 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	460d      	mov	r5, r1
 800193c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	460e      	mov	r6, r1
 8001940:	1b73      	subs	r3, r6, r5
 8001942:	429c      	cmp	r4, r3
 8001944:	dc01      	bgt.n	800194a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001946:	4620      	mov	r0, r4
 8001948:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800194a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800194e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	e7f5      	b.n	8001940 <_write+0x8>

08001954 <_close>:

int _close(int file)
{
	return -1;
}
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800195e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001960:	604b      	str	r3, [r1, #4]
}
 8001962:	4770      	bx	lr

08001964 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001964:	2001      	movs	r0, #1
 8001966:	4770      	bx	lr

08001968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001968:	2000      	movs	r0, #0
 800196a:	4770      	bx	lr

0800196c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4a0b      	ldr	r2, [pc, #44]	; (800199c <_sbrk+0x30>)
{
 800196e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001970:	6811      	ldr	r1, [r2, #0]
{
 8001972:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001974:	b909      	cbnz	r1, 800197a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001976:	490a      	ldr	r1, [pc, #40]	; (80019a0 <_sbrk+0x34>)
 8001978:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	6810      	ldr	r0, [r2, #0]
 800197c:	4909      	ldr	r1, [pc, #36]	; (80019a4 <_sbrk+0x38>)
 800197e:	4c0a      	ldr	r4, [pc, #40]	; (80019a8 <_sbrk+0x3c>)
 8001980:	4403      	add	r3, r0
 8001982:	1b09      	subs	r1, r1, r4
 8001984:	428b      	cmp	r3, r1
 8001986:	d906      	bls.n	8001996 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001988:	f028 f9ba 	bl	8029d00 <__errno>
 800198c:	230c      	movs	r3, #12
 800198e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001990:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001994:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001996:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001998:	e7fc      	b.n	8001994 <_sbrk+0x28>
 800199a:	bf00      	nop
 800199c:	2000038c 	.word	0x2000038c
 80019a0:	20015c68 	.word	0x20015c68
 80019a4:	20050000 	.word	0x20050000
 80019a8:	00000a00 	.word	0x00000a00

080019ac <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80019ac:	4770      	bx	lr
	...

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019b6:	e003      	b.n	80019c0 <LoopCopyDataInit>

080019b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019be:	3104      	adds	r1, #4

080019c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c8:	d3f6      	bcc.n	80019b8 <CopyDataInit>
  ldr  r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019cc:	e002      	b.n	80019d4 <LoopFillZerobss>

080019ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d0:	f842 3b04 	str.w	r3, [r2], #4

080019d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d8:	d3f9      	bcc.n	80019ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019da:	f002 fb3b 	bl	8004054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f028 f995 	bl	8029d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fa59 	bl	8000e98 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019ec:	0802f200 	.word	0x0802f200
  ldr  r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f4:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80019f8:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 80019fc:	20015c68 	.word	0x20015c68

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>

08001a02 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001a02:	4770      	bx	lr

08001a04 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001a04:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001a06:	f001 f8f3 	bl	8002bf0 <touchgfx_components_init>
  touchgfx_init();
}
 8001a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8001a0e:	f001 b87f 	b.w	8002b10 <touchgfx_init>

08001a12 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001a12:	f001 b8ef 	b.w	8002bf4 <touchgfx_taskEntry>

08001a16 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001a16:	6840      	ldr	r0, [r0, #4]
    }
 8001a18:	4770      	bx	lr

08001a1a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001a1a:	6041      	str	r1, [r0, #4]
    }
 8001a1c:	4770      	bx	lr
	...

08001a20 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001a20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001a24:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a32:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a34:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	4770      	bx	lr
 8001a48:	e0001000 	.word	0xe0001000
 8001a4c:	c5acce55 	.word	0xc5acce55

08001a50 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a50:	1a51      	subs	r1, r2, r1
 8001a52:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a56:	fbb1 f0f3 	udiv	r0, r1, r3
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001a5c:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001a5e:	6858      	ldr	r0, [r3, #4]
}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e0001000 	.word	0xe0001000

08001a68 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001a68:	4770      	bx	lr

08001a6a <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001a6a:	b510      	push	{r4, lr}
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	210c      	movs	r1, #12
 8001a70:	f027 fdaa 	bl	80295c8 <_ZdlPvj>
 8001a74:	4620      	mov	r0, r4
 8001a76:	bd10      	pop	{r4, pc}

08001a78 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a78:	6803      	ldr	r3, [r0, #0]
{
 8001a7a:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a7c:	691b      	ldr	r3, [r3, #16]
{
 8001a7e:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001a80:	b131      	cbz	r1, 8001a90 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a82:	4798      	blx	r3
 8001a84:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001a86:	6863      	ldr	r3, [r4, #4]
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	4418      	add	r0, r3
 8001a8c:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a8e:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001a90:	4798      	blx	r3
 8001a92:	60a0      	str	r0, [r4, #8]
}
 8001a94:	e7fb      	b.n	8001a8e <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a98 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a98:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a9a:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a9c:	4a02      	ldr	r2, [pc, #8]	; (8001aa8 <_ZN20STM32TouchController4initEv+0x10>)
 8001a9e:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4718      	bx	r3
 8001aa4:	20000010 	.word	0x20000010
 8001aa8:	20000390 	.word	0x20000390

08001aac <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001aac:	4770      	bx	lr

08001aae <_ZN20STM32TouchControllerD0Ev>:
 8001aae:	b510      	push	{r4, lr}
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	f027 fd88 	bl	80295c8 <_ZdlPvj>
 8001ab8:	4620      	mov	r0, r4
 8001aba:	bd10      	pop	{r4, pc}

08001abc <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001abe:	4e0e      	ldr	r6, [pc, #56]	; (8001af8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
{
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	4614      	mov	r4, r2
    if (tsDriver)
 8001ac4:	6833      	ldr	r3, [r6, #0]
 8001ac6:	b913      	cbnz	r3, 8001ace <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = (int32_t)_x;
            y = (int32_t)_y;
            return true;
        }
    }
    return false;
 8001ac8:	2000      	movs	r0, #0
}
 8001aca:	b002      	add	sp, #8
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2070      	movs	r0, #112	; 0x70
 8001ad2:	4798      	blx	r3
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d0f7      	beq.n	8001ac8 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, &_y, &_x);
 8001ad8:	6833      	ldr	r3, [r6, #0]
 8001ada:	2070      	movs	r0, #112	; 0x70
 8001adc:	aa01      	add	r2, sp, #4
 8001ade:	f10d 0106 	add.w	r1, sp, #6
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	4798      	blx	r3
            x = (int32_t)_x;
 8001ae6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001aea:	2001      	movs	r0, #1
 8001aec:	602b      	str	r3, [r5, #0]
            y = (int32_t)_y;
 8001aee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001af2:	6023      	str	r3, [r4, #0]
            return true;
 8001af4:	e7e9      	b.n	8001aca <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001af6:	bf00      	nop
 8001af8:	20000390 	.word	0x20000390

08001afc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001afc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001afe:	2301      	movs	r3, #1
{
 8001b00:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b08:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b0c:	f10d 0217 	add.w	r2, sp, #23
 8001b10:	9200      	str	r2, [sp, #0]
 8001b12:	460a      	mov	r2, r1
 8001b14:	4601      	mov	r1, r0
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <TS_IO_Write+0x30>)
 8001b18:	f003 f922 	bl	8004d60 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001b1c:	b110      	cbz	r0, 8001b24 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <TS_IO_Write+0x30>)
 8001b20:	f003 f905 	bl	8004d2e <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001b24:	b007      	add	sp, #28
 8001b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b2a:	bf00      	nop
 8001b2c:	200001bc 	.word	0x200001bc

08001b30 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001b32:	2300      	movs	r3, #0
{
 8001b34:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001b3a:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b44:	f10d 0117 	add.w	r1, sp, #23
 8001b48:	9100      	str	r1, [sp, #0]
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <TS_IO_Read+0x34>)
 8001b4e:	f003 f9e1 	bl	8004f14 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b52:	b110      	cbz	r0, 8001b5a <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b54:	4803      	ldr	r0, [pc, #12]	; (8001b64 <TS_IO_Read+0x34>)
 8001b56:	f003 f8ea 	bl	8004d2e <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001b5a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001b5e:	b007      	add	sp, #28
 8001b60:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b64:	200001bc 	.word	0x200001bc

08001b68 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b68:	2803      	cmp	r0, #3
 8001b6a:	d823      	bhi.n	8001bb4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001b6c:	e8df f000 	tbb	[pc, r0]
 8001b70:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b76:	2110      	movs	r1, #16
 8001b78:	4810      	ldr	r0, [pc, #64]	; (8001bbc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b82:	f002 bf5b 	b.w	8004a3c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	fab2 f282 	clz	r2, r2
 8001b90:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b92:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001b94:	e7f5      	b.n	8001b82 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	0952      	lsrs	r2, r2, #5
 8001ba2:	e7f6      	b.n	8001b92 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	0952      	lsrs	r2, r2, #5
 8001bb2:	e7e6      	b.n	8001b82 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000394 	.word	0x20000394
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40021800 	.word	0x40021800

08001bc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001bc8:	2803      	cmp	r0, #3
 8001bca:	d823      	bhi.n	8001c14 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001bcc:	e8df f000 	tbb	[pc, r0]
 8001bd0:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	4810      	ldr	r0, [pc, #64]	; (8001c1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	3a00      	subs	r2, #0
 8001bde:	bf18      	it	ne
 8001be0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001be2:	f002 bf2b 	b.w	8004a3c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	3a00      	subs	r2, #0
 8001bee:	bf18      	it	ne
 8001bf0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001bf4:	e7f5      	b.n	8001be2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	3a00      	subs	r2, #0
 8001bfe:	bf18      	it	ne
 8001c00:	2201      	movne	r2, #1
 8001c02:	e7f6      	b.n	8001bf2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c06:	2140      	movs	r1, #64	; 0x40
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	3a00      	subs	r2, #0
 8001c0e:	bf18      	it	ne
 8001c10:	2201      	movne	r2, #1
 8001c12:	e7e6      	b.n	8001be2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000394 	.word	0x20000394
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40021800 	.word	0x40021800

08001c28 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001c28:	2803      	cmp	r0, #3
 8001c2a:	d80f      	bhi.n	8001c4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001c2c:	e8df f000 	tbb	[pc, r0]
 8001c30:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c34:	2110      	movs	r1, #16
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c38:	f002 bf05 	b.w	8004a46 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c3c:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001c40:	e7fa      	b.n	8001c38 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	e7fb      	b.n	8001c3e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c4a:	e7f5      	b.n	8001c38 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40021800 	.word	0x40021800

08001c5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001c5c:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001c5e:	2803      	cmp	r0, #3
 8001c60:	d813      	bhi.n	8001c8a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8001c62:	e8df f000 	tbb	[pc, r0]
 8001c66:	0a02      	.short	0x0a02
 8001c68:	0f0d      	.short	0x0f0d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c6a:	2110      	movs	r1, #16
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c6e:	f002 fedf 	bl	8004a30 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001c72:	1e43      	subs	r3, r0, #1
 8001c74:	4258      	negs	r0, r3
 8001c76:	4158      	adcs	r0, r3
 8001c78:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c7a:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8001c7e:	e7f6      	b.n	8001c6e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	e7fb      	b.n	8001c7c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c84:	2140      	movs	r1, #64	; 0x40
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001c88:	e7f1      	b.n	8001c6e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	e7f1      	b.n	8001c72 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001c8e:	bf00      	nop
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40021800 	.word	0x40021800

08001c9c <_ZN8touchgfx4GPIO4initEv>:
{
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	4d08      	ldr	r5, [pc, #32]	; (8001cc0 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001ca0:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001ca2:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001ca4:	b2e0      	uxtb	r0, r4
 8001ca6:	f7ff ffd9 	bl	8001c5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001caa:	b118      	cbz	r0, 8001cb4 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001cb0:	bf18      	it	ne
 8001cb2:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001cb4:	3401      	adds	r4, #1
 8001cb6:	3504      	adds	r5, #4
 8001cb8:	2c05      	cmp	r4, #5
 8001cba:	d1f3      	bne.n	8001ca4 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000394 	.word	0x20000394

08001cc4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001cc4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001cc6:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8001cca:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    }
 8001cce:	4770      	bx	lr

08001cd0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr

08001cd4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001cd4:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001cd6:	3900      	subs	r1, #0
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001cda:	bf18      	it	ne
 8001cdc:	2101      	movne	r1, #1
 8001cde:	7019      	strb	r1, [r3, #0]
    }
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20015037 	.word	0x20015037

08001ce8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ce8:	2000      	movs	r0, #0
 8001cea:	4770      	bx	lr

08001cec <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001cec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cee:	b10b      	cbz	r3, 8001cf4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4718      	bx	r3
        }
    }
 8001cf4:	4770      	bx	lr

08001cf6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001cf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cfa:	4770      	bx	lr

08001cfc <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001cfc:	6840      	ldr	r0, [r0, #4]
 8001cfe:	6803      	ldr	r3, [r0, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4718      	bx	r3

08001d04 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d04:	4770      	bx	lr
	...

08001d08 <_ZN11TouchGFXHAL10initializeEv>:
LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");
}

void TouchGFXHAL::initialize()
{
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d0c:	f001 f87c 	bl	8002e08 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setAnimationStorage((void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001d10:	4908      	ldr	r1, [pc, #32]	; (8001d34 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	4620      	mov	r0, r4
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001d16:	4d08      	ldr	r5, [pc, #32]	; (8001d38 <_ZN11TouchGFXHAL10initializeEv+0x30>)
    setAnimationStorage((void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1c:	4798      	blx	r3
        lockDMAToPorch = enableLock;
 8001d1e:	2300      	movs	r3, #0
    instrumentation.init();
 8001d20:	4628      	mov	r0, r5
 8001d22:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001d26:	f7ff fe7b 	bl	8001a20 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001d2a:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001d2c:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001d2e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	c0000000 	.word	0xc0000000
 8001d38:	200003a4 	.word	0x200003a4

08001d3c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d3c:	f001 b81a 	b.w	8002d74 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001d40 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d40:	f001 b81e 	b.w	8002d80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001d44 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001d44:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d46:	f001 f889 	bl	8002e5c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001d4a:	4910      	ldr	r1, [pc, #64]	; (8001d8c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d52:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d56:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d5a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d5e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d62:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001d66:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d68:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d6c:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d6e:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001d72:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d74:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001d78:	d2f9      	bcs.n	8001d6e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001d7a:	3b20      	subs	r3, #32
 8001d7c:	f113 0f20 	cmn.w	r3, #32
 8001d80:	d1f2      	bne.n	8001d68 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001d82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d86:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001d90:	f001 b866 	b.w	8002e60 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001d94 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d94:	f000 bfca 	b.w	8002d2c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001d98 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d98:	f001 b980 	b.w	800309c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001d9c <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d9c:	f001 b988 	b.w	80030b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001da0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001da0:	f000 bfce 	b.w	8002d40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001da4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001da4:	b510      	push	{r4, lr}
 8001da6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001da8:	f015 fad8 	bl	801735c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	4620      	mov	r0, r4
 8001db0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001db8:	4718      	bx	r3

08001dba <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001dba:	f014 bd2d 	b.w	8016818 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001dbe <_ZN11TouchGFXHALD0Ev>:
 8001dbe:	b510      	push	{r4, lr}
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	217c      	movs	r1, #124	; 0x7c
 8001dc4:	f027 fc00 	bl	80295c8 <_ZdlPvj>
 8001dc8:	4620      	mov	r0, r4
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001dcc:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8001dd0:	b11b      	cbz	r3, 8001dda <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001dd2:	6840      	ldr	r0, [r0, #4]
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4718      	bx	r3
    }
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4770      	bx	lr
	...

08001de0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001de0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001de6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001de8:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001dec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001dee:	428c      	cmp	r4, r1
 8001df0:	d009      	beq.n	8001e06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001df2:	b93a      	cbnz	r2, 8001e04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001df4:	490a      	ldr	r1, [pc, #40]	; (8001e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001df8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001dfa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001dfc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001dfe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e00:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001e02:	701a      	strb	r2, [r3, #0]
        }
    }
 8001e04:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d0fc      	beq.n	8001e04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e0c:	4904      	ldr	r1, [pc, #16]	; (8001e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e0e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001e10:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001e12:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001e14:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001e16:	2200      	movs	r2, #0
 8001e18:	e7f3      	b.n	8001e02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001e1a:	bf00      	nop
 8001e1c:	20015030 	.word	0x20015030
 8001e20:	2001502e 	.word	0x2001502e
 8001e24:	2001502c 	.word	0x2001502c

08001e28 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	460d      	mov	r5, r1
 8001e2c:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001e2e:	b935      	cbnz	r5, 8001e3e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001e32:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001e3a:	f027 fbf3 	bl	8029624 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001e3e:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001e42:	3a00      	subs	r2, #0
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001e46:	bf18      	it	ne
 8001e48:	2201      	movne	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001e4c:	6803      	ldr	r3, [r0, #0]
    }
 8001e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e56:	4718      	bx	r3
 8001e58:	0802ab58 	.word	0x0802ab58
 8001e5c:	0802ab90 	.word	0x0802ab90
 8001e60:	0802abde 	.word	0x0802abde
 8001e64:	20015036 	.word	0x20015036

08001e68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001e68:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	428b      	cmp	r3, r1
 8001e70:	d803      	bhi.n	8001e7a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d905      	bls.n	8001e86 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001e7c:	219e      	movs	r1, #158	; 0x9e
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001e82:	f027 fbcf 	bl	8029624 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e88:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e8c:	801a      	strh	r2, [r3, #0]
    }
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	2001502c 	.word	0x2001502c
 8001e94:	2001502e 	.word	0x2001502e
 8001e98:	0802ac23 	.word	0x0802ac23
 8001e9c:	0802ac86 	.word	0x0802ac86
 8001ea0:	0802abde 	.word	0x0802abde
 8001ea4:	20015032 	.word	0x20015032
 8001ea8:	20015034 	.word	0x20015034

08001eac <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001eac:	4601      	mov	r1, r0
 8001eae:	b508      	push	{r3, lr}
        return instance;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <IdleTaskHook+0x14>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001eb4:	b101      	cbz	r1, 8001eb8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001eb6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001eb8:	f015 fa6a 	bl	8017390 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	bd08      	pop	{r3, pc}
 8001ec0:	20015038 	.word	0x20015038

08001ec4 <_GLOBAL__sub_I_instrumentation>:
        : cc_consumed(0),
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	4a02      	ldr	r2, [pc, #8]	; (8001ed8 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200003a4 	.word	0x200003a4
 8001ed8:	0802ab20 	.word	0x0802ab20

08001edc <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001edc:	2101      	movs	r1, #1
 8001ede:	2200      	movs	r2, #0
{
 8001ee0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ee2:	4608      	mov	r0, r1
 8001ee4:	f004 ff26 	bl	8006d34 <osSemaphoreNew>
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001eea:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001eec:	b928      	cbnz	r0, 8001efa <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001ef0:	2128      	movs	r1, #40	; 0x28
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001ef6:	f027 fb95 	bl	8029624 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2104      	movs	r1, #4
 8001efe:	2001      	movs	r0, #1
 8001f00:	f004 ffde 	bl	8006ec0 <osMessageQueueNew>
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001f06:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f08:	b918      	cbnz	r0, 8001f12 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001f10:	e7f0      	b.n	8001ef4 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001f12:	bd08      	pop	{r3, pc}
 8001f14:	200003b4 	.word	0x200003b4
 8001f18:	0802ada4 	.word	0x0802ada4
 8001f1c:	0802aded 	.word	0x0802aded
 8001f20:	0802ae1c 	.word	0x0802ae1c
 8001f24:	200003b0 	.word	0x200003b0
 8001f28:	0802ae75 	.word	0x0802ae75

08001f2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	f004 bf54 	b.w	8006de0 <osSemaphoreAcquire>
 8001f38:	200003b4 	.word	0x200003b4

08001f3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001f3c:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	f004 bf88 	b.w	8006e54 <osSemaphoreRelease>
 8001f44:	200003b4 	.word	0x200003b4

08001f48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	f004 bf47 	b.w	8006de0 <osSemaphoreAcquire>
 8001f52:	bf00      	nop
 8001f54:	200003b4 	.word	0x200003b4

08001f58 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001f58:	f7ff bff0 	b.w	8001f3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001f5c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001f62:	461a      	mov	r2, r3
 8001f64:	6800      	ldr	r0, [r0, #0]
 8001f66:	f004 bff1 	b.w	8006f4c <osMessageQueuePut>
 8001f6a:	bf00      	nop
 8001f6c:	200003b0 	.word	0x200003b0
 8001f70:	20000004 	.word	0x20000004

08001f74 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f74:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f76:	2300      	movs	r3, #0
 8001f78:	4c07      	ldr	r4, [pc, #28]	; (8001f98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001f7a:	a901      	add	r1, sp, #4
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	6820      	ldr	r0, [r4, #0]
 8001f80:	f005 f826 	bl	8006fd0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	2200      	movs	r2, #0
 8001f8a:	a901      	add	r1, sp, #4
 8001f8c:	6820      	ldr	r0, [r4, #0]
 8001f8e:	f005 f81f 	bl	8006fd0 <osMessageQueueGet>
}
 8001f92:	b002      	add	sp, #8
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	bf00      	nop
 8001f98:	200003b0 	.word	0x200003b0

08001f9c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	4718      	bx	r3

08001fa2 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	4770      	bx	lr

08001fa6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001fa6:	6803      	ldr	r3, [r0, #0]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	4718      	bx	r3

08001fac <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001fae:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fba:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001fbe:	9201      	str	r2, [sp, #4]
 8001fc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fc8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001fd0:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001fd4:	4a05      	ldr	r2, [pc, #20]	; (8001fec <_ZN8STM32DMA10initializeEv+0x40>)
 8001fd6:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <_ZN8STM32DMA10initializeEv+0x44>)
 8001fde:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	4770      	bx	lr
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	2000017c 	.word	0x2000017c
 8001fec:	08002035 	.word	0x08002035
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001ff4:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001ff8:	4770      	bx	lr
	...

08001ffc <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002002:	6003      	str	r3, [r0, #0]
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <_ZN8STM32DMAD1Ev+0x1c>)
 8002006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800200a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800200e:	f3bf 8f6f 	isb	sy
}
 8002012:	4770      	bx	lr
 8002014:	0802b020 	.word	0x0802b020
 8002018:	e000e100 	.word	0xe000e100

0800201c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800201c:	b510      	push	{r4, lr}
 800201e:	4604      	mov	r4, r0
}
 8002020:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002024:	f7ff ffea 	bl	8001ffc <_ZN8STM32DMAD1Ev>
 8002028:	4620      	mov	r0, r4
 800202a:	f027 facd 	bl	80295c8 <_ZdlPvj>
 800202e:	4620      	mov	r0, r4
 8002030:	bd10      	pop	{r4, pc}
	...

08002034 <DMA2D_XferCpltCallback>:
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <DMA2D_XferCpltCallback+0xc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800203a:	6803      	ldr	r3, [r0, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4718      	bx	r3
 8002040:	20015038 	.word	0x20015038

08002044 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <_ZN8STM32DMAC1Ev+0x30>)
 800204a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800204c:	2600      	movs	r6, #0
 800204e:	4625      	mov	r5, r4
 8002050:	2260      	movs	r2, #96	; 0x60
 8002052:	6060      	str	r0, [r4, #4]
 8002054:	7226      	strb	r6, [r4, #8]
 8002056:	7266      	strb	r6, [r4, #9]
 8002058:	f845 3b20 	str.w	r3, [r5], #32
 800205c:	4629      	mov	r1, r5
 800205e:	f015 fad3 	bl	8017608 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002062:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002066:	60ee      	str	r6, [r5, #12]
 8002068:	3524      	adds	r5, #36	; 0x24
 800206a:	42ab      	cmp	r3, r5
 800206c:	d1fb      	bne.n	8002066 <_ZN8STM32DMAC1Ev+0x22>
}
 800206e:	4620      	mov	r0, r4
 8002070:	bd70      	pop	{r4, r5, r6, pc}
 8002072:	bf00      	nop
 8002074:	0802b020 	.word	0x0802b020

08002078 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002078:	b508      	push	{r3, lr}
    switch (format)
 800207a:	290b      	cmp	r1, #11
 800207c:	d80b      	bhi.n	8002096 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800207e:	e8df f001 	tbb	[pc, r1]
 8002082:	0612      	.short	0x0612
 8002084:	0a0a0a10 	.word	0x0a0a0a10
 8002088:	0808080a 	.word	0x0808080a
 800208c:	0808      	.short	0x0808
 800208e:	2001      	movs	r0, #1
}
 8002090:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002092:	2005      	movs	r0, #5
        break;
 8002094:	e7fc      	b.n	8002090 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002098:	2165      	movs	r1, #101	; 0x65
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800209c:	4805      	ldr	r0, [pc, #20]	; (80020b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800209e:	f027 fac1 	bl	8029624 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80020a2:	2000      	movs	r0, #0
 80020a4:	e7f4      	b.n	8002090 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80020a6:	2002      	movs	r0, #2
    return dma2dColorMode;
 80020a8:	e7f2      	b.n	8002090 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80020aa:	bf00      	nop
 80020ac:	0802aeb7 	.word	0x0802aeb7
 80020b0:	0802aed2 	.word	0x0802aed2
 80020b4:	0802af1c 	.word	0x0802af1c

080020b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80020b8:	b508      	push	{r3, lr}
    switch (format)
 80020ba:	290a      	cmp	r1, #10
 80020bc:	d809      	bhi.n	80020d2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 80020be:	e8df f001 	tbb	[pc, r1]
 80020c2:	0610      	.short	0x0610
 80020c4:	0808080e 	.word	0x0808080e
 80020c8:	06060608 	.word	0x06060608
 80020cc:	06          	.byte	0x06
 80020cd:	00          	.byte	0x00
 80020ce:	2001      	movs	r0, #1
}
 80020d0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80020d4:	2186      	movs	r1, #134	; 0x86
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80020da:	f027 faa3 	bl	8029624 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80020de:	2000      	movs	r0, #0
 80020e0:	e7f6      	b.n	80020d0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80020e2:	2002      	movs	r0, #2
    return dma2dColorMode;
 80020e4:	e7f4      	b.n	80020d0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80020e6:	bf00      	nop
 80020e8:	0802aeb7 	.word	0x0802aeb7
 80020ec:	0802af73 	.word	0x0802af73
 80020f0:	0802af1c 	.word	0x0802af1c

080020f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80020f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80020f8:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 80020fc:	460c      	mov	r4, r1
 80020fe:	4607      	mov	r7, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002100:	4641      	mov	r1, r8
 8002102:	f7ff ffb9 	bl	8002078 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002106:	f894 901e 	ldrb.w	r9, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800210a:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800210c:	4638      	mov	r0, r7
 800210e:	4649      	mov	r1, r9
 8002110:	f7ff ffb2 	bl	8002078 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002114:	4649      	mov	r1, r9
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002116:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002118:	4638      	mov	r0, r7
 800211a:	f7ff ffcd 	bl	80020b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800211e:	8aa1      	ldrh	r1, [r4, #20]
 8002120:	8b62      	ldrh	r2, [r4, #26]
 8002122:	4b43      	ldr	r3, [pc, #268]	; (8002230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002124:	1a52      	subs	r2, r2, r1
 8002126:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002128:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800212a:	8b22      	ldrh	r2, [r4, #24]
 800212c:	1a52      	subs	r2, r2, r1
 800212e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002130:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002132:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002134:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002138:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800213a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800213c:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800213e:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002140:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002142:	6827      	ldr	r7, [r4, #0]
 8002144:	2f80      	cmp	r7, #128	; 0x80
 8002146:	d028      	beq.n	800219a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8002148:	7f22      	ldrb	r2, [r4, #28]
 800214a:	d80f      	bhi.n	800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800214c:	2f20      	cmp	r7, #32
 800214e:	d065      	beq.n	800221c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002150:	2f40      	cmp	r7, #64	; 0x40
 8002152:	d063      	beq.n	800221c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002154:	2f04      	cmp	r7, #4
 8002156:	d01a      	beq.n	800218e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002158:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800215e:	45c8      	cmp	r8, r9
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002160:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8002164:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002166:	d05f      	beq.n	8002228 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002168:	4a32      	ldr	r2, [pc, #200]	; (8002234 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800216a:	e044      	b.n	80021f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
    switch (blitOp.operation)
 800216c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8002170:	d004      	beq.n	800217c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x88>
 8002172:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8002176:	d1ef      	bne.n	8002158 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x64>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002178:	492f      	ldr	r1, [pc, #188]	; (8002238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800217a:	e000      	b.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800217c:	492f      	ldr	r1, [pc, #188]	; (800223c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800217e:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8002182:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002184:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002186:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002188:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800218a:	6158      	str	r0, [r3, #20]
 800218c:	e032      	b.n	80021f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800218e:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002192:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002196:	61da      	str	r2, [r3, #28]
 8002198:	e7f6      	b.n	8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800219a:	68a7      	ldr	r7, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800219c:	1d3a      	adds	r2, r7, #4
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a0:	7f21      	ldrb	r1, [r4, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 80021a2:	783a      	ldrb	r2, [r7, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a4:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 80021a8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 80021ac:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021ae:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021b0:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 80021b2:	b142      	cbz	r2, 80021c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80021b4:	2a01      	cmp	r2, #1
 80021b6:	d021      	beq.n	80021fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
                assert(0 && "Unsupported format");
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80021ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80021be:	4a21      	ldr	r2, [pc, #132]	; (8002244 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 80021c0:	4821      	ldr	r0, [pc, #132]	; (8002248 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 80021c2:	f027 fa2f 	bl	8029624 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	8879      	ldrh	r1, [r7, #2]
 80021ca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021ce:	3901      	subs	r1, #1
 80021d0:	f022 0210 	bic.w	r2, r2, #16
 80021d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            bool blend = true;
 80021d8:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021da:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	f042 0220 	orr.w	r2, r2, #32
 80021e4:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	0692      	lsls	r2, r2, #26
 80021ea:	d4fc      	bmi.n	80021e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80021ec:	2210      	movs	r2, #16
 80021ee:	609a      	str	r2, [r3, #8]
            if (blend)
 80021f0:	2900      	cmp	r1, #0
 80021f2:	d0b9      	beq.n	8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x74>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80021f4:	4a15      	ldr	r2, [pc, #84]	; (800224c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021f6:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 80021f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021fc:	69da      	ldr	r2, [r3, #28]
                if (blitOp.alpha == 255)
 80021fe:	39ff      	subs	r1, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002200:	8878      	ldrh	r0, [r7, #2]
 8002202:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
                if (blitOp.alpha == 255)
 8002206:	bf18      	it	ne
 8002208:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800220a:	3801      	subs	r0, #1
 800220c:	f022 0210 	bic.w	r2, r2, #16
 8002210:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002214:	f042 0210 	orr.w	r2, r2, #16
 8002218:	61da      	str	r2, [r3, #28]
                break;
 800221a:	e7df      	b.n	80021dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800221c:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002222:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002226:	e7b6      	b.n	8002196 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002228:	f240 2201 	movw	r2, #513	; 0x201
 800222c:	e7e3      	b.n	80021f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 800222e:	bf00      	nop
 8002230:	4002b000 	.word	0x4002b000
 8002234:	00010201 	.word	0x00010201
 8002238:	00020009 	.word	0x00020009
 800223c:	0002000a 	.word	0x0002000a
 8002240:	0802afbe 	.word	0x0802afbe
 8002244:	0802afd8 	.word	0x0802afd8
 8002248:	0802af1c 	.word	0x0802af1c
 800224c:	00020201 	.word	0x00020201

08002250 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002254:	7f89      	ldrb	r1, [r1, #30]
 8002256:	f7ff ff2f 	bl	80020b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800225c:	8aa5      	ldrh	r5, [r4, #20]
 800225e:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002260:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002262:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002266:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002268:	645a      	str	r2, [r3, #68]	; 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800226a:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800226c:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800226e:	1b52      	subs	r2, r2, r5
 8002270:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002272:	6825      	ldr	r5, [r4, #0]
 8002274:	2d08      	cmp	r5, #8
 8002276:	d10e      	bne.n	8002296 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002278:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800227a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800227c:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800227e:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002280:	7f20      	ldrb	r0, [r4, #28]
 8002282:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002286:	61da      	str	r2, [r3, #28]
 8002288:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800228a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800228e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002290:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002292:	601a      	str	r2, [r3, #0]
    }
}
 8002294:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002296:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002298:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800229a:	611a      	str	r2, [r3, #16]
 800229c:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800229e:	0a0a      	lsrs	r2, r1, #8
 80022a0:	0948      	lsrs	r0, r1, #5
 80022a2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80022a6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80022aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80022ae:	4302      	orrs	r2, r0
 80022b0:	430a      	orrs	r2, r1
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80022b4:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 80022b6:	e7ec      	b.n	8002292 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80022b8:	4002b000 	.word	0x4002b000
 80022bc:	00010009 	.word	0x00010009
 80022c0:	00020201 	.word	0x00020201
 80022c4:	00030201 	.word	0x00030201

080022c8 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80022c8:	6940      	ldr	r0, [r0, #20]
 80022ca:	4770      	bx	lr

080022cc <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80022cc:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80022d0:	4770      	bx	lr

080022d2 <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80022d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022d4:	b923      	cbnz	r3, 80022e0 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 80022d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80022d8:	3800      	subs	r0, #0
 80022da:	bf18      	it	ne
 80022dc:	2001      	movne	r0, #1
 80022de:	4770      	bx	lr
 80022e0:	2001      	movs	r0, #1
}
 80022e2:	4770      	bx	lr

080022e4 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80022e4:	6880      	ldr	r0, [r0, #8]
 80022e6:	4770      	bx	lr

080022e8 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80022e8:	3004      	adds	r0, #4
{
 80022ea:	b510      	push	{r4, lr}
 80022ec:	460c      	mov	r4, r1
    *data = videoInfo;
 80022ee:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80022f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 80022f4:	bd10      	pop	{r4, pc}

080022f6 <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 80022f6:	4770      	bx	lr

080022f8 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80022f8:	b508      	push	{r3, lr}
    assert(0);
 80022fa:	4a03      	ldr	r2, [pc, #12]	; (8002308 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80022fc:	f240 2112 	movw	r1, #530	; 0x212
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002304:	f027 f98e 	bl	8029624 <__assert_func>
 8002308:	0802b068 	.word	0x0802b068
 800230c:	0802c857 	.word	0x0802c857
 8002310:	0802b0c3 	.word	0x0802b0c3

08002314 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8002314:	b510      	push	{r4, lr}
 8002316:	4604      	mov	r4, r0
 8002318:	2148      	movs	r1, #72	; 0x48
 800231a:	f027 f955 	bl	80295c8 <_ZdlPvj>
 800231e:	4620      	mov	r0, r4
 8002320:	bd10      	pop	{r4, pc}
	...

08002324 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002328:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800232a:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 800232c:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002330:	4605      	mov	r5, r0
 8002332:	460e      	mov	r6, r1
 8002334:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002336:	2b00      	cmp	r3, #0
 8002338:	d037      	beq.n	80023aa <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x86>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800233a:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 800233c:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800233e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80023e8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002342:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 8002346:	f00c ff9f 	bl	800f288 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 800234a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800234e:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8002350:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 8002352:	a824      	add	r0, sp, #144	; 0x90
 8002354:	f006 fee7 	bl	8009126 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002358:	463a      	mov	r2, r7
 800235a:	4631      	mov	r1, r6
 800235c:	a824      	add	r0, sp, #144	; 0x90
 800235e:	f007 fe63 	bl	800a028 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 8002362:	2101      	movs	r1, #1
 8002364:	a824      	add	r0, sp, #144	; 0x90
 8002366:	f006 ffe1 	bl	800932c <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 800236a:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 800236c:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 800236e:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 8002372:	f007 f87f 	bl	8009474 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002376:	f8bd 3298 	ldrh.w	r3, [sp, #664]	; 0x298
 800237a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 800237c:	f8bd 629c 	ldrh.w	r6, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002380:	4293      	cmp	r3, r2
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002382:	9fa8      	ldr	r7, [sp, #672]	; 0x2a0
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002384:	bf28      	it	cs
 8002386:	4613      	movcs	r3, r2
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002388:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800238a:	4296      	cmp	r6, r2
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 800238c:	eb03 0843 	add.w	r8, r3, r3, lsl #1
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002390:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002394:	bf28      	it	cs
 8002396:	4616      	movcs	r6, r2
        while (cinfo.output_scanline < height)
 8002398:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800239a:	429e      	cmp	r6, r3
 800239c:	d809      	bhi.n	80023b2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8e>
        jpeg_finish_decompress(&cinfo);
 800239e:	a824      	add	r0, sp, #144	; 0x90
 80023a0:	f006 ffe6 	bl	8009370 <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 80023a4:	a824      	add	r0, sp, #144	; 0x90
 80023a6:	f006 ff0b 	bl	80091c0 <jpeg_destroy_decompress>
}
 80023aa:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80023ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80023b2:	2201      	movs	r2, #1
 80023b4:	a901      	add	r1, sp, #4
 80023b6:	a824      	add	r0, sp, #144	; 0x90
 80023b8:	f007 f8a5 	bl	8009506 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 80023bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80023be:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 80023c2:	4298      	cmp	r0, r3
 80023c4:	d801      	bhi.n	80023ca <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa6>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80023c6:	443c      	add	r4, r7
 80023c8:	e7e6      	b.n	8002398 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80023ca:	7859      	ldrb	r1, [r3, #1]
 80023cc:	789a      	ldrb	r2, [r3, #2]
 80023ce:	00c9      	lsls	r1, r1, #3
 80023d0:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 80023d4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80023d8:	430a      	orrs	r2, r1
 80023da:	f813 1b03 	ldrb.w	r1, [r3], #3
 80023de:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 80023e2:	f824 2b02 	strh.w	r2, [r4], #2
                RGB_matrix++;
 80023e6:	e7ec      	b.n	80023c2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x9e>
 80023e8:	fffff800 	.word	0xfffff800

080023ec <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 80023ee:	6002      	str	r2, [r0, #0]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80023f0:	2200      	movs	r2, #0
 80023f2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80023f6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80023fa:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023fe:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8002402:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8002406:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800240a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 800240e:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002412:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 8002416:	4770      	bx	lr
 8002418:	0802b3b0 	.word	0x0802b3b0

0800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 800241c:	b410      	push	{r4}
 800241e:	460c      	mov	r4, r1
 8002420:	4611      	mov	r1, r2
 8002422:	461a      	mov	r2, r3
    if (reader != 0)
 8002424:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002426:	b13b      	cbz	r3, 8002438 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002428:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800242a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800242c:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800242e:	4420      	add	r0, r4
}
 8002430:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002434:	f027 bbb8 	b.w	8029ba8 <strncmp>
        src = (const char*)movieData + offset;
 8002438:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800243a:	e7f8      	b.n	800242e <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

0800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800243c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800243e:	b510      	push	{r4, lr}
    if (reader != 0)
 8002440:	b173      	cbz	r3, 8002460 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002442:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002444:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 8002446:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002448:	1853      	adds	r3, r2, r1
 800244a:	5c52      	ldrb	r2, [r2, r1]
 800244c:	7898      	ldrb	r0, [r3, #2]
 800244e:	785c      	ldrb	r4, [r3, #1]
 8002450:	0400      	lsls	r0, r0, #16
 8002452:	78db      	ldrb	r3, [r3, #3]
 8002454:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002458:	4310      	orrs	r0, r2
 800245a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800245e:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002460:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002462:	5858      	ldr	r0, [r3, r1]
 8002464:	e7fb      	b.n	800245e <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

08002466 <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002466:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002468:	b143      	cbz	r3, 800247c <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800246a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800246c:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800246e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002470:	185a      	adds	r2, r3, r1
 8002472:	5c58      	ldrb	r0, [r3, r1]
 8002474:	7852      	ldrb	r2, [r2, #1]
 8002476:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800247a:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 800247c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800247e:	5a58      	ldrh	r0, [r3, r1]
}
 8002480:	4770      	bx	lr
	...

08002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	4604      	mov	r4, r0
    if (reader != 0)
 8002488:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 800248a:	460d      	mov	r5, r1
 800248c:	4616      	mov	r6, r2
    if (reader != 0)
 800248e:	b1d8      	cbz	r0, 80024c8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002492:	4293      	cmp	r3, r2
 8002494:	d208      	bcs.n	80024a8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002496:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 800249a:	2165      	movs	r1, #101	; 0x65
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800249e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 80024a4:	f027 f8be 	bl	8029624 <__assert_func>
        reader->seek(offset);
 80024a8:	6803      	ldr	r3, [r0, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80024ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80024b0:	4632      	mov	r2, r6
 80024b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024b4:	6803      	ldr	r3, [r0, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4798      	blx	r3
 80024ba:	b910      	cbnz	r0, 80024c2 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80024bc:	230d      	movs	r3, #13
 80024be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 80024c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 80024c4:	6425      	str	r5, [r4, #64]	; 0x40
}
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80024c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80024ca:	4408      	add	r0, r1
 80024cc:	e7fb      	b.n	80024c6 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 80024ce:	bf00      	nop
 80024d0:	0802b139 	.word	0x0802b139
 80024d4:	0802b0c3 	.word	0x0802b0c3
 80024d8:	0802b126 	.word	0x0802b126

080024dc <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 80024dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80024e0:	6943      	ldr	r3, [r0, #20]
{
 80024e2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80024e4:	b92b      	cbnz	r3, 80024f2 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80024e8:	21aa      	movs	r1, #170	; 0xaa
 80024ea:	4a23      	ldr	r2, [pc, #140]	; (8002578 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80024ec:	4823      	ldr	r0, [pc, #140]	; (800257c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 80024ee:	f027 f899 	bl	8029624 <__assert_func>
    readData(currentMovieOffset, 8);
 80024f2:	2208      	movs	r2, #8
 80024f4:	6981      	ldr	r1, [r0, #24]
 80024f6:	f7ff ffc5 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80024fa:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024fc:	f243 0630 	movw	r6, #12336	; 0x3030
 8002500:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002504:	3104      	adds	r1, #4
 8002506:	4620      	mov	r0, r4
 8002508:	f7ff ff98 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800250c:	69a3      	ldr	r3, [r4, #24]
 800250e:	4418      	add	r0, r3
 8002510:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002512:	f100 0208 	add.w	r2, r0, #8
 8002516:	429a      	cmp	r2, r3
 8002518:	d306      	bcc.n	8002528 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800251a:	2301      	movs	r3, #1
    return false;
 800251c:	2000      	movs	r0, #0
    frameNumber = 1;
 800251e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002520:	6a23      	ldr	r3, [r4, #32]
 8002522:	61a3      	str	r3, [r4, #24]
}
 8002524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002528:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800252a:	3009      	adds	r0, #9
        readData(currentMovieOffset, 8);
 800252c:	2208      	movs	r2, #8
        frameNumber++;
 800252e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002530:	f020 0101 	bic.w	r1, r0, #1
        readData(currentMovieOffset, 8);
 8002534:	4620      	mov	r0, r4
        frameNumber++;
 8002536:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002538:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800253a:	f7ff ffa3 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 800253e:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002542:	4620      	mov	r0, r4
 8002544:	4649      	mov	r1, r9
 8002546:	f7ff ff8e 	bl	8002466 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800254a:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo = getU16(currentMovieOffset);
 800254e:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff ff88 	bl	8002466 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002556:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800255a:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff ff6d 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002562:	45b0      	cmp	r8, r6
 8002564:	d1d2      	bne.n	800250c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002566:	42bd      	cmp	r5, r7
 8002568:	d1d0      	bne.n	800250c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 800256a:	2800      	cmp	r0, #0
 800256c:	d0ce      	beq.n	800250c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800256e:	2001      	movs	r0, #1
 8002570:	e7d8      	b.n	8002524 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002572:	bf00      	nop
 8002574:	0802b17b 	.word	0x0802b17b
 8002578:	0802b1c4 	.word	0x0802b1c4
 800257c:	0802b0c3 	.word	0x0802b0c3

08002580 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	4604      	mov	r4, r0
 8002586:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800258a:	468a      	mov	sl, r1
 800258c:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 800258e:	6981      	ldr	r1, [r0, #24]
 8002590:	2208      	movs	r2, #8
{
 8002592:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 8002594:	f7ff ff76 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002598:	69a7      	ldr	r7, [r4, #24]
 800259a:	4620      	mov	r0, r4
 800259c:	1d39      	adds	r1, r7, #4
 800259e:	f7ff ff4d 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80025a2:	f107 0108 	add.w	r1, r7, #8
 80025a6:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80025a8:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff ff6a 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80025b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80025b2:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80025b4:	b933      	cbnz	r3, 80025c4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 80025b8:	f240 11ab 	movw	r1, #427	; 0x1ab
 80025bc:	4a3b      	ldr	r2, [pc, #236]	; (80026ac <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 80025be:	483c      	ldr	r0, [pc, #240]	; (80026b0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 80025c0:	f027 f830 	bl	8029624 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80025c4:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80025c6:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80025c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 80025cc:	f00c fe5c 	bl	800f288 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 80025d0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80025d4:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 80025d6:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 80025d8:	a824      	add	r0, sp, #144	; 0x90
 80025da:	f006 fda4 	bl	8009126 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80025de:	462a      	mov	r2, r5
 80025e0:	4639      	mov	r1, r7
 80025e2:	a824      	add	r0, sp, #144	; 0x90
 80025e4:	f007 fd20 	bl	800a028 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 80025e8:	2101      	movs	r1, #1
 80025ea:	a824      	add	r0, sp, #144	; 0x90
 80025ec:	f006 fe9e 	bl	800932c <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 80025f0:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 80025f2:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 80025f4:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 80025f8:	f006 ff3c 	bl	8009474 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 80025fc:	f9ba 5002 	ldrsh.w	r5, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002600:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002602:	42ab      	cmp	r3, r5
 8002604:	d329      	bcc.n	800265a <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xda>
    const uint32_t startX = area.x;
 8002606:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 800260a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800260e:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8002612:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 8002614:	fb08 6605 	mla	r6, r8, r5, r6
 8002618:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 800261a:	f8ba 5002 	ldrh.w	r5, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 800261e:	f8df b094 	ldr.w	fp, [pc, #148]	; 80026b4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 8002622:	b23f      	sxth	r7, r7
 8002624:	429f      	cmp	r7, r3
 8002626:	bf28      	it	cs
 8002628:	461f      	movcs	r7, r3
 800262a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800262e:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 8002632:	441d      	add	r5, r3
 8002634:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 8002636:	b22d      	sxth	r5, r5
 8002638:	429d      	cmp	r5, r3
 800263a:	bf28      	it	cs
 800263c:	461d      	movcs	r5, r3
    while (cinfo.output_scanline < endY)
 800263e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002640:	42ab      	cmp	r3, r5
 8002642:	d310      	bcc.n	8002666 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe6>
    jpeg_finish_decompress(&cinfo);
 8002644:	a824      	add	r0, sp, #144	; 0x90
 8002646:	f006 fe93 	bl	8009370 <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800264a:	a824      	add	r0, sp, #144	; 0x90
 800264c:	f006 fdb8 	bl	80091c0 <jpeg_destroy_decompress>
}
 8002650:	2001      	movs	r0, #1
 8002652:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8002656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800265a:	2201      	movs	r2, #1
 800265c:	a901      	add	r1, sp, #4
 800265e:	a824      	add	r0, sp, #144	; 0x90
 8002660:	f006 ff51 	bl	8009506 <jpeg_read_scanlines>
 8002664:	e7cc      	b.n	8002600 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002666:	2201      	movs	r2, #1
 8002668:	a901      	add	r1, sp, #4
 800266a:	a824      	add	r0, sp, #144	; 0x90
 800266c:	f006 ff4b 	bl	8009506 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 8002670:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002672:	4649      	mov	r1, r9
 8002674:	4452      	add	r2, sl
 8002676:	42b9      	cmp	r1, r7
 8002678:	f102 0203 	add.w	r2, r2, #3
 800267c:	d301      	bcc.n	8002682 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x102>
        lineptr += framebuffer_width; //move to next line
 800267e:	4446      	add	r6, r8
 8002680:	e7dd      	b.n	800263e <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xbe>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002682:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8002686:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800268a:	00c0      	lsls	r0, r0, #3
 800268c:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 8002690:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002694:	4303      	orrs	r3, r0
 8002696:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800269a:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 800269e:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 80026a2:	3101      	adds	r1, #1
 80026a4:	e7e7      	b.n	8002676 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf6>
 80026a6:	bf00      	nop
 80026a8:	0802b1f7 	.word	0x0802b1f7
 80026ac:	0802b24d 	.word	0x0802b24d
 80026b0:	0802b0c3 	.word	0x0802b0c3
 80026b4:	fffff800 	.word	0xfffff800

080026b8 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80026b8:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80026ba:	6803      	ldr	r3, [r0, #0]
 80026bc:	bf38      	it	cc
 80026be:	2101      	movcc	r1, #1
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80026c2:	b570      	push	{r4, r5, r6, lr}
 80026c4:	460d      	mov	r5, r1
 80026c6:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80026c8:	4798      	blx	r3
 80026ca:	42a8      	cmp	r0, r5
 80026cc:	d204      	bcs.n	80026d8 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	4620      	mov	r0, r4
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	4798      	blx	r3
 80026d6:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026d8:	1e6b      	subs	r3, r5, #1
 80026da:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80026dc:	2210      	movs	r2, #16
 80026de:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026e0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80026e4:	f106 0108 	add.w	r1, r6, #8
 80026e8:	f7ff fecc 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80026ec:	f106 0110 	add.w	r1, r6, #16
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff fea3 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80026f6:	6a23      	ldr	r3, [r4, #32]
 80026f8:	3b04      	subs	r3, #4
 80026fa:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80026fc:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002700:	bd70      	pop	{r4, r5, r6, pc}
	...

08002704 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 8002704:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002708:	2100      	movs	r1, #0
{
 800270a:	4604      	mov	r4, r0
    readData(0, 72);
 800270c:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800270e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002710:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 8002714:	f7ff feb6 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002718:	69a7      	ldr	r7, [r4, #24]
 800271a:	2304      	movs	r3, #4
 800271c:	4a63      	ldr	r2, [pc, #396]	; (80028ac <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800271e:	4639      	mov	r1, r7
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff fe7b 	bl	800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002726:	b140      	cbz	r0, 800273a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 8002728:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800272a:	4a61      	ldr	r2, [pc, #388]	; (80028b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800272c:	21f2      	movs	r1, #242	; 0xf2
        lastError = AVI_ERROR_NOT_RIFF;
 800272e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 8002732:	4b60      	ldr	r3, [pc, #384]	; (80028b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002734:	4860      	ldr	r0, [pc, #384]	; (80028b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002736:	f026 ff75 	bl	8029624 <__assert_func>
    currentMovieOffset += 8;
 800273a:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800273e:	2304      	movs	r3, #4
 8002740:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002742:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002744:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002746:	f7ff fe69 	bl	800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800274a:	b130      	cbz	r0, 800275a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800274c:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800274e:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002750:	21fa      	movs	r1, #250	; 0xfa
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002752:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 8002756:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002758:	e7ec      	b.n	8002734 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 800275a:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800275e:	2304      	movs	r3, #4
 8002760:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002762:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002764:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002766:	f7ff fe59 	bl	800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800276a:	4606      	mov	r6, r0
 800276c:	b138      	cbz	r0, 800277e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800276e:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002770:	4a4f      	ldr	r2, [pc, #316]	; (80028b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002772:	f240 1101 	movw	r1, #257	; 0x101
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002776:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 800277c:	e7da      	b.n	8002734 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800277e:	f107 0110 	add.w	r1, r7, #16
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff fe5a 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002788:	4605      	mov	r5, r0
 800278a:	b920      	cbnz	r0, 8002796 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 800278c:	4b4f      	ldr	r3, [pc, #316]	; (80028cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 800278e:	f240 1107 	movw	r1, #263	; 0x107
 8002792:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002794:	e7ce      	b.n	8002734 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 8002796:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 800279a:	2304      	movs	r3, #4
 800279c:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 800279e:	4620      	mov	r0, r4
 80027a0:	4641      	mov	r1, r8
 80027a2:	f7ff fe3b 	bl	800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d04b      	beq.n	8002842 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80027aa:	2306      	movs	r3, #6
 80027ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 80027b0:	2304      	movs	r3, #4
 80027b2:	4a48      	ldr	r2, [pc, #288]	; (80028d4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80027b4:	f107 0118 	add.w	r1, r7, #24
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff fe2f 	bl	800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027be:	2800      	cmp	r0, #0
 80027c0:	d041      	beq.n	8002846 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80027c2:	2307      	movs	r3, #7
 80027c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80027c8:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027ca:	4f43      	ldr	r7, [pc, #268]	; (80028d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80027cc:	220c      	movs	r2, #12
 80027ce:	4620      	mov	r0, r4
 80027d0:	4629      	mov	r1, r5
 80027d2:	f7ff fe57 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027d6:	f105 0608 	add.w	r6, r5, #8
 80027da:	2304      	movs	r3, #4
 80027dc:	463a      	mov	r2, r7
 80027de:	4620      	mov	r0, r4
 80027e0:	4631      	mov	r1, r6
 80027e2:	f7ff fe1b 	bl	800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d04a      	beq.n	8002884 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d14a      	bne.n	8002888 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80027f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027f4:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027f6:	42ab      	cmp	r3, r5
 80027f8:	d84a      	bhi.n	8002890 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80027fa:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027fe:	1d29      	adds	r1, r5, #4
 8002800:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002802:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002804:	9101      	str	r1, [sp, #4]
 8002806:	f7ff fe19 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800280a:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800280c:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800280e:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff fe13 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002816:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002818:	2204      	movs	r2, #4
 800281a:	4620      	mov	r0, r4
 800281c:	4631      	mov	r1, r6
 800281e:	f7ff fe31 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002822:	2304      	movs	r3, #4
 8002824:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002826:	4631      	mov	r1, r6
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff fdf7 	bl	800241c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800282e:	2800      	cmp	r0, #0
 8002830:	d139      	bne.n	80028a6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 8002832:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002834:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8002836:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002838:	69a3      	ldr	r3, [r4, #24]
 800283a:	6223      	str	r3, [r4, #32]
}
 800283c:	b002      	add	sp, #8
 800283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002842:	2601      	movs	r6, #1
 8002844:	e7b4      	b.n	80027b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 8002846:	2e00      	cmp	r6, #0
 8002848:	d0be      	beq.n	80027c8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800284a:	f107 0120 	add.w	r1, r7, #32
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff fdf4 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002858:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800285c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002860:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002862:	4620      	mov	r0, r4
 8002864:	f7ff fdea 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002868:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800286c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff fde4 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002874:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002878:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff fdde 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002880:	6120      	str	r0, [r4, #16]
 8002882:	e7a1      	b.n	80027c8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0b8      	beq.n	80027fa <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002888:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800288a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 800288e:	e7d5      	b.n	800283c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff fdd3 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002896:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002898:	220c      	movs	r2, #12
        listOffset += listSize;
 800289a:	4405      	add	r5, r0
        readData(listOffset, 12);
 800289c:	4620      	mov	r0, r4
 800289e:	4629      	mov	r1, r5
 80028a0:	f7ff fdf0 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
 80028a4:	e797      	b.n	80027d6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80028a6:	230b      	movs	r3, #11
 80028a8:	e7ef      	b.n	800288a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80028aa:	bf00      	nop
 80028ac:	0802b2a7 	.word	0x0802b2a7
 80028b0:	0802b2c5 	.word	0x0802b2c5
 80028b4:	0802b2ac 	.word	0x0802b2ac
 80028b8:	0802b0c3 	.word	0x0802b0c3
 80028bc:	0802b2f2 	.word	0x0802b2f2
 80028c0:	0802b2f7 	.word	0x0802b2f7
 80028c4:	0802b30f 	.word	0x0802b30f
 80028c8:	0802b314 	.word	0x0802b314
 80028cc:	0802b32a 	.word	0x0802b32a
 80028d0:	0802b336 	.word	0x0802b336
 80028d4:	0802b33b 	.word	0x0802b33b
 80028d8:	0802b340 	.word	0x0802b340
 80028dc:	0802b345 	.word	0x0802b345

080028e0 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80028e0:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 80028e4:	2200      	movs	r2, #0
 80028e6:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 80028e8:	f7ff bf0c 	b.w	8002704 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080028ec <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80028ec:	b510      	push	{r4, lr}
    movieData = 0;
 80028ee:	2300      	movs	r3, #0
{
 80028f0:	4604      	mov	r4, r0
 80028f2:	4608      	mov	r0, r1
    movieData = 0;
 80028f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80028f6:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80028f8:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4798      	blx	r3
 80028fe:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002900:	4620      	mov	r0, r4
}
 8002902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002906:	f7ff befd 	b.w	8002704 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

0800290a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 800290a:	b4f0      	push	{r4, r5, r6, r7}
 800290c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002910:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 8002914:	b12a      	cbz	r2, 8002922 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002916:	b123      	cbz	r3, 8002922 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002918:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 800291c:	bcf0      	pop	{r4, r5, r6, r7}
 800291e:	f7ff bd01 	b.w	8002324 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002922:	bcf0      	pop	{r4, r5, r6, r7}
 8002924:	4770      	bx	lr
	...

08002928 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292c:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800292e:	6943      	ldr	r3, [r0, #20]
{
 8002930:	b085      	sub	sp, #20
 8002932:	4604      	mov	r4, r0
 8002934:	460f      	mov	r7, r1
 8002936:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002938:	b92b      	cbnz	r3, 8002946 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800293a:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 800293c:	2177      	movs	r1, #119	; 0x77
 800293e:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002940:	482a      	ldr	r0, [pc, #168]	; (80029ec <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002942:	f026 fe6f 	bl	8029624 <__assert_func>
    readData(currentMovieOffset, 8);
 8002946:	2208      	movs	r2, #8
 8002948:	6981      	ldr	r1, [r0, #24]
 800294a:	f7ff fd9b 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 800294e:	69a6      	ldr	r6, [r4, #24]
 8002950:	4620      	mov	r0, r4
 8002952:	4631      	mov	r1, r6
 8002954:	f7ff fd87 	bl	8002466 <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002958:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo = getU16(currentMovieOffset);
 800295a:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800295c:	4620      	mov	r0, r4
 800295e:	f7ff fd82 	bl	8002466 <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002962:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002964:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff fd68 	bl	800243c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800296c:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002970:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002972:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002974:	1842      	adds	r2, r0, r1
 8002976:	429a      	cmp	r2, r3
 8002978:	d227      	bcs.n	80029ca <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800297a:	f243 0330 	movw	r3, #12336	; 0x3030
 800297e:	459b      	cmp	fp, r3
 8002980:	d117      	bne.n	80029b2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002982:	f246 3364 	movw	r3, #25444	; 0x6364
 8002986:	459a      	cmp	sl, r3
 8002988:	d113      	bne.n	80029b2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800298a:	b190      	cbz	r0, 80029b2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800298c:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 800298e:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff fd77 	bl	8002484 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002998:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800299a:	462a      	mov	r2, r5
 800299c:	4620      	mov	r0, r4
 800299e:	f8cd 8000 	str.w	r8, [sp]
 80029a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80029a6:	463b      	mov	r3, r7
 80029a8:	f7ff ffaf 	bl	800290a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80029ac:	6963      	ldr	r3, [r4, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80029b2:	69a3      	ldr	r3, [r4, #24]
 80029b4:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80029b6:	b18d      	cbz	r5, 80029dc <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 80029b8:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80029ba:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80029bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80029be:	3301      	adds	r3, #1
 80029c0:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80029c4:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80029c6:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80029c8:	d10a      	bne.n	80029e0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 80029ca:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 80029cc:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 80029ce:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80029d0:	61a3      	str	r3, [r4, #24]
}
 80029d2:	f080 0001 	eor.w	r0, r0, #1
 80029d6:	b005      	add	sp, #20
 80029d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            currentMovieOffset += 8;
 80029dc:	3308      	adds	r3, #8
 80029de:	e7eb      	b.n	80029b8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 80029e0:	2000      	movs	r0, #0
 80029e2:	e7f6      	b.n	80029d2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80029e4:	0802b17b 	.word	0x0802b17b
 80029e8:	0802b34a 	.word	0x0802b34a
 80029ec:	0802b0c3 	.word	0x0802b0c3

080029f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80029f0:	2001      	movs	r0, #1
 80029f2:	4770      	bx	lr

080029f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80029f4:	200c      	movs	r0, #12
 80029f6:	4770      	bx	lr

080029f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80029f8:	230c      	movs	r3, #12
 80029fa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80029fe:	3008      	adds	r0, #8
 8002a00:	4770      	bx	lr

08002a02 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002a02:	230c      	movs	r3, #12
 8002a04:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002a08:	3008      	adds	r0, #8
 8002a0a:	4770      	bx	lr

08002a0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	4770      	bx	lr

08002a10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002a10:	20b4      	movs	r0, #180	; 0xb4
 8002a12:	4770      	bx	lr

08002a14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a14:	23b4      	movs	r3, #180	; 0xb4
 8002a16:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002a1a:	3008      	adds	r0, #8
 8002a1c:	4770      	bx	lr

08002a1e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a1e:	23b4      	movs	r3, #180	; 0xb4
 8002a20:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002a24:	3008      	adds	r0, #8
 8002a26:	4770      	bx	lr

08002a28 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002a28:	2001      	movs	r0, #1
 8002a2a:	4770      	bx	lr

08002a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002a2c:	2010      	movs	r0, #16
 8002a2e:	4770      	bx	lr

08002a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a30:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002a34:	3008      	adds	r0, #8
 8002a36:	4770      	bx	lr

08002a38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002a38:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002a3c:	3008      	adds	r0, #8
 8002a3e:	4770      	bx	lr

08002a40 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002a40:	4608      	mov	r0, r1
 8002a42:	f000 be3b 	b.w	80036bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08002a48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	6003      	str	r3, [r0, #0]
 8002a50:	f013 fc38 	bl	80162c4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a54:	4620      	mov	r0, r4
 8002a56:	bd10      	pop	{r4, pc}
 8002a58:	0802b458 	.word	0x0802b458

08002a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4604      	mov	r4, r0
 8002a60:	f7ff fff2 	bl	8002a48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a64:	2114      	movs	r1, #20
 8002a66:	4620      	mov	r0, r4
 8002a68:	f026 fdae 	bl	80295c8 <_ZdlPvj>
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a72:	b510      	push	{r4, lr}
 8002a74:	4604      	mov	r4, r0
 8002a76:	6003      	str	r3, [r0, #0]
 8002a78:	f013 fc24 	bl	80162c4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	bd10      	pop	{r4, pc}
 8002a80:	0802b424 	.word	0x0802b424

08002a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a84:	b510      	push	{r4, lr}
 8002a86:	4604      	mov	r4, r0
 8002a88:	f7ff fff2 	bl	8002a70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a8c:	21bc      	movs	r1, #188	; 0xbc
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f026 fd9a 	bl	80295c8 <_ZdlPvj>
 8002a94:	4620      	mov	r0, r4
 8002a96:	bd10      	pop	{r4, pc}

08002a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a9a:	b510      	push	{r4, lr}
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	6003      	str	r3, [r0, #0]
 8002aa0:	f013 fc10 	bl	80162c4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	bd10      	pop	{r4, pc}
 8002aa8:	0802b3f0 	.word	0x0802b3f0

08002aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002aac:	b510      	push	{r4, lr}
 8002aae:	4604      	mov	r4, r0
 8002ab0:	f7ff fff2 	bl	8002a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ab4:	2118      	movs	r1, #24
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f026 fd86 	bl	80295c8 <_ZdlPvj>
 8002abc:	4620      	mov	r0, r4
 8002abe:	bd10      	pop	{r4, pc}

08002ac0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <_ZN12FrontendHeapD1Ev+0x24>)
 8002ac2:	b510      	push	{r4, lr}
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	f840 3be8 	str.w	r3, [r0], #232
 8002aca:	f7ff ffbd 	bl	8002a48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ace:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002ad2:	f7ff ffcd 	bl	8002a70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ad6:	f104 0014 	add.w	r0, r4, #20
 8002ada:	f7ff ffdd 	bl	8002a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ade:	4620      	mov	r0, r4
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	0802b48c 	.word	0x0802b48c

08002ae8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002ae8:	b508      	push	{r3, lr}
 8002aea:	4802      	ldr	r0, [pc, #8]	; (8002af4 <__tcf_0+0xc>)
 8002aec:	f7ff ffe8 	bl	8002ac0 <_ZN12FrontendHeapD1Ev>
 8002af0:	bd08      	pop	{r3, pc}
 8002af2:	bf00      	nop
 8002af4:	200003bc 	.word	0x200003bc

08002af8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002af8:	b510      	push	{r4, lr}
 8002afa:	4604      	mov	r4, r0
 8002afc:	f7ff ffe0 	bl	8002ac0 <_ZN12FrontendHeapD1Ev>
 8002b00:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8002b04:	4620      	mov	r0, r4
 8002b06:	f026 fd5f 	bl	80295c8 <_ZdlPvj>
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	bd10      	pop	{r4, pc}
	...

08002b10 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002b10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002b14:	f000 fc52 	bl	80033bc <_ZN14BitmapDatabase11getInstanceEv>
 8002b18:	2400      	movs	r4, #0
 8002b1a:	4605      	mov	r5, r0
 8002b1c:	f000 fc52 	bl	80033c4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002b20:	4623      	mov	r3, r4
 8002b22:	4601      	mov	r1, r0
 8002b24:	4622      	mov	r2, r4
 8002b26:	4628      	mov	r0, r5
 8002b28:	9400      	str	r4, [sp, #0]
 8002b2a:	f019 f8cb 	bl	801bcc4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <touchgfx_init+0xb4>)
 8002b30:	4a25      	ldr	r2, [pc, #148]	; (8002bc8 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002b32:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002b34:	4d25      	ldr	r5, [pc, #148]	; (8002bcc <touchgfx_init+0xbc>)
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f001 f81a 	bl	8003b70 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002b3c:	4824      	ldr	r0, [pc, #144]	; (8002bd0 <touchgfx_init+0xc0>)
 8002b3e:	f019 f829 	bl	801bb94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	f3bf 8f5b 	dmb	ish
 8002b48:	07db      	lsls	r3, r3, #31
 8002b4a:	d435      	bmi.n	8002bb8 <touchgfx_init+0xa8>
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f026 fd3d 	bl	80295cc <__cxa_guard_acquire>
 8002b52:	b388      	cbz	r0, 8002bb8 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002b54:	4c1f      	ldr	r4, [pc, #124]	; (8002bd4 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <touchgfx_init+0xc8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002b58:	f504 7680 	add.w	r6, r4, #256	; 0x100
        : presenterStorage(pres),
 8002b5c:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8002b60:	f104 082c 	add.w	r8, r4, #44	; 0x2c
          transitionStorage(tra),
 8002b64:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8002b68:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8002b6a:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002b6c:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002b70:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002b72:	6126      	str	r6, [r4, #16]
 8002b74:	f013 fba8 	bl	80162c8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <touchgfx_init+0xcc>)
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	6163      	str	r3, [r4, #20]
 8002b7e:	f013 fba3 	bl	80162c8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <touchgfx_init+0xd0>)
 8002b84:	4638      	mov	r0, r7
 8002b86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b88:	f013 fb9e 	bl	80162c8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <touchgfx_init+0xd4>)
 8002b8e:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 8002b92:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8002b96:	f001 f867 	bl	8003c68 <_ZN5ModelC1Ev>
 8002b9a:	4622      	mov	r2, r4
 8002b9c:	f104 01fc 	add.w	r1, r4, #252	; 0xfc
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	f001 f857 	bl	8003c54 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	f000 fd88 	bl	80036bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002bac:	480e      	ldr	r0, [pc, #56]	; (8002be8 <touchgfx_init+0xd8>)
 8002bae:	f026 fd57 	bl	8029660 <atexit>
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f026 fd16 	bl	80295e4 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <touchgfx_init+0xdc>)
}
 8002bba:	b002      	add	sp, #8
 8002bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002bc0:	f7ff b8a2 	b.w	8001d08 <_ZN11TouchGFXHAL10initializeEv>
 8002bc4:	20015094 	.word	0x20015094
 8002bc8:	20001438 	.word	0x20001438
 8002bcc:	200003b8 	.word	0x200003b8
 8002bd0:	20000008 	.word	0x20000008
 8002bd4:	200003bc 	.word	0x200003bc
 8002bd8:	0802b48c 	.word	0x0802b48c
 8002bdc:	0802b3f0 	.word	0x0802b3f0
 8002be0:	0802b424 	.word	0x0802b424
 8002be4:	0802b458 	.word	0x0802b458
 8002be8:	08002ae9 	.word	0x08002ae9
 8002bec:	200013bc 	.word	0x200013bc

08002bf0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002bf0:	4770      	bx	lr
	...

08002bf4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002bf4:	4801      	ldr	r0, [pc, #4]	; (8002bfc <touchgfx_taskEntry+0x8>)
 8002bf6:	f013 be78 	b.w	80168ea <_ZN8touchgfx3HAL9taskEntryEv>
 8002bfa:	bf00      	nop
 8002bfc:	200013bc 	.word	0x200013bc

08002c00 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002c00:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002c02:	4e22      	ldr	r6, [pc, #136]	; (8002c8c <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <_GLOBAL__sub_I_touchgfx_init+0x90>)
 8002c06:	4c23      	ldr	r4, [pc, #140]	; (8002c94 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002c08:	4630      	mov	r0, r6
static LCD16bpp display;
 8002c0a:	4d23      	ldr	r5, [pc, #140]	; (8002c98 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002c0c:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002c0e:	f7ff fa19 	bl	8002044 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002c12:	4628      	mov	r0, r5
 8002c14:	f01d fb30 	bl	8020278 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
          mcuInstrumentation(0),
 8002c1a:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c20:	481f      	ldr	r0, [pc, #124]	; (8002ca0 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002c22:	861a      	strh	r2, [r3, #48]	; 0x30
          useAuxiliaryLCD(false),
 8002c24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          lastY(0),
 8002c28:	665a      	str	r2, [r3, #100]	; 0x64
          updateMCULoad(0),
 8002c2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8002c2e:	675a      	str	r2, [r3, #116]	; 0x74
          touchController(touchCtrl),
 8002c30:	60dc      	str	r4, [r3, #12]
          auxiliaryLCD(0),
 8002c32:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
          touchSampleRate(1),
 8002c36:	491b      	ldr	r1, [pc, #108]	; (8002ca4 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
          vSyncCompensationEnabled(false),
 8002c38:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002c3c:	491a      	ldr	r1, [pc, #104]	; (8002ca8 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002c3e:	6799      	str	r1, [r3, #120]	; 0x78
        instance = this;
 8002c40:	491a      	ldr	r1, [pc, #104]	; (8002cac <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002c42:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c44:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002c48:	8001      	strh	r1, [r0, #0]
 8002c4a:	4819      	ldr	r0, [pc, #100]	; (8002cb0 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002c4c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c4e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002c52:	4818      	ldr	r0, [pc, #96]	; (8002cb4 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          buttonController(0),
 8002c54:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002c58:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002c5c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002c60:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
          frameBuffer0(0),
 8002c64:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
 8002c68:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002c6c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
          lastX(0),
 8002c70:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
          lcdRef(display),
 8002c74:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c78:	8001      	strh	r1, [r0, #0]
 8002c7a:	480f      	ldr	r0, [pc, #60]	; (8002cb8 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c80:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002c82:	490e      	ldr	r1, [pc, #56]	; (8002cbc <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002c84:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002c86:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	2000061c 	.word	0x2000061c
 8002c90:	0802ab48 	.word	0x0802ab48
 8002c94:	20000618 	.word	0x20000618
 8002c98:	2000143c 	.word	0x2000143c
 8002c9c:	200013bc 	.word	0x200013bc
 8002ca0:	2001502c 	.word	0x2001502c
 8002ca4:	01000001 	.word	0x01000001
 8002ca8:	01010000 	.word	0x01010000
 8002cac:	20015038 	.word	0x20015038
 8002cb0:	20015032 	.word	0x20015032
 8002cb4:	2001502e 	.word	0x2001502e
 8002cb8:	20015034 	.word	0x20015034
 8002cbc:	20015030 	.word	0x20015030
 8002cc0:	0802acd4 	.word	0x0802acd4

08002cc4 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002cc6:	f7ff b999 	b.w	8001ffc <_ZN8STM32DMAD1Ev>
 8002cca:	bf00      	nop
 8002ccc:	2000061c 	.word	0x2000061c

08002cd0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	4770      	bx	lr

08002cd4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002cd4:	8081      	strh	r1, [r0, #4]
    }
 8002cd6:	4770      	bx	lr

08002cd8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002cd8:	80c1      	strh	r1, [r0, #6]
    }
 8002cda:	4770      	bx	lr

08002cdc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002cdc:	8101      	strh	r1, [r0, #8]
    }
 8002cde:	4770      	bx	lr

08002ce0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002ce0:	8141      	strh	r1, [r0, #10]
    }
 8002ce2:	4770      	bx	lr

08002ce4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002ce4:	4770      	bx	lr

08002ce6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002ce6:	4770      	bx	lr

08002ce8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002ce8:	4770      	bx	lr

08002cea <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002cea:	4770      	bx	lr

08002cec <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002cec:	4770      	bx	lr

08002cee <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002cee:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002cf0:	88c4      	ldrh	r4, [r0, #6]
 8002cf2:	6803      	ldr	r3, [r0, #0]
 8002cf4:	1b12      	subs	r2, r2, r4
 8002cf6:	8884      	ldrh	r4, [r0, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	1b09      	subs	r1, r1, r4
 8002cfc:	b212      	sxth	r2, r2
    }
 8002cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002d02:	b209      	sxth	r1, r1
 8002d04:	4718      	bx	r3

08002d06 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d10:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002d16:	6010      	str	r0, [r2, #0]
    }
 8002d18:	4770      	bx	lr

08002d1a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002d1a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002d1e:	b11a      	cbz	r2, 8002d28 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002d20:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002d24:	b102      	cbz	r2, 8002d28 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002d26:	6018      	str	r0, [r3, #0]
        }
    }
 8002d28:	4770      	bx	lr
	...

08002d2c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002d2e:	2290      	movs	r2, #144	; 0x90
 8002d30:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002d34:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002d40:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002d42:	490a      	ldr	r1, [pc, #40]	; (8002d6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002d44:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002d46:	480a      	ldr	r0, [pc, #40]	; (8002d70 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002d52:	6911      	ldr	r1, [r2, #16]
 8002d54:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002d58:	3901      	subs	r1, #1
 8002d5a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002d5e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002d66:	4770      	bx	lr
 8002d68:	40016800 	.word	0x40016800
 8002d6c:	200014c2 	.word	0x200014c2
 8002d70:	200014c0 	.word	0x200014c0

08002d74 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002d74:	4b01      	ldr	r3, [pc, #4]	; (8002d7c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002d76:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002d7a:	4770      	bx	lr
 8002d7c:	40016800 	.word	0x40016800

08002d80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002d82:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002d84:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d8a:	4770      	bx	lr
 8002d8c:	40016800 	.word	0x40016800

08002d90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d90:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002d92:	6953      	ldr	r3, [r2, #20]
 8002d94:	03db      	lsls	r3, r3, #15
{
 8002d96:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d98:	d51e      	bpl.n	8002dd8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002da0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002da4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002da8:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002dac:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002db0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002db4:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002db6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002dba:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002dbc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002dc0:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002dc2:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002dc6:	d2f9      	bcs.n	8002dbc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002dc8:	3b20      	subs	r3, #32
 8002dca:	f113 0f20 	cmn.w	r3, #32
 8002dce:	d1f2      	bne.n	8002db6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dd4:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002de0:	4770      	bx	lr

08002de2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002de2:	2338      	movs	r3, #56	; 0x38
 8002de4:	2200      	movs	r2, #0
 8002de6:	fb01 3303 	mla	r3, r1, r3, r3
 8002dea:	54c2      	strb	r2, [r0, r3]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002dec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002df0:	b90b      	cbnz	r3, 8002df6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002df2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002df4:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002df6:	4770      	bx	lr

08002df8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002df8:	4770      	bx	lr

08002dfa <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	2158      	movs	r1, #88	; 0x58
 8002e00:	f026 fbe2 	bl	80295c8 <_ZdlPvj>
 8002e04:	4620      	mov	r0, r4
 8002e06:	bd10      	pop	{r4, pc}

08002e08 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4604      	mov	r4, r0
    HAL::initialize();
 8002e0c:	f013 fd59 	bl	80168c2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002e14:	f016 fa9e 	bl	8019354 <_ZN8touchgfx11Application11getInstanceEv>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002e22:	4620      	mov	r0, r4
 8002e24:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002e2e:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002e32:	4a06      	ldr	r2, [pc, #24]	; (8002e4c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002e34:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002e36:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002e3a:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002e3c:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	c007f800 	.word	0xc007f800
 8002e48:	20001c8c 	.word	0x20001c8c
 8002e4c:	20001c44 	.word	0x20001c44
 8002e50:	c00bf400 	.word	0xc00bf400

08002e54 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002e54:	f013 bd1c 	b.w	8016890 <_ZN8touchgfx3HAL10beginFrameEv>

08002e58 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8002e58:	f013 bd26 	b.w	80168a8 <_ZN8touchgfx3HAL8endFrameEv>

08002e5c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002e5c:	f013 bce2 	b.w	8016824 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002e60 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002e60:	f013 be51 	b.w	8016b06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002e64 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002e64:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002e68:	b112      	cbz	r2, 8002e70 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002e6a:	6803      	ldr	r3, [r0, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4718      	bx	r3
    }
 8002e70:	4770      	bx	lr
	...

08002e74 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 8002e74:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002e76:	b131      	cbz	r1, 8002e86 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002e7a:	f240 1197 	movw	r1, #407	; 0x197
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002e80:	4804      	ldr	r0, [pc, #16]	; (8002e94 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002e82:	f026 fbcf 	bl	8029624 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002e86:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002e8a:	bd08      	pop	{r3, pc}
 8002e8c:	0802b498 	.word	0x0802b498
 8002e90:	0802b4ac 	.word	0x0802b4ac
 8002e94:	0802b639 	.word	0x0802b639

08002e98 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002e98:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002e9a:	b131      	cbz	r1, 8002eaa <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002e9e:	f240 1191 	movw	r1, #401	; 0x191
 8002ea2:	4a06      	ldr	r2, [pc, #24]	; (8002ebc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002ea4:	4806      	ldr	r0, [pc, #24]	; (8002ec0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002ea6:	f026 fbbd 	bl	8029624 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002eaa:	6840      	ldr	r0, [r0, #4]
 8002eac:	4611      	mov	r1, r2
 8002eae:	6803      	ldr	r3, [r0, #0]
    }
 8002eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4718      	bx	r3
 8002eb8:	0802b498 	.word	0x0802b498
 8002ebc:	0802b67b 	.word	0x0802b67b
 8002ec0:	0802b639 	.word	0x0802b639

08002ec4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002ec4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002ec6:	b129      	cbz	r1, 8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002eca:	217a      	movs	r1, #122	; 0x7a
 8002ecc:	4a03      	ldr	r2, [pc, #12]	; (8002edc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002ece:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002ed0:	f026 fba8 	bl	8029624 <__assert_func>
    }
 8002ed4:	6900      	ldr	r0, [r0, #16]
 8002ed6:	bd08      	pop	{r3, pc}
 8002ed8:	0802b498 	.word	0x0802b498
 8002edc:	0802b82c 	.word	0x0802b82c
 8002ee0:	0802b639 	.word	0x0802b639

08002ee4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002ee4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002ee6:	b129      	cbz	r1, 8002ef4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002eea:	2183      	movs	r1, #131	; 0x83
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002eee:	4806      	ldr	r0, [pc, #24]	; (8002f08 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002ef0:	f026 fb98 	bl	8029624 <__assert_func>
        stream.tickCount = 0;
 8002ef4:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002ef6:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002ef8:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002efc:	bd08      	pop	{r3, pc}
 8002efe:	bf00      	nop
 8002f00:	0802b498 	.word	0x0802b498
 8002f04:	0802b9e4 	.word	0x0802b9e4
 8002f08:	0802b639 	.word	0x0802b639

08002f0c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002f10:	b129      	cbz	r1, 8002f1e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8002f14:	21a4      	movs	r1, #164	; 0xa4
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8002f18:	4827      	ldr	r0, [pc, #156]	; (8002fb8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8002f1a:	f026 fb83 	bl	8029624 <__assert_func>
        switch (cmd)
 8002f1e:	2a05      	cmp	r2, #5
 8002f20:	d834      	bhi.n	8002f8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002f22:	e8df f002 	tbb	[pc, r2]
 8002f26:	2903      	.short	0x2903
 8002f28:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8002f2c:	6840      	ldr	r0, [r0, #4]
 8002f2e:	6803      	ldr	r3, [r0, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	4798      	blx	r3
 8002f34:	b350      	cbz	r0, 8002f8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 8002f36:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f3c:	f003 fea0 	bl	8006c80 <osMutexAcquire>
                stream.cancelDecoding = false;
 8002f40:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8002f42:	2201      	movs	r2, #1
                if (stream.isStopped)
 8002f44:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8002f48:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8002f4c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8002f50:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002f52:	6163      	str	r3, [r4, #20]
                if (stream.isStopped)
 8002f54:	b101      	cbz	r1, 8002f58 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 8002f56:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8002f58:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8002f5c:	6263      	str	r3, [r4, #36]	; 0x24
                if (stream.nextBuffer == 0)
 8002f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f60:	b92b      	cbnz	r3, 8002f6e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 8002f62:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 8002f64:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 8002f66:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8002f6a:	f003 ff73 	bl	8006e54 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8002f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8002f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8002f74:	f003 beb4 	b.w	8006ce0 <osMutexRelease>
            stream.isPlaying = false;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 8002f82:	e003      	b.n	8002f8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8002f84:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002f8a:	6143      	str	r3, [r0, #20]
    }
 8002f8c:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002f8e:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002f94:	6143      	str	r3, [r0, #20]
 8002f96:	e7f2      	b.n	8002f7e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e7ed      	b.n	8002f7e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 8002fa2:	3b00      	subs	r3, #0
 8002fa4:	bf18      	it	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8002fac:	e7ee      	b.n	8002f8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002fae:	bf00      	nop
 8002fb0:	0802b498 	.word	0x0802b498
 8002fb4:	0802bba3 	.word	0x0802bba3
 8002fb8:	0802b639 	.word	0x0802b639

08002fbc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8002fc2:	b129      	cbz	r1, 8002fd0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8002fc6:	21e7      	movs	r1, #231	; 0xe7
 8002fc8:	4a31      	ldr	r2, [pc, #196]	; (8003090 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8002fca:	4832      	ldr	r0, [pc, #200]	; (8003094 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8002fcc:	f026 fb2a 	bl	8029624 <__assert_func>
        if (stream.isPlaying)
 8002fd0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fd4:	b133      	cbz	r3, 8002fe4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002fde:	6943      	ldr	r3, [r0, #20]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002fe4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d04d      	beq.n	8003086 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002fea:	69e1      	ldr	r1, [r4, #28]
 8002fec:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002ff0:	4353      	muls	r3, r2
 8002ff2:	68a2      	ldr	r2, [r4, #8]
 8002ff4:	434a      	muls	r2, r1
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d220      	bcs.n	800303c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002ffa:	6a23      	ldr	r3, [r4, #32]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d042      	beq.n	8003086 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8003000:	f04f 31ff 	mov.w	r1, #4294967295
 8003004:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003006:	f003 fe3b 	bl	8006c80 <osMutexAcquire>
            if (stream.seek_to_frame > 0)
 800300a:	6a23      	ldr	r3, [r4, #32]
 800300c:	b10b      	cbz	r3, 8003012 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	62e3      	str	r3, [r4, #44]	; 0x2c
            if (stream.nextBuffer != 0)
 8003012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003014:	b9fb      	cbnz	r3, 8003056 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 8003016:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8003018:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800301a:	f003 fe61 	bl	8006ce0 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 800301e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003022:	b90b      	cbnz	r3, 8003028 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8003024:	6a23      	ldr	r3, [r4, #32]
 8003026:	b13b      	cbz	r3, 8003038 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8003028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800302a:	b92b      	cbnz	r3, 8003038 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 800302c:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 800302e:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8003030:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8003034:	f003 ff0e 	bl	8006e54 <osSemaphoreRelease>
    }
 8003038:	4628      	mov	r0, r5
 800303a:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 800303c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8003040:	2800      	cmp	r0, #0
 8003042:	d0dd      	beq.n	8003000 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800304a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800304c:	bf98      	it	ls
 800304e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003052:	6262      	str	r2, [r4, #36]	; 0x24
 8003054:	e7d4      	b.n	8003000 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 8003056:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8003058:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 800305c:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 800305e:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8003060:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 8003062:	68e2      	ldr	r2, [r4, #12]
 8003064:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 8003066:	68a2      	ldr	r2, [r4, #8]
 8003068:	3201      	adds	r2, #1
 800306a:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800306c:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 800306e:	6833      	ldr	r3, [r6, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8003074:	2d00      	cmp	r5, #0
 8003076:	d1ce      	bne.n	8003016 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8003078:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1cb      	bne.n	8003018 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 8003080:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8003084:	e7c8      	b.n	8003018 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 8003086:	2501      	movs	r5, #1
 8003088:	e7c9      	b.n	800301e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 800308a:	bf00      	nop
 800308c:	0802b498 	.word	0x0802b498
 8003090:	0802bd7a 	.word	0x0802bd7a
 8003094:	0802b639 	.word	0x0802b639
 8003098:	20015038 	.word	0x20015038

0800309c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800309e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a8:	609a      	str	r2, [r3, #8]
}
 80030aa:	4770      	bx	lr
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80030b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80030ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80030ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030ce:	f3bf 8f6f 	isb	sy
}
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80030dc:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80030e0:	bb38      	cbnz	r0, 8003132 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x5a>
        streams[handle].isActive = true;
 80030e2:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 80030e4:	6098      	str	r0, [r3, #8]
 80030e6:	60d8      	str	r0, [r3, #12]
        streams[handle].isActive = true;
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
                streams[i] = Stream();
 80030ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ee:	6158      	str	r0, [r3, #20]
 80030f0:	879a      	strh	r2, [r3, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80030f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030f6:	6198      	str	r0, [r3, #24]
 80030f8:	61d8      	str	r0, [r3, #28]
 80030fa:	6218      	str	r0, [r3, #32]
 80030fc:	6258      	str	r0, [r3, #36]	; 0x24
 80030fe:	6298      	str	r0, [r3, #40]	; 0x28
 8003100:	62d8      	str	r0, [r3, #44]	; 0x2c
 8003102:	6318      	str	r0, [r3, #48]	; 0x30
 8003104:	6358      	str	r0, [r3, #52]	; 0x34
 8003106:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
 800310a:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 800310c:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8003110:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
        bufferHeight = height;
 8003114:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8003116:	6308      	str	r0, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 800311a:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800311c:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8003120:	e9d3 1510 	ldrd	r1, r5, [r3, #64]	; 0x40
 8003124:	4429      	add	r1, r5
 8003126:	428c      	cmp	r4, r1
 8003128:	d90a      	bls.n	8003140 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 800312a:	4b08      	ldr	r3, [pc, #32]	; (800314c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 800312c:	2158      	movs	r1, #88	; 0x58
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003130:	e003      	b.n	800313a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x62>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 8003134:	f240 11f5 	movw	r1, #501	; 0x1f5
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 800313a:	4808      	ldr	r0, [pc, #32]	; (800315c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 800313c:	f026 fa72 	bl	8029624 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003142:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003146:	649c      	str	r4, [r3, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 8003148:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	0802c0d8 	.word	0x0802c0d8
 8003150:	0802c118 	.word	0x0802c118
 8003154:	0802bf1e 	.word	0x0802bf1e
 8003158:	0802bf4e 	.word	0x0802bf4e
 800315c:	0802b639 	.word	0x0802b639

08003160 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003160:	b510      	push	{r4, lr}
        return instance;
 8003162:	4c14      	ldr	r4, [pc, #80]	; (80031b4 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	b323      	cbz	r3, 80031b2 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_LTDC_LineEventCallback+0x58>)
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_LTDC_LineEventCallback+0x5c>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	8811      	ldrh	r1, [r2, #0]
 8003170:	428b      	cmp	r3, r1
 8003172:	d113      	bne.n	800319c <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_LTDC_LineEventCallback+0x60>)
 8003176:	8819      	ldrh	r1, [r3, #0]
 8003178:	f002 f970 	bl	800545c <HAL_LTDC_ProgramLineEvent>
 800317c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800317e:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 8003182:	3301      	adds	r3, #1
 8003184:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8003188:	f7fe fee8 	bl	8001f5c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	f014 f8e5 	bl	801735c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003192:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8003194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003198:	f7fe bce6 	b.w	8001b68 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800319c:	f002 f95e 	bl	800545c <HAL_LTDC_ProgramLineEvent>
        return instance;
 80031a0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80031a8:	2000      	movs	r0, #0
    }
 80031aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80031ae:	f7fe bd0b 	b.w	8001bc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80031b2:	bd10      	pop	{r4, pc}
 80031b4:	20015038 	.word	0x20015038
 80031b8:	40016800 	.word	0x40016800
 80031bc:	200014c2 	.word	0x200014c2
 80031c0:	200014c0 	.word	0x200014c0

080031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80031c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80031c8:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 80031ca:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80031ce:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 80031d2:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d031      	beq.n	800323e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x7a>
            MUTEX_LOCK(mutexBuffers);
 80031da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031dc:	f003 fd50 	bl	8006c80 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 80031e0:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80031e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031e4:	42bb      	cmp	r3, r7
 80031e6:	d100      	bne.n	80031ea <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x26>
 80031e8:	6b67      	ldr	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 80031ea:	6a26      	ldr	r6, [r4, #32]
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 80031ec:	6865      	ldr	r5, [r4, #4]
            if (stream.seek_to_frame > 0)
 80031ee:	b356      	cbz	r6, 8003246 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x82>
                decoder->gotoFrame(stream.seek_to_frame);
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	4798      	blx	r3
                stream.seek_to_frame = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 80031fe:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003204:	f003 fd6c 	bl	8006ce0 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800320e:	4639      	mov	r1, r7
 8003210:	f8cd 8000 	str.w	r8, [sp]
 8003214:	4628      	mov	r0, r5
 8003216:	695e      	ldr	r6, [r3, #20]
 8003218:	f44f 7388 	mov.w	r3, #272	; 0x110
 800321c:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 800321e:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003222:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 8003224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003226:	f003 fd2b 	bl	8006c80 <osMutexAcquire>
            if (stream.cancelDecoding)
 800322a:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800322e:	b1e3      	cbz	r3, 800326a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa6>
                stream.cancelDecoding = false;
 8003230:	2300      	movs	r3, #0
 8003232:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003238:	f003 fd52 	bl	8006ce0 <osMutexRelease>
 800323c:	e7c7      	b.n	80031ce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                SEM_WAIT(semDecode);
 800323e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003240:	f003 fdce 	bl	8006de0 <osSemaphoreAcquire>
                continue;
 8003244:	e7c3      	b.n	80031ce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 8003246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0da      	beq.n	8003202 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x3e>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	4628      	mov	r0, r5
 8003250:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 8003254:	4798      	blx	r3
 8003256:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003258:	4401      	add	r1, r0
 800325a:	4628      	mov	r0, r5
 800325c:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 800325e:	68a3      	ldr	r3, [r4, #8]
 8003260:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 8003262:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 8003264:	4413      	add	r3, r2
 8003266:	60a3      	str	r3, [r4, #8]
 8003268:	e7cb      	b.n	8003202 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x3e>
                stream.nextBuffer = decodeBuffer;
 800326a:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 800326c:	b15e      	cbz	r6, 8003286 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc2>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	4628      	mov	r0, r5
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	4798      	blx	r3
 8003276:	3801      	subs	r0, #1
                stream.doDecodeNewFrame = false;
 8003278:	2300      	movs	r3, #0
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800327a:	60e0      	str	r0, [r4, #12]
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 800327c:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 8003280:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8003284:	e7d7      	b.n	8003236 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x72>
 8003286:	2001      	movs	r0, #1
 8003288:	e7f6      	b.n	8003278 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

0800328c <videoTaskFunc>:
    videoController.decoderTaskEntry();
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <videoTaskFunc+0x8>)
{
 800328e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003290:	f7ff ff98 	bl	80031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8003294:	20001c8c 	.word	0x20001c8c

08003298 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 8003298:	6803      	ldr	r3, [r0, #0]
 800329a:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 80032a0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80032a2:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 80032a4:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 80032a6:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032ae:	f003 fce7 	bl	8006c80 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 80032b2:	2338      	movs	r3, #56	; 0x38
 80032b4:	fb03 4205 	mla	r2, r3, r5, r4
 80032b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032ba:	b109      	cbz	r1, 80032c0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 80032bc:	2100      	movs	r1, #0
 80032be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032c0:	fb03 4505 	mla	r5, r3, r5, r4
        }
        stream.cancelDecoding = true;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 80032d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 80032d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 80032d6:	f003 bd03 	b.w	8006ce0 <osMutexRelease>

080032da <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 80032da:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 80032dc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 80032e0:	4604      	mov	r4, r0
 80032e2:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 80032e4:	4611      	mov	r1, r2
 80032e6:	6858      	ldr	r0, [r3, #4]
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4798      	blx	r3
        clearState(handle);
 80032ee:	4629      	mov	r1, r5
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ffd1 	bl	8003298 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 80032f6:	bd38      	pop	{r3, r4, r5, pc}

080032f8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	460d      	mov	r5, r1
 80032fc:	4611      	mov	r1, r2
 80032fe:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003300:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003304:	6850      	ldr	r0, [r2, #4]
 8003306:	6802      	ldr	r2, [r0, #0]
 8003308:	6896      	ldr	r6, [r2, #8]
 800330a:	461a      	mov	r2, r3
 800330c:	47b0      	blx	r6
        clearState(handle);
 800330e:	4629      	mov	r1, r5
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff ffc1 	bl	8003298 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003316:	bd70      	pop	{r4, r5, r6, pc}

08003318 <_GLOBAL__sub_I_lineBuffer>:
}
 8003318:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 800331a:	4916      	ldr	r1, [pc, #88]	; (8003374 <_GLOBAL__sub_I_lineBuffer+0x5c>)
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 800331c:	2500      	movs	r5, #0
 800331e:	4816      	ldr	r0, [pc, #88]	; (8003378 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8003320:	f7ff f864 	bl	80023ec <_ZN20SoftwareMJPEGDecoderC1EPh>
          semDecode(0), mutexBuffers(0)
 8003324:	4c15      	ldr	r4, [pc, #84]	; (800337c <_GLOBAL__sub_I_lineBuffer+0x64>)
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <_GLOBAL__sub_I_lineBuffer+0x68>)
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003328:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 800332a:	462a      	mov	r2, r5
 800332c:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 800332e:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003330:	f44f 7380 	mov.w	r3, #256	; 0x100
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003334:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003336:	87a3      	strh	r3, [r4, #60]	; 0x3c
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003338:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 800333c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003340:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
          semDecode(0), mutexBuffers(0)
 8003344:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800334c:	e9c4 5503 	strd	r5, r5, [r4, #12]
            frame_rate_video(0), frame_rate_ticks(0),
 8003350:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003354:	e9c4 5507 	strd	r5, r5, [r4, #28]
            currentBuffer(0), nextBuffer(0), bufferA(0), bufferB(0),
 8003358:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 800335c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 8003364:	f003 fce6 	bl	8006d34 <osSemaphoreNew>
 8003368:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 800336a:	4628      	mov	r0, r5
 800336c:	f003 fc44 	bl	8006bf8 <osMutexNew>
 8003370:	6560      	str	r0, [r4, #84]	; 0x54
}
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	200014c4 	.word	0x200014c4
 8003378:	20001c44 	.word	0x20001c44
 800337c:	20001c8c 	.word	0x20001c8c
 8003380:	0802c2c8 	.word	0x0802c2c8

08003384 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003384:	4770      	bx	lr

08003386 <_ZN23ApplicationFontProviderD0Ev>:
 8003386:	b510      	push	{r4, lr}
 8003388:	4604      	mov	r4, r0
 800338a:	2104      	movs	r1, #4
 800338c:	f026 f91c 	bl	80295c8 <_ZdlPvj>
 8003390:	4620      	mov	r0, r4
 8003392:	bd10      	pop	{r4, pc}

08003394 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003394:	2901      	cmp	r1, #1
{
 8003396:	b508      	push	{r3, lr}
    switch (typography)
 8003398:	d006      	beq.n	80033a8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800339a:	2902      	cmp	r1, #2
 800339c:	d008      	beq.n	80033b0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 800339e:	b959      	cbnz	r1, 80033b8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80033a0:	f000 fc32 	bl	8003c08 <_ZN17TypedTextDatabase8getFontsEv>
 80033a4:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80033a6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80033a8:	f000 fc2e 	bl	8003c08 <_ZN17TypedTextDatabase8getFontsEv>
 80033ac:	6840      	ldr	r0, [r0, #4]
 80033ae:	e7fa      	b.n	80033a6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80033b0:	f000 fc2a 	bl	8003c08 <_ZN17TypedTextDatabase8getFontsEv>
 80033b4:	6880      	ldr	r0, [r0, #8]
 80033b6:	e7f6      	b.n	80033a6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80033b8:	2000      	movs	r0, #0
 80033ba:	e7f4      	b.n	80033a6 <_ZN23ApplicationFontProvider7getFontEt+0x12>

080033bc <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80033bc:	4800      	ldr	r0, [pc, #0]	; (80033c0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80033be:	4770      	bx	lr
 80033c0:	0802c310 	.word	0x0802c310

080033c4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80033c4:	2002      	movs	r0, #2
 80033c6:	4770      	bx	lr

080033c8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80033c8:	b513      	push	{r0, r1, r4, lr}
 80033ca:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80033cc:	b151      	cbz	r1, 80033e4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80033ce:	6803      	ldr	r3, [r0, #0]
 80033d0:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80033d2:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80033d4:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80033d8:	689c      	ldr	r4, [r3, #8]
 80033da:	f10d 0303 	add.w	r3, sp, #3
 80033de:	47a0      	blx	r4
        return glyph;
    }
 80033e0:	b002      	add	sp, #8
 80033e2:	bd10      	pop	{r4, pc}
            return 0;
 80033e4:	4608      	mov	r0, r1
 80033e6:	e7fb      	b.n	80033e0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080033e8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80033e8:	89c0      	ldrh	r0, [r0, #14]
 80033ea:	4770      	bx	lr

080033ec <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80033ec:	8a00      	ldrh	r0, [r0, #16]
 80033ee:	4770      	bx	lr

080033f0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80033f0:	88c0      	ldrh	r0, [r0, #6]
 80033f2:	4770      	bx	lr

080033f4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80033f4:	8880      	ldrh	r0, [r0, #4]
 80033f6:	4770      	bx	lr

080033f8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80033f8:	7a80      	ldrb	r0, [r0, #10]
    }
 80033fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80033fe:	4770      	bx	lr

08003400 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003400:	7a80      	ldrb	r0, [r0, #10]
    }
 8003402:	09c0      	lsrs	r0, r0, #7
 8003404:	4770      	bx	lr

08003406 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003406:	4770      	bx	lr

08003408 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003408:	b510      	push	{r4, lr}
 800340a:	4604      	mov	r4, r0
    }
 800340c:	2108      	movs	r1, #8
 800340e:	f026 f8db 	bl	80295c8 <_ZdlPvj>
 8003412:	4620      	mov	r0, r4
 8003414:	bd10      	pop	{r4, pc}

08003416 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003416:	4770      	bx	lr

08003418 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003418:	4770      	bx	lr

0800341a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800341a:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800341e:	6808      	ldr	r0, [r1, #0]
 8003420:	6849      	ldr	r1, [r1, #4]
 8003422:	c303      	stmia	r3!, {r0, r1}
    }
 8003424:	4770      	bx	lr

08003426 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003426:	4770      	bx	lr

08003428 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003428:	4770      	bx	lr

0800342a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800342a:	6041      	str	r1, [r0, #4]
    }
 800342c:	4770      	bx	lr

0800342e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800342e:	4770      	bx	lr

08003430 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003432:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003436:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800343a:	2300      	movs	r3, #0
 800343c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003440:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003444:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	080034f5 	.word	0x080034f5

08003450 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003450:	2301      	movs	r3, #1
 8003452:	7203      	strb	r3, [r0, #8]
    }
 8003454:	4770      	bx	lr

08003456 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003456:	4770      	bx	lr

08003458 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003458:	4770      	bx	lr

0800345a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800345a:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 800345c:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800345e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003460:	68c2      	ldr	r2, [r0, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	1054      	asrs	r4, r2, #1
 8003466:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800346a:	07d2      	lsls	r2, r2, #31
 800346c:	bf48      	it	mi
 800346e:	590a      	ldrmi	r2, [r1, r4]
    }
 8003470:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003474:	bf48      	it	mi
 8003476:	58d3      	ldrmi	r3, [r2, r3]
 8003478:	4718      	bx	r3

0800347a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800347a:	6843      	ldr	r3, [r0, #4]
 800347c:	b12b      	cbz	r3, 800348a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800347e:	6883      	ldr	r3, [r0, #8]
 8003480:	b92b      	cbnz	r3, 800348e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003482:	68c0      	ldr	r0, [r0, #12]
 8003484:	f000 0001 	and.w	r0, r0, #1
 8003488:	4770      	bx	lr
 800348a:	4618      	mov	r0, r3
 800348c:	4770      	bx	lr
 800348e:	2001      	movs	r0, #1
    }
 8003490:	4770      	bx	lr

08003492 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003492:	b510      	push	{r4, lr}
 8003494:	4604      	mov	r4, r0
 8003496:	210c      	movs	r1, #12
 8003498:	f026 f896 	bl	80295c8 <_ZdlPvj>
 800349c:	4620      	mov	r0, r4
 800349e:	bd10      	pop	{r4, pc}

080034a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80034a0:	b510      	push	{r4, lr}
 80034a2:	4604      	mov	r4, r0
 80034a4:	2110      	movs	r1, #16
 80034a6:	f026 f88f 	bl	80295c8 <_ZdlPvj>
 80034aa:	4620      	mov	r0, r4
 80034ac:	bd10      	pop	{r4, pc}

080034ae <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80034ae:	b510      	push	{r4, lr}
 80034b0:	4604      	mov	r4, r0
 80034b2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80034b6:	f026 f887 	bl	80295c8 <_ZdlPvj>
 80034ba:	4620      	mov	r0, r4
 80034bc:	bd10      	pop	{r4, pc}

080034be <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80034be:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80034c0:	f015 ff48 	bl	8019354 <_ZN8touchgfx11Application11getInstanceEv>
 80034c4:	6803      	ldr	r3, [r0, #0]
    }
 80034c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	4718      	bx	r3

080034ce <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80034ce:	b510      	push	{r4, lr}
 80034d0:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80034d2:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 80034d6:	b158      	cbz	r0, 80034f0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80034d8:	6803      	ldr	r3, [r0, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4798      	blx	r3
 80034de:	b138      	cbz	r0, 80034f0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80034e0:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 80034e4:	6803      	ldr	r3, [r0, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 80034f0:	bd10      	pop	{r4, pc}
	...

080034f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80034f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80034f8:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 80034fc:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80034fe:	68a8      	ldr	r0, [r5, #8]
 8003500:	6803      	ldr	r3, [r0, #0]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4798      	blx	r3
 8003506:	28b3      	cmp	r0, #179	; 0xb3
 8003508:	d805      	bhi.n	8003516 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 800350a:	4b46      	ldr	r3, [pc, #280]	; (8003624 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800350c:	21a3      	movs	r1, #163	; 0xa3
 800350e:	4a46      	ldr	r2, [pc, #280]	; (8003628 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003510:	4846      	ldr	r0, [pc, #280]	; (800362c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003512:	f026 f887 	bl	8029624 <__assert_func>
 8003516:	6868      	ldr	r0, [r5, #4]
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4798      	blx	r3
 800351e:	280f      	cmp	r0, #15
 8003520:	d803      	bhi.n	800352a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 8003522:	4b43      	ldr	r3, [pc, #268]	; (8003630 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003524:	21a4      	movs	r1, #164	; 0xa4
 8003526:	4a40      	ldr	r2, [pc, #256]	; (8003628 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003528:	e7f2      	b.n	8003510 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800352a:	68e8      	ldr	r0, [r5, #12]
 800352c:	6803      	ldr	r3, [r0, #0]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4798      	blx	r3
 8003532:	280b      	cmp	r0, #11
 8003534:	d803      	bhi.n	800353e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 8003536:	4b3f      	ldr	r3, [pc, #252]	; (8003634 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003538:	21a5      	movs	r1, #165	; 0xa5
 800353a:	4a3b      	ldr	r2, [pc, #236]	; (8003628 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800353c:	e7e8      	b.n	8003510 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 800353e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800363c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 8003542:	f015 ff07 	bl	8019354 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003546:	3004      	adds	r0, #4
 8003548:	f015 ff29 	bl	801939e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800354c:	f8d9 0000 	ldr.w	r0, [r9]
 8003550:	b110      	cbz	r0, 8003558 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003552:	6803      	ldr	r3, [r0, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	4798      	blx	r3
    if (*currentTrans)
 8003558:	f8d9 0000 	ldr.w	r0, [r9]
 800355c:	b110      	cbz	r0, 8003564 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4798      	blx	r3
    if (*currentScreen)
 8003564:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003640 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 8003568:	f8d8 0000 	ldr.w	r0, [r8]
 800356c:	b110      	cbz	r0, 8003574 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 800356e:	6803      	ldr	r3, [r0, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4798      	blx	r3
    if (*currentPresenter)
 8003574:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003578:	b110      	cbz	r0, 8003580 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 800357a:	6803      	ldr	r3, [r0, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4798      	blx	r3
    if (*currentScreen)
 8003580:	f8d8 0000 	ldr.w	r0, [r8]
 8003584:	b110      	cbz	r0, 800358c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003586:	6803      	ldr	r3, [r0, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4798      	blx	r3
    if (*currentPresenter)
 800358c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003590:	b110      	cbz	r0, 8003598 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003592:	6803      	ldr	r3, [r0, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003598:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800359a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800359c:	f04f 0b00 	mov.w	fp, #0
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	4798      	blx	r3
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80035a8:	4604      	mov	r4, r0
 80035aa:	f8c0 b004 	str.w	fp, [r0, #4]
 80035ae:	6003      	str	r3, [r0, #0]
 80035b0:	4659      	mov	r1, fp
 80035b2:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80035b6:	68a8      	ldr	r0, [r5, #8]
 80035b8:	6803      	ldr	r3, [r0, #0]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	4798      	blx	r3
 80035be:	4606      	mov	r6, r0
 80035c0:	f000 fb88 	bl	8003cd4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80035c4:	6868      	ldr	r0, [r5, #4]
 80035c6:	4659      	mov	r1, fp
 80035c8:	6803      	ldr	r3, [r0, #0]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	4798      	blx	r3
 80035ce:	4605      	mov	r5, r0
 80035d0:	4631      	mov	r1, r6
 80035d2:	f000 fb5b 	bl	8003c8c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80035d6:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80035da:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80035de:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80035e2:	b1e5      	cbz	r5, 800361e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12a>
 80035e4:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80035e6:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80035ea:	4630      	mov	r0, r6
 80035ec:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80035ee:	f8c5 a008 	str.w	sl, [r5, #8]
 80035f2:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80035f4:	63f5      	str	r5, [r6, #60]	; 0x3c
 80035f6:	4798      	blx	r3
    newPresenter->activate();
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	4628      	mov	r0, r5
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003600:	4621      	mov	r1, r4
 8003602:	4630      	mov	r0, r6
 8003604:	f017 fb72 	bl	801acec <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	4620      	mov	r0, r4
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	4798      	blx	r3
    newTransition->invalidate();
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	4620      	mov	r0, r4
 8003614:	695b      	ldr	r3, [r3, #20]
}
 8003616:	b001      	add	sp, #4
 8003618:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	4718      	bx	r3
    model->bind(newPresenter);
 800361e:	462b      	mov	r3, r5
 8003620:	e7e1      	b.n	80035e6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf2>
 8003622:	bf00      	nop
 8003624:	0802c348 	.word	0x0802c348
 8003628:	0802c3d6 	.word	0x0802c3d6
 800362c:	0802c4da 	.word	0x0802c4da
 8003630:	0802c521 	.word	0x0802c521
 8003634:	0802c5c4 	.word	0x0802c5c4
 8003638:	0802c6dc 	.word	0x0802c6dc
 800363c:	20015078 	.word	0x20015078
 8003640:	20015074 	.word	0x20015074

08003644 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800364c:	b10a      	cbz	r2, 8003652 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800364e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003650:	b900      	cbnz	r0, 8003654 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003652:	6898      	ldr	r0, [r3, #8]
    }
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20015038 	.word	0x20015038

0800365c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	4604      	mov	r4, r0
 8003660:	4617      	mov	r7, r2
 8003662:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003664:	f015 ff3c 	bl	80194e0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 800366a:	2500      	movs	r5, #0
        instance = this;
 800366c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800366e:	4629      	mov	r1, r5
      model(m)
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003672:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003676:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
        return instance;
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003682:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003684:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 8003688:	689b      	ldr	r3, [r3, #8]
      model(m)
 800368a:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800368e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003690:	4628      	mov	r0, r5
 8003692:	f000 fa6d 	bl	8003b70 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003696:	f7ff ffd5 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 800369a:	f01e fc1c 	bl	8021ed6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800369e:	f7ff ffd1 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 80036a2:	f01e fc93 	bl	8021fcc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 80036a6:	4620      	mov	r0, r4
 80036a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20015084 	.word	0x20015084
 80036b0:	0802c688 	.word	0x0802c688
 80036b4:	0802c670 	.word	0x0802c670
 80036b8:	20015038 	.word	0x20015038

080036bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80036be:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80036c2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80036cc:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80036d0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	080034f5 	.word	0x080034f5

080036dc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80036dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80036de:	4770      	bx	lr

080036e0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80036e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80036e2:	4770      	bx	lr

080036e4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80036e4:	4770      	bx	lr

080036e6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80036e6:	888b      	ldrh	r3, [r1, #4]
 80036e8:	69c0      	ldr	r0, [r0, #28]
 80036ea:	0adb      	lsrs	r3, r3, #11
 80036ec:	680a      	ldr	r2, [r1, #0]
 80036ee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80036f2:	4410      	add	r0, r2
 80036f4:	4770      	bx	lr

080036f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80036f6:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80036f8:	b1c2      	cbz	r2, 800372c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80036fa:	7b13      	ldrb	r3, [r2, #12]
 80036fc:	b1b3      	cbz	r3, 800372c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80036fe:	7b54      	ldrb	r4, [r2, #13]
 8003700:	7ad2      	ldrb	r2, [r2, #11]
 8003702:	0224      	lsls	r4, r4, #8
 8003704:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003708:	4314      	orrs	r4, r2
 800370a:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800370c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800370e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003712:	8813      	ldrh	r3, [r2, #0]
 8003714:	428b      	cmp	r3, r1
 8003716:	d102      	bne.n	800371e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003718:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 800371c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800371e:	d805      	bhi.n	800372c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003720:	3801      	subs	r0, #1
 8003722:	3204      	adds	r2, #4
 8003724:	b280      	uxth	r0, r0
 8003726:	2800      	cmp	r0, #0
 8003728:	d1f3      	bne.n	8003712 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800372a:	e7f7      	b.n	800371c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800372c:	2000      	movs	r0, #0
 800372e:	e7f5      	b.n	800371c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003730 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003730:	b510      	push	{r4, lr}
 8003732:	4604      	mov	r4, r0
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	f025 ff47 	bl	80295c8 <_ZdlPvj>
 800373a:	4620      	mov	r0, r4
 800373c:	bd10      	pop	{r4, pc}
	...

08003740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003740:	b530      	push	{r4, r5, lr}
 8003742:	b08b      	sub	sp, #44	; 0x2c
 8003744:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003746:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 800374a:	9508      	str	r5, [sp, #32]
 800374c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8003750:	9507      	str	r5, [sp, #28]
 8003752:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8003756:	9506      	str	r5, [sp, #24]
 8003758:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 800375c:	9505      	str	r5, [sp, #20]
 800375e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8003762:	9504      	str	r5, [sp, #16]
 8003764:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8003768:	9503      	str	r5, [sp, #12]
 800376a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800376e:	9502      	str	r5, [sp, #8]
 8003770:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003774:	9501      	str	r5, [sp, #4]
 8003776:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800377a:	9500      	str	r5, [sp, #0]
 800377c:	f016 ff10 	bl	801a5a0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003782:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003784:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003788:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800378a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800378c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800378e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003790:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
 8003792:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003794:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003796:	b00b      	add	sp, #44	; 0x2c
 8003798:	bd30      	pop	{r4, r5, pc}
 800379a:	bf00      	nop
 800379c:	0802c700 	.word	0x0802c700

080037a0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80037a0:	4770      	bx	lr

080037a2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80037a2:	4770      	bx	lr

080037a4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80037a4:	4770      	bx	lr

080037a6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80037a6:	4770      	bx	lr

080037a8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80037a8:	4770      	bx	lr

080037aa <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80037aa:	4770      	bx	lr

080037ac <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80037ac:	4770      	bx	lr

080037ae <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80037ae:	b510      	push	{r4, lr}
 80037b0:	4604      	mov	r4, r0
}
 80037b2:	21b4      	movs	r1, #180	; 0xb4
 80037b4:	f025 ff08 	bl	80295c8 <_ZdlPvj>
 80037b8:	4620      	mov	r0, r4
 80037ba:	bd10      	pop	{r4, pc}

080037bc <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80037bc:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80037be:	b570      	push	{r4, r5, r6, lr}
 80037c0:	4604      	mov	r4, r0
        setX(x);
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80037c4:	4615      	mov	r5, r2
        setX(x);
 80037c6:	4798      	blx	r3
        setY(y);
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80037d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80037d4:	4718      	bx	r3
	...

080037d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
        return typedTextId < numberOfTypedTexts;
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80037da:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 80037dc:	881b      	ldrh	r3, [r3, #0]
    void updateTextPosition()
 80037de:	4606      	mov	r6, r0
 80037e0:	8f01      	ldrh	r1, [r0, #56]	; 0x38
        if (typedText.hasValidId())
 80037e2:	428b      	cmp	r3, r1
 80037e4:	d92b      	bls.n	800383e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x66>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b92b      	cbnz	r3, 80037f8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80037ec:	4b17      	ldr	r3, [pc, #92]	; (800384c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 80037ee:	216c      	movs	r1, #108	; 0x6c
 80037f0:	4a17      	ldr	r2, [pc, #92]	; (8003850 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 80037f2:	4818      	ldr	r0, [pc, #96]	; (8003854 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 80037f4:	f025 ff16 	bl	8029624 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80037f8:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80037fc:	4b16      	ldr	r3, [pc, #88]	; (8003858 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f000 f9ee 	bl	8003be8 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	9001      	str	r0, [sp, #4]
 8003810:	4628      	mov	r0, r5
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	4798      	blx	r3
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	4604      	mov	r4, r0
 800381a:	9901      	ldr	r1, [sp, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	4628      	mov	r0, r5
 8003820:	4798      	blx	r3
 8003822:	fb14 f400 	smulbb	r4, r4, r0
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	4628      	mov	r0, r5
 800382a:	b2a4      	uxth	r4, r4
 800382c:	9901      	ldr	r1, [sp, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	4798      	blx	r3
 8003832:	1823      	adds	r3, r4, r0
 8003834:	b21b      	sxth	r3, r3
 8003836:	f8a6 3046 	strh.w	r3, [r6, #70]	; 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800383a:	b002      	add	sp, #8
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	2300      	movs	r3, #0
 8003840:	e7f9      	b.n	8003836 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8003842:	bf00      	nop
 8003844:	2001508c 	.word	0x2001508c
 8003848:	20015088 	.word	0x20015088
 800384c:	0802c758 	.word	0x0802c758
 8003850:	0802c79a 	.word	0x0802c79a
 8003854:	0802c7d5 	.word	0x0802c7d5
 8003858:	20015090 	.word	0x20015090
 800385c:	20015094 	.word	0x20015094

08003860 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003864:	4604      	mov	r4, r0
        : presenter(0)
 8003866:	2500      	movs	r5, #0
 8003868:	f017 f894 	bl	801a994 <_ZN8touchgfx6ScreenC1Ev>
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <_ZN15Screen1ViewBaseC1Ev+0xb4>)
 800386e:	4626      	mov	r6, r4
 8003870:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003872:	f104 076c 	add.w	r7, r4, #108	; 0x6c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003876:	f104 0804 	add.w	r8, r4, #4
 800387a:	f846 3b40 	str.w	r3, [r6], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <_ZN15Screen1ViewBaseC1Ev+0xb8>)
 8003880:	4638      	mov	r0, r7
          cachedAbsX(0),
 8003882:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
 8003884:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 8003886:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
          touchable(false),
 800388a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8003892:	23ff      	movs	r3, #255	; 0xff
 8003894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003898:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
          parent(0),
 800389c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
 80038a0:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 80038a4:	f014 f88a 	bl	80179bc <_ZN8touchgfx15ButtonWithLabelC1Ev>
        setXY(x, y);
 80038a8:	462a      	mov	r2, r5
 80038aa:	4629      	mov	r1, r5
 80038ac:	4630      	mov	r0, r6
 80038ae:	f7ff ff85 	bl	80037bc <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80038b2:	4630      	mov	r0, r6
 80038b4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80038b8:	f7ff fa10 	bl	8002cdc <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80038bc:	4630      	mov	r0, r6
 80038be:	f44f 7188 	mov.w	r1, #272	; 0x110
 80038c2:	f7ff fa0d 	bl	8002ce0 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80038c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80038ca:	4631      	mov	r1, r6
 80038cc:	4640      	mov	r0, r8
 80038ce:	66a3      	str	r3, [r4, #104]	; 0x68
 80038d0:	f012 fd0e 	bl	80162f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonWithLabel1.setXY(120, 111);
 80038d4:	4638      	mov	r0, r7
 80038d6:	226f      	movs	r2, #111	; 0x6f
 80038d8:	2178      	movs	r1, #120	; 0x78
 80038da:	f7ff ff6f 	bl	80037bc <_ZN8touchgfx8Drawable5setXYEss>
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80038de:	2301      	movs	r3, #1
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 80038e0:	aa01      	add	r2, sp, #4
 80038e2:	4669      	mov	r1, sp
 80038e4:	4638      	mov	r0, r7
 80038e6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80038ea:	f8ad 5000 	strh.w	r5, [sp]
 80038ee:	f013 fedc 	bl	80176aa <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80038f2:	4638      	mov	r0, r7
class TypedText
 80038f4:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
 80038f8:	f7ff ff6e 	bl	80037d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	4640      	mov	r0, r8
 8003902:	4639      	mov	r1, r7
        colorPressed = col;
 8003904:	e9c4 332a 	strd	r3, r3, [r4, #168]	; 0xa8
 8003908:	f012 fcf2 	bl	80162f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800390c:	4620      	mov	r0, r4
 800390e:	b002      	add	sp, #8
 8003910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003914:	0802c824 	.word	0x0802c824
 8003918:	0802ec70 	.word	0x0802ec70

0800391c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800391c:	4770      	bx	lr
	...

08003920 <_Z23getFont_verdana_10_4bppv>:
{
 8003920:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003922:	4d16      	ldr	r5, [pc, #88]	; (800397c <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003924:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003926:	682c      	ldr	r4, [r5, #0]
 8003928:	f3bf 8f5b 	dmb	ish
 800392c:	f014 0401 	ands.w	r4, r4, #1
 8003930:	d120      	bne.n	8003974 <_Z23getFont_verdana_10_4bppv+0x54>
 8003932:	4628      	mov	r0, r5
 8003934:	f025 fe4a 	bl	80295cc <__cxa_guard_acquire>
 8003938:	b1e0      	cbz	r0, 8003974 <_Z23getFont_verdana_10_4bppv+0x54>
 800393a:	233f      	movs	r3, #63	; 0x3f
 800393c:	2201      	movs	r2, #1
 800393e:	4910      	ldr	r1, [pc, #64]	; (8003980 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003940:	9309      	str	r3, [sp, #36]	; 0x24
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003944:	4810      	ldr	r0, [pc, #64]	; (8003988 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003946:	9308      	str	r3, [sp, #32]
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <_Z23getFont_verdana_10_4bppv+0x6c>)
 800394a:	940a      	str	r4, [sp, #40]	; 0x28
 800394c:	9405      	str	r4, [sp, #20]
 800394e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003952:	2304      	movs	r3, #4
 8003954:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003958:	230a      	movs	r3, #10
 800395a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003964:	f7ff feec 	bl	8003740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003968:	4809      	ldr	r0, [pc, #36]	; (8003990 <_Z23getFont_verdana_10_4bppv+0x70>)
 800396a:	f025 fe79 	bl	8029660 <atexit>
 800396e:	4628      	mov	r0, r5
 8003970:	f025 fe38 	bl	80295e4 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003974:	4804      	ldr	r0, [pc, #16]	; (8003988 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003976:	b00f      	add	sp, #60	; 0x3c
 8003978:	bd30      	pop	{r4, r5, pc}
 800397a:	bf00      	nop
 800397c:	20001ce4 	.word	0x20001ce4
 8003980:	90017a64 	.word	0x90017a64
 8003984:	0802f1b8 	.word	0x0802f1b8
 8003988:	20001ce8 	.word	0x20001ce8
 800398c:	0802f1c8 	.word	0x0802f1c8
 8003990:	0800391d 	.word	0x0800391d

08003994 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003994:	4770      	bx	lr
	...

08003998 <_Z23getFont_verdana_20_4bppv>:
{
 8003998:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800399a:	4d16      	ldr	r5, [pc, #88]	; (80039f4 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 800399c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800399e:	682c      	ldr	r4, [r5, #0]
 80039a0:	f3bf 8f5b 	dmb	ish
 80039a4:	f014 0401 	ands.w	r4, r4, #1
 80039a8:	d121      	bne.n	80039ee <_Z23getFont_verdana_20_4bppv+0x56>
 80039aa:	4628      	mov	r0, r5
 80039ac:	f025 fe0e 	bl	80295cc <__cxa_guard_acquire>
 80039b0:	b1e8      	cbz	r0, 80039ee <_Z23getFont_verdana_20_4bppv+0x56>
 80039b2:	233f      	movs	r3, #63	; 0x3f
 80039b4:	2201      	movs	r2, #1
 80039b6:	4910      	ldr	r1, [pc, #64]	; (80039f8 <_Z23getFont_verdana_20_4bppv+0x60>)
 80039b8:	9309      	str	r3, [sp, #36]	; 0x24
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <_Z23getFont_verdana_20_4bppv+0x64>)
 80039bc:	4810      	ldr	r0, [pc, #64]	; (8003a00 <_Z23getFont_verdana_20_4bppv+0x68>)
 80039be:	9308      	str	r3, [sp, #32]
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80039c2:	940a      	str	r4, [sp, #40]	; 0x28
 80039c4:	9405      	str	r4, [sp, #20]
 80039c6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80039ca:	2304      	movs	r3, #4
 80039cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80039d0:	2314      	movs	r3, #20
 80039d2:	2209      	movs	r2, #9
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80039da:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80039de:	f7ff feaf 	bl	8003740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80039e2:	4809      	ldr	r0, [pc, #36]	; (8003a08 <_Z23getFont_verdana_20_4bppv+0x70>)
 80039e4:	f025 fe3c 	bl	8029660 <atexit>
 80039e8:	4628      	mov	r0, r5
 80039ea:	f025 fdfb 	bl	80295e4 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80039ee:	4804      	ldr	r0, [pc, #16]	; (8003a00 <_Z23getFont_verdana_20_4bppv+0x68>)
 80039f0:	b00f      	add	sp, #60	; 0x3c
 80039f2:	bd30      	pop	{r4, r5, pc}
 80039f4:	20001d14 	.word	0x20001d14
 80039f8:	90017a74 	.word	0x90017a74
 80039fc:	0802f1bc 	.word	0x0802f1bc
 8003a00:	20001d18 	.word	0x20001d18
 8003a04:	0802f1cc 	.word	0x0802f1cc
 8003a08:	08003995 	.word	0x08003995

08003a0c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a0c:	4770      	bx	lr
	...

08003a10 <_Z23getFont_verdana_40_4bppv>:
{
 8003a10:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a12:	4d16      	ldr	r5, [pc, #88]	; (8003a6c <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003a14:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a16:	682c      	ldr	r4, [r5, #0]
 8003a18:	f3bf 8f5b 	dmb	ish
 8003a1c:	f014 0401 	ands.w	r4, r4, #1
 8003a20:	d120      	bne.n	8003a64 <_Z23getFont_verdana_40_4bppv+0x54>
 8003a22:	4628      	mov	r0, r5
 8003a24:	f025 fdd2 	bl	80295cc <__cxa_guard_acquire>
 8003a28:	b1e0      	cbz	r0, 8003a64 <_Z23getFont_verdana_40_4bppv+0x54>
 8003a2a:	233f      	movs	r3, #63	; 0x3f
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4910      	ldr	r1, [pc, #64]	; (8003a70 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003a30:	9309      	str	r3, [sp, #36]	; 0x24
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003a34:	4810      	ldr	r0, [pc, #64]	; (8003a78 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003a36:	9308      	str	r3, [sp, #32]
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003a3a:	940a      	str	r4, [sp, #40]	; 0x28
 8003a3c:	9405      	str	r4, [sp, #20]
 8003a3e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003a42:	2304      	movs	r3, #4
 8003a44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003a48:	2328      	movs	r3, #40	; 0x28
 8003a4a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a54:	f7ff fe74 	bl	8003740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a58:	4809      	ldr	r0, [pc, #36]	; (8003a80 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003a5a:	f025 fe01 	bl	8029660 <atexit>
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f025 fdc0 	bl	80295e4 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003a66:	b00f      	add	sp, #60	; 0x3c
 8003a68:	bd30      	pop	{r4, r5, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20001d44 	.word	0x20001d44
 8003a70:	90017af4 	.word	0x90017af4
 8003a74:	0802f1c4 	.word	0x0802f1c4
 8003a78:	20001d48 	.word	0x20001d48
 8003a7c:	0802f1d0 	.word	0x0802f1d0
 8003a80:	08003a0d 	.word	0x08003a0d

08003a84 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003a84:	2000      	movs	r0, #0
 8003a86:	4770      	bx	lr

08003a88 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003a88:	2000      	movs	r0, #0
 8003a8a:	4770      	bx	lr

08003a8c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003a8c:	b40e      	push	{r1, r2, r3}
 8003a8e:	b503      	push	{r0, r1, lr}
 8003a90:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003a92:	2100      	movs	r1, #0
{
 8003a94:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003a98:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003a9a:	f016 fba9 	bl	801a1f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003a9e:	b002      	add	sp, #8
 8003aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aa4:	b003      	add	sp, #12
 8003aa6:	4770      	bx	lr

08003aa8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003aa8:	b40c      	push	{r2, r3}
 8003aaa:	b507      	push	{r0, r1, r2, lr}
 8003aac:	ab04      	add	r3, sp, #16
 8003aae:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003ab2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003ab4:	f016 fb9c 	bl	801a1f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ab8:	b003      	add	sp, #12
 8003aba:	f85d eb04 	ldr.w	lr, [sp], #4
 8003abe:	b002      	add	sp, #8
 8003ac0:	4770      	bx	lr
	...

08003ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003ac4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003aca:	b373      	cbz	r3, 8003b2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003acc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003ace:	b92b      	cbnz	r3, 8003adc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003ad2:	21c5      	movs	r1, #197	; 0xc5
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003ad6:	4819      	ldr	r0, [pc, #100]	; (8003b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003ad8:	f025 fda4 	bl	8029624 <__assert_func>
            return buffer[pos];
 8003adc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003ade:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ae2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003ae4:	b30b      	cbz	r3, 8003b2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003ae6:	f017 fe19 	bl	801b71c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003aea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d803      	bhi.n	8003af8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003af2:	21cb      	movs	r1, #203	; 0xcb
 8003af4:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003af6:	e7ee      	b.n	8003ad6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003af8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003afa:	f640 103f 	movw	r0, #2367	; 0x93f
 8003afe:	1c53      	adds	r3, r2, #1
 8003b00:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003b02:	2b09      	cmp	r3, #9
 8003b04:	4619      	mov	r1, r3
 8003b06:	bf88      	it	hi
 8003b08:	f1a3 010a 	subhi.w	r1, r3, #10
 8003b0c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003b10:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003b12:	4281      	cmp	r1, r0
 8003b14:	d109      	bne.n	8003b2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003b16:	2b0a      	cmp	r3, #10
 8003b18:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003b1c:	bf28      	it	cs
 8003b1e:	2300      	movcs	r3, #0
            return buffer[pos];
 8003b20:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003b22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003b26:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003b28:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003b2a:	4620      	mov	r0, r4
}
 8003b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003b30:	f017 bcf6 	b.w	801b520 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003b34:	0802c850 	.word	0x0802c850
 8003b38:	0802c859 	.word	0x0802c859
 8003b3c:	0802c904 	.word	0x0802c904
 8003b40:	0802c94e 	.word	0x0802c94e
 8003b44:	0802c95c 	.word	0x0802c95c

08003b48 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003b48:	f017 bcb3 	b.w	801b4b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003b4c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003b4c:	b510      	push	{r4, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	ac02      	add	r4, sp, #8
 8003b52:	e884 0006 	stmia.w	r4, {r1, r2}
 8003b56:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003b58:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003b5a:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003b5c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	9b08      	ldr	r3, [sp, #32]
 8003b66:	f014 ff93 	bl	8018a90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003b6a:	b006      	add	sp, #24
 8003b6c:	bd10      	pop	{r4, pc}
	...

08003b70 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003b70:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003b72:	bb18      	cbnz	r0, 8003bbc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003b76:	4813      	ldr	r0, [pc, #76]	; (8003bc4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003b78:	681c      	ldr	r4, [r3, #0]
 8003b7a:	4913      	ldr	r1, [pc, #76]	; (8003bc8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003b7c:	b1b4      	cbz	r4, 8003bac <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	4422      	add	r2, r4
 8003b82:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003b84:	6862      	ldr	r2, [r4, #4]
 8003b86:	4422      	add	r2, r4
 8003b88:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003b8a:	68a2      	ldr	r2, [r4, #8]
 8003b8c:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003b94:	f000 f838 	bl	8003c08 <_ZN17TypedTextDatabase8getFontsEv>
 8003b98:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003b9a:	f000 f833 	bl	8003c04 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003ba0:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003ba4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003ba8:	8018      	strh	r0, [r3, #0]
    }
}
 8003baa:	e007      	b.n	8003bbc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003bae:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003bb2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003bb6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003bb8:	2c00      	cmp	r4, #0
 8003bba:	d1e8      	bne.n	8003b8e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20001d74 	.word	0x20001d74
 8003bc4:	20001d78 	.word	0x20001d78
 8003bc8:	20001d7c 	.word	0x20001d7c
 8003bcc:	20001d80 	.word	0x20001d80
 8003bd0:	20015088 	.word	0x20015088
 8003bd4:	20015090 	.word	0x20015090
 8003bd8:	2001508c 	.word	0x2001508c
 8003bdc:	90017b08 	.word	0x90017b08
 8003be0:	90017b04 	.word	0x90017b04
 8003be4:	90017b24 	.word	0x90017b24

08003be8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20001d7c 	.word	0x20001d7c
 8003c00:	20001d78 	.word	0x20001d78

08003c04 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003c04:	2001      	movs	r0, #1
 8003c06:	4770      	bx	lr

08003c08 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003c08:	4800      	ldr	r0, [pc, #0]	; (8003c0c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003c0a:	4770      	bx	lr
 8003c0c:	20001d84 	.word	0x20001d84

08003c10 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003c10:	b510      	push	{r4, lr}
};
 8003c12:	4c05      	ldr	r4, [pc, #20]	; (8003c28 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8003c14:	f7ff fec0 	bl	8003998 <_Z23getFont_verdana_20_4bppv>
};
 8003c18:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003c1a:	f7ff fef9 	bl	8003a10 <_Z23getFont_verdana_40_4bppv>
};
 8003c1e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003c20:	f7ff fe7e 	bl	8003920 <_Z23getFont_verdana_10_4bppv>
};
 8003c24:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003c26:	bd10      	pop	{r4, pc}
 8003c28:	20001d84 	.word	0x20001d84

08003c2c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003c2c:	4770      	bx	lr

08003c2e <_ZN19FrontendApplicationD0Ev>:
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	4604      	mov	r4, r0
 8003c32:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003c36:	f025 fcc7 	bl	80295c8 <_ZdlPvj>
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	bd10      	pop	{r4, pc}

08003c3e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
    {
        model.tick();
 8003c42:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003c46:	f000 f812 	bl	8003c6e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003c4a:	4620      	mov	r0, r4
    }
 8003c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003c50:	f015 bc02 	b.w	8019458 <_ZN8touchgfx11Application15handleTickEventEv>

08003c54 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003c58:	f7ff fd00 	bl	800365c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003c5c:	4b01      	ldr	r3, [pc, #4]	; (8003c64 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003c5e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003c60:	6023      	str	r3, [r4, #0]
}
 8003c62:	bd10      	pop	{r4, pc}
 8003c64:	0802ca38 	.word	0x0802ca38

08003c68 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	6002      	str	r2, [r0, #0]
{

}
 8003c6c:	4770      	bx	lr

08003c6e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003c6e:	4770      	bx	lr

08003c70 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8003c70:	4770      	bx	lr

08003c72 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003c72:	3804      	subs	r0, #4
 8003c74:	4770      	bx	lr

08003c76 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003c76:	4770      	bx	lr

08003c78 <_ZN16Screen1PresenterD0Ev>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	2110      	movs	r1, #16
 8003c7e:	f025 fca3 	bl	80295c8 <_ZdlPvj>
 8003c82:	4620      	mov	r0, r4
 8003c84:	bd10      	pop	{r4, pc}

08003c86 <_ZThn4_N16Screen1PresenterD0Ev>:
 8003c86:	f1a0 0004 	sub.w	r0, r0, #4
 8003c8a:	e7f5      	b.n	8003c78 <_ZN16Screen1PresenterD0Ev>

08003c8c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003c8c:	2200      	movs	r2, #0
    : view(v)
 8003c8e:	60c1      	str	r1, [r0, #12]
 8003c90:	6082      	str	r2, [r0, #8]
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003c94:	b510      	push	{r4, lr}
    : view(v)
 8003c96:	f102 0408 	add.w	r4, r2, #8
 8003c9a:	3220      	adds	r2, #32
 8003c9c:	6004      	str	r4, [r0, #0]
 8003c9e:	6042      	str	r2, [r0, #4]
}
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	bf00      	nop
 8003ca4:	0802ca84 	.word	0x0802ca84

08003ca8 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003ca8:	4770      	bx	lr
	...

08003cac <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <_ZN11Screen1ViewD1Ev+0x10>)
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	6003      	str	r3, [r0, #0]
 8003cb4:	f7ff fd79 	bl	80037aa <_ZN15Screen1ViewBaseD1Ev>
 8003cb8:	4620      	mov	r0, r4
 8003cba:	bd10      	pop	{r4, pc}
 8003cbc:	0802cab4 	.word	0x0802cab4

08003cc0 <_ZN11Screen1ViewD0Ev>:
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	f7ff fff2 	bl	8003cac <_ZN11Screen1ViewD1Ev>
 8003cc8:	21b4      	movs	r1, #180	; 0xb4
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f025 fc7c 	bl	80295c8 <_ZdlPvj>
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	bd10      	pop	{r4, pc}

08003cd4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	f7ff fdc2 	bl	8003860 <_ZN15Screen1ViewBaseC1Ev>
 8003cdc:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8003cde:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8003ce0:	6023      	str	r3, [r4, #0]
}
 8003ce2:	bd10      	pop	{r4, pc}
 8003ce4:	0802cab4 	.word	0x0802cab4

08003ce8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003ce8:	f7ff bd60 	b.w	80037ac <_ZN15Screen1ViewBase11setupScreenEv>

08003cec <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003cec:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cee:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003cf2:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003cf4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003cf8:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cfa:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003cfc:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003cfe:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8003d00:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003d02:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d04:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8003d06:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8003d08:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d0a:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8003d0c:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003d0e:	480b      	ldr	r0, [pc, #44]	; (8003d3c <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8003d10:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d14:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d18:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8003d1c:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003d1e:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8003d20:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003d22:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003d26:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003d28:	466a      	mov	r2, sp
 8003d2a:	f001 fd79 	bl	8005820 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8003d2e:	3800      	subs	r0, #0
 8003d30:	bf18      	it	ne
 8003d32:	2001      	movne	r0, #1
 8003d34:	b015      	add	sp, #84	; 0x54
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d3a:	bf00      	nop
 8003d3c:	20001d90 	.word	0x20001d90

08003d40 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003d40:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d42:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003d46:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4817      	ldr	r0, [pc, #92]	; (8003dac <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d4e:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003d50:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d52:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003d54:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d56:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d58:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003d5c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8003d5e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d60:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d62:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d66:	f001 fd18 	bl	800579a <HAL_QSPI_Command>
 8003d6a:	b9e0      	cbnz	r0, 8003da6 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8003d6c:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003d6e:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003d74:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d76:	480d      	ldr	r0, [pc, #52]	; (8003dac <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8003d78:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d82:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d84:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d86:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d8e:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003d90:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d96:	f001 fd43 	bl	8005820 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8003d9a:	3800      	subs	r0, #0
 8003d9c:	bf18      	it	ne
 8003d9e:	2001      	movne	r0, #1
}
 8003da0:	b015      	add	sp, #84	; 0x54
 8003da2:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003da6:	2001      	movs	r0, #1
 8003da8:	e7fa      	b.n	8003da0 <QSPI_WriteEnable.constprop.0+0x60>
 8003daa:	bf00      	nop
 8003dac:	20001d90 	.word	0x20001d90

08003db0 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8003db0:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003db2:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8003db6:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003db8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003dbc:	480e      	ldr	r0, [pc, #56]	; (8003df8 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003dbe:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003dc0:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003dc2:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003dc4:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003dc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd0:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003dd8:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003dda:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003ddc:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003dde:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003de0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003de4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003de8:	f001 fd6a 	bl	80058c0 <HAL_QSPI_MemoryMapped>
}
 8003dec:	3800      	subs	r0, #0
 8003dee:	bf18      	it	ne
 8003df0:	2001      	movne	r0, #1
 8003df2:	b011      	add	sp, #68	; 0x44
 8003df4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003df8:	20001d90 	.word	0x20001d90

08003dfc <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8003dfc:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003dfe:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003e00:	4845      	ldr	r0, [pc, #276]	; (8003f18 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 8003e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e04:	f042 0202 	orr.w	r2, r2, #2
{
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
{
 8003e0c:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003e10:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8003e12:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e14:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 8003e16:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003e1a:	4d40      	ldr	r5, [pc, #256]	; (8003f1c <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8003e1c:	9200      	str	r2, [sp, #0]
 8003e1e:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	f042 0202 	orr.w	r2, r2, #2
 8003e26:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	f022 0202 	bic.w	r2, r2, #2
 8003e2e:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8003e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e32:	f042 0202 	orr.w	r2, r2, #2
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
 8003e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3a:	f002 0202 	and.w	r2, r2, #2
 8003e3e:	9201      	str	r2, [sp, #4]
 8003e40:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8003e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e44:	f042 0202 	orr.w	r2, r2, #2
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
 8003e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4c:	f002 0202 	and.w	r2, r2, #2
 8003e50:	9202      	str	r2, [sp, #8]
 8003e52:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8003e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e56:	f042 0208 	orr.w	r2, r2, #8
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5e:	f002 0208 	and.w	r2, r2, #8
 8003e62:	9203      	str	r2, [sp, #12]
 8003e64:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8003e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e68:	f042 0208 	orr.w	r2, r2, #8
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e70:	f002 0208 	and.w	r2, r2, #8
 8003e74:	9204      	str	r2, [sp, #16]
 8003e76:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	f042 0210 	orr.w	r2, r2, #16
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	f002 0210 	and.w	r2, r2, #16
 8003e86:	9205      	str	r2, [sp, #20]
 8003e88:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8003e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8c:	f042 0208 	orr.w	r2, r2, #8
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e92:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	9306      	str	r3, [sp, #24]
 8003e9c:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003eaa:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003eac:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003eae:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003eb0:	f000 fc3c 	bl	800472c <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003eb4:	a907      	add	r1, sp, #28
 8003eb6:	4818      	ldr	r0, [pc, #96]	; (8003f18 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8003eb8:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003eba:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003ebc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003ebe:	f000 fc35 	bl	800472c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8003ec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003ec6:	a907      	add	r1, sp, #28
 8003ec8:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003eca:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8003ecc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003ece:	f000 fc2d 	bl	800472c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003ed6:	a907      	add	r1, sp, #28
 8003ed8:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003eda:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003edc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003ede:	f000 fc25 	bl	800472c <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003ee2:	a907      	add	r1, sp, #28
 8003ee4:	480e      	ldr	r0, [pc, #56]	; (8003f20 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8003ee6:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003ee8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003eea:	f000 fc1f 	bl	800472c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003ef2:	a907      	add	r1, sp, #28
 8003ef4:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003ef6:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003ef8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003efa:	f000 fc17 	bl	800472c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8003efe:	4632      	mov	r2, r6
 8003f00:	210f      	movs	r1, #15
 8003f02:	205c      	movs	r0, #92	; 0x5c
 8003f04:	f000 f9d8 	bl	80042b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003f08:	205c      	movs	r0, #92	; 0x5c
 8003f0a:	f000 fa07 	bl	800431c <HAL_NVIC_EnableIRQ>
}
 8003f0e:	b00d      	add	sp, #52	; 0x34
 8003f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40020400 	.word	0x40020400
 8003f1c:	40020c00 	.word	0x40020c00
 8003f20:	40021000 	.word	0x40021000

08003f24 <BSP_QSPI_Init>:
{ 
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8003f26:	4c49      	ldr	r4, [pc, #292]	; (800404c <BSP_QSPI_Init+0x128>)
{ 
 8003f28:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8003f2a:	4b49      	ldr	r3, [pc, #292]	; (8004050 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003f2c:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8003f2e:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003f30:	f001 fc20 	bl	8005774 <HAL_QSPI_DeInit>
 8003f34:	4605      	mov	r5, r0
 8003f36:	b110      	cbz	r0, 8003f3e <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8003f38:	2001      	movs	r0, #1
}
 8003f3a:	b011      	add	sp, #68	; 0x44
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8003f3e:	4601      	mov	r1, r0
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff ff5b 	bl	8003dfc <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8003f46:	2601      	movs	r6, #1
 8003f48:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8003f4e:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003f52:	2310      	movs	r3, #16
 8003f54:	60e3      	str	r3, [r4, #12]
 8003f56:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003f5a:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003f5e:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003f60:	3b01      	subs	r3, #1
 8003f62:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8003f64:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003f68:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003f6c:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003f70:	f001 fbac 	bl	80056cc <HAL_QSPI_Init>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d1df      	bne.n	8003f38 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f78:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003f7c:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8003f7e:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8003f84:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f86:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f88:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f8a:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003f8c:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f8e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003f92:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f96:	4620      	mov	r0, r4
 8003f98:	f001 fbff 	bl	800579a <HAL_QSPI_Command>
 8003f9c:	b108      	cbz	r0, 8003fa2 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8003f9e:	2004      	movs	r0, #4
 8003fa0:	e7cb      	b.n	8003f3a <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003fa2:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	a902      	add	r1, sp, #8
 8003faa:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8003fac:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fae:	f001 fbf4 	bl	800579a <HAL_QSPI_Command>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d1f3      	bne.n	8003f9e <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003fb6:	f241 3088 	movw	r0, #5000	; 0x1388
 8003fba:	f7ff fe97 	bl	8003cec <QSPI_AutoPollingMemReady.constprop.0>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d1ed      	bne.n	8003f9e <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003fc2:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8003fc4:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003fcc:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003fce:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003fd0:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003fd2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003fd6:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003fda:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f001 fbdb 	bl	800579a <HAL_QSPI_Command>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d1da      	bne.n	8003f9e <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	f10d 0107 	add.w	r1, sp, #7
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f001 fd4b 	bl	8005a8c <HAL_QSPI_Receive>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d1d1      	bne.n	8003f9e <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003ffa:	f7ff fea1 	bl	8003d40 <QSPI_WriteEnable.constprop.0>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d1cd      	bne.n	8003f9e <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004002:	2381      	movs	r3, #129	; 0x81
 8004004:	22f0      	movs	r2, #240	; 0xf0
 8004006:	9302      	str	r3, [sp, #8]
 8004008:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800400c:	210a      	movs	r1, #10
 800400e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004012:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004016:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004020:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004022:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004028:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800402c:	f001 fbb5 	bl	800579a <HAL_QSPI_Command>
 8004030:	2800      	cmp	r0, #0
 8004032:	d1b4      	bne.n	8003f9e <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004034:	f241 3288 	movw	r2, #5000	; 0x1388
 8004038:	f10d 0107 	add.w	r1, sp, #7
 800403c:	4620      	mov	r0, r4
 800403e:	f001 fcc9 	bl	80059d4 <HAL_QSPI_Transmit>
 8004042:	2800      	cmp	r0, #0
 8004044:	f43f af79 	beq.w	8003f3a <BSP_QSPI_Init+0x16>
 8004048:	e7a9      	b.n	8003f9e <BSP_QSPI_Init+0x7a>
 800404a:	bf00      	nop
 800404c:	20001d90 	.word	0x20001d90
 8004050:	a0001000 	.word	0xa0001000

08004054 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004054:	490f      	ldr	r1, [pc, #60]	; (8004094 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004056:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004058:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800405c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <SystemInit+0x44>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800406e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004076:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800407a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800407c:	4a07      	ldr	r2, [pc, #28]	; (800409c <SystemInit+0x48>)
 800407e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004086:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004088:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800408a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800408e:	608b      	str	r3, [r1, #8]
#endif
}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000ed00 	.word	0xe000ed00
 8004098:	40023800 	.word	0x40023800
 800409c:	24003010 	.word	0x24003010

080040a0 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80040a0:	4770      	bx	lr

080040a2 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80040a2:	2000      	movs	r0, #0
 80040a4:	4770      	bx	lr
	...

080040a8 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 80040a8:	2300      	movs	r3, #0
{
 80040aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80040ac:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	b90a      	cbnz	r2, 80040ba <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
{
 80040ba:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80040bc:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80040be:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80040c0:	21a8      	movs	r1, #168	; 0xa8
 80040c2:	4628      	mov	r0, r5
 80040c4:	f7fd fd34 	bl	8001b30 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80040c8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80040cc:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80040d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040d4:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80040d6:	d103      	bne.n	80040e0 <ft5336_ReadID+0x38>
  return (ucReadId);
 80040d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80040dc:	b003      	add	sp, #12
 80040de:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80040e0:	2b51      	cmp	r3, #81	; 0x51
 80040e2:	d1ec      	bne.n	80040be <ft5336_ReadID+0x16>
 80040e4:	e7f8      	b.n	80040d8 <ft5336_ReadID+0x30>
 80040e6:	bf00      	nop
 80040e8:	20001dde 	.word	0x20001dde

080040ec <ft5336_TS_DetectTouch>:
{
 80040ec:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80040ee:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80040f0:	2102      	movs	r1, #2
 80040f2:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80040f4:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80040f8:	f7fd fd1a 	bl	8001b30 <TS_IO_Read>
 80040fc:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004100:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800410c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004110:	2b05      	cmp	r3, #5
 8004112:	d901      	bls.n	8004118 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004114:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004118:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 800411e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004122:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004124:	2200      	movs	r2, #0
 8004126:	709a      	strb	r2, [r3, #2]
}
 8004128:	b002      	add	sp, #8
 800412a:	bd10      	pop	{r4, pc}
 800412c:	20001dde 	.word	0x20001dde

08004130 <ft5336_TS_GetXY>:
{
 8004130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004134:	4c2f      	ldr	r4, [pc, #188]	; (80041f4 <ft5336_TS_GetXY+0xc4>)
{
 8004136:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8004138:	f04f 0800 	mov.w	r8, #0
{
 800413c:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800413e:	78a3      	ldrb	r3, [r4, #2]
 8004140:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
 8004142:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004146:	429a      	cmp	r2, r3
 8004148:	d94d      	bls.n	80041e6 <ft5336_TS_GetXY+0xb6>
    switch(ft5336_handle.currActiveTouchIdx)
 800414a:	2b09      	cmp	r3, #9
 800414c:	d84e      	bhi.n	80041ec <ft5336_TS_GetXY+0xbc>
 800414e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	1d19      	adds	r1, r3, #4
 8004158:	f103 0b03 	add.w	fp, r3, #3
 800415c:	f103 0a06 	add.w	sl, r3, #6
 8004160:	3305      	adds	r3, #5
 8004162:	b2c9      	uxtb	r1, r1
 8004164:	fa5f fb8b 	uxtb.w	fp, fp
 8004168:	fa5f fa8a 	uxtb.w	sl, sl
 800416c:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004170:	b2c6      	uxtb	r6, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004172:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80041f8 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004176:	4630      	mov	r0, r6
 8004178:	f7fd fcda 	bl	8001b30 <TS_IO_Read>
 800417c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004180:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004184:	4659      	mov	r1, fp
 8004186:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004188:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800418c:	f7fd fcd0 	bl	8001b30 <TS_IO_Read>
 8004190:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004194:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004196:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800419a:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800419c:	f8b9 2000 	ldrh.w	r2, [r9]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041a6:	4313      	orrs	r3, r2
    *X = coord;
 80041a8:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80041aa:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80041ae:	f7fd fcbf 	bl	8001b30 <TS_IO_Read>
 80041b2:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80041b6:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80041b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80041bc:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80041be:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80041c2:	f7fd fcb5 	bl	8001b30 <TS_IO_Read>
 80041c6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80041ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80041ce:	f8b9 2000 	ldrh.w	r2, [r9]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 80041de:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80041e0:	78a3      	ldrb	r3, [r4, #2]
 80041e2:	3301      	adds	r3, #1
 80041e4:	70a3      	strb	r3, [r4, #2]
}
 80041e6:	b003      	add	sp, #12
 80041e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80041ec:	46c2      	mov	sl, r8
 80041ee:	46c3      	mov	fp, r8
 80041f0:	4641      	mov	r1, r8
 80041f2:	e7bd      	b.n	8004170 <ft5336_TS_GetXY+0x40>
 80041f4:	20001dde 	.word	0x20001dde
 80041f8:	20001ddc 	.word	0x20001ddc

080041fc <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80041fc:	2201      	movs	r2, #1
 80041fe:	21a4      	movs	r1, #164	; 0xa4
 8004200:	b2c0      	uxtb	r0, r0
 8004202:	f7fd bc7b 	b.w	8001afc <TS_IO_Write>

08004206 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004206:	2200      	movs	r2, #0
 8004208:	21a4      	movs	r1, #164	; 0xa4
 800420a:	b2c0      	uxtb	r0, r0
 800420c:	f7fd bc76 	b.w	8001afc <TS_IO_Write>

08004210 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8004210:	f7ff bff9 	b.w	8004206 <ft5336_TS_DisableIT>

08004214 <ft5336_TS_ClearIT>:
 8004214:	4770      	bx	lr
	...

08004218 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8004218:	4b02      	ldr	r3, [pc, #8]	; (8004224 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	b90a      	cbnz	r2, 8004222 <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
}
 8004222:	4770      	bx	lr
 8004224:	20001dde 	.word	0x20001dde

08004228 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800422a:	2003      	movs	r0, #3
{
 800422c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004236:	f000 f82d 	bl	8004294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fd faf8 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004240:	f7fd f89a 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004244:	2000      	movs	r0, #0
 8004246:	bd08      	pop	{r3, pc}
 8004248:	40023c00 	.word	0x40023c00

0800424c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800424c:	4a03      	ldr	r2, [pc, #12]	; (800425c <HAL_IncTick+0x10>)
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_IncTick+0x14>)
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	440b      	add	r3, r1
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20001de4 	.word	0x20001de4
 8004260:	20000038 	.word	0x20000038

08004264 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <HAL_GetTick+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20001de4 	.word	0x20001de4

08004270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004274:	f7ff fff6 	bl	8004264 <HAL_GetTick>
 8004278:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800427a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800427c:	bf1e      	ittt	ne
 800427e:	4b04      	ldrne	r3, [pc, #16]	; (8004290 <HAL_Delay+0x20>)
 8004280:	781b      	ldrbne	r3, [r3, #0]
 8004282:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004284:	f7ff ffee 	bl	8004264 <HAL_GetTick>
 8004288:	1b43      	subs	r3, r0, r5
 800428a:	42a3      	cmp	r3, r4
 800428c:	d3fa      	bcc.n	8004284 <HAL_Delay+0x14>
  {
  }
}
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000038 	.word	0x20000038

08004294 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004294:	4907      	ldr	r1, [pc, #28]	; (80042b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004296:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004298:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800429a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800429e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042a2:	0412      	lsls	r2, r2, #16
 80042a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80042b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80042b2:	4770      	bx	lr
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ba:	b530      	push	{r4, r5, lr}
 80042bc:	68dc      	ldr	r4, [r3, #12]
 80042be:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	bf28      	it	cs
 80042cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ce:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042d4:	bf8c      	ite	hi
 80042d6:	3c03      	subhi	r4, #3
 80042d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042da:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80042de:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e0:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e4:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	fa03 f304 	lsl.w	r3, r3, r4
 80042f0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80042f8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80042fa:	db06      	blt.n	800430a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004300:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004304:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004308:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430a:	f000 000f 	and.w	r0, r0, #15
 800430e:	4a02      	ldr	r2, [pc, #8]	; (8004318 <HAL_NVIC_SetPriority+0x60>)
 8004310:	5413      	strb	r3, [r2, r0]
 8004312:	e7f9      	b.n	8004308 <HAL_NVIC_SetPriority+0x50>
 8004314:	e000ed00 	.word	0xe000ed00
 8004318:	e000ed14 	.word	0xe000ed14

0800431c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800431c:	2800      	cmp	r0, #0
 800431e:	db07      	blt.n	8004330 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004320:	0941      	lsrs	r1, r0, #5
 8004322:	2301      	movs	r3, #1
 8004324:	f000 001f 	and.w	r0, r0, #31
 8004328:	4a02      	ldr	r2, [pc, #8]	; (8004334 <HAL_NVIC_EnableIRQ+0x18>)
 800432a:	4083      	lsls	r3, r0
 800432c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000e100 	.word	0xe000e100

08004338 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004338:	2800      	cmp	r0, #0
 800433a:	db0c      	blt.n	8004356 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433c:	0943      	lsrs	r3, r0, #5
 800433e:	2201      	movs	r2, #1
 8004340:	f000 001f 	and.w	r0, r0, #31
 8004344:	4904      	ldr	r1, [pc, #16]	; (8004358 <HAL_NVIC_DisableIRQ+0x20>)
 8004346:	3320      	adds	r3, #32
 8004348:	4082      	lsls	r2, r0
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800434e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004352:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004356:	4770      	bx	lr
 8004358:	e000e100 	.word	0xe000e100

0800435c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800435c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <HAL_MPU_Disable+0x18>)
 8004362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004364:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800436a:	2200      	movs	r2, #0
 800436c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_MPU_Enable+0x1c>)
 800437a:	f040 0001 	orr.w	r0, r0, #1
 800437e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004384:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004388:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800438a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800438e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004398:	7843      	ldrb	r3, [r0, #1]
 800439a:	4a14      	ldr	r2, [pc, #80]	; (80043ec <HAL_MPU_ConfigRegion+0x54>)
{
 800439c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800439e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80043a2:	7801      	ldrb	r1, [r0, #0]
 80043a4:	b1e9      	cbz	r1, 80043e2 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80043a6:	6843      	ldr	r3, [r0, #4]
 80043a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80043ac:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80043ae:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80043b0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80043b2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043b6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80043b8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043ba:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80043be:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043c0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80043c4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043c6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80043ca:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80043d0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80043d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043d6:	7a01      	ldrb	r1, [r0, #8]
 80043d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80043dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80043e0:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80043e2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80043e6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80043ea:	e7f9      	b.n	80043e0 <HAL_MPU_ConfigRegion+0x48>
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80043f0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043f2:	4604      	mov	r4, r0
 80043f4:	b908      	cbnz	r0, 80043fa <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80043f6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80043f8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043fa:	7f43      	ldrb	r3, [r0, #29]
 80043fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004400:	b913      	cbnz	r3, 8004408 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004402:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004404:	f7fc ffd6 	bl	80013b4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004408:	2302      	movs	r3, #2
 800440a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800440c:	7923      	ldrb	r3, [r4, #4]
 800440e:	b9e3      	cbnz	r3, 800444a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <HAL_CRC_Init+0x70>)
 8004414:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	f022 0218 	bic.w	r2, r2, #24
 800441c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800441e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004420:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004422:	b9d2      	cbnz	r2, 800445a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004428:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800442a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	6961      	ldr	r1, [r4, #20]
 8004430:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004434:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004436:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004438:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004444:	2301      	movs	r3, #1
 8004446:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004448:	e7d6      	b.n	80043f8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800444a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800444e:	4620      	mov	r0, r4
 8004450:	f000 f808 	bl	8004464 <HAL_CRCEx_Polynomial_Set>
 8004454:	2800      	cmp	r0, #0
 8004456:	d0e2      	beq.n	800441e <HAL_CRC_Init+0x2e>
 8004458:	e7cd      	b.n	80043f6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800445a:	6922      	ldr	r2, [r4, #16]
 800445c:	e7e4      	b.n	8004428 <HAL_CRC_Init+0x38>
 800445e:	bf00      	nop
 8004460:	04c11db7 	.word	0x04c11db7

08004464 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004464:	231f      	movs	r3, #31
{
 8004466:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004468:	3b01      	subs	r3, #1
 800446a:	d31c      	bcc.n	80044a6 <HAL_CRCEx_Polynomial_Set+0x42>
 800446c:	fa21 f403 	lsr.w	r4, r1, r3
 8004470:	07e4      	lsls	r4, r4, #31
 8004472:	d5f9      	bpl.n	8004468 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004474:	2a10      	cmp	r2, #16
 8004476:	d012      	beq.n	800449e <HAL_CRCEx_Polynomial_Set+0x3a>
 8004478:	d804      	bhi.n	8004484 <HAL_CRCEx_Polynomial_Set+0x20>
 800447a:	b13a      	cbz	r2, 800448c <HAL_CRCEx_Polynomial_Set+0x28>
 800447c:	2a08      	cmp	r2, #8
 800447e:	d010      	beq.n	80044a2 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004480:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004482:	e00b      	b.n	800449c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8004484:	2a18      	cmp	r2, #24
 8004486:	d1fb      	bne.n	8004480 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004488:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800448a:	d8f9      	bhi.n	8004480 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004490:	6883      	ldr	r3, [r0, #8]
 8004492:	f023 0318 	bic.w	r3, r3, #24
 8004496:	4313      	orrs	r3, r2
 8004498:	6083      	str	r3, [r0, #8]
 800449a:	2000      	movs	r0, #0
}
 800449c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800449e:	2b07      	cmp	r3, #7
 80044a0:	e7f3      	b.n	800448a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80044a2:	2b0f      	cmp	r3, #15
 80044a4:	e7f1      	b.n	800448a <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	d1ea      	bne.n	8004480 <HAL_CRCEx_Polynomial_Set+0x1c>
 80044aa:	e7ef      	b.n	800448c <HAL_CRCEx_Polynomial_Set+0x28>

080044ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80044b2:	f7ff fed7 	bl	8004264 <HAL_GetTick>
 80044b6:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044b8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d006      	beq.n	80044ce <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044c0:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 80044c2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044c4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80044c6:	2300      	movs	r3, #0
 80044c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	f022 0216 	bic.w	r2, r2, #22
 80044d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044de:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044e2:	b90a      	cbnz	r2, 80044e8 <HAL_DMA_Abort+0x3c>
 80044e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80044e6:	b11a      	cbz	r2, 80044f0 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	f022 0208 	bic.w	r2, r2, #8
 80044ee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f013 0301 	ands.w	r3, r3, #1
 8004500:	d108      	bne.n	8004514 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004502:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004504:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004506:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004508:	408a      	lsls	r2, r1
 800450a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800450c:	2201      	movs	r2, #1
 800450e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004512:	e7d8      	b.n	80044c6 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004514:	f7ff fea6 	bl	8004264 <HAL_GetTick>
 8004518:	1b40      	subs	r0, r0, r5
 800451a:	2805      	cmp	r0, #5
 800451c:	d9ec      	bls.n	80044f8 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800451e:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004520:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004522:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004524:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8004528:	e7cd      	b.n	80044c6 <HAL_DMA_Abort+0x1a>

0800452a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800452a:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800452c:	4604      	mov	r4, r0
 800452e:	b330      	cbz	r0, 800457e <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004530:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004538:	b91b      	cbnz	r3, 8004542 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800453a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800453e:	f7fc ff4f 	bl	80013e0 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004542:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004544:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004546:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004548:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800454a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004554:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004556:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004558:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800455a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800455c:	f023 0307 	bic.w	r3, r3, #7
 8004560:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004562:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004564:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004566:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004568:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800456c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004570:	430b      	orrs	r3, r1
 8004572:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004574:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004576:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004578:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 800457c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800457e:	2001      	movs	r0, #1
 8004580:	e7fc      	b.n	800457c <HAL_DMA2D_Init+0x52>

08004582 <HAL_DMA2D_LineEventCallback>:
 8004582:	4770      	bx	lr

08004584 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004584:	4770      	bx	lr

08004586 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004586:	6803      	ldr	r3, [r0, #0]
{
 8004588:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800458a:	685e      	ldr	r6, [r3, #4]
{
 800458c:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800458e:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004590:	07f2      	lsls	r2, r6, #31
 8004592:	d514      	bpl.n	80045be <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004594:	05e9      	lsls	r1, r5, #23
 8004596:	d512      	bpl.n	80045be <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80045a8:	2201      	movs	r2, #1
 80045aa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045ac:	2304      	movs	r3, #4
 80045ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045b2:	2300      	movs	r3, #0
 80045b4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80045b8:	6943      	ldr	r3, [r0, #20]
 80045ba:	b103      	cbz	r3, 80045be <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80045bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045be:	06b2      	lsls	r2, r6, #26
 80045c0:	d516      	bpl.n	80045f0 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80045c2:	04ab      	lsls	r3, r5, #18
 80045c4:	d514      	bpl.n	80045f0 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ce:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80045d0:	2220      	movs	r2, #32
 80045d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80045d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045d6:	f043 0302 	orr.w	r3, r3, #2
 80045da:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045dc:	2304      	movs	r3, #4
 80045de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045e2:	2300      	movs	r3, #0
 80045e4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80045e8:	6963      	ldr	r3, [r4, #20]
 80045ea:	b10b      	cbz	r3, 80045f0 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80045ec:	4620      	mov	r0, r4
 80045ee:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80045f0:	0730      	lsls	r0, r6, #28
 80045f2:	d516      	bpl.n	8004622 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80045f4:	0529      	lsls	r1, r5, #20
 80045f6:	d514      	bpl.n	8004622 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004600:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004602:	2208      	movs	r2, #8
 8004604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004606:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004608:	f043 0304 	orr.w	r3, r3, #4
 800460c:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800460e:	2304      	movs	r3, #4
 8004610:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004614:	2300      	movs	r3, #0
 8004616:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800461a:	6963      	ldr	r3, [r4, #20]
 800461c:	b10b      	cbz	r3, 8004622 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800461e:	4620      	mov	r0, r4
 8004620:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004622:	0772      	lsls	r2, r6, #29
 8004624:	d50b      	bpl.n	800463e <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004626:	056b      	lsls	r3, r5, #21
 8004628:	d509      	bpl.n	800463e <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800462a:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800462c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004634:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004636:	2204      	movs	r2, #4
 8004638:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800463a:	f7ff ffa2 	bl	8004582 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800463e:	07b0      	lsls	r0, r6, #30
 8004640:	d514      	bpl.n	800466c <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004642:	05a9      	lsls	r1, r5, #22
 8004644:	d512      	bpl.n	800466c <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004650:	2202      	movs	r2, #2
 8004652:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004654:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004656:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004658:	2301      	movs	r3, #1
 800465a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800465e:	2300      	movs	r3, #0
 8004660:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004664:	6923      	ldr	r3, [r4, #16]
 8004666:	b10b      	cbz	r3, 800466c <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004668:	4620      	mov	r0, r4
 800466a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800466c:	06f2      	lsls	r2, r6, #27
 800466e:	d513      	bpl.n	8004698 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004670:	04eb      	lsls	r3, r5, #19
 8004672:	d511      	bpl.n	8004698 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004674:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004676:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800467e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004680:	2210      	movs	r2, #16
 8004682:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004684:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004686:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004688:	2301      	movs	r3, #1
 800468a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800468e:	2300      	movs	r3, #0
 8004690:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004694:	f7ff ff76 	bl	8004584 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004698:	bd70      	pop	{r4, r5, r6, pc}
	...

0800469c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800469e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	f04f 0302 	mov.w	r3, #2
 80046a8:	d02b      	beq.n	8004702 <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80046aa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80046ae:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80046b0:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80046b4:	4f1c      	ldr	r7, [pc, #112]	; (8004728 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 80046b6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80046ba:	010e      	lsls	r6, r1, #4
 80046bc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80046be:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 80046c2:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046c6:	3c09      	subs	r4, #9
 80046c8:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80046ca:	bf96      	itet	ls
 80046cc:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80046d0:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80046d4:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80046d6:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80046d8:	b9a9      	cbnz	r1, 8004706 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80046da:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046dc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80046de:	ea01 0107 	and.w	r1, r1, r7
 80046e2:	ea42 0201 	orr.w	r2, r2, r1
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80046e8:	6982      	ldr	r2, [r0, #24]
 80046ea:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046ec:	d803      	bhi.n	80046f6 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80046ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80046f0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046f4:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046fc:	2300      	movs	r3, #0
 80046fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004702:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004706:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004708:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800470a:	ea01 0107 	and.w	r1, r1, r7
 800470e:	ea42 0201 	orr.w	r2, r2, r1
 8004712:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004714:	eb00 0206 	add.w	r2, r0, r6
 8004718:	6992      	ldr	r2, [r2, #24]
 800471a:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800471c:	d8eb      	bhi.n	80046f6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800471e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004722:	621d      	str	r5, [r3, #32]
 8004724:	e7e7      	b.n	80046f6 <HAL_DMA2D_ConfigLayer+0x5a>
 8004726:	bf00      	nop
 8004728:	00fcfff0 	.word	0x00fcfff0

0800472c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800472c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004730:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004732:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80048ec <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004736:	4a6b      	ldr	r2, [pc, #428]	; (80048e4 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8004738:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800473a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800473c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800473e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004742:	43ac      	bics	r4, r5
 8004744:	f040 80b4 	bne.w	80048b0 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004748:	684d      	ldr	r5, [r1, #4]
 800474a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800474e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004750:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004754:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004758:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800475a:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800475c:	2f01      	cmp	r7, #1
 800475e:	d834      	bhi.n	80047ca <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8004760:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004762:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004766:	68cf      	ldr	r7, [r1, #12]
 8004768:	fa07 f708 	lsl.w	r7, r7, r8
 800476c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004770:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004772:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004774:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004778:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800477c:	409f      	lsls	r7, r3
 800477e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004782:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004784:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004786:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004788:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800478c:	688f      	ldr	r7, [r1, #8]
 800478e:	fa07 f708 	lsl.w	r7, r7, r8
 8004792:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004796:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004798:	d119      	bne.n	80047ce <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800479a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800479e:	f003 0b07 	and.w	fp, r3, #7
 80047a2:	f04f 0e0f 	mov.w	lr, #15
 80047a6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80047aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80047ae:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80047b6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047ba:	690f      	ldr	r7, [r1, #16]
 80047bc:	fa07 f70b 	lsl.w	r7, r7, fp
 80047c0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80047c4:	f8ca 7020 	str.w	r7, [sl, #32]
 80047c8:	e001      	b.n	80047ce <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ca:	2c03      	cmp	r4, #3
 80047cc:	d1da      	bne.n	8004784 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80047ce:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047d0:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047d4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047d8:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047dc:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80047e0:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047e2:	d065      	beq.n	80048b0 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e4:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80047e8:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047ec:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80047f4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047f8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fa:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80047fe:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004802:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004806:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800480a:	9401      	str	r4, [sp, #4]
 800480c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800480e:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8004810:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004814:	40bc      	lsls	r4, r7
 8004816:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800481a:	4c33      	ldr	r4, [pc, #204]	; (80048e8 <HAL_GPIO_Init+0x1bc>)
 800481c:	42a0      	cmp	r0, r4
 800481e:	d04e      	beq.n	80048be <HAL_GPIO_Init+0x192>
 8004820:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004824:	42a0      	cmp	r0, r4
 8004826:	d04c      	beq.n	80048c2 <HAL_GPIO_Init+0x196>
 8004828:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800482c:	42a0      	cmp	r0, r4
 800482e:	d04a      	beq.n	80048c6 <HAL_GPIO_Init+0x19a>
 8004830:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004834:	42a0      	cmp	r0, r4
 8004836:	d048      	beq.n	80048ca <HAL_GPIO_Init+0x19e>
 8004838:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800483c:	42a0      	cmp	r0, r4
 800483e:	d046      	beq.n	80048ce <HAL_GPIO_Init+0x1a2>
 8004840:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004844:	42a0      	cmp	r0, r4
 8004846:	d044      	beq.n	80048d2 <HAL_GPIO_Init+0x1a6>
 8004848:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800484c:	42a0      	cmp	r0, r4
 800484e:	d042      	beq.n	80048d6 <HAL_GPIO_Init+0x1aa>
 8004850:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004854:	42a0      	cmp	r0, r4
 8004856:	d040      	beq.n	80048da <HAL_GPIO_Init+0x1ae>
 8004858:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800485c:	42a0      	cmp	r0, r4
 800485e:	d03e      	beq.n	80048de <HAL_GPIO_Init+0x1b2>
 8004860:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004864:	42a0      	cmp	r0, r4
 8004866:	bf0c      	ite	eq
 8004868:	2409      	moveq	r4, #9
 800486a:	240a      	movne	r4, #10
 800486c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800486e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004870:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004874:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004876:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800487a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800487c:	bf54      	ite	pl
 800487e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004880:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004884:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8004886:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004888:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800488a:	bf54      	ite	pl
 800488c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800488e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004892:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8004894:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004896:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004898:	bf54      	ite	pl
 800489a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800489c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048a0:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80048a2:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80048a4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80048a6:	bf54      	ite	pl
 80048a8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80048aa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80048ae:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048b0:	3301      	adds	r3, #1
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	f47f af40 	bne.w	8004738 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80048b8:	b003      	add	sp, #12
 80048ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80048be:	2400      	movs	r4, #0
 80048c0:	e7d4      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048c2:	2401      	movs	r4, #1
 80048c4:	e7d2      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048c6:	2402      	movs	r4, #2
 80048c8:	e7d0      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048ca:	2403      	movs	r4, #3
 80048cc:	e7ce      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048ce:	2404      	movs	r4, #4
 80048d0:	e7cc      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048d2:	2405      	movs	r4, #5
 80048d4:	e7ca      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048d6:	2406      	movs	r4, #6
 80048d8:	e7c8      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048da:	2407      	movs	r4, #7
 80048dc:	e7c6      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048de:	2408      	movs	r4, #8
 80048e0:	e7c4      	b.n	800486c <HAL_GPIO_Init+0x140>
 80048e2:	bf00      	nop
 80048e4:	40013c00 	.word	0x40013c00
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40023800 	.word	0x40023800

080048f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80048f4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80048f6:	4c49      	ldr	r4, [pc, #292]	; (8004a1c <HAL_GPIO_DeInit+0x12c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80048f8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004a24 <HAL_GPIO_DeInit+0x134>
 80048fc:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004a28 <HAL_GPIO_DeInit+0x138>
 8004900:	f8df b128 	ldr.w	fp, [pc, #296]	; 8004a2c <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 8004904:	2301      	movs	r3, #1
 8004906:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800490a:	ea3e 0501 	bics.w	r5, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800490e:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8004912:	d16c      	bne.n	80049ee <HAL_GPIO_DeInit+0xfe>
      tmp = SYSCFG->EXTICR[position >> 2];
 8004914:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004918:	f002 0c03 	and.w	ip, r2, #3
 800491c:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800491e:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <HAL_GPIO_DeInit+0x130>)
 8004920:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004924:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004928:	4298      	cmp	r0, r3
 800492a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800492e:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8004932:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004936:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800493a:	d05d      	beq.n	80049f8 <HAL_GPIO_DeInit+0x108>
 800493c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004940:	4298      	cmp	r0, r3
 8004942:	d05b      	beq.n	80049fc <HAL_GPIO_DeInit+0x10c>
 8004944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004948:	4298      	cmp	r0, r3
 800494a:	d059      	beq.n	8004a00 <HAL_GPIO_DeInit+0x110>
 800494c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004950:	4298      	cmp	r0, r3
 8004952:	d057      	beq.n	8004a04 <HAL_GPIO_DeInit+0x114>
 8004954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004958:	4298      	cmp	r0, r3
 800495a:	d055      	beq.n	8004a08 <HAL_GPIO_DeInit+0x118>
 800495c:	4548      	cmp	r0, r9
 800495e:	d055      	beq.n	8004a0c <HAL_GPIO_DeInit+0x11c>
 8004960:	4550      	cmp	r0, sl
 8004962:	d055      	beq.n	8004a10 <HAL_GPIO_DeInit+0x120>
 8004964:	4558      	cmp	r0, fp
 8004966:	d055      	beq.n	8004a14 <HAL_GPIO_DeInit+0x124>
 8004968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496c:	4298      	cmp	r0, r3
 800496e:	d053      	beq.n	8004a18 <HAL_GPIO_DeInit+0x128>
 8004970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004974:	4298      	cmp	r0, r3
 8004976:	bf0c      	ite	eq
 8004978:	2309      	moveq	r3, #9
 800497a:	230a      	movne	r3, #10
 800497c:	fa03 f30c 	lsl.w	r3, r3, ip
 8004980:	4543      	cmp	r3, r8
 8004982:	d113      	bne.n	80049ac <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	ea23 0307 	bic.w	r3, r3, r7
 800498a:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	ea23 0307 	bic.w	r3, r3, r7
 8004992:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004994:	68e3      	ldr	r3, [r4, #12]
 8004996:	ea23 0307 	bic.w	r3, r3, r7
 800499a:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800499c:	68a3      	ldr	r3, [r4, #8]
 800499e:	ea23 0307 	bic.w	r3, r3, r7
 80049a2:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80049a4:	68ab      	ldr	r3, [r5, #8]
 80049a6:	ea23 0306 	bic.w	r3, r3, r6
 80049aa:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80049ac:	0056      	lsls	r6, r2, #1
 80049ae:	2303      	movs	r3, #3
 80049b0:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049b2:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80049b6:	40b3      	lsls	r3, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049b8:	270f      	movs	r7, #15
 80049ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80049be:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049c2:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80049c6:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049c8:	08d5      	lsrs	r5, r2, #3
 80049ca:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80049ce:	6a2e      	ldr	r6, [r5, #32]
 80049d0:	ea26 0607 	bic.w	r6, r6, r7
 80049d4:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049d6:	68c5      	ldr	r5, [r0, #12]
 80049d8:	ea25 0503 	bic.w	r5, r5, r3
 80049dc:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049de:	6845      	ldr	r5, [r0, #4]
 80049e0:	ea25 050e 	bic.w	r5, r5, lr
 80049e4:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049e6:	6885      	ldr	r5, [r0, #8]
 80049e8:	ea25 0303 	bic.w	r3, r5, r3
 80049ec:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ee:	3201      	adds	r2, #1
 80049f0:	2a10      	cmp	r2, #16
 80049f2:	d187      	bne.n	8004904 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80049f8:	2300      	movs	r3, #0
 80049fa:	e7bf      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e7bd      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e7bb      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a04:	2303      	movs	r3, #3
 8004a06:	e7b9      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	e7b7      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a0c:	2305      	movs	r3, #5
 8004a0e:	e7b5      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a10:	2306      	movs	r3, #6
 8004a12:	e7b3      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a14:	2307      	movs	r3, #7
 8004a16:	e7b1      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	e7af      	b.n	800497c <HAL_GPIO_DeInit+0x8c>
 8004a1c:	40013c00 	.word	0x40013c00
 8004a20:	40020000 	.word	0x40020000
 8004a24:	40021400 	.word	0x40021400
 8004a28:	40021800 	.word	0x40021800
 8004a2c:	40021c00 	.word	0x40021c00

08004a30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a30:	6903      	ldr	r3, [r0, #16]
 8004a32:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004a34:	bf14      	ite	ne
 8004a36:	2001      	movne	r0, #1
 8004a38:	2000      	moveq	r0, #0
 8004a3a:	4770      	bx	lr

08004a3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a3c:	b10a      	cbz	r2, 8004a42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a3e:	6181      	str	r1, [r0, #24]
  }
}
 8004a40:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a42:	0409      	lsls	r1, r1, #16
 8004a44:	e7fb      	b.n	8004a3e <HAL_GPIO_WritePin+0x2>

08004a46 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a46:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a48:	ea01 0203 	and.w	r2, r1, r3
 8004a4c:	ea21 0103 	bic.w	r1, r1, r3
 8004a50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a54:	6181      	str	r1, [r0, #24]
}
 8004a56:	4770      	bx	lr

08004a58 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a58:	6803      	ldr	r3, [r0, #0]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	0791      	lsls	r1, r2, #30
 8004a5e:	d501      	bpl.n	8004a64 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a60:	2200      	movs	r2, #0
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	07d2      	lsls	r2, r2, #31
 8004a68:	d403      	bmi.n	8004a72 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	619a      	str	r2, [r3, #24]
  }
}
 8004a72:	4770      	bx	lr

08004a74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a74:	b530      	push	{r4, r5, lr}
 8004a76:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a78:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a7c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a7e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a80:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a86:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a88:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a8a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a92:	ea20 0002 	bic.w	r0, r0, r2
 8004a96:	4303      	orrs	r3, r0
 8004a98:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a9a:	bd30      	pop	{r4, r5, pc}
 8004a9c:	03ff63ff 	.word	0x03ff63ff

08004aa0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8004aa0:	6803      	ldr	r3, [r0, #0]
{
 8004aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8004aa6:	699c      	ldr	r4, [r3, #24]
{
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	460f      	mov	r7, r1
 8004aac:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004aae:	f014 0410 	ands.w	r4, r4, #16
 8004ab2:	d06f      	beq.n	8004b94 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8004ab4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aba:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	0690      	lsls	r0, r2, #26
 8004ac2:	d461      	bmi.n	8004b88 <I2C_IsErrorOccurred+0xe8>
 8004ac4:	f1b8 0f00 	cmp.w	r8, #0
 8004ac8:	d035      	beq.n	8004b36 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8004aca:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8004ace:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004ad0:	682e      	ldr	r6, [r5, #0]
 8004ad2:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ad4:	05d9      	lsls	r1, r3, #23
 8004ad6:	d505      	bpl.n	8004ae4 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004adc:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8004ae0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ae2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ae4:	055a      	lsls	r2, r3, #21
 8004ae6:	d505      	bpl.n	8004af4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004aec:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8004af0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004af2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004af4:	059b      	lsls	r3, r3, #22
 8004af6:	d54f      	bpl.n	8004b98 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004af8:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004afc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b00:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7ff ffa8 	bl	8004a58 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004b08:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8004b0a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004b0c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004b10:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004b14:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8004b1e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004b20:	4323      	orrs	r3, r4
 8004b22:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	2320      	movs	r3, #32
 8004b26:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004b30:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8004b34:	e032      	b.n	8004b9c <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8004b36:	1c7a      	adds	r2, r7, #1
 8004b38:	d0c1      	beq.n	8004abe <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7ff fb93 	bl	8004264 <HAL_GetTick>
 8004b3e:	1b80      	subs	r0, r0, r6
 8004b40:	42b8      	cmp	r0, r7
 8004b42:	d801      	bhi.n	8004b48 <I2C_IsErrorOccurred+0xa8>
 8004b44:	2f00      	cmp	r7, #0
 8004b46:	d1b9      	bne.n	8004abc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004b4c:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b50:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8004b52:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b54:	0400      	lsls	r0, r0, #16
 8004b56:	d50a      	bpl.n	8004b6e <I2C_IsErrorOccurred+0xce>
 8004b58:	0449      	lsls	r1, r1, #17
 8004b5a:	d408      	bmi.n	8004b6e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8004b5c:	2a20      	cmp	r2, #32
 8004b5e:	d006      	beq.n	8004b6e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b66:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004b68:	f7ff fb7c 	bl	8004264 <HAL_GetTick>
 8004b6c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	069b      	lsls	r3, r3, #26
 8004b74:	d4a2      	bmi.n	8004abc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b76:	f7ff fb75 	bl	8004264 <HAL_GetTick>
 8004b7a:	1b80      	subs	r0, r0, r6
 8004b7c:	2819      	cmp	r0, #25
 8004b7e:	d9f6      	bls.n	8004b6e <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004b80:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8004b82:	f04f 0801 	mov.w	r8, #1
 8004b86:	e799      	b.n	8004abc <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8004b88:	f1b8 0f00 	cmp.w	r8, #0
 8004b8c:	d19d      	bne.n	8004aca <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b8e:	2220      	movs	r2, #32
 8004b90:	61da      	str	r2, [r3, #28]
 8004b92:	e79a      	b.n	8004aca <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	4620      	mov	r0, r4
 8004b96:	e79b      	b.n	8004ad0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d1b2      	bne.n	8004b02 <I2C_IsErrorOccurred+0x62>
}
 8004b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ba0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460d      	mov	r5, r1
 8004ba6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	079b      	lsls	r3, r3, #30
 8004bae:	d501      	bpl.n	8004bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004bb0:	2000      	movs	r0, #0
}
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff ff71 	bl	8004aa0 <I2C_IsErrorOccurred>
 8004bbe:	b9a0      	cbnz	r0, 8004bea <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	1c6a      	adds	r2, r5, #1
 8004bc2:	d0f1      	beq.n	8004ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7ff fb4e 	bl	8004264 <HAL_GetTick>
 8004bc8:	1b80      	subs	r0, r0, r6
 8004bca:	42a8      	cmp	r0, r5
 8004bcc:	d801      	bhi.n	8004bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	d1ea      	bne.n	8004ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004bd4:	f043 0320 	orr.w	r3, r3, #32
 8004bd8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bda:	2320      	movs	r3, #32
 8004bdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004be6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004bea:	2001      	movs	r0, #1
 8004bec:	e7e1      	b.n	8004bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08004bee <I2C_WaitOnFlagUntilTimeout>:
{
 8004bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf2:	9f06      	ldr	r7, [sp, #24]
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	4688      	mov	r8, r1
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bfc:	6822      	ldr	r2, [r4, #0]
 8004bfe:	6993      	ldr	r3, [r2, #24]
 8004c00:	ea38 0303 	bics.w	r3, r8, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	42b3      	cmp	r3, r6
 8004c0c:	d001      	beq.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e015      	b.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	1c6b      	adds	r3, r5, #1
 8004c14:	d0f3      	beq.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7ff fb25 	bl	8004264 <HAL_GetTick>
 8004c1a:	1bc0      	subs	r0, r0, r7
 8004c1c:	42a8      	cmp	r0, r5
 8004c1e:	d801      	bhi.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x36>
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	d1eb      	bne.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004c26:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	2320      	movs	r3, #32
 8004c30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004c3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c42 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004c42:	b570      	push	{r4, r5, r6, lr}
 8004c44:	4604      	mov	r4, r0
 8004c46:	460d      	mov	r5, r1
 8004c48:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	069b      	lsls	r3, r3, #26
 8004c50:	d501      	bpl.n	8004c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004c52:	2000      	movs	r0, #0
}
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c56:	4632      	mov	r2, r6
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7ff ff20 	bl	8004aa0 <I2C_IsErrorOccurred>
 8004c60:	b990      	cbnz	r0, 8004c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c62:	f7ff faff 	bl	8004264 <HAL_GetTick>
 8004c66:	1b80      	subs	r0, r0, r6
 8004c68:	42a8      	cmp	r0, r5
 8004c6a:	d801      	bhi.n	8004c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	d1ec      	bne.n	8004c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c72:	f043 0320 	orr.w	r3, r3, #32
 8004c76:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004c84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e7e3      	b.n	8004c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004c8c <HAL_I2C_Init>:
{
 8004c8c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004c8e:	4604      	mov	r4, r0
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d04a      	beq.n	8004d2a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c94:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c9c:	b91b      	cbnz	r3, 8004ca6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004c9e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004ca2:	f7fc fbbd 	bl	8001420 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca6:	2324      	movs	r3, #36	; 0x24
 8004ca8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cb6:	6862      	ldr	r2, [r4, #4]
 8004cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cbc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cc6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cca:	2901      	cmp	r1, #1
 8004ccc:	d124      	bne.n	8004d18 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cd2:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cd4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cd8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ce0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cea:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004cee:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cf0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004cf6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cf8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d0a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d10:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004d16:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d18:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d1c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d1e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d20:	d1d8      	bne.n	8004cd4 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d26:	605a      	str	r2, [r3, #4]
 8004d28:	e7d4      	b.n	8004cd4 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	e7f3      	b.n	8004d16 <HAL_I2C_Init+0x8a>

08004d2e <HAL_I2C_DeInit>:
{
 8004d2e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004d30:	4604      	mov	r4, r0
 8004d32:	b198      	cbz	r0, 8004d5c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004d34:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d36:	2324      	movs	r3, #36	; 0x24
 8004d38:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004d3c:	6813      	ldr	r3, [r2, #0]
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004d44:	f7fc fbb0 	bl	80014a8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d48:	2000      	movs	r0, #0
 8004d4a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8004d4c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d50:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d54:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d56:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004d5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	e7fc      	b.n	8004d5a <HAL_I2C_DeInit+0x2c>

08004d60 <HAL_I2C_Mem_Write>:
{
 8004d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	2b20      	cmp	r3, #32
{
 8004d70:	4616      	mov	r6, r2
 8004d72:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004d76:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7a:	f040 80c6 	bne.w	8004f0a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8004d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d80:	b113      	cbz	r3, 8004d88 <HAL_I2C_Mem_Write+0x28>
 8004d82:	f1ba 0f00 	cmp.w	sl, #0
 8004d86:	d106      	bne.n	8004d96 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d8c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004d8e:	2001      	movs	r0, #1
}
 8004d90:	b003      	add	sp, #12
 8004d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004d96:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	f000 80b5 	beq.w	8004f0a <HAL_I2C_Mem_Write+0x1aa>
 8004da0:	f04f 0b01 	mov.w	fp, #1
 8004da4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004da8:	f7ff fa5c 	bl	8004264 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dac:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004dae:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004db0:	9000      	str	r0, [sp, #0]
 8004db2:	465a      	mov	r2, fp
 8004db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004db8:	4620      	mov	r0, r4
 8004dba:	f7ff ff18 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d1e5      	bne.n	8004d8e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dc2:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dc4:	fa5f f289 	uxtb.w	r2, r9
 8004dc8:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8004dca:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dcc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dda:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004ddc:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dde:	4b4c      	ldr	r3, [pc, #304]	; (8004f10 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8004de0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dea:	f7ff fe43 	bl	8004a74 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dee:	462a      	mov	r2, r5
 8004df0:	4641      	mov	r1, r8
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff fed4 	bl	8004ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004df8:	bb18      	cbnz	r0, 8004e42 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dfa:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfe:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e00:	d115      	bne.n	8004e2e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e02:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e04:	2200      	movs	r2, #0
 8004e06:	2180      	movs	r1, #128	; 0x80
 8004e08:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0a:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0c:	4643      	mov	r3, r8
 8004e0e:	9500      	str	r5, [sp, #0]
 8004e10:	f7ff feed 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004e14:	b9a8      	cbnz	r0, 8004e42 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2bff      	cmp	r3, #255	; 0xff
 8004e1c:	d815      	bhi.n	8004e4a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004e1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e24:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004e26:	b292      	uxth	r2, r2
 8004e28:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	e012      	b.n	8004e54 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e2e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e30:	4641      	mov	r1, r8
 8004e32:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e36:	462a      	mov	r2, r5
 8004e38:	f7ff feb2 	bl	8004ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e3c:	b908      	cbnz	r0, 8004e42 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	e7df      	b.n	8004e02 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004e48:	e7a1      	b.n	8004d8e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e4a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e50:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e52:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e54:	4639      	mov	r1, r7
 8004e56:	4620      	mov	r0, r4
 8004e58:	f7ff fe0c 	bl	8004a74 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	4641      	mov	r1, r8
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7ff fe9d 	bl	8004ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d191      	bne.n	8004d8e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004e72:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004e74:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004e76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004e78:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004e7a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004e7c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004e7e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004e80:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004e82:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004e86:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	b1b3      	cbz	r3, 8004eba <HAL_I2C_Mem_Write+0x15a>
 8004e8c:	b9aa      	cbnz	r2, 8004eba <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e8e:	4643      	mov	r3, r8
 8004e90:	2180      	movs	r1, #128	; 0x80
 8004e92:	4620      	mov	r0, r4
 8004e94:	9500      	str	r5, [sp, #0]
 8004e96:	f7ff feaa 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	f47f af77 	bne.w	8004d8e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2bff      	cmp	r3, #255	; 0xff
 8004ea6:	d928      	bls.n	8004efa <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff fddd 	bl	8004a74 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004eba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1cc      	bne.n	8004e5c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff febb 	bl	8004c42 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	f47f af5e 	bne.w	8004d8e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004ede:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004ee2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004eec:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004ef0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ef4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004ef8:	e74a      	b.n	8004d90 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004efa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f00:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004f02:	b292      	uxth	r2, r2
 8004f04:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	e7d3      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	e740      	b.n	8004d90 <HAL_I2C_Mem_Write+0x30>
 8004f0e:	bf00      	nop
 8004f10:	80002000 	.word	0x80002000

08004f14 <HAL_I2C_Mem_Read>:
{
 8004f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004f1e:	4604      	mov	r4, r0
 8004f20:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f22:	2b20      	cmp	r3, #32
{
 8004f24:	4616      	mov	r6, r2
 8004f26:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004f2a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2e:	f040 80c9 	bne.w	80050c4 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8004f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f34:	b113      	cbz	r3, 8004f3c <HAL_I2C_Mem_Read+0x28>
 8004f36:	f1ba 0f00 	cmp.w	sl, #0
 8004f3a:	d106      	bne.n	8004f4a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f40:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004f42:	2001      	movs	r0, #1
}
 8004f44:	b003      	add	sp, #12
 8004f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004f4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	f000 80b8 	beq.w	80050c4 <HAL_I2C_Mem_Read+0x1b0>
 8004f54:	f04f 0b01 	mov.w	fp, #1
 8004f58:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004f5c:	f7ff f982 	bl	8004264 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f60:	2319      	movs	r3, #25
 8004f62:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004f64:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f66:	465a      	mov	r2, fp
 8004f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7ff fe3e 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1e4      	bne.n	8004f42 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f78:	2222      	movs	r2, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f7a:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8004f7c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f7e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f82:	2240      	movs	r2, #64	; 0x40
 8004f84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8a:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f8c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004f8e:	6262      	str	r2, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f90:	4a4d      	ldr	r2, [pc, #308]	; (80050c8 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8004f92:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f96:	9200      	str	r2, [sp, #0]
 8004f98:	fa5f f289 	uxtb.w	r2, r9
 8004f9c:	f7ff fd6a 	bl	8004a74 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa0:	462a      	mov	r2, r5
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff fdfb 	bl	8004ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004faa:	bb20      	cbnz	r0, 8004ff6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fac:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fb2:	d116      	bne.n	8004fe2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb4:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fbc:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fbe:	4643      	mov	r3, r8
 8004fc0:	9500      	str	r5, [sp, #0]
 8004fc2:	f7ff fe14 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004fc6:	b9b0      	cbnz	r0, 8004ff6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2bff      	cmp	r3, #255	; 0xff
 8004fce:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <HAL_I2C_Mem_Read+0x1b8>)
 8004fd0:	d815      	bhi.n	8004ffe <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004fd2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	e012      	b.n	8005008 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fea:	462a      	mov	r2, r5
 8004fec:	f7ff fdd8 	bl	8004ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff0:	b908      	cbnz	r0, 8004ff6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	e7de      	b.n	8004fb4 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004ffc:	e7a1      	b.n	8004f42 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ffe:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005006:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005008:	4639      	mov	r1, r7
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff fd32 	bl	8004a74 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005010:	4643      	mov	r3, r8
 8005012:	2200      	movs	r2, #0
 8005014:	2104      	movs	r1, #4
 8005016:	4620      	mov	r0, r4
 8005018:	9500      	str	r5, [sp, #0]
 800501a:	f7ff fde8 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 800501e:	2800      	cmp	r0, #0
 8005020:	d18f      	bne.n	8004f42 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005028:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800502a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800502c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800502e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005030:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005032:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005034:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005036:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005038:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800503a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800503c:	b29b      	uxth	r3, r3
 800503e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005040:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	b1b3      	cbz	r3, 8005074 <HAL_I2C_Mem_Read+0x160>
 8005046:	b9aa      	cbnz	r2, 8005074 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005048:	4643      	mov	r3, r8
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	4620      	mov	r0, r4
 800504e:	9500      	str	r5, [sp, #0]
 8005050:	f7ff fdcd 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8005054:	2800      	cmp	r0, #0
 8005056:	f47f af74 	bne.w	8004f42 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800505a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2bff      	cmp	r3, #255	; 0xff
 8005060:	d928      	bls.n	80050b4 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005062:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005068:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800506a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800506c:	4639      	mov	r1, r7
 800506e:	4620      	mov	r0, r4
 8005070:	f7ff fd00 	bl	8004a74 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005074:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1c9      	bne.n	8005010 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	462a      	mov	r2, r5
 800507e:	4641      	mov	r1, r8
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff fdde 	bl	8004c42 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005086:	2800      	cmp	r0, #0
 8005088:	f47f af5b 	bne.w	8004f42 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	2120      	movs	r1, #32
 8005090:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005098:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800509c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80050aa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050ae:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80050b2:	e747      	b.n	8004f44 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80050b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ba:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80050bc:	b292      	uxth	r2, r2
 80050be:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	e7d3      	b.n	800506c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 80050c4:	2002      	movs	r0, #2
 80050c6:	e73d      	b.n	8004f44 <HAL_I2C_Mem_Read+0x30>
 80050c8:	80002000 	.word	0x80002000
 80050cc:	80002400 	.word	0x80002400

080050d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050d0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	b2dc      	uxtb	r4, r3
 80050da:	d11d      	bne.n	8005118 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d019      	beq.n	8005118 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050e4:	2324      	movs	r3, #36	; 0x24
 80050e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ea:	6803      	ldr	r3, [r0, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4311      	orrs	r1, r2
 8005100:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005110:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005114:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005116:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005118:	2002      	movs	r0, #2
 800511a:	e7fc      	b.n	8005116 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800511c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800511c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005122:	2b20      	cmp	r3, #32
 8005124:	b2dc      	uxtb	r4, r3
 8005126:	d11c      	bne.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005128:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800512c:	2b01      	cmp	r3, #1
 800512e:	d018      	beq.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005130:	2324      	movs	r3, #36	; 0x24
 8005132:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005136:	6803      	ldr	r3, [r0, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005140:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005142:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005146:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800514a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005154:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005156:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800515a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800515e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005160:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005162:	2002      	movs	r0, #2
 8005164:	e7fc      	b.n	8005160 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08005168 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005168:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800516a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800516c:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005170:	3284      	adds	r2, #132	; 0x84
 8005172:	1883      	adds	r3, r0, r2
{
 8005174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005178:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800517a:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800517e:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005180:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005184:	684c      	ldr	r4, [r1, #4]
 8005186:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800518a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800518e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005192:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005194:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005196:	68c5      	ldr	r5, [r0, #12]
 8005198:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800519c:	443d      	add	r5, r7
 800519e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051a2:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80051a4:	68c6      	ldr	r6, [r0, #12]
 80051a6:	68cd      	ldr	r5, [r1, #12]
 80051a8:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80051ac:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80051ae:	689d      	ldr	r5, [r3, #8]
 80051b0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80051b4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80051b6:	688d      	ldr	r5, [r1, #8]
 80051b8:	68c7      	ldr	r7, [r0, #12]
 80051ba:	3501      	adds	r5, #1
 80051bc:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80051c0:	443d      	add	r5, r7
 80051c2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051c6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80051c8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80051ca:	691d      	ldr	r5, [r3, #16]
 80051cc:	f025 0507 	bic.w	r5, r5, #7
 80051d0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051d2:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80051d4:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80051d6:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80051da:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80051de:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80051e2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80051e6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80051ea:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80051ee:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80051f2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80051f4:	695d      	ldr	r5, [r3, #20]
 80051f6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80051fa:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80051fc:	694d      	ldr	r5, [r1, #20]
 80051fe:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005200:	69dd      	ldr	r5, [r3, #28]
 8005202:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8005206:	f025 0507 	bic.w	r5, r5, #7
 800520a:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800520c:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005210:	433d      	orrs	r5, r7
 8005212:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005214:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005216:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005218:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800521c:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800521e:	b1fe      	cbz	r6, 8005260 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005220:	3e01      	subs	r6, #1
 8005222:	2e06      	cmp	r6, #6
 8005224:	d81e      	bhi.n	8005264 <LTDC_SetConfig+0xfc>
 8005226:	4d10      	ldr	r5, [pc, #64]	; (8005268 <LTDC_SetConfig+0x100>)
 8005228:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800522a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800522c:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005230:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005234:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005236:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005238:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800523a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800523c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800523e:	436e      	muls	r6, r5
 8005240:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8005244:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005246:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005248:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800524c:	f024 0407 	bic.w	r4, r4, #7
 8005250:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005252:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005254:	5883      	ldr	r3, [r0, r2]
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	5083      	str	r3, [r0, r2]
}
 800525c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005260:	2504      	movs	r5, #4
 8005262:	e7e2      	b.n	800522a <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005264:	2501      	movs	r5, #1
 8005266:	e7e0      	b.n	800522a <LTDC_SetConfig+0xc2>
 8005268:	0802caf8 	.word	0x0802caf8

0800526c <HAL_LTDC_Init>:
{
 800526c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800526e:	4604      	mov	r4, r0
 8005270:	2800      	cmp	r0, #0
 8005272:	d063      	beq.n	800533c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005274:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005278:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800527c:	b91b      	cbnz	r3, 8005286 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800527e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005282:	f7fc f92d 	bl	80014e0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005286:	2302      	movs	r3, #2
 8005288:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005294:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005296:	6999      	ldr	r1, [r3, #24]
 8005298:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800529c:	4302      	orrs	r2, r0
 800529e:	68e0      	ldr	r0, [r4, #12]
 80052a0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80052a2:	6920      	ldr	r0, [r4, #16]
 80052a4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80052a6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052a8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80052aa:	4925      	ldr	r1, [pc, #148]	; (8005340 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052ac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	400a      	ands	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80052ba:	69a0      	ldr	r0, [r4, #24]
 80052bc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80052be:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80052c0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	400a      	ands	r2, r1
 80052c6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80052ce:	6a20      	ldr	r0, [r4, #32]
 80052d0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052d4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	400a      	ands	r2, r1
 80052da:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80052e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80052e4:	4302      	orrs	r2, r0
 80052e6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80052ee:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80052f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052f8:	430a      	orrs	r2, r1
 80052fa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052fe:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005302:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005306:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800530c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800530e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005312:	432a      	orrs	r2, r5
 8005314:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005318:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800531a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005322:	f042 0206 	orr.w	r2, r2, #6
 8005326:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005330:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005332:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005336:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800533a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800533c:	2001      	movs	r0, #1
 800533e:	e7fc      	b.n	800533a <HAL_LTDC_Init+0xce>
 8005340:	f000f800 	.word	0xf000f800

08005344 <HAL_LTDC_ErrorCallback>:
 8005344:	4770      	bx	lr

08005346 <HAL_LTDC_ReloadEventCallback>:
 8005346:	4770      	bx	lr

08005348 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005348:	6803      	ldr	r3, [r0, #0]
{
 800534a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800534c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800534e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005350:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005352:	0772      	lsls	r2, r6, #29
 8005354:	d514      	bpl.n	8005380 <HAL_LTDC_IRQHandler+0x38>
 8005356:	0769      	lsls	r1, r5, #29
 8005358:	d512      	bpl.n	8005380 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800535a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800535c:	f022 0204 	bic.w	r2, r2, #4
 8005360:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005362:	2204      	movs	r2, #4
 8005364:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005366:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005372:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005374:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005378:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800537c:	f7ff ffe2 	bl	8005344 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005380:	07b2      	lsls	r2, r6, #30
 8005382:	d516      	bpl.n	80053b2 <HAL_LTDC_IRQHandler+0x6a>
 8005384:	07ab      	lsls	r3, r5, #30
 8005386:	d514      	bpl.n	80053b2 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005388:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800538a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800538c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538e:	f022 0202 	bic.w	r2, r2, #2
 8005392:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005394:	2202      	movs	r2, #2
 8005396:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005398:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053a2:	2304      	movs	r3, #4
 80053a4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80053a8:	2300      	movs	r3, #0
 80053aa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80053ae:	f7ff ffc9 	bl	8005344 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053b2:	07f0      	lsls	r0, r6, #31
 80053b4:	d510      	bpl.n	80053d8 <HAL_LTDC_IRQHandler+0x90>
 80053b6:	07e9      	lsls	r1, r5, #31
 80053b8:	d50e      	bpl.n	80053d8 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053ba:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80053bc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053c6:	2201      	movs	r2, #1
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80053ca:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80053cc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80053d0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80053d4:	f7fd fec4 	bl	8003160 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053d8:	0732      	lsls	r2, r6, #28
 80053da:	d511      	bpl.n	8005400 <HAL_LTDC_IRQHandler+0xb8>
 80053dc:	072b      	lsls	r3, r5, #28
 80053de:	d50f      	bpl.n	8005400 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80053e0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80053e2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80053e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e6:	f022 0208 	bic.w	r2, r2, #8
 80053ea:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80053ec:	2208      	movs	r2, #8
 80053ee:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80053f6:	2300      	movs	r3, #0
 80053f8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80053fc:	f7ff ffa3 	bl	8005346 <HAL_LTDC_ReloadEventCallback>
}
 8005400:	bd70      	pop	{r4, r5, r6, pc}

08005402 <HAL_LTDC_ConfigLayer>:
{
 8005402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005406:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005410:	2b01      	cmp	r3, #1
 8005412:	f04f 0002 	mov.w	r0, #2
 8005416:	d01f      	beq.n	8005458 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005418:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800541a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800541e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005420:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005424:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005428:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800542c:	3438      	adds	r4, #56	; 0x38
 800542e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800543a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800543c:	4630      	mov	r0, r6
 800543e:	4662      	mov	r2, ip
 8005440:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005442:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005444:	f7ff fe90 	bl	8005168 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005448:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800544a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800544c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005450:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005454:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800545c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800545c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005460:	2b01      	cmp	r3, #1
 8005462:	f04f 0302 	mov.w	r3, #2
 8005466:	d012      	beq.n	800548e <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005468:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800546c:	6803      	ldr	r3, [r0, #0]
 800546e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005476:	4a07      	ldr	r2, [pc, #28]	; (8005494 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005478:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800547a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005482:	2301      	movs	r3, #1
 8005484:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005488:	2300      	movs	r3, #0
 800548a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800548e:	4618      	mov	r0, r3
}
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40016800 	.word	0x40016800

08005498 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800549a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800549c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800549e:	4c19      	ldr	r4, [pc, #100]	; (8005504 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80054a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054b8:	f7fe fed4 	bl	8004264 <HAL_GetTick>
 80054bc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	03da      	lsls	r2, r3, #15
 80054c2:	d50c      	bpl.n	80054de <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054c4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054c6:	4d0f      	ldr	r5, [pc, #60]	; (8005504 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054cc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80054ce:	f7fe fec9 	bl	8004264 <HAL_GetTick>
 80054d2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054d4:	686b      	ldr	r3, [r5, #4]
 80054d6:	039b      	lsls	r3, r3, #14
 80054d8:	d50a      	bpl.n	80054f0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80054da:	2000      	movs	r0, #0
 80054dc:	e006      	b.n	80054ec <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054de:	f7fe fec1 	bl	8004264 <HAL_GetTick>
 80054e2:	1b40      	subs	r0, r0, r5
 80054e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80054e8:	d9e9      	bls.n	80054be <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80054ea:	2003      	movs	r0, #3
}
 80054ec:	b003      	add	sp, #12
 80054ee:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054f0:	f7fe feb8 	bl	8004264 <HAL_GetTick>
 80054f4:	1b00      	subs	r0, r0, r4
 80054f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80054fa:	d9eb      	bls.n	80054d4 <HAL_PWREx_EnableOverDrive+0x3c>
 80054fc:	e7f5      	b.n	80054ea <HAL_PWREx_EnableOverDrive+0x52>
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800
 8005504:	40007000 	.word	0x40007000

08005508 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800550c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800550e:	b136      	cbz	r6, 800551e <QSPI_Config+0x16>
 8005510:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005514:	d003      	beq.n	800551e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005516:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005518:	6804      	ldr	r4, [r0, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800551e:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005522:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005526:	f1ba 0f00 	cmp.w	sl, #0
 800552a:	d04c      	beq.n	80055c6 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800552c:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800552e:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005530:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8005534:	ea4a 0406 	orr.w	r4, sl, r6
 8005538:	680b      	ldr	r3, [r1, #0]
 800553a:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 800553e:	ea44 0a02 	orr.w	sl, r4, r2
 8005542:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005546:	f1be 0f00 	cmp.w	lr, #0
 800554a:	d024      	beq.n	8005596 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800554c:	688e      	ldr	r6, [r1, #8]
 800554e:	ea4a 040e 	orr.w	r4, sl, lr
 8005552:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005554:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005556:	b19f      	cbz	r7, 8005580 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005558:	433b      	orrs	r3, r7
 800555a:	4303      	orrs	r3, r0
 800555c:	68c8      	ldr	r0, [r1, #12]
 800555e:	ea43 0309 	orr.w	r3, r3, r9
 8005562:	ea43 0308 	orr.w	r3, r3, r8
 8005566:	4333      	orrs	r3, r6
 8005568:	4303      	orrs	r3, r0
 800556a:	ea43 030c 	orr.w	r3, r3, ip
 800556e:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005570:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005574:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005576:	d001      	beq.n	800557c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005578:	684b      	ldr	r3, [r1, #4]
 800557a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005580:	4303      	orrs	r3, r0
 8005582:	ea43 0309 	orr.w	r3, r3, r9
 8005586:	ea43 0308 	orr.w	r3, r3, r8
 800558a:	4333      	orrs	r3, r6
 800558c:	ea43 030c 	orr.w	r3, r3, ip
 8005590:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005592:	616b      	str	r3, [r5, #20]
 8005594:	e7f2      	b.n	800557c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005596:	b167      	cbz	r7, 80055b2 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005598:	433b      	orrs	r3, r7
 800559a:	4303      	orrs	r3, r0
 800559c:	68c8      	ldr	r0, [r1, #12]
 800559e:	ea43 0309 	orr.w	r3, r3, r9
 80055a2:	ea43 0308 	orr.w	r3, r3, r8
 80055a6:	4303      	orrs	r3, r0
 80055a8:	ea43 030c 	orr.w	r3, r3, ip
 80055ac:	ea43 030a 	orr.w	r3, r3, sl
 80055b0:	e7de      	b.n	8005570 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055b2:	4303      	orrs	r3, r0
 80055b4:	ea43 0309 	orr.w	r3, r3, r9
 80055b8:	ea43 0408 	orr.w	r4, r3, r8
 80055bc:	ea44 030c 	orr.w	r3, r4, ip
 80055c0:	ea43 030a 	orr.w	r3, r3, sl
 80055c4:	e7e5      	b.n	8005592 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80055c6:	f1be 0f00 	cmp.w	lr, #0
 80055ca:	d02c      	beq.n	8005626 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80055cc:	ea46 050e 	orr.w	r5, r6, lr
 80055d0:	688b      	ldr	r3, [r1, #8]
 80055d2:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055d4:	694e      	ldr	r6, [r1, #20]
 80055d6:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80055d8:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055da:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80055de:	04b6      	lsls	r6, r6, #18
 80055e0:	690b      	ldr	r3, [r1, #16]
 80055e2:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80055e6:	b1a7      	cbz	r7, 8005612 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055e8:	433b      	orrs	r3, r7
 80055ea:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80055ec:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055f0:	ea43 0308 	orr.w	r3, r3, r8
 80055f4:	ea43 030e 	orr.w	r3, r3, lr
 80055f8:	ea43 030c 	orr.w	r3, r3, ip
 80055fc:	ea43 0300 	orr.w	r3, r3, r0
 8005600:	ea43 0306 	orr.w	r3, r3, r6
 8005604:	ea43 0305 	orr.w	r3, r3, r5
 8005608:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800560a:	d0b7      	beq.n	800557c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800560c:	684b      	ldr	r3, [r1, #4]
 800560e:	61a3      	str	r3, [r4, #24]
 8005610:	e7b4      	b.n	800557c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005612:	ea43 0308 	orr.w	r3, r3, r8
 8005616:	ea43 030e 	orr.w	r3, r3, lr
 800561a:	ea43 030c 	orr.w	r3, r3, ip
 800561e:	4333      	orrs	r3, r6
 8005620:	432b      	orrs	r3, r5
 8005622:	6163      	str	r3, [r4, #20]
 8005624:	e7aa      	b.n	800557c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005626:	b1d7      	cbz	r7, 800565e <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005628:	ea46 0307 	orr.w	r3, r6, r7
 800562c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800562e:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005630:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005634:	ea43 0302 	orr.w	r3, r3, r2
 8005638:	ea43 0304 	orr.w	r3, r3, r4
 800563c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800563e:	ea43 0304 	orr.w	r3, r3, r4
 8005642:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005644:	ea43 0304 	orr.w	r3, r3, r4
 8005648:	68cc      	ldr	r4, [r1, #12]
 800564a:	ea43 0304 	orr.w	r3, r3, r4
 800564e:	694c      	ldr	r4, [r1, #20]
 8005650:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005654:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005656:	d091      	beq.n	800557c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005658:	684b      	ldr	r3, [r1, #4]
 800565a:	6183      	str	r3, [r0, #24]
 800565c:	e78e      	b.n	800557c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800565e:	2e00      	cmp	r6, #0
 8005660:	d08c      	beq.n	800557c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005662:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005664:	6800      	ldr	r0, [r0, #0]
 8005666:	4333      	orrs	r3, r6
 8005668:	4313      	orrs	r3, r2
 800566a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800566c:	4313      	orrs	r3, r2
 800566e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005670:	4313      	orrs	r3, r2
 8005672:	694a      	ldr	r2, [r1, #20]
 8005674:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8005678:	6143      	str	r3, [r0, #20]
}
 800567a:	e77f      	b.n	800557c <QSPI_Config+0x74>

0800567c <QSPI_WaitFlagStateUntilTimeout>:
{
 800567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005680:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005684:	4604      	mov	r4, r0
 8005686:	460e      	mov	r6, r1
 8005688:	4615      	mov	r5, r2
 800568a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800568c:	6822      	ldr	r2, [r4, #0]
 800568e:	6893      	ldr	r3, [r2, #8]
 8005690:	4233      	tst	r3, r6
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	42ab      	cmp	r3, r5
 800569a:	d101      	bne.n	80056a0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800569c:	2000      	movs	r0, #0
 800569e:	e012      	b.n	80056c6 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80056a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80056a4:	d0f3      	beq.n	800568e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fe fddd 	bl	8004264 <HAL_GetTick>
 80056aa:	1bc0      	subs	r0, r0, r7
 80056ac:	4540      	cmp	r0, r8
 80056ae:	d802      	bhi.n	80056b6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80056b0:	f1b8 0f00 	cmp.w	r8, #0
 80056b4:	d1ea      	bne.n	800568c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80056b6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80056b8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80056ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80056be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80056c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080056cc <HAL_QSPI_Init>:
{
 80056cc:	b530      	push	{r4, r5, lr}
 80056ce:	4604      	mov	r4, r0
 80056d0:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80056d2:	f7fe fdc7 	bl	8004264 <HAL_GetTick>
 80056d6:	4603      	mov	r3, r0
  if(hqspi == NULL)
 80056d8:	2c00      	cmp	r4, #0
 80056da:	d047      	beq.n	800576c <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80056dc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80056e0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80056e4:	b94a      	cbnz	r2, 80056fa <HAL_QSPI_Init+0x2e>
 80056e6:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 80056e8:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 80056ea:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80056ee:	f7fb ffa5 	bl	800163c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	68a1      	ldr	r1, [r4, #8]
 80056fe:	6802      	ldr	r2, [r0, #0]
 8005700:	3901      	subs	r1, #1
 8005702:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005706:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800570a:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800570c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800570e:	4620      	mov	r0, r4
 8005710:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	2200      	movs	r2, #0
 8005716:	f7ff ffb1 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800571a:	bb10      	cbnz	r0, 8005762 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	69e5      	ldr	r5, [r4, #28]
 8005720:	68e3      	ldr	r3, [r4, #12]
 8005722:	6811      	ldr	r1, [r2, #0]
 8005724:	432b      	orrs	r3, r5
 8005726:	6a25      	ldr	r5, [r4, #32]
 8005728:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800572c:	432b      	orrs	r3, r5
 800572e:	6865      	ldr	r5, [r4, #4]
 8005730:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005734:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005738:	430b      	orrs	r3, r1
 800573a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800573c:	6855      	ldr	r5, [r2, #4]
 800573e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005742:	430b      	orrs	r3, r1
 8005744:	6921      	ldr	r1, [r4, #16]
 8005746:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800574a:	4909      	ldr	r1, [pc, #36]	; (8005770 <HAL_QSPI_Init+0xa4>)
 800574c:	4029      	ands	r1, r5
 800574e:	430b      	orrs	r3, r1
 8005750:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800575a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800575c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800575e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005762:	2300      	movs	r3, #0
 8005764:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005768:	b005      	add	sp, #20
 800576a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800576c:	2001      	movs	r0, #1
 800576e:	e7fb      	b.n	8005768 <HAL_QSPI_Init+0x9c>
 8005770:	ffe0f8fe 	.word	0xffe0f8fe

08005774 <HAL_QSPI_DeInit>:
{
 8005774:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005776:	4604      	mov	r4, r0
 8005778:	b168      	cbz	r0, 8005796 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 800577a:	6802      	ldr	r2, [r0, #0]
 800577c:	6813      	ldr	r3, [r2, #0]
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005784:	f7fb ffc8 	bl	8001718 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005788:	2000      	movs	r0, #0
 800578a:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800578c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005790:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005794:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005796:	2001      	movs	r0, #1
 8005798:	e7fc      	b.n	8005794 <HAL_QSPI_DeInit+0x20>

0800579a <HAL_QSPI_Command>:
{
 800579a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	b085      	sub	sp, #20
 80057a2:	4617      	mov	r7, r2
 80057a4:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80057a6:	f7fe fd5d 	bl	8004264 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80057aa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80057ae:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80057b0:	2a01      	cmp	r2, #1
 80057b2:	d033      	beq.n	800581c <HAL_QSPI_Command+0x82>
 80057b4:	2201      	movs	r2, #1
 80057b6:	2602      	movs	r6, #2
 80057b8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80057bc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80057c0:	2a01      	cmp	r2, #1
 80057c2:	fa5f f882 	uxtb.w	r8, r2
 80057c6:	d127      	bne.n	8005818 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80057c8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80057ca:	9003      	str	r0, [sp, #12]
 80057cc:	2120      	movs	r1, #32
 80057ce:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80057d0:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80057d2:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80057d4:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80057d8:	f7ff ff50 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80057dc:	4605      	mov	r5, r0
 80057de:	b9a0      	cbnz	r0, 800580a <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80057e0:	4602      	mov	r2, r0
 80057e2:	4649      	mov	r1, r9
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7ff fe8f 	bl	8005508 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80057ea:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	b94a      	cbnz	r2, 8005806 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80057f2:	4642      	mov	r2, r8
 80057f4:	4631      	mov	r1, r6
 80057f6:	4620      	mov	r0, r4
 80057f8:	9700      	str	r7, [sp, #0]
 80057fa:	f7ff ff3f 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80057fe:	4605      	mov	r5, r0
 8005800:	b918      	cbnz	r0, 800580a <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005806:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800580a:	2300      	movs	r3, #0
 800580c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005810:	4628      	mov	r0, r5
 8005812:	b005      	add	sp, #20
 8005814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005818:	4635      	mov	r5, r6
 800581a:	e7f6      	b.n	800580a <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800581c:	2502      	movs	r5, #2
 800581e:	e7f7      	b.n	8005810 <HAL_QSPI_Command+0x76>

08005820 <HAL_QSPI_AutoPolling>:
{
 8005820:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	4615      	mov	r5, r2
 8005828:	461e      	mov	r6, r3
 800582a:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800582c:	f7fe fd1a 	bl	8004264 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005830:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005834:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005836:	2a01      	cmp	r2, #1
 8005838:	d040      	beq.n	80058bc <HAL_QSPI_AutoPolling+0x9c>
 800583a:	2201      	movs	r2, #1
 800583c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005840:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005844:	2a01      	cmp	r2, #1
 8005846:	b2d7      	uxtb	r7, r2
 8005848:	d136      	bne.n	80058b8 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800584a:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800584c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800584e:	9003      	str	r0, [sp, #12]
 8005850:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005852:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005854:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005856:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800585a:	2120      	movs	r1, #32
 800585c:	f7ff ff0e 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005860:	bb20      	cbnz	r0, 80058ac <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005862:	6821      	ldr	r1, [r4, #0]
 8005864:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005866:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005868:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800586a:	686a      	ldr	r2, [r5, #4]
 800586c:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800586e:	68aa      	ldr	r2, [r5, #8]
 8005870:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005872:	680a      	ldr	r2, [r1, #0]
 8005874:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005878:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800587a:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800587c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005880:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005882:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005884:	68ea      	ldr	r2, [r5, #12]
 8005886:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800588a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800588e:	f7ff fe3b 	bl	8005508 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	463a      	mov	r2, r7
 8005896:	2108      	movs	r1, #8
 8005898:	4620      	mov	r0, r4
 800589a:	9600      	str	r6, [sp, #0]
 800589c:	f7ff feee 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80058a0:	b920      	cbnz	r0, 80058ac <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	2208      	movs	r2, #8
 80058a6:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80058a8:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80058ac:	2300      	movs	r3, #0
 80058ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80058b2:	b004      	add	sp, #16
 80058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 80058b8:	2002      	movs	r0, #2
 80058ba:	e7f7      	b.n	80058ac <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 80058bc:	2002      	movs	r0, #2
 80058be:	e7f8      	b.n	80058b2 <HAL_QSPI_AutoPolling+0x92>

080058c0 <HAL_QSPI_MemoryMapped>:
{
 80058c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	4616      	mov	r6, r2
 80058c6:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80058c8:	f7fe fccc 	bl	8004264 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80058cc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80058d0:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80058d2:	2a01      	cmp	r2, #1
 80058d4:	d033      	beq.n	800593e <HAL_QSPI_MemoryMapped+0x7e>
 80058d6:	2201      	movs	r2, #1
 80058d8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80058dc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80058e0:	2a01      	cmp	r2, #1
 80058e2:	d12a      	bne.n	800593a <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80058e4:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80058e6:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058e8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80058ea:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80058ec:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058f2:	9100      	str	r1, [sp, #0]
 80058f4:	2120      	movs	r1, #32
 80058f6:	f7ff fec1 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80058fa:	4605      	mov	r5, r0
 80058fc:	b9b8      	cbnz	r0, 800592e <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	6872      	ldr	r2, [r6, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005904:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005906:	f020 0008 	bic.w	r0, r0, #8
 800590a:	ea40 0002 	orr.w	r0, r0, r2
 800590e:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005910:	d107      	bne.n	8005922 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005912:	6832      	ldr	r2, [r6, #0]
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005916:	2210      	movs	r2, #16
 8005918:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005920:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005922:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005926:	4639      	mov	r1, r7
 8005928:	4620      	mov	r0, r4
 800592a:	f7ff fded 	bl	8005508 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800592e:	2300      	movs	r3, #0
 8005930:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005934:	4628      	mov	r0, r5
 8005936:	b003      	add	sp, #12
 8005938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800593a:	2502      	movs	r5, #2
 800593c:	e7f7      	b.n	800592e <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800593e:	2502      	movs	r5, #2
 8005940:	e7f8      	b.n	8005934 <HAL_QSPI_MemoryMapped+0x74>

08005942 <HAL_QSPI_Abort>:
{
 8005942:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005944:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005946:	f7fe fc8d 	bl	8004264 <HAL_GetTick>
 800594a:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800594c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8005950:	f010 0002 	ands.w	r0, r0, #2
 8005954:	d03a      	beq.n	80059cc <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 8005956:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005958:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 800595a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800595e:	680a      	ldr	r2, [r1, #0]
 8005960:	f012 0204 	ands.w	r2, r2, #4
 8005964:	d034      	beq.n	80059d0 <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005966:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005968:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800596a:	f022 0204 	bic.w	r2, r2, #4
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005972:	f7fe fd9b 	bl	80044ac <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	b118      	cbz	r0, 8005982 <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800597a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800597c:	f042 0204 	orr.w	r2, r2, #4
 8005980:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	6891      	ldr	r1, [r2, #8]
 8005986:	0689      	lsls	r1, r1, #26
 8005988:	d51d      	bpl.n	80059c6 <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800598a:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800598c:	4620      	mov	r0, r4
 800598e:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005990:	f041 0102 	orr.w	r1, r1, #2
 8005994:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005996:	2102      	movs	r1, #2
 8005998:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800599a:	9200      	str	r2, [sp, #0]
 800599c:	2201      	movs	r2, #1
 800599e:	f7ff fe6d 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	b990      	cbnz	r0, 80059cc <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	2102      	movs	r1, #2
 80059aa:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80059ac:	2120      	movs	r1, #32
 80059ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80059b0:	9200      	str	r2, [sp, #0]
 80059b2:	4602      	mov	r2, r0
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff fe61 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80059ba:	b938      	cbnz	r0, 80059cc <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	6953      	ldr	r3, [r2, #20]
 80059c0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80059c4:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80059cc:	b004      	add	sp, #16
 80059ce:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	4610      	mov	r0, r2
 80059d2:	e7d6      	b.n	8005982 <HAL_QSPI_Abort+0x40>

080059d4 <HAL_QSPI_Transmit>:
{
 80059d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d6:	4604      	mov	r4, r0
 80059d8:	b085      	sub	sp, #20
 80059da:	4616      	mov	r6, r2
 80059dc:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80059de:	f7fe fc41 	bl	8004264 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80059e2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80059e6:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80059e8:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80059ea:	2a01      	cmp	r2, #1
 80059ec:	d04c      	beq.n	8005a88 <HAL_QSPI_Transmit+0xb4>
 80059ee:	2201      	movs	r2, #1
 80059f0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80059f4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80059f8:	2a01      	cmp	r2, #1
 80059fa:	b2d0      	uxtb	r0, r2
 80059fc:	d142      	bne.n	8005a84 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80059fe:	2200      	movs	r2, #0
 8005a00:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005a02:	2f00      	cmp	r7, #0
 8005a04:	d039      	beq.n	8005a7a <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005a06:	2212      	movs	r2, #18
 8005a08:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a0c:	692a      	ldr	r2, [r5, #16]
 8005a0e:	3201      	adds	r2, #1
 8005a10:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a12:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8005a14:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a16:	3201      	adds	r2, #1
 8005a18:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005a1a:	696a      	ldr	r2, [r5, #20]
 8005a1c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005a20:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8005a22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a24:	b9a2      	cbnz	r2, 8005a50 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005a26:	2201      	movs	r2, #1
 8005a28:	2102      	movs	r1, #2
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	9600      	str	r6, [sp, #0]
 8005a2e:	f7ff fe25 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005a32:	b928      	cbnz	r0, 8005a40 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8005a38:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a3a:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005a3c:	f7ff ff81 	bl	8005942 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005a46:	2300      	movs	r3, #0
 8005a48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005a4c:	b005      	add	sp, #20
 8005a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005a50:	2201      	movs	r2, #1
 8005a52:	2104      	movs	r1, #4
 8005a54:	4620      	mov	r0, r4
 8005a56:	9600      	str	r6, [sp, #0]
 8005a58:	9303      	str	r3, [sp, #12]
 8005a5a:	f7ff fe0f 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d1ee      	bne.n	8005a40 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005a62:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005a64:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005a6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a6e:	3201      	adds	r2, #1
 8005a70:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005a72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a74:	3a01      	subs	r2, #1
 8005a76:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005a78:	e7d3      	b.n	8005a22 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005a7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a7c:	f043 0308 	orr.w	r3, r3, #8
 8005a80:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005a82:	e7e0      	b.n	8005a46 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8005a84:	2002      	movs	r0, #2
 8005a86:	e7de      	b.n	8005a46 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8005a88:	2002      	movs	r0, #2
 8005a8a:	e7df      	b.n	8005a4c <HAL_QSPI_Transmit+0x78>

08005a8c <HAL_QSPI_Receive>:
{
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	4604      	mov	r4, r0
 8005a90:	b085      	sub	sp, #20
 8005a92:	4616      	mov	r6, r2
 8005a94:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005a96:	f7fe fbe5 	bl	8004264 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005a9a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005a9c:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005a9e:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8005aa2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005aa6:	2a01      	cmp	r2, #1
 8005aa8:	d050      	beq.n	8005b4c <HAL_QSPI_Receive+0xc0>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ab0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005ab4:	2a01      	cmp	r2, #1
 8005ab6:	b2d0      	uxtb	r0, r2
 8005ab8:	d146      	bne.n	8005b48 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005aba:	2200      	movs	r2, #0
 8005abc:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005abe:	2f00      	cmp	r7, #0
 8005ac0:	d03d      	beq.n	8005b3e <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005ac2:	2222      	movs	r2, #34	; 0x22
 8005ac4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ac8:	692a      	ldr	r2, [r5, #16]
 8005aca:	3201      	adds	r2, #1
 8005acc:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ace:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8005ad0:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ad2:	3201      	adds	r2, #1
 8005ad4:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005ad6:	6969      	ldr	r1, [r5, #20]
 8005ad8:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8005adc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005ae0:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005ae2:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8005ae6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ae8:	b9a2      	cbnz	r2, 8005b14 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005aea:	2201      	movs	r2, #1
 8005aec:	2102      	movs	r1, #2
 8005aee:	4620      	mov	r0, r4
 8005af0:	9600      	str	r6, [sp, #0]
 8005af2:	f7ff fdc3 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8005af6:	b928      	cbnz	r0, 8005b04 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8005afc:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005afe:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005b00:	f7ff ff1f 	bl	8005942 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005b10:	b005      	add	sp, #20
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005b14:	2201      	movs	r2, #1
 8005b16:	2106      	movs	r1, #6
 8005b18:	4620      	mov	r0, r4
 8005b1a:	9600      	str	r6, [sp, #0]
 8005b1c:	9303      	str	r3, [sp, #12]
 8005b1e:	f7ff fdad 	bl	800567c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d1ee      	bne.n	8005b04 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005b26:	f895 1020 	ldrb.w	r1, [r5, #32]
 8005b2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005b2c:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005b2e:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8005b30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005b32:	3201      	adds	r2, #1
 8005b34:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005b36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b38:	3a01      	subs	r2, #1
 8005b3a:	63a2      	str	r2, [r4, #56]	; 0x38
 8005b3c:	e7d3      	b.n	8005ae6 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005b3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b40:	f043 0308 	orr.w	r3, r3, #8
 8005b44:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005b46:	e7e0      	b.n	8005b0a <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 8005b48:	2002      	movs	r0, #2
 8005b4a:	e7de      	b.n	8005b0a <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	e7df      	b.n	8005b10 <HAL_QSPI_Receive+0x84>

08005b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b54:	4604      	mov	r4, r0
 8005b56:	b340      	cbz	r0, 8005baa <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b58:	6803      	ldr	r3, [r0, #0]
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d410      	bmi.n	8005b80 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	079f      	lsls	r7, r3, #30
 8005b62:	d461      	bmi.n	8005c28 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	0719      	lsls	r1, r3, #28
 8005b68:	f100 80a6 	bmi.w	8005cb8 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	075a      	lsls	r2, r3, #29
 8005b70:	f100 80c7 	bmi.w	8005d02 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b74:	69a2      	ldr	r2, [r4, #24]
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	f040 8130 	bne.w	8005ddc <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e02c      	b.n	8005bda <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b80:	4b94      	ldr	r3, [pc, #592]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	f002 020c 	and.w	r2, r2, #12
 8005b88:	2a04      	cmp	r2, #4
 8005b8a:	d007      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	f002 020c 	and.w	r2, r2, #12
 8005b92:	2a08      	cmp	r2, #8
 8005b94:	d10b      	bne.n	8005bae <HAL_RCC_OscConfig+0x5e>
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	025e      	lsls	r6, r3, #9
 8005b9a:	d508      	bpl.n	8005bae <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9c:	4b8d      	ldr	r3, [pc, #564]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	039d      	lsls	r5, r3, #14
 8005ba2:	d5dc      	bpl.n	8005b5e <HAL_RCC_OscConfig+0xe>
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1d9      	bne.n	8005b5e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
 8005bac:	e015      	b.n	8005bda <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bae:	6863      	ldr	r3, [r4, #4]
 8005bb0:	4d88      	ldr	r5, [pc, #544]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb6:	d113      	bne.n	8005be0 <HAL_RCC_OscConfig+0x90>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005bc0:	f7fe fb50 	bl	8004264 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc4:	4e83      	ldr	r6, [pc, #524]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8005bc6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	0398      	lsls	r0, r3, #14
 8005bcc:	d4c7      	bmi.n	8005b5e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bce:	f7fe fb49 	bl	8004264 <HAL_GetTick>
 8005bd2:	1b40      	subs	r0, r0, r5
 8005bd4:	2864      	cmp	r0, #100	; 0x64
 8005bd6:	d9f7      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8005bd8:	2003      	movs	r0, #3
}
 8005bda:	b002      	add	sp, #8
 8005bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be0:	b99b      	cbnz	r3, 8005c0a <HAL_RCC_OscConfig+0xba>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005bf2:	f7fe fb37 	bl	8004264 <HAL_GetTick>
 8005bf6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	0399      	lsls	r1, r3, #14
 8005bfc:	d5af      	bpl.n	8005b5e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bfe:	f7fe fb31 	bl	8004264 <HAL_GetTick>
 8005c02:	1b80      	subs	r0, r0, r6
 8005c04:	2864      	cmp	r0, #100	; 0x64
 8005c06:	d9f7      	bls.n	8005bf8 <HAL_RCC_OscConfig+0xa8>
 8005c08:	e7e6      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	d103      	bne.n	8005c1a <HAL_RCC_OscConfig+0xca>
 8005c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	e7ce      	b.n	8005bb8 <HAL_RCC_OscConfig+0x68>
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c26:	e7ca      	b.n	8005bbe <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c28:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	f012 0f0c 	tst.w	r2, #12
 8005c30:	d007      	beq.n	8005c42 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	f002 020c 	and.w	r2, r2, #12
 8005c38:	2a08      	cmp	r2, #8
 8005c3a:	d111      	bne.n	8005c60 <HAL_RCC_OscConfig+0x110>
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	025a      	lsls	r2, r3, #9
 8005c40:	d40e      	bmi.n	8005c60 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c42:	4a64      	ldr	r2, [pc, #400]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005c44:	6813      	ldr	r3, [r2, #0]
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	d502      	bpl.n	8005c50 <HAL_RCC_OscConfig+0x100>
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d1ac      	bne.n	8005baa <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	6921      	ldr	r1, [r4, #16]
 8005c54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c58:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c5c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5e:	e781      	b.n	8005b64 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c60:	68e3      	ldr	r3, [r4, #12]
 8005c62:	4d5c      	ldr	r5, [pc, #368]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005c64:	b1bb      	cbz	r3, 8005c96 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005c6e:	f7fe faf9 	bl	8004264 <HAL_GetTick>
 8005c72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	079f      	lsls	r7, r3, #30
 8005c78:	d507      	bpl.n	8005c8a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	6922      	ldr	r2, [r4, #16]
 8005c7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	e76c      	b.n	8005b64 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fe faeb 	bl	8004264 <HAL_GetTick>
 8005c8e:	1b80      	subs	r0, r0, r6
 8005c90:	2802      	cmp	r0, #2
 8005c92:	d9ef      	bls.n	8005c74 <HAL_RCC_OscConfig+0x124>
 8005c94:	e7a0      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005c96:	682b      	ldr	r3, [r5, #0]
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005c9e:	f7fe fae1 	bl	8004264 <HAL_GetTick>
 8005ca2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	0798      	lsls	r0, r3, #30
 8005ca8:	f57f af5c 	bpl.w	8005b64 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cac:	f7fe fada 	bl	8004264 <HAL_GetTick>
 8005cb0:	1b80      	subs	r0, r0, r6
 8005cb2:	2802      	cmp	r0, #2
 8005cb4:	d9f6      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x154>
 8005cb6:	e78f      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cb8:	6963      	ldr	r3, [r4, #20]
 8005cba:	4d46      	ldr	r5, [pc, #280]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005cbc:	b183      	cbz	r3, 8005ce0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8005cbe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005cc6:	f7fe facd 	bl	8004264 <HAL_GetTick>
 8005cca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ccc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005cce:	079b      	lsls	r3, r3, #30
 8005cd0:	f53f af4c 	bmi.w	8005b6c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd4:	f7fe fac6 	bl	8004264 <HAL_GetTick>
 8005cd8:	1b80      	subs	r0, r0, r6
 8005cda:	2802      	cmp	r0, #2
 8005cdc:	d9f6      	bls.n	8005ccc <HAL_RCC_OscConfig+0x17c>
 8005cde:	e77b      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8005ce0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005ce8:	f7fe fabc 	bl	8004264 <HAL_GetTick>
 8005cec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005cf0:	079f      	lsls	r7, r3, #30
 8005cf2:	f57f af3b 	bpl.w	8005b6c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf6:	f7fe fab5 	bl	8004264 <HAL_GetTick>
 8005cfa:	1b80      	subs	r0, r0, r6
 8005cfc:	2802      	cmp	r0, #2
 8005cfe:	d9f6      	bls.n	8005cee <HAL_RCC_OscConfig+0x19e>
 8005d00:	e76a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d02:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d06:	00d0      	lsls	r0, r2, #3
 8005d08:	d427      	bmi.n	8005d5a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8005d0c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d1e:	4d2e      	ldr	r5, [pc, #184]	; (8005dd8 <HAL_RCC_OscConfig+0x288>)
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	05d9      	lsls	r1, r3, #23
 8005d24:	d51b      	bpl.n	8005d5e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d26:	68a3      	ldr	r3, [r4, #8]
 8005d28:	4d2a      	ldr	r5, [pc, #168]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d127      	bne.n	8005d7e <HAL_RCC_OscConfig+0x22e>
 8005d2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005d3a:	f7fe fa93 	bl	8004264 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3e:	4e25      	ldr	r6, [pc, #148]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8005d40:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d42:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005d44:	079b      	lsls	r3, r3, #30
 8005d46:	d53f      	bpl.n	8005dc8 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	f43f af13 	beq.w	8005b74 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d4e:	4a21      	ldr	r2, [pc, #132]	; (8005dd4 <HAL_RCC_OscConfig+0x284>)
 8005d50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d56:	6413      	str	r3, [r2, #64]	; 0x40
 8005d58:	e70c      	b.n	8005b74 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8005d5a:	2700      	movs	r7, #0
 8005d5c:	e7df      	b.n	8005d1e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005d66:	f7fe fa7d 	bl	8004264 <HAL_GetTick>
 8005d6a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	05da      	lsls	r2, r3, #23
 8005d70:	d4d9      	bmi.n	8005d26 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d72:	f7fe fa77 	bl	8004264 <HAL_GetTick>
 8005d76:	1b80      	subs	r0, r0, r6
 8005d78:	2864      	cmp	r0, #100	; 0x64
 8005d7a:	d9f7      	bls.n	8005d6c <HAL_RCC_OscConfig+0x21c>
 8005d7c:	e72c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7e:	b9ab      	cbnz	r3, 8005dac <HAL_RCC_OscConfig+0x25c>
 8005d80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	672b      	str	r3, [r5, #112]	; 0x70
 8005d8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d8e:	f023 0304 	bic.w	r3, r3, #4
 8005d92:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005d94:	f7fe fa66 	bl	8004264 <HAL_GetTick>
 8005d98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d9c:	0798      	lsls	r0, r3, #30
 8005d9e:	d5d3      	bpl.n	8005d48 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da0:	f7fe fa60 	bl	8004264 <HAL_GetTick>
 8005da4:	1b80      	subs	r0, r0, r6
 8005da6:	4540      	cmp	r0, r8
 8005da8:	d9f7      	bls.n	8005d9a <HAL_RCC_OscConfig+0x24a>
 8005daa:	e715      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005db0:	d103      	bne.n	8005dba <HAL_RCC_OscConfig+0x26a>
 8005db2:	f043 0304 	orr.w	r3, r3, #4
 8005db6:	672b      	str	r3, [r5, #112]	; 0x70
 8005db8:	e7b9      	b.n	8005d2e <HAL_RCC_OscConfig+0x1de>
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	672b      	str	r3, [r5, #112]	; 0x70
 8005dc0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005dc2:	f023 0304 	bic.w	r3, r3, #4
 8005dc6:	e7b5      	b.n	8005d34 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc8:	f7fe fa4c 	bl	8004264 <HAL_GetTick>
 8005dcc:	1b40      	subs	r0, r0, r5
 8005dce:	4540      	cmp	r0, r8
 8005dd0:	d9b7      	bls.n	8005d42 <HAL_RCC_OscConfig+0x1f2>
 8005dd2:	e701      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ddc:	4d38      	ldr	r5, [pc, #224]	; (8005ec0 <HAL_RCC_OscConfig+0x370>)
 8005dde:	68ab      	ldr	r3, [r5, #8]
 8005de0:	f003 030c 	and.w	r3, r3, #12
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d041      	beq.n	8005e6c <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8005de8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dea:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df2:	d12e      	bne.n	8005e52 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 8005df4:	f7fe fa36 	bl	8004264 <HAL_GetTick>
 8005df8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfa:	682b      	ldr	r3, [r5, #0]
 8005dfc:	0199      	lsls	r1, r3, #6
 8005dfe:	d422      	bmi.n	8005e46 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	1e5a      	subs	r2, r3, #1
 8005e06:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005e16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e20:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005e22:	682b      	ldr	r3, [r5, #0]
 8005e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e28:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005e2a:	f7fe fa1b 	bl	8004264 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2e:	4d24      	ldr	r5, [pc, #144]	; (8005ec0 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8005e30:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e32:	682b      	ldr	r3, [r5, #0]
 8005e34:	019a      	lsls	r2, r3, #6
 8005e36:	f53f aea1 	bmi.w	8005b7c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3a:	f7fe fa13 	bl	8004264 <HAL_GetTick>
 8005e3e:	1b00      	subs	r0, r0, r4
 8005e40:	2802      	cmp	r0, #2
 8005e42:	d9f6      	bls.n	8005e32 <HAL_RCC_OscConfig+0x2e2>
 8005e44:	e6c8      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e46:	f7fe fa0d 	bl	8004264 <HAL_GetTick>
 8005e4a:	1b80      	subs	r0, r0, r6
 8005e4c:	2802      	cmp	r0, #2
 8005e4e:	d9d4      	bls.n	8005dfa <HAL_RCC_OscConfig+0x2aa>
 8005e50:	e6c2      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005e52:	f7fe fa07 	bl	8004264 <HAL_GetTick>
 8005e56:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	019b      	lsls	r3, r3, #6
 8005e5c:	f57f ae8e 	bpl.w	8005b7c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fe fa00 	bl	8004264 <HAL_GetTick>
 8005e64:	1b00      	subs	r0, r0, r4
 8005e66:	2802      	cmp	r0, #2
 8005e68:	d9f6      	bls.n	8005e58 <HAL_RCC_OscConfig+0x308>
 8005e6a:	e6b5      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8005e6e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e70:	f43f ae9b 	beq.w	8005baa <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e78:	69e1      	ldr	r1, [r4, #28]
 8005e7a:	428a      	cmp	r2, r1
 8005e7c:	f47f ae95 	bne.w	8005baa <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e84:	6a21      	ldr	r1, [r4, #32]
 8005e86:	428a      	cmp	r2, r1
 8005e88:	f47f ae8f 	bne.w	8005baa <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e8c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e92:	401a      	ands	r2, r3
 8005e94:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005e98:	f47f ae87 	bne.w	8005baa <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005e9e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005ea2:	0852      	lsrs	r2, r2, #1
 8005ea4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ea6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005eaa:	f47f ae7e 	bne.w	8005baa <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005eb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005eb4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005eb8:	f43f ae60 	beq.w	8005b7c <HAL_RCC_OscConfig+0x2c>
 8005ebc:	e675      	b.n	8005baa <HAL_RCC_OscConfig+0x5a>
 8005ebe:	bf00      	nop
 8005ec0:	40023800 	.word	0x40023800

08005ec4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec4:	4913      	ldr	r1, [pc, #76]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005ec6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec8:	688b      	ldr	r3, [r1, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d01b      	beq.n	8005f0a <HAL_RCC_GetSysClockFreq+0x46>
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d11b      	bne.n	8005f0e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ed8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eda:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005edc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ee0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005ee8:	bf1a      	itte	ne
 8005eea:	480b      	ldrne	r0, [pc, #44]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x54>)
 8005eec:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eee:	480b      	ldreq	r0, [pc, #44]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x58>)
 8005ef0:	fba1 0100 	umull	r0, r1, r1, r0
 8005ef4:	f7fa fdfa 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x50>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005f00:	3301      	adds	r3, #1
 8005f02:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8005f04:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005f08:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f0a:	4803      	ldr	r0, [pc, #12]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x54>)
 8005f0c:	e7fc      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8005f0e:	4803      	ldr	r0, [pc, #12]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005f10:	e7fa      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x44>
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	017d7840 	.word	0x017d7840
 8005f1c:	00f42400 	.word	0x00f42400

08005f20 <HAL_RCC_ClockConfig>:
{
 8005f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f24:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005f26:	4604      	mov	r4, r0
 8005f28:	b910      	cbnz	r0, 8005f30 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005f2a:	2001      	movs	r0, #1
}
 8005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f30:	4a45      	ldr	r2, [pc, #276]	; (8006048 <HAL_RCC_ClockConfig+0x128>)
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	d328      	bcc.n	8005f8e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	078f      	lsls	r7, r1, #30
 8005f40:	d430      	bmi.n	8005fa4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f42:	07c8      	lsls	r0, r1, #31
 8005f44:	d443      	bmi.n	8005fce <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f46:	4a40      	ldr	r2, [pc, #256]	; (8006048 <HAL_RCC_ClockConfig+0x128>)
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	42ab      	cmp	r3, r5
 8005f50:	d866      	bhi.n	8006020 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	0751      	lsls	r1, r2, #29
 8005f56:	d46f      	bmi.n	8006038 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f58:	0713      	lsls	r3, r2, #28
 8005f5a:	d507      	bpl.n	8005f6c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f5c:	4a3b      	ldr	r2, [pc, #236]	; (800604c <HAL_RCC_ClockConfig+0x12c>)
 8005f5e:	6921      	ldr	r1, [r4, #16]
 8005f60:	6893      	ldr	r3, [r2, #8]
 8005f62:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005f66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005f6a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f6c:	f7ff ffaa 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005f70:	4b36      	ldr	r3, [pc, #216]	; (800604c <HAL_RCC_ClockConfig+0x12c>)
 8005f72:	4a37      	ldr	r2, [pc, #220]	; (8006050 <HAL_RCC_ClockConfig+0x130>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f7a:	5cd3      	ldrb	r3, [r2, r3]
 8005f7c:	40d8      	lsrs	r0, r3
 8005f7e:	4b35      	ldr	r3, [pc, #212]	; (8006054 <HAL_RCC_ClockConfig+0x134>)
 8005f80:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005f82:	4b35      	ldr	r3, [pc, #212]	; (8006058 <HAL_RCC_ClockConfig+0x138>)
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f7fb fc53 	bl	8001830 <HAL_InitTick>
  return HAL_OK;
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e7ce      	b.n	8005f2c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	6813      	ldr	r3, [r2, #0]
 8005f90:	f023 030f 	bic.w	r3, r3, #15
 8005f94:	430b      	orrs	r3, r1
 8005f96:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f98:	6813      	ldr	r3, [r2, #0]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	428b      	cmp	r3, r1
 8005fa0:	d1c3      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xa>
 8005fa2:	e7cb      	b.n	8005f3c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa4:	f011 0f04 	tst.w	r1, #4
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCC_ClockConfig+0x12c>)
 8005faa:	d003      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005fb2:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb4:	070e      	lsls	r6, r1, #28
 8005fb6:	d503      	bpl.n	8005fc0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005fbe:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	68a0      	ldr	r0, [r4, #8]
 8005fc4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005fc8:	4302      	orrs	r2, r0
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e7b9      	b.n	8005f42 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fce:	6861      	ldr	r1, [r4, #4]
 8005fd0:	4b1e      	ldr	r3, [pc, #120]	; (800604c <HAL_RCC_ClockConfig+0x12c>)
 8005fd2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fd6:	d11b      	bne.n	8006010 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fdc:	d0a5      	beq.n	8005f2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fde:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe0:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe4:	4f19      	ldr	r7, [pc, #100]	; (800604c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fe6:	f022 0203 	bic.w	r2, r2, #3
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005fee:	f7fe f939 	bl	8004264 <HAL_GetTick>
 8005ff2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	f003 030c 	and.w	r3, r3, #12
 8005ffc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006000:	d0a1      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006002:	f7fe f92f 	bl	8004264 <HAL_GetTick>
 8006006:	1b80      	subs	r0, r0, r6
 8006008:	4540      	cmp	r0, r8
 800600a:	d9f3      	bls.n	8005ff4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800600c:	2003      	movs	r0, #3
 800600e:	e78d      	b.n	8005f2c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006010:	2902      	cmp	r1, #2
 8006012:	d102      	bne.n	800601a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006014:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006018:	e7e0      	b.n	8005fdc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601a:	f012 0f02 	tst.w	r2, #2
 800601e:	e7dd      	b.n	8005fdc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006020:	6813      	ldr	r3, [r2, #0]
 8006022:	f023 030f 	bic.w	r3, r3, #15
 8006026:	432b      	orrs	r3, r5
 8006028:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	42ab      	cmp	r3, r5
 8006032:	f47f af7a 	bne.w	8005f2a <HAL_RCC_ClockConfig+0xa>
 8006036:	e78c      	b.n	8005f52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006038:	4904      	ldr	r1, [pc, #16]	; (800604c <HAL_RCC_ClockConfig+0x12c>)
 800603a:	68e0      	ldr	r0, [r4, #12]
 800603c:	688b      	ldr	r3, [r1, #8]
 800603e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006042:	4303      	orrs	r3, r0
 8006044:	608b      	str	r3, [r1, #8]
 8006046:	e787      	b.n	8005f58 <HAL_RCC_ClockConfig+0x38>
 8006048:	40023c00 	.word	0x40023c00
 800604c:	40023800 	.word	0x40023800
 8006050:	0802cae0 	.word	0x0802cae0
 8006054:	2000000c 	.word	0x2000000c
 8006058:	2000003c 	.word	0x2000003c

0800605c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800605c:	4b04      	ldr	r3, [pc, #16]	; (8006070 <HAL_RCC_GetPCLK1Freq+0x14>)
 800605e:	4a05      	ldr	r2, [pc, #20]	; (8006074 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006066:	5cd3      	ldrb	r3, [r2, r3]
 8006068:	4a03      	ldr	r2, [pc, #12]	; (8006078 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800606a:	6810      	ldr	r0, [r2, #0]
}
 800606c:	40d8      	lsrs	r0, r3
 800606e:	4770      	bx	lr
 8006070:	40023800 	.word	0x40023800
 8006074:	0802caf0 	.word	0x0802caf0
 8006078:	2000000c 	.word	0x2000000c

0800607c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800607c:	230f      	movs	r3, #15
 800607e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <HAL_RCC_GetClockConfig+0x34>)
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	f002 0203 	and.w	r2, r2, #3
 8006088:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006090:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006098:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	08db      	lsrs	r3, r3, #3
 800609e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80060a2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060a4:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <HAL_RCC_GetClockConfig+0x38>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	600b      	str	r3, [r1, #0]
}
 80060ae:	4770      	bx	lr
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40023c00 	.word	0x40023c00

080060b8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060b8:	6803      	ldr	r3, [r0, #0]
{
 80060ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060be:	f013 0601 	ands.w	r6, r3, #1
{
 80060c2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060c4:	d00b      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060c6:	4aad      	ldr	r2, [pc, #692]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060c8:	6891      	ldr	r1, [r2, #8]
 80060ca:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80060ce:	6091      	str	r1, [r2, #8]
 80060d0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80060d2:	6891      	ldr	r1, [r2, #8]
 80060d4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060d6:	fab6 f686 	clz	r6, r6
 80060da:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060dc:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060de:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80060e2:	d012      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060e4:	49a5      	ldr	r1, [pc, #660]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060e6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80060e8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80060ec:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80060f4:	bf08      	it	eq
 80060f6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80060fc:	bf16      	itet	ne
 80060fe:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8006102:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006104:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006106:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800610a:	02d8      	lsls	r0, r3, #11
 800610c:	d510      	bpl.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800610e:	489b      	ldr	r0, [pc, #620]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006110:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006112:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006116:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800611a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800611e:	ea42 0201 	orr.w	r2, r2, r1
 8006122:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006126:	f000 8186 	beq.w	8006436 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800612a:	2900      	cmp	r1, #0
 800612c:	bf08      	it	eq
 800612e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8006130:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006134:	bf18      	it	ne
 8006136:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006138:	0699      	lsls	r1, r3, #26
 800613a:	d532      	bpl.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800613c:	4b8f      	ldr	r3, [pc, #572]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800613e:	4f90      	ldr	r7, [pc, #576]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006142:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006146:	641a      	str	r2, [r3, #64]	; 0x40
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006158:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615a:	f7fe f883 	bl	8004264 <HAL_GetTick>
 800615e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	05da      	lsls	r2, r3, #23
 8006164:	f140 8169 	bpl.w	800643a <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006168:	4f84      	ldr	r7, [pc, #528]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800616a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800616c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800616e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006172:	f040 816d 	bne.w	8006450 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006176:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006178:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800617c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006180:	4a7e      	ldr	r2, [pc, #504]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006182:	f040 818a 	bne.w	800649a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006186:	6891      	ldr	r1, [r2, #8]
 8006188:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800618c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006190:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006194:	4301      	orrs	r1, r0
 8006196:	6091      	str	r1, [r2, #8]
 8006198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800619e:	430b      	orrs	r3, r1
 80061a0:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	06d9      	lsls	r1, r3, #27
 80061a6:	d50c      	bpl.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061a8:	4a74      	ldr	r2, [pc, #464]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061aa:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80061ae:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80061b2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80061b6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80061ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80061bc:	4301      	orrs	r1, r0
 80061be:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061c2:	045a      	lsls	r2, r3, #17
 80061c4:	d508      	bpl.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061c6:	496d      	ldr	r1, [pc, #436]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061c8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80061ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80061ce:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80061d2:	4302      	orrs	r2, r0
 80061d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061d8:	041f      	lsls	r7, r3, #16
 80061da:	d508      	bpl.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061dc:	4967      	ldr	r1, [pc, #412]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061de:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80061e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80061e4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80061e8:	4302      	orrs	r2, r0
 80061ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061ee:	03d8      	lsls	r0, r3, #15
 80061f0:	d508      	bpl.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061f2:	4962      	ldr	r1, [pc, #392]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80061f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80061fa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80061fe:	4302      	orrs	r2, r0
 8006200:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006204:	0399      	lsls	r1, r3, #14
 8006206:	d508      	bpl.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006208:	495c      	ldr	r1, [pc, #368]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800620a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800620c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006210:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006214:	4302      	orrs	r2, r0
 8006216:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800621a:	065a      	lsls	r2, r3, #25
 800621c:	d508      	bpl.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800621e:	4957      	ldr	r1, [pc, #348]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006220:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006222:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006226:	f022 0203 	bic.w	r2, r2, #3
 800622a:	4302      	orrs	r2, r0
 800622c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006230:	061f      	lsls	r7, r3, #24
 8006232:	d508      	bpl.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006234:	4951      	ldr	r1, [pc, #324]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006236:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006238:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800623c:	f022 020c 	bic.w	r2, r2, #12
 8006240:	4302      	orrs	r2, r0
 8006242:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006246:	05d8      	lsls	r0, r3, #23
 8006248:	d508      	bpl.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800624a:	494c      	ldr	r1, [pc, #304]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800624c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800624e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006252:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006256:	4302      	orrs	r2, r0
 8006258:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800625c:	0599      	lsls	r1, r3, #22
 800625e:	d508      	bpl.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006260:	4946      	ldr	r1, [pc, #280]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006262:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006264:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006268:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800626c:	4302      	orrs	r2, r0
 800626e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006272:	055a      	lsls	r2, r3, #21
 8006274:	d508      	bpl.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006276:	4941      	ldr	r1, [pc, #260]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800627a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800627e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006282:	4302      	orrs	r2, r0
 8006284:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006288:	051f      	lsls	r7, r3, #20
 800628a:	d508      	bpl.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800628c:	493b      	ldr	r1, [pc, #236]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800628e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006290:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006298:	4302      	orrs	r2, r0
 800629a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800629e:	04d8      	lsls	r0, r3, #19
 80062a0:	d508      	bpl.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062a2:	4936      	ldr	r1, [pc, #216]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062a4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80062a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80062aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80062ae:	4302      	orrs	r2, r0
 80062b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80062b4:	0499      	lsls	r1, r3, #18
 80062b6:	d508      	bpl.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80062b8:	4930      	ldr	r1, [pc, #192]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80062bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80062c0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062c4:	4302      	orrs	r2, r0
 80062c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062ca:	025a      	lsls	r2, r3, #9
 80062cc:	d508      	bpl.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062ce:	492b      	ldr	r1, [pc, #172]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062d0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80062d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80062d6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80062da:	4302      	orrs	r2, r0
 80062dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062e0:	029f      	lsls	r7, r3, #10
 80062e2:	d50c      	bpl.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062e4:	4825      	ldr	r0, [pc, #148]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062e6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80062e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80062ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062f0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80062f4:	bf08      	it	eq
 80062f6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062f8:	430a      	orrs	r2, r1
 80062fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80062fe:	f013 0f08 	tst.w	r3, #8
 8006302:	bf18      	it	ne
 8006304:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006306:	0358      	lsls	r0, r3, #13
 8006308:	d508      	bpl.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800630a:	491c      	ldr	r1, [pc, #112]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800630c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800630e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006312:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006316:	4302      	orrs	r2, r0
 8006318:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800631c:	0219      	lsls	r1, r3, #8
 800631e:	d509      	bpl.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006320:	4916      	ldr	r1, [pc, #88]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006322:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006326:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800632a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800632e:	4302      	orrs	r2, r0
 8006330:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006334:	2e01      	cmp	r6, #1
 8006336:	f000 80b4 	beq.w	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800633a:	019a      	lsls	r2, r3, #6
 800633c:	f100 80b1 	bmi.w	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006340:	2d01      	cmp	r5, #1
 8006342:	d176      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006344:	4d0d      	ldr	r5, [pc, #52]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800634c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634e:	f7fd ff89 	bl	8004264 <HAL_GetTick>
 8006352:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	009f      	lsls	r7, r3, #2
 8006358:	f100 8127 	bmi.w	80065aa <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800635c:	6821      	ldr	r1, [r4, #0]
 800635e:	030e      	lsls	r6, r1, #12
 8006360:	d501      	bpl.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8006362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006364:	b11b      	cbz	r3, 800636e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006366:	02cd      	lsls	r5, r1, #11
 8006368:	d523      	bpl.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800636a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800636c:	bb0b      	cbnz	r3, 80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800636e:	4a03      	ldr	r2, [pc, #12]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006370:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006374:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8006378:	e004      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800637a:	bf00      	nop
 800637c:	40023800 	.word	0x40023800
 8006380:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006388:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800638c:	4303      	orrs	r3, r0
 800638e:	6960      	ldr	r0, [r4, #20]
 8006390:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006394:	69a0      	ldr	r0, [r4, #24]
 8006396:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800639a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800639e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80063a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80063a4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80063a8:	3801      	subs	r0, #1
 80063aa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80063ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80063b2:	0288      	lsls	r0, r1, #10
 80063b4:	d515      	bpl.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80063b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80063b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063bc:	d111      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063be:	4a82      	ldr	r2, [pc, #520]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80063c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063c4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80063c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80063cc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80063d0:	4303      	orrs	r3, r0
 80063d2:	6960      	ldr	r0, [r4, #20]
 80063d4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80063d8:	6a20      	ldr	r0, [r4, #32]
 80063da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063e2:	070a      	lsls	r2, r1, #28
 80063e4:	d519      	bpl.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063e6:	4a78      	ldr	r2, [pc, #480]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80063e8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80063f0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80063f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6961      	ldr	r1, [r4, #20]
 80063fc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006400:	69e1      	ldr	r1, [r4, #28]
 8006402:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006406:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800640a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800640e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006410:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006414:	430b      	orrs	r3, r1
 8006416:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800641a:	4c6b      	ldr	r4, [pc, #428]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006422:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006424:	f7fd ff1e 	bl	8004264 <HAL_GetTick>
 8006428:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	f140 80c3 	bpl.w	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006432:	2000      	movs	r0, #0
 8006434:	e009      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8006436:	2601      	movs	r6, #1
 8006438:	e67a      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643a:	f7fd ff13 	bl	8004264 <HAL_GetTick>
 800643e:	eba0 0008 	sub.w	r0, r0, r8
 8006442:	2864      	cmp	r0, #100	; 0x64
 8006444:	f67f ae8c 	bls.w	8006160 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006448:	2003      	movs	r0, #3
}
 800644a:	b003      	add	sp, #12
 800644c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006450:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006454:	429a      	cmp	r2, r3
 8006456:	f43f ae8e 	beq.w	8006176 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800645c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006462:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006466:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006468:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800646a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800646e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006470:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006474:	07db      	lsls	r3, r3, #31
 8006476:	f57f ae7e 	bpl.w	8006176 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 800647a:	f7fd fef3 	bl	8004264 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800647e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006482:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006486:	0798      	lsls	r0, r3, #30
 8006488:	f53f ae75 	bmi.w	8006176 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648c:	f7fd feea 	bl	8004264 <HAL_GetTick>
 8006490:	eba0 0008 	sub.w	r0, r0, r8
 8006494:	4548      	cmp	r0, r9
 8006496:	d9f5      	bls.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006498:	e7d6      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800649a:	6891      	ldr	r1, [r2, #8]
 800649c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80064a0:	e679      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 80064a2:	4e49      	ldr	r6, [pc, #292]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80064a4:	6833      	ldr	r3, [r6, #0]
 80064a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064aa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80064ac:	f7fd feda 	bl	8004264 <HAL_GetTick>
 80064b0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064b2:	6833      	ldr	r3, [r6, #0]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	d472      	bmi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	07d7      	lsls	r7, r2, #31
 80064bc:	d512      	bpl.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80064be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c0:	b983      	cbnz	r3, 80064e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064c2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064c6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064ce:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80064d2:	430b      	orrs	r3, r1
 80064d4:	6861      	ldr	r1, [r4, #4]
 80064d6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80064da:	68a1      	ldr	r1, [r4, #8]
 80064dc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80064e0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064e4:	0316      	lsls	r6, r2, #12
 80064e6:	d503      	bpl.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80064e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ee:	d005      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x444>
 80064f0:	02d0      	lsls	r0, r2, #11
 80064f2:	d51e      	bpl.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fa:	d11a      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064fc:	4932      	ldr	r1, [pc, #200]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80064fe:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006502:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800650a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800650e:	4303      	orrs	r3, r0
 8006510:	6860      	ldr	r0, [r4, #4]
 8006512:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006516:	68e0      	ldr	r0, [r4, #12]
 8006518:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800651c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006520:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006526:	f020 001f 	bic.w	r0, r0, #31
 800652a:	3b01      	subs	r3, #1
 800652c:	4303      	orrs	r3, r0
 800652e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006532:	01d1      	lsls	r1, r2, #7
 8006534:	d511      	bpl.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006536:	4924      	ldr	r1, [pc, #144]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006538:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800653c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006540:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006544:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006548:	4303      	orrs	r3, r0
 800654a:	6860      	ldr	r0, [r4, #4]
 800654c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006550:	6920      	ldr	r0, [r4, #16]
 8006552:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006556:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800655a:	0192      	lsls	r2, r2, #6
 800655c:	d50d      	bpl.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	6862      	ldr	r2, [r4, #4]
 8006562:	041b      	lsls	r3, r3, #16
 8006564:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006568:	68e2      	ldr	r2, [r4, #12]
 800656a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800656e:	68a2      	ldr	r2, [r4, #8]
 8006570:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006574:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006576:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800657a:	4e13      	ldr	r6, [pc, #76]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006582:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006584:	f7fd fe6e 	bl	8004264 <HAL_GetTick>
 8006588:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800658a:	6833      	ldr	r3, [r6, #0]
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	f53f aed7 	bmi.w	8006340 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006592:	f7fd fe67 	bl	8004264 <HAL_GetTick>
 8006596:	1bc0      	subs	r0, r0, r7
 8006598:	2864      	cmp	r0, #100	; 0x64
 800659a:	d9f6      	bls.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800659c:	e754      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800659e:	f7fd fe61 	bl	8004264 <HAL_GetTick>
 80065a2:	1bc0      	subs	r0, r0, r7
 80065a4:	2864      	cmp	r0, #100	; 0x64
 80065a6:	d984      	bls.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80065a8:	e74e      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065aa:	f7fd fe5b 	bl	8004264 <HAL_GetTick>
 80065ae:	1b80      	subs	r0, r0, r6
 80065b0:	2864      	cmp	r0, #100	; 0x64
 80065b2:	f67f aecf 	bls.w	8006354 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80065b6:	e747      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065b8:	f7fd fe54 	bl	8004264 <HAL_GetTick>
 80065bc:	1b40      	subs	r0, r0, r5
 80065be:	2864      	cmp	r0, #100	; 0x64
 80065c0:	f67f af33 	bls.w	800642a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80065c4:	e740      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800

080065cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80065d0:	4604      	mov	r4, r0
 80065d2:	b1c8      	cbz	r0, 8006608 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80065d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80065d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80065dc:	b91b      	cbnz	r3, 80065e6 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80065de:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80065e2:	f7fb f8bd 	bl	8001760 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065e6:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80065e8:	1d21      	adds	r1, r4, #4
 80065ea:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80065f0:	f000 f9cf 	bl	8006992 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80065f4:	6862      	ldr	r2, [r4, #4]
 80065f6:	4629      	mov	r1, r5
 80065f8:	6820      	ldr	r0, [r4, #0]
 80065fa:	f000 fa02 	bl	8006a02 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065fe:	2301      	movs	r3, #1

  return HAL_OK;
 8006600:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006602:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006606:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006608:	2001      	movs	r0, #1
 800660a:	e7fc      	b.n	8006606 <HAL_SDRAM_Init+0x3a>

0800660c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800660c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800660e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006612:	4605      	mov	r5, r0
 8006614:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006616:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006618:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800661a:	d010      	beq.n	800663e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800661c:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006620:	2c01      	cmp	r4, #1
 8006622:	d110      	bne.n	8006646 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006624:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006626:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006628:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800662c:	f000 fa1f 	bl	8006a6e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006630:	6833      	ldr	r3, [r6, #0]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d104      	bne.n	8006640 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006636:	2305      	movs	r3, #5
 8006638:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800663c:	2000      	movs	r0, #0
}
 800663e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006640:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006644:	e7fa      	b.n	800663c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006646:	2001      	movs	r0, #1
 8006648:	e7f9      	b.n	800663e <HAL_SDRAM_SendCommand+0x32>

0800664a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800664a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800664c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006650:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006652:	2b02      	cmp	r3, #2
 8006654:	b2d8      	uxtb	r0, r3
 8006656:	d00d      	beq.n	8006674 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006658:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800665c:	2b01      	cmp	r3, #1
 800665e:	b2dd      	uxtb	r5, r3
 8006660:	d109      	bne.n	8006676 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006662:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006664:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006666:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800666a:	f000 fa12 	bl	8006a92 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800666e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006670:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006674:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006676:	2001      	movs	r0, #1
 8006678:	e7fc      	b.n	8006674 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800667a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800667c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006680:	2b01      	cmp	r3, #1
 8006682:	d133      	bne.n	80066ec <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	2302      	movs	r3, #2
 8006686:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800668a:	6803      	ldr	r3, [r0, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006694:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <HAL_TIM_Base_Start_IT+0x74>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01a      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x54>
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669e:	d017      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x54>
 80066a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x54>
 80066a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00f      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x54>
 80066b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x54>
 80066b8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x54>
 80066c0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x54>
 80066c8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d107      	bne.n	80066e0 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d0:	6899      	ldr	r1, [r3, #8]
 80066d2:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <HAL_TIM_Base_Start_IT+0x78>)
 80066d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d6:	2a06      	cmp	r2, #6
 80066d8:	d006      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x6c>
 80066da:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80066de:	d003      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e8:	2000      	movs	r0, #0
}
 80066ea:	4770      	bx	lr
    return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	4770      	bx	lr
 80066f0:	40010000 	.word	0x40010000
 80066f4:	00010007 	.word	0x00010007

080066f8 <HAL_TIM_OC_DelayElapsedCallback>:
 80066f8:	4770      	bx	lr

080066fa <HAL_TIM_IC_CaptureCallback>:
 80066fa:	4770      	bx	lr

080066fc <HAL_TIM_PWM_PulseFinishedCallback>:
 80066fc:	4770      	bx	lr

080066fe <HAL_TIM_TriggerCallback>:
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006700:	6803      	ldr	r3, [r0, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	0791      	lsls	r1, r2, #30
{
 8006706:	b510      	push	{r4, lr}
 8006708:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800670a:	d50f      	bpl.n	800672c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	0792      	lsls	r2, r2, #30
 8006710:	d50c      	bpl.n	800672c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006712:	f06f 0202 	mvn.w	r2, #2
 8006716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006718:	2201      	movs	r2, #1
 800671a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	0799      	lsls	r1, r3, #30
 8006720:	f000 8085 	beq.w	800682e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006724:	f7ff ffe9 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006728:	2300      	movs	r3, #0
 800672a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	0752      	lsls	r2, r2, #29
 8006732:	d510      	bpl.n	8006756 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	0750      	lsls	r0, r2, #29
 8006738:	d50d      	bpl.n	8006756 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800673a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006742:	2202      	movs	r2, #2
 8006744:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f413 7f40 	tst.w	r3, #768	; 0x300
 800674c:	d075      	beq.n	800683a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800674e:	f7ff ffd4 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	2300      	movs	r3, #0
 8006754:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	0711      	lsls	r1, r2, #28
 800675c:	d50f      	bpl.n	800677e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	0712      	lsls	r2, r2, #28
 8006762:	d50c      	bpl.n	800677e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006764:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006768:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800676a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800676c:	2204      	movs	r2, #4
 800676e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	079b      	lsls	r3, r3, #30
 8006774:	d067      	beq.n	8006846 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006776:	f7ff ffc0 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677a:	2300      	movs	r3, #0
 800677c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	06d0      	lsls	r0, r2, #27
 8006784:	d510      	bpl.n	80067a8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	06d1      	lsls	r1, r2, #27
 800678a:	d50d      	bpl.n	80067a8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800678c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006790:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006794:	2208      	movs	r2, #8
 8006796:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800679e:	d058      	beq.n	8006852 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80067a0:	f7ff ffab 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a4:	2300      	movs	r3, #0
 80067a6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	07d2      	lsls	r2, r2, #31
 80067ae:	d508      	bpl.n	80067c2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	07d0      	lsls	r0, r2, #31
 80067b4:	d505      	bpl.n	80067c2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067b6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80067be:	f7fa fdcf 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	0611      	lsls	r1, r2, #24
 80067c8:	d508      	bpl.n	80067dc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	0612      	lsls	r2, r2, #24
 80067ce:	d505      	bpl.n	80067dc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80067d8:	f000 f8d9 	bl	800698e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	05d0      	lsls	r0, r2, #23
 80067e2:	d508      	bpl.n	80067f6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	0611      	lsls	r1, r2, #24
 80067e8:	d505      	bpl.n	80067f6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80067f2:	f000 f8cd 	bl	8006990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	0652      	lsls	r2, r2, #25
 80067fc:	d508      	bpl.n	8006810 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	0650      	lsls	r0, r2, #25
 8006802:	d505      	bpl.n	8006810 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006804:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006808:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800680a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800680c:	f7ff ff77 	bl	80066fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	0691      	lsls	r1, r2, #26
 8006816:	d522      	bpl.n	800685e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	0692      	lsls	r2, r2, #26
 800681c:	d51f      	bpl.n	800685e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800681e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006822:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006824:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800682a:	f000 b8af 	b.w	800698c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	f7ff ff63 	bl	80066f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006832:	4620      	mov	r0, r4
 8006834:	f7ff ff62 	bl	80066fc <HAL_TIM_PWM_PulseFinishedCallback>
 8006838:	e776      	b.n	8006728 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800683a:	f7ff ff5d 	bl	80066f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683e:	4620      	mov	r0, r4
 8006840:	f7ff ff5c 	bl	80066fc <HAL_TIM_PWM_PulseFinishedCallback>
 8006844:	e785      	b.n	8006752 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	f7ff ff57 	bl	80066f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff ff56 	bl	80066fc <HAL_TIM_PWM_PulseFinishedCallback>
 8006850:	e793      	b.n	800677a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	f7ff ff51 	bl	80066f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006856:	4620      	mov	r0, r4
 8006858:	f7ff ff50 	bl	80066fc <HAL_TIM_PWM_PulseFinishedCallback>
 800685c:	e7a2      	b.n	80067a4 <HAL_TIM_IRQHandler+0xa4>
}
 800685e:	bd10      	pop	{r4, pc}

08006860 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006860:	4a30      	ldr	r2, [pc, #192]	; (8006924 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006862:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006864:	4290      	cmp	r0, r2
 8006866:	d012      	beq.n	800688e <TIM_Base_SetConfig+0x2e>
 8006868:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800686c:	d00f      	beq.n	800688e <TIM_Base_SetConfig+0x2e>
 800686e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006872:	4290      	cmp	r0, r2
 8006874:	d00b      	beq.n	800688e <TIM_Base_SetConfig+0x2e>
 8006876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800687a:	4290      	cmp	r0, r2
 800687c:	d007      	beq.n	800688e <TIM_Base_SetConfig+0x2e>
 800687e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006882:	4290      	cmp	r0, r2
 8006884:	d003      	beq.n	800688e <TIM_Base_SetConfig+0x2e>
 8006886:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800688a:	4290      	cmp	r0, r2
 800688c:	d119      	bne.n	80068c2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800688e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006894:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006896:	4a23      	ldr	r2, [pc, #140]	; (8006924 <TIM_Base_SetConfig+0xc4>)
 8006898:	4290      	cmp	r0, r2
 800689a:	d029      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 800689c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80068a0:	d026      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80068a6:	4290      	cmp	r0, r2
 80068a8:	d022      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ae:	4290      	cmp	r0, r2
 80068b0:	d01e      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068b6:	4290      	cmp	r0, r2
 80068b8:	d01a      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80068be:	4290      	cmp	r0, r2
 80068c0:	d016      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068c2:	4a19      	ldr	r2, [pc, #100]	; (8006928 <TIM_Base_SetConfig+0xc8>)
 80068c4:	4290      	cmp	r0, r2
 80068c6:	d013      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068cc:	4290      	cmp	r0, r2
 80068ce:	d00f      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068d4:	4290      	cmp	r0, r2
 80068d6:	d00b      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068d8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80068dc:	4290      	cmp	r0, r2
 80068de:	d007      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068e4:	4290      	cmp	r0, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_Base_SetConfig+0x90>
 80068e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ec:	4290      	cmp	r0, r2
 80068ee:	d103      	bne.n	80068f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f4:	68ca      	ldr	r2, [r1, #12]
 80068f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f8:	694a      	ldr	r2, [r1, #20]
 80068fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006900:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006902:	688b      	ldr	r3, [r1, #8]
 8006904:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006906:	680b      	ldr	r3, [r1, #0]
 8006908:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <TIM_Base_SetConfig+0xc4>)
 800690c:	4298      	cmp	r0, r3
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0xb8>
 8006910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006914:	4298      	cmp	r0, r3
 8006916:	d101      	bne.n	800691c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006918:	690b      	ldr	r3, [r1, #16]
 800691a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800691c:	2301      	movs	r3, #1
 800691e:	6143      	str	r3, [r0, #20]
}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000
 8006928:	40014000 	.word	0x40014000

0800692c <HAL_TIM_Base_Init>:
{
 800692c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800692e:	4604      	mov	r4, r0
 8006930:	b350      	cbz	r0, 8006988 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006932:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006936:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800693a:	b91b      	cbnz	r3, 8006944 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800693c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006940:	f7ff fe9b 	bl	800667a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006946:	6820      	ldr	r0, [r4, #0]
 8006948:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800694a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694e:	f7ff ff87 	bl	8006860 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006952:	2301      	movs	r3, #1
  return HAL_OK;
 8006954:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006956:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800695e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006962:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006966:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800696a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800696e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800697a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800697e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006982:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006986:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006988:	2001      	movs	r0, #1
 800698a:	e7fc      	b.n	8006986 <HAL_TIM_Base_Init+0x5a>

0800698c <HAL_TIMEx_CommutCallback>:
 800698c:	4770      	bx	lr

0800698e <HAL_TIMEx_BreakCallback>:
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_Break2Callback>:
 8006990:	4770      	bx	lr

08006992 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006996:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800699a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800699e:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 80069a2:	ea43 0308 	orr.w	r3, r3, r8
 80069a6:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80069aa:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80069ae:	6809      	ldr	r1, [r1, #0]
 80069b0:	b991      	cbnz	r1, 80069d8 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069b2:	ea43 030e 	orr.w	r3, r3, lr
 80069b6:	6801      	ldr	r1, [r0, #0]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80069be:	ea43 030c 	orr.w	r3, r3, ip
 80069c2:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80069c6:	433b      	orrs	r3, r7
 80069c8:	4333      	orrs	r3, r6
 80069ca:	432b      	orrs	r3, r5
 80069cc:	4323      	orrs	r3, r4
 80069ce:	430b      	orrs	r3, r1
 80069d0:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80069d2:	2000      	movs	r0, #0
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069d8:	6801      	ldr	r1, [r0, #0]
 80069da:	ea43 030e 	orr.w	r3, r3, lr
 80069de:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80069e2:	430b      	orrs	r3, r1
 80069e4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80069e6:	ea42 030c 	orr.w	r3, r2, ip
 80069ea:	6841      	ldr	r1, [r0, #4]
 80069ec:	433b      	orrs	r3, r7
 80069ee:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 80069f2:	4333      	orrs	r3, r6
 80069f4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80069f8:	432b      	orrs	r3, r5
 80069fa:	4323      	orrs	r3, r4
 80069fc:	4313      	orrs	r3, r2
 80069fe:	6043      	str	r3, [r0, #4]
 8006a00:	e7e7      	b.n	80069d2 <FMC_SDRAM_Init+0x40>

08006a02 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a02:	68cb      	ldr	r3, [r1, #12]
 8006a04:	f103 3cff 	add.w	ip, r3, #4294967295
 8006a08:	694b      	ldr	r3, [r1, #20]
{
 8006a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	680f      	ldr	r7, [r1, #0]
 8006a10:	684c      	ldr	r4, [r1, #4]
 8006a12:	688e      	ldr	r6, [r1, #8]
 8006a14:	051b      	lsls	r3, r3, #20
 8006a16:	690d      	ldr	r5, [r1, #16]
 8006a18:	3c01      	subs	r4, #1
 8006a1a:	6989      	ldr	r1, [r1, #24]
 8006a1c:	3e01      	subs	r6, #1
 8006a1e:	3d01      	subs	r5, #1
 8006a20:	3f01      	subs	r7, #1
 8006a22:	3901      	subs	r1, #1
 8006a24:	0124      	lsls	r4, r4, #4
 8006a26:	0236      	lsls	r6, r6, #8
 8006a28:	042d      	lsls	r5, r5, #16
 8006a2a:	0609      	lsls	r1, r1, #24
 8006a2c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006a30:	b95a      	cbnz	r2, 8006a4a <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a32:	433b      	orrs	r3, r7
 8006a34:	6882      	ldr	r2, [r0, #8]
 8006a36:	4323      	orrs	r3, r4
 8006a38:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006a3c:	4333      	orrs	r3, r6
 8006a3e:	432b      	orrs	r3, r5
 8006a40:	430b      	orrs	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006a46:	2000      	movs	r0, #0
 8006a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a4a:	6882      	ldr	r2, [r0, #8]
 8006a4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006a50:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006a54:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006a56:	ea44 0306 	orr.w	r3, r4, r6
 8006a5a:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a5c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006a5e:	68c2      	ldr	r2, [r0, #12]
 8006a60:	432b      	orrs	r3, r5
 8006a62:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006a66:	430b      	orrs	r3, r1
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60c3      	str	r3, [r0, #12]
 8006a6c:	e7eb      	b.n	8006a46 <FMC_SDRAM_Timing_Init+0x44>

08006a6e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006a6e:	6902      	ldr	r2, [r0, #16]
{
 8006a70:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006a72:	e9d1 3400 	ldrd	r3, r4, [r1]
 8006a76:	0d92      	lsrs	r2, r2, #22
 8006a78:	4323      	orrs	r3, r4
 8006a7a:	68cc      	ldr	r4, [r1, #12]
 8006a7c:	0592      	lsls	r2, r2, #22
 8006a7e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8006a82:	4313      	orrs	r3, r2
 8006a84:	688a      	ldr	r2, [r1, #8]
 8006a86:	3a01      	subs	r2, #1
 8006a88:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006a8c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006a8e:	2000      	movs	r0, #0
 8006a90:	bd10      	pop	{r4, pc}

08006a92 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006a92:	6943      	ldr	r3, [r0, #20]
 8006a94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006a98:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006a9c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006aa0:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	4770      	bx	lr
	...

08006aa8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aac:	b113      	cbz	r3, 8006ab4 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8006aae:	f06f 0005 	mvn.w	r0, #5
 8006ab2:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab4:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8006aba:	b912      	cbnz	r2, 8006ac2 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006abc:	f3ef 8211 	mrs	r2, BASEPRI
 8006ac0:	b112      	cbz	r2, 8006ac8 <osKernelInitialize+0x20>
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	2a02      	cmp	r2, #2
 8006ac6:	d0f2      	beq.n	8006aae <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	b910      	cbnz	r0, 8006ad2 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ad0:	4770      	bx	lr
    } else {
      stat = osError;
 8006ad2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006ad6:	4770      	bx	lr
 8006ad8:	20002048 	.word	0x20002048

08006adc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006adc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ade:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ae2:	b113      	cbz	r3, 8006aea <osKernelStart+0xe>
    stat = osErrorISR;
 8006ae4:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8006ae8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aea:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8006af0:	b912      	cbnz	r2, 8006af8 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006af2:	f3ef 8211 	mrs	r2, BASEPRI
 8006af6:	b112      	cbz	r2, 8006afe <osKernelStart+0x22>
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	2a02      	cmp	r2, #2
 8006afc:	d0f2      	beq.n	8006ae4 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	2a01      	cmp	r2, #1
 8006b02:	d105      	bne.n	8006b10 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8006b04:	2202      	movs	r2, #2
 8006b06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006b08:	f001 fe7a 	bl	8008800 <vTaskStartScheduler>
      stat = osOK;
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e7eb      	b.n	8006ae8 <osKernelStart+0xc>
      stat = osError;
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006b14:	e7e8      	b.n	8006ae8 <osKernelStart+0xc>
 8006b16:	bf00      	nop
 8006b18:	20002048 	.word	0x20002048

08006b1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	4614      	mov	r4, r2
 8006b20:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b22:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b24:	460b      	mov	r3, r1
  hTask = NULL;
 8006b26:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b28:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006b2c:	bb1a      	cbnz	r2, 8006b76 <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b2e:	f3ef 8210 	mrs	r2, PRIMASK
 8006b32:	b912      	cbnz	r2, 8006b3a <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b34:	f3ef 8211 	mrs	r2, BASEPRI
 8006b38:	b11a      	cbz	r2, 8006b42 <osThreadNew+0x26>
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <osThreadNew+0xa4>)
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	2a02      	cmp	r2, #2
 8006b40:	d019      	beq.n	8006b76 <osThreadNew+0x5a>
 8006b42:	b1c0      	cbz	r0, 8006b76 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006b44:	b36c      	cbz	r4, 8006ba2 <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006b46:	69a5      	ldr	r5, [r4, #24]
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	bf08      	it	eq
 8006b4c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b4e:	1e6a      	subs	r2, r5, #1
 8006b50:	46ac      	mov	ip, r5
 8006b52:	2a37      	cmp	r2, #55	; 0x37
 8006b54:	d82a      	bhi.n	8006bac <osThreadNew+0x90>
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	07d2      	lsls	r2, r2, #31
 8006b5a:	d427      	bmi.n	8006bac <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006b5c:	6966      	ldr	r6, [r4, #20]
 8006b5e:	b16e      	cbz	r6, 8006b7c <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b60:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8006b62:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b64:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8006b68:	b157      	cbz	r7, 8006b80 <osThreadNew+0x64>
 8006b6a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8006b6e:	d902      	bls.n	8006b76 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b70:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b72:	b104      	cbz	r4, 8006b76 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b74:	b9e6      	cbnz	r6, 8006bb0 <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b76:	9805      	ldr	r0, [sp, #20]
}
 8006b78:	b007      	add	sp, #28
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	e7f0      	b.n	8006b62 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b80:	f1be 0f00 	cmp.w	lr, #0
 8006b84:	d1f7      	bne.n	8006b76 <osThreadNew+0x5a>
      if (mem == 0) {
 8006b86:	6924      	ldr	r4, [r4, #16]
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d1f4      	bne.n	8006b76 <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b8c:	ac05      	add	r4, sp, #20
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	e9cd c400 	strd	ip, r4, [sp]
 8006b94:	f001 fca9 	bl	80084ea <xTaskCreate>
 8006b98:	2801      	cmp	r0, #1
          hTask = NULL;
 8006b9a:	bf1c      	itt	ne
 8006b9c:	2300      	movne	r3, #0
 8006b9e:	9305      	strne	r3, [sp, #20]
 8006ba0:	e7e9      	b.n	8006b76 <osThreadNew+0x5a>
    name = NULL;
 8006ba2:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8006ba4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006ba8:	2280      	movs	r2, #128	; 0x80
 8006baa:	e7ef      	b.n	8006b8c <osThreadNew+0x70>
        return (NULL);
 8006bac:	2000      	movs	r0, #0
 8006bae:	e7e3      	b.n	8006b78 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bb0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006bb4:	9500      	str	r5, [sp, #0]
 8006bb6:	f001 fc5a 	bl	800846e <xTaskCreateStatic>
 8006bba:	9005      	str	r0, [sp, #20]
 8006bbc:	e7db      	b.n	8006b76 <osThreadNew+0x5a>
 8006bbe:	bf00      	nop
 8006bc0:	20002048 	.word	0x20002048

08006bc4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006bc4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bca:	b113      	cbz	r3, 8006bd2 <osDelay+0xe>
    stat = osErrorISR;
 8006bcc:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006bd0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd2:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006bd6:	b913      	cbnz	r3, 8006bde <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bdc:	b11b      	cbz	r3, 8006be6 <osDelay+0x22>
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <osDelay+0x30>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d0f2      	beq.n	8006bcc <osDelay+0x8>
    if (ticks != 0U) {
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d0f2      	beq.n	8006bd0 <osDelay+0xc>
      vTaskDelay(ticks);
 8006bea:	f001 fdc7 	bl	800877c <vTaskDelay>
    stat = osOK;
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e7ee      	b.n	8006bd0 <osDelay+0xc>
 8006bf2:	bf00      	nop
 8006bf4:	20002048 	.word	0x20002048

08006bf8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bfc:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006c00:	b116      	cbz	r6, 8006c08 <osMutexNew+0x10>
  hMutex = NULL;
 8006c02:	2700      	movs	r7, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006c04:	4638      	mov	r0, r7
 8006c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c08:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ()) {
 8006c0c:	b913      	cbnz	r3, 8006c14 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c12:	b11b      	cbz	r3, 8006c1c <osMutexNew+0x24>
 8006c14:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <osMutexNew+0x84>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d0f2      	beq.n	8006c02 <osMutexNew+0xa>
    if (attr != NULL) {
 8006c1c:	b324      	cbz	r4, 8006c68 <osMutexNew+0x70>
      type = attr->attr_bits;
 8006c1e:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8006c20:	072b      	lsls	r3, r5, #28
 8006c22:	d4ee      	bmi.n	8006c02 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006c24:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c28:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006c2c:	b199      	cbz	r1, 8006c56 <osMutexNew+0x5e>
 8006c2e:	2b4f      	cmp	r3, #79	; 0x4f
 8006c30:	d9e7      	bls.n	8006c02 <osMutexNew+0xa>
        if (rmtx != 0U) {
 8006c32:	b1bd      	cbz	r5, 8006c64 <osMutexNew+0x6c>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006c34:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006c36:	f000 ff51 	bl	8007adc <xQueueCreateMutexStatic>
 8006c3a:	4607      	mov	r7, r0
      if (hMutex != NULL) {
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d0e0      	beq.n	8006c02 <osMutexNew+0xa>
          name = attr->name;
 8006c40:	6824      	ldr	r4, [r4, #0]
 8006c42:	462e      	mov	r6, r5
        vQueueAddToRegistry (hMutex, name);
 8006c44:	4621      	mov	r1, r4
 8006c46:	4638      	mov	r0, r7
 8006c48:	f001 fa48 	bl	80080dc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	d0d9      	beq.n	8006c04 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006c50:	f047 0701 	orr.w	r7, r7, #1
  return ((osMutexId_t)hMutex);
 8006c54:	e7d6      	b.n	8006c04 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1d3      	bne.n	8006c02 <osMutexNew+0xa>
          if (rmtx != 0U) {
 8006c5a:	b12d      	cbz	r5, 8006c68 <osMutexNew+0x70>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006c5c:	2004      	movs	r0, #4
 8006c5e:	f000 ff72 	bl	8007b46 <xQueueCreateMutex>
 8006c62:	e7ea      	b.n	8006c3a <osMutexNew+0x42>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006c64:	2001      	movs	r0, #1
 8006c66:	e7e6      	b.n	8006c36 <osMutexNew+0x3e>
            hMutex = xSemaphoreCreateMutex ();
 8006c68:	2001      	movs	r0, #1
 8006c6a:	f000 ff6c 	bl	8007b46 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006c6e:	4607      	mov	r7, r0
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0c6      	beq.n	8006c02 <osMutexNew+0xa>
        if (attr != NULL) {
 8006c74:	2c00      	cmp	r4, #0
 8006c76:	d0e5      	beq.n	8006c44 <osMutexNew+0x4c>
 8006c78:	2500      	movs	r5, #0
 8006c7a:	e7e1      	b.n	8006c40 <osMutexNew+0x48>
 8006c7c:	20002048 	.word	0x20002048

08006c80 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c80:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c82:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c86:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8006c88:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c8c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c8e:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006c92:	b112      	cbz	r2, 8006c9a <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8006c94:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006c98:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9a:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006c9e:	b912      	cbnz	r2, 8006ca6 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ca0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ca4:	b11a      	cbz	r2, 8006cae <osMutexAcquire+0x2e>
 8006ca6:	4a0d      	ldr	r2, [pc, #52]	; (8006cdc <osMutexAcquire+0x5c>)
 8006ca8:	6812      	ldr	r2, [r2, #0]
 8006caa:	2a02      	cmp	r2, #2
 8006cac:	d0f2      	beq.n	8006c94 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8006cae:	b188      	cbz	r0, 8006cd4 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006cb0:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006cb2:	b163      	cbz	r3, 8006cce <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006cb4:	f001 f999 	bl	8007fea <xQueueTakeMutexRecursive>
 8006cb8:	2801      	cmp	r0, #1
 8006cba:	d101      	bne.n	8006cc0 <osMutexAcquire+0x40>
  stat = osOK;
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e7eb      	b.n	8006c98 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8006cc0:	2c00      	cmp	r4, #0
 8006cc2:	bf14      	ite	ne
 8006cc4:	f06f 0001 	mvnne.w	r0, #1
 8006cc8:	f06f 0002 	mvneq.w	r0, #2
 8006ccc:	e7e4      	b.n	8006c98 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006cce:	f001 f8c1 	bl	8007e54 <xQueueSemaphoreTake>
 8006cd2:	e7f1      	b.n	8006cb8 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8006cd4:	f06f 0003 	mvn.w	r0, #3
 8006cd8:	e7de      	b.n	8006c98 <osMutexAcquire+0x18>
 8006cda:	bf00      	nop
 8006cdc:	20002048 	.word	0x20002048

08006ce0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006ce0:	b508      	push	{r3, lr}
 8006ce2:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006ce4:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006ce8:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cec:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006cf0:	b112      	cbz	r2, 8006cf8 <osMutexRelease+0x18>
    stat = osErrorISR;
 8006cf2:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006cf6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf8:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006cfc:	b912      	cbnz	r2, 8006d04 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8006d02:	b11a      	cbz	r2, 8006d0c <osMutexRelease+0x2c>
 8006d04:	4a0a      	ldr	r2, [pc, #40]	; (8006d30 <osMutexRelease+0x50>)
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	2a02      	cmp	r2, #2
 8006d0a:	d0f2      	beq.n	8006cf2 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8006d0c:	b168      	cbz	r0, 8006d2a <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8006d0e:	b13b      	cbz	r3, 8006d20 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006d10:	f000 fef9 	bl	8007b06 <xQueueGiveMutexRecursive>
 8006d14:	2801      	cmp	r0, #1
  stat = osOK;
 8006d16:	bf0c      	ite	eq
 8006d18:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8006d1a:	f06f 0002 	mvnne.w	r0, #2
 8006d1e:	e7ea      	b.n	8006cf6 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006d20:	461a      	mov	r2, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	f000 fe1f 	bl	8007966 <xQueueGenericSend>
 8006d28:	e7f4      	b.n	8006d14 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8006d2a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006d2e:	e7e2      	b.n	8006cf6 <osMutexRelease+0x16>
 8006d30:	20002048 	.word	0x20002048

08006d34 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d36:	460e      	mov	r6, r1
 8006d38:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d3a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006d3e:	b11b      	cbz	r3, 8006d48 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8006d40:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006d42:	4620      	mov	r0, r4
 8006d44:	b002      	add	sp, #8
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d48:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006d4c:	b913      	cbnz	r3, 8006d54 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d52:	b11b      	cbz	r3, 8006d5c <osSemaphoreNew+0x28>
 8006d54:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <osSemaphoreNew+0xa8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d0f1      	beq.n	8006d40 <osSemaphoreNew+0xc>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d0ef      	beq.n	8006d40 <osSemaphoreNew+0xc>
 8006d60:	42b0      	cmp	r0, r6
 8006d62:	d3ed      	bcc.n	8006d40 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8006d64:	b1ed      	cbz	r5, 8006da2 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d66:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006d6a:	b1c3      	cbz	r3, 8006d9e <osSemaphoreNew+0x6a>
 8006d6c:	2a4f      	cmp	r2, #79	; 0x4f
 8006d6e:	d9e7      	bls.n	8006d40 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006d70:	2801      	cmp	r0, #1
 8006d72:	d129      	bne.n	8006dc8 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006d74:	2203      	movs	r2, #3
 8006d76:	9200      	str	r2, [sp, #0]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	f000 fd6e 	bl	800785c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8006d80:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d0dc      	beq.n	8006d40 <osSemaphoreNew+0xc>
 8006d86:	b1ce      	cbz	r6, 8006dbc <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d88:	2300      	movs	r3, #0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f000 fdea 	bl	8007966 <xQueueGenericSend>
 8006d92:	2801      	cmp	r0, #1
 8006d94:	d012      	beq.n	8006dbc <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8006d96:	4620      	mov	r0, r4
 8006d98:	f001 f9c6 	bl	8008128 <vQueueDelete>
 8006d9c:	e7d0      	b.n	8006d40 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	d1ce      	bne.n	8006d40 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006da2:	2801      	cmp	r0, #1
 8006da4:	d104      	bne.n	8006db0 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8006da6:	2203      	movs	r2, #3
 8006da8:	2100      	movs	r1, #0
 8006daa:	f000 fd6b 	bl	8007884 <xQueueGenericCreate>
 8006dae:	e7e7      	b.n	8006d80 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006db0:	4631      	mov	r1, r6
 8006db2:	f000 fdb6 	bl	8007922 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006db6:	4604      	mov	r4, r0
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d0c1      	beq.n	8006d40 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8006dbc:	b95d      	cbnz	r5, 8006dd6 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f001 f98b 	bl	80080dc <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006dc6:	e7bc      	b.n	8006d42 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4631      	mov	r1, r6
 8006dcc:	f000 fd83 	bl	80078d6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d0b4      	beq.n	8006d40 <osSemaphoreNew+0xc>
          name = attr->name;
 8006dd6:	682d      	ldr	r5, [r5, #0]
 8006dd8:	e7f1      	b.n	8006dbe <osSemaphoreNew+0x8a>
 8006dda:	bf00      	nop
 8006ddc:	20002048 	.word	0x20002048

08006de0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006de0:	b513      	push	{r0, r1, r4, lr}
 8006de2:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006de4:	b918      	cbnz	r0, 8006dee <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8006de6:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006dea:	b002      	add	sp, #8
 8006dec:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8006df2:	b163      	cbz	r3, 8006e0e <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8006df4:	2c00      	cmp	r4, #0
 8006df6:	d1f6      	bne.n	8006de6 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006df8:	aa01      	add	r2, sp, #4
 8006dfa:	4621      	mov	r1, r4
      yield = pdFALSE;
 8006dfc:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006dfe:	f001 f918 	bl	8008032 <xQueueReceiveFromISR>
 8006e02:	2801      	cmp	r0, #1
 8006e04:	d113      	bne.n	8006e2e <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	b9a3      	cbnz	r3, 8006e34 <osSemaphoreAcquire+0x54>
  stat = osOK;
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e7ed      	b.n	8006dea <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e0e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006e12:	b913      	cbnz	r3, 8006e1a <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e14:	f3ef 8311 	mrs	r3, BASEPRI
 8006e18:	b11b      	cbz	r3, 8006e22 <osSemaphoreAcquire+0x42>
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <osSemaphoreAcquire+0x70>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d0e8      	beq.n	8006df4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006e22:	4621      	mov	r1, r4
 8006e24:	f001 f816 	bl	8007e54 <xQueueSemaphoreTake>
 8006e28:	2801      	cmp	r0, #1
 8006e2a:	d0ee      	beq.n	8006e0a <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8006e2c:	b96c      	cbnz	r4, 8006e4a <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8006e2e:	f06f 0002 	mvn.w	r0, #2
 8006e32:	e7da      	b.n	8006dea <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8006e34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	e7df      	b.n	8006e0a <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 8006e4a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006e4e:	e7cc      	b.n	8006dea <osSemaphoreAcquire+0xa>
 8006e50:	20002048 	.word	0x20002048

08006e54 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006e54:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006e56:	b370      	cbz	r0, 8006eb6 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e58:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006e5c:	b14b      	cbz	r3, 8006e72 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 8006e5e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006e60:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006e62:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006e64:	f000 fef5 	bl	8007c52 <xQueueGiveFromISR>
 8006e68:	2801      	cmp	r0, #1
 8006e6a:	d014      	beq.n	8006e96 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006e6c:	f06f 0002 	mvn.w	r0, #2
 8006e70:	e014      	b.n	8006e9c <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e72:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006e76:	b913      	cbnz	r3, 8006e7e <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e78:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7c:	b11b      	cbz	r3, 8006e86 <osSemaphoreRelease+0x32>
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <osSemaphoreRelease+0x68>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d0eb      	beq.n	8006e5e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006e86:	2300      	movs	r3, #0
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f000 fd6b 	bl	8007966 <xQueueGenericSend>
 8006e90:	2801      	cmp	r0, #1
 8006e92:	d002      	beq.n	8006e9a <osSemaphoreRelease+0x46>
 8006e94:	e7ea      	b.n	8006e6c <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	b913      	cbnz	r3, 8006ea0 <osSemaphoreRelease+0x4c>
  stat = osOK;
 8006e9a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8006ea0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	e7f1      	b.n	8006e9a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8006eb6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006eba:	e7ef      	b.n	8006e9c <osSemaphoreRelease+0x48>
 8006ebc:	20002048 	.word	0x20002048

08006ec0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006ec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ec2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006ec8:	b11b      	cbz	r3, 8006ed2 <osMessageQueueNew+0x12>
  hQueue = NULL;
 8006eca:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006ecc:	4628      	mov	r0, r5
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed2:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006ed6:	b913      	cbnz	r3, 8006ede <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ed8:	f3ef 8311 	mrs	r3, BASEPRI
 8006edc:	b11b      	cbz	r3, 8006ee6 <osMessageQueueNew+0x26>
 8006ede:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <osMessageQueueNew+0x88>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d0f1      	beq.n	8006eca <osMessageQueueNew+0xa>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d0ef      	beq.n	8006eca <osMessageQueueNew+0xa>
 8006eea:	2900      	cmp	r1, #0
 8006eec:	d0ed      	beq.n	8006eca <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8006eee:	b1ec      	cbz	r4, 8006f2c <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ef0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8006ef4:	b193      	cbz	r3, 8006f1c <osMessageQueueNew+0x5c>
 8006ef6:	2a4f      	cmp	r2, #79	; 0x4f
 8006ef8:	d9e7      	bls.n	8006eca <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006efa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d0e4      	beq.n	8006eca <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006f00:	fb01 f500 	mul.w	r5, r1, r0
 8006f04:	6966      	ldr	r6, [r4, #20]
 8006f06:	42ae      	cmp	r6, r5
 8006f08:	d3df      	bcc.n	8006eca <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	9500      	str	r5, [sp, #0]
 8006f0e:	f000 fca5 	bl	800785c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006f12:	4605      	mov	r5, r0
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d0d8      	beq.n	8006eca <osMessageQueueNew+0xa>
        name = attr->name;
 8006f18:	6824      	ldr	r4, [r4, #0]
 8006f1a:	e00f      	b.n	8006f3c <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006f1c:	2a00      	cmp	r2, #0
 8006f1e:	d1d4      	bne.n	8006eca <osMessageQueueNew+0xa>
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1d1      	bne.n	8006eca <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006f26:	6963      	ldr	r3, [r4, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ce      	bne.n	8006eca <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f000 fca9 	bl	8007884 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006f32:	4605      	mov	r5, r0
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d0c8      	beq.n	8006eca <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	d1ed      	bne.n	8006f18 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f001 f8cc 	bl	80080dc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006f44:	e7c2      	b.n	8006ecc <osMessageQueueNew+0xc>
 8006f46:	bf00      	nop
 8006f48:	20002048 	.word	0x20002048

08006f4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006f4c:	b513      	push	{r0, r1, r4, lr}
 8006f4e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f50:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006f54:	b123      	cbz	r3, 8006f60 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f56:	b9d8      	cbnz	r0, 8006f90 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8006f58:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006f5c:	b002      	add	sp, #8
 8006f5e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f60:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006f64:	b913      	cbnz	r3, 8006f6c <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f66:	f3ef 8311 	mrs	r3, BASEPRI
 8006f6a:	b11b      	cbz	r3, 8006f74 <osMessageQueuePut+0x28>
 8006f6c:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <osMessageQueuePut+0x80>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d0f0      	beq.n	8006f56 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d0ef      	beq.n	8006f58 <osMessageQueuePut+0xc>
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	d0ed      	beq.n	8006f58 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4622      	mov	r2, r4
 8006f80:	f000 fcf1 	bl	8007966 <xQueueGenericSend>
 8006f84:	2801      	cmp	r0, #1
 8006f86:	d010      	beq.n	8006faa <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8006f88:	b9e4      	cbnz	r4, 8006fc4 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 8006f8a:	f06f 0002 	mvn.w	r0, #2
 8006f8e:	e7e5      	b.n	8006f5c <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d0e1      	beq.n	8006f58 <osMessageQueuePut+0xc>
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	d1df      	bne.n	8006f58 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006f98:	4623      	mov	r3, r4
 8006f9a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006f9c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006f9e:	f000 fdef 	bl	8007b80 <xQueueGenericSendFromISR>
 8006fa2:	2801      	cmp	r0, #1
 8006fa4:	d1f1      	bne.n	8006f8a <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	b90b      	cbnz	r3, 8006fae <osMessageQueuePut+0x62>
  stat = osOK;
 8006faa:	2000      	movs	r0, #0
 8006fac:	e7d6      	b.n	8006f5c <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8006fae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	e7f2      	b.n	8006faa <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8006fc4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006fc8:	e7c8      	b.n	8006f5c <osMessageQueuePut+0x10>
 8006fca:	bf00      	nop
 8006fcc:	20002048 	.word	0x20002048

08006fd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006fd0:	b513      	push	{r0, r1, r4, lr}
 8006fd2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006fd8:	b123      	cbz	r3, 8006fe4 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fda:	b9d0      	cbnz	r0, 8007012 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8006fdc:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006fe0:	b002      	add	sp, #8
 8006fe2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006fe8:	b913      	cbnz	r3, 8006ff0 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fea:	f3ef 8311 	mrs	r3, BASEPRI
 8006fee:	b11b      	cbz	r3, 8006ff8 <osMessageQueueGet+0x28>
 8006ff0:	4b16      	ldr	r3, [pc, #88]	; (800704c <osMessageQueueGet+0x7c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d0f0      	beq.n	8006fda <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d0ef      	beq.n	8006fdc <osMessageQueueGet+0xc>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d0ed      	beq.n	8006fdc <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007000:	4622      	mov	r2, r4
 8007002:	f000 fe82 	bl	8007d0a <xQueueReceive>
 8007006:	2801      	cmp	r0, #1
 8007008:	d00f      	beq.n	800702a <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800700a:	b9dc      	cbnz	r4, 8007044 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 800700c:	f06f 0002 	mvn.w	r0, #2
 8007010:	e7e6      	b.n	8006fe0 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007012:	2900      	cmp	r1, #0
 8007014:	d0e2      	beq.n	8006fdc <osMessageQueueGet+0xc>
 8007016:	2c00      	cmp	r4, #0
 8007018:	d1e0      	bne.n	8006fdc <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800701a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800701c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800701e:	f001 f808 	bl	8008032 <xQueueReceiveFromISR>
 8007022:	2801      	cmp	r0, #1
 8007024:	d1f2      	bne.n	800700c <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	b90b      	cbnz	r3, 800702e <osMessageQueueGet+0x5e>
  stat = osOK;
 800702a:	2000      	movs	r0, #0
 800702c:	e7d8      	b.n	8006fe0 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800702e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	e7f2      	b.n	800702a <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8007044:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007048:	e7ca      	b.n	8006fe0 <osMessageQueueGet+0x10>
 800704a:	bf00      	nop
 800704c:	20002048 	.word	0x20002048

08007050 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007050:	4b03      	ldr	r3, [pc, #12]	; (8007060 <vApplicationGetIdleTaskMemory+0x10>)
 8007052:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007054:	4b03      	ldr	r3, [pc, #12]	; (8007064 <vApplicationGetIdleTaskMemory+0x14>)
 8007056:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	6013      	str	r3, [r2, #0]
}
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20001fe8 	.word	0x20001fe8
 8007064:	20001de8 	.word	0x20001de8

08007068 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007068:	4b03      	ldr	r3, [pc, #12]	; (8007078 <vApplicationGetTimerTaskMemory+0x10>)
 800706a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800706c:	4b03      	ldr	r3, [pc, #12]	; (800707c <vApplicationGetTimerTaskMemory+0x14>)
 800706e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007074:	6013      	str	r3, [r2, #0]
}
 8007076:	4770      	bx	lr
 8007078:	2000244c 	.word	0x2000244c
 800707c:	2000204c 	.word	0x2000204c

08007080 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <prvInsertBlockIntoFreeList+0x44>)
{
 8007082:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007084:	461a      	mov	r2, r3
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4283      	cmp	r3, r0
 800708a:	d3fb      	bcc.n	8007084 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800708c:	6854      	ldr	r4, [r2, #4]
 800708e:	1911      	adds	r1, r2, r4
 8007090:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007092:	bf01      	itttt	eq
 8007094:	6841      	ldreq	r1, [r0, #4]
 8007096:	4610      	moveq	r0, r2
 8007098:	1909      	addeq	r1, r1, r4
 800709a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800709c:	6844      	ldr	r4, [r0, #4]
 800709e:	1901      	adds	r1, r0, r4
 80070a0:	428b      	cmp	r3, r1
 80070a2:	d10c      	bne.n	80070be <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070a4:	4908      	ldr	r1, [pc, #32]	; (80070c8 <prvInsertBlockIntoFreeList+0x48>)
 80070a6:	6809      	ldr	r1, [r1, #0]
 80070a8:	428b      	cmp	r3, r1
 80070aa:	d003      	beq.n	80070b4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ac:	6859      	ldr	r1, [r3, #4]
 80070ae:	4421      	add	r1, r4
 80070b0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070b2:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070b4:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070b6:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070b8:	bf18      	it	ne
 80070ba:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	4619      	mov	r1, r3
 80070c0:	e7f8      	b.n	80070b4 <prvInsertBlockIntoFreeList+0x34>
 80070c2:	bf00      	nop
 80070c4:	200149b4 	.word	0x200149b4
 80070c8:	200024ac 	.word	0x200024ac

080070cc <pvPortMalloc>:
{
 80070cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80070d2:	f001 fa37 	bl	8008544 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80070d6:	4940      	ldr	r1, [pc, #256]	; (80071d8 <pvPortMalloc+0x10c>)
 80070d8:	4d40      	ldr	r5, [pc, #256]	; (80071dc <pvPortMalloc+0x110>)
 80070da:	680b      	ldr	r3, [r1, #0]
 80070dc:	b9f3      	cbnz	r3, 800711c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 80070de:	4a40      	ldr	r2, [pc, #256]	; (80071e0 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 80070e0:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e2:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070e4:	4e3f      	ldr	r6, [pc, #252]	; (80071e4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070e6:	bf1b      	ittet	ne
 80070e8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070ea:	4b3f      	ldrne	r3, [pc, #252]	; (80071e8 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ec:	4b3f      	ldreq	r3, [pc, #252]	; (80071ec <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070ee:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 80070f2:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070f4:	bf18      	it	ne
 80070f6:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070f8:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070fa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80070fc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070fe:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007102:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007106:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8007108:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800710a:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800710e:	4b38      	ldr	r3, [pc, #224]	; (80071f0 <pvPortMalloc+0x124>)
 8007110:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007112:	4b38      	ldr	r3, [pc, #224]	; (80071f4 <pvPortMalloc+0x128>)
 8007114:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800711a:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800711c:	682e      	ldr	r6, [r5, #0]
 800711e:	4226      	tst	r6, r4
 8007120:	d154      	bne.n	80071cc <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8007122:	2c00      	cmp	r4, #0
 8007124:	d043      	beq.n	80071ae <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8007126:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800712a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800712c:	bf1c      	itt	ne
 800712e:	f023 0307 	bicne.w	r3, r3, #7
 8007132:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007134:	2b00      	cmp	r3, #0
 8007136:	d049      	beq.n	80071cc <pvPortMalloc+0x100>
 8007138:	4f2e      	ldr	r7, [pc, #184]	; (80071f4 <pvPortMalloc+0x128>)
 800713a:	683c      	ldr	r4, [r7, #0]
 800713c:	429c      	cmp	r4, r3
 800713e:	d345      	bcc.n	80071cc <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8007140:	4a28      	ldr	r2, [pc, #160]	; (80071e4 <pvPortMalloc+0x118>)
 8007142:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007144:	6868      	ldr	r0, [r5, #4]
 8007146:	4298      	cmp	r0, r3
 8007148:	d204      	bcs.n	8007154 <pvPortMalloc+0x88>
 800714a:	f8d5 c000 	ldr.w	ip, [r5]
 800714e:	f1bc 0f00 	cmp.w	ip, #0
 8007152:	d117      	bne.n	8007184 <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 8007154:	6809      	ldr	r1, [r1, #0]
 8007156:	42a9      	cmp	r1, r5
 8007158:	d038      	beq.n	80071cc <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800715a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800715c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007160:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007162:	1ac2      	subs	r2, r0, r3
 8007164:	2a10      	cmp	r2, #16
 8007166:	d914      	bls.n	8007192 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007168:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800716a:	0741      	lsls	r1, r0, #29
 800716c:	d00d      	beq.n	800718a <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	b672      	cpsid	i
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	b662      	cpsie	i
 8007182:	e7fe      	b.n	8007182 <pvPortMalloc+0xb6>
 8007184:	462a      	mov	r2, r5
 8007186:	4665      	mov	r5, ip
 8007188:	e7dc      	b.n	8007144 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800718a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800718c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800718e:	f7ff ff77 	bl	8007080 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007192:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007194:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007196:	4916      	ldr	r1, [pc, #88]	; (80071f0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007198:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800719a:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800719c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800719e:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071a0:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071a2:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071a4:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071a6:	bf38      	it	cc
 80071a8:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071aa:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 80071ae:	f001 fa6f 	bl	8008690 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b2:	0763      	lsls	r3, r4, #29
 80071b4:	d00c      	beq.n	80071d0 <pvPortMalloc+0x104>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	b672      	cpsid	i
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	b662      	cpsie	i
 80071ca:	e7fe      	b.n	80071ca <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 80071cc:	2400      	movs	r4, #0
 80071ce:	e7ee      	b.n	80071ae <pvPortMalloc+0xe2>
}
 80071d0:	4620      	mov	r0, r4
 80071d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d6:	bf00      	nop
 80071d8:	200024ac 	.word	0x200024ac
 80071dc:	200149a8 	.word	0x200149a8
 80071e0:	200024b0 	.word	0x200024b0
 80071e4:	200149b4 	.word	0x200149b4
 80071e8:	200149a8 	.word	0x200149a8
 80071ec:	000124f8 	.word	0x000124f8
 80071f0:	200149b0 	.word	0x200149b0
 80071f4:	200149ac 	.word	0x200149ac

080071f8 <vPortFree>:
{
 80071f8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80071fa:	4604      	mov	r4, r0
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d032      	beq.n	8007266 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007200:	4a19      	ldr	r2, [pc, #100]	; (8007268 <vPortFree+0x70>)
 8007202:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	4213      	tst	r3, r2
 800720a:	d10a      	bne.n	8007222 <vPortFree+0x2a>
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	b672      	cpsid	i
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	b662      	cpsie	i
 8007220:	e7fe      	b.n	8007220 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007222:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007226:	b151      	cbz	r1, 800723e <vPortFree+0x46>
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	b672      	cpsid	i
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	b662      	cpsie	i
 800723c:	e7fe      	b.n	800723c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800723e:	ea23 0302 	bic.w	r3, r3, r2
 8007242:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007246:	f001 f97d 	bl	8008544 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800724a:	4a08      	ldr	r2, [pc, #32]	; (800726c <vPortFree+0x74>)
 800724c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007250:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007254:	6811      	ldr	r1, [r2, #0]
 8007256:	440b      	add	r3, r1
 8007258:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800725a:	f7ff ff11 	bl	8007080 <prvInsertBlockIntoFreeList>
}
 800725e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007262:	f001 ba15 	b.w	8008690 <xTaskResumeAll>
}
 8007266:	bd10      	pop	{r4, pc}
 8007268:	200149a8 	.word	0x200149a8
 800726c:	200149ac 	.word	0x200149ac

08007270 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007270:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007274:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007278:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800727a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800727c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007284:	4770      	bx	lr

08007286 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007286:	2300      	movs	r3, #0
 8007288:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800728a:	4770      	bx	lr

0800728c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800728c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800728e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007290:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007292:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007298:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800729a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800729c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800729e:	3301      	adds	r3, #1
 80072a0:	6003      	str	r3, [r0, #0]
}
 80072a2:	4770      	bx	lr

080072a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072a4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072a6:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072a8:	1c63      	adds	r3, r4, #1
 80072aa:	d10a      	bne.n	80072c2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072ac:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072b2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072b4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80072b6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80072b8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80072ba:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80072bc:	3301      	adds	r3, #1
 80072be:	6003      	str	r3, [r0, #0]
}
 80072c0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072c2:	f100 0208 	add.w	r2, r0, #8
 80072c6:	4613      	mov	r3, r2
 80072c8:	6852      	ldr	r2, [r2, #4]
 80072ca:	6815      	ldr	r5, [r2, #0]
 80072cc:	42a5      	cmp	r5, r4
 80072ce:	d9fa      	bls.n	80072c6 <vListInsert+0x22>
 80072d0:	e7ed      	b.n	80072ae <vListInsert+0xa>

080072d2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072d2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072d4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80072d8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072da:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072dc:	6859      	ldr	r1, [r3, #4]
 80072de:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072e0:	bf08      	it	eq
 80072e2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072e4:	2200      	movs	r2, #0
 80072e6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	3a01      	subs	r2, #1
 80072ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072ee:	6818      	ldr	r0, [r3, #0]
}
 80072f0:	4770      	bx	lr
	...

080072f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072f4:	4808      	ldr	r0, [pc, #32]	; (8007318 <prvPortStartFirstTask+0x24>)
 80072f6:	6800      	ldr	r0, [r0, #0]
 80072f8:	6800      	ldr	r0, [r0, #0]
 80072fa:	f380 8808 	msr	MSP, r0
 80072fe:	f04f 0000 	mov.w	r0, #0
 8007302:	f380 8814 	msr	CONTROL, r0
 8007306:	b662      	cpsie	i
 8007308:	b661      	cpsie	f
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	df00      	svc	0
 8007314:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007316:	0000      	.short	0x0000
 8007318:	e000ed08 	.word	0xe000ed08

0800731c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800731c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800732c <vPortEnableVFP+0x10>
 8007320:	6801      	ldr	r1, [r0, #0]
 8007322:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007326:	6001      	str	r1, [r0, #0]
 8007328:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800732a:	0000      	.short	0x0000
 800732c:	e000ed88 	.word	0xe000ed88

08007330 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007330:	2300      	movs	r3, #0
{
 8007332:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007334:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007336:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <prvTaskExitError+0x44>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	d00a      	beq.n	8007354 <prvTaskExitError+0x24>
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	b672      	cpsid	i
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	b662      	cpsie	i
 8007352:	e7fe      	b.n	8007352 <prvTaskExitError+0x22>
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	b672      	cpsid	i
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	b662      	cpsie	i
	while( ulDummy == 0 )
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0fc      	beq.n	8007368 <prvTaskExitError+0x38>
}
 800736e:	b002      	add	sp, #8
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000040 	.word	0x20000040

08007378 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800737c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007380:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007384:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007386:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007388:	4b03      	ldr	r3, [pc, #12]	; (8007398 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800738a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800738c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800738e:	f06f 0302 	mvn.w	r3, #2
 8007392:	6203      	str	r3, [r0, #32]
}
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	08007331 	.word	0x08007331
 800739c:	00000000 	.word	0x00000000

080073a0 <SVC_Handler>:
	__asm volatile (
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <pxCurrentTCBConst2>)
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6808      	ldr	r0, [r1, #0]
 80073a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	f380 8809 	msr	PSP, r0
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8811 	msr	BASEPRI, r0
 80073ba:	4770      	bx	lr
 80073bc:	f3af 8000 	nop.w

080073c0 <pxCurrentTCBConst2>:
 80073c0:	20014a04 	.word	0x20014a04

080073c4 <vPortEnterCritical>:
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	b672      	cpsid	i
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	b662      	cpsie	i
	uxCriticalNesting++;
 80073d8:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <vPortEnterCritical+0x44>)
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80073de:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80073e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80073e2:	d110      	bne.n	8007406 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073e8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	b153      	cbz	r3, 8007406 <vPortEnterCritical+0x42>
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	b672      	cpsid	i
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	b662      	cpsie	i
 8007404:	e7fe      	b.n	8007404 <vPortEnterCritical+0x40>
}
 8007406:	4770      	bx	lr
 8007408:	20000040 	.word	0x20000040

0800740c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800740c:	4a09      	ldr	r2, [pc, #36]	; (8007434 <vPortExitCritical+0x28>)
 800740e:	6813      	ldr	r3, [r2, #0]
 8007410:	b953      	cbnz	r3, 8007428 <vPortExitCritical+0x1c>
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	b672      	cpsid	i
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	b662      	cpsie	i
 8007426:	e7fe      	b.n	8007426 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007428:	3b01      	subs	r3, #1
 800742a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800742c:	b90b      	cbnz	r3, 8007432 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800742e:	f383 8811 	msr	BASEPRI, r3
}
 8007432:	4770      	bx	lr
 8007434:	20000040 	.word	0x20000040
	...

08007440 <PendSV_Handler>:
	__asm volatile
 8007440:	f3ef 8009 	mrs	r0, PSP
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <pxCurrentTCBConst>)
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f01e 0f10 	tst.w	lr, #16
 8007450:	bf08      	it	eq
 8007452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745a:	6010      	str	r0, [r2, #0]
 800745c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007464:	b672      	cpsid	i
 8007466:	f380 8811 	msr	BASEPRI, r0
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	b662      	cpsie	i
 8007474:	f001 fa16 	bl	80088a4 <vTaskSwitchContext>
 8007478:	f04f 0000 	mov.w	r0, #0
 800747c:	f380 8811 	msr	BASEPRI, r0
 8007480:	bc09      	pop	{r0, r3}
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748a:	f01e 0f10 	tst.w	lr, #16
 800748e:	bf08      	it	eq
 8007490:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007494:	f380 8809 	msr	PSP, r0
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop

080074a0 <pxCurrentTCBConst>:
 80074a0:	20014a04 	.word	0x20014a04

080074a4 <SysTick_Handler>:
{
 80074a4:	b508      	push	{r3, lr}
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	b672      	cpsid	i
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80074ba:	f001 f851 	bl	8008560 <xTaskIncrementTick>
 80074be:	b128      	cbz	r0, 80074cc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80074c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80074cc:	2300      	movs	r3, #0
 80074ce:	f383 8811 	msr	BASEPRI, r3
}
 80074d2:	bd08      	pop	{r3, pc}

080074d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074d4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80074d8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074de:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074e0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074e2:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <vPortSetupTimerInterrupt+0x20>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80074ea:	3b01      	subs	r3, #1
 80074ec:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ee:	2307      	movs	r3, #7
 80074f0:	6113      	str	r3, [r2, #16]
}
 80074f2:	4770      	bx	lr
 80074f4:	2000000c 	.word	0x2000000c

080074f8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074f8:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <xPortStartScheduler+0xbc>)
{
 80074fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074fc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074fe:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007504:	22ff      	movs	r2, #255	; 0xff
 8007506:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007508:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800750a:	4a2b      	ldr	r2, [pc, #172]	; (80075b8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007512:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007516:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800751a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800751c:	2307      	movs	r3, #7
 800751e:	4a27      	ldr	r2, [pc, #156]	; (80075bc <xPortStartScheduler+0xc4>)
 8007520:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007522:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007526:	1e5c      	subs	r4, r3, #1
 8007528:	0600      	lsls	r0, r0, #24
 800752a:	d40e      	bmi.n	800754a <xPortStartScheduler+0x52>
 800752c:	b111      	cbz	r1, 8007534 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800752e:	2b03      	cmp	r3, #3
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	d013      	beq.n	800755c <xPortStartScheduler+0x64>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	b672      	cpsid	i
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	b662      	cpsie	i
 8007548:	e7fe      	b.n	8007548 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800754a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800754e:	2101      	movs	r1, #1
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f88d 3003 	strb.w	r3, [sp, #3]
 8007558:	4623      	mov	r3, r4
 800755a:	e7e2      	b.n	8007522 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800755c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007560:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007564:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007566:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007568:	9b01      	ldr	r3, [sp, #4]
 800756a:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <xPortStartScheduler+0xbc>)
 800756c:	b2db      	uxtb	r3, r3
 800756e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007570:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007578:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800757c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007580:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007584:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007588:	f7ff ffa4 	bl	80074d4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800758c:	4b0c      	ldr	r3, [pc, #48]	; (80075c0 <xPortStartScheduler+0xc8>)
 800758e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007590:	f7ff fec4 	bl	800731c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007594:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007598:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800759c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80075a0:	f7ff fea8 	bl	80072f4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80075a4:	f001 f97e 	bl	80088a4 <vTaskSwitchContext>
}
 80075a8:	4628      	mov	r0, r5
	prvTaskExitError();
 80075aa:	f7ff fec1 	bl	8007330 <prvTaskExitError>
}
 80075ae:	b003      	add	sp, #12
 80075b0:	bd30      	pop	{r4, r5, pc}
 80075b2:	bf00      	nop
 80075b4:	e000e400 	.word	0xe000e400
 80075b8:	200149bc 	.word	0x200149bc
 80075bc:	200149c0 	.word	0x200149c0
 80075c0:	20000040 	.word	0x20000040

080075c4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075c4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075c8:	2b0f      	cmp	r3, #15
 80075ca:	d910      	bls.n	80075ee <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075cc:	4a13      	ldr	r2, [pc, #76]	; (800761c <vPortValidateInterruptPriority+0x58>)
 80075ce:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075d0:	4a13      	ldr	r2, [pc, #76]	; (8007620 <vPortValidateInterruptPriority+0x5c>)
 80075d2:	7812      	ldrb	r2, [r2, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d90a      	bls.n	80075ee <vPortValidateInterruptPriority+0x2a>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	b672      	cpsid	i
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	b662      	cpsie	i
 80075ec:	e7fe      	b.n	80075ec <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075f2:	4a0c      	ldr	r2, [pc, #48]	; (8007624 <vPortValidateInterruptPriority+0x60>)
 80075f4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075fe:	4293      	cmp	r3, r2
 8007600:	d90a      	bls.n	8007618 <vPortValidateInterruptPriority+0x54>
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	b672      	cpsid	i
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	b662      	cpsie	i
 8007616:	e7fe      	b.n	8007616 <vPortValidateInterruptPriority+0x52>
	}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	e000e3f0 	.word	0xe000e3f0
 8007620:	200149bc 	.word	0x200149bc
 8007624:	200149c0 	.word	0x200149c0

08007628 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007628:	b510      	push	{r4, lr}
 800762a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800762c:	f7ff feca 	bl	80073c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007630:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007632:	f7ff feeb 	bl	800740c <vPortExitCritical>

	return xReturn;
}
 8007636:	fab4 f084 	clz	r0, r4
 800763a:	0940      	lsrs	r0, r0, #5
 800763c:	bd10      	pop	{r4, pc}

0800763e <prvCopyDataToQueue>:
{
 800763e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007640:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007642:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007644:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007646:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007648:	b952      	cbnz	r2, 8007660 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800764a:	6807      	ldr	r7, [r0, #0]
 800764c:	bb47      	cbnz	r7, 80076a0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800764e:	6880      	ldr	r0, [r0, #8]
 8007650:	f001 fa98 	bl	8008b84 <xTaskPriorityDisinherit>
 8007654:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007656:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007658:	3601      	adds	r6, #1
}
 800765a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800765c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800765e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007660:	b965      	cbnz	r5, 800767c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007662:	6840      	ldr	r0, [r0, #4]
 8007664:	f022 fb79 	bl	8029d5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800766c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800766e:	68a2      	ldr	r2, [r4, #8]
 8007670:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007672:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007674:	d3f0      	bcc.n	8007658 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	e7ed      	b.n	8007658 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800767c:	68c0      	ldr	r0, [r0, #12]
 800767e:	f022 fb6c 	bl	8029d5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007682:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007684:	68e3      	ldr	r3, [r4, #12]
 8007686:	4251      	negs	r1, r2
 8007688:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800768e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007690:	bf3e      	ittt	cc
 8007692:	68a3      	ldrcc	r3, [r4, #8]
 8007694:	185b      	addcc	r3, r3, r1
 8007696:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007698:	2d02      	cmp	r5, #2
 800769a:	d101      	bne.n	80076a0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800769c:	b116      	cbz	r6, 80076a4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800769e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80076a0:	2500      	movs	r5, #0
 80076a2:	e7d9      	b.n	8007658 <prvCopyDataToQueue+0x1a>
 80076a4:	4635      	mov	r5, r6
 80076a6:	e7d7      	b.n	8007658 <prvCopyDataToQueue+0x1a>

080076a8 <prvCopyDataFromQueue>:
{
 80076a8:	4603      	mov	r3, r0
 80076aa:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80076ae:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076b0:	b162      	cbz	r2, 80076cc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076b2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076b4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076b6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076b8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076ba:	60dc      	str	r4, [r3, #12]
}
 80076bc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076c0:	bf24      	itt	cs
 80076c2:	6819      	ldrcs	r1, [r3, #0]
 80076c4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076c6:	68d9      	ldr	r1, [r3, #12]
 80076c8:	f022 bb47 	b.w	8029d5a <memcpy>
}
 80076cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <prvUnlockQueue>:
{
 80076d2:	b570      	push	{r4, r5, r6, lr}
 80076d4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80076d6:	f7ff fe75 	bl	80073c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80076da:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076de:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80076e2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	dc14      	bgt.n	8007712 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80076e8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ea:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80076ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80076f2:	f7ff fe8b 	bl	800740c <vPortExitCritical>
	taskENTER_CRITICAL();
 80076f6:	f7ff fe65 	bl	80073c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80076fa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80076fe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007700:	2d00      	cmp	r5, #0
 8007702:	dc12      	bgt.n	800772a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007704:	23ff      	movs	r3, #255	; 0xff
 8007706:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800770a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800770e:	f7ff be7d 	b.w	800740c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0e7      	beq.n	80076e8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007718:	4630      	mov	r0, r6
 800771a:	f001 f945 	bl	80089a8 <xTaskRemoveFromEventList>
 800771e:	b108      	cbz	r0, 8007724 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007720:	f001 f9d4 	bl	8008acc <vTaskMissedYield>
			--cTxLock;
 8007724:	3d01      	subs	r5, #1
 8007726:	b26d      	sxtb	r5, r5
 8007728:	e7dc      	b.n	80076e4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0e9      	beq.n	8007704 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007730:	4630      	mov	r0, r6
 8007732:	f001 f939 	bl	80089a8 <xTaskRemoveFromEventList>
 8007736:	b108      	cbz	r0, 800773c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007738:	f001 f9c8 	bl	8008acc <vTaskMissedYield>
				--cRxLock;
 800773c:	3d01      	subs	r5, #1
 800773e:	b26d      	sxtb	r5, r5
 8007740:	e7de      	b.n	8007700 <prvUnlockQueue+0x2e>

08007742 <xQueueGenericReset>:
{
 8007742:	b538      	push	{r3, r4, r5, lr}
 8007744:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007746:	4604      	mov	r4, r0
 8007748:	b950      	cbnz	r0, 8007760 <xQueueGenericReset+0x1e>
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	b672      	cpsid	i
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	b662      	cpsie	i
 800775e:	e7fe      	b.n	800775e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007760:	f7ff fe30 	bl	80073c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800776a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800776c:	434b      	muls	r3, r1
 800776e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007770:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007772:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007774:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007776:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007778:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800777a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800777c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800777e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007786:	b9a5      	cbnz	r5, 80077b2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	b173      	cbz	r3, 80077aa <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800778c:	f104 0010 	add.w	r0, r4, #16
 8007790:	f001 f90a 	bl	80089a8 <xTaskRemoveFromEventList>
 8007794:	b148      	cbz	r0, 80077aa <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8007796:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80077aa:	f7ff fe2f 	bl	800740c <vPortExitCritical>
}
 80077ae:	2001      	movs	r0, #1
 80077b0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077b2:	f104 0010 	add.w	r0, r4, #16
 80077b6:	f7ff fd5b 	bl	8007270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077be:	f7ff fd57 	bl	8007270 <vListInitialise>
 80077c2:	e7f2      	b.n	80077aa <xQueueGenericReset+0x68>

080077c4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 80077c4:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 80077c6:	461c      	mov	r4, r3
 80077c8:	b953      	cbnz	r3, 80077e0 <xQueueGenericCreateStatic.part.0+0x1c>
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	b672      	cpsid	i
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	b662      	cpsie	i
 80077de:	e7fe      	b.n	80077de <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077e0:	b15a      	cbz	r2, 80077fa <xQueueGenericCreateStatic.part.0+0x36>
 80077e2:	b9b1      	cbnz	r1, 8007812 <xQueueGenericCreateStatic.part.0+0x4e>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	b672      	cpsid	i
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	b662      	cpsie	i
 80077f8:	e7fe      	b.n	80077f8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077fa:	b151      	cbz	r1, 8007812 <xQueueGenericCreateStatic.part.0+0x4e>
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	b672      	cpsid	i
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	b662      	cpsie	i
 8007810:	e7fe      	b.n	8007810 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007812:	2350      	movs	r3, #80	; 0x50
 8007814:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	2b50      	cmp	r3, #80	; 0x50
 800781a:	d00a      	beq.n	8007832 <xQueueGenericCreateStatic.part.0+0x6e>
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	b672      	cpsid	i
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	b662      	cpsie	i
 8007830:	e7fe      	b.n	8007830 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007832:	2900      	cmp	r1, #0
 8007834:	bf08      	it	eq
 8007836:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007838:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800783a:	2301      	movs	r3, #1
 800783c:	6022      	str	r2, [r4, #0]
 800783e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007842:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007846:	4619      	mov	r1, r3
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff ff7a 	bl	8007742 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800784e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8007852:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007854:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007858:	b002      	add	sp, #8
 800785a:	bd10      	pop	{r4, pc}

0800785c <xQueueGenericCreateStatic>:
	{
 800785c:	b410      	push	{r4}
 800785e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007862:	b950      	cbnz	r0, 800787a <xQueueGenericCreateStatic+0x1e>
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	b672      	cpsid	i
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	b662      	cpsie	i
 8007878:	e7fe      	b.n	8007878 <xQueueGenericCreateStatic+0x1c>
 800787a:	9401      	str	r4, [sp, #4]
	}
 800787c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007880:	f7ff bfa0 	b.w	80077c4 <xQueueGenericCreateStatic.part.0>

08007884 <xQueueGenericCreate>:
	{
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	460d      	mov	r5, r1
 8007888:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800788a:	4606      	mov	r6, r0
 800788c:	b950      	cbnz	r0, 80078a4 <xQueueGenericCreate+0x20>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	b672      	cpsid	i
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	b662      	cpsie	i
 80078a2:	e7fe      	b.n	80078a2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078a6:	3050      	adds	r0, #80	; 0x50
 80078a8:	f7ff fc10 	bl	80070cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80078ac:	4604      	mov	r4, r0
 80078ae:	b170      	cbz	r0, 80078ce <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80078b6:	b165      	cbz	r5, 80078d2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078b8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078bc:	2101      	movs	r1, #1
 80078be:	4620      	mov	r0, r4
 80078c0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80078c2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078c6:	f7ff ff3c 	bl	8007742 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80078ca:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80078ce:	4620      	mov	r0, r4
 80078d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d2:	4603      	mov	r3, r0
 80078d4:	e7f2      	b.n	80078bc <xQueueGenericCreate+0x38>

080078d6 <xQueueCreateCountingSemaphoreStatic>:
	{
 80078d6:	b513      	push	{r0, r1, r4, lr}
 80078d8:	4613      	mov	r3, r2
 80078da:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80078dc:	b950      	cbnz	r0, 80078f4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	b672      	cpsid	i
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	b662      	cpsie	i
 80078f2:	e7fe      	b.n	80078f2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80078f4:	4288      	cmp	r0, r1
 80078f6:	d20a      	bcs.n	800790e <xQueueCreateCountingSemaphoreStatic+0x38>
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	b672      	cpsid	i
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	b662      	cpsie	i
 800790c:	e7fe      	b.n	800790c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800790e:	2202      	movs	r2, #2
 8007910:	9200      	str	r2, [sp, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	4611      	mov	r1, r2
 8007916:	f7ff ffa1 	bl	800785c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800791a:	b100      	cbz	r0, 800791e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800791c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800791e:	b002      	add	sp, #8
 8007920:	bd10      	pop	{r4, pc}

08007922 <xQueueCreateCountingSemaphore>:
	{
 8007922:	b510      	push	{r4, lr}
 8007924:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007926:	b950      	cbnz	r0, 800793e <xQueueCreateCountingSemaphore+0x1c>
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	b672      	cpsid	i
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	b662      	cpsie	i
 800793c:	e7fe      	b.n	800793c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800793e:	4288      	cmp	r0, r1
 8007940:	d20a      	bcs.n	8007958 <xQueueCreateCountingSemaphore+0x36>
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	b672      	cpsid	i
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	b662      	cpsie	i
 8007956:	e7fe      	b.n	8007956 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007958:	2202      	movs	r2, #2
 800795a:	2100      	movs	r1, #0
 800795c:	f7ff ff92 	bl	8007884 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007960:	b100      	cbz	r0, 8007964 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007962:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007964:	bd10      	pop	{r4, pc}

08007966 <xQueueGenericSend>:
{
 8007966:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800796a:	b085      	sub	sp, #20
 800796c:	4688      	mov	r8, r1
 800796e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007970:	4604      	mov	r4, r0
{
 8007972:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007974:	b950      	cbnz	r0, 800798c <xQueueGenericSend+0x26>
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	b672      	cpsid	i
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	b662      	cpsie	i
 800798a:	e7fe      	b.n	800798a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800798c:	b961      	cbnz	r1, 80079a8 <xQueueGenericSend+0x42>
 800798e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007990:	b153      	cbz	r3, 80079a8 <xQueueGenericSend+0x42>
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	b672      	cpsid	i
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	b662      	cpsie	i
 80079a6:	e7fe      	b.n	80079a6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079a8:	2f02      	cmp	r7, #2
 80079aa:	d10d      	bne.n	80079c8 <xQueueGenericSend+0x62>
 80079ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d00a      	beq.n	80079c8 <xQueueGenericSend+0x62>
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	e7fe      	b.n	80079c6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c8:	f001 f88c 	bl	8008ae4 <xTaskGetSchedulerState>
 80079cc:	4606      	mov	r6, r0
 80079ce:	b960      	cbnz	r0, 80079ea <xQueueGenericSend+0x84>
 80079d0:	9b01      	ldr	r3, [sp, #4]
 80079d2:	b15b      	cbz	r3, 80079ec <xQueueGenericSend+0x86>
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	b672      	cpsid	i
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	b662      	cpsie	i
 80079e8:	e7fe      	b.n	80079e8 <xQueueGenericSend+0x82>
 80079ea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80079ec:	f04f 0900 	mov.w	r9, #0
 80079f0:	e037      	b.n	8007a62 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80079f2:	9d01      	ldr	r5, [sp, #4]
 80079f4:	b91d      	cbnz	r5, 80079fe <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80079f6:	f7ff fd09 	bl	800740c <vPortExitCritical>
			return errQUEUE_FULL;
 80079fa:	2000      	movs	r0, #0
 80079fc:	e052      	b.n	8007aa4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80079fe:	b916      	cbnz	r6, 8007a06 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a00:	a802      	add	r0, sp, #8
 8007a02:	f001 f817 	bl	8008a34 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007a06:	f7ff fd01 	bl	800740c <vPortExitCritical>
		vTaskSuspendAll();
 8007a0a:	f000 fd9b 	bl	8008544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a0e:	f7ff fcd9 	bl	80073c4 <vPortEnterCritical>
 8007a12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a16:	2bff      	cmp	r3, #255	; 0xff
 8007a18:	d101      	bne.n	8007a1e <xQueueGenericSend+0xb8>
 8007a1a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8007a1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a22:	2bff      	cmp	r3, #255	; 0xff
 8007a24:	d101      	bne.n	8007a2a <xQueueGenericSend+0xc4>
 8007a26:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8007a2a:	f7ff fcef 	bl	800740c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a2e:	a901      	add	r1, sp, #4
 8007a30:	a802      	add	r0, sp, #8
 8007a32:	f001 f80b 	bl	8008a4c <xTaskCheckForTimeOut>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d14a      	bne.n	8007ad0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a3a:	f7ff fcc3 	bl	80073c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d131      	bne.n	8007aaa <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007a46:	f7ff fce1 	bl	800740c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a4a:	9901      	ldr	r1, [sp, #4]
 8007a4c:	f104 0010 	add.w	r0, r4, #16
 8007a50:	f000 ff6e 	bl	8008930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a54:	4620      	mov	r0, r4
 8007a56:	f7ff fe3c 	bl	80076d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a5a:	f000 fe19 	bl	8008690 <xTaskResumeAll>
 8007a5e:	b360      	cbz	r0, 8007aba <xQueueGenericSend+0x154>
 8007a60:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007a62:	f7ff fcaf 	bl	80073c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d301      	bcc.n	8007a72 <xQueueGenericSend+0x10c>
 8007a6e:	2f02      	cmp	r7, #2
 8007a70:	d1bf      	bne.n	80079f2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a72:	463a      	mov	r2, r7
 8007a74:	4641      	mov	r1, r8
 8007a76:	4620      	mov	r0, r4
 8007a78:	f7ff fde1 	bl	800763e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7e:	b11b      	cbz	r3, 8007a88 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a84:	f000 ff90 	bl	80089a8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007a88:	b148      	cbz	r0, 8007a9e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8007a8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007a9e:	f7ff fcb5 	bl	800740c <vPortExitCritical>
				return pdPASS;
 8007aa2:	2001      	movs	r0, #1
}
 8007aa4:	b005      	add	sp, #20
 8007aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8007aaa:	f7ff fcaf 	bl	800740c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7ff fe0f 	bl	80076d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab4:	f000 fdec 	bl	8008690 <xTaskResumeAll>
 8007ab8:	e7d2      	b.n	8007a60 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8007aba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	e7c7      	b.n	8007a60 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7ff fdfe 	bl	80076d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ad6:	f000 fddb 	bl	8008690 <xTaskResumeAll>
 8007ada:	e78e      	b.n	80079fa <xQueueGenericSend+0x94>

08007adc <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007adc:	2200      	movs	r2, #0
	{
 8007ade:	460b      	mov	r3, r1
 8007ae0:	b513      	push	{r0, r1, r4, lr}
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	9000      	str	r0, [sp, #0]
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	f7ff fe6c 	bl	80077c4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 8007aec:	4604      	mov	r4, r0
 8007aee:	b138      	cbz	r0, 8007b00 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007af0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007af2:	461a      	mov	r2, r3
 8007af4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007af6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007af8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007afa:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007afc:	f7ff ff33 	bl	8007966 <xQueueGenericSend>
	}
 8007b00:	4620      	mov	r0, r4
 8007b02:	b002      	add	sp, #8
 8007b04:	bd10      	pop	{r4, pc}

08007b06 <xQueueGiveMutexRecursive>:
	{
 8007b06:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8007b08:	4604      	mov	r4, r0
 8007b0a:	b950      	cbnz	r0, 8007b22 <xQueueGiveMutexRecursive+0x1c>
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	e7fe      	b.n	8007b20 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007b22:	6885      	ldr	r5, [r0, #8]
 8007b24:	f000 ffd8 	bl	8008ad8 <xTaskGetCurrentTaskHandle>
 8007b28:	4285      	cmp	r5, r0
 8007b2a:	d10a      	bne.n	8007b42 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007b2c:	68e3      	ldr	r3, [r4, #12]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007b32:	b923      	cbnz	r3, 8007b3e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007b34:	461a      	mov	r2, r3
 8007b36:	4619      	mov	r1, r3
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f7ff ff14 	bl	8007966 <xQueueGenericSend>
			xReturn = pdPASS;
 8007b3e:	2001      	movs	r0, #1
		return xReturn;
 8007b40:	e000      	b.n	8007b44 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8007b42:	2000      	movs	r0, #0
	}
 8007b44:	bd38      	pop	{r3, r4, r5, pc}

08007b46 <xQueueCreateMutex>:
	{
 8007b46:	b570      	push	{r4, r5, r6, lr}
 8007b48:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b4a:	2050      	movs	r0, #80	; 0x50
 8007b4c:	f7ff fabe 	bl	80070cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007b50:	4604      	mov	r4, r0
 8007b52:	b198      	cbz	r0, 8007b7c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b54:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8007b56:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b58:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b5a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007b5e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b62:	f7ff fdee 	bl	8007742 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b66:	462b      	mov	r3, r5
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007b6e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b72:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b74:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b76:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b78:	f7ff fef5 	bl	8007966 <xQueueGenericSend>
	}
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <xQueueGenericSendFromISR>:
{
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4689      	mov	r9, r1
 8007b86:	4690      	mov	r8, r2
 8007b88:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	b950      	cbnz	r0, 8007ba4 <xQueueGenericSendFromISR+0x24>
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	b672      	cpsid	i
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	b662      	cpsie	i
 8007ba2:	e7fe      	b.n	8007ba2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba4:	b961      	cbnz	r1, 8007bc0 <xQueueGenericSendFromISR+0x40>
 8007ba6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007ba8:	b153      	cbz	r3, 8007bc0 <xQueueGenericSendFromISR+0x40>
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	b672      	cpsid	i
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	b662      	cpsie	i
 8007bbe:	e7fe      	b.n	8007bbe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bc0:	2f02      	cmp	r7, #2
 8007bc2:	d10d      	bne.n	8007be0 <xQueueGenericSendFromISR+0x60>
 8007bc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d00a      	beq.n	8007be0 <xQueueGenericSendFromISR+0x60>
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	b672      	cpsid	i
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	b662      	cpsie	i
 8007bde:	e7fe      	b.n	8007bde <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007be0:	f7ff fcf0 	bl	80075c4 <vPortValidateInterruptPriority>
	__asm volatile
 8007be4:	f3ef 8611 	mrs	r6, BASEPRI
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	b672      	cpsid	i
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bfc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007bfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d301      	bcc.n	8007c08 <xQueueGenericSendFromISR+0x88>
 8007c04:	2f02      	cmp	r7, #2
 8007c06:	d122      	bne.n	8007c4e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c08:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	4649      	mov	r1, r9
 8007c10:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c12:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c14:	f7ff fd13 	bl	800763e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007c18:	1c6b      	adds	r3, r5, #1
 8007c1a:	d113      	bne.n	8007c44 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c1e:	b90b      	cbnz	r3, 8007c24 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8007c20:	2001      	movs	r0, #1
 8007c22:	e00b      	b.n	8007c3c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c28:	f000 febe 	bl	80089a8 <xTaskRemoveFromEventList>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d0f7      	beq.n	8007c20 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8007c30:	f1b8 0f00 	cmp.w	r8, #0
 8007c34:	d0f4      	beq.n	8007c20 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c36:	2001      	movs	r0, #1
 8007c38:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007c3c:	f386 8811 	msr	BASEPRI, r6
}
 8007c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c44:	3501      	adds	r5, #1
 8007c46:	b26d      	sxtb	r5, r5
 8007c48:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007c4c:	e7e8      	b.n	8007c20 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e7f4      	b.n	8007c3c <xQueueGenericSendFromISR+0xbc>

08007c52 <xQueueGiveFromISR>:
{
 8007c52:	b570      	push	{r4, r5, r6, lr}
 8007c54:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007c56:	4604      	mov	r4, r0
 8007c58:	b950      	cbnz	r0, 8007c70 <xQueueGiveFromISR+0x1e>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	b672      	cpsid	i
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	b662      	cpsie	i
 8007c6e:	e7fe      	b.n	8007c6e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007c72:	b153      	cbz	r3, 8007c8a <xQueueGiveFromISR+0x38>
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	b672      	cpsid	i
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	b662      	cpsie	i
 8007c88:	e7fe      	b.n	8007c88 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007c8a:	6803      	ldr	r3, [r0, #0]
 8007c8c:	b963      	cbnz	r3, 8007ca8 <xQueueGiveFromISR+0x56>
 8007c8e:	6883      	ldr	r3, [r0, #8]
 8007c90:	b153      	cbz	r3, 8007ca8 <xQueueGiveFromISR+0x56>
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	b672      	cpsid	i
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	b662      	cpsie	i
 8007ca6:	e7fe      	b.n	8007ca6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ca8:	f7ff fc8c 	bl	80075c4 <vPortValidateInterruptPriority>
	__asm volatile
 8007cac:	f3ef 8611 	mrs	r6, BASEPRI
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	b672      	cpsid	i
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d91c      	bls.n	8007d06 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cd0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007cd2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cd4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cd6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007cd8:	d110      	bne.n	8007cfc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cdc:	b90b      	cbnz	r3, 8007ce2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8007cde:	2001      	movs	r0, #1
 8007ce0:	e009      	b.n	8007cf6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ce6:	f000 fe5f 	bl	80089a8 <xTaskRemoveFromEventList>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d0f7      	beq.n	8007cde <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007cee:	2d00      	cmp	r5, #0
 8007cf0:	d0f5      	beq.n	8007cde <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	6028      	str	r0, [r5, #0]
	__asm volatile
 8007cf6:	f386 8811 	msr	BASEPRI, r6
}
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b25b      	sxtb	r3, r3
 8007d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d04:	e7eb      	b.n	8007cde <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007d06:	2000      	movs	r0, #0
 8007d08:	e7f5      	b.n	8007cf6 <xQueueGiveFromISR+0xa4>

08007d0a <xQueueReceive>:
{
 8007d0a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007d0e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8007d10:	4604      	mov	r4, r0
{
 8007d12:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007d14:	b950      	cbnz	r0, 8007d2c <xQueueReceive+0x22>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	b672      	cpsid	i
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	b662      	cpsie	i
 8007d2a:	e7fe      	b.n	8007d2a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d2c:	b961      	cbnz	r1, 8007d48 <xQueueReceive+0x3e>
 8007d2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007d30:	b153      	cbz	r3, 8007d48 <xQueueReceive+0x3e>
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	b672      	cpsid	i
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	b662      	cpsie	i
 8007d46:	e7fe      	b.n	8007d46 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d48:	f000 fecc 	bl	8008ae4 <xTaskGetSchedulerState>
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	b960      	cbnz	r0, 8007d6a <xQueueReceive+0x60>
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	b15b      	cbz	r3, 8007d6c <xQueueReceive+0x62>
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	b672      	cpsid	i
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	b662      	cpsie	i
 8007d68:	e7fe      	b.n	8007d68 <xQueueReceive+0x5e>
 8007d6a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007d6c:	f04f 0800 	mov.w	r8, #0
 8007d70:	e03d      	b.n	8007dee <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d72:	9d01      	ldr	r5, [sp, #4]
 8007d74:	b91d      	cbnz	r5, 8007d7e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8007d76:	f7ff fb49 	bl	800740c <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e056      	b.n	8007e2c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8007d7e:	b916      	cbnz	r6, 8007d86 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d80:	a802      	add	r0, sp, #8
 8007d82:	f000 fe57 	bl	8008a34 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007d86:	f7ff fb41 	bl	800740c <vPortExitCritical>
		vTaskSuspendAll();
 8007d8a:	f000 fbdb 	bl	8008544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d8e:	f7ff fb19 	bl	80073c4 <vPortEnterCritical>
 8007d92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007d96:	2bff      	cmp	r3, #255	; 0xff
 8007d98:	d101      	bne.n	8007d9e <xQueueReceive+0x94>
 8007d9a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007d9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007da2:	2bff      	cmp	r3, #255	; 0xff
 8007da4:	d101      	bne.n	8007daa <xQueueReceive+0xa0>
 8007da6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8007daa:	f7ff fb2f 	bl	800740c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dae:	a901      	add	r1, sp, #4
 8007db0:	a802      	add	r0, sp, #8
 8007db2:	f000 fe4b 	bl	8008a4c <xTaskCheckForTimeOut>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d141      	bne.n	8007e3e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f7ff fc34 	bl	8007628 <prvIsQueueEmpty>
 8007dc0:	b3b8      	cbz	r0, 8007e32 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dc2:	9901      	ldr	r1, [sp, #4]
 8007dc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007dc8:	f000 fdb2 	bl	8008930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f7ff fc80 	bl	80076d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dd2:	f000 fc5d 	bl	8008690 <xTaskResumeAll>
 8007dd6:	b948      	cbnz	r0, 8007dec <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8007dd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007dee:	f7ff fae9 	bl	80073c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007df2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007df4:	2d00      	cmp	r5, #0
 8007df6:	d0bc      	beq.n	8007d72 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007df8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7ff fc53 	bl	80076a8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e02:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e04:	6923      	ldr	r3, [r4, #16]
 8007e06:	b173      	cbz	r3, 8007e26 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e08:	f104 0010 	add.w	r0, r4, #16
 8007e0c:	f000 fdcc 	bl	80089a8 <xTaskRemoveFromEventList>
 8007e10:	b148      	cbz	r0, 8007e26 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8007e12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007e26:	f7ff faf1 	bl	800740c <vPortExitCritical>
				return pdPASS;
 8007e2a:	2001      	movs	r0, #1
}
 8007e2c:	b004      	add	sp, #16
 8007e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7ff fc4d 	bl	80076d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e38:	f000 fc2a 	bl	8008690 <xTaskResumeAll>
 8007e3c:	e7d6      	b.n	8007dec <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7ff fc47 	bl	80076d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e44:	f000 fc24 	bl	8008690 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f7ff fbed 	bl	8007628 <prvIsQueueEmpty>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0cc      	beq.n	8007dec <xQueueReceive+0xe2>
 8007e52:	e792      	b.n	8007d7a <xQueueReceive+0x70>

08007e54 <xQueueSemaphoreTake>:
{
 8007e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e56:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007e58:	4604      	mov	r4, r0
{
 8007e5a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007e5c:	b950      	cbnz	r0, 8007e74 <xQueueSemaphoreTake+0x20>
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	b672      	cpsid	i
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	b662      	cpsie	i
 8007e72:	e7fe      	b.n	8007e72 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e74:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007e76:	b155      	cbz	r5, 8007e8e <xQueueSemaphoreTake+0x3a>
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	b672      	cpsid	i
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	b662      	cpsie	i
 8007e8c:	e7fe      	b.n	8007e8c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e8e:	f000 fe29 	bl	8008ae4 <xTaskGetSchedulerState>
 8007e92:	4606      	mov	r6, r0
 8007e94:	b960      	cbnz	r0, 8007eb0 <xQueueSemaphoreTake+0x5c>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	b16b      	cbz	r3, 8007eb6 <xQueueSemaphoreTake+0x62>
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	b672      	cpsid	i
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	b662      	cpsie	i
 8007eae:	e7fe      	b.n	8007eae <xQueueSemaphoreTake+0x5a>
 8007eb0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007eb2:	2700      	movs	r7, #0
 8007eb4:	e055      	b.n	8007f62 <xQueueSemaphoreTake+0x10e>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	e7fb      	b.n	8007eb2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	b973      	cbnz	r3, 8007edc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ebe:	b155      	cbz	r5, 8007ed6 <xQueueSemaphoreTake+0x82>
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	b672      	cpsid	i
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	b662      	cpsie	i
 8007ed4:	e7fe      	b.n	8007ed4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8007ed6:	f7ff fa99 	bl	800740c <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007eda:	e062      	b.n	8007fa2 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 8007edc:	b916      	cbnz	r6, 8007ee4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ede:	a802      	add	r0, sp, #8
 8007ee0:	f000 fda8 	bl	8008a34 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007ee4:	f7ff fa92 	bl	800740c <vPortExitCritical>
		vTaskSuspendAll();
 8007ee8:	f000 fb2c 	bl	8008544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eec:	f7ff fa6a 	bl	80073c4 <vPortEnterCritical>
 8007ef0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ef4:	2bff      	cmp	r3, #255	; 0xff
 8007ef6:	d101      	bne.n	8007efc <xQueueSemaphoreTake+0xa8>
 8007ef8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8007efc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007f00:	2bff      	cmp	r3, #255	; 0xff
 8007f02:	d101      	bne.n	8007f08 <xQueueSemaphoreTake+0xb4>
 8007f04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f08:	f7ff fa80 	bl	800740c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f0c:	a901      	add	r1, sp, #4
 8007f0e:	a802      	add	r0, sp, #8
 8007f10:	f000 fd9c 	bl	8008a4c <xTaskCheckForTimeOut>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d14d      	bne.n	8007fb4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff fb85 	bl	8007628 <prvIsQueueEmpty>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d042      	beq.n	8007fa8 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	b93b      	cbnz	r3, 8007f36 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8007f26:	f7ff fa4d 	bl	80073c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f2a:	68a0      	ldr	r0, [r4, #8]
 8007f2c:	f000 fdea 	bl	8008b04 <xTaskPriorityInherit>
 8007f30:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007f32:	f7ff fa6b 	bl	800740c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f36:	9901      	ldr	r1, [sp, #4]
 8007f38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f3c:	f000 fcf8 	bl	8008930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7ff fbc6 	bl	80076d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f46:	f000 fba3 	bl	8008690 <xTaskResumeAll>
 8007f4a:	b948      	cbnz	r0, 8007f60 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8007f4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007f62:	f7ff fa2f 	bl	80073c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0a6      	beq.n	8007eba <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	b913      	cbnz	r3, 8007f7a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007f74:	f000 fea4 	bl	8008cc0 <pvTaskIncrementMutexHeldCount>
 8007f78:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	b173      	cbz	r3, 8007f9c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f7e:	f104 0010 	add.w	r0, r4, #16
 8007f82:	f000 fd11 	bl	80089a8 <xTaskRemoveFromEventList>
 8007f86:	b148      	cbz	r0, 8007f9c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8007f88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8007f9c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8007f9e:	f7ff fa35 	bl	800740c <vPortExitCritical>
}
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	b005      	add	sp, #20
 8007fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7ff fb92 	bl	80076d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fae:	f000 fb6f 	bl	8008690 <xTaskResumeAll>
 8007fb2:	e7d5      	b.n	8007f60 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7ff fb8c 	bl	80076d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fba:	f000 fb69 	bl	8008690 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7ff fb32 	bl	8007628 <prvIsQueueEmpty>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d0cb      	beq.n	8007f60 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	d0ea      	beq.n	8007fa2 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 8007fcc:	f7ff f9fa 	bl	80073c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007fd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fd2:	b119      	cbz	r1, 8007fdc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007fd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007fd6:	6819      	ldr	r1, [r3, #0]
 8007fd8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fdc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8007fde:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fe0:	f000 fe18 	bl	8008c14 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007fe4:	f7ff fa12 	bl	800740c <vPortExitCritical>
 8007fe8:	e7db      	b.n	8007fa2 <xQueueSemaphoreTake+0x14e>

08007fea <xQueueTakeMutexRecursive>:
	{
 8007fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8007fec:	4604      	mov	r4, r0
 8007fee:	b950      	cbnz	r0, 8008006 <xQueueTakeMutexRecursive+0x1c>
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	b672      	cpsid	i
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	b662      	cpsie	i
 8008004:	e7fe      	b.n	8008004 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008006:	6885      	ldr	r5, [r0, #8]
 8008008:	9101      	str	r1, [sp, #4]
 800800a:	f000 fd65 	bl	8008ad8 <xTaskGetCurrentTaskHandle>
 800800e:	4285      	cmp	r5, r0
 8008010:	9901      	ldr	r1, [sp, #4]
 8008012:	d105      	bne.n	8008020 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008014:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8008016:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008018:	3301      	adds	r3, #1
 800801a:	60e3      	str	r3, [r4, #12]
	}
 800801c:	b003      	add	sp, #12
 800801e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008020:	4620      	mov	r0, r4
 8008022:	f7ff ff17 	bl	8007e54 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8008026:	2800      	cmp	r0, #0
 8008028:	d0f8      	beq.n	800801c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800802a:	68e3      	ldr	r3, [r4, #12]
 800802c:	3301      	adds	r3, #1
 800802e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8008030:	e7f4      	b.n	800801c <xQueueTakeMutexRecursive+0x32>

08008032 <xQueueReceiveFromISR>:
{
 8008032:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008036:	4689      	mov	r9, r1
 8008038:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800803a:	4605      	mov	r5, r0
 800803c:	b950      	cbnz	r0, 8008054 <xQueueReceiveFromISR+0x22>
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	b672      	cpsid	i
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	b662      	cpsie	i
 8008052:	e7fe      	b.n	8008052 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008054:	b961      	cbnz	r1, 8008070 <xQueueReceiveFromISR+0x3e>
 8008056:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008058:	b153      	cbz	r3, 8008070 <xQueueReceiveFromISR+0x3e>
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	b672      	cpsid	i
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	b662      	cpsie	i
 800806e:	e7fe      	b.n	800806e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008070:	f7ff faa8 	bl	80075c4 <vPortValidateInterruptPriority>
	__asm volatile
 8008074:	f3ef 8711 	mrs	r7, BASEPRI
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	b672      	cpsid	i
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800808c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800808e:	b31c      	cbz	r4, 80080d8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008090:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008094:	4649      	mov	r1, r9
 8008096:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008098:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800809a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800809c:	f7ff fb04 	bl	80076a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080a0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80080a2:	1c73      	adds	r3, r6, #1
 80080a4:	d113      	bne.n	80080ce <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a6:	692b      	ldr	r3, [r5, #16]
 80080a8:	b90b      	cbnz	r3, 80080ae <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 80080aa:	2001      	movs	r0, #1
 80080ac:	e00b      	b.n	80080c6 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ae:	f105 0010 	add.w	r0, r5, #16
 80080b2:	f000 fc79 	bl	80089a8 <xTaskRemoveFromEventList>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d0f7      	beq.n	80080aa <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 80080ba:	f1b8 0f00 	cmp.w	r8, #0
 80080be:	d0f4      	beq.n	80080aa <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080c0:	2001      	movs	r0, #1
 80080c2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80080c6:	f387 8811 	msr	BASEPRI, r7
}
 80080ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080ce:	3601      	adds	r6, #1
 80080d0:	b276      	sxtb	r6, r6
 80080d2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80080d6:	e7e8      	b.n	80080aa <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 80080d8:	4620      	mov	r0, r4
 80080da:	e7f4      	b.n	80080c6 <xQueueReceiveFromISR+0x94>

080080dc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080dc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080de:	4a07      	ldr	r2, [pc, #28]	; (80080fc <vQueueAddToRegistry+0x20>)
	{
 80080e0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080e2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80080e6:	b92c      	cbnz	r4, 80080f4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80080f0:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080f2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f4:	3301      	adds	r3, #1
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d1f3      	bne.n	80080e2 <vQueueAddToRegistry+0x6>
 80080fa:	e7fa      	b.n	80080f2 <vQueueAddToRegistry+0x16>
 80080fc:	200149c4 	.word	0x200149c4

08008100 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008100:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008102:	4a08      	ldr	r2, [pc, #32]	; (8008124 <vQueueUnregisterQueue+0x24>)
	{
 8008104:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008106:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800810a:	684c      	ldr	r4, [r1, #4]
 800810c:	4284      	cmp	r4, r0
 800810e:	d104      	bne.n	800811a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008110:	2000      	movs	r0, #0
 8008112:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008116:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008118:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800811a:	3301      	adds	r3, #1
 800811c:	2b08      	cmp	r3, #8
 800811e:	d1f2      	bne.n	8008106 <vQueueUnregisterQueue+0x6>
 8008120:	e7fa      	b.n	8008118 <vQueueUnregisterQueue+0x18>
 8008122:	bf00      	nop
 8008124:	200149c4 	.word	0x200149c4

08008128 <vQueueDelete>:
{
 8008128:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800812a:	4604      	mov	r4, r0
 800812c:	b950      	cbnz	r0, 8008144 <vQueueDelete+0x1c>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	b672      	cpsid	i
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	b662      	cpsie	i
 8008142:	e7fe      	b.n	8008142 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8008144:	f7ff ffdc 	bl	8008100 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008148:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800814c:	b923      	cbnz	r3, 8008158 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800814e:	4620      	mov	r0, r4
}
 8008150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008154:	f7ff b850 	b.w	80071f8 <vPortFree>
}
 8008158:	bd10      	pop	{r4, pc}

0800815a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800815a:	b570      	push	{r4, r5, r6, lr}
 800815c:	4604      	mov	r4, r0
 800815e:	460d      	mov	r5, r1
 8008160:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008162:	f7ff f92f 	bl	80073c4 <vPortEnterCritical>
 8008166:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800816a:	2bff      	cmp	r3, #255	; 0xff
 800816c:	d102      	bne.n	8008174 <vQueueWaitForMessageRestricted+0x1a>
 800816e:	2300      	movs	r3, #0
 8008170:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008174:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008178:	2bff      	cmp	r3, #255	; 0xff
 800817a:	d102      	bne.n	8008182 <vQueueWaitForMessageRestricted+0x28>
 800817c:	2300      	movs	r3, #0
 800817e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008182:	f7ff f943 	bl	800740c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008188:	b92b      	cbnz	r3, 8008196 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800818a:	4632      	mov	r2, r6
 800818c:	4629      	mov	r1, r5
 800818e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008192:	f000 fbe9 	bl	8008968 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008196:	4620      	mov	r0, r4
	}
 8008198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800819c:	f7ff ba99 	b.w	80076d2 <prvUnlockQueue>

080081a0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081a6:	f7ff f90d 	bl	80073c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081aa:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80081ac:	4e2f      	ldr	r6, [pc, #188]	; (800826c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4f2f      	ldr	r7, [pc, #188]	; (8008270 <prvAddNewTaskToReadyList+0xd0>)
 80081b2:	3201      	adds	r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80081b6:	6835      	ldr	r5, [r6, #0]
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	d14a      	bne.n	8008252 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081bc:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d11f      	bne.n	8008204 <prvAddNewTaskToReadyList+0x64>
 80081c4:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c6:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081c8:	4640      	mov	r0, r8
 80081ca:	f7ff f851 	bl	8007270 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ce:	f108 0814 	add.w	r8, r8, #20
 80081d2:	2d38      	cmp	r5, #56	; 0x38
 80081d4:	d1f7      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081d6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008298 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80081da:	4d26      	ldr	r5, [pc, #152]	; (8008274 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80081dc:	4640      	mov	r0, r8
 80081de:	f7ff f847 	bl	8007270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081e2:	4628      	mov	r0, r5
 80081e4:	f7ff f844 	bl	8007270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081e8:	4823      	ldr	r0, [pc, #140]	; (8008278 <prvAddNewTaskToReadyList+0xd8>)
 80081ea:	f7ff f841 	bl	8007270 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081ee:	4823      	ldr	r0, [pc, #140]	; (800827c <prvAddNewTaskToReadyList+0xdc>)
 80081f0:	f7ff f83e 	bl	8007270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081f4:	4822      	ldr	r0, [pc, #136]	; (8008280 <prvAddNewTaskToReadyList+0xe0>)
 80081f6:	f7ff f83b 	bl	8007270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081fa:	4b22      	ldr	r3, [pc, #136]	; (8008284 <prvAddNewTaskToReadyList+0xe4>)
 80081fc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008200:	4b21      	ldr	r3, [pc, #132]	; (8008288 <prvAddNewTaskToReadyList+0xe8>)
 8008202:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008204:	4a21      	ldr	r2, [pc, #132]	; (800828c <prvAddNewTaskToReadyList+0xec>)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800820c:	4a20      	ldr	r2, [pc, #128]	; (8008290 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800820e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008214:	428b      	cmp	r3, r1
 8008216:	d900      	bls.n	800821a <prvAddNewTaskToReadyList+0x7a>
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	2014      	movs	r0, #20
 800821c:	1d21      	adds	r1, r4, #4
 800821e:	fb00 7003 	mla	r0, r0, r3, r7
 8008222:	f7ff f833 	bl	800728c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008226:	f7ff f8f1 	bl	800740c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <prvAddNewTaskToReadyList+0xf4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	b173      	cbz	r3, 800824e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008230:	6833      	ldr	r3, [r6, #0]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008236:	429a      	cmp	r2, r3
 8008238:	d209      	bcs.n	800824e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800823a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800823e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008242:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
}
 800824e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <prvAddNewTaskToReadyList+0xf4>)
 8008254:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008258:	2a00      	cmp	r2, #0
 800825a:	d1d3      	bne.n	8008204 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800825c:	6832      	ldr	r2, [r6, #0]
 800825e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008260:	429a      	cmp	r2, r3
 8008262:	d8cf      	bhi.n	8008204 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008264:	6034      	str	r4, [r6, #0]
 8008266:	e7cd      	b.n	8008204 <prvAddNewTaskToReadyList+0x64>
 8008268:	20014e70 	.word	0x20014e70
 800826c:	20014a04 	.word	0x20014a04
 8008270:	20014a10 	.word	0x20014a10
 8008274:	20014e9c 	.word	0x20014e9c
 8008278:	20014eb8 	.word	0x20014eb8
 800827c:	20014ee4 	.word	0x20014ee4
 8008280:	20014ed0 	.word	0x20014ed0
 8008284:	20014a08 	.word	0x20014a08
 8008288:	20014a0c 	.word	0x20014a0c
 800828c:	20014e80 	.word	0x20014e80
 8008290:	20014e84 	.word	0x20014e84
 8008294:	20014ecc 	.word	0x20014ecc
 8008298:	20014e88 	.word	0x20014e88

0800829c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800829e:	4b15      	ldr	r3, [pc, #84]	; (80082f4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 80082a0:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a2:	4d15      	ldr	r5, [pc, #84]	; (80082f8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80082a4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80082a6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a8:	6828      	ldr	r0, [r5, #0]
 80082aa:	3004      	adds	r0, #4
 80082ac:	f7ff f811 	bl	80072d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082b0:	1c73      	adds	r3, r6, #1
 80082b2:	d107      	bne.n	80082c4 <prvAddCurrentTaskToDelayedList+0x28>
 80082b4:	b137      	cbz	r7, 80082c4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b6:	6829      	ldr	r1, [r5, #0]
 80082b8:	4810      	ldr	r0, [pc, #64]	; (80082fc <prvAddCurrentTaskToDelayedList+0x60>)
 80082ba:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c0:	f7fe bfe4 	b.w	800728c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082c4:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082c6:	682b      	ldr	r3, [r5, #0]
 80082c8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ca:	d307      	bcc.n	80082dc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <prvAddCurrentTaskToDelayedList+0x64>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	6829      	ldr	r1, [r5, #0]
}
 80082d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d6:	3104      	adds	r1, #4
 80082d8:	f7fe bfe4 	b.w	80072a4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <prvAddCurrentTaskToDelayedList+0x68>)
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	6829      	ldr	r1, [r5, #0]
 80082e2:	3104      	adds	r1, #4
 80082e4:	f7fe ffde 	bl	80072a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082e8:	4b07      	ldr	r3, [pc, #28]	; (8008308 <prvAddCurrentTaskToDelayedList+0x6c>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	42a2      	cmp	r2, r4
 80082ee:	d900      	bls.n	80082f2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80082f0:	601c      	str	r4, [r3, #0]
}
 80082f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f4:	20014ef8 	.word	0x20014ef8
 80082f8:	20014a04 	.word	0x20014a04
 80082fc:	20014ed0 	.word	0x20014ed0
 8008300:	20014a0c 	.word	0x20014a0c
 8008304:	20014a08 	.word	0x20014a08
 8008308:	20014eb0 	.word	0x20014eb0

0800830c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800830c:	4a06      	ldr	r2, [pc, #24]	; (8008328 <prvResetNextTaskUnblockTime+0x1c>)
 800830e:	6813      	ldr	r3, [r2, #0]
 8008310:	6819      	ldr	r1, [r3, #0]
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <prvResetNextTaskUnblockTime+0x20>)
 8008314:	b919      	cbnz	r1, 800831e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800831a:	601a      	str	r2, [r3, #0]
}
 800831c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800831e:	6812      	ldr	r2, [r2, #0]
 8008320:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008322:	68d2      	ldr	r2, [r2, #12]
 8008324:	6852      	ldr	r2, [r2, #4]
 8008326:	e7f8      	b.n	800831a <prvResetNextTaskUnblockTime+0xe>
 8008328:	20014a08 	.word	0x20014a08
 800832c:	20014eb0 	.word	0x20014eb0

08008330 <prvDeleteTCB>:
	{
 8008330:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008332:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008336:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008338:	b93b      	cbnz	r3, 800834a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800833a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800833c:	f7fe ff5c 	bl	80071f8 <vPortFree>
				vPortFree( pxTCB );
 8008340:	4620      	mov	r0, r4
	}
 8008342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008346:	f7fe bf57 	b.w	80071f8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800834a:	2b01      	cmp	r3, #1
 800834c:	d0f9      	beq.n	8008342 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800834e:	2b02      	cmp	r3, #2
 8008350:	d00a      	beq.n	8008368 <prvDeleteTCB+0x38>
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	b672      	cpsid	i
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	b662      	cpsie	i
 8008366:	e7fe      	b.n	8008366 <prvDeleteTCB+0x36>
	}
 8008368:	bd10      	pop	{r4, pc}
	...

0800836c <prvIdleTask>:
{
 800836c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800836e:	4c14      	ldr	r4, [pc, #80]	; (80083c0 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008370:	4f14      	ldr	r7, [pc, #80]	; (80083c4 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8008372:	4d15      	ldr	r5, [pc, #84]	; (80083c8 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	b983      	cbnz	r3, 800839a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008378:	4b14      	ldr	r3, [pc, #80]	; (80083cc <prvIdleTask+0x60>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d909      	bls.n	8008394 <prvIdleTask+0x28>
				taskYIELD();
 8008380:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008388:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8008394:	f7f8 fd28 	bl	8000de8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008398:	e7eb      	b.n	8008372 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800839a:	f7ff f813 	bl	80073c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083a2:	1d30      	adds	r0, r6, #4
 80083a4:	f7fe ff95 	bl	80072d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80083b4:	f7ff f82a 	bl	800740c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ffb9 	bl	8008330 <prvDeleteTCB>
 80083be:	e7d9      	b.n	8008374 <prvIdleTask+0x8>
 80083c0:	20014e74 	.word	0x20014e74
 80083c4:	20014ee4 	.word	0x20014ee4
 80083c8:	20014e70 	.word	0x20014e70
 80083cc:	20014a10 	.word	0x20014a10

080083d0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083d4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083d8:	4606      	mov	r6, r0
 80083da:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083dc:	21a5      	movs	r1, #165	; 0xa5
 80083de:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083e0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083e2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083e6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80083ec:	f021 fbd4 	bl	8029b98 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083f2:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083f4:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 80083f8:	b3b5      	cbz	r5, 8008468 <prvInitialiseNewTask.constprop.0+0x98>
 80083fa:	1e6b      	subs	r3, r5, #1
 80083fc:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8008400:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008402:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008406:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800840a:	b109      	cbz	r1, 8008410 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800840c:	42ab      	cmp	r3, r5
 800840e:	d1f8      	bne.n	8008402 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008410:	2300      	movs	r3, #0
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008416:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008418:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800841c:	1d20      	adds	r0, r4, #4
 800841e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008420:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008424:	bf28      	it	cs
 8008426:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008428:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800842a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008430:	f7fe ff29 	bl	8007286 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008434:	f104 0018 	add.w	r0, r4, #24
 8008438:	f7fe ff25 	bl	8007286 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800843c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008440:	463a      	mov	r2, r7
 8008442:	4631      	mov	r1, r6
 8008444:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008446:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008448:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800844a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800844c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008450:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008454:	f7fe ff90 	bl	8007378 <pxPortInitialiseStack>
 8008458:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800845a:	f1b8 0f00 	cmp.w	r8, #0
 800845e:	d001      	beq.n	8008464 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008460:	f8c8 4000 	str.w	r4, [r8]
}
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008468:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800846c:	e7d3      	b.n	8008416 <prvInitialiseNewTask.constprop.0+0x46>

0800846e <xTaskCreateStatic>:
	{
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	b086      	sub	sp, #24
 8008472:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008476:	b955      	cbnz	r5, 800848e <xTaskCreateStatic+0x20>
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	b672      	cpsid	i
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	b662      	cpsie	i
 800848c:	e7fe      	b.n	800848c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800848e:	b954      	cbnz	r4, 80084a6 <xTaskCreateStatic+0x38>
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	b672      	cpsid	i
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	e7fe      	b.n	80084a4 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 80084a6:	2660      	movs	r6, #96	; 0x60
 80084a8:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084aa:	9e05      	ldr	r6, [sp, #20]
 80084ac:	2e60      	cmp	r6, #96	; 0x60
 80084ae:	d00a      	beq.n	80084c6 <xTaskCreateStatic+0x58>
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	b672      	cpsid	i
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	b662      	cpsie	i
 80084c4:	e7fe      	b.n	80084c4 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084c6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084c8:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084ca:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084cc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084d0:	ad04      	add	r5, sp, #16
 80084d2:	9402      	str	r4, [sp, #8]
 80084d4:	9501      	str	r5, [sp, #4]
 80084d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084d8:	9500      	str	r5, [sp, #0]
 80084da:	f7ff ff79 	bl	80083d0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084de:	4620      	mov	r0, r4
 80084e0:	f7ff fe5e 	bl	80081a0 <prvAddNewTaskToReadyList>
	}
 80084e4:	9804      	ldr	r0, [sp, #16]
 80084e6:	b006      	add	sp, #24
 80084e8:	bd70      	pop	{r4, r5, r6, pc}

080084ea <xTaskCreate>:
	{
 80084ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084ee:	4607      	mov	r7, r0
 80084f0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084f2:	0090      	lsls	r0, r2, #2
	{
 80084f4:	4688      	mov	r8, r1
 80084f6:	4616      	mov	r6, r2
 80084f8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084fa:	f7fe fde7 	bl	80070cc <pvPortMalloc>
			if( pxStack != NULL )
 80084fe:	4605      	mov	r5, r0
 8008500:	b1e8      	cbz	r0, 800853e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008502:	2060      	movs	r0, #96	; 0x60
 8008504:	f7fe fde2 	bl	80070cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008508:	4604      	mov	r4, r0
 800850a:	b1a8      	cbz	r0, 8008538 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800850c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800850e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008510:	4632      	mov	r2, r6
 8008512:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008514:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800851a:	9002      	str	r0, [sp, #8]
 800851c:	4638      	mov	r0, r7
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	464b      	mov	r3, r9
 8008526:	f7ff ff53 	bl	80083d0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800852a:	4620      	mov	r0, r4
 800852c:	f7ff fe38 	bl	80081a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008530:	2001      	movs	r0, #1
	}
 8008532:	b005      	add	sp, #20
 8008534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008538:	4628      	mov	r0, r5
 800853a:	f7fe fe5d 	bl	80071f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800853e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008542:	e7f6      	b.n	8008532 <xTaskCreate+0x48>

08008544 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008544:	4a02      	ldr	r2, [pc, #8]	; (8008550 <vTaskSuspendAll+0xc>)
 8008546:	6813      	ldr	r3, [r2, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	6013      	str	r3, [r2, #0]
}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20014e7c 	.word	0x20014e7c

08008554 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008554:	4b01      	ldr	r3, [pc, #4]	; (800855c <xTaskGetTickCount+0x8>)
 8008556:	6818      	ldr	r0, [r3, #0]
}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20014ef8 	.word	0x20014ef8

08008560 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008560:	4b40      	ldr	r3, [pc, #256]	; (8008664 <xTaskIncrementTick+0x104>)
 8008562:	681b      	ldr	r3, [r3, #0]
{
 8008564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008568:	2b00      	cmp	r3, #0
 800856a:	d174      	bne.n	8008656 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800856c:	4b3e      	ldr	r3, [pc, #248]	; (8008668 <xTaskIncrementTick+0x108>)
 800856e:	681d      	ldr	r5, [r3, #0]
 8008570:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008572:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008574:	b9cd      	cbnz	r5, 80085aa <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008576:	4b3d      	ldr	r3, [pc, #244]	; (800866c <xTaskIncrementTick+0x10c>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	b152      	cbz	r2, 8008594 <xTaskIncrementTick+0x34>
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	b672      	cpsid	i
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	b662      	cpsie	i
 8008592:	e7fe      	b.n	8008592 <xTaskIncrementTick+0x32>
 8008594:	4a36      	ldr	r2, [pc, #216]	; (8008670 <xTaskIncrementTick+0x110>)
 8008596:	6819      	ldr	r1, [r3, #0]
 8008598:	6810      	ldr	r0, [r2, #0]
 800859a:	6018      	str	r0, [r3, #0]
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	4a35      	ldr	r2, [pc, #212]	; (8008674 <xTaskIncrementTick+0x114>)
 80085a0:	6813      	ldr	r3, [r2, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	f7ff feb1 	bl	800830c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085aa:	4e33      	ldr	r6, [pc, #204]	; (8008678 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80085ac:	2400      	movs	r4, #0
 80085ae:	4f33      	ldr	r7, [pc, #204]	; (800867c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085b0:	6833      	ldr	r3, [r6, #0]
 80085b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008688 <xTaskIncrementTick+0x128>
 80085b6:	42ab      	cmp	r3, r5
 80085b8:	d911      	bls.n	80085de <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085ba:	f8d8 3000 	ldr.w	r3, [r8]
 80085be:	2214      	movs	r2, #20
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	4353      	muls	r3, r2
 80085c4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	bf28      	it	cs
 80085ca:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 80085cc:	4b2c      	ldr	r3, [pc, #176]	; (8008680 <xTaskIncrementTick+0x120>)
 80085ce:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80085d0:	2b00      	cmp	r3, #0
}
 80085d2:	bf0c      	ite	eq
 80085d4:	4620      	moveq	r0, r4
 80085d6:	2001      	movne	r0, #1
 80085d8:	b003      	add	sp, #12
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085de:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800866c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80085e2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800868c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085e6:	f8d9 3000 	ldr.w	r3, [r9]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	b91b      	cbnz	r3, 80085f6 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	6033      	str	r3, [r6, #0]
					break;
 80085f4:	e7e1      	b.n	80085ba <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f6:	f8d9 3000 	ldr.w	r3, [r9]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008600:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008604:	4295      	cmp	r5, r2
 8008606:	d201      	bcs.n	800860c <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008608:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800860a:	e7d6      	b.n	80085ba <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800860c:	f10b 0104 	add.w	r1, fp, #4
 8008610:	4608      	mov	r0, r1
 8008612:	9101      	str	r1, [sp, #4]
 8008614:	f7fe fe5d 	bl	80072d2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008618:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800861c:	9901      	ldr	r1, [sp, #4]
 800861e:	b122      	cbz	r2, 800862a <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008620:	f10b 0018 	add.w	r0, fp, #24
 8008624:	f7fe fe55 	bl	80072d2 <uxListRemove>
 8008628:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800862a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800862e:	f8da 2000 	ldr.w	r2, [sl]
 8008632:	4290      	cmp	r0, r2
 8008634:	d901      	bls.n	800863a <xTaskIncrementTick+0xda>
 8008636:	f8ca 0000 	str.w	r0, [sl]
 800863a:	2314      	movs	r3, #20
 800863c:	fb03 7000 	mla	r0, r3, r0, r7
 8008640:	f7fe fe24 	bl	800728c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008644:	f8d8 1000 	ldr.w	r1, [r8]
 8008648:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800864c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800864e:	429a      	cmp	r2, r3
 8008650:	bf28      	it	cs
 8008652:	2401      	movcs	r4, #1
 8008654:	e7c7      	b.n	80085e6 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8008656:	4a0b      	ldr	r2, [pc, #44]	; (8008684 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8008658:	2400      	movs	r4, #0
		++uxPendedTicks;
 800865a:	6813      	ldr	r3, [r2, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	e7b4      	b.n	80085cc <xTaskIncrementTick+0x6c>
 8008662:	bf00      	nop
 8008664:	20014e7c 	.word	0x20014e7c
 8008668:	20014ef8 	.word	0x20014ef8
 800866c:	20014a08 	.word	0x20014a08
 8008670:	20014a0c 	.word	0x20014a0c
 8008674:	20014eb4 	.word	0x20014eb4
 8008678:	20014eb0 	.word	0x20014eb0
 800867c:	20014a10 	.word	0x20014a10
 8008680:	20014efc 	.word	0x20014efc
 8008684:	20014e78 	.word	0x20014e78
 8008688:	20014a04 	.word	0x20014a04
 800868c:	20014e84 	.word	0x20014e84

08008690 <xTaskResumeAll>:
{
 8008690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8008692:	4c32      	ldr	r4, [pc, #200]	; (800875c <xTaskResumeAll+0xcc>)
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	b953      	cbnz	r3, 80086ae <xTaskResumeAll+0x1e>
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	e7fe      	b.n	80086ac <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 80086ae:	f7fe fe89 	bl	80073c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086b8:	6824      	ldr	r4, [r4, #0]
 80086ba:	b12c      	cbz	r4, 80086c8 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 80086bc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80086be:	f7fe fea5 	bl	800740c <vPortExitCritical>
}
 80086c2:	4620      	mov	r0, r4
 80086c4:	b003      	add	sp, #12
 80086c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086c8:	4b25      	ldr	r3, [pc, #148]	; (8008760 <xTaskResumeAll+0xd0>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0f5      	beq.n	80086bc <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086d0:	4d24      	ldr	r5, [pc, #144]	; (8008764 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80086d2:	4e25      	ldr	r6, [pc, #148]	; (8008768 <xTaskResumeAll+0xd8>)
 80086d4:	4f25      	ldr	r7, [pc, #148]	; (800876c <xTaskResumeAll+0xdc>)
 80086d6:	e01e      	b.n	8008716 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d8:	68eb      	ldr	r3, [r5, #12]
 80086da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086dc:	f104 0018 	add.w	r0, r4, #24
 80086e0:	f7fe fdf7 	bl	80072d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e4:	1d21      	adds	r1, r4, #4
 80086e6:	4608      	mov	r0, r1
 80086e8:	9101      	str	r1, [sp, #4]
 80086ea:	f7fe fdf2 	bl	80072d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086f0:	6832      	ldr	r2, [r6, #0]
 80086f2:	9901      	ldr	r1, [sp, #4]
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d900      	bls.n	80086fa <xTaskResumeAll+0x6a>
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	2014      	movs	r0, #20
 80086fc:	fb00 7003 	mla	r0, r0, r3, r7
 8008700:	f7fe fdc4 	bl	800728c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008704:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <xTaskResumeAll+0xe0>)
 8008706:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	429a      	cmp	r2, r3
 800870e:	d302      	bcc.n	8008716 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 8008710:	4b18      	ldr	r3, [pc, #96]	; (8008774 <xTaskResumeAll+0xe4>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008716:	682b      	ldr	r3, [r5, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1dd      	bne.n	80086d8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800871c:	b10c      	cbz	r4, 8008722 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800871e:	f7ff fdf5 	bl	800830c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008722:	4d15      	ldr	r5, [pc, #84]	; (8008778 <xTaskResumeAll+0xe8>)
 8008724:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008726:	b144      	cbz	r4, 800873a <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 8008728:	4e12      	ldr	r6, [pc, #72]	; (8008774 <xTaskResumeAll+0xe4>)
 800872a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800872c:	f7ff ff18 	bl	8008560 <xTaskIncrementTick>
 8008730:	b100      	cbz	r0, 8008734 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8008732:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008734:	3c01      	subs	r4, #1
 8008736:	d1f9      	bne.n	800872c <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8008738:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800873a:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <xTaskResumeAll+0xe4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0bc      	beq.n	80086bc <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 8008742:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008756:	2401      	movs	r4, #1
 8008758:	e7b1      	b.n	80086be <xTaskResumeAll+0x2e>
 800875a:	bf00      	nop
 800875c:	20014e7c 	.word	0x20014e7c
 8008760:	20014e70 	.word	0x20014e70
 8008764:	20014eb8 	.word	0x20014eb8
 8008768:	20014e84 	.word	0x20014e84
 800876c:	20014a10 	.word	0x20014a10
 8008770:	20014a04 	.word	0x20014a04
 8008774:	20014efc 	.word	0x20014efc
 8008778:	20014e78 	.word	0x20014e78

0800877c <vTaskDelay>:
	{
 800877c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800877e:	b950      	cbnz	r0, 8008796 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008780:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008788:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	f3bf 8f6f 	isb	sy
	}
 8008794:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <vTaskDelay+0x48>)
 8008798:	6819      	ldr	r1, [r3, #0]
 800879a:	b151      	cbz	r1, 80087b2 <vTaskDelay+0x36>
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	e7fe      	b.n	80087b0 <vTaskDelay+0x34>
			vTaskSuspendAll();
 80087b2:	f7ff fec7 	bl	8008544 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087b6:	f7ff fd71 	bl	800829c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80087ba:	f7ff ff69 	bl	8008690 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0de      	beq.n	8008780 <vTaskDelay+0x4>
 80087c2:	e7e7      	b.n	8008794 <vTaskDelay+0x18>
 80087c4:	20014e7c 	.word	0x20014e7c

080087c8 <vTaskSetApplicationTaskTag>:
	{
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	460d      	mov	r5, r1
		if( xTask == NULL )
 80087cc:	4604      	mov	r4, r0
 80087ce:	b908      	cbnz	r0, 80087d4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <vTaskSetApplicationTaskTag+0x1c>)
 80087d2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 80087d4:	f7fe fdf6 	bl	80073c4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80087d8:	6565      	str	r5, [r4, #84]	; 0x54
	}
 80087da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 80087de:	f7fe be15 	b.w	800740c <vPortExitCritical>
 80087e2:	bf00      	nop
 80087e4:	20014a04 	.word	0x20014a04

080087e8 <xTaskCallApplicationTaskHook>:
	{
 80087e8:	4603      	mov	r3, r0
 80087ea:	4608      	mov	r0, r1
		if( xTask == NULL )
 80087ec:	b90b      	cbnz	r3, 80087f2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 80087ee:	4b03      	ldr	r3, [pc, #12]	; (80087fc <xTaskCallApplicationTaskHook+0x14>)
 80087f0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 80087f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f4:	b103      	cbz	r3, 80087f8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 80087f6:	4718      	bx	r3
	}
 80087f8:	4618      	mov	r0, r3
 80087fa:	4770      	bx	lr
 80087fc:	20014a04 	.word	0x20014a04

08008800 <vTaskStartScheduler>:
{
 8008800:	b510      	push	{r4, lr}
 8008802:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008804:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008806:	aa07      	add	r2, sp, #28
 8008808:	a906      	add	r1, sp, #24
 800880a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800880c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008810:	f7fe fc1e 	bl	8007050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008814:	9b05      	ldr	r3, [sp, #20]
 8008816:	9a07      	ldr	r2, [sp, #28]
 8008818:	9302      	str	r3, [sp, #8]
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	491b      	ldr	r1, [pc, #108]	; (800888c <vTaskStartScheduler+0x8c>)
 800881e:	481c      	ldr	r0, [pc, #112]	; (8008890 <vTaskStartScheduler+0x90>)
 8008820:	e9cd 4300 	strd	r4, r3, [sp]
 8008824:	4623      	mov	r3, r4
 8008826:	f7ff fe22 	bl	800846e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800882a:	b360      	cbz	r0, 8008886 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800882c:	f000 faa6 	bl	8008d7c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008830:	2801      	cmp	r0, #1
 8008832:	d11b      	bne.n	800886c <vTaskStartScheduler+0x6c>
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	b672      	cpsid	i
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8008848:	f04f 32ff 	mov.w	r2, #4294967295
 800884c:	4b11      	ldr	r3, [pc, #68]	; (8008894 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 800884e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8008850:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008852:	4b11      	ldr	r3, [pc, #68]	; (8008898 <vTaskStartScheduler+0x98>)
 8008854:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008856:	4b11      	ldr	r3, [pc, #68]	; (800889c <vTaskStartScheduler+0x9c>)
 8008858:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <vTaskStartScheduler+0xa0>)
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f7ff ffc3 	bl	80087e8 <xTaskCallApplicationTaskHook>
}
 8008862:	b008      	add	sp, #32
 8008864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008868:	f7fe be46 	b.w	80074f8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800886c:	3001      	adds	r0, #1
 800886e:	d10a      	bne.n	8008886 <vTaskStartScheduler+0x86>
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	e7fe      	b.n	8008884 <vTaskStartScheduler+0x84>
}
 8008886:	b008      	add	sp, #32
 8008888:	bd10      	pop	{r4, pc}
 800888a:	bf00      	nop
 800888c:	0802caff 	.word	0x0802caff
 8008890:	0800836d 	.word	0x0800836d
 8008894:	20014eb0 	.word	0x20014eb0
 8008898:	20014ecc 	.word	0x20014ecc
 800889c:	20014ef8 	.word	0x20014ef8
 80088a0:	20014a04 	.word	0x20014a04

080088a4 <vTaskSwitchContext>:
{
 80088a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088a6:	4b1d      	ldr	r3, [pc, #116]	; (800891c <vTaskSwitchContext+0x78>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <vTaskSwitchContext+0x7c>)
 80088ac:	b112      	cbz	r2, 80088b4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
}
 80088b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 80088b4:	4c1b      	ldr	r4, [pc, #108]	; (8008924 <vTaskSwitchContext+0x80>)
 80088b6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b8:	4e1b      	ldr	r6, [pc, #108]	; (8008928 <vTaskSwitchContext+0x84>)
 80088ba:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 80088bc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	f7ff ff92 	bl	80087e8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c4:	6832      	ldr	r2, [r6, #0]
 80088c6:	4919      	ldr	r1, [pc, #100]	; (800892c <vTaskSwitchContext+0x88>)
 80088c8:	fb07 f302 	mul.w	r3, r7, r2
 80088cc:	58cd      	ldr	r5, [r1, r3]
 80088ce:	18c8      	adds	r0, r1, r3
 80088d0:	b1ad      	cbz	r5, 80088fe <vTaskSwitchContext+0x5a>
 80088d2:	6845      	ldr	r5, [r0, #4]
 80088d4:	3308      	adds	r3, #8
 80088d6:	686d      	ldr	r5, [r5, #4]
 80088d8:	440b      	add	r3, r1
 80088da:	429d      	cmp	r5, r3
 80088dc:	6045      	str	r5, [r0, #4]
 80088de:	bf04      	itt	eq
 80088e0:	686b      	ldreq	r3, [r5, #4]
 80088e2:	6043      	streq	r3, [r0, #4]
 80088e4:	2314      	movs	r3, #20
 80088e6:	fb03 1102 	mla	r1, r3, r2, r1
 80088ea:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 80088ec:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80088f4:	6820      	ldr	r0, [r4, #0]
}
 80088f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80088fa:	f7ff bf75 	b.w	80087e8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fe:	b952      	cbnz	r2, 8008916 <vTaskSwitchContext+0x72>
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	e7fe      	b.n	8008914 <vTaskSwitchContext+0x70>
 8008916:	3a01      	subs	r2, #1
 8008918:	e7d6      	b.n	80088c8 <vTaskSwitchContext+0x24>
 800891a:	bf00      	nop
 800891c:	20014e7c 	.word	0x20014e7c
 8008920:	20014efc 	.word	0x20014efc
 8008924:	20014a04 	.word	0x20014a04
 8008928:	20014e84 	.word	0x20014e84
 800892c:	20014a10 	.word	0x20014a10

08008930 <vTaskPlaceOnEventList>:
{
 8008930:	b510      	push	{r4, lr}
 8008932:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008934:	b950      	cbnz	r0, 800894c <vTaskPlaceOnEventList+0x1c>
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	b672      	cpsid	i
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	b662      	cpsie	i
 800894a:	e7fe      	b.n	800894a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800894c:	4b05      	ldr	r3, [pc, #20]	; (8008964 <vTaskPlaceOnEventList+0x34>)
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	3118      	adds	r1, #24
 8008952:	f7fe fca7 	bl	80072a4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008956:	4620      	mov	r0, r4
 8008958:	2101      	movs	r1, #1
}
 800895a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800895e:	f7ff bc9d 	b.w	800829c <prvAddCurrentTaskToDelayedList>
 8008962:	bf00      	nop
 8008964:	20014a04 	.word	0x20014a04

08008968 <vTaskPlaceOnEventListRestricted>:
	{
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	460d      	mov	r5, r1
 800896c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800896e:	b950      	cbnz	r0, 8008986 <vTaskPlaceOnEventListRestricted+0x1e>
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	b672      	cpsid	i
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	b662      	cpsie	i
 8008984:	e7fe      	b.n	8008984 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008986:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	3118      	adds	r1, #24
 800898c:	f7fe fc7e 	bl	800728c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008990:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008992:	4621      	mov	r1, r4
 8008994:	bf0c      	ite	eq
 8008996:	4628      	moveq	r0, r5
 8008998:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800899c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089a0:	f7ff bc7c 	b.w	800829c <prvAddCurrentTaskToDelayedList>
 80089a4:	20014a04 	.word	0x20014a04

080089a8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a8:	68c3      	ldr	r3, [r0, #12]
{
 80089aa:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80089ae:	b954      	cbnz	r4, 80089c6 <xTaskRemoveFromEventList+0x1e>
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	b672      	cpsid	i
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	b662      	cpsie	i
 80089c4:	e7fe      	b.n	80089c4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089c6:	f104 0118 	add.w	r1, r4, #24
 80089ca:	4608      	mov	r0, r1
 80089cc:	9101      	str	r1, [sp, #4]
 80089ce:	f7fe fc80 	bl	80072d2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <xTaskRemoveFromEventList+0x74>)
 80089d4:	9901      	ldr	r1, [sp, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	b9e3      	cbnz	r3, 8008a14 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089da:	1d21      	adds	r1, r4, #4
 80089dc:	4608      	mov	r0, r1
 80089de:	9101      	str	r1, [sp, #4]
 80089e0:	f7fe fc77 	bl	80072d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089e4:	4a0e      	ldr	r2, [pc, #56]	; (8008a20 <xTaskRemoveFromEventList+0x78>)
 80089e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089e8:	6810      	ldr	r0, [r2, #0]
 80089ea:	9901      	ldr	r1, [sp, #4]
 80089ec:	4283      	cmp	r3, r0
 80089ee:	d900      	bls.n	80089f2 <xTaskRemoveFromEventList+0x4a>
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	4a0c      	ldr	r2, [pc, #48]	; (8008a24 <xTaskRemoveFromEventList+0x7c>)
 80089f4:	2014      	movs	r0, #20
 80089f6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089fa:	f7fe fc47 	bl	800728c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <xTaskRemoveFromEventList+0x80>)
 8008a00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d906      	bls.n	8008a18 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <xTaskRemoveFromEventList+0x84>)
 8008a0e:	6018      	str	r0, [r3, #0]
}
 8008a10:	b002      	add	sp, #8
 8008a12:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a14:	4806      	ldr	r0, [pc, #24]	; (8008a30 <xTaskRemoveFromEventList+0x88>)
 8008a16:	e7f0      	b.n	80089fa <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 8008a18:	2000      	movs	r0, #0
	return xReturn;
 8008a1a:	e7f9      	b.n	8008a10 <xTaskRemoveFromEventList+0x68>
 8008a1c:	20014e7c 	.word	0x20014e7c
 8008a20:	20014e84 	.word	0x20014e84
 8008a24:	20014a10 	.word	0x20014a10
 8008a28:	20014a04 	.word	0x20014a04
 8008a2c:	20014efc 	.word	0x20014efc
 8008a30:	20014eb8 	.word	0x20014eb8

08008a34 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a34:	4b03      	ldr	r3, [pc, #12]	; (8008a44 <vTaskInternalSetTimeOutState+0x10>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a3a:	4b03      	ldr	r3, [pc, #12]	; (8008a48 <vTaskInternalSetTimeOutState+0x14>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6043      	str	r3, [r0, #4]
}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20014eb4 	.word	0x20014eb4
 8008a48:	20014ef8 	.word	0x20014ef8

08008a4c <xTaskCheckForTimeOut>:
{
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008a50:	4605      	mov	r5, r0
 8008a52:	b950      	cbnz	r0, 8008a6a <xTaskCheckForTimeOut+0x1e>
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	b672      	cpsid	i
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	b662      	cpsie	i
 8008a68:	e7fe      	b.n	8008a68 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8008a6a:	b951      	cbnz	r1, 8008a82 <xTaskCheckForTimeOut+0x36>
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	b672      	cpsid	i
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	b662      	cpsie	i
 8008a80:	e7fe      	b.n	8008a80 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8008a82:	f7fe fc9f 	bl	80073c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008a86:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <xTaskCheckForTimeOut+0x78>)
 8008a88:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	d010      	beq.n	8008ab2 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a90:	480d      	ldr	r0, [pc, #52]	; (8008ac8 <xTaskCheckForTimeOut+0x7c>)
 8008a92:	682e      	ldr	r6, [r5, #0]
 8008a94:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a96:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a98:	4286      	cmp	r6, r0
 8008a9a:	d001      	beq.n	8008aa0 <xTaskCheckForTimeOut+0x54>
 8008a9c:	428a      	cmp	r2, r1
 8008a9e:	d90f      	bls.n	8008ac0 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008aa0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008aa2:	4283      	cmp	r3, r0
 8008aa4:	d90a      	bls.n	8008abc <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8008aa6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008aa8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8008aaa:	4413      	add	r3, r2
 8008aac:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008aae:	f7ff ffc1 	bl	8008a34 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008ab2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008ab4:	f7fe fcaa 	bl	800740c <vPortExitCritical>
}
 8008ab8:	4620      	mov	r0, r4
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008ac0:	2401      	movs	r4, #1
 8008ac2:	e7f7      	b.n	8008ab4 <xTaskCheckForTimeOut+0x68>
 8008ac4:	20014ef8 	.word	0x20014ef8
 8008ac8:	20014eb4 	.word	0x20014eb4

08008acc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008acc:	4b01      	ldr	r3, [pc, #4]	; (8008ad4 <vTaskMissedYield+0x8>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
}
 8008ad2:	4770      	bx	lr
 8008ad4:	20014efc 	.word	0x20014efc

08008ad8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008ad8:	4b01      	ldr	r3, [pc, #4]	; (8008ae0 <xTaskGetCurrentTaskHandle+0x8>)
 8008ada:	6818      	ldr	r0, [r3, #0]
	}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20014a04 	.word	0x20014a04

08008ae4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <xTaskGetSchedulerState+0x18>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	b133      	cbz	r3, 8008af8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <xTaskGetSchedulerState+0x1c>)
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	fab0 f080 	clz	r0, r0
 8008af2:	0940      	lsrs	r0, r0, #5
 8008af4:	0040      	lsls	r0, r0, #1
 8008af6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008af8:	2001      	movs	r0, #1
	}
 8008afa:	4770      	bx	lr
 8008afc:	20014ecc 	.word	0x20014ecc
 8008b00:	20014e7c 	.word	0x20014e7c

08008b04 <xTaskPriorityInherit>:
	{
 8008b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008b06:	4604      	mov	r4, r0
 8008b08:	b340      	cbz	r0, 8008b5c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b0a:	4d1b      	ldr	r5, [pc, #108]	; (8008b78 <xTaskPriorityInherit+0x74>)
 8008b0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008b0e:	682a      	ldr	r2, [r5, #0]
 8008b10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d228      	bcs.n	8008b68 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b16:	6982      	ldr	r2, [r0, #24]
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	db04      	blt.n	8008b26 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1c:	682a      	ldr	r2, [r5, #0]
 8008b1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b20:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008b24:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b26:	2214      	movs	r2, #20
 8008b28:	4e14      	ldr	r6, [pc, #80]	; (8008b7c <xTaskPriorityInherit+0x78>)
 8008b2a:	fb02 6303 	mla	r3, r2, r3, r6
 8008b2e:	6962      	ldr	r2, [r4, #20]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d115      	bne.n	8008b60 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b34:	1d21      	adds	r1, r4, #4
 8008b36:	4608      	mov	r0, r1
 8008b38:	9101      	str	r1, [sp, #4]
 8008b3a:	f7fe fbca 	bl	80072d2 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b3e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b40:	4a0f      	ldr	r2, [pc, #60]	; (8008b80 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b44:	6810      	ldr	r0, [r2, #0]
 8008b46:	9901      	ldr	r1, [sp, #4]
 8008b48:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b4c:	d900      	bls.n	8008b50 <xTaskPriorityInherit+0x4c>
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	2014      	movs	r0, #20
 8008b52:	fb00 6003 	mla	r0, r0, r3, r6
 8008b56:	f7fe fb99 	bl	800728c <vListInsertEnd>
				xReturn = pdTRUE;
 8008b5a:	2001      	movs	r0, #1
	}
 8008b5c:	b002      	add	sp, #8
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b66:	e7f8      	b.n	8008b5a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4298      	cmp	r0, r3
 8008b70:	bf2c      	ite	cs
 8008b72:	2000      	movcs	r0, #0
 8008b74:	2001      	movcc	r0, #1
 8008b76:	e7f1      	b.n	8008b5c <xTaskPriorityInherit+0x58>
 8008b78:	20014a04 	.word	0x20014a04
 8008b7c:	20014a10 	.word	0x20014a10
 8008b80:	20014e84 	.word	0x20014e84

08008b84 <xTaskPriorityDisinherit>:
	{
 8008b84:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8008b86:	b910      	cbnz	r0, 8008b8e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8008b88:	2000      	movs	r0, #0
	}
 8008b8a:	b002      	add	sp, #8
 8008b8c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008b8e:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <xTaskPriorityDisinherit+0x84>)
 8008b90:	681c      	ldr	r4, [r3, #0]
 8008b92:	4284      	cmp	r4, r0
 8008b94:	d00a      	beq.n	8008bac <xTaskPriorityDisinherit+0x28>
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	b672      	cpsid	i
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	b662      	cpsie	i
 8008baa:	e7fe      	b.n	8008baa <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008bae:	b953      	cbnz	r3, 8008bc6 <xTaskPriorityDisinherit+0x42>
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	b672      	cpsid	i
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	b662      	cpsie	i
 8008bc4:	e7fe      	b.n	8008bc4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8008bc8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008bcc:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bce:	4291      	cmp	r1, r2
 8008bd0:	d0da      	beq.n	8008b88 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1d8      	bne.n	8008b88 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd6:	1d21      	adds	r1, r4, #4
 8008bd8:	4608      	mov	r0, r1
 8008bda:	9101      	str	r1, [sp, #4]
 8008bdc:	f7fe fb79 	bl	80072d2 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008be0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8008be2:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008be8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bea:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bec:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <xTaskPriorityDisinherit+0x88>)
 8008bee:	6810      	ldr	r0, [r2, #0]
 8008bf0:	4283      	cmp	r3, r0
 8008bf2:	d900      	bls.n	8008bf6 <xTaskPriorityDisinherit+0x72>
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <xTaskPriorityDisinherit+0x8c>)
 8008bf8:	2014      	movs	r0, #20
 8008bfa:	fb00 2003 	mla	r0, r0, r3, r2
 8008bfe:	f7fe fb45 	bl	800728c <vListInsertEnd>
					xReturn = pdTRUE;
 8008c02:	2001      	movs	r0, #1
		return xReturn;
 8008c04:	e7c1      	b.n	8008b8a <xTaskPriorityDisinherit+0x6>
 8008c06:	bf00      	nop
 8008c08:	20014a04 	.word	0x20014a04
 8008c0c:	20014e84 	.word	0x20014e84
 8008c10:	20014a10 	.word	0x20014a10

08008c14 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008c16:	4604      	mov	r4, r0
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d048      	beq.n	8008cae <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c1c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008c1e:	b952      	cbnz	r2, 8008c36 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	e7fe      	b.n	8008c34 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	bf38      	it	cc
 8008c3c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008c40:	428b      	cmp	r3, r1
 8008c42:	d034      	beq.n	8008cae <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c44:	2a01      	cmp	r2, #1
 8008c46:	d132      	bne.n	8008cae <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8008c48:	4a1a      	ldr	r2, [pc, #104]	; (8008cb4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008c4a:	6812      	ldr	r2, [r2, #0]
 8008c4c:	4282      	cmp	r2, r0
 8008c4e:	d10a      	bne.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	b672      	cpsid	i
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	b662      	cpsie	i
 8008c64:	e7fe      	b.n	8008c64 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c66:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c68:	4d13      	ldr	r5, [pc, #76]	; (8008cb8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c6a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c6c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8008c70:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c72:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c76:	bfa8      	it	ge
 8008c78:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c7c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7e:	bfa8      	it	ge
 8008c80:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d113      	bne.n	8008cae <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c86:	1d01      	adds	r1, r0, #4
 8008c88:	4608      	mov	r0, r1
 8008c8a:	9101      	str	r1, [sp, #4]
 8008c8c:	f7fe fb21 	bl	80072d2 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008c90:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8008c92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c94:	6810      	ldr	r0, [r2, #0]
 8008c96:	9901      	ldr	r1, [sp, #4]
 8008c98:	4283      	cmp	r3, r0
 8008c9a:	d900      	bls.n	8008c9e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	2014      	movs	r0, #20
 8008ca0:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8008ca4:	b003      	add	sp, #12
 8008ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8008caa:	f7fe baef 	b.w	800728c <vListInsertEnd>
	}
 8008cae:	b003      	add	sp, #12
 8008cb0:	bd30      	pop	{r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20014a04 	.word	0x20014a04
 8008cb8:	20014a10 	.word	0x20014a10
 8008cbc:	20014e84 	.word	0x20014e84

08008cc0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <pvTaskIncrementMutexHeldCount+0x14>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	b11a      	cbz	r2, 8008cce <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008cc6:	6819      	ldr	r1, [r3, #0]
 8008cc8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008cca:	3201      	adds	r2, #1
 8008ccc:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8008cce:	6818      	ldr	r0, [r3, #0]
	}
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20014a04 	.word	0x20014a04

08008cd8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008cda:	4c11      	ldr	r4, [pc, #68]	; (8008d20 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008cdc:	f7fe fb72 	bl	80073c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008ce0:	6825      	ldr	r5, [r4, #0]
 8008ce2:	b9bd      	cbnz	r5, 8008d14 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ce4:	4f0f      	ldr	r7, [pc, #60]	; (8008d24 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008ce6:	4e10      	ldr	r6, [pc, #64]	; (8008d28 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7fe fac1 	bl	8007270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7fe fabe 	bl	8007270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cf6:	4a0e      	ldr	r2, [pc, #56]	; (8008d30 <prvCheckForValidListAndQueue+0x58>)
 8008cf8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8008cfa:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cfc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008cfe:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <prvCheckForValidListAndQueue+0x5c>)
 8008d00:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <prvCheckForValidListAndQueue+0x60>)
 8008d04:	9500      	str	r5, [sp, #0]
 8008d06:	f7fe fda9 	bl	800785c <xQueueGenericCreateStatic>
 8008d0a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d0c:	b110      	cbz	r0, 8008d14 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d0e:	490b      	ldr	r1, [pc, #44]	; (8008d3c <prvCheckForValidListAndQueue+0x64>)
 8008d10:	f7ff f9e4 	bl	80080dc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008d14:	b003      	add	sp, #12
 8008d16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008d1a:	f7fe bb77 	b.w	800740c <vPortExitCritical>
 8008d1e:	bf00      	nop
 8008d20:	20015024 	.word	0x20015024
 8008d24:	20014fa8 	.word	0x20014fa8
 8008d28:	20014fbc 	.word	0x20014fbc
 8008d2c:	20014f00 	.word	0x20014f00
 8008d30:	20014f08 	.word	0x20014f08
 8008d34:	20014f04 	.word	0x20014f04
 8008d38:	20014fd4 	.word	0x20014fd4
 8008d3c:	0802cb04 	.word	0x0802cb04

08008d40 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008d40:	4291      	cmp	r1, r2
{
 8008d42:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d44:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d46:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008d48:	d80a      	bhi.n	8008d60 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	6982      	ldr	r2, [r0, #24]
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d20d      	bcs.n	8008d6e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d52:	1d01      	adds	r1, r0, #4
 8008d54:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	f7fe faa4 	bl	80072a4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008d5c:	2000      	movs	r0, #0
}
 8008d5e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d201      	bcs.n	8008d68 <prvInsertTimerInActiveList+0x28>
 8008d64:	4299      	cmp	r1, r3
 8008d66:	d202      	bcs.n	8008d6e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d68:	1d01      	adds	r1, r0, #4
 8008d6a:	4b03      	ldr	r3, [pc, #12]	; (8008d78 <prvInsertTimerInActiveList+0x38>)
 8008d6c:	e7f3      	b.n	8008d56 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008d6e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008d70:	e7f5      	b.n	8008d5e <prvInsertTimerInActiveList+0x1e>
 8008d72:	bf00      	nop
 8008d74:	20014f04 	.word	0x20014f04
 8008d78:	20014f00 	.word	0x20014f00

08008d7c <xTimerCreateTimerTask>:
{
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008d80:	f7ff ffaa 	bl	8008cd8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008d84:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <xTimerCreateTimerTask+0x58>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	b1b3      	cbz	r3, 8008db8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d8a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d8c:	aa07      	add	r2, sp, #28
 8008d8e:	a906      	add	r1, sp, #24
 8008d90:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d92:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d96:	f7fe f967 	bl	8007068 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d9a:	9b05      	ldr	r3, [sp, #20]
 8008d9c:	9a07      	ldr	r2, [sp, #28]
 8008d9e:	9302      	str	r3, [sp, #8]
 8008da0:	9b06      	ldr	r3, [sp, #24]
 8008da2:	490d      	ldr	r1, [pc, #52]	; (8008dd8 <xTimerCreateTimerTask+0x5c>)
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	2302      	movs	r3, #2
 8008da8:	480c      	ldr	r0, [pc, #48]	; (8008ddc <xTimerCreateTimerTask+0x60>)
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4623      	mov	r3, r4
 8008dae:	f7ff fb5e 	bl	800846e <xTaskCreateStatic>
 8008db2:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <xTimerCreateTimerTask+0x64>)
 8008db4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008db6:	b950      	cbnz	r0, 8008dce <xTimerCreateTimerTask+0x52>
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	b672      	cpsid	i
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	b662      	cpsie	i
	configASSERT( xReturn );
 8008dcc:	e7fe      	b.n	8008dcc <xTimerCreateTimerTask+0x50>
}
 8008dce:	2001      	movs	r0, #1
 8008dd0:	b008      	add	sp, #32
 8008dd2:	bd10      	pop	{r4, pc}
 8008dd4:	20015024 	.word	0x20015024
 8008dd8:	0802cb09 	.word	0x0802cb09
 8008ddc:	08008eed 	.word	0x08008eed
 8008de0:	20015028 	.word	0x20015028

08008de4 <xTimerGenericCommand>:
{
 8008de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008de6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008de8:	4604      	mov	r4, r0
{
 8008dea:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008dec:	b950      	cbnz	r0, 8008e04 <xTimerGenericCommand+0x20>
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	b672      	cpsid	i
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	b662      	cpsie	i
 8008e02:	e7fe      	b.n	8008e02 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8008e04:	4d0c      	ldr	r5, [pc, #48]	; (8008e38 <xTimerGenericCommand+0x54>)
 8008e06:	6828      	ldr	r0, [r5, #0]
 8008e08:	b178      	cbz	r0, 8008e2a <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e0a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e0c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e0e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e12:	dc0c      	bgt.n	8008e2e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e14:	f7ff fe66 	bl	8008ae4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e18:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e1a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e1c:	4669      	mov	r1, sp
 8008e1e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e20:	bf0c      	ite	eq
 8008e22:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e24:	461a      	movne	r2, r3
 8008e26:	f7fe fd9e 	bl	8007966 <xQueueGenericSend>
}
 8008e2a:	b004      	add	sp, #16
 8008e2c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e2e:	2300      	movs	r3, #0
 8008e30:	4669      	mov	r1, sp
 8008e32:	f7fe fea5 	bl	8007b80 <xQueueGenericSendFromISR>
 8008e36:	e7f8      	b.n	8008e2a <xTimerGenericCommand+0x46>
 8008e38:	20015024 	.word	0x20015024

08008e3c <prvSampleTimeNow>:
{
 8008e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008e40:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008ee8 <prvSampleTimeNow+0xac>
{
 8008e44:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8008e46:	f7ff fb85 	bl	8008554 <xTaskGetTickCount>
 8008e4a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e50:	4283      	cmp	r3, r0
 8008e52:	d90b      	bls.n	8008e6c <prvSampleTimeNow+0x30>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e54:	4f22      	ldr	r7, [pc, #136]	; (8008ee0 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e56:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	b96a      	cbnz	r2, 8008e7c <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8008e60:	4a20      	ldr	r2, [pc, #128]	; (8008ee4 <prvSampleTimeNow+0xa8>)
 8008e62:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8008e68:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008e6a:	e000      	b.n	8008e6e <prvSampleTimeNow+0x32>
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8008e70:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008e72:	f8c8 5000 	str.w	r5, [r8]
}
 8008e76:	b004      	add	sp, #16
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e7c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e80:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e84:	1d21      	adds	r1, r4, #4
 8008e86:	4608      	mov	r0, r1
 8008e88:	9103      	str	r1, [sp, #12]
 8008e8a:	f7fe fa22 	bl	80072d2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e8e:	6a23      	ldr	r3, [r4, #32]
 8008e90:	4620      	mov	r0, r4
 8008e92:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e94:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008e98:	9903      	ldr	r1, [sp, #12]
 8008e9a:	f013 0f04 	tst.w	r3, #4
 8008e9e:	d0dc      	beq.n	8008e5a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ea0:	69a3      	ldr	r3, [r4, #24]
 8008ea2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8008ea4:	459a      	cmp	sl, r3
 8008ea6:	d205      	bcs.n	8008eb4 <prvSampleTimeNow+0x78>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ea8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008eaa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008eac:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eae:	f7fe f9f9 	bl	80072a4 <vListInsert>
 8008eb2:	e7d2      	b.n	8008e5a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f8cd 9000 	str.w	r9, [sp]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	f7ff ff90 	bl	8008de4 <xTimerGenericCommand>
				configASSERT( xResult );
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d1c8      	bne.n	8008e5a <prvSampleTimeNow+0x1e>
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	b672      	cpsid	i
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	b662      	cpsie	i
 8008edc:	e7fe      	b.n	8008edc <prvSampleTimeNow+0xa0>
 8008ede:	bf00      	nop
 8008ee0:	20014f00 	.word	0x20014f00
 8008ee4:	20014f04 	.word	0x20014f04
 8008ee8:	20014fd0 	.word	0x20014fd0

08008eec <prvTimerTask>:
{
 8008eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ef0:	4d71      	ldr	r5, [pc, #452]	; (80090b8 <prvTimerTask+0x1cc>)
{
 8008ef2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ef4:	4e71      	ldr	r6, [pc, #452]	; (80090bc <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	f8d3 8000 	ldr.w	r8, [r3]
 8008efc:	f1b8 0f00 	cmp.w	r8, #0
 8008f00:	d037      	beq.n	8008f72 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f02:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f04:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f06:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8008f0a:	f7ff fb1b 	bl	8008544 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f0e:	a804      	add	r0, sp, #16
 8008f10:	f7ff ff94 	bl	8008e3c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008f14:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f16:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d16b      	bne.n	8008ff4 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f1c:	2c00      	cmp	r4, #0
 8008f1e:	d14e      	bne.n	8008fbe <prvTimerTask+0xd2>
 8008f20:	4540      	cmp	r0, r8
 8008f22:	d352      	bcc.n	8008fca <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8008f24:	f7ff fbb4 	bl	8008690 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f2e:	1d38      	adds	r0, r7, #4
 8008f30:	f7fe f9cf 	bl	80072d2 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f38:	0758      	lsls	r0, r3, #29
 8008f3a:	d51c      	bpl.n	8008f76 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f3c:	69b9      	ldr	r1, [r7, #24]
 8008f3e:	4643      	mov	r3, r8
 8008f40:	464a      	mov	r2, r9
 8008f42:	4638      	mov	r0, r7
 8008f44:	4441      	add	r1, r8
 8008f46:	f7ff fefb 	bl	8008d40 <prvInsertTimerInActiveList>
 8008f4a:	b1c0      	cbz	r0, 8008f7e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	4642      	mov	r2, r8
 8008f50:	4621      	mov	r1, r4
 8008f52:	4638      	mov	r0, r7
 8008f54:	9400      	str	r4, [sp, #0]
 8008f56:	f7ff ff45 	bl	8008de4 <xTimerGenericCommand>
			configASSERT( xResult );
 8008f5a:	b980      	cbnz	r0, 8008f7e <prvTimerTask+0x92>
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	b672      	cpsid	i
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	b662      	cpsie	i
 8008f70:	e7fe      	b.n	8008f70 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f72:	2401      	movs	r4, #1
 8008f74:	e7c9      	b.n	8008f0a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f76:	f023 0301 	bic.w	r3, r3, #1
 8008f7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	4638      	mov	r0, r7
 8008f82:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f84:	2200      	movs	r2, #0
 8008f86:	a904      	add	r1, sp, #16
 8008f88:	6830      	ldr	r0, [r6, #0]
 8008f8a:	f7fe febe 	bl	8007d0a <xQueueReceive>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d0b1      	beq.n	8008ef6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f92:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f94:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	db2f      	blt.n	8008ffa <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f9a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d132      	bne.n	8009008 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fa2:	a803      	add	r0, sp, #12
 8008fa4:	f7ff ff4a 	bl	8008e3c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008fa8:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008faa:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	d8e9      	bhi.n	8008f84 <prvTimerTask+0x98>
 8008fb0:	e8df f003 	tbb	[pc, r3]
 8008fb4:	592e2e2e 	.word	0x592e2e2e
 8008fb8:	2e2e7a60 	.word	0x2e2e7a60
 8008fbc:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fbe:	4b40      	ldr	r3, [pc, #256]	; (80090c0 <prvTimerTask+0x1d4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681c      	ldr	r4, [r3, #0]
 8008fc4:	fab4 f484 	clz	r4, r4
 8008fc8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fca:	4622      	mov	r2, r4
 8008fcc:	eba8 0109 	sub.w	r1, r8, r9
 8008fd0:	6830      	ldr	r0, [r6, #0]
 8008fd2:	f7ff f8c2 	bl	800815a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fd6:	f7ff fb5b 	bl	8008690 <xTaskResumeAll>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d1d2      	bne.n	8008f84 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8008fde:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	e7c7      	b.n	8008f84 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8008ff4:	f7ff fb4c 	bl	8008690 <xTaskResumeAll>
}
 8008ff8:	e7c4      	b.n	8008f84 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	9907      	ldr	r1, [sp, #28]
 8008ffe:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009000:	9b04      	ldr	r3, [sp, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	dbbe      	blt.n	8008f84 <prvTimerTask+0x98>
 8009006:	e7c8      	b.n	8008f9a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009008:	1d20      	adds	r0, r4, #4
 800900a:	f7fe f962 	bl	80072d2 <uxListRemove>
 800900e:	e7c8      	b.n	8008fa2 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009010:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009014:	4620      	mov	r0, r4
 8009016:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009018:	f043 0301 	orr.w	r3, r3, #1
 800901c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	4419      	add	r1, r3
 8009024:	f7ff fe8c 	bl	8008d40 <prvInsertTimerInActiveList>
 8009028:	2800      	cmp	r0, #0
 800902a:	d0ab      	beq.n	8008f84 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800902c:	6a23      	ldr	r3, [r4, #32]
 800902e:	4620      	mov	r0, r4
 8009030:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009032:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009036:	0759      	lsls	r1, r3, #29
 8009038:	d5a4      	bpl.n	8008f84 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800903a:	69a2      	ldr	r2, [r4, #24]
 800903c:	2300      	movs	r3, #0
 800903e:	9905      	ldr	r1, [sp, #20]
 8009040:	4620      	mov	r0, r4
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	440a      	add	r2, r1
 8009046:	4619      	mov	r1, r3
 8009048:	f7ff fecc 	bl	8008de4 <xTimerGenericCommand>
							configASSERT( xResult );
 800904c:	2800      	cmp	r0, #0
 800904e:	d199      	bne.n	8008f84 <prvTimerTask+0x98>
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	b672      	cpsid	i
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	b662      	cpsie	i
 8009064:	e7fe      	b.n	8009064 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009066:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800906a:	f023 0301 	bic.w	r3, r3, #1
 800906e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009072:	e787      	b.n	8008f84 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009074:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009078:	f043 0301 	orr.w	r3, r3, #1
 800907c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009080:	9905      	ldr	r1, [sp, #20]
 8009082:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009084:	b951      	cbnz	r1, 800909c <prvTimerTask+0x1b0>
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	e7fe      	b.n	800909a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800909c:	4603      	mov	r3, r0
 800909e:	4401      	add	r1, r0
 80090a0:	4620      	mov	r0, r4
 80090a2:	f7ff fe4d 	bl	8008d40 <prvInsertTimerInActiveList>
					break;
 80090a6:	e76d      	b.n	8008f84 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80090ac:	079a      	lsls	r2, r3, #30
 80090ae:	d4dc      	bmi.n	800906a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7fe f8a1 	bl	80071f8 <vPortFree>
 80090b6:	e765      	b.n	8008f84 <prvTimerTask+0x98>
 80090b8:	20014f00 	.word	0x20014f00
 80090bc:	20015024 	.word	0x20015024
 80090c0:	20014f04 	.word	0x20014f04

080090c4 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 80090c4:	6843      	ldr	r3, [r0, #4]
{
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 80090ca:	b14b      	cbz	r3, 80090e0 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2101      	movs	r1, #1
 80090d0:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	b12b      	cbz	r3, 80090e2 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 80090d6:	23c8      	movs	r3, #200	; 0xc8
 80090d8:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 80090e0:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 80090e2:	2364      	movs	r3, #100	; 0x64
 80090e4:	6163      	str	r3, [r4, #20]
 80090e6:	e7fb      	b.n	80090e0 <jpeg_abort+0x1c>

080090e8 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 80090e8:	6843      	ldr	r3, [r0, #4]
{
 80090ea:	b510      	push	{r4, lr}
 80090ec:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 80090ee:	b10b      	cbz	r3, 80090f4 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 80090f4:	2300      	movs	r3, #0
 80090f6:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 80090f8:	6163      	str	r3, [r4, #20]
}
 80090fa:	bd10      	pop	{r4, pc}

080090fc <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 80090fc:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 80090fe:	6843      	ldr	r3, [r0, #4]
 8009100:	2284      	movs	r2, #132	; 0x84
 8009102:	2100      	movs	r1, #0
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009108:	2200      	movs	r2, #0
 800910a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 800910e:	bd08      	pop	{r3, pc}

08009110 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009110:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009112:	6843      	ldr	r3, [r0, #4]
 8009114:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009118:	2100      	movs	r1, #0
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800911e:	2200      	movs	r2, #0
 8009120:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8009124:	bd08      	pop	{r3, pc}

08009126 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009126:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8009128:	2950      	cmp	r1, #80	; 0x50
{
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	4604      	mov	r4, r0
 800912e:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009130:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 8009132:	d007      	beq.n	8009144 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8009134:	6803      	ldr	r3, [r0, #0]
 8009136:	260d      	movs	r6, #13
 8009138:	2250      	movs	r2, #80	; 0x50
 800913a:	61d9      	str	r1, [r3, #28]
 800913c:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8009144:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8009148:	d009      	beq.n	800915e <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	2116      	movs	r1, #22
 800914e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009152:	4620      	mov	r0, r4
 8009154:	61dd      	str	r5, [r3, #28]
 8009156:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800915e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009162:	2100      	movs	r1, #0
 8009164:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8009166:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8009168:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800916a:	f020 fd15 	bl	8029b98 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800916e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009170:	4620      	mov	r0, r4
    cinfo->err = err;
 8009172:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8009174:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8009176:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009178:	f00b fe44 	bl	8014e04 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800917c:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800917e:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8009180:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8009182:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009184:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009188:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800918c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009190:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009194:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009198:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800919c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80091a0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 80091a4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 80091a8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80091ac:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 80091b0:	f005 f88c 	bl	800e2cc <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 80091b4:	4620      	mov	r0, r4
 80091b6:	f003 fd91 	bl	800ccdc <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 80091ba:	23c8      	movs	r3, #200	; 0xc8
 80091bc:	6163      	str	r3, [r4, #20]
}
 80091be:	bd70      	pop	{r4, r5, r6, pc}

080091c0 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 80091c0:	f7ff bf92 	b.w	80090e8 <jpeg_destroy>

080091c4 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 80091c4:	6942      	ldr	r2, [r0, #20]
 80091c6:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 80091ca:	b570      	push	{r4, r5, r6, lr}
 80091cc:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 80091ce:	2b0a      	cmp	r3, #10
 80091d0:	f200 809f 	bhi.w	8009312 <jpeg_consume_input+0x14e>
 80091d4:	e8df f003 	tbb	[pc, r3]
 80091d8:	97a51006 	.word	0x97a51006
 80091dc:	97979797 	.word	0x97979797
 80091e0:	9d97      	.short	0x9d97
 80091e2:	97          	.byte	0x97
 80091e3:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 80091e4:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 80091ec:	69a3      	ldr	r3, [r4, #24]
 80091ee:	4620      	mov	r0, r4
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 80091f4:	23c9      	movs	r3, #201	; 0xc9
 80091f6:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80091f8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80091fc:	4620      	mov	r0, r4
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009202:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009204:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009206:	d12a      	bne.n	800925e <jpeg_consume_input+0x9a>
  switch (cinfo->num_components) {
 8009208:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800920a:	2d03      	cmp	r5, #3
 800920c:	d029      	beq.n	8009262 <jpeg_consume_input+0x9e>
 800920e:	2d04      	cmp	r5, #4
 8009210:	d05f      	beq.n	80092d2 <jpeg_consume_input+0x10e>
 8009212:	2d01      	cmp	r5, #1
 8009214:	d173      	bne.n	80092fe <jpeg_consume_input+0x13a>
    break;
 8009216:	4603      	mov	r3, r0
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8009218:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_GRAYSCALE;
 800921c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->output_gamma = 1.0;
 8009220:	2200      	movs	r2, #0
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8009222:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->dither_mode = JDITHER_FS;
 8009226:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009228:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 800922c:	4b3e      	ldr	r3, [pc, #248]	; (8009328 <jpeg_consume_input+0x164>)
  cinfo->dither_mode = JDITHER_FS;
 800922e:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 8009232:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8009236:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009238:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 800923a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800923e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 8009242:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8009244:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8009246:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 800924a:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 800924c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8009250:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8009254:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009258:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 800925a:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 800925c:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800925e:	4630      	mov	r0, r6
 8009260:	bd70      	pop	{r4, r5, r6, pc}
    if (cinfo->saw_JFIF_marker) {
 8009262:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009266:	b983      	cbnz	r3, 800928a <jpeg_consume_input+0xc6>
    } else if (cinfo->saw_Adobe_marker) {
 8009268:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800926c:	b18b      	cbz	r3, 8009292 <jpeg_consume_input+0xce>
      switch (cinfo->Adobe_transform) {
 800926e:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009272:	b362      	cbz	r2, 80092ce <jpeg_consume_input+0x10a>
 8009274:	2a01      	cmp	r2, #1
 8009276:	d008      	beq.n	800928a <jpeg_consume_input+0xc6>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	2174      	movs	r1, #116	; 0x74
 800927c:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800927e:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f04f 31ff 	mov.w	r1, #4294967295
 8009288:	4798      	blx	r3
    break;
 800928a:	2302      	movs	r3, #2
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
 800928c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    break;
 8009290:	e7c4      	b.n	800921c <jpeg_consume_input+0x58>
      int cid0 = cinfo->comp_info[0].component_id;
 8009292:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009296:	6819      	ldr	r1, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800929a:	2901      	cmp	r1, #1
      int cid2 = cinfo->comp_info[2].component_id;
 800929c:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 80092a0:	d10f      	bne.n	80092c2 <jpeg_consume_input+0xfe>
 80092a2:	2a02      	cmp	r2, #2
 80092a4:	d101      	bne.n	80092aa <jpeg_consume_input+0xe6>
 80092a6:	2d03      	cmp	r5, #3
 80092a8:	d0ef      	beq.n	800928a <jpeg_consume_input+0xc6>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	4620      	mov	r0, r4
 80092ae:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80092b2:	2271      	movs	r2, #113	; 0x71
 80092b4:	621d      	str	r5, [r3, #32]
 80092b6:	2101      	movs	r1, #1
 80092b8:	2503      	movs	r5, #3
 80092ba:	615a      	str	r2, [r3, #20]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 80092c0:	e7e3      	b.n	800928a <jpeg_consume_input+0xc6>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 80092c2:	2952      	cmp	r1, #82	; 0x52
 80092c4:	d1f1      	bne.n	80092aa <jpeg_consume_input+0xe6>
 80092c6:	2a47      	cmp	r2, #71	; 0x47
 80092c8:	d1ef      	bne.n	80092aa <jpeg_consume_input+0xe6>
 80092ca:	2d42      	cmp	r5, #66	; 0x42
 80092cc:	d1ed      	bne.n	80092aa <jpeg_consume_input+0xe6>
 80092ce:	2502      	movs	r5, #2
 80092d0:	e7db      	b.n	800928a <jpeg_consume_input+0xc6>
    if (cinfo->saw_Adobe_marker) {
 80092d2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80092d6:	b173      	cbz	r3, 80092f6 <jpeg_consume_input+0x132>
      switch (cinfo->Adobe_transform) {
 80092d8:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 80092dc:	b15a      	cbz	r2, 80092f6 <jpeg_consume_input+0x132>
 80092de:	2a02      	cmp	r2, #2
 80092e0:	d008      	beq.n	80092f4 <jpeg_consume_input+0x130>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	2174      	movs	r1, #116	; 0x74
 80092e6:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 80092e8:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f04f 31ff 	mov.w	r1, #4294967295
 80092f2:	4798      	blx	r3
	break;
 80092f4:	2505      	movs	r5, #5
    break;
 80092f6:	2304      	movs	r3, #4
	cinfo->jpeg_color_space = JCS_CMYK;
 80092f8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    break;
 80092fc:	e78e      	b.n	800921c <jpeg_consume_input+0x58>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 80092fe:	2300      	movs	r3, #0
 8009300:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    break;
 8009304:	e78a      	b.n	800921c <jpeg_consume_input+0x58>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009306:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 800930a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009312:	6803      	ldr	r3, [r0, #0]
 8009314:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8009316:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009318:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4798      	blx	r3
 8009320:	e79d      	b.n	800925e <jpeg_consume_input+0x9a>
  switch (cinfo->global_state) {
 8009322:	2601      	movs	r6, #1
  return retcode;
 8009324:	e79b      	b.n	800925e <jpeg_consume_input+0x9a>
 8009326:	bf00      	nop
 8009328:	3ff00000 	.word	0x3ff00000

0800932c <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 800932c:	6942      	ldr	r2, [r0, #20]
 800932e:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 8009332:	2b01      	cmp	r3, #1
{
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	4604      	mov	r4, r0
 8009338:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 800933a:	d905      	bls.n	8009348 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800933c:	6803      	ldr	r3, [r0, #0]
 800933e:	2115      	movs	r1, #21
 8009340:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009348:	4620      	mov	r0, r4
 800934a:	f7ff ff3b 	bl	80091c4 <jpeg_consume_input>
  switch (retcode) {
 800934e:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8009350:	4605      	mov	r5, r0
  switch (retcode) {
 8009352:	d00b      	beq.n	800936c <jpeg_read_header+0x40>
 8009354:	2802      	cmp	r0, #2
 8009356:	d109      	bne.n	800936c <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009358:	b12e      	cbz	r6, 8009366 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	2235      	movs	r2, #53	; 0x35
 800935e:	4620      	mov	r0, r4
 8009360:	615a      	str	r2, [r3, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009366:	4620      	mov	r0, r4
 8009368:	f7ff feac 	bl	80090c4 <jpeg_abort>
}
 800936c:	4628      	mov	r0, r5
 800936e:	bd70      	pop	{r4, r5, r6, pc}

08009370 <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009370:	6943      	ldr	r3, [r0, #20]
 8009372:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009376:	2a01      	cmp	r2, #1
{
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800937c:	d81f      	bhi.n	80093be <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800937e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009380:	bb0a      	cbnz	r2, 80093c6 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8009382:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009386:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009388:	429a      	cmp	r2, r3
 800938a:	d204      	bcs.n	8009396 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800938c:	6803      	ldr	r3, [r0, #0]
 800938e:	2245      	movs	r2, #69	; 0x45
 8009390:	615a      	str	r2, [r3, #20]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009396:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800939a:	4620      	mov	r0, r4
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 80093a0:	23d2      	movs	r3, #210	; 0xd2
 80093a2:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 80093a4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80093a8:	695a      	ldr	r2, [r3, #20]
 80093aa:	b1a2      	cbz	r2, 80093d6 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 80093ac:	69a3      	ldr	r3, [r4, #24]
 80093ae:	4620      	mov	r0, r4
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 80093b4:	4620      	mov	r0, r4
 80093b6:	f7ff fe85 	bl	80090c4 <jpeg_abort>
  return TRUE;
 80093ba:	2001      	movs	r0, #1
 80093bc:	e010      	b.n	80093e0 <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 80093be:	2bcf      	cmp	r3, #207	; 0xcf
 80093c0:	d0ee      	beq.n	80093a0 <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 80093c2:	2bd2      	cmp	r3, #210	; 0xd2
 80093c4:	d0ee      	beq.n	80093a4 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80093c6:	6822      	ldr	r2, [r4, #0]
 80093c8:	2115      	movs	r1, #21
 80093ca:	4620      	mov	r0, r4
 80093cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80093d0:	6813      	ldr	r3, [r2, #0]
 80093d2:	4798      	blx	r3
 80093d4:	e7e6      	b.n	80093a4 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4620      	mov	r0, r4
 80093da:	4798      	blx	r3
 80093dc:	2800      	cmp	r0, #0
 80093de:	d1e1      	bne.n	80093a4 <jpeg_finish_decompress+0x34>
}
 80093e0:	bd10      	pop	{r4, pc}

080093e2 <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80093e2:	6943      	ldr	r3, [r0, #20]
 80093e4:	2bcc      	cmp	r3, #204	; 0xcc
{
 80093e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ea:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80093ec:	d008      	beq.n	8009400 <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80093ee:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 80093fc:	23cc      	movs	r3, #204	; 0xcc
 80093fe:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009400:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8009404:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8009406:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	b9f3      	cbnz	r3, 800944c <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800940e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 8009410:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009412:	2b00      	cmp	r3, #0
 8009414:	bf14      	ite	ne
 8009416:	23ce      	movne	r3, #206	; 0xce
 8009418:	23cd      	moveq	r3, #205	; 0xcd
 800941a:	6163      	str	r3, [r4, #20]
}
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 8009420:	68a3      	ldr	r3, [r4, #8]
 8009422:	b123      	cbz	r3, 800942e <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009424:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009426:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800942e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009432:	462a      	mov	r2, r5
 8009434:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8009436:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800943a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800943e:	2300      	movs	r3, #0
 8009440:	4619      	mov	r1, r3
 8009442:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009444:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009448:	42bb      	cmp	r3, r7
 800944a:	d011      	beq.n	8009470 <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 800944c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009450:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009452:	4291      	cmp	r1, r2
 8009454:	d3e4      	bcc.n	8009420 <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009456:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800945a:	4620      	mov	r0, r4
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009460:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009464:	4620      	mov	r0, r4
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800946a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800946e:	e7ca      	b.n	8009406 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8009470:	2000      	movs	r0, #0
 8009472:	e7d3      	b.n	800941c <output_pass_setup+0x3a>

08009474 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009474:	6943      	ldr	r3, [r0, #20]
 8009476:	2bca      	cmp	r3, #202	; 0xca
{
 8009478:	b510      	push	{r4, lr}
 800947a:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 800947c:	d109      	bne.n	8009492 <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800947e:	f005 f8cf 	bl	800e620 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8009482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009484:	b11b      	cbz	r3, 800948e <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009486:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009488:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800948a:	6163      	str	r3, [r4, #20]
}
 800948c:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800948e:	23cb      	movs	r3, #203	; 0xcb
 8009490:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8009492:	6962      	ldr	r2, [r4, #20]
 8009494:	2acb      	cmp	r2, #203	; 0xcb
 8009496:	d12c      	bne.n	80094f2 <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009498:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	b1fb      	cbz	r3, 80094e0 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 80094a0:	68a3      	ldr	r3, [r4, #8]
 80094a2:	b113      	cbz	r3, 80094aa <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4620      	mov	r0, r4
 80094a8:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80094aa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80094ae:	4620      	mov	r0, r4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0e9      	beq.n	800948c <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 80094b8:	2802      	cmp	r0, #2
 80094ba:	d011      	beq.n	80094e0 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 80094bc:	68a3      	ldr	r3, [r4, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0ee      	beq.n	80094a0 <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 80094c2:	f020 0002 	bic.w	r0, r0, #2
 80094c6:	2801      	cmp	r0, #1
 80094c8:	d1ea      	bne.n	80094a0 <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	6899      	ldr	r1, [r3, #8]
 80094ce:	3201      	adds	r2, #1
 80094d0:	428a      	cmp	r2, r1
 80094d2:	605a      	str	r2, [r3, #4]
 80094d4:	dbe4      	blt.n	80094a0 <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 80094d6:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 80094da:	440a      	add	r2, r1
 80094dc:	609a      	str	r2, [r3, #8]
 80094de:	e7df      	b.n	80094a0 <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 80094e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80094e4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 80094e8:	4620      	mov	r0, r4
}
 80094ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 80094ee:	f7ff bf78 	b.w	80093e2 <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 80094f2:	2acc      	cmp	r2, #204	; 0xcc
 80094f4:	d0f8      	beq.n	80094e8 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	2115      	movs	r1, #21
 80094fa:	4620      	mov	r0, r4
 80094fc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4798      	blx	r3
 8009504:	e7f0      	b.n	80094e8 <jpeg_start_decompress+0x74>

08009506 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009506:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009508:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 800950a:	6942      	ldr	r2, [r0, #20]
{
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8009510:	2acd      	cmp	r2, #205	; 0xcd
 8009512:	d005      	beq.n	8009520 <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009514:	6803      	ldr	r3, [r0, #0]
 8009516:	2115      	movs	r1, #21
 8009518:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8009520:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009524:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009526:	429a      	cmp	r2, r3
 8009528:	d30a      	bcc.n	8009540 <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	227e      	movs	r2, #126	; 0x7e
 800952e:	4620      	mov	r0, r4
 8009530:	f04f 31ff 	mov.w	r1, #4294967295
 8009534:	615a      	str	r2, [r3, #20]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	4798      	blx	r3
    return 0;
 800953a:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 800953c:	b003      	add	sp, #12
 800953e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8009540:	68a0      	ldr	r0, [r4, #8]
 8009542:	b120      	cbz	r0, 800954e <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009544:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009548:	6803      	ldr	r3, [r0, #0]
 800954a:	4620      	mov	r0, r4
 800954c:	4798      	blx	r3
  row_ctr = 0;
 800954e:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009550:	4620      	mov	r0, r4
 8009552:	aa01      	add	r2, sp, #4
 8009554:	4629      	mov	r1, r5
  row_ctr = 0;
 8009556:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009558:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800955c:	685f      	ldr	r7, [r3, #4]
 800955e:	4633      	mov	r3, r6
 8009560:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8009562:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009566:	9801      	ldr	r0, [sp, #4]
 8009568:	4403      	add	r3, r0
 800956a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 800956e:	e7e5      	b.n	800953c <jpeg_read_scanlines+0x36>

08009570 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8009570:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 8009572:	6984      	ldr	r4, [r0, #24]
{
 8009574:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 8009576:	6863      	ldr	r3, [r4, #4]
 8009578:	b943      	cbnz	r3, 800958c <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800957a:	68e3      	ldr	r3, [r4, #12]
 800957c:	4798      	blx	r3
 800957e:	b928      	cbnz	r0, 800958c <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	2219      	movs	r2, #25
 8009584:	4628      	mov	r0, r5
 8009586:	615a      	str	r2, [r3, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4798      	blx	r3
  src->bytes_in_buffer--;
 800958c:	6863      	ldr	r3, [r4, #4]
 800958e:	3b01      	subs	r3, #1
 8009590:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	6022      	str	r2, [r4, #0]
}
 8009598:	7818      	ldrb	r0, [r3, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}

0800959c <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a0:	4680      	mov	r8, r0
 80095a2:	460d      	mov	r5, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 80095a4:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 80095a8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 80095ac:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
  while (e->a < 0x8000L) {
 80095b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80095b4:	db1c      	blt.n	80095f0 <arith_decode+0x54>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 80095b6:	7828      	ldrb	r0, [r5, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 80095b8:	4929      	ldr	r1, [pc, #164]	; (8009660 <arith_decode+0xc4>)
 80095ba:	f000 067f 	and.w	r6, r0, #127	; 0x7f

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 80095be:	68a7      	ldr	r7, [r4, #8]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 80095c0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
  temp = e->a - qe;
 80095c4:	eba2 4221 	sub.w	r2, r2, r1, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 80095c8:	ea4f 2c21 	mov.w	ip, r1, asr #8
  temp <<= e->ct;
 80095cc:	fa02 f303 	lsl.w	r3, r2, r3
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 80095d0:	140e      	asrs	r6, r1, #16
  e->a = temp;
 80095d2:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 80095d4:	429f      	cmp	r7, r3
 80095d6:	db34      	blt.n	8009642 <arith_decode+0xa6>
    e->c -= temp;
 80095d8:	1aff      	subs	r7, r7, r3
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 80095da:	4296      	cmp	r6, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80095dc:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
      e->a = qe;
 80095e0:	60e6      	str	r6, [r4, #12]
    e->c -= temp;
 80095e2:	60a7      	str	r7, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80095e4:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 80095e6:	dd34      	ble.n	8009652 <arith_decode+0xb6>
    /* Conditional MPS (more probable symbol) exchange */
    if (e->a < qe) {
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
      sv ^= 0x80;		/* Exchange LPS/MPS */
    } else {
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80095e8:	ea83 030c 	eor.w	r3, r3, ip
 80095ec:	702b      	strb	r3, [r5, #0]
 80095ee:	e034      	b.n	800965a <arith_decode+0xbe>
    if (--e->ct < 0) {
 80095f0:	3b01      	subs	r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	da1a      	bge.n	800962e <arith_decode+0x92>
      if (cinfo->unread_marker)
 80095f8:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 80095fc:	b96b      	cbnz	r3, 800961a <arith_decode+0x7e>
	data = get_byte(cinfo);	/* read next input byte */
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff ffb6 	bl	8009570 <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009604:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8009606:	4606      	mov	r6, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009608:	d108      	bne.n	800961c <arith_decode+0x80>
	  do data = get_byte(cinfo);
 800960a:	4640      	mov	r0, r8
 800960c:	f7ff ffb0 	bl	8009570 <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8009610:	28ff      	cmp	r0, #255	; 0xff
 8009612:	d0fa      	beq.n	800960a <arith_decode+0x6e>
	  if (data == 0)
 8009614:	b110      	cbz	r0, 800961c <arith_decode+0x80>
	    cinfo->unread_marker = data;
 8009616:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 800961a:	2600      	movs	r6, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009628:	60a6      	str	r6, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800962a:	d404      	bmi.n	8009636 <arith_decode+0x9a>
 800962c:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800962e:	68e3      	ldr	r3, [r4, #12]
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	60e3      	str	r3, [r4, #12]
 8009634:	e7ba      	b.n	80095ac <arith_decode+0x10>
	if (++e->ct == 0)
 8009636:	3309      	adds	r3, #9
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f7      	bne.n	800962e <arith_decode+0x92>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800963e:	60e7      	str	r7, [r4, #12]
 8009640:	e7f5      	b.n	800962e <arith_decode+0x92>
  } else if (e->a < 0x8000L) {
 8009642:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009646:	da08      	bge.n	800965a <arith_decode+0xbe>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009648:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 800964c:	4296      	cmp	r6, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800964e:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 8009650:	ddca      	ble.n	80095e8 <arith_decode+0x4c>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009652:	404b      	eors	r3, r1
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8009654:	f080 0080 	eor.w	r0, r0, #128	; 0x80
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009658:	702b      	strb	r3, [r5, #0]
    }
  }

  return sv >> 7;
}
 800965a:	09c0      	lsrs	r0, r0, #7
 800965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009660:	0802cb14 	.word	0x0802cb14

08009664 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8009664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8009668:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800966c:	f500 71a8 	add.w	r1, r0, #336	; 0x150
{
 8009670:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009672:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8009676:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800967a:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8088 	beq.w	8009792 <start_pass+0x12e>
    if (cinfo->Ss == 0) {
 8009682:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8009686:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800968a:	b95a      	cbnz	r2, 80096a4 <start_pass+0x40>
      if (cinfo->Se != 0)
 800968c:	b1a1      	cbz	r1, 80096b8 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	2611      	movs	r6, #17
 8009692:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8009696:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800969a:	6258      	str	r0, [r3, #36]	; 0x24
 800969c:	4620      	mov	r0, r4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4798      	blx	r3
 80096a2:	e00f      	b.n	80096c4 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 80096a4:	428a      	cmp	r2, r1
 80096a6:	dcf2      	bgt.n	800968e <start_pass+0x2a>
 80096a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80096ac:	428b      	cmp	r3, r1
 80096ae:	dbee      	blt.n	800968e <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 80096b0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d1ea      	bne.n	800968e <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 80096b8:	b117      	cbz	r7, 80096c0 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 80096ba:	1e7b      	subs	r3, r7, #1
 80096bc:	4283      	cmp	r3, r0
 80096be:	d1e6      	bne.n	800968e <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 80096c0:	280d      	cmp	r0, #13
 80096c2:	dce4      	bgt.n	800968e <start_pass+0x2a>
 80096c4:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 80096c8:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 80096cc:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096d0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 80096d4:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096d8:	454b      	cmp	r3, r9
 80096da:	dc1f      	bgt.n	800971c <start_pass+0xb8>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 80096dc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d153      	bne.n	800978c <start_pass+0x128>
      if (cinfo->Ss == 0)
 80096e4:	4b63      	ldr	r3, [pc, #396]	; (8009874 <start_pass+0x210>)
 80096e6:	4964      	ldr	r1, [pc, #400]	; (8009878 <start_pass+0x214>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	bf08      	it	eq
 80096ec:	460b      	moveq	r3, r1
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 80096ee:	f04f 0800 	mov.w	r8, #0
 80096f2:	f105 0914 	add.w	r9, r5, #20
 80096f6:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 80096f8:	46c2      	mov	sl, r8
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 80096fa:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096fc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009700:	4543      	cmp	r3, r8
 8009702:	dc5f      	bgt.n	80097c4 <start_pass+0x160>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 8009704:	2300      	movs	r3, #0
  entropy->a = 0;
 8009706:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800970a:	f06f 030f 	mvn.w	r3, #15
 800970e:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8009710:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009714:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009716:	b003      	add	sp, #12
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800971c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009720:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009724:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009726:	0230      	lsls	r0, r6, #8
 8009728:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800972c:	b162      	cbz	r2, 8009748 <start_pass+0xe4>
 800972e:	580a      	ldr	r2, [r1, r0]
 8009730:	2a00      	cmp	r2, #0
 8009732:	da09      	bge.n	8009748 <start_pass+0xe4>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009734:	6822      	ldr	r2, [r4, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	f04f 31ff 	mov.w	r1, #4294967295
 800973c:	4620      	mov	r0, r4
 800973e:	61d3      	str	r3, [r2, #28]
 8009740:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009744:	6852      	ldr	r2, [r2, #4]
 8009746:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009748:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 800974c:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8009750:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8009754:	42ba      	cmp	r2, r7
 8009756:	da02      	bge.n	800975e <start_pass+0xfa>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009758:	f109 0901 	add.w	r9, r9, #1
 800975c:	e7b8      	b.n	80096d0 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800975e:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 8009762:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009766:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800976a:	4291      	cmp	r1, r2
 800976c:	d008      	beq.n	8009780 <start_pass+0x11c>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	f04f 31ff 	mov.w	r1, #4294967295
 8009774:	4620      	mov	r0, r4
 8009776:	61d7      	str	r7, [r2, #28]
 8009778:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800977c:	6852      	ldr	r2, [r2, #4]
 800977e:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 8009780:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009784:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 8009786:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800978a:	e7e1      	b.n	8009750 <start_pass+0xec>
      if (cinfo->Ss == 0)
 800978c:	4b3b      	ldr	r3, [pc, #236]	; (800987c <start_pass+0x218>)
 800978e:	493c      	ldr	r1, [pc, #240]	; (8009880 <start_pass+0x21c>)
 8009790:	e7aa      	b.n	80096e8 <start_pass+0x84>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009792:	b96a      	cbnz	r2, 80097b0 <start_pass+0x14c>
 8009794:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8009798:	b953      	cbnz	r3, 80097b0 <start_pass+0x14c>
 800979a:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800979e:	b93b      	cbnz	r3, 80097b0 <start_pass+0x14c>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 80097a0:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 80097a4:	2b3f      	cmp	r3, #63	; 0x3f
 80097a6:	dc0b      	bgt.n	80097c0 <start_pass+0x15c>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 80097a8:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d007      	beq.n	80097c0 <start_pass+0x15c>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	227d      	movs	r2, #125	; 0x7d
 80097b4:	f04f 31ff 	mov.w	r1, #4294967295
 80097b8:	4620      	mov	r0, r4
 80097ba:	615a      	str	r2, [r3, #20]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	4798      	blx	r3
      if (cinfo->Ss == 0)
 80097c0:	4b30      	ldr	r3, [pc, #192]	; (8009884 <start_pass+0x220>)
 80097c2:	e794      	b.n	80096ee <start_pass+0x8a>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80097c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 80097c8:	f856 bf04 	ldr.w	fp, [r6, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80097cc:	b133      	cbz	r3, 80097dc <start_pass+0x178>
 80097ce:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80097d2:	bb43      	cbnz	r3, 8009826 <start_pass+0x1c2>
 80097d4:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d13a      	bne.n	8009852 <start_pass+0x1ee>
      tbl = compptr->dc_tbl_no;
 80097dc:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 80097e0:	2f0f      	cmp	r7, #15
 80097e2:	d906      	bls.n	80097f2 <start_pass+0x18e>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	2232      	movs	r2, #50	; 0x32
 80097e8:	4620      	mov	r0, r4
 80097ea:	e9c3 2705 	strd	r2, r7, [r3, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 80097f2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	b933      	cbnz	r3, 8009808 <start_pass+0x1a4>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	2240      	movs	r2, #64	; 0x40
 80097fe:	2101      	movs	r1, #1
 8009800:	4620      	mov	r0, r4
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4798      	blx	r3
 8009806:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8009808:	2240      	movs	r2, #64	; 0x40
 800980a:	2100      	movs	r1, #0
 800980c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800980e:	f020 f9c3 	bl	8029b98 <memset>
      entropy->last_dc_val[ci] = 0;
 8009812:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8009816:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800981a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800981e:	b9eb      	cbnz	r3, 800985c <start_pass+0x1f8>
 8009820:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009824:	b1ab      	cbz	r3, 8009852 <start_pass+0x1ee>
      tbl = compptr->ac_tbl_no;
 8009826:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800982a:	2f0f      	cmp	r7, #15
 800982c:	d819      	bhi.n	8009862 <start_pass+0x1fe>
      if (entropy->ac_stats[tbl] == NULL)
 800982e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009834:	b93b      	cbnz	r3, 8009846 <start_pass+0x1e2>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009836:	6863      	ldr	r3, [r4, #4]
 8009838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800983c:	2101      	movs	r1, #1
 800983e:	4620      	mov	r0, r4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4798      	blx	r3
 8009844:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800984a:	2100      	movs	r1, #0
 800984c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800984e:	f020 f9a3 	bl	8029b98 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009852:	f108 0801 	add.w	r8, r8, #1
 8009856:	f109 0904 	add.w	r9, r9, #4
 800985a:	e74f      	b.n	80096fc <start_pass+0x98>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800985c:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009860:	e7e0      	b.n	8009824 <start_pass+0x1c0>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	2232      	movs	r2, #50	; 0x32
 8009866:	4620      	mov	r0, r4
 8009868:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4798      	blx	r3
 8009870:	e7dd      	b.n	800982e <start_pass+0x1ca>
 8009872:	bf00      	nop
 8009874:	08009cf5 	.word	0x08009cf5
 8009878:	08009e29 	.word	0x08009e29
 800987c:	08009b7d 	.word	0x08009b7d
 8009880:	08009ca3 	.word	0x08009ca3
 8009884:	0800992b 	.word	0x0800992b

08009888 <process_restart>:
{
 8009888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800988c:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8009890:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	4798      	blx	r3
 8009896:	b928      	cbnz	r0, 80098a4 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	2219      	movs	r2, #25
 800989c:	4620      	mov	r0, r4
 800989e:	615a      	str	r2, [r3, #20]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4798      	blx	r3
{
 80098a4:	2600      	movs	r6, #0
 80098a6:	f105 0714 	add.w	r7, r5, #20
 80098aa:	f504 78a8 	add.w	r8, r4, #336	; 0x150
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 80098ae:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80098b0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80098b4:	42b3      	cmp	r3, r6
 80098b6:	dc0a      	bgt.n	80098ce <process_restart+0x46>
  entropy->c = 0;
 80098b8:	2300      	movs	r3, #0
  entropy->a = 0;
 80098ba:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 80098be:	f06f 030f 	mvn.w	r3, #15
 80098c2:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 80098c4:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80098c8:	636b      	str	r3, [r5, #52]	; 0x34
}
 80098ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80098ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 80098d2:	f858 af04 	ldr.w	sl, [r8, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80098d6:	b12b      	cbz	r3, 80098e4 <process_restart+0x5c>
 80098d8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80098dc:	b9ab      	cbnz	r3, 800990a <process_restart+0x82>
 80098de:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80098e2:	b9e3      	cbnz	r3, 800991e <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 80098e4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80098e8:	2240      	movs	r2, #64	; 0x40
 80098ea:	2100      	movs	r1, #0
 80098ec:	330e      	adds	r3, #14
 80098ee:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80098f2:	f020 f951 	bl	8029b98 <memset>
      entropy->last_dc_val[ci] = 0;
 80098f6:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 80098fa:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 80098fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009902:	b97b      	cbnz	r3, 8009924 <process_restart+0x9c>
 8009904:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009908:	b14b      	cbz	r3, 800991e <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800990a:	f8da 3018 	ldr.w	r3, [sl, #24]
 800990e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009912:	2100      	movs	r1, #0
 8009914:	331e      	adds	r3, #30
 8009916:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800991a:	f020 f93d 	bl	8029b98 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800991e:	3601      	adds	r6, #1
 8009920:	3704      	adds	r7, #4
 8009922:	e7c5      	b.n	80098b0 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009924:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009928:	e7ee      	b.n	8009908 <process_restart+0x80>

0800992a <decode_mcu>:
{
 800992a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800992e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009932:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009934:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8009938:	ed2d 8b02 	vpush	{d8}
 800993c:	b087      	sub	sp, #28
 800993e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 8009940:	b133      	cbz	r3, 8009950 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 8009942:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009944:	b90b      	cbnz	r3, 800994a <decode_mcu+0x20>
      process_restart(cinfo);
 8009946:	f7ff ff9f 	bl	8009888 <process_restart>
    entropy->restarts_to_go--;
 800994a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800994c:	3b01      	subs	r3, #1
 800994e:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009950:	692b      	ldr	r3, [r5, #16]
 8009952:	3301      	adds	r3, #1
 8009954:	f000 80aa 	beq.w	8009aac <decode_mcu+0x182>
  natural_order = cinfo->natural_order;
 8009958:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800995c:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800995e:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009960:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 8009964:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009966:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800996a:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800996e:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009972:	42bb      	cmp	r3, r7
 8009974:	f340 809a 	ble.w	8009aac <decode_mcu+0x182>
    block = MCU_data[blkn];
 8009978:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800997a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800997c:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800997e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009982:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8009984:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009988:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800998a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800998e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8009992:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009996:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800999a:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800999c:	6952      	ldr	r2, [r2, #20]
 800999e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 80099a2:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 80099a4:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 80099a8:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 80099aa:	4631      	mov	r1, r6
 80099ac:	f7ff fdf6 	bl	800959c <arith_decode>
 80099b0:	bb68      	cbnz	r0, 8009a0e <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 80099b2:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 80099b6:	f8db 3014 	ldr.w	r3, [fp, #20]
 80099ba:	9a00      	ldr	r2, [sp, #0]
 80099bc:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 80099be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 80c3 	beq.w	8009b4e <decode_mcu+0x224>
    tbl = compptr->ac_tbl_no;
 80099c8:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 80099ca:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 80099cc:	699b      	ldr	r3, [r3, #24]
    k = 0;
 80099ce:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 80099d2:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 80099d6:	f8db 1078 	ldr.w	r1, [fp, #120]	; 0x78
 80099da:	eb06 0246 	add.w	r2, r6, r6, lsl #1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 80099de:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 80099e0:	eb01 0902 	add.w	r9, r1, r2
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7ff fdd9 	bl	800959c <arith_decode>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f040 80af 	bne.w	8009b4e <decode_mcu+0x224>
	if (arith_decode(cinfo, st + 1)) break;
 80099f0:	f109 0101 	add.w	r1, r9, #1
 80099f4:	4620      	mov	r0, r4
	k++;
 80099f6:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 80099f8:	f7ff fdd0 	bl	800959c <arith_decode>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d16d      	bne.n	8009adc <decode_mcu+0x1b2>
	if (k >= cinfo->lim_Se) {
 8009a00:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 8009a04:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 8009a08:	42b2      	cmp	r2, r6
 8009a0a:	dcf1      	bgt.n	80099f0 <decode_mcu+0xc6>
 8009a0c:	e043      	b.n	8009a96 <decode_mcu+0x16c>
      sign = arith_decode(cinfo, st + 1);
 8009a0e:	1c71      	adds	r1, r6, #1
 8009a10:	4620      	mov	r0, r4
 8009a12:	f7ff fdc3 	bl	800959c <arith_decode>
      st += 2; st += sign;
 8009a16:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8009a18:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009a1a:	4620      	mov	r0, r4
      st += 2; st += sign;
 8009a1c:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009a20:	4651      	mov	r1, sl
 8009a22:	f7ff fdbb 	bl	800959c <arith_decode>
 8009a26:	4606      	mov	r6, r0
 8009a28:	b140      	cbz	r0, 8009a3c <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8009a2a:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8009a2e:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 8009a32:	4651      	mov	r1, sl
 8009a34:	4620      	mov	r0, r4
 8009a36:	f7ff fdb1 	bl	800959c <arith_decode>
 8009a3a:	bb40      	cbnz	r0, 8009a8e <decode_mcu+0x164>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	4423      	add	r3, r4
 8009a40:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009a44:	4699      	mov	r9, r3
 8009a46:	2301      	movs	r3, #1
 8009a48:	fa03 f202 	lsl.w	r2, r3, r2
 8009a4c:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 8009a50:	db35      	blt.n	8009abe <decode_mcu+0x194>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009a52:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8009a56:	fa03 f202 	lsl.w	r2, r3, r2
 8009a5a:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009a5e:	bfcc      	ite	gt
 8009a60:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009a64:	f108 0201 	addle.w	r2, r8, #1
 8009a68:	0092      	lsls	r2, r2, #2
      st += 14;
 8009a6a:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 8009a6e:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009a70:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 8009a74:	1076      	asrs	r6, r6, #1
 8009a76:	d124      	bne.n	8009ac2 <decode_mcu+0x198>
      v += 1; if (sign) v = -v;
 8009a78:	f1b8 0f00 	cmp.w	r8, #0
 8009a7c:	d12b      	bne.n	8009ad6 <decode_mcu+0x1ac>
 8009a7e:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 8009a82:	f8db 2014 	ldr.w	r2, [fp, #20]
 8009a86:	444a      	add	r2, r9
 8009a88:	f8cb 2014 	str.w	r2, [fp, #20]
 8009a8c:	e793      	b.n	80099b6 <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 8009a8e:	0076      	lsls	r6, r6, #1
 8009a90:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8009a94:	d110      	bne.n	8009ab8 <decode_mcu+0x18e>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	2275      	movs	r2, #117	; 0x75
 8009a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	615a      	str	r2, [r3, #20]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8009aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aaa:	612b      	str	r3, [r5, #16]
}
 8009aac:	2001      	movs	r0, #1
 8009aae:	b007      	add	sp, #28
 8009ab0:	ecbd 8b02 	vpop	{d8}
 8009ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8009ab8:	f10a 0a01 	add.w	sl, sl, #1
 8009abc:	e7b9      	b.n	8009a32 <decode_mcu+0x108>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	e7d3      	b.n	8009a6a <decode_mcu+0x140>
	if (arith_decode(cinfo, st)) v |= m;
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	9102      	str	r1, [sp, #8]
 8009ac6:	f7ff fd69 	bl	800959c <arith_decode>
 8009aca:	9902      	ldr	r1, [sp, #8]
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0d1      	beq.n	8009a74 <decode_mcu+0x14a>
 8009ad0:	ea49 0906 	orr.w	r9, r9, r6
 8009ad4:	e7ce      	b.n	8009a74 <decode_mcu+0x14a>
      v += 1; if (sign) v = -v;
 8009ad6:	ea6f 0909 	mvn.w	r9, r9
 8009ada:	e7d2      	b.n	8009a82 <decode_mcu+0x158>
      st += 2;
 8009adc:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009ae0:	ee18 1a10 	vmov	r1, s16
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f7ff fd59 	bl	800959c <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009aea:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009aec:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009aee:	4620      	mov	r0, r4
 8009af0:	f7ff fd54 	bl	800959c <arith_decode>
 8009af4:	4680      	mov	r8, r0
 8009af6:	b1a8      	cbz	r0, 8009b24 <decode_mcu+0x1fa>
	if (arith_decode(cinfo, st)) {
 8009af8:	4649      	mov	r1, r9
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7ff fd4e 	bl	800959c <arith_decode>
 8009b00:	b180      	cbz	r0, 8009b24 <decode_mcu+0x1fa>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009b02:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 8009b06:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 8009b0a:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009b0e:	42b1      	cmp	r1, r6
 8009b10:	bfac      	ite	ge
 8009b12:	21bd      	movge	r1, #189	; 0xbd
 8009b14:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 8009b16:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7ff fd3d 	bl	800959c <arith_decode>
 8009b22:	b9b0      	cbnz	r0, 8009b52 <decode_mcu+0x228>
      st += 14;
 8009b24:	f109 010e 	add.w	r1, r9, #14
      v = m;
 8009b28:	46c1      	mov	r9, r8
      while (m >>= 1)
 8009b2a:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b2e:	d118      	bne.n	8009b62 <decode_mcu+0x238>
      v += 1; if (sign) v = -v;
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	bb03      	cbnz	r3, 8009b76 <decode_mcu+0x24c>
 8009b34:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 8009b38:	9b04      	ldr	r3, [sp, #16]
 8009b3a:	9900      	ldr	r1, [sp, #0]
 8009b3c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009b40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 8009b44:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	f73f af44 	bgt.w	80099d6 <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009b4e:	3701      	adds	r7, #1
 8009b50:	e70d      	b.n	800996e <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 8009b52:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009b56:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 8009b5a:	d09c      	beq.n	8009a96 <decode_mcu+0x16c>
	    st += 1;
 8009b5c:	f109 0901 	add.w	r9, r9, #1
 8009b60:	e7db      	b.n	8009b1a <decode_mcu+0x1f0>
	if (arith_decode(cinfo, st)) v |= m;
 8009b62:	4620      	mov	r0, r4
 8009b64:	9102      	str	r1, [sp, #8]
 8009b66:	f7ff fd19 	bl	800959c <arith_decode>
 8009b6a:	9902      	ldr	r1, [sp, #8]
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d0dc      	beq.n	8009b2a <decode_mcu+0x200>
 8009b70:	ea49 0908 	orr.w	r9, r9, r8
 8009b74:	e7d9      	b.n	8009b2a <decode_mcu+0x200>
      v += 1; if (sign) v = -v;
 8009b76:	ea6f 0209 	mvn.w	r2, r9
 8009b7a:	e7dd      	b.n	8009b38 <decode_mcu+0x20e>

08009b7c <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 8009b7c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009b88:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8009b8c:	ed2d 8b02 	vpush	{d8}
 8009b90:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 8009b92:	b133      	cbz	r3, 8009ba2 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 8009b94:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009b96:	b90b      	cbnz	r3, 8009b9c <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 8009b98:	f7ff fe76 	bl	8009888 <process_restart>
    entropy->restarts_to_go--;
 8009b9c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009ba2:	6933      	ldr	r3, [r6, #16]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	d076      	beq.n	8009c96 <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009ba8:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009bac:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009bae:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 8009bb2:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009bb6:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009bb8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 8009bbc:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009bc0:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 8009bc2:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009bc6:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009bca:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009bcc:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 8009bce:	2f00      	cmp	r7, #0
 8009bd0:	dc37      	bgt.n	8009c42 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009bd2:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009bd6:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009bda:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 8009bdc:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 8009be0:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009be4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	db54      	blt.n	8009c96 <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009bec:	1e6b      	subs	r3, r5, #1
 8009bee:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 8009bf0:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009bf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009bf6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009bfa:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 8009bfe:	dd05      	ble.n	8009c0c <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009c00:	4651      	mov	r1, sl
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff fcca 	bl	800959c <arith_decode>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d144      	bne.n	8009c96 <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 8009c0c:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 8009c10:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 8009c12:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 8009c16:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8009c1a:	b1d1      	cbz	r1, 8009c52 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 8009c1c:	f10a 0102 	add.w	r1, sl, #2
 8009c20:	4620      	mov	r0, r4
 8009c22:	f7ff fcbb 	bl	800959c <arith_decode>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d0dc      	beq.n	8009be4 <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 8009c2a:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 8009c2e:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 8009c32:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 8009c34:	bfb4      	ite	lt
 8009c36:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 8009c38:	9a01      	ldrge	r2, [sp, #4]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f8a8 3000 	strh.w	r3, [r8]
 8009c40:	e7d0      	b.n	8009be4 <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 8009c42:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009c46:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1c1      	bne.n	8009bd2 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 8009c4e:	3f01      	subs	r7, #1
 8009c50:	e7bd      	b.n	8009bce <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 8009c52:	f10a 0101 	add.w	r1, sl, #1
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff fca0 	bl	800959c <arith_decode>
 8009c5c:	b150      	cbz	r0, 8009c74 <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 8009c5e:	ee18 1a10 	vmov	r1, s16
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7ff fc9a 	bl	800959c <arith_decode>
	  *thiscoef = m1;
 8009c68:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	bf18      	it	ne
 8009c70:	4613      	movne	r3, r2
 8009c72:	e7e3      	b.n	8009c3c <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 8009c74:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 8009c78:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 8009c7c:	42aa      	cmp	r2, r5
 8009c7e:	dac5      	bge.n	8009c0c <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	2275      	movs	r2, #117	; 0x75
 8009c84:	f04f 31ff 	mov.w	r1, #4294967295
 8009c88:	4620      	mov	r0, r4
 8009c8a:	615a      	str	r2, [r3, #20]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 8009c90:	f04f 33ff 	mov.w	r3, #4294967295
 8009c94:	6133      	str	r3, [r6, #16]
}
 8009c96:	2001      	movs	r0, #1
 8009c98:	b005      	add	sp, #20
 8009c9a:	ecbd 8b02 	vpop	{d8}
 8009c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ca2 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 8009ca2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009caa:	4604      	mov	r4, r0
 8009cac:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009cae:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8009cb2:	b133      	cbz	r3, 8009cc2 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 8009cb4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009cb6:	b90b      	cbnz	r3, 8009cbc <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 8009cb8:	f7ff fde6 	bl	8009888 <process_restart>
    entropy->restarts_to_go--;
 8009cbc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009cc2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8009cc6:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 8009cc8:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009cca:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009ccc:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009cce:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009cd2:	42ab      	cmp	r3, r5
 8009cd4:	dc02      	bgt.n	8009cdc <decode_mcu_DC_refine+0x3a>
}
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff fc5c 	bl	800959c <arith_decode>
 8009ce4:	b120      	cbz	r0, 8009cf0 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 8009ce6:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8009cea:	8813      	ldrh	r3, [r2, #0]
 8009cec:	433b      	orrs	r3, r7
 8009cee:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009cf0:	3501      	adds	r5, #1
 8009cf2:	e7ec      	b.n	8009cce <decode_mcu_DC_refine+0x2c>

08009cf4 <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 8009cf4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	b087      	sub	sp, #28
 8009d00:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009d02:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8009d06:	b133      	cbz	r3, 8009d16 <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8009d08:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009d0a:	b90b      	cbnz	r3, 8009d10 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 8009d0c:	f7ff fdbc 	bl	8009888 <process_restart>
    entropy->restarts_to_go--;
 8009d10:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009d12:	3b01      	subs	r3, #1
 8009d14:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009d16:	6933      	ldr	r3, [r6, #16]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	d01d      	beq.n	8009d58 <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 8009d1c:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8009d1e:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 8009d22:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 8009d26:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009d28:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009d2c:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 8009d36:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009d38:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	db0b      	blt.n	8009d58 <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009d40:	1e6b      	subs	r3, r5, #1
 8009d42:	f8d9 1078 	ldr.w	r1, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8009d46:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009d48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009d4c:	eb01 0803 	add.w	r8, r1, r3
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8009d50:	4641      	mov	r1, r8
 8009d52:	f7ff fc23 	bl	800959c <arith_decode>
 8009d56:	b1b0      	cbz	r0, 8009d86 <decode_mcu_AC_first+0x92>
}
 8009d58:	2001      	movs	r0, #1
 8009d5a:	b007      	add	sp, #28
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 8009d60:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 8009d62:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 8009d66:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 8009d6a:	42aa      	cmp	r2, r5
 8009d6c:	da0b      	bge.n	8009d86 <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	2275      	movs	r2, #117	; 0x75
 8009d72:	f04f 31ff 	mov.w	r1, #4294967295
 8009d76:	4620      	mov	r0, r4
 8009d78:	615a      	str	r2, [r3, #20]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8009d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d82:	6133      	str	r3, [r6, #16]
	    return TRUE;
 8009d84:	e7e8      	b.n	8009d58 <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 8009d86:	f108 0101 	add.w	r1, r8, #1
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7ff fc06 	bl	800959c <arith_decode>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d0e5      	beq.n	8009d60 <decode_mcu_AC_first+0x6c>
    st += 2;
 8009d94:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8009d98:	4659      	mov	r1, fp
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f7ff fbfe 	bl	800959c <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 8009da0:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8009da2:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 8009da4:	4620      	mov	r0, r4
 8009da6:	f7ff fbf9 	bl	800959c <arith_decode>
 8009daa:	4607      	mov	r7, r0
 8009dac:	b1b0      	cbz	r0, 8009ddc <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 8009dae:	4641      	mov	r1, r8
 8009db0:	4620      	mov	r0, r4
 8009db2:	f7ff fbf3 	bl	800959c <arith_decode>
 8009db6:	b188      	cbz	r0, 8009ddc <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009db8:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 8009dba:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 8009dbc:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009dc0:	18e1      	adds	r1, r4, r3
 8009dc2:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 8009dc6:	42a9      	cmp	r1, r5
 8009dc8:	bfac      	ite	ge
 8009dca:	21bd      	movge	r1, #189	; 0xbd
 8009dcc:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 8009dce:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 8009dd2:	4641      	mov	r1, r8
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f7ff fbe1 	bl	800959c <arith_decode>
 8009dda:	b988      	cbnz	r0, 8009e00 <decode_mcu_AC_first+0x10c>
    st += 14;
 8009ddc:	f108 010e 	add.w	r1, r8, #14
    v = m;
 8009de0:	463a      	mov	r2, r7
    while (m >>= 1)
 8009de2:	107f      	asrs	r7, r7, #1
 8009de4:	d113      	bne.n	8009e0e <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 8009de6:	9b03      	ldr	r3, [sp, #12]
 8009de8:	b9e3      	cbnz	r3, 8009e24 <decode_mcu_AC_first+0x130>
 8009dea:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8009dec:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 8009df0:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009df4:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8009df6:	408a      	lsls	r2, r1
 8009df8:	9902      	ldr	r1, [sp, #8]
 8009dfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009dfe:	e79b      	b.n	8009d38 <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 8009e00:	007f      	lsls	r7, r7, #1
 8009e02:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8009e06:	d0b2      	beq.n	8009d6e <decode_mcu_AC_first+0x7a>
	  st += 1;
 8009e08:	f108 0801 	add.w	r8, r8, #1
 8009e0c:	e7e1      	b.n	8009dd2 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 8009e0e:	4620      	mov	r0, r4
 8009e10:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009e14:	f7ff fbc2 	bl	800959c <arith_decode>
 8009e18:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d0e0      	beq.n	8009de2 <decode_mcu_AC_first+0xee>
 8009e20:	433a      	orrs	r2, r7
 8009e22:	e7de      	b.n	8009de2 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 8009e24:	43d2      	mvns	r2, r2
 8009e26:	e7e1      	b.n	8009dec <decode_mcu_AC_first+0xf8>

08009e28 <decode_mcu_DC_first>:
{
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8009e2c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009e30:	b085      	sub	sp, #20
 8009e32:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009e34:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8009e38:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 8009e3a:	b133      	cbz	r3, 8009e4a <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8009e3c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009e3e:	b90b      	cbnz	r3, 8009e44 <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 8009e40:	f7ff fd22 	bl	8009888 <process_restart>
    entropy->restarts_to_go--;
 8009e44:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009e46:	3b01      	subs	r3, #1
 8009e48:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009e4a:	6933      	ldr	r3, [r6, #16]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	d07b      	beq.n	8009f48 <decode_mcu_DC_first+0x120>
 8009e50:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009e54:	f04f 0900 	mov.w	r9, #0
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009e5e:	454b      	cmp	r3, r9
 8009e60:	dd72      	ble.n	8009f48 <decode_mcu_DC_first+0x120>
    block = MCU_data[blkn];
 8009e62:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 8009e64:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8009e66:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 8009e68:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8009e6c:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 8009e6e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009e72:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8009e74:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009e78:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 8009e7c:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009e80:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8009e84:	6952      	ldr	r2, [r2, #20]
 8009e86:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 8009e8a:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009e8c:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 8009e90:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 8009e92:	4629      	mov	r1, r5
 8009e94:	f7ff fb82 	bl	800959c <arith_decode>
 8009e98:	b958      	cbnz	r0, 8009eb2 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 8009e9a:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 8009e9e:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009ea2:	f109 0901 	add.w	r9, r9, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 8009ea6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009eaa:	4093      	lsls	r3, r2
 8009eac:	9a02      	ldr	r2, [sp, #8]
 8009eae:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009eb0:	e7d3      	b.n	8009e5a <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 8009eb2:	1c69      	adds	r1, r5, #1
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7ff fb71 	bl	800959c <arith_decode>
      st += 2; st += sign;
 8009eba:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8009ebc:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009ebe:	4620      	mov	r0, r4
      st += 2; st += sign;
 8009ec0:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009ec4:	4659      	mov	r1, fp
 8009ec6:	f7ff fb69 	bl	800959c <arith_decode>
 8009eca:	4605      	mov	r5, r0
 8009ecc:	b140      	cbz	r0, 8009ee0 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8009ece:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 8009ed2:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 8009ed6:	4659      	mov	r1, fp
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f7ff fb5f 	bl	800959c <arith_decode>
 8009ede:	bb20      	cbnz	r0, 8009f2a <decode_mcu_DC_first+0x102>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8009ee0:	9b00      	ldr	r3, [sp, #0]
 8009ee2:	4423      	add	r3, r4
 8009ee4:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009ee8:	4698      	mov	r8, r3
 8009eea:	2301      	movs	r3, #1
 8009eec:	fa03 f202 	lsl.w	r2, r3, r2
 8009ef0:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 8009ef4:	db2f      	blt.n	8009f56 <decode_mcu_DC_first+0x12e>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009ef6:	f898 20f8 	ldrb.w	r2, [r8, #248]	; 0xf8
 8009efa:	fa03 f202 	lsl.w	r2, r3, r2
 8009efe:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009f02:	bfcc      	ite	gt
 8009f04:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009f06:	1c7a      	addle	r2, r7, #1
 8009f08:	0092      	lsls	r2, r2, #2
      st += 14;
 8009f0a:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 8009f0e:	46a8      	mov	r8, r5
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009f10:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
      while (m >>= 1)
 8009f14:	106d      	asrs	r5, r5, #1
 8009f16:	d120      	bne.n	8009f5a <decode_mcu_DC_first+0x132>
      v += 1; if (sign) v = -v;
 8009f18:	bb4f      	cbnz	r7, 8009f6e <decode_mcu_DC_first+0x146>
 8009f1a:	f108 0801 	add.w	r8, r8, #1
      entropy->last_dc_val[ci] += v;
 8009f1e:	f8da 2014 	ldr.w	r2, [sl, #20]
 8009f22:	4442      	add	r2, r8
 8009f24:	f8ca 2014 	str.w	r2, [sl, #20]
 8009f28:	e7b9      	b.n	8009e9e <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 8009f2a:	006d      	lsls	r5, r5, #1
 8009f2c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009f30:	d10e      	bne.n	8009f50 <decode_mcu_DC_first+0x128>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	2275      	movs	r2, #117	; 0x75
 8009f36:	f04f 31ff 	mov.w	r1, #4294967295
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	615a      	str	r2, [r3, #20]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8009f42:	f04f 33ff 	mov.w	r3, #4294967295
 8009f46:	6133      	str	r3, [r6, #16]
}
 8009f48:	2001      	movs	r0, #1
 8009f4a:	b005      	add	sp, #20
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8009f50:	f10b 0b01 	add.w	fp, fp, #1
 8009f54:	e7bf      	b.n	8009ed6 <decode_mcu_DC_first+0xae>
 8009f56:	2200      	movs	r2, #0
 8009f58:	e7d7      	b.n	8009f0a <decode_mcu_DC_first+0xe2>
	if (arith_decode(cinfo, st)) v |= m;
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	9100      	str	r1, [sp, #0]
 8009f5e:	f7ff fb1d 	bl	800959c <arith_decode>
 8009f62:	9900      	ldr	r1, [sp, #0]
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0d5      	beq.n	8009f14 <decode_mcu_DC_first+0xec>
 8009f68:	ea48 0805 	orr.w	r8, r8, r5
 8009f6c:	e7d2      	b.n	8009f14 <decode_mcu_DC_first+0xec>
      v += 1; if (sign) v = -v;
 8009f6e:	ea6f 0808 	mvn.w	r8, r8
 8009f72:	e7d4      	b.n	8009f1e <decode_mcu_DC_first+0xf6>

08009f74 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009f74:	6843      	ldr	r3, [r0, #4]
 8009f76:	22bc      	movs	r2, #188	; 0xbc
 8009f78:	2101      	movs	r1, #1
 8009f7a:	681b      	ldr	r3, [r3, #0]
{
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009f80:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 8009f82:	4b14      	ldr	r3, [pc, #80]	; (8009fd4 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009f84:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 8009f86:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 8009f8a:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 8009f8c:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 8009f90:	2100      	movs	r1, #0
 8009f92:	f01f fe01 	bl	8029b98 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 8009f96:	2371      	movs	r3, #113	; 0x71
 8009f98:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 8009f9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009fa0:	b17b      	cbz	r3, 8009fc2 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009fa2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	6863      	ldr	r3, [r4, #4]
 8009fa8:	4620      	mov	r0, r4
 8009faa:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009fac:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4798      	blx	r3
 8009fb2:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 8009fb4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fba:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 8009fbe:	42ab      	cmp	r3, r5
 8009fc0:	dc00      	bgt.n	8009fc4 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 8009fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009fca:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 8009fcc:	f01f fde4 	bl	8029b98 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009fd0:	e7f2      	b.n	8009fb8 <jinit_arith_decoder+0x44>
 8009fd2:	bf00      	nop
 8009fd4:	08009665 	.word	0x08009665

08009fd8 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 8009fd8:	4770      	bx	lr
	...

08009fdc <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 8009fdc:	6803      	ldr	r3, [r0, #0]
 8009fde:	227b      	movs	r2, #123	; 0x7b
 8009fe0:	f04f 31ff 	mov.w	r1, #4294967295
{
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 8009fe8:	615a      	str	r2, [r3, #20]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 8009fee:	69a3      	ldr	r3, [r4, #24]
 8009ff0:	4a02      	ldr	r2, [pc, #8]	; (8009ffc <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 8009ff2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 8009ff4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	605a      	str	r2, [r3, #4]
}
 8009ffa:	bd10      	pop	{r4, pc}
 8009ffc:	0802ccdc 	.word	0x0802ccdc

0800a000 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800a000:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800a002:	1e0c      	subs	r4, r1, #0
{
 800a004:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800a006:	dd08      	ble.n	800a01a <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800a008:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800a00a:	686b      	ldr	r3, [r5, #4]
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	db05      	blt.n	800a01c <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800a010:	682a      	ldr	r2, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a012:	1b1b      	subs	r3, r3, r4
    src->next_input_byte += (size_t) num_bytes;
 800a014:	4422      	add	r2, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a016:	606b      	str	r3, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800a018:	602a      	str	r2, [r5, #0]
  }
}
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
      num_bytes -= (long) src->bytes_in_buffer;
 800a01c:	1ae4      	subs	r4, r4, r3
      (void) (*src->fill_input_buffer) (cinfo);
 800a01e:	4630      	mov	r0, r6
 800a020:	68eb      	ldr	r3, [r5, #12]
 800a022:	4798      	blx	r3
 800a024:	e7f1      	b.n	800a00a <skip_input_data+0xa>

0800a026 <term_source>:
 800a026:	4770      	bx	lr

0800a028 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	4604      	mov	r4, r0
 800a02c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800a02e:	460d      	mov	r5, r1
 800a030:	b101      	cbz	r1, 800a034 <jpeg_mem_src+0xc>
 800a032:	b92a      	cbnz	r2, 800a040 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	222b      	movs	r2, #43	; 0x2b
 800a038:	4620      	mov	r0, r4
 800a03a:	615a      	str	r2, [r3, #20]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800a040:	69a1      	ldr	r1, [r4, #24]
 800a042:	b929      	cbnz	r1, 800a050 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a044:	6863      	ldr	r3, [r4, #4]
 800a046:	221c      	movs	r2, #28
 800a048:	4620      	mov	r0, r4
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800a04e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800a050:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800a052:	4a06      	ldr	r2, [pc, #24]	; (800a06c <jpeg_mem_src+0x44>)
 800a054:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800a056:	4a06      	ldr	r2, [pc, #24]	; (800a070 <jpeg_mem_src+0x48>)
 800a058:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800a05a:	4a06      	ldr	r2, [pc, #24]	; (800a074 <jpeg_mem_src+0x4c>)
 800a05c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800a05e:	4a06      	ldr	r2, [pc, #24]	; (800a078 <jpeg_mem_src+0x50>)
 800a060:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800a062:	4a06      	ldr	r2, [pc, #24]	; (800a07c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800a064:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800a068:	619a      	str	r2, [r3, #24]
}
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	08009fd9 	.word	0x08009fd9
 800a070:	08009fdd 	.word	0x08009fdd
 800a074:	0800a001 	.word	0x0800a001
 800a078:	0800e22d 	.word	0x0800e22d
 800a07c:	0800a027 	.word	0x0800a027

0800a080 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800a080:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a084:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800a088:	2a01      	cmp	r2, #1
 800a08a:	dc0f      	bgt.n	800a0ac <start_iMCU_row+0x2c>
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a08c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a090:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a094:	3a01      	subs	r2, #1
 800a096:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800a09a:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a09c:	bf34      	ite	cc
 800a09e:	68ca      	ldrcc	r2, [r1, #12]
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a0a0:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
    coef->MCU_rows_per_iMCU_row = 1;
 800a0a2:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800a0a4:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800a0a6:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800a0aa:	4770      	bx	lr
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	e7f8      	b.n	800a0a2 <start_iMCU_row+0x22>

0800a0b0 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800a0b6:	f7ff bfe3 	b.w	800a080 <start_iMCU_row>

0800a0ba <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	4770      	bx	lr

0800a0be <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800a0be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c2:	f500 7ba8 	add.w	fp, r0, #336	; 0x150
 800a0c6:	b08f      	sub	sp, #60	; 0x3c
 800a0c8:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a0ca:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a0ce:	465f      	mov	r7, fp
 800a0d0:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a0d2:	f04f 0801 	mov.w	r8, #1
 800a0d6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a0da:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a0de:	42b3      	cmp	r3, r6
 800a0e0:	dc13      	bgt.n	800a10a <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a0e2:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a0e4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a0e8:	69eb      	ldr	r3, [r5, #28]
 800a0ea:	42b3      	cmp	r3, r6
 800a0ec:	dc22      	bgt.n	800a134 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a0ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a0f2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a0fe:	d271      	bcs.n	800a1e4 <consume_data+0x126>
    start_iMCU_row(cinfo);
 800a100:	4620      	mov	r0, r4
 800a102:	f7ff ffbd 	bl	800a080 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a106:	2003      	movs	r0, #3
 800a108:	e044      	b.n	800a194 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800a10a:	f857 1f04 	ldr.w	r1, [r7, #4]!
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a10e:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800a110:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a112:	6849      	ldr	r1, [r1, #4]
 800a114:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a118:	3112      	adds	r1, #18
 800a11a:	f8cd 8000 	str.w	r8, [sp]
 800a11e:	435a      	muls	r2, r3
 800a120:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800a124:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a128:	4620      	mov	r0, r4
 800a12a:	47d0      	blx	sl
 800a12c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a130:	3601      	adds	r6, #1
 800a132:	e7d2      	b.n	800a0da <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800a134:	00b3      	lsls	r3, r6, #2
 800a136:	696f      	ldr	r7, [r5, #20]
 800a138:	9308      	str	r3, [sp, #32]
 800a13a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800a13e:	42bb      	cmp	r3, r7
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	d94b      	bls.n	800a1de <consume_data+0x120>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a146:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a14a:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800a14c:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a14e:	9206      	str	r2, [sp, #24]
 800a150:	e013      	b.n	800a17a <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800a152:	f85a 2f04 	ldr.w	r2, [sl, #4]!
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a156:	f04f 0c00 	mov.w	ip, #0
 800a15a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a15e:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800a162:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a164:	fb07 f20e 	mul.w	r2, r7, lr
 800a168:	01d2      	lsls	r2, r2, #7
 800a16a:	9204      	str	r2, [sp, #16]
 800a16c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800a170:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a172:	9a05      	ldr	r2, [sp, #20]
 800a174:	4562      	cmp	r2, ip
 800a176:	dc10      	bgt.n	800a19a <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a178:	3301      	adds	r3, #1
 800a17a:	9a06      	ldr	r2, [sp, #24]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	dce8      	bgt.n	800a152 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a180:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a184:	f105 0120 	add.w	r1, r5, #32
 800a188:	4620      	mov	r0, r4
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	4798      	blx	r3
 800a18e:	bb20      	cbnz	r0, 800a1da <consume_data+0x11c>
	coef->MCU_ctr = MCU_col_num;
 800a190:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800a194:	b00f      	add	sp, #60	; 0x3c
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a19a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800a19e:	9904      	ldr	r1, [sp, #16]
 800a1a0:	f852 2008 	ldr.w	r2, [r2, r8]
 800a1a4:	440a      	add	r2, r1
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a1a6:	2100      	movs	r1, #0
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a1a8:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a1aa:	9a03      	ldr	r2, [sp, #12]
 800a1ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a1b0:	3207      	adds	r2, #7
 800a1b2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800a1b6:	9807      	ldr	r0, [sp, #28]
 800a1b8:	458e      	cmp	lr, r1
 800a1ba:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 800a1be:	dc08      	bgt.n	800a1d2 <consume_data+0x114>
 800a1c0:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a1c2:	f10c 0c01 	add.w	ip, ip, #1
 800a1c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c8:	f108 0804 	add.w	r8, r8, #4
 800a1cc:	4411      	add	r1, r2
 800a1ce:	9103      	str	r1, [sp, #12]
 800a1d0:	e7cf      	b.n	800a172 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a1d2:	3101      	adds	r1, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800a1d4:	f842 0f04 	str.w	r0, [r2, #4]!
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a1d8:	e7ed      	b.n	800a1b6 <consume_data+0xf8>
	 MCU_col_num++) {
 800a1da:	3701      	adds	r7, #1
 800a1dc:	e7ad      	b.n	800a13a <consume_data+0x7c>
       yoffset++) {
 800a1de:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800a1e0:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a1e2:	e781      	b.n	800a0e8 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a1e4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a1ee:	2004      	movs	r0, #4
 800a1f0:	e7d0      	b.n	800a194 <consume_data+0xd6>

0800a1f2 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a1f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	b089      	sub	sp, #36	; 0x24
 800a1fa:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a1fc:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a200:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a204:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a208:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a20c:	429a      	cmp	r2, r3
 800a20e:	db1d      	blt.n	800a24c <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800a210:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a214:	d103      	bne.n	800a21e <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800a216:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d916      	bls.n	800a24c <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a21e:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a220:	2600      	movs	r6, #0
 800a222:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a226:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800a228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a22c:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a230:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a234:	42b3      	cmp	r3, r6
 800a236:	dc13      	bgt.n	800a260 <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a238:	1c50      	adds	r0, r2, #1
 800a23a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a23e:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a242:	4298      	cmp	r0, r3
 800a244:	bf2c      	ite	cs
 800a246:	2004      	movcs	r0, #4
 800a248:	2003      	movcc	r0, #3
 800a24a:	e006      	b.n	800a25a <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a24c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a250:	4620      	mov	r0, r4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4798      	blx	r3
 800a256:	2800      	cmp	r0, #0
 800a258:	d1d4      	bne.n	800a204 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800a25a:	b009      	add	sp, #36	; 0x24
 800a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a260:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a262:	b913      	cbnz	r3, 800a26a <decompress_data+0x78>
       ci++, compptr++) {
 800a264:	3601      	adds	r6, #1
 800a266:	3558      	adds	r5, #88	; 0x58
 800a268:	e7e1      	b.n	800a22e <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800a26a:	6861      	ldr	r1, [r4, #4]
 800a26c:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a26e:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a270:	9000      	str	r0, [sp, #0]
 800a272:	4620      	mov	r0, r4
 800a274:	6a0f      	ldr	r7, [r1, #32]
 800a276:	435a      	muls	r2, r3
 800a278:	9906      	ldr	r1, [sp, #24]
 800a27a:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800a27e:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a280:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a284:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a286:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a288:	4293      	cmp	r3, r2
 800a28a:	68eb      	ldr	r3, [r5, #12]
 800a28c:	d221      	bcs.n	800a2d2 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800a28e:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a290:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a294:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a296:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800a29e:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a2a2:	9202      	str	r2, [sp, #8]
 800a2a4:	9a02      	ldr	r2, [sp, #8]
 800a2a6:	4552      	cmp	r2, sl
 800a2a8:	dadc      	bge.n	800a264 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800a2aa:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800a2ac:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800a2b0:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a2b2:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800a2b4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2b8:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a2ba:	69e9      	ldr	r1, [r5, #28]
 800a2bc:	9a05      	ldr	r2, [sp, #20]
 800a2be:	4541      	cmp	r1, r8
 800a2c0:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800a2c4:	d80f      	bhi.n	800a2e6 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800a2c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a2c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a2cc:	9a02      	ldr	r2, [sp, #8]
 800a2ce:	3201      	adds	r2, #1
 800a2d0:	e7e7      	b.n	800a2a2 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a2d2:	6a2a      	ldr	r2, [r5, #32]
 800a2d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a2d8:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800a2dc:	f1ba 0f00 	cmp.w	sl, #0
 800a2e0:	bf08      	it	eq
 800a2e2:	469a      	moveq	sl, r3
 800a2e4:	e7d4      	b.n	800a290 <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800a2e6:	f8cd 9000 	str.w	r9, [sp]
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	9307      	str	r3, [sp, #28]
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800a2f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a2f4:	f108 0801 	add.w	r8, r8, #1
 800a2f8:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800a2fa:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a2fc:	e7dd      	b.n	800a2ba <decompress_data+0xc8>
	...

0800a300 <start_output_pass>:
{
 800a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a304:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a308:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800a30a:	692b      	ldr	r3, [r5, #16]
 800a30c:	b323      	cbz	r3, 800a358 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a30e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a310:	2b00      	cmp	r3, #0
 800a312:	d04b      	beq.n	800a3ac <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800a314:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d047      	beq.n	800a3ac <start_output_pass+0xac>
 800a31c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d043      	beq.n	800a3ac <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800a324:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a326:	b93b      	cbnz	r3, 800a338 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a328:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a32a:	2118      	movs	r1, #24
 800a32c:	6843      	ldr	r3, [r0, #4]
 800a32e:	434a      	muls	r2, r1
 800a330:	2101      	movs	r1, #1
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800a336:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a338:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800a33a:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a33e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800a342:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800a346:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a348:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a34a:	fb0e c703 	mla	r7, lr, r3, ip
 800a34e:	4293      	cmp	r3, r2
 800a350:	db07      	blt.n	800a362 <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a352:	b359      	cbz	r1, 800a3ac <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800a354:	4b16      	ldr	r3, [pc, #88]	; (800a3b0 <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800a356:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800a35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800a362:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a364:	b312      	cbz	r2, 800a3ac <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800a366:	8816      	ldrh	r6, [r2, #0]
 800a368:	b306      	cbz	r6, 800a3ac <start_output_pass+0xac>
 800a36a:	8856      	ldrh	r6, [r2, #2]
 800a36c:	b1f6      	cbz	r6, 800a3ac <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800a36e:	8a16      	ldrh	r6, [r2, #16]
 800a370:	b1e6      	cbz	r6, 800a3ac <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800a372:	8c16      	ldrh	r6, [r2, #32]
 800a374:	b1d6      	cbz	r6, 800a3ac <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800a376:	8a56      	ldrh	r6, [r2, #18]
 800a378:	b1c6      	cbz	r6, 800a3ac <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800a37a:	8892      	ldrh	r2, [r2, #4]
 800a37c:	b1b2      	cbz	r2, 800a3ac <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800a37e:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800a382:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800a384:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800a386:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	db0e      	blt.n	800a3ac <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800a38e:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a390:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800a394:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a396:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800a39a:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800a39e:	bf18      	it	ne
 800a3a0:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800a3a2:	2a06      	cmp	r2, #6
 800a3a4:	d1f4      	bne.n	800a390 <start_output_pass+0x90>
       ci++, compptr++) {
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	3058      	adds	r0, #88	; 0x58
 800a3aa:	e7cd      	b.n	800a348 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800a3ac:	4b01      	ldr	r3, [pc, #4]	; (800a3b4 <start_output_pass+0xb4>)
 800a3ae:	e7d2      	b.n	800a356 <start_output_pass+0x56>
 800a3b0:	0800a53b 	.word	0x0800a53b
 800a3b4:	0800a1f3 	.word	0x0800a1f3

0800a3b8 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a3b8:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a3c0:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a3c2:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	ed2d 8b02 	vpush	{d8}
 800a3cc:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a3ce:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a3d0:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800a3d4:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a3da:	69ab      	ldr	r3, [r5, #24]
 800a3dc:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a3de:	f105 0320 	add.w	r3, r5, #32
 800a3e2:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a3e6:	69eb      	ldr	r3, [r5, #28]
 800a3e8:	9a03      	ldr	r2, [sp, #12]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	dc13      	bgt.n	800a416 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800a3ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a3f2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a3fc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a400:	3301      	adds	r3, #1
 800a402:	4293      	cmp	r3, r2
 800a404:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a408:	f080 8090 	bcs.w	800a52c <decompress_onepass+0x174>
    start_iMCU_row(cinfo);
 800a40c:	4620      	mov	r0, r4
 800a40e:	f7ff fe37 	bl	800a080 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a412:	2003      	movs	r0, #3
 800a414:	e02a      	b.n	800a46c <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800a416:	696f      	ldr	r7, [r5, #20]
 800a418:	9b08      	ldr	r3, [sp, #32]
 800a41a:	429f      	cmp	r7, r3
 800a41c:	d905      	bls.n	800a42a <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a422:	9b03      	ldr	r3, [sp, #12]
 800a424:	3301      	adds	r3, #1
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	e7dd      	b.n	800a3e6 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800a42a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a42e:	b133      	cbz	r3, 800a43e <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800a430:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800a434:	2100      	movs	r1, #0
 800a436:	6a28      	ldr	r0, [r5, #32]
 800a438:	01d2      	lsls	r2, r2, #7
 800a43a:	f01f fbad 	bl	8029b98 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a43e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a442:	ee18 1a10 	vmov	r1, s16
 800a446:	4620      	mov	r0, r4
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	4798      	blx	r3
 800a44c:	b158      	cbz	r0, 800a466 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a44e:	f04f 0b00 	mov.w	fp, #0
 800a452:	f504 73a8 	add.w	r3, r4, #336	; 0x150
      blkn = 0;			/* index of current DCT block within MCU */
 800a456:	46da      	mov	sl, fp
 800a458:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a45a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a45e:	455b      	cmp	r3, fp
 800a460:	dc09      	bgt.n	800a476 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800a462:	3701      	adds	r7, #1
 800a464:	e7d8      	b.n	800a418 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800a466:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800a468:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800a46c:	b00f      	add	sp, #60	; 0x3c
 800a46e:	ecbd 8b02 	vpop	{d8}
 800a472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800a47c:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800a47e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a480:	b923      	cbnz	r3, 800a48c <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800a482:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a484:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a486:	f10b 0b01 	add.w	fp, fp, #1
 800a48a:	e7e6      	b.n	800a45a <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a48c:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a48e:	f04f 0900 	mov.w	r9, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a492:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800a496:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a498:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800a4a0:	9b08      	ldr	r3, [sp, #32]
 800a4a2:	429f      	cmp	r7, r3
 800a4a4:	bf34      	ite	cc
 800a4a6:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800a4a8:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800a4aa:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800a4ac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a4ae:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800a4b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a4b2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a4b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800a4ba:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800a4bc:	437a      	muls	r2, r7
 800a4be:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a4c0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a4c2:	454a      	cmp	r2, r9
 800a4c4:	dddf      	ble.n	800a486 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800a4c6:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a4ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4cc:	4282      	cmp	r2, r0
 800a4ce:	d304      	bcc.n	800a4da <decompress_onepass+0x122>
 800a4d0:	9a03      	ldr	r2, [sp, #12]
 800a4d2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800a4d4:	444a      	add	r2, r9
 800a4d6:	4290      	cmp	r0, r2
 800a4d8:	dd0d      	ble.n	800a4f6 <decompress_onepass+0x13e>
 800a4da:	f10a 4880 	add.w	r8, sl, #1073741824	; 0x40000000
 800a4de:	f108 0807 	add.w	r8, r8, #7
 800a4e2:	eb05 0288 	add.w	r2, r5, r8, lsl #2
{
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	9207      	str	r2, [sp, #28]
 800a4ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ee:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a4f0:	9a06      	ldr	r2, [sp, #24]
 800a4f2:	4590      	cmp	r8, r2
 800a4f4:	db07      	blt.n	800a506 <decompress_onepass+0x14e>
	  blkn += compptr->MCU_width;
 800a4f6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a4f8:	f109 0901 	add.w	r9, r9, #1
	  blkn += compptr->MCU_width;
 800a4fc:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800a4fe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800a500:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a504:	e7dc      	b.n	800a4c0 <decompress_onepass+0x108>
	      (*inverse_DCT) (cinfo, compptr,
 800a506:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a508:	f108 0801 	add.w	r8, r8, #1
	      (*inverse_DCT) (cinfo, compptr,
 800a50c:	9a04      	ldr	r2, [sp, #16]
 800a50e:	930d      	str	r3, [sp, #52]	; 0x34
 800a510:	9200      	str	r2, [sp, #0]
 800a512:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800a516:	910c      	str	r1, [sp, #48]	; 0x30
 800a518:	9007      	str	r0, [sp, #28]
 800a51a:	4620      	mov	r0, r4
 800a51c:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800a51e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a520:	9b04      	ldr	r3, [sp, #16]
 800a522:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800a524:	4413      	add	r3, r2
 800a526:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a52a:	e7e1      	b.n	800a4f0 <decompress_onepass+0x138>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a52c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a530:	4620      	mov	r0, r4
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a536:	2004      	movs	r0, #4
 800a538:	e798      	b.n	800a46c <decompress_onepass+0xb4>

0800a53a <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a53a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a53e:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800a542:	b0c5      	sub	sp, #276	; 0x114
 800a544:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a546:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800a54a:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a54c:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a54e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a552:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a556:	428b      	cmp	r3, r1
 800a558:	dc03      	bgt.n	800a562 <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800a55a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a55e:	6950      	ldr	r0, [r2, #20]
 800a560:	b1a8      	cbz	r0, 800a58e <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a562:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a564:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a568:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a56a:	2300      	movs	r3, #0
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a570:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a572:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a576:	428b      	cmp	r3, r1
 800a578:	dc1e      	bgt.n	800a5b8 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a57a:	1c50      	adds	r0, r2, #1
 800a57c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a580:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a584:	4298      	cmp	r0, r3
 800a586:	bf2c      	ite	cs
 800a588:	2004      	movcs	r0, #4
 800a58a:	2003      	movcc	r0, #3
 800a58c:	e011      	b.n	800a5b2 <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800a58e:	428b      	cmp	r3, r1
 800a590:	d10a      	bne.n	800a5a8 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800a592:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800a596:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a59a:	2900      	cmp	r1, #0
 800a59c:	bf08      	it	eq
 800a59e:	3301      	addeq	r3, #1
 800a5a0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a5a4:	4299      	cmp	r1, r3
 800a5a6:	d8dc      	bhi.n	800a562 <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a5a8:	6813      	ldr	r3, [r2, #0]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	4798      	blx	r3
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d1cd      	bne.n	800a54e <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800a5b2:	b045      	add	sp, #276	; 0x114
 800a5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a5b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a5ba:	b923      	cbnz	r3, 800a5c6 <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	3558      	adds	r5, #88	; 0x58
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	9303      	str	r3, [sp, #12]
 800a5c4:	e7d3      	b.n	800a56e <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a5c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800a5c8:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	f240 815a 	bls.w	800a884 <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800a5d0:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800a5d2:	4681      	mov	r9, r0
      last_row = FALSE;
 800a5d4:	2100      	movs	r1, #0
      last_row = TRUE;
 800a5d6:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800a5d8:	6861      	ldr	r1, [r4, #4]
 800a5da:	9e03      	ldr	r6, [sp, #12]
 800a5dc:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800a5e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5e2:	3148      	adds	r1, #72	; 0x48
 800a5e4:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	f000 8159 	beq.w	800a8a0 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800a5ee:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800a5f0:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800a5f2:	4403      	add	r3, r0
 800a5f4:	4342      	muls	r2, r0
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	9600      	str	r6, [sp, #0]
 800a5fa:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800a5fc:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800a5fe:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800a600:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800a604:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a606:	2218      	movs	r2, #24
 800a608:	9903      	ldr	r1, [sp, #12]
 800a60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a60c:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800a60e:	fb02 3301 	mla	r3, r2, r1, r3
 800a612:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800a614:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800a616:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800a618:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800a61c:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800a620:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800a622:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800a624:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800a626:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a628:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a62c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800a634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a636:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a63a:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800a63c:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800a640:	9313      	str	r3, [sp, #76]	; 0x4c
 800a642:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800a646:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800a648:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800a64c:	9315      	str	r3, [sp, #84]	; 0x54
 800a64e:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800a652:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a654:	01f3      	lsls	r3, r6, #7
 800a656:	9317      	str	r3, [sp, #92]	; 0x5c
 800a658:	0233      	lsls	r3, r6, #8
 800a65a:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800a65c:	01cb      	lsls	r3, r1, #7
 800a65e:	9319      	str	r3, [sp, #100]	; 0x64
 800a660:	020b      	lsls	r3, r1, #8
 800a662:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800a664:	01d3      	lsls	r3, r2, #7
 800a666:	931b      	str	r3, [sp, #108]	; 0x6c
 800a668:	0213      	lsls	r3, r2, #8
 800a66a:	931c      	str	r3, [sp, #112]	; 0x70
 800a66c:	1f03      	subs	r3, r0, #4
 800a66e:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a670:	2300      	movs	r3, #0
 800a672:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800a674:	f109 33ff 	add.w	r3, r9, #4294967295
 800a678:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	454b      	cmp	r3, r9
 800a67e:	da9d      	bge.n	800a5bc <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800a680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a682:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800a686:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800a688:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a68a:	b11b      	cbz	r3, 800a694 <decompress_smooth_data+0x15a>
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 810c 	beq.w	800a8ac <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800a694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a696:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a69a:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800a69c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a69e:	b123      	cbz	r3, 800a6aa <decompress_smooth_data+0x170>
 800a6a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	f000 8104 	beq.w	800a8b2 <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800a6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a6b0:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800a6b2:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800a6b4:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a6b6:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800a6ba:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a6bc:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a6be:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800a6c2:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800a6c4:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a6c6:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a6c8:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a6ca:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a6ce:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a6d2:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a6d4:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800a6d6:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800a6da:	2201      	movs	r2, #1
 800a6dc:	a924      	add	r1, sp, #144	; 0x90
 800a6de:	4640      	mov	r0, r8
 800a6e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a6e2:	f00b fdc6 	bl	8016272 <jcopy_block_row>
	if (block_num < last_block_column) {
 800a6e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ee:	f240 80ea 	bls.w	800a8c6 <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800a6f2:	9a07      	ldr	r2, [sp, #28]
 800a6f4:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800a6f8:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800a6fa:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800a6fe:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800a700:	9a08      	ldr	r2, [sp, #32]
 800a702:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800a706:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800a708:	9a05      	ldr	r2, [sp, #20]
 800a70a:	6851      	ldr	r1, [r2, #4]
 800a70c:	b1c1      	cbz	r1, 800a740 <decompress_smooth_data+0x206>
 800a70e:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800a712:	b9aa      	cbnz	r2, 800a740 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800a714:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a716:	1a3a      	subs	r2, r7, r0
 800a718:	9806      	ldr	r0, [sp, #24]
 800a71a:	4342      	muls	r2, r0
	  if (num >= 0) {
 800a71c:	2024      	movs	r0, #36	; 0x24
 800a71e:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a720:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800a722:	f100 80d7 	bmi.w	800a8d4 <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a726:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a728:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a72a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a72c:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a730:	dd04      	ble.n	800a73c <decompress_smooth_data+0x202>
 800a732:	fa06 f101 	lsl.w	r1, r6, r1
 800a736:	4291      	cmp	r1, r2
 800a738:	dc00      	bgt.n	800a73c <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800a73a:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800a73c:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800a740:	9a05      	ldr	r2, [sp, #20]
 800a742:	6891      	ldr	r1, [r2, #8]
 800a744:	b1c9      	cbz	r1, 800a77a <decompress_smooth_data+0x240>
 800a746:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800a74a:	b9b2      	cbnz	r2, 800a77a <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800a74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a74e:	9806      	ldr	r0, [sp, #24]
 800a750:	ebab 0202 	sub.w	r2, fp, r2
 800a754:	4342      	muls	r2, r0
	  if (num >= 0) {
 800a756:	2024      	movs	r0, #36	; 0x24
 800a758:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800a75a:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800a75c:	f100 80c8 	bmi.w	800a8f0 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800a760:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a762:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800a764:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a766:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a76a:	dd04      	ble.n	800a776 <decompress_smooth_data+0x23c>
 800a76c:	fa06 f101 	lsl.w	r1, r6, r1
 800a770:	4291      	cmp	r1, r2
 800a772:	dc00      	bgt.n	800a776 <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800a774:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800a776:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800a77a:	9a05      	ldr	r2, [sp, #20]
 800a77c:	68d1      	ldr	r1, [r2, #12]
 800a77e:	b1d1      	cbz	r1, 800a7b6 <decompress_smooth_data+0x27c>
 800a780:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800a784:	b9ba      	cbnz	r2, 800a7b6 <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800a786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a788:	9806      	ldr	r0, [sp, #24]
 800a78a:	445a      	add	r2, fp
 800a78c:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800a790:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800a792:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800a794:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800a798:	f100 80b8 	bmi.w	800a90c <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800a79c:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a79e:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800a7a0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a7a2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a7a6:	dd04      	ble.n	800a7b2 <decompress_smooth_data+0x278>
 800a7a8:	fa06 f101 	lsl.w	r1, r6, r1
 800a7ac:	4291      	cmp	r1, r2
 800a7ae:	dc00      	bgt.n	800a7b2 <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800a7b0:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800a7b2:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800a7b6:	9a05      	ldr	r2, [sp, #20]
 800a7b8:	6912      	ldr	r2, [r2, #16]
 800a7ba:	b1e2      	cbz	r2, 800a7f6 <decompress_smooth_data+0x2bc>
 800a7bc:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800a7c0:	b9c9      	cbnz	r1, 800a7f6 <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800a7c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a7c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a7c6:	1a09      	subs	r1, r1, r0
 800a7c8:	1acb      	subs	r3, r1, r3
 800a7ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7cc:	440b      	add	r3, r1
 800a7ce:	9906      	ldr	r1, [sp, #24]
 800a7d0:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800a7d2:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800a7d4:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800a7d8:	f100 80a6 	bmi.w	800a928 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800a7dc:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a7de:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800a7e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a7e2:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a7e6:	dd04      	ble.n	800a7f2 <decompress_smooth_data+0x2b8>
 800a7e8:	fa06 f202 	lsl.w	r2, r6, r2
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	dc00      	bgt.n	800a7f2 <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800a7f0:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800a7f2:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800a7f6:	9b05      	ldr	r3, [sp, #20]
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	b1da      	cbz	r2, 800a834 <decompress_smooth_data+0x2fa>
 800a7fc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800a800:	b9c3      	cbnz	r3, 800a834 <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800a802:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a804:	463b      	mov	r3, r7
 800a806:	440b      	add	r3, r1
 800a808:	9906      	ldr	r1, [sp, #24]
 800a80a:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800a80e:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800a810:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800a812:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800a816:	f100 8095 	bmi.w	800a944 <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800a81a:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a81c:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800a81e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a820:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a824:	dd04      	ble.n	800a830 <decompress_smooth_data+0x2f6>
 800a826:	fa06 f202 	lsl.w	r2, r6, r2
 800a82a:	429a      	cmp	r2, r3
 800a82c:	dc00      	bgt.n	800a830 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800a82e:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800a830:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800a834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a836:	aa24      	add	r2, sp, #144	; 0x90
 800a838:	4629      	mov	r1, r5
 800a83a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	4620      	mov	r0, r4
 800a840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800a842:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800a846:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800a848:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800a84a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a84c:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800a84e:	3380      	adds	r3, #128	; 0x80
 800a850:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800a854:	9307      	str	r3, [sp, #28]
 800a856:	9b08      	ldr	r3, [sp, #32]
 800a858:	3380      	adds	r3, #128	; 0x80
 800a85a:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800a85c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a85e:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800a860:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800a862:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800a864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a866:	3301      	adds	r3, #1
 800a868:	930c      	str	r3, [sp, #48]	; 0x30
 800a86a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86e:	428a      	cmp	r2, r1
 800a870:	d222      	bcs.n	800a8b8 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800a872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a874:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a876:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a87a:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	3301      	adds	r3, #1
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	e6fa      	b.n	800a67a <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a884:	6a2b      	ldr	r3, [r5, #32]
 800a886:	fbb3 f1f0 	udiv	r1, r3, r0
 800a88a:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800a88e:	f1b9 0f00 	cmp.w	r9, #0
 800a892:	d103      	bne.n	800a89c <decompress_smooth_data+0x362>
 800a894:	4603      	mov	r3, r0
 800a896:	4681      	mov	r9, r0
      last_row = TRUE;
 800a898:	2101      	movs	r1, #1
 800a89a:	e69c      	b.n	800a5d6 <decompress_smooth_data+0x9c>
 800a89c:	464b      	mov	r3, r9
 800a89e:	e7fb      	b.n	800a898 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	9200      	str	r2, [sp, #0]
 800a8a4:	47c0      	blx	r8
      first_row = TRUE;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	931d      	str	r3, [sp, #116]	; 0x74
 800a8aa:	e6ab      	b.n	800a604 <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800a8ac:	f8cd 801c 	str.w	r8, [sp, #28]
 800a8b0:	e6f4      	b.n	800a69c <decompress_smooth_data+0x162>
 800a8b2:	f8cd 8020 	str.w	r8, [sp, #32]
 800a8b6:	e6fb      	b.n	800a6b0 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800a8b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800a8ba:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800a8be:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800a8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c4:	e709      	b.n	800a6da <decompress_smooth_data+0x1a0>
 800a8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a8cc:	9211      	str	r2, [sp, #68]	; 0x44
 800a8ce:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800a8d2:	e719      	b.n	800a708 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800a8d4:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800a8d6:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800a8d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a8da:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a8de:	dd05      	ble.n	800a8ec <decompress_smooth_data+0x3b2>
 800a8e0:	fa06 f101 	lsl.w	r1, r6, r1
 800a8e4:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800a8e6:	bfd8      	it	le
 800a8e8:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800a8ec:	4252      	negs	r2, r2
 800a8ee:	e725      	b.n	800a73c <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800a8f0:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800a8f2:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800a8f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a8f6:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a8fa:	dd05      	ble.n	800a908 <decompress_smooth_data+0x3ce>
 800a8fc:	fa06 f101 	lsl.w	r1, r6, r1
 800a900:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800a902:	bfd8      	it	le
 800a904:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800a908:	4252      	negs	r2, r2
 800a90a:	e734      	b.n	800a776 <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a90c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800a90e:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a910:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a912:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a916:	dd05      	ble.n	800a924 <decompress_smooth_data+0x3ea>
 800a918:	fa06 f101 	lsl.w	r1, r6, r1
 800a91c:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800a91e:	bfd8      	it	le
 800a920:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800a924:	4252      	negs	r2, r2
 800a926:	e744      	b.n	800a7b2 <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800a928:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800a92a:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800a92c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a92e:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a932:	dd05      	ble.n	800a940 <decompress_smooth_data+0x406>
 800a934:	fa06 f202 	lsl.w	r2, r6, r2
 800a938:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800a93a:	bfd8      	it	le
 800a93c:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800a940:	425b      	negs	r3, r3
 800a942:	e756      	b.n	800a7f2 <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800a944:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800a946:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800a948:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a94a:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a94e:	dd05      	ble.n	800a95c <decompress_smooth_data+0x422>
 800a950:	fa06 f202 	lsl.w	r2, r6, r2
 800a954:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800a956:	bfd8      	it	le
 800a958:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800a95c:	425b      	negs	r3, r3
 800a95e:	e767      	b.n	800a830 <decompress_smooth_data+0x2f6>

0800a960 <jinit_d_coef_controller>:
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800a960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a964:	6843      	ldr	r3, [r0, #4]
{
 800a966:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a968:	2274      	movs	r2, #116	; 0x74
 800a96a:	2101      	movs	r1, #1
 800a96c:	681b      	ldr	r3, [r3, #0]
{
 800a96e:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a970:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800a972:	4b2c      	ldr	r3, [pc, #176]	; (800aa24 <jinit_d_coef_controller+0xc4>)
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800a974:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800a978:	2700      	movs	r7, #0
  coef->pub.start_input_pass = start_input_pass;
 800a97a:	6003      	str	r3, [r0, #0]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a97c:	4604      	mov	r4, r0
  coef->pub.start_output_pass = start_output_pass;
 800a97e:	4b2a      	ldr	r3, [pc, #168]	; (800aa28 <jinit_d_coef_controller+0xc8>)
 800a980:	f100 0844 	add.w	r8, r0, #68	; 0x44
  coef->coef_bits_latch = NULL;
 800a984:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800a986:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800a988:	b386      	cbz	r6, 800a9ec <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a98a:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800a98e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a990:	42bb      	cmp	r3, r7
 800a992:	dc09      	bgt.n	800a9a8 <jinit_d_coef_controller+0x48>
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800a994:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800a998:	4924      	ldr	r1, [pc, #144]	; (800aa2c <jinit_d_coef_controller+0xcc>)
 800a99a:	4a25      	ldr	r2, [pc, #148]	; (800aa30 <jinit_d_coef_controller+0xd0>)
    coef->pub.consume_data = consume_data;
 800a99c:	6061      	str	r1, [r4, #4]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800a99e:	e9c4 2303 	strd	r2, r3, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800a9a2:	b004      	add	sp, #16
 800a9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cinfo->progressive_mode)
 800a9a8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800a9ac:	f8d6 900c 	ldr.w	r9, [r6, #12]
      if (cinfo->progressive_mode)
 800a9b0:	b10b      	cbz	r3, 800a9b6 <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800a9b2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800a9b6:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800a9b8:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a9ba:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800a9bc:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a9be:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800a9c2:	f8d3 a014 	ldr.w	sl, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a9c6:	f00b fc3a 	bl	801623e <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800a9ca:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a9ce:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800a9d0:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800a9d4:	f00b fc33 	bl	801623e <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800a9d8:	2201      	movs	r2, #1
 800a9da:	9b03      	ldr	r3, [sp, #12]
 800a9dc:	4611      	mov	r1, r2
 800a9de:	e9cd 0900 	strd	r0, r9, [sp]
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	47d0      	blx	sl
 800a9e6:	f848 0f04 	str.w	r0, [r8, #4]!
	 ci++, compptr++) {
 800a9ea:	e7d0      	b.n	800a98e <jinit_d_coef_controller+0x2e>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a9ec:	686b      	ldr	r3, [r5, #4]
 800a9ee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800a9fa:	f104 031c 	add.w	r3, r4, #28
 800a9fe:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800aa00:	f843 2f04 	str.w	r2, [r3, #4]!
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800aa04:	4543      	cmp	r3, r8
 800aa06:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800aa0a:	d1f9      	bne.n	800aa00 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800aa0c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800aa10:	b919      	cbnz	r1, 800aa1a <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800aa12:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800aa16:	f01f f8bf 	bl	8029b98 <memset>
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800aa1a:	4906      	ldr	r1, [pc, #24]	; (800aa34 <jinit_d_coef_controller+0xd4>)
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4a06      	ldr	r2, [pc, #24]	; (800aa38 <jinit_d_coef_controller+0xd8>)
 800aa20:	e7bc      	b.n	800a99c <jinit_d_coef_controller+0x3c>
 800aa22:	bf00      	nop
 800aa24:	0800a0b1 	.word	0x0800a0b1
 800aa28:	0800a301 	.word	0x0800a301
 800aa2c:	0800a0bf 	.word	0x0800a0bf
 800aa30:	0800a1f3 	.word	0x0800a1f3
 800aa34:	0800a0bb 	.word	0x0800a0bb
 800aa38:	0800a3b9 	.word	0x0800a3b9

0800aa3c <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa3c:	6843      	ldr	r3, [r0, #4]
 800aa3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa42:	2101      	movs	r1, #1
 800aa44:	681b      	ldr	r3, [r3, #0]
{
 800aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800aa4c:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa50:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800aa5a:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa62:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800aa64:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800aa70:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800aaf0 <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa74:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa76:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800aa78:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800aa84:	4f17      	ldr	r7, [pc, #92]	; (800aae4 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa86:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800aa88:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800aa8a:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800aa8c:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800aa8e:	f8df e064 	ldr.w	lr, [pc, #100]	; 800aaf4 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800aa92:	4915      	ldr	r1, [pc, #84]	; (800aae8 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800aa94:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800aa98:	4d14      	ldr	r5, [pc, #80]	; (800aaec <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800aa9a:	fb08 e203 	mla	r2, r8, r3, lr
 800aa9e:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800aaa0:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800aaa4:	fb07 f203 	mul.w	r2, r7, r3
 800aaa8:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800aaac:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800aab0:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800aab2:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800aab6:	fb05 f203 	mul.w	r2, r5, r3
 800aaba:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800aabe:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800aac2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800aac6:	fb01 f203 	mul.w	r2, r1, r3
 800aaca:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800aace:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800aad2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800aad6:	3301      	adds	r3, #1
 800aad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aadc:	d1dd      	bne.n	800aa9a <build_ycc_rgb_table+0x5e>
  }
}
 800aade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae2:	bf00      	nop
 800aae4:	0001c5a2 	.word	0x0001c5a2
 800aae8:	ffffa7e6 	.word	0xffffa7e6
 800aaec:	ffff492e 	.word	0xffff492e
 800aaf0:	000166e9 	.word	0x000166e9
 800aaf4:	ff4d0b80 	.word	0xff4d0b80

0800aaf8 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800aafc:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800ab00:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800ab02:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800ab04:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ab08:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800ab0c:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ab10:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800ab12:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800ab14:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800ab16:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800ab1a:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800ab1c:	6920      	ldr	r0, [r4, #16]
 800ab1e:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800ab20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab22:	3a01      	subs	r2, #1
 800ab24:	9210      	str	r2, [sp, #64]	; 0x40
 800ab26:	d502      	bpl.n	800ab2e <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800ab28:	b007      	add	sp, #28
 800ab2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800ab2e:	9a05      	ldr	r2, [sp, #20]
 800ab30:	680c      	ldr	r4, [r1, #0]
 800ab32:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800ab34:	f853 0b04 	ldr.w	r0, [r3], #4
 800ab38:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800ab3c:	684c      	ldr	r4, [r1, #4]
 800ab3e:	5964      	ldr	r4, [r4, r5]
 800ab40:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800ab44:	688c      	ldr	r4, [r1, #8]
 800ab46:	5967      	ldr	r7, [r4, r5]
 800ab48:	9c01      	ldr	r4, [sp, #4]
 800ab4a:	3f01      	subs	r7, #1
 800ab4c:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800ab50:	45d0      	cmp	r8, sl
 800ab52:	f100 0003 	add.w	r0, r0, #3
 800ab56:	d0e3      	beq.n	800ab20 <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ab58:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800ab5c:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ab60:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800ab62:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ab66:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800ab6a:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ab6c:	fa0f fb8b 	sxth.w	fp, fp
 800ab70:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ab72:	5d65      	ldrb	r5, [r4, r5]
 800ab74:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ab78:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800ab7c:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800ab80:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ab82:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ab84:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800ab86:	5d65      	ldrb	r5, [r4, r5]
 800ab88:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ab8c:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800ab90:	5d64      	ldrb	r4, [r4, r5]
 800ab92:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800ab96:	e7db      	b.n	800ab50 <ycc_rgb_convert+0x58>

0800ab98 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800ab9c:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800aba0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800aba4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800aba6:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800aba8:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800abaa:	3d01      	subs	r5, #1
 800abac:	d501      	bpl.n	800abb2 <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800abb2:	189c      	adds	r4, r3, r2
 800abb4:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800abb6:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800abba:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800abbe:	6848      	ldr	r0, [r1, #4]
 800abc0:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800abc4:	6888      	ldr	r0, [r1, #8]
 800abc6:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800abca:	2000      	movs	r0, #0
 800abcc:	42b8      	cmp	r0, r7
 800abce:	d0ec      	beq.n	800abaa <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800abd0:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800abd4:	f81c b000 	ldrb.w	fp, [ip, r0]
 800abd8:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800abdc:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800abe0:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800abe4:	4454      	add	r4, sl
 800abe6:	f818 a000 	ldrb.w	sl, [r8, r0]
 800abea:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800abee:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800abf2:	4454      	add	r4, sl
		 >> SCALEBITS);
 800abf4:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800abf6:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800abfa:	3001      	adds	r0, #1
 800abfc:	e7e6      	b.n	800abcc <rgb_gray_convert+0x34>

0800abfe <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800abfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac02:	9d06      	ldr	r5, [sp, #24]
 800ac04:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800ac08:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800ac0a:	3d01      	subs	r5, #1
 800ac0c:	d501      	bpl.n	800ac12 <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800ac12:	1898      	adds	r0, r3, r2
 800ac14:	680c      	ldr	r4, [r1, #0]
 800ac16:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800ac18:	684c      	ldr	r4, [r1, #4]
 800ac1a:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800ac1e:	688c      	ldr	r4, [r1, #8]
 800ac20:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800ac24:	2000      	movs	r0, #0
 800ac26:	f853 4b04 	ldr.w	r4, [r3], #4
 800ac2a:	42b0      	cmp	r0, r6
 800ac2c:	f104 0403 	add.w	r4, r4, #3
 800ac30:	d0eb      	beq.n	800ac0a <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800ac32:	f817 8000 	ldrb.w	r8, [r7, r0]
 800ac36:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800ac3a:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800ac3e:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800ac42:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800ac46:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800ac48:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800ac4c:	e7ed      	b.n	800ac2a <rgb_convert+0x2c>

0800ac4e <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800ac4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac52:	9e07      	ldr	r6, [sp, #28]
 800ac54:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800ac58:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800ac5a:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800ac5e:	3e01      	subs	r6, #1
 800ac60:	d418      	bmi.n	800ac94 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800ac62:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800ac66:	2000      	movs	r0, #0
 800ac68:	e00a      	b.n	800ac80 <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800ac6a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800ac6e:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800ac72:	681c      	ldr	r4, [r3, #0]
 800ac74:	eb05 080e 	add.w	r8, r5, lr
 800ac78:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800ac7a:	4545      	cmp	r5, r8
 800ac7c:	d104      	bne.n	800ac88 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800ac7e:	3001      	adds	r0, #1
 800ac80:	42b8      	cmp	r0, r7
 800ac82:	dbf2      	blt.n	800ac6a <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800ac84:	3304      	adds	r3, #4
 800ac86:	e7ea      	b.n	800ac5e <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800ac88:	f815 9b01 	ldrb.w	r9, [r5], #1
 800ac8c:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800ac90:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800ac92:	e7f2      	b.n	800ac7a <null_convert+0x2c>
  }
}
 800ac94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ac98 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac9a:	9d05      	ldr	r5, [sp, #20]
 800ac9c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800aca0:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800aca2:	3d01      	subs	r5, #1
 800aca4:	d500      	bpl.n	800aca8 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800aca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800aca8:	6808      	ldr	r0, [r1, #0]
 800acaa:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800acac:	f853 0b04 	ldr.w	r0, [r3], #4
 800acb0:	58a4      	ldr	r4, [r4, r2]
 800acb2:	eb04 0c07 	add.w	ip, r4, r7
 800acb6:	4564      	cmp	r4, ip
 800acb8:	f100 0003 	add.w	r0, r0, #3
 800acbc:	d0f1      	beq.n	800aca2 <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800acbe:	f814 6b01 	ldrb.w	r6, [r4], #1
 800acc2:	f800 6c03 	strb.w	r6, [r0, #-3]
 800acc6:	f800 6c02 	strb.w	r6, [r0, #-2]
 800acca:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800acce:	e7f2      	b.n	800acb6 <gray_rgb_convert+0x1e>

0800acd0 <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800acd4:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800acd8:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800acda:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800acdc:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ace0:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800ace4:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800ace8:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800acea:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800acee:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800acf0:	6920      	ldr	r0, [r4, #16]
 800acf2:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800acf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acf6:	3a01      	subs	r2, #1
 800acf8:	9210      	str	r2, [sp, #64]	; 0x40
 800acfa:	d502      	bpl.n	800ad02 <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800acfc:	b007      	add	sp, #28
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800ad02:	eb03 0008 	add.w	r0, r3, r8
 800ad06:	680a      	ldr	r2, [r1, #0]
 800ad08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad0c:	5812      	ldr	r2, [r2, r0]
 800ad0e:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800ad10:	684a      	ldr	r2, [r1, #4]
 800ad12:	5812      	ldr	r2, [r2, r0]
 800ad14:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800ad16:	688a      	ldr	r2, [r1, #8]
 800ad18:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800ad1c:	68ca      	ldr	r2, [r1, #12]
 800ad1e:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800ad22:	2200      	movs	r2, #0
 800ad24:	9800      	ldr	r0, [sp, #0]
 800ad26:	3504      	adds	r5, #4
 800ad28:	4282      	cmp	r2, r0
 800ad2a:	d0e3      	beq.n	800acf4 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800ad2c:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800ad30:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800ad32:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800ad34:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800ad38:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800ad3a:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ad3e:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800ad42:	4404      	add	r4, r0
 800ad44:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800ad48:	5d34      	ldrb	r4, [r6, r4]
 800ad4a:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ad4e:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800ad52:	9405      	str	r4, [sp, #20]
 800ad54:	9c02      	ldr	r4, [sp, #8]
 800ad56:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800ad5a:	9c05      	ldr	r4, [sp, #20]
 800ad5c:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800ad5e:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800ad62:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800ad66:	5d34      	ldrb	r4, [r6, r4]
 800ad68:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800ad6c:	9c01      	ldr	r4, [sp, #4]
 800ad6e:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800ad72:	4420      	add	r0, r4
 800ad74:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ad78:	5c30      	ldrb	r0, [r6, r0]
 800ad7a:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800ad7e:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800ad82:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800ad84:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800ad88:	e7cc      	b.n	800ad24 <ycck_cmyk_convert+0x54>

0800ad8a <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800ad8a:	4770      	bx	lr

0800ad8c <grayscale_convert>:
{
 800ad8c:	b513      	push	{r0, r1, r4, lr}
 800ad8e:	460c      	mov	r4, r1
 800ad90:	4611      	mov	r1, r2
 800ad92:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800ad94:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800ad96:	6820      	ldr	r0, [r4, #0]
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f00b fa55 	bl	801624e <jcopy_sample_rows>
}
 800ada4:	b002      	add	sp, #8
 800ada6:	bd10      	pop	{r4, pc}

0800ada8 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ada8:	6843      	ldr	r3, [r0, #4]
 800adaa:	221c      	movs	r2, #28
 800adac:	2101      	movs	r1, #1
 800adae:	681b      	ldr	r3, [r3, #0]
{
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800adb4:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800adb6:	4b4a      	ldr	r3, [pc, #296]	; (800aee0 <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800adb8:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800adba:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800adbe:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800adc0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800adc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d821      	bhi.n	800ae0e <jinit_color_deconverter+0x66>
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d82d      	bhi.n	800ae2a <jinit_color_deconverter+0x82>
 800adce:	d023      	beq.n	800ae18 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800add0:	2a00      	cmp	r2, #0
 800add2:	dd23      	ble.n	800ae1c <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800add4:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800add8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800addc:	2902      	cmp	r1, #2
 800adde:	d055      	beq.n	800ae8c <jinit_color_deconverter+0xe4>
 800ade0:	2904      	cmp	r1, #4
 800ade2:	d066      	beq.n	800aeb2 <jinit_color_deconverter+0x10a>
 800ade4:	2901      	cmp	r1, #1
 800ade6:	d16d      	bne.n	800aec4 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800ade8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800adec:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800adee:	2a01      	cmp	r2, #1
 800adf0:	d124      	bne.n	800ae3c <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800adf2:	4b3c      	ldr	r3, [pc, #240]	; (800aee4 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800adf4:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800adf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800adf8:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800adfa:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800adfc:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800adfe:	4299      	cmp	r1, r3
 800ae00:	dc15      	bgt.n	800ae2e <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800ae02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d169      	bne.n	800aedc <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800ae08:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae0a:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800ae0e:	3b04      	subs	r3, #4
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d8dd      	bhi.n	800add0 <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800ae14:	2a04      	cmp	r2, #4
 800ae16:	e000      	b.n	800ae1a <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800ae18:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800ae1a:	d0db      	beq.n	800add4 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	220b      	movs	r2, #11
 800ae20:	4620      	mov	r0, r4
 800ae22:	615a      	str	r2, [r3, #20]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4798      	blx	r3
 800ae28:	e7d4      	b.n	800add4 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800ae2a:	2a03      	cmp	r2, #3
 800ae2c:	e7f5      	b.n	800ae1a <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800ae2e:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800ae32:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ae36:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800ae38:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ae3a:	e7e0      	b.n	800adfe <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d146      	bne.n	800aece <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800ae40:	4b29      	ldr	r3, [pc, #164]	; (800aee8 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae42:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800ae46:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800ae48:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800ae4c:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae4e:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800ae50:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ae58:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800ae5a:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ae5c:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800ae60:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800ae62:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800ae66:	fb06 f203 	mul.w	r2, r6, r3
 800ae6a:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800ae6e:	fb05 f203 	mul.w	r2, r5, r3
 800ae72:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ae76:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ae7a:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ae7c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ae80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ae84:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ae88:	d1ed      	bne.n	800ae66 <jinit_color_deconverter+0xbe>
 800ae8a:	e7ba      	b.n	800ae02 <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ae8c:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800ae8e:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ae90:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800ae92:	d105      	bne.n	800aea0 <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800ae94:	4b15      	ldr	r3, [pc, #84]	; (800aeec <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800ae96:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800ae98:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800ae9a:	f7ff fdcf 	bl	800aa3c <build_ycc_rgb_table>
 800ae9e:	e7b0      	b.n	800ae02 <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d102      	bne.n	800aeaa <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800aea4:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800aea6:	606b      	str	r3, [r5, #4]
 800aea8:	e7ab      	b.n	800ae02 <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d10f      	bne.n	800aece <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800aeae:	4b11      	ldr	r3, [pc, #68]	; (800aef4 <jinit_color_deconverter+0x14c>)
 800aeb0:	e7f9      	b.n	800aea6 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800aeb2:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800aeb4:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800aeb6:	d101      	bne.n	800aebc <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800aeb8:	4b0f      	ldr	r3, [pc, #60]	; (800aef8 <jinit_color_deconverter+0x150>)
 800aeba:	e7ec      	b.n	800ae96 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d106      	bne.n	800aece <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800aec0:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <jinit_color_deconverter+0x154>)
 800aec2:	e7f0      	b.n	800aea6 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800aec4:	4299      	cmp	r1, r3
 800aec6:	d102      	bne.n	800aece <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800aec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeca:	67a3      	str	r3, [r4, #120]	; 0x78
 800aecc:	e7f8      	b.n	800aec0 <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	221c      	movs	r2, #28
 800aed2:	4620      	mov	r0, r4
 800aed4:	615a      	str	r2, [r3, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4798      	blx	r3
 800aeda:	e792      	b.n	800ae02 <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800aedc:	2301      	movs	r3, #1
 800aede:	e794      	b.n	800ae0a <jinit_color_deconverter+0x62>
 800aee0:	0800ad8b 	.word	0x0800ad8b
 800aee4:	0800ad8d 	.word	0x0800ad8d
 800aee8:	0800ab99 	.word	0x0800ab99
 800aeec:	0800aaf9 	.word	0x0800aaf9
 800aef0:	0800ac99 	.word	0x0800ac99
 800aef4:	0800abff 	.word	0x0800abff
 800aef8:	0800acd1 	.word	0x0800acd1
 800aefc:	0800ac4f 	.word	0x0800ac4f

0800af00 <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800af04:	2500      	movs	r5, #0
{
 800af06:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af08:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800af0c:	f8d0 81d4 	ldr.w	r8, [r0, #468]	; 0x1d4
  int method = 0;
 800af10:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af12:	46ab      	mov	fp, r5
{
 800af14:	ed2d 8b04 	vpush	{d8-d9}
 800af18:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	455b      	cmp	r3, fp
 800af1e:	dc04      	bgt.n	800af2a <start_pass+0x2a>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800af20:	b007      	add	sp, #28
 800af22:	ecbd 8b04 	vpop	{d8-d9}
 800af26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800af2a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800af2e:	f240 700e 	movw	r0, #1806	; 0x70e
 800af32:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800af36:	4283      	cmp	r3, r0
 800af38:	f000 80d9 	beq.w	800b0ee <start_pass+0x1ee>
 800af3c:	dc5a      	bgt.n	800aff4 <start_pass+0xf4>
 800af3e:	f240 4004 	movw	r0, #1028	; 0x404
 800af42:	4283      	cmp	r3, r0
 800af44:	f000 80d6 	beq.w	800b0f4 <start_pass+0x1f4>
 800af48:	dc2f      	bgt.n	800afaa <start_pass+0xaa>
 800af4a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800af4e:	f000 80d3 	beq.w	800b0f8 <start_pass+0x1f8>
 800af52:	dc1a      	bgt.n	800af8a <start_pass+0x8a>
 800af54:	f240 2001 	movw	r0, #513	; 0x201
 800af58:	4283      	cmp	r3, r0
 800af5a:	f000 80cf 	beq.w	800b0fc <start_pass+0x1fc>
 800af5e:	dc0e      	bgt.n	800af7e <start_pass+0x7e>
 800af60:	f240 1001 	movw	r0, #257	; 0x101
 800af64:	4283      	cmp	r3, r0
 800af66:	f000 80cb 	beq.w	800b100 <start_pass+0x200>
 800af6a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800af6e:	f000 80c9 	beq.w	800b104 <start_pass+0x204>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	2007      	movs	r0, #7
 800af76:	61da      	str	r2, [r3, #28]
 800af78:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800af7c:	e0b3      	b.n	800b0e6 <start_pass+0x1e6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800af7e:	f240 2002 	movw	r0, #514	; 0x202
 800af82:	4283      	cmp	r3, r0
 800af84:	d1f5      	bne.n	800af72 <start_pass+0x72>
 800af86:	4d9e      	ldr	r5, [pc, #632]	; (800b200 <start_pass+0x300>)
 800af88:	e0b2      	b.n	800b0f0 <start_pass+0x1f0>
 800af8a:	f240 3006 	movw	r0, #774	; 0x306
 800af8e:	4283      	cmp	r3, r0
 800af90:	f000 80ba 	beq.w	800b108 <start_pass+0x208>
 800af94:	f240 4002 	movw	r0, #1026	; 0x402
 800af98:	4283      	cmp	r3, r0
 800af9a:	f000 80b7 	beq.w	800b10c <start_pass+0x20c>
 800af9e:	f240 3003 	movw	r0, #771	; 0x303
 800afa2:	4283      	cmp	r3, r0
 800afa4:	d1e5      	bne.n	800af72 <start_pass+0x72>
      method_ptr = jpeg_idct_3x3;
 800afa6:	4d97      	ldr	r5, [pc, #604]	; (800b204 <start_pass+0x304>)
 800afa8:	e0a2      	b.n	800b0f0 <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800afaa:	f240 6003 	movw	r0, #1539	; 0x603
 800afae:	4283      	cmp	r3, r0
 800afb0:	f000 80ae 	beq.w	800b110 <start_pass+0x210>
 800afb4:	dc0e      	bgt.n	800afd4 <start_pass+0xd4>
 800afb6:	f240 5005 	movw	r0, #1285	; 0x505
 800afba:	4283      	cmp	r3, r0
 800afbc:	f000 80aa 	beq.w	800b114 <start_pass+0x214>
 800afc0:	f240 500a 	movw	r0, #1290	; 0x50a
 800afc4:	4283      	cmp	r3, r0
 800afc6:	f000 80a7 	beq.w	800b118 <start_pass+0x218>
 800afca:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800afce:	d1d0      	bne.n	800af72 <start_pass+0x72>
      method_ptr = jpeg_idct_4x8;
 800afd0:	4d8d      	ldr	r5, [pc, #564]	; (800b208 <start_pass+0x308>)
 800afd2:	e08d      	b.n	800b0f0 <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800afd4:	f240 600c 	movw	r0, #1548	; 0x60c
 800afd8:	4283      	cmp	r3, r0
 800afda:	f000 809f 	beq.w	800b11c <start_pass+0x21c>
 800afde:	f240 7007 	movw	r0, #1799	; 0x707
 800afe2:	4283      	cmp	r3, r0
 800afe4:	f000 809c 	beq.w	800b120 <start_pass+0x220>
 800afe8:	f240 6006 	movw	r0, #1542	; 0x606
 800afec:	4283      	cmp	r3, r0
 800afee:	d1c0      	bne.n	800af72 <start_pass+0x72>
      method_ptr = jpeg_idct_6x6;
 800aff0:	4d86      	ldr	r5, [pc, #536]	; (800b20c <start_pass+0x30c>)
 800aff2:	e07d      	b.n	800b0f0 <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800aff4:	f640 4006 	movw	r0, #3078	; 0xc06
 800aff8:	4283      	cmp	r3, r0
 800affa:	f000 8093 	beq.w	800b124 <start_pass+0x224>
 800affe:	dc21      	bgt.n	800b044 <start_pass+0x144>
 800b000:	f640 1009 	movw	r0, #2313	; 0x909
 800b004:	4283      	cmp	r3, r0
 800b006:	f000 808f 	beq.w	800b128 <start_pass+0x228>
 800b00a:	dc0d      	bgt.n	800b028 <start_pass+0x128>
 800b00c:	f640 0008 	movw	r0, #2056	; 0x808
 800b010:	4283      	cmp	r3, r0
 800b012:	d039      	beq.n	800b088 <start_pass+0x188>
 800b014:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800b018:	f000 8088 	beq.w	800b12c <start_pass+0x22c>
 800b01c:	f640 0004 	movw	r0, #2052	; 0x804
 800b020:	4283      	cmp	r3, r0
 800b022:	d1a6      	bne.n	800af72 <start_pass+0x72>
      method_ptr = jpeg_idct_8x4;
 800b024:	4d7a      	ldr	r5, [pc, #488]	; (800b210 <start_pass+0x310>)
 800b026:	e063      	b.n	800b0f0 <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b028:	f640 200a 	movw	r0, #2570	; 0xa0a
 800b02c:	4283      	cmp	r3, r0
 800b02e:	d07f      	beq.n	800b130 <start_pass+0x230>
 800b030:	f640 300b 	movw	r0, #2827	; 0xb0b
 800b034:	4283      	cmp	r3, r0
 800b036:	d07d      	beq.n	800b134 <start_pass+0x234>
 800b038:	f640 2005 	movw	r0, #2565	; 0xa05
 800b03c:	4283      	cmp	r3, r0
 800b03e:	d198      	bne.n	800af72 <start_pass+0x72>
      method_ptr = jpeg_idct_10x5;
 800b040:	4d74      	ldr	r5, [pc, #464]	; (800b214 <start_pass+0x314>)
 800b042:	e055      	b.n	800b0f0 <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b044:	f640 600e 	movw	r0, #3598	; 0xe0e
 800b048:	4283      	cmp	r3, r0
 800b04a:	d075      	beq.n	800b138 <start_pass+0x238>
 800b04c:	dc0d      	bgt.n	800b06a <start_pass+0x16a>
 800b04e:	f640 500d 	movw	r0, #3341	; 0xd0d
 800b052:	4283      	cmp	r3, r0
 800b054:	d072      	beq.n	800b13c <start_pass+0x23c>
 800b056:	f640 6007 	movw	r0, #3591	; 0xe07
 800b05a:	4283      	cmp	r3, r0
 800b05c:	d070      	beq.n	800b140 <start_pass+0x240>
 800b05e:	f640 400c 	movw	r0, #3084	; 0xc0c
 800b062:	4283      	cmp	r3, r0
 800b064:	d185      	bne.n	800af72 <start_pass+0x72>
      method_ptr = jpeg_idct_12x12;
 800b066:	4d6c      	ldr	r5, [pc, #432]	; (800b218 <start_pass+0x318>)
 800b068:	e042      	b.n	800b0f0 <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b06a:	f241 0008 	movw	r0, #4104	; 0x1008
 800b06e:	4283      	cmp	r3, r0
 800b070:	d068      	beq.n	800b144 <start_pass+0x244>
 800b072:	f241 0010 	movw	r0, #4112	; 0x1010
 800b076:	4283      	cmp	r3, r0
 800b078:	d066      	beq.n	800b148 <start_pass+0x248>
 800b07a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800b07e:	4283      	cmp	r3, r0
 800b080:	f47f af77 	bne.w	800af72 <start_pass+0x72>
      method_ptr = jpeg_idct_15x15;
 800b084:	4d65      	ldr	r5, [pc, #404]	; (800b21c <start_pass+0x31c>)
 800b086:	e033      	b.n	800b0f0 <start_pass+0x1f0>
      switch (cinfo->dct_method) {
 800b088:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d827      	bhi.n	800b0e0 <start_pass+0x1e0>
 800b090:	461c      	mov	r4, r3
 800b092:	4b63      	ldr	r3, [pc, #396]	; (800b220 <start_pass+0x320>)
 800b094:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b098:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800b09c:	f848 5f04 	str.w	r5, [r8, #4]!
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b0a0:	b1cb      	cbz	r3, 800b0d6 <start_pass+0x1d6>
 800b0a2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800b0a6:	42a3      	cmp	r3, r4
 800b0a8:	d015      	beq.n	800b0d6 <start_pass+0x1d6>
    qtbl = compptr->quant_table;
 800b0aa:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800b0ae:	b196      	cbz	r6, 800b0d6 <start_pass+0x1d6>
    switch (method) {
 800b0b0:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800b0b2:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
    switch (method) {
 800b0b6:	d049      	beq.n	800b14c <start_pass+0x24c>
 800b0b8:	2c02      	cmp	r4, #2
 800b0ba:	d05a      	beq.n	800b172 <start_pass+0x272>
 800b0bc:	2c00      	cmp	r4, #0
 800b0be:	f040 8098 	bne.w	800b1f2 <start_pass+0x2f2>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800b0c2:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b0c6:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800b0c8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800b0cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	2b40      	cmp	r3, #64	; 0x40
 800b0d4:	d1f8      	bne.n	800b0c8 <start_pass+0x1c8>
       ci++, compptr++) {
 800b0d6:	f10b 0b01 	add.w	fp, fp, #1
 800b0da:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800b0de:	e71c      	b.n	800af1a <start_pass+0x1a>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2231      	movs	r2, #49	; 0x31
 800b0e4:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	4798      	blx	r3
      break;
 800b0ec:	e7d4      	b.n	800b098 <start_pass+0x198>
      method_ptr = jpeg_idct_7x14;
 800b0ee:	4d4d      	ldr	r5, [pc, #308]	; (800b224 <start_pass+0x324>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800b0f0:	2400      	movs	r4, #0
 800b0f2:	e7d1      	b.n	800b098 <start_pass+0x198>
      method_ptr = jpeg_idct_4x4;
 800b0f4:	4d4c      	ldr	r5, [pc, #304]	; (800b228 <start_pass+0x328>)
 800b0f6:	e7fb      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_2x4;
 800b0f8:	4d4c      	ldr	r5, [pc, #304]	; (800b22c <start_pass+0x32c>)
 800b0fa:	e7f9      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_2x1;
 800b0fc:	4d4c      	ldr	r5, [pc, #304]	; (800b230 <start_pass+0x330>)
 800b0fe:	e7f7      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_1x1;
 800b100:	4d4c      	ldr	r5, [pc, #304]	; (800b234 <start_pass+0x334>)
 800b102:	e7f5      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_1x2;
 800b104:	4d4c      	ldr	r5, [pc, #304]	; (800b238 <start_pass+0x338>)
 800b106:	e7f3      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_3x6;
 800b108:	4d4c      	ldr	r5, [pc, #304]	; (800b23c <start_pass+0x33c>)
 800b10a:	e7f1      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_4x2;
 800b10c:	4d4c      	ldr	r5, [pc, #304]	; (800b240 <start_pass+0x340>)
 800b10e:	e7ef      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_6x3;
 800b110:	4d4c      	ldr	r5, [pc, #304]	; (800b244 <start_pass+0x344>)
 800b112:	e7ed      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_5x5;
 800b114:	4d4c      	ldr	r5, [pc, #304]	; (800b248 <start_pass+0x348>)
 800b116:	e7eb      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_5x10;
 800b118:	4d4c      	ldr	r5, [pc, #304]	; (800b24c <start_pass+0x34c>)
 800b11a:	e7e9      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_6x12;
 800b11c:	4d4c      	ldr	r5, [pc, #304]	; (800b250 <start_pass+0x350>)
 800b11e:	e7e7      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_7x7;
 800b120:	4d4c      	ldr	r5, [pc, #304]	; (800b254 <start_pass+0x354>)
 800b122:	e7e5      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_12x6;
 800b124:	4d4c      	ldr	r5, [pc, #304]	; (800b258 <start_pass+0x358>)
 800b126:	e7e3      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_9x9;
 800b128:	4d4c      	ldr	r5, [pc, #304]	; (800b25c <start_pass+0x35c>)
 800b12a:	e7e1      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_8x16;
 800b12c:	4d4c      	ldr	r5, [pc, #304]	; (800b260 <start_pass+0x360>)
 800b12e:	e7df      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_10x10;
 800b130:	4d4c      	ldr	r5, [pc, #304]	; (800b264 <start_pass+0x364>)
 800b132:	e7dd      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_11x11;
 800b134:	4d4c      	ldr	r5, [pc, #304]	; (800b268 <start_pass+0x368>)
 800b136:	e7db      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_14x14;
 800b138:	4d4c      	ldr	r5, [pc, #304]	; (800b26c <start_pass+0x36c>)
 800b13a:	e7d9      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_13x13;
 800b13c:	4d4c      	ldr	r5, [pc, #304]	; (800b270 <start_pass+0x370>)
 800b13e:	e7d7      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_14x7;
 800b140:	4d4c      	ldr	r5, [pc, #304]	; (800b274 <start_pass+0x374>)
 800b142:	e7d5      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_16x8;
 800b144:	4d4c      	ldr	r5, [pc, #304]	; (800b278 <start_pass+0x378>)
 800b146:	e7d3      	b.n	800b0f0 <start_pass+0x1f0>
      method_ptr = jpeg_idct_16x16;
 800b148:	4d4c      	ldr	r5, [pc, #304]	; (800b27c <start_pass+0x37c>)
 800b14a:	e7d1      	b.n	800b0f0 <start_pass+0x1f0>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800b14c:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b150:	2200      	movs	r2, #0
 800b152:	494b      	ldr	r1, [pc, #300]	; (800b280 <start_pass+0x380>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800b154:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800b158:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800b15c:	fb0c f303 	mul.w	r3, ip, r3
 800b160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b164:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800b166:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b16a:	3201      	adds	r2, #1
 800b16c:	2a40      	cmp	r2, #64	; 0x40
 800b16e:	d1f1      	bne.n	800b154 <start_pass+0x254>
 800b170:	e7b1      	b.n	800b0d6 <start_pass+0x1d6>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b172:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800b176:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b17a:	9304      	str	r3, [sp, #16]
 800b17c:	4b41      	ldr	r3, [pc, #260]	; (800b284 <start_pass+0x384>)
 800b17e:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b180:	9b03      	ldr	r3, [sp, #12]
 800b182:	ecb3 7b02 	vldmia	r3!, {d7}
 800b186:	9303      	str	r3, [sp, #12]
 800b188:	eeb0 8a47 	vmov.f32	s16, s14
 800b18c:	eef0 8a67 	vmov.f32	s17, s15
 800b190:	9b04      	ldr	r3, [sp, #16]
 800b192:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	4b3a      	ldr	r3, [pc, #232]	; (800b284 <start_pass+0x384>)
 800b19a:	9302      	str	r3, [sp, #8]
 800b19c:	f106 0310 	add.w	r3, r6, #16
 800b1a0:	9305      	str	r3, [sp, #20]
 800b1a2:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b1a4:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b1a8:	ecb3 7b02 	vldmia	r3!, {d7}
 800b1ac:	eeb0 9a47 	vmov.f32	s18, s14
 800b1b0:	eef0 9a67 	vmov.f32	s19, s15
 800b1b4:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b1b6:	f7f5 f9bd 	bl	8000534 <__aeabi_ui2d>
 800b1ba:	ec53 2b18 	vmov	r2, r3, d8
 800b1be:	f7f5 fa33 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b1c2:	ec53 2b19 	vmov	r2, r3, d9
 800b1c6:	f7f5 fa2f 	bl	8000628 <__aeabi_dmul>
 800b1ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7f5 fa2a 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800b1d4:	f7f5 fc3a 	bl	8000a4c <__aeabi_d2f>
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	f843 0b04 	str.w	r0, [r3], #4
 800b1de:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800b1e0:	9b05      	ldr	r3, [sp, #20]
 800b1e2:	429e      	cmp	r6, r3
 800b1e4:	d1dd      	bne.n	800b1a2 <start_pass+0x2a2>
	    i++;
 800b1e6:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800b1ea:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800b1ee:	d1c7      	bne.n	800b180 <start_pass+0x280>
 800b1f0:	e771      	b.n	800b0d6 <start_pass+0x1d6>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2231      	movs	r2, #49	; 0x31
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	615a      	str	r2, [r3, #20]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4798      	blx	r3
      break;
 800b1fe:	e76a      	b.n	800b0d6 <start_pass+0x1d6>
 800b200:	0801035d 	.word	0x0801035d
 800b204:	08010269 	.word	0x08010269
 800b208:	08014191 	.word	0x08014191
 800b20c:	0800fe0d 	.word	0x0800fe0d
 800b210:	0801310d 	.word	0x0801310d
 800b214:	08012ebd 	.word	0x08012ebd
 800b218:	08010dc1 	.word	0x08010dc1
 800b21c:	08011a6d 	.word	0x08011a6d
 800b220:	0802cce0 	.word	0x0802cce0
 800b224:	08013931 	.word	0x08013931
 800b228:	0801013d 	.word	0x0801013d
 800b22c:	080144f9 	.word	0x080144f9
 800b230:	08013521 	.word	0x08013521
 800b234:	080103d9 	.word	0x080103d9
 800b238:	080145d1 	.word	0x080145d1
 800b23c:	080143a9 	.word	0x080143a9
 800b240:	08013455 	.word	0x08013455
 800b244:	080132f9 	.word	0x080132f9
 800b248:	0800ffbd 	.word	0x0800ffbd
 800b24c:	08013f59 	.word	0x08013f59
 800b250:	08013ca1 	.word	0x08013ca1
 800b254:	0800fb79 	.word	0x0800fb79
 800b258:	08012c05 	.word	0x08012c05
 800b25c:	080103fd 	.word	0x080103fd
 800b260:	08013559 	.word	0x08013559
 800b264:	080106c1 	.word	0x080106c1
 800b268:	080109c5 	.word	0x080109c5
 800b26c:	08011625 	.word	0x08011625
 800b270:	0801118d 	.word	0x0801118d
 800b274:	08012879 	.word	0x08012879
 800b278:	08012441 	.word	0x08012441
 800b27c:	08011f01 	.word	0x08011f01
 800b280:	0802cd30 	.word	0x0802cd30
 800b284:	0802ccf0 	.word	0x0802ccf0

0800b288 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b28a:	6843      	ldr	r3, [r0, #4]
{
 800b28c:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b28e:	2254      	movs	r2, #84	; 0x54
 800b290:	2101      	movs	r1, #1
 800b292:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b294:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b296:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800b298:	4b0f      	ldr	r3, [pc, #60]	; (800b2d8 <jinit_inverse_dct+0x50>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b29a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b29c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800b2a0:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800b2a4:	f844 3b28 	str.w	r3, [r4], #40
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b2a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2aa:	42b3      	cmp	r3, r6
 800b2ac:	dc00      	bgt.n	800b2b0 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800b2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b2b0:	686b      	ldr	r3, [r5, #4]
 800b2b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800b2bc:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b2be:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b2c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800b2c4:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	f01e fc66 	bl	8029b98 <memset>
    idct->cur_method[ci] = -1;
 800b2cc:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800b2d0:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800b2d2:	f844 3f04 	str.w	r3, [r4, #4]!
       ci++, compptr++) {
 800b2d6:	e7e7      	b.n	800b2a8 <jinit_inverse_dct+0x20>
 800b2d8:	0800af01 	.word	0x0800af01

0800b2dc <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800b2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800b2e0:	6905      	ldr	r5, [r0, #16]
{
 800b2e2:	4607      	mov	r7, r0
 800b2e4:	4688      	mov	r8, r1
 800b2e6:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b2e8:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800b2ec:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800b2ee:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b2f2:	f1bb 0f00 	cmp.w	fp, #0
 800b2f6:	d042      	beq.n	800b37e <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800b2f8:	454e      	cmp	r6, r9
 800b2fa:	da42      	bge.n	800b382 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800b2fc:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	b95b      	cbnz	r3, 800b31c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	2278      	movs	r2, #120	; 0x78
 800b308:	f04f 31ff 	mov.w	r1, #4294967295
 800b30c:	4628      	mov	r0, r5
 800b30e:	615a      	str	r2, [r3, #20]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800b314:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b318:	2201      	movs	r2, #1
 800b31a:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800b31c:	f1c6 0619 	rsb	r6, r6, #25
 800b320:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800b324:	2619      	movs	r6, #25
 800b326:	e02c      	b.n	800b382 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800b328:	f1ba 0f00 	cmp.w	sl, #0
 800b32c:	d107      	bne.n	800b33e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b32e:	69ab      	ldr	r3, [r5, #24]
 800b330:	4628      	mov	r0, r5
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	4798      	blx	r3
 800b336:	b350      	cbz	r0, 800b38e <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800b338:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b33a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800b33e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800b342:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800b346:	2aff      	cmp	r2, #255	; 0xff
 800b348:	d116      	bne.n	800b378 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800b34a:	f1ba 0f00 	cmp.w	sl, #0
 800b34e:	d109      	bne.n	800b364 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b350:	69ab      	ldr	r3, [r5, #24]
 800b352:	4628      	mov	r0, r5
 800b354:	9201      	str	r2, [sp, #4]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	4798      	blx	r3
 800b35a:	b1c0      	cbz	r0, 800b38e <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800b35c:	69ab      	ldr	r3, [r5, #24]
 800b35e:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b360:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800b364:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800b368:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800b36c:	2bff      	cmp	r3, #255	; 0xff
 800b36e:	d0ec      	beq.n	800b34a <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800b370:	b113      	cbz	r3, 800b378 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800b372:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800b376:	e7bf      	b.n	800b2f8 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800b378:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800b37c:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800b37e:	2e18      	cmp	r6, #24
 800b380:	ddd2      	ble.n	800b328 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800b382:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800b386:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800b38a:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800b38e:	4658      	mov	r0, fp
 800b390:	b003      	add	sp, #12
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b398 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	9d06      	ldr	r5, [sp, #24]
 800b39c:	4606      	mov	r6, r0
 800b39e:	468c      	mov	ip, r1
 800b3a0:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800b3a2:	4295      	cmp	r5, r2
{
 800b3a4:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b3a6:	dd08      	ble.n	800b3ba <jpeg_huff_decode+0x22>
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	f7ff ff97 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b3ae:	b910      	cbnz	r0, 800b3b6 <jpeg_huff_decode+0x1e>
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800b3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b3b6:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800b3ba:	1b62      	subs	r2, r4, r5
 800b3bc:	4b1b      	ldr	r3, [pc, #108]	; (800b42c <jpeg_huff_decode+0x94>)
 800b3be:	fa4c f002 	asr.w	r0, ip, r2
 800b3c2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b3c6:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800b3c8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b3cc:	4283      	cmp	r3, r0
 800b3ce:	db0d      	blt.n	800b3ec <jpeg_huff_decode+0x54>
  if (l > 16) {
 800b3d0:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800b3d2:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800b3d6:	dd1f      	ble.n	800b418 <jpeg_huff_decode+0x80>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800b3d8:	6930      	ldr	r0, [r6, #16]
 800b3da:	2279      	movs	r2, #121	; 0x79
 800b3dc:	f04f 31ff 	mov.w	r1, #4294967295
 800b3e0:	6803      	ldr	r3, [r0, #0]
 800b3e2:	615a      	str	r2, [r3, #20]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	e7e3      	b.n	800b3b4 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b3ec:	2a00      	cmp	r2, #0
    code <<= 1;
 800b3ee:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b3f2:	dc08      	bgt.n	800b406 <jpeg_huff_decode+0x6e>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4661      	mov	r1, ip
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f7ff ff6f 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d0d6      	beq.n	800b3b0 <jpeg_huff_decode+0x18>
 800b402:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800b406:	3a01      	subs	r2, #1
    l++;
 800b408:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800b40a:	fa4c f302 	asr.w	r3, ip, r2
 800b40e:	f003 0301 	and.w	r3, r3, #1
 800b412:	ea43 0004 	orr.w	r0, r3, r4
    l++;
 800b416:	e7d7      	b.n	800b3c8 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800b418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b41c:	3512      	adds	r5, #18
 800b41e:	4403      	add	r3, r0
 800b420:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800b424:	4413      	add	r3, r2
 800b426:	7c58      	ldrb	r0, [r3, #17]
 800b428:	e7c4      	b.n	800b3b4 <jpeg_huff_decode+0x1c>
 800b42a:	bf00      	nop
 800b42c:	0802cdb0 	.word	0x0802cdb0

0800b430 <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800b430:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b432:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800b436:	2600      	movs	r6, #0
{
 800b438:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b43a:	68eb      	ldr	r3, [r5, #12]
 800b43c:	6991      	ldr	r1, [r2, #24]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	bfb8      	it	lt
 800b442:	3307      	addlt	r3, #7
 800b444:	eb01 01e3 	add.w	r1, r1, r3, asr #3

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b448:	6893      	ldr	r3, [r2, #8]
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b44a:	6191      	str	r1, [r2, #24]
  entropy->bitstate.bits_left = 0;
 800b44c:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b44e:	4798      	blx	r3
 800b450:	b190      	cbz	r0, 800b478 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800b452:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800b456:	4631      	mov	r1, r6
 800b458:	f105 0014 	add.w	r0, r5, #20
 800b45c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b460:	0092      	lsls	r2, r2, #2
 800b462:	f01e fb99 	bl	8029b98 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b466:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800b46a:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800b46c:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800b46e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800b472:	b903      	cbnz	r3, 800b476 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800b474:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800b476:	2001      	movs	r0, #1
}
 800b478:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b47c <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800b480:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800b484:	b091      	sub	sp, #68	; 0x44
 800b486:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b488:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800b48c:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b48e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b492:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800b494:	b933      	cbnz	r3, 800b4a4 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b496:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b498:	b17e      	cbz	r6, 800b4ba <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b49a:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800b49c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800b4a2:	e007      	b.n	800b4b4 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800b4a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1f5      	bne.n	800b496 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800b4aa:	f7ff ffc1 	bl	800b430 <process_restart>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1f1      	bne.n	800b496 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800b4b2:	2000      	movs	r0, #0
}
 800b4b4:	b011      	add	sp, #68	; 0x44
 800b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b4ba:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800b4bc:	f104 0810 	add.w	r8, r4, #16
 800b4c0:	af0b      	add	r7, sp, #44	; 0x2c
 800b4c2:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	f104 0b10 	add.w	fp, r4, #16
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	9206      	str	r2, [sp, #24]
 800b4d0:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800b4d2:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b5ec <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b4d6:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800b4d8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b4dc:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800b4e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e6:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b4e8:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800b4ec:	42b3      	cmp	r3, r6
 800b4ee:	dc0d      	bgt.n	800b50c <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b4f0:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b4f2:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b4f4:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b4f6:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	9a07      	ldr	r2, [sp, #28]
 800b4fc:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800b4fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b500:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800b504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b506:	6833      	ldr	r3, [r6, #0]
 800b508:	602b      	str	r3, [r5, #0]
 800b50a:	e7c6      	b.n	800b49a <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800b50c:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b50e:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800b512:	f859 7f04 	ldr.w	r7, [r9, #4]!
      block = MCU_data[blkn];
 800b516:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b51a:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800b51c:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800b520:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b52a:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b52e:	dc0c      	bgt.n	800b54a <decode_mcu_DC_first+0xce>
 800b530:	2300      	movs	r3, #0
 800b532:	4662      	mov	r2, ip
 800b534:	4671      	mov	r1, lr
 800b536:	a806      	add	r0, sp, #24
 800b538:	f7ff fed0 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d0b8      	beq.n	800b4b2 <decode_mcu_DC_first+0x36>
 800b540:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b544:	f1bc 0f07 	cmp.w	ip, #7
 800b548:	dd3e      	ble.n	800b5c8 <decode_mcu_DC_first+0x14c>
 800b54a:	f1ac 0308 	sub.w	r3, ip, #8
 800b54e:	fa4e f303 	asr.w	r3, lr, r3
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b558:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	d042      	beq.n	800b5e6 <decode_mcu_DC_first+0x16a>
 800b560:	4443      	add	r3, r8
 800b562:	ebac 0c02 	sub.w	ip, ip, r2
 800b566:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800b56a:	f1b8 0f00 	cmp.w	r8, #0
 800b56e:	d01b      	beq.n	800b5a8 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b570:	45e0      	cmp	r8, ip
 800b572:	dd09      	ble.n	800b588 <decode_mcu_DC_first+0x10c>
 800b574:	4643      	mov	r3, r8
 800b576:	4662      	mov	r2, ip
 800b578:	4671      	mov	r1, lr
 800b57a:	a806      	add	r0, sp, #24
 800b57c:	f7ff feae 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b580:	2800      	cmp	r0, #0
 800b582:	d096      	beq.n	800b4b2 <decode_mcu_DC_first+0x36>
 800b584:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800b588:	ebac 0c08 	sub.w	ip, ip, r8
 800b58c:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800b590:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800b594:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800b598:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800b59c:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800b59e:	4299      	cmp	r1, r3
 800b5a0:	bfac      	ite	ge
 800b5a2:	eba3 0802 	subge.w	r8, r3, r2
 800b5a6:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800b5a8:	ab10      	add	r3, sp, #64	; 0x40
      (*block)[0] = (JCOEF) (s << Al);
 800b5aa:	9a03      	ldr	r2, [sp, #12]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b5ac:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800b5ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5b2:	f857 3c10 	ldr.w	r3, [r7, #-16]
 800b5b6:	4443      	add	r3, r8
      (*block)[0] = (JCOEF) (s << Al);
 800b5b8:	fa03 f802 	lsl.w	r8, r3, r2
      state.last_dc_val[ci] = s;
 800b5bc:	f847 3c10 	str.w	r3, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b5c6:	e78f      	b.n	800b4e8 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	4662      	mov	r2, ip
 800b5ce:	4643      	mov	r3, r8
 800b5d0:	4671      	mov	r1, lr
 800b5d2:	a806      	add	r0, sp, #24
 800b5d4:	f7ff fee0 	bl	800b398 <jpeg_huff_decode>
 800b5d8:	f1b0 0800 	subs.w	r8, r0, #0
 800b5dc:	f6ff af69 	blt.w	800b4b2 <decode_mcu_DC_first+0x36>
 800b5e0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b5e4:	e7c1      	b.n	800b56a <decode_mcu_DC_first+0xee>
 800b5e6:	2309      	movs	r3, #9
 800b5e8:	e7ef      	b.n	800b5ca <decode_mcu_DC_first+0x14e>
 800b5ea:	bf00      	nop
 800b5ec:	0802cdb0 	.word	0x0802cdb0

0800b5f0 <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b5f0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	b08d      	sub	sp, #52	; 0x34
 800b5fc:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b5fe:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b602:	b933      	cbnz	r3, 800b612 <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b604:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b606:	b17b      	cbz	r3, 800b628 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b608:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800b60a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b60c:	3b01      	subs	r3, #1
 800b60e:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800b610:	e007      	b.n	800b622 <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800b612:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1f5      	bne.n	800b604 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800b618:	f7ff ff0a 	bl	800b430 <process_restart>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d1f1      	bne.n	800b604 <decode_mcu_AC_first+0x14>
	return FALSE;
 800b620:	2000      	movs	r0, #0
}
 800b622:	b00d      	add	sp, #52	; 0x34
 800b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800b628:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800b62c:	692e      	ldr	r6, [r5, #16]
    Se = cinfo->Se;
 800b62e:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800b630:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    natural_order = cinfo->natural_order;
 800b634:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Al = cinfo->Al;
 800b638:	9304      	str	r3, [sp, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800b63a:	b116      	cbz	r6, 800b642 <decode_mcu_AC_first+0x52>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800b63c:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800b63e:	612e      	str	r6, [r5, #16]
 800b640:	e7e2      	b.n	800b608 <decode_mcu_AC_first+0x18>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b642:	69bb      	ldr	r3, [r7, #24]
      tbl = entropy->ac_derived_tbl;
 800b644:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	9207      	str	r2, [sp, #28]
 800b64e:	9308      	str	r3, [sp, #32]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b650:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      block = MCU_data[0];
 800b654:	6823      	ldr	r3, [r4, #0]
	  r = GET_BITS(s);
 800b656:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800b74c <decode_mcu_AC_first+0x15c>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b65a:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800b65c:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b65e:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b662:	9b03      	ldr	r3, [sp, #12]
 800b664:	4598      	cmp	r8, r3
 800b666:	dc69      	bgt.n	800b73c <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800b668:	2a07      	cmp	r2, #7
 800b66a:	dc09      	bgt.n	800b680 <decode_mcu_AC_first+0x90>
 800b66c:	2300      	movs	r3, #0
 800b66e:	a807      	add	r0, sp, #28
 800b670:	f7ff fe34 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b674:	2800      	cmp	r0, #0
 800b676:	d0d3      	beq.n	800b620 <decode_mcu_AC_first+0x30>
 800b678:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800b67c:	2a07      	cmp	r2, #7
 800b67e:	dd33      	ble.n	800b6e8 <decode_mcu_AC_first+0xf8>
 800b680:	f1a2 0308 	sub.w	r3, r2, #8
 800b684:	fa41 f303 	asr.w	r3, r1, r3
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b68e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b692:	b3a0      	cbz	r0, 800b6fe <decode_mcu_AC_first+0x10e>
 800b694:	444b      	add	r3, r9
 800b696:	1a12      	subs	r2, r2, r0
 800b698:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b69c:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800b6a0:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800b6a4:	d02d      	beq.n	800b702 <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b6a6:	42a2      	cmp	r2, r4
	  k += r;
 800b6a8:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b6aa:	da07      	bge.n	800b6bc <decode_mcu_AC_first+0xcc>
 800b6ac:	4623      	mov	r3, r4
 800b6ae:	a807      	add	r0, sp, #28
 800b6b0:	f7ff fe14 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d0b3      	beq.n	800b620 <decode_mcu_AC_first+0x30>
 800b6b8:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800b6bc:	1b12      	subs	r2, r2, r4
 800b6be:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800b6c2:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800b6c4:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800b6c8:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800b6cc:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800b6ce:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800b6d0:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800b6d2:	bfa8      	it	ge
 800b6d4:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800b6d6:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800b6da:	40a3      	lsls	r3, r4
 800b6dc:	9c05      	ldr	r4, [sp, #20]
 800b6de:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b6e2:	f108 0801 	add.w	r8, r8, #1
 800b6e6:	e7bc      	b.n	800b662 <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	a807      	add	r0, sp, #28
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	f7ff fe52 	bl	800b398 <jpeg_huff_decode>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	db93      	blt.n	800b620 <decode_mcu_AC_first+0x30>
 800b6f8:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800b6fc:	e7ce      	b.n	800b69c <decode_mcu_AC_first+0xac>
 800b6fe:	2309      	movs	r3, #9
 800b700:	e7f3      	b.n	800b6ea <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800b702:	2b0f      	cmp	r3, #15
 800b704:	d102      	bne.n	800b70c <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800b706:	f108 080f 	add.w	r8, r8, #15
 800b70a:	e7ea      	b.n	800b6e2 <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800b70c:	2601      	movs	r6, #1
 800b70e:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800b710:	b19b      	cbz	r3, 800b73a <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800b712:	429a      	cmp	r2, r3
 800b714:	da09      	bge.n	800b72a <decode_mcu_AC_first+0x13a>
 800b716:	a807      	add	r0, sp, #28
 800b718:	9303      	str	r3, [sp, #12]
 800b71a:	f7ff fddf 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b71e:	2800      	cmp	r0, #0
 800b720:	f43f af7e 	beq.w	800b620 <decode_mcu_AC_first+0x30>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800b72a:	1ad2      	subs	r2, r2, r3
 800b72c:	4807      	ldr	r0, [pc, #28]	; (800b74c <decode_mcu_AC_first+0x15c>)
 800b72e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b732:	fa41 f302 	asr.w	r3, r1, r2
 800b736:	4003      	ands	r3, r0
	      EOBRUN += r;
 800b738:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800b73a:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	9807      	ldr	r0, [sp, #28]
 800b740:	6018      	str	r0, [r3, #0]
 800b742:	9808      	ldr	r0, [sp, #32]
 800b744:	6058      	str	r0, [r3, #4]
 800b746:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800b74a:	e778      	b.n	800b63e <decode_mcu_AC_first+0x4e>
 800b74c:	0802cdb0 	.word	0x0802cdb0

0800b750 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800b750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b754:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800b758:	2701      	movs	r7, #1
{   
 800b75a:	b087      	sub	sp, #28
 800b75c:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b75e:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b760:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b764:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b766:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b76a:	b9c3      	cbnz	r3, 800b79e <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b76c:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b76e:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b770:	9405      	str	r4, [sp, #20]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	9201      	str	r2, [sp, #4]
 800b778:	9302      	str	r3, [sp, #8]
 800b77a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b77e:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800b782:	42b3      	cmp	r3, r6
 800b784:	dc16      	bgt.n	800b7b4 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b786:	69a3      	ldr	r3, [r4, #24]
 800b788:	9801      	ldr	r0, [sp, #4]
 800b78a:	6018      	str	r0, [r3, #0]
 800b78c:	9802      	ldr	r0, [sp, #8]
 800b78e:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800b790:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b792:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b794:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b796:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800b79a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800b79c:	e007      	b.n	800b7ae <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800b79e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e3      	bne.n	800b76c <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800b7a4:	f7ff fe44 	bl	800b430 <process_restart>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d1df      	bne.n	800b76c <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800b7ac:	2000      	movs	r0, #0
}
 800b7ae:	b007      	add	sp, #28
 800b7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800b7b4:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800b7b6:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800b7ba:	dc07      	bgt.n	800b7cc <decode_mcu_DC_refine+0x7c>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	a801      	add	r0, sp, #4
 800b7c0:	f7ff fd8c 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d0f1      	beq.n	800b7ac <decode_mcu_DC_refine+0x5c>
 800b7c8:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800b7cc:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b7ce:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800b7d0:	fa41 f302 	asr.w	r3, r1, r2
 800b7d4:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800b7d6:	bf42      	ittt	mi
 800b7d8:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800b7dc:	433b      	orrmi	r3, r7
 800b7de:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b7e2:	e7cc      	b.n	800b77e <decode_mcu_DC_refine+0x2e>

0800b7e4 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b7e4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	b0d1      	sub	sp, #324	; 0x144
 800b7f0:	460e      	mov	r6, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b7f2:	f8d0 71d0 	ldr.w	r7, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b7f6:	b94b      	cbnz	r3, 800b80c <decode_mcu_AC_refine+0x28>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800b7f8:	f8d7 a024 	ldr.w	sl, [r7, #36]	; 0x24
 800b7fc:	f1ba 0f00 	cmp.w	sl, #0
 800b800:	d00f      	beq.n	800b822 <decode_mcu_AC_refine+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28

  return TRUE;
 800b804:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b806:	3b01      	subs	r3, #1
 800b808:	62bb      	str	r3, [r7, #40]	; 0x28
  return TRUE;
 800b80a:	e007      	b.n	800b81c <decode_mcu_AC_refine+0x38>
    if (entropy->restarts_to_go == 0)
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f2      	bne.n	800b7f8 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800b812:	f7ff fe0d 	bl	800b430 <process_restart>
 800b816:	2800      	cmp	r0, #0
 800b818:	d1ee      	bne.n	800b7f8 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800b81a:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800b81c:	b051      	add	sp, #324	; 0x144
 800b81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800b822:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b826:	2201      	movs	r2, #1
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800b828:	f8d7 b010 	ldr.w	fp, [r7, #16]
    Se = cinfo->Se;
 800b82c:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b82e:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
    block = MCU_data[0];
 800b832:	f8d6 8000 	ldr.w	r8, [r6]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b836:	409a      	lsls	r2, r3
    k = cinfo->Ss;
 800b838:	f8d5 6198 	ldr.w	r6, [r5, #408]	; 0x198
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b83c:	950f      	str	r5, [sp, #60]	; 0x3c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b83e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b840:	f04f 32ff 	mov.w	r2, #4294967295
 800b844:	fa02 f303 	lsl.w	r3, r2, r3
 800b848:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800b84a:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
 800b84e:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b850:	69ab      	ldr	r3, [r5, #24]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	920b      	str	r2, [sp, #44]	; 0x2c
 800b858:	930c      	str	r3, [sp, #48]	; 0x30
    tbl = entropy->ac_derived_tbl;
 800b85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b85c:	e9d7 4202 	ldrd	r4, r2, [r7, #8]
    tbl = entropy->ac_derived_tbl;
 800b860:	9309      	str	r3, [sp, #36]	; 0x24
    if (EOBRUN == 0) {
 800b862:	f1bb 0f00 	cmp.w	fp, #0
 800b866:	f000 80c3 	beq.w	800b9f0 <decode_mcu_AC_refine+0x20c>
      for (; k <= Se; k++) {
 800b86a:	9b06      	ldr	r3, [sp, #24]
 800b86c:	429e      	cmp	r6, r3
 800b86e:	f340 80cd 	ble.w	800ba0c <decode_mcu_AC_refine+0x228>
      EOBRUN--;
 800b872:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b876:	e0bf      	b.n	800b9f8 <decode_mcu_AC_refine+0x214>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800b878:	2a07      	cmp	r2, #7
 800b87a:	dc0a      	bgt.n	800b892 <decode_mcu_AC_refine+0xae>
 800b87c:	2300      	movs	r3, #0
 800b87e:	4621      	mov	r1, r4
 800b880:	a80b      	add	r0, sp, #44	; 0x2c
 800b882:	f7ff fd2b 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b886:	2800      	cmp	r0, #0
 800b888:	d06e      	beq.n	800b968 <decode_mcu_AC_refine+0x184>
 800b88a:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
 800b88e:	2a07      	cmp	r2, #7
 800b890:	dd61      	ble.n	800b956 <decode_mcu_AC_refine+0x172>
 800b892:	f1a2 0308 	sub.w	r3, r2, #8
 800b896:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b898:	fa44 f303 	asr.w	r3, r4, r3
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b8a2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800b8a6:	2900      	cmp	r1, #0
 800b8a8:	d06b      	beq.n	800b982 <decode_mcu_AC_refine+0x19e>
 800b8aa:	4403      	add	r3, r0
 800b8ac:	1a52      	subs	r2, r2, r1
 800b8ae:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b8b2:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800b8b6:	ea4f 1920 	mov.w	r9, r0, asr #4
	if (s) {
 800b8ba:	9304      	str	r3, [sp, #16]
 800b8bc:	d066      	beq.n	800b98c <decode_mcu_AC_refine+0x1a8>
	  if (s != 1)		/* size of new coef should always be 1 */
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d009      	beq.n	800b8d6 <decode_mcu_AC_refine+0xf2>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800b8c2:	682b      	ldr	r3, [r5, #0]
 800b8c4:	2179      	movs	r1, #121	; 0x79
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	9204      	str	r2, [sp, #16]
 800b8ca:	6159      	str	r1, [r3, #20]
 800b8cc:	f04f 31ff 	mov.w	r1, #4294967295
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	4798      	blx	r3
 800b8d4:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800b8d6:	2a00      	cmp	r2, #0
 800b8d8:	dc08      	bgt.n	800b8ec <decode_mcu_AC_refine+0x108>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4621      	mov	r1, r4
 800b8de:	a80b      	add	r0, sp, #44	; 0x2c
 800b8e0:	f7ff fcfc 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d03f      	beq.n	800b968 <decode_mcu_AC_refine+0x184>
 800b8e8:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1))
 800b8ec:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800b8ee:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800b8f0:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800b8f4:	f013 0f01 	tst.w	r3, #1
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	bf08      	it	eq
 800b8fc:	460b      	moveq	r3, r1
 800b8fe:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800b900:	9b08      	ldr	r3, [sp, #32]
 800b902:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b906:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800b908:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d05e      	beq.n	800b9ce <decode_mcu_AC_refine+0x1ea>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800b910:	2a00      	cmp	r2, #0
 800b912:	dc07      	bgt.n	800b924 <decode_mcu_AC_refine+0x140>
 800b914:	2301      	movs	r3, #1
 800b916:	4621      	mov	r1, r4
 800b918:	a80b      	add	r0, sp, #44	; 0x2c
 800b91a:	f7ff fcdf 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b91e:	b318      	cbz	r0, 800b968 <decode_mcu_AC_refine+0x184>
 800b920:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	    if (GET_BITS(1)) {
 800b924:	3a01      	subs	r2, #1
 800b926:	fa44 f302 	asr.w	r3, r4, r2
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d50e      	bpl.n	800b94c <decode_mcu_AC_refine+0x168>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800b92e:	9b05      	ldr	r3, [sp, #20]
 800b930:	f938 1013 	ldrsh.w	r1, [r8, r3, lsl #1]
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	4219      	tst	r1, r3
 800b938:	d108      	bne.n	800b94c <decode_mcu_AC_refine+0x168>
		if (*thiscoef >= 0)
 800b93a:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800b93c:	b28b      	uxth	r3, r1
 800b93e:	bfac      	ite	ge
 800b940:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800b942:	9907      	ldrlt	r1, [sp, #28]
 800b944:	440b      	add	r3, r1
 800b946:	9905      	ldr	r1, [sp, #20]
 800b948:	f828 3011 	strh.w	r3, [r8, r1, lsl #1]
	  k++;
 800b94c:	3601      	adds	r6, #1
	} while (k <= Se);
 800b94e:	9b06      	ldr	r3, [sp, #24]
 800b950:	42b3      	cmp	r3, r6
 800b952:	dad5      	bge.n	800b900 <decode_mcu_AC_refine+0x11c>
 800b954:	e03e      	b.n	800b9d4 <decode_mcu_AC_refine+0x1f0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800b956:	2301      	movs	r3, #1
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	4621      	mov	r1, r4
 800b95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95e:	a80b      	add	r0, sp, #44	; 0x2c
 800b960:	f7ff fd1a 	bl	800b398 <jpeg_huff_decode>
 800b964:	2800      	cmp	r0, #0
 800b966:	da0e      	bge.n	800b986 <decode_mcu_AC_refine+0x1a2>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800b968:	ab10      	add	r3, sp, #64	; 0x40
 800b96a:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800b96c:	f1ba 0f00 	cmp.w	sl, #0
 800b970:	f43f af53 	beq.w	800b81a <decode_mcu_AC_refine+0x36>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800b974:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b978:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800b97c:	f828 2011 	strh.w	r2, [r8, r1, lsl #1]
 800b980:	e7f4      	b.n	800b96c <decode_mcu_AC_refine+0x188>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800b982:	2309      	movs	r3, #9
 800b984:	e7e8      	b.n	800b958 <decode_mcu_AC_refine+0x174>
 800b986:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
 800b98a:	e792      	b.n	800b8b2 <decode_mcu_AC_refine+0xce>
	  if (r != 15) {
 800b98c:	f1b9 0f0f 	cmp.w	r9, #15
 800b990:	d0b6      	beq.n	800b900 <decode_mcu_AC_refine+0x11c>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800b992:	2301      	movs	r3, #1
 800b994:	fa03 fb09 	lsl.w	fp, r3, r9
	    if (r) {
 800b998:	f1b9 0f00 	cmp.w	r9, #0
 800b99c:	d013      	beq.n	800b9c6 <decode_mcu_AC_refine+0x1e2>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800b99e:	454a      	cmp	r2, r9
 800b9a0:	da08      	bge.n	800b9b4 <decode_mcu_AC_refine+0x1d0>
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	a80b      	add	r0, sp, #44	; 0x2c
 800b9a8:	f7ff fc98 	bl	800b2dc <jpeg_fill_bit_buffer>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d0db      	beq.n	800b968 <decode_mcu_AC_refine+0x184>
 800b9b0:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800b9b4:	4b28      	ldr	r3, [pc, #160]	; (800ba58 <decode_mcu_AC_refine+0x274>)
 800b9b6:	eba2 0209 	sub.w	r2, r2, r9
 800b9ba:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 800b9be:	fa44 f302 	asr.w	r3, r4, r2
 800b9c2:	400b      	ands	r3, r1
	      EOBRUN += r;
 800b9c4:	449b      	add	fp, r3
    if (EOBRUN > 0) {
 800b9c6:	f1bb 0f00 	cmp.w	fp, #0
 800b9ca:	d015      	beq.n	800b9f8 <decode_mcu_AC_refine+0x214>
 800b9cc:	e74d      	b.n	800b86a <decode_mcu_AC_refine+0x86>
	    if (--r < 0)
 800b9ce:	f1b9 0901 	subs.w	r9, r9, #1
 800b9d2:	d2bb      	bcs.n	800b94c <decode_mcu_AC_refine+0x168>
	if (s) {
 800b9d4:	9b04      	ldr	r3, [sp, #16]
 800b9d6:	b153      	cbz	r3, 800b9ee <decode_mcu_AC_refine+0x20a>
	  int pos = natural_order[k];
 800b9d8:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800b9da:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800b9dc:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800b9e0:	f828 1013 	strh.w	r1, [r8, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800b9e4:	a910      	add	r1, sp, #64	; 0x40
 800b9e6:	f841 302a 	str.w	r3, [r1, sl, lsl #2]
 800b9ea:	f10a 0a01 	add.w	sl, sl, #1
      for (; k <= Se; k++) {
 800b9ee:	3601      	adds	r6, #1
 800b9f0:	9b06      	ldr	r3, [sp, #24]
 800b9f2:	429e      	cmp	r6, r3
 800b9f4:	f77f af40 	ble.w	800b878 <decode_mcu_AC_refine+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b9f8:	69ab      	ldr	r3, [r5, #24]
 800b9fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9fc:	6019      	str	r1, [r3, #0]
 800b9fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba00:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800ba02:	f8c7 b010 	str.w	fp, [r7, #16]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ba06:	e9c7 4202 	strd	r4, r2, [r7, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800ba0a:	e6fa      	b.n	800b802 <decode_mcu_AC_refine+0x1e>
	thiscoef = *block + natural_order[k];
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
	if (*thiscoef != 0) {
 800ba12:	f938 3019 	ldrsh.w	r3, [r8, r9, lsl #1]
 800ba16:	b1e3      	cbz	r3, 800ba52 <decode_mcu_AC_refine+0x26e>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	dc08      	bgt.n	800ba2e <decode_mcu_AC_refine+0x24a>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4621      	mov	r1, r4
 800ba20:	a80b      	add	r0, sp, #44	; 0x2c
 800ba22:	f7ff fc5b 	bl	800b2dc <jpeg_fill_bit_buffer>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d09e      	beq.n	800b968 <decode_mcu_AC_refine+0x184>
 800ba2a:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800ba2e:	3a01      	subs	r2, #1
 800ba30:	fa44 f302 	asr.w	r3, r4, r2
 800ba34:	07db      	lsls	r3, r3, #31
 800ba36:	d50c      	bpl.n	800ba52 <decode_mcu_AC_refine+0x26e>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800ba38:	f938 1019 	ldrsh.w	r1, [r8, r9, lsl #1]
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	4219      	tst	r1, r3
 800ba40:	d107      	bne.n	800ba52 <decode_mcu_AC_refine+0x26e>
	      if (*thiscoef >= 0)
 800ba42:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800ba44:	b28b      	uxth	r3, r1
 800ba46:	bfac      	ite	ge
 800ba48:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800ba4a:	9907      	ldrlt	r1, [sp, #28]
 800ba4c:	440b      	add	r3, r1
 800ba4e:	f828 3019 	strh.w	r3, [r8, r9, lsl #1]
      for (; k <= Se; k++) {
 800ba52:	3601      	adds	r6, #1
 800ba54:	e709      	b.n	800b86a <decode_mcu_AC_refine+0x86>
 800ba56:	bf00      	nop
 800ba58:	0802cdb0 	.word	0x0802cdb0

0800ba5c <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800ba60:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800ba64:	b093      	sub	sp, #76	; 0x4c
 800ba66:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ba68:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800ba6c:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800ba6e:	b933      	cbnz	r3, 800ba7e <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800ba70:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800ba72:	b17f      	cbz	r7, 800ba94 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800ba74:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800ba76:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800ba7c:	e007      	b.n	800ba8e <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800ba7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f5      	bne.n	800ba70 <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800ba84:	f7ff fcd4 	bl	800b430 <process_restart>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d1f1      	bne.n	800ba70 <decode_mcu_sub+0x14>
	return FALSE;
 800ba8c:	2000      	movs	r0, #0
}
 800ba8e:	b013      	add	sp, #76	; 0x4c
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800ba94:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800ba98:	f105 0810 	add.w	r8, r5, #16
 800ba9c:	ac0d      	add	r4, sp, #52	; 0x34
 800ba9e:	f105 095c 	add.w	r9, r5, #92	; 0x5c
    natural_order = cinfo->natural_order;
 800baa2:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800baa4:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800baa8:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800bd48 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800baac:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800baae:	69b3      	ldr	r3, [r6, #24]
 800bab0:	960c      	str	r6, [sp, #48]	; 0x30
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	9208      	str	r2, [sp, #32]
 800bab8:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800baba:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800babe:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bac4:	f8d8 3000 	ldr.w	r3, [r8]
 800bac8:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800baca:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800bace:	42bb      	cmp	r3, r7
 800bad0:	dc0e      	bgt.n	800baf0 <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bad2:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bad4:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bad6:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800bad8:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae0:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bae2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bae4:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800baea:	6833      	ldr	r3, [r6, #0]
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	e7c1      	b.n	800ba74 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800baf0:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800baf2:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800baf6:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800bafa:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bafe:	dc0c      	bgt.n	800bb1a <decode_mcu_sub+0xbe>
 800bb00:	2300      	movs	r3, #0
 800bb02:	4662      	mov	r2, ip
 800bb04:	4671      	mov	r1, lr
 800bb06:	a808      	add	r0, sp, #32
 800bb08:	f7ff fbe8 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d0bd      	beq.n	800ba8c <decode_mcu_sub+0x30>
 800bb10:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bb14:	f1bc 0f07 	cmp.w	ip, #7
 800bb18:	dd4a      	ble.n	800bbb0 <decode_mcu_sub+0x154>
 800bb1a:	f1ac 0308 	sub.w	r3, ip, #8
 800bb1e:	fa4e f303 	asr.w	r3, lr, r3
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bb28:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	d04d      	beq.n	800bbcc <decode_mcu_sub+0x170>
 800bb30:	4423      	add	r3, r4
 800bb32:	ebac 0c02 	sub.w	ip, ip, r2
 800bb36:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800bb3a:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800bb3e:	f8d9 8028 	ldr.w	r8, [r9, #40]	; 0x28
      coef_limit = entropy->coef_limit[blkn];
 800bb42:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 80a0 	beq.w	800bc8a <decode_mcu_sub+0x22e>
	if (s) {
 800bb4a:	b1cc      	cbz	r4, 800bb80 <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bb4c:	45a4      	cmp	ip, r4
 800bb4e:	da09      	bge.n	800bb64 <decode_mcu_sub+0x108>
 800bb50:	4623      	mov	r3, r4
 800bb52:	4662      	mov	r2, ip
 800bb54:	4671      	mov	r1, lr
 800bb56:	a808      	add	r0, sp, #32
 800bb58:	f7ff fbc0 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d095      	beq.n	800ba8c <decode_mcu_sub+0x30>
 800bb60:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800bb64:	ebac 0c04 	sub.w	ip, ip, r4
 800bb68:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800bb6c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800bb6e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800bb72:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800bb76:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	bfac      	ite	ge
 800bb7c:	1a9c      	subge	r4, r3, r2
 800bb7e:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800bb80:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800bb84:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800bb88:	ab12      	add	r3, sp, #72	; 0x48
 800bb8a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800bb8e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800bb92:	4423      	add	r3, r4
      k = 1;
 800bb94:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800bb96:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800bb9a:	f8ab 3000 	strh.w	r3, [fp]
	for (; k < coef_limit; k++) {
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	429c      	cmp	r4, r3
 800bba2:	db15      	blt.n	800bbd0 <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800bba4:	9b05      	ldr	r3, [sp, #20]
 800bba6:	429c      	cmp	r4, r3
 800bba8:	f340 8081 	ble.w	800bcae <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bbac:	3701      	adds	r7, #1
 800bbae:	e78c      	b.n	800baca <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	4662      	mov	r2, ip
 800bbb6:	4623      	mov	r3, r4
 800bbb8:	4671      	mov	r1, lr
 800bbba:	a808      	add	r0, sp, #32
 800bbbc:	f7ff fbec 	bl	800b398 <jpeg_huff_decode>
 800bbc0:	1e04      	subs	r4, r0, #0
 800bbc2:	f6ff af63 	blt.w	800ba8c <decode_mcu_sub+0x30>
 800bbc6:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bbca:	e7b6      	b.n	800bb3a <decode_mcu_sub+0xde>
 800bbcc:	2309      	movs	r3, #9
 800bbce:	e7f0      	b.n	800bbb2 <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800bbd0:	f1bc 0f07 	cmp.w	ip, #7
 800bbd4:	dc0d      	bgt.n	800bbf2 <decode_mcu_sub+0x196>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	4662      	mov	r2, ip
 800bbda:	4671      	mov	r1, lr
 800bbdc:	a808      	add	r0, sp, #32
 800bbde:	f7ff fb7d 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f43f af52 	beq.w	800ba8c <decode_mcu_sub+0x30>
 800bbe8:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bbec:	f1bc 0f07 	cmp.w	ip, #7
 800bbf0:	dd37      	ble.n	800bc62 <decode_mcu_sub+0x206>
 800bbf2:	f1ac 0308 	sub.w	r3, ip, #8
 800bbf6:	fa4e f303 	asr.w	r3, lr, r3
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bc00:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bc04:	2a00      	cmp	r2, #0
 800bc06:	d03a      	beq.n	800bc7e <decode_mcu_sub+0x222>
 800bc08:	4443      	add	r3, r8
 800bc0a:	ebac 0c02 	sub.w	ip, ip, r2
 800bc0e:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800bc12:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800bc16:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800bc1a:	d032      	beq.n	800bc82 <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bc1c:	459c      	cmp	ip, r3
	    k += r;
 800bc1e:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bc20:	da0b      	bge.n	800bc3a <decode_mcu_sub+0x1de>
 800bc22:	4662      	mov	r2, ip
 800bc24:	4671      	mov	r1, lr
 800bc26:	a808      	add	r0, sp, #32
 800bc28:	9307      	str	r3, [sp, #28]
 800bc2a:	f7ff fb57 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	f43f af2c 	beq.w	800ba8c <decode_mcu_sub+0x30>
 800bc34:	9b07      	ldr	r3, [sp, #28]
 800bc36:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800bc3a:	ebac 0c03 	sub.w	ip, ip, r3
 800bc3e:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800bc42:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800bc44:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800bc48:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800bc4c:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800bc4e:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800bc50:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800bc52:	bfa8      	it	ge
 800bc54:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800bc56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bc5a:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800bc5e:	3401      	adds	r4, #1
 800bc60:	e79d      	b.n	800bb9e <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800bc62:	2301      	movs	r3, #1
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	4662      	mov	r2, ip
 800bc68:	4643      	mov	r3, r8
 800bc6a:	4671      	mov	r1, lr
 800bc6c:	a808      	add	r0, sp, #32
 800bc6e:	f7ff fb93 	bl	800b398 <jpeg_huff_decode>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f6ff af0a 	blt.w	800ba8c <decode_mcu_sub+0x30>
 800bc78:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bc7c:	e7c9      	b.n	800bc12 <decode_mcu_sub+0x1b6>
 800bc7e:	2309      	movs	r3, #9
 800bc80:	e7f0      	b.n	800bc64 <decode_mcu_sub+0x208>
	    if (r != 15)
 800bc82:	2a0f      	cmp	r2, #15
 800bc84:	d192      	bne.n	800bbac <decode_mcu_sub+0x150>
	    k += 15;
 800bc86:	340f      	adds	r4, #15
 800bc88:	e7e9      	b.n	800bc5e <decode_mcu_sub+0x202>
	if (s) {
 800bc8a:	b174      	cbz	r4, 800bcaa <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bc8c:	45a4      	cmp	ip, r4
 800bc8e:	da0a      	bge.n	800bca6 <decode_mcu_sub+0x24a>
 800bc90:	4623      	mov	r3, r4
 800bc92:	4662      	mov	r2, ip
 800bc94:	4671      	mov	r1, lr
 800bc96:	a808      	add	r0, sp, #32
 800bc98:	f7ff fb20 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	f43f aef5 	beq.w	800ba8c <decode_mcu_sub+0x30>
 800bca2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800bca6:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800bcaa:	2401      	movs	r4, #1
 800bcac:	e77a      	b.n	800bba4 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bcae:	f1bc 0f07 	cmp.w	ip, #7
 800bcb2:	dc0d      	bgt.n	800bcd0 <decode_mcu_sub+0x274>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4662      	mov	r2, ip
 800bcb8:	4671      	mov	r1, lr
 800bcba:	a808      	add	r0, sp, #32
 800bcbc:	f7ff fb0e 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	f43f aee3 	beq.w	800ba8c <decode_mcu_sub+0x30>
 800bcc6:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bcca:	f1bc 0f07 	cmp.w	ip, #7
 800bcce:	dd25      	ble.n	800bd1c <decode_mcu_sub+0x2c0>
 800bcd0:	f1ac 0308 	sub.w	r3, ip, #8
 800bcd4:	fa4e f303 	asr.w	r3, lr, r3
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bcde:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bce2:	b34a      	cbz	r2, 800bd38 <decode_mcu_sub+0x2dc>
 800bce4:	4443      	add	r3, r8
 800bce6:	ebac 0c02 	sub.w	ip, ip, r2
 800bcea:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bcee:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800bcf2:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bcf6:	d021      	beq.n	800bd3c <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bcf8:	45dc      	cmp	ip, fp
	  k += r;
 800bcfa:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bcfc:	da0a      	bge.n	800bd14 <decode_mcu_sub+0x2b8>
 800bcfe:	465b      	mov	r3, fp
 800bd00:	4662      	mov	r2, ip
 800bd02:	4671      	mov	r1, lr
 800bd04:	a808      	add	r0, sp, #32
 800bd06:	f7ff fae9 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	f43f aebe 	beq.w	800ba8c <decode_mcu_sub+0x30>
 800bd10:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800bd14:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800bd18:	3401      	adds	r4, #1
 800bd1a:	e743      	b.n	800bba4 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	4662      	mov	r2, ip
 800bd22:	4643      	mov	r3, r8
 800bd24:	4671      	mov	r1, lr
 800bd26:	a808      	add	r0, sp, #32
 800bd28:	f7ff fb36 	bl	800b398 <jpeg_huff_decode>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f6ff aead 	blt.w	800ba8c <decode_mcu_sub+0x30>
 800bd32:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bd36:	e7da      	b.n	800bcee <decode_mcu_sub+0x292>
 800bd38:	2309      	movs	r3, #9
 800bd3a:	e7f0      	b.n	800bd1e <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800bd3c:	2b0f      	cmp	r3, #15
 800bd3e:	f47f af35 	bne.w	800bbac <decode_mcu_sub+0x150>
	  k += 15;
 800bd42:	340f      	adds	r4, #15
 800bd44:	e7e8      	b.n	800bd18 <decode_mcu_sub+0x2bc>
 800bd46:	bf00      	nop
 800bd48:	0802cdb0 	.word	0x0802cdb0

0800bd4c <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800bd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bd50:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800bd54:	b091      	sub	sp, #68	; 0x44
 800bd56:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bd58:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800bd5c:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800bd5e:	b933      	cbnz	r3, 800bd6e <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bd60:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800bd62:	b17f      	cbz	r7, 800bd84 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bd64:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bd66:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bd6c:	e007      	b.n	800bd7e <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800bd6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1f5      	bne.n	800bd60 <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800bd74:	f7ff fb5c 	bl	800b430 <process_restart>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d1f1      	bne.n	800bd60 <decode_mcu+0x14>
	return FALSE;
 800bd7c:	2000      	movs	r0, #0
}
 800bd7e:	b011      	add	sp, #68	; 0x44
 800bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd84:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800bd86:	f105 0810 	add.w	r8, r5, #16
 800bd8a:	ac0b      	add	r4, sp, #44	; 0x2c
 800bd8c:	f105 095c 	add.w	r9, r5, #92	; 0x5c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	9206      	str	r2, [sp, #24]
 800bd96:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800bd98:	f8df a290 	ldr.w	sl, [pc, #656]	; 800c02c <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd9c:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800bd9e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bda2:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bda6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bda8:	f8d8 3000 	ldr.w	r3, [r8]
 800bdac:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bdae:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800bdb2:	42bb      	cmp	r3, r7
 800bdb4:	dc0e      	bgt.n	800bdd4 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdb6:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bdb8:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdba:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bdbc:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	9a07      	ldr	r2, [sp, #28]
 800bdc4:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bdc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdc8:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bdcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdce:	6833      	ldr	r3, [r6, #0]
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	e7c7      	b.n	800bd64 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800bdd4:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bdd6:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800bdda:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800bdde:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bde2:	dc0c      	bgt.n	800bdfe <decode_mcu+0xb2>
 800bde4:	2300      	movs	r3, #0
 800bde6:	4662      	mov	r2, ip
 800bde8:	4671      	mov	r1, lr
 800bdea:	a806      	add	r0, sp, #24
 800bdec:	f7ff fa76 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d0c3      	beq.n	800bd7c <decode_mcu+0x30>
 800bdf4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bdf8:	f1bc 0f07 	cmp.w	ip, #7
 800bdfc:	dd49      	ble.n	800be92 <decode_mcu+0x146>
 800bdfe:	f1ac 0308 	sub.w	r3, ip, #8
 800be02:	fa4e f303 	asr.w	r3, lr, r3
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800be0c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be10:	2a00      	cmp	r2, #0
 800be12:	d04c      	beq.n	800beae <decode_mcu+0x162>
 800be14:	4423      	add	r3, r4
 800be16:	ebac 0c02 	sub.w	ip, ip, r2
 800be1a:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800be1e:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800be22:	f8d9 8028 	ldr.w	r8, [r9, #40]	; 0x28
      coef_limit = entropy->coef_limit[blkn];
 800be26:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f000 809f 	beq.w	800bf6c <decode_mcu+0x220>
	if (s) {
 800be2e:	b1cc      	cbz	r4, 800be64 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800be30:	45a4      	cmp	ip, r4
 800be32:	da09      	bge.n	800be48 <decode_mcu+0xfc>
 800be34:	4623      	mov	r3, r4
 800be36:	4662      	mov	r2, ip
 800be38:	4671      	mov	r1, lr
 800be3a:	a806      	add	r0, sp, #24
 800be3c:	f7ff fa4e 	bl	800b2dc <jpeg_fill_bit_buffer>
 800be40:	2800      	cmp	r0, #0
 800be42:	d09b      	beq.n	800bd7c <decode_mcu+0x30>
 800be44:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800be48:	ebac 0c04 	sub.w	ip, ip, r4
 800be4c:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800be50:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800be52:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800be56:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800be5a:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800be5c:	4299      	cmp	r1, r3
 800be5e:	bfac      	ite	ge
 800be60:	1a9c      	subge	r4, r3, r2
 800be62:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800be64:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800be68:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800be6c:	ab10      	add	r3, sp, #64	; 0x40
 800be6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800be72:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800be76:	4423      	add	r3, r4
      k = 1;
 800be78:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800be7a:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800be7e:	f8ab 3000 	strh.w	r3, [fp]
	for (; k < coef_limit; k++) {
 800be82:	9b03      	ldr	r3, [sp, #12]
 800be84:	429c      	cmp	r4, r3
 800be86:	db14      	blt.n	800beb2 <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800be88:	2c3f      	cmp	r4, #63	; 0x3f
 800be8a:	f340 8081 	ble.w	800bf90 <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800be8e:	3701      	adds	r7, #1
 800be90:	e78d      	b.n	800bdae <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800be92:	2301      	movs	r3, #1
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	4662      	mov	r2, ip
 800be98:	4623      	mov	r3, r4
 800be9a:	4671      	mov	r1, lr
 800be9c:	a806      	add	r0, sp, #24
 800be9e:	f7ff fa7b 	bl	800b398 <jpeg_huff_decode>
 800bea2:	1e04      	subs	r4, r0, #0
 800bea4:	f6ff af6a 	blt.w	800bd7c <decode_mcu+0x30>
 800bea8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800beac:	e7b7      	b.n	800be1e <decode_mcu+0xd2>
 800beae:	2309      	movs	r3, #9
 800beb0:	e7f0      	b.n	800be94 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800beb2:	f1bc 0f07 	cmp.w	ip, #7
 800beb6:	dc0d      	bgt.n	800bed4 <decode_mcu+0x188>
 800beb8:	2300      	movs	r3, #0
 800beba:	4662      	mov	r2, ip
 800bebc:	4671      	mov	r1, lr
 800bebe:	a806      	add	r0, sp, #24
 800bec0:	f7ff fa0c 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f43f af59 	beq.w	800bd7c <decode_mcu+0x30>
 800beca:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bece:	f1bc 0f07 	cmp.w	ip, #7
 800bed2:	dd37      	ble.n	800bf44 <decode_mcu+0x1f8>
 800bed4:	f1ac 0308 	sub.w	r3, ip, #8
 800bed8:	fa4e f303 	asr.w	r3, lr, r3
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bee2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	d03a      	beq.n	800bf60 <decode_mcu+0x214>
 800beea:	4443      	add	r3, r8
 800beec:	ebac 0c02 	sub.w	ip, ip, r2
 800bef0:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800bef4:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800bef8:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800befc:	d032      	beq.n	800bf64 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800befe:	459c      	cmp	ip, r3
	    k += r;
 800bf00:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bf02:	da0b      	bge.n	800bf1c <decode_mcu+0x1d0>
 800bf04:	4662      	mov	r2, ip
 800bf06:	4671      	mov	r1, lr
 800bf08:	a806      	add	r0, sp, #24
 800bf0a:	9305      	str	r3, [sp, #20]
 800bf0c:	f7ff f9e6 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	f43f af33 	beq.w	800bd7c <decode_mcu+0x30>
 800bf16:	9b05      	ldr	r3, [sp, #20]
 800bf18:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800bf1c:	ebac 0c03 	sub.w	ip, ip, r3
 800bf20:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800bf24:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800bf26:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800bf2a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800bf2e:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800bf30:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800bf32:	4b3d      	ldr	r3, [pc, #244]	; (800c028 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800bf34:	bfa8      	it	ge
 800bf36:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800bf38:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf3c:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800bf40:	3401      	adds	r4, #1
 800bf42:	e79e      	b.n	800be82 <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800bf44:	2301      	movs	r3, #1
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	4662      	mov	r2, ip
 800bf4a:	4643      	mov	r3, r8
 800bf4c:	4671      	mov	r1, lr
 800bf4e:	a806      	add	r0, sp, #24
 800bf50:	f7ff fa22 	bl	800b398 <jpeg_huff_decode>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	f6ff af11 	blt.w	800bd7c <decode_mcu+0x30>
 800bf5a:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bf5e:	e7c9      	b.n	800bef4 <decode_mcu+0x1a8>
 800bf60:	2309      	movs	r3, #9
 800bf62:	e7f0      	b.n	800bf46 <decode_mcu+0x1fa>
	    if (r != 15)
 800bf64:	2a0f      	cmp	r2, #15
 800bf66:	d192      	bne.n	800be8e <decode_mcu+0x142>
	    k += 15;
 800bf68:	340f      	adds	r4, #15
 800bf6a:	e7e9      	b.n	800bf40 <decode_mcu+0x1f4>
	if (s) {
 800bf6c:	b174      	cbz	r4, 800bf8c <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bf6e:	45a4      	cmp	ip, r4
 800bf70:	da0a      	bge.n	800bf88 <decode_mcu+0x23c>
 800bf72:	4623      	mov	r3, r4
 800bf74:	4662      	mov	r2, ip
 800bf76:	4671      	mov	r1, lr
 800bf78:	a806      	add	r0, sp, #24
 800bf7a:	f7ff f9af 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f43f aefc 	beq.w	800bd7c <decode_mcu+0x30>
 800bf84:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800bf88:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800bf8c:	2401      	movs	r4, #1
 800bf8e:	e77b      	b.n	800be88 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bf90:	f1bc 0f07 	cmp.w	ip, #7
 800bf94:	dc0d      	bgt.n	800bfb2 <decode_mcu+0x266>
 800bf96:	2300      	movs	r3, #0
 800bf98:	4662      	mov	r2, ip
 800bf9a:	4671      	mov	r1, lr
 800bf9c:	a806      	add	r0, sp, #24
 800bf9e:	f7ff f99d 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f43f aeea 	beq.w	800bd7c <decode_mcu+0x30>
 800bfa8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bfac:	f1bc 0f07 	cmp.w	ip, #7
 800bfb0:	dd25      	ble.n	800bffe <decode_mcu+0x2b2>
 800bfb2:	f1ac 0308 	sub.w	r3, ip, #8
 800bfb6:	fa4e f303 	asr.w	r3, lr, r3
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bfc0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bfc4:	b34a      	cbz	r2, 800c01a <decode_mcu+0x2ce>
 800bfc6:	4443      	add	r3, r8
 800bfc8:	ebac 0c02 	sub.w	ip, ip, r2
 800bfcc:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bfd0:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800bfd4:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bfd8:	d021      	beq.n	800c01e <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bfda:	45dc      	cmp	ip, fp
	  k += r;
 800bfdc:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bfde:	da0a      	bge.n	800bff6 <decode_mcu+0x2aa>
 800bfe0:	465b      	mov	r3, fp
 800bfe2:	4662      	mov	r2, ip
 800bfe4:	4671      	mov	r1, lr
 800bfe6:	a806      	add	r0, sp, #24
 800bfe8:	f7ff f978 	bl	800b2dc <jpeg_fill_bit_buffer>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	f43f aec5 	beq.w	800bd7c <decode_mcu+0x30>
 800bff2:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800bff6:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800bffa:	3401      	adds	r4, #1
 800bffc:	e744      	b.n	800be88 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bffe:	2301      	movs	r3, #1
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	4662      	mov	r2, ip
 800c004:	4643      	mov	r3, r8
 800c006:	4671      	mov	r1, lr
 800c008:	a806      	add	r0, sp, #24
 800c00a:	f7ff f9c5 	bl	800b398 <jpeg_huff_decode>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f6ff aeb4 	blt.w	800bd7c <decode_mcu+0x30>
 800c014:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c018:	e7da      	b.n	800bfd0 <decode_mcu+0x284>
 800c01a:	2309      	movs	r3, #9
 800c01c:	e7f0      	b.n	800c000 <decode_mcu+0x2b4>
	  if (r != 15)
 800c01e:	2b0f      	cmp	r3, #15
 800c020:	f47f af35 	bne.w	800be8e <decode_mcu+0x142>
	  k += 15;
 800c024:	340f      	adds	r4, #15
 800c026:	e7e8      	b.n	800bffa <decode_mcu+0x2ae>
 800c028:	0802e688 	.word	0x0802e688
 800c02c:	0802cdb0 	.word	0x0802cdb0

0800c030 <jpeg_make_d_derived_tbl>:
{
 800c030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c034:	2a03      	cmp	r2, #3
{
 800c036:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800c03a:	4604      	mov	r4, r0
 800c03c:	4616      	mov	r6, r2
 800c03e:	461f      	mov	r7, r3
 800c040:	9102      	str	r1, [sp, #8]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c042:	d905      	bls.n	800c050 <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c044:	6803      	ldr	r3, [r0, #0]
 800c046:	2234      	movs	r2, #52	; 0x34
 800c048:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d044      	beq.n	800c0e0 <jpeg_make_d_derived_tbl+0xb0>
 800c056:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c05a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800c05e:	b935      	cbnz	r5, 800c06e <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	2234      	movs	r2, #52	; 0x34
 800c064:	4620      	mov	r0, r4
 800c066:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4798      	blx	r3
  if (*pdtbl == NULL)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	b93b      	cbnz	r3, 800c082 <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c072:	6863      	ldr	r3, [r4, #4]
 800c074:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800c078:	2101      	movs	r1, #1
 800c07a:	4620      	mov	r0, r4
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800c080:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800c082:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800c086:	2601      	movs	r6, #1
  p = 0;
 800c088:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c08a:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800c08e:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800c092:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800c096:	46ba      	mov	sl, r7
 800c098:	444f      	add	r7, r9
 800c09a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800c09e:	dd05      	ble.n	800c0ac <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f8c3 b014 	str.w	fp, [r3, #20]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4798      	blx	r3
 800c0ac:	f10a 0318 	add.w	r3, sl, #24
 800c0b0:	446b      	add	r3, sp
    while (i--)
 800c0b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c0b6:	d218      	bcs.n	800c0ea <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800c0b8:	3601      	adds	r6, #1
 800c0ba:	2e11      	cmp	r6, #17
 800c0bc:	d1e9      	bne.n	800c092 <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800c0be:	2200      	movs	r2, #0
 800c0c0:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800c0c2:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800c0c6:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800c0ca:	55da      	strb	r2, [r3, r7]
  p = 0;
 800c0cc:	4691      	mov	r9, r2
  si = huffsize[0];
 800c0ce:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800c0d2:	ab06      	add	r3, sp, #24
 800c0d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c0d8:	b313      	cbz	r3, 800c120 <jpeg_make_d_derived_tbl+0xf0>
 800c0da:	4649      	mov	r1, r9
 800c0dc:	1a52      	subs	r2, r2, r1
 800c0de:	e00a      	b.n	800c0f6 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c0e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c0e4:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800c0e8:	e7b9      	b.n	800c05e <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800c0ea:	f803 6b01 	strb.w	r6, [r3], #1
 800c0ee:	e7e0      	b.n	800c0b2 <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800c0f0:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800c0f4:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800c0f6:	a806      	add	r0, sp, #24
 800c0f8:	1853      	adds	r3, r2, r1
 800c0fa:	4689      	mov	r9, r1
 800c0fc:	5c40      	ldrb	r0, [r0, r1]
 800c0fe:	42b0      	cmp	r0, r6
 800c100:	d0f6      	beq.n	800c0f0 <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800c102:	fa0b f206 	lsl.w	r2, fp, r6
 800c106:	429a      	cmp	r2, r3
 800c108:	dc07      	bgt.n	800c11a <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c10a:	6822      	ldr	r2, [r4, #0]
 800c10c:	2109      	movs	r1, #9
 800c10e:	4620      	mov	r0, r4
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	6151      	str	r1, [r2, #20]
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	4790      	blx	r2
 800c118:	9b00      	ldr	r3, [sp, #0]
    code <<= 1;
 800c11a:	005a      	lsls	r2, r3, #1
    si++;
 800c11c:	3601      	adds	r6, #1
 800c11e:	e7d8      	b.n	800c0d2 <jpeg_make_d_derived_tbl+0xa2>
 800c120:	f105 0210 	add.w	r2, r5, #16
 800c124:	4628      	mov	r0, r5
 800c126:	4646      	mov	r6, r8
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c128:	f50d 7c8e 	add.w	ip, sp, #284	; 0x11c
 800c12c:	9201      	str	r2, [sp, #4]
    if (htbl->bits[l]) {
 800c12e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800c132:	b349      	cbz	r1, 800c188 <jpeg_make_d_derived_tbl+0x158>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c134:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800c138:	1a9a      	subs	r2, r3, r2
      p += htbl->bits[l];
 800c13a:	440b      	add	r3, r1
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c13c:	64f2      	str	r2, [r6, #76]	; 0x4c
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800c13e:	1e5a      	subs	r2, r3, #1
 800c140:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800c144:	f846 2f04 	str.w	r2, [r6, #4]!
  for (l = 1; l <= 16; l++) {
 800c148:	9a01      	ldr	r2, [sp, #4]
 800c14a:	4282      	cmp	r2, r0
 800c14c:	d1ef      	bne.n	800c12e <jpeg_make_d_derived_tbl+0xfe>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c14e:	4b2d      	ldr	r3, [pc, #180]	; (800c204 <jpeg_make_d_derived_tbl+0x1d4>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c154:	2100      	movs	r1, #0
 800c156:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c15a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c15e:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c160:	f01d fd1a 	bl	8029b98 <memset>
  p = 0;
 800c164:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c168:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c16a:	5daa      	ldrb	r2, [r5, r6]
 800c16c:	f1c6 0b08 	rsb	fp, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c170:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c172:	9200      	str	r2, [sp, #0]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c174:	2201      	movs	r2, #1
 800c176:	9900      	ldr	r1, [sp, #0]
 800c178:	fa02 f20b 	lsl.w	r2, r2, fp
 800c17c:	4451      	add	r1, sl
 800c17e:	9103      	str	r1, [sp, #12]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c180:	f105 0111 	add.w	r1, r5, #17
 800c184:	9104      	str	r1, [sp, #16]
 800c186:	e01f      	b.n	800c1c8 <jpeg_make_d_derived_tbl+0x198>
 800c188:	f04f 32ff 	mov.w	r2, #4294967295
 800c18c:	e7da      	b.n	800c144 <jpeg_make_d_derived_tbl+0x114>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c18e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c192:	4696      	mov	lr, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c194:	9904      	ldr	r1, [sp, #16]
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c196:	fa00 f00b 	lsl.w	r0, r0, fp
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c19a:	f811 1009 	ldrb.w	r1, [r1, r9]
 800c19e:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 800c1a2:	f10c 0c23 	add.w	ip, ip, #35	; 0x23
 800c1a6:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c1aa:	f1be 0e01 	subs.w	lr, lr, #1
	dtbl->look_nbits[lookbits] = l;
 800c1ae:	f84c 6f04 	str.w	r6, [ip, #4]!
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c1b2:	d1fa      	bne.n	800c1aa <jpeg_make_d_derived_tbl+0x17a>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c1b4:	f500 6092 	add.w	r0, r0, #1168	; 0x490
 800c1b8:	9205      	str	r2, [sp, #20]
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c1ba:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c1be:	4440      	add	r0, r8
 800c1c0:	f01d fcea 	bl	8029b98 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c1c4:	ab47      	add	r3, sp, #284	; 0x11c
 800c1c6:	9a05      	ldr	r2, [sp, #20]
 800c1c8:	9903      	ldr	r1, [sp, #12]
 800c1ca:	4589      	cmp	r9, r1
 800c1cc:	d1df      	bne.n	800c18e <jpeg_make_d_derived_tbl+0x15e>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c1ce:	3601      	adds	r6, #1
 800c1d0:	9a00      	ldr	r2, [sp, #0]
 800c1d2:	2e09      	cmp	r6, #9
 800c1d4:	4492      	add	sl, r2
 800c1d6:	d1c8      	bne.n	800c16a <jpeg_make_d_derived_tbl+0x13a>
  if (isDC) {
 800c1d8:	9b02      	ldr	r3, [sp, #8]
 800c1da:	b123      	cbz	r3, 800c1e6 <jpeg_make_d_derived_tbl+0x1b6>
 800c1dc:	9b01      	ldr	r3, [sp, #4]
 800c1de:	3510      	adds	r5, #16
 800c1e0:	441f      	add	r7, r3
    for (i = 0; i < numsymbols; i++) {
 800c1e2:	42af      	cmp	r7, r5
 800c1e4:	d103      	bne.n	800c1ee <jpeg_make_d_derived_tbl+0x1be>
}
 800c1e6:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800c1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sym < 0 || sym > 15)
 800c1ee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800c1f2:	2b0f      	cmp	r3, #15
 800c1f4:	d9f5      	bls.n	800c1e2 <jpeg_make_d_derived_tbl+0x1b2>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	615e      	str	r6, [r3, #20]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800c200:	e7ef      	b.n	800c1e2 <jpeg_make_d_derived_tbl+0x1b2>
 800c202:	bf00      	nop
 800c204:	000fffff 	.word	0x000fffff

0800c208 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800c208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800c20c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800c210:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c212:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800c216:	f500 74a8 	add.w	r4, r0, #336	; 0x150
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800c21a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800c21e:	2d00      	cmp	r5, #0
 800c220:	f000 80af 	beq.w	800c382 <start_pass_huff_decoder+0x17a>
    if (cinfo->Ss == 0) {
 800c224:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800c228:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800c22c:	b962      	cbnz	r2, 800c248 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800c22e:	b1a9      	cbz	r1, 800c25c <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c230:	f8da 3000 	ldr.w	r3, [sl]
 800c234:	2711      	movs	r7, #17
 800c236:	4650      	mov	r0, sl
 800c238:	625d      	str	r5, [r3, #36]	; 0x24
 800c23a:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800c23e:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4798      	blx	r3
 800c246:	e00f      	b.n	800c268 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800c248:	428a      	cmp	r2, r1
 800c24a:	dcf1      	bgt.n	800c230 <start_pass_huff_decoder+0x28>
 800c24c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800c250:	428b      	cmp	r3, r1
 800c252:	dbed      	blt.n	800c230 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800c254:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d1e9      	bne.n	800c230 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800c25c:	b116      	cbz	r6, 800c264 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800c25e:	1e73      	subs	r3, r6, #1
 800c260:	42ab      	cmp	r3, r5
 800c262:	d1e5      	bne.n	800c230 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800c264:	2d0d      	cmp	r5, #13
 800c266:	dce3      	bgt.n	800c230 <start_pass_huff_decoder+0x28>
{
 800c268:	46a1      	mov	r9, r4
 800c26a:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c26c:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c270:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c274:	42bb      	cmp	r3, r7
 800c276:	dc20      	bgt.n	800c2ba <start_pass_huff_decoder+0xb2>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800c278:	f8da 31a0 	ldr.w	r3, [sl, #416]	; 0x1a0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d158      	bne.n	800c332 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800c280:	4bbb      	ldr	r3, [pc, #748]	; (800c570 <start_pass_huff_decoder+0x368>)
 800c282:	49bc      	ldr	r1, [pc, #752]	; (800c574 <start_pass_huff_decoder+0x36c>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800c284:	2600      	movs	r6, #0
    } else {
      if (cinfo->Ss == 0)
 800c286:	2a00      	cmp	r2, #0
 800c288:	bf08      	it	eq
 800c28a:	460b      	moveq	r3, r1
 800c28c:	f10b 0710 	add.w	r7, fp, #16
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c290:	46b0      	mov	r8, r6
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800c292:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c296:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c29a:	42b3      	cmp	r3, r6
 800c29c:	dc4c      	bgt.n	800c338 <start_pass_huff_decoder+0x130>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800c2a4:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800c2a6:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800c2aa:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800c2ae:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800c2b2:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800c2b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800c2ba:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800c2be:	f8d3 8004 	ldr.w	r8, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800c2c2:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 800c2c6:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800c2ca:	eb03 2608 	add.w	r6, r3, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c2ce:	b172      	cbz	r2, 800c2ee <start_pass_huff_decoder+0xe6>
 800c2d0:	585b      	ldr	r3, [r3, r1]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	da0b      	bge.n	800c2ee <start_pass_huff_decoder+0xe6>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800c2d6:	f8da 3000 	ldr.w	r3, [sl]
 800c2da:	2276      	movs	r2, #118	; 0x76
 800c2dc:	f04f 31ff 	mov.w	r1, #4294967295
 800c2e0:	4650      	mov	r0, sl
 800c2e2:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	61da      	str	r2, [r3, #28]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c2ee:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800c2f2:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800c2f6:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800c2fa:	42ab      	cmp	r3, r5
 800c2fc:	da01      	bge.n	800c302 <start_pass_huff_decoder+0xfa>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c2fe:	3701      	adds	r7, #1
 800c300:	e7b4      	b.n	800c26c <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c302:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800c304:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c308:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d00a      	beq.n	800c326 <start_pass_huff_decoder+0x11e>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800c310:	f8da 3000 	ldr.w	r3, [sl]
 800c314:	2276      	movs	r2, #118	; 0x76
 800c316:	f04f 31ff 	mov.w	r1, #4294967295
 800c31a:	4650      	mov	r0, sl
 800c31c:	61dd      	str	r5, [r3, #28]
 800c31e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800c326:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c32a:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800c32c:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c330:	e7e1      	b.n	800c2f6 <start_pass_huff_decoder+0xee>
      if (cinfo->Ss == 0)
 800c332:	4b91      	ldr	r3, [pc, #580]	; (800c578 <start_pass_huff_decoder+0x370>)
 800c334:	4991      	ldr	r1, [pc, #580]	; (800c57c <start_pass_huff_decoder+0x374>)
 800c336:	e7a5      	b.n	800c284 <start_pass_huff_decoder+0x7c>
      if (cinfo->Ss == 0) {
 800c338:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800c33c:	f854 3f04 	ldr.w	r3, [r4, #4]!
      if (cinfo->Ss == 0) {
 800c340:	b97a      	cbnz	r2, 800c362 <start_pass_huff_decoder+0x15a>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800c342:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c346:	b942      	cbnz	r2, 800c35a <start_pass_huff_decoder+0x152>
	  tbl = compptr->dc_tbl_no;
 800c348:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c34a:	2101      	movs	r1, #1
 800c34c:	4650      	mov	r0, sl
 800c34e:	f102 030b 	add.w	r3, r2, #11
 800c352:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c356:	f7ff fe6b 	bl	800c030 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c35a:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c35c:	f847 8f04 	str.w	r8, [r7, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c360:	e799      	b.n	800c296 <start_pass_huff_decoder+0x8e>
	tbl = compptr->ac_tbl_no;
 800c362:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c364:	2100      	movs	r1, #0
 800c366:	4650      	mov	r0, sl
 800c368:	f105 030b 	add.w	r3, r5, #11
 800c36c:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c36e:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c372:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c376:	f7ff fe5b 	bl	800c030 <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c37a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c37c:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800c380:	e7eb      	b.n	800c35a <start_pass_huff_decoder+0x152>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c382:	b982      	cbnz	r2, 800c3a6 <start_pass_huff_decoder+0x19e>
 800c384:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800c388:	b96b      	cbnz	r3, 800c3a6 <start_pass_huff_decoder+0x19e>
 800c38a:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c38e:	b953      	cbnz	r3, 800c3a6 <start_pass_huff_decoder+0x19e>
 800c390:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800c394:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c398:	b90a      	cbnz	r2, 800c39e <start_pass_huff_decoder+0x196>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800c39a:	2b3f      	cmp	r3, #63	; 0x3f
 800c39c:	dc0c      	bgt.n	800c3b8 <start_pass_huff_decoder+0x1b0>
 800c39e:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d008      	beq.n	800c3b8 <start_pass_huff_decoder+0x1b0>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800c3a6:	f8da 3000 	ldr.w	r3, [sl]
 800c3aa:	227d      	movs	r2, #125	; 0x7d
 800c3ac:	f04f 31ff 	mov.w	r1, #4294967295
 800c3b0:	4650      	mov	r0, sl
 800c3b2:	615a      	str	r2, [r3, #20]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800c3b8:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800c3bc:	2600      	movs	r6, #0
 800c3be:	4b70      	ldr	r3, [pc, #448]	; (800c580 <start_pass_huff_decoder+0x378>)
 800c3c0:	f10b 0710 	add.w	r7, fp, #16
 800c3c4:	4a6f      	ldr	r2, [pc, #444]	; (800c584 <start_pass_huff_decoder+0x37c>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c3c6:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800c3c8:	293f      	cmp	r1, #63	; 0x3f
 800c3ca:	bf08      	it	eq
 800c3cc:	4613      	moveq	r3, r2
 800c3ce:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c3d2:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c3d6:	42b3      	cmp	r3, r6
 800c3d8:	dc3d      	bgt.n	800c456 <start_pass_huff_decoder+0x24e>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c3da:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800c3de:	f10b 045c 	add.w	r4, fp, #92	; 0x5c
 800c3e2:	f50a 76b6 	add.w	r6, sl, #364	; 0x16c
 800c3e6:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c3ea:	4f67      	ldr	r7, [pc, #412]	; (800c588 <start_pass_huff_decoder+0x380>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c3ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c5a0 <start_pass_huff_decoder+0x398>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c3f0:	42a8      	cmp	r0, r5
 800c3f2:	f77f af57 	ble.w	800c2a4 <start_pass_huff_decoder+0x9c>
      compptr = cinfo->cur_comp_info[ci];
 800c3f6:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800c3fa:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800c3fe:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800c402:	6953      	ldr	r3, [r2, #20]
 800c404:	3310      	adds	r3, #16
 800c406:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c40a:	f844 3f04 	str.w	r3, [r4, #4]!
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800c40e:	6993      	ldr	r3, [r2, #24]
 800c410:	3314      	adds	r3, #20
 800c412:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c416:	62a3      	str	r3, [r4, #40]	; 0x28
      if (compptr->component_needed) {
 800c418:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d076      	beq.n	800c50c <start_pass_huff_decoder+0x304>
	switch (cinfo->lim_Se) {
 800c41e:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
 800c422:	290f      	cmp	r1, #15
	i = compptr->DCT_h_scaled_size;
 800c424:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800c428:	d073      	beq.n	800c512 <start_pass_huff_decoder+0x30a>
 800c42a:	dc31      	bgt.n	800c490 <start_pass_huff_decoder+0x288>
 800c42c:	2903      	cmp	r1, #3
 800c42e:	d04b      	beq.n	800c4c8 <start_pass_huff_decoder+0x2c0>
 800c430:	2908      	cmp	r1, #8
 800c432:	d059      	beq.n	800c4e8 <start_pass_huff_decoder+0x2e0>
 800c434:	2900      	cmp	r1, #0
 800c436:	f000 8099 	beq.w	800c56c <start_pass_huff_decoder+0x364>
	  if (ci <= 0 || ci > 8) ci = 8;
 800c43a:	1e59      	subs	r1, r3, #1
 800c43c:	2908      	cmp	r1, #8
	  if (i <= 0 || i > 8) i = 8;
 800c43e:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800c442:	bf28      	it	cs
 800c444:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800c446:	2908      	cmp	r1, #8
 800c448:	bf28      	it	cs
 800c44a:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c44c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c450:	4b4e      	ldr	r3, [pc, #312]	; (800c58c <start_pass_huff_decoder+0x384>)
 800c452:	3a09      	subs	r2, #9
 800c454:	e045      	b.n	800c4e2 <start_pass_huff_decoder+0x2da>
      compptr = cinfo->cur_comp_info[ci];
 800c456:	f854 9f04 	ldr.w	r9, [r4, #4]!
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c45a:	2101      	movs	r1, #1
 800c45c:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800c45e:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c462:	f102 0310 	add.w	r3, r2, #16
 800c466:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c46a:	f7ff fde1 	bl	800c030 <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800c46e:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800c472:	b14b      	cbz	r3, 800c488 <start_pass_huff_decoder+0x280>
	tbl = compptr->ac_tbl_no;
 800c474:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c478:	2100      	movs	r1, #0
 800c47a:	4650      	mov	r0, sl
 800c47c:	f102 0314 	add.w	r3, r2, #20
 800c480:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c484:	f7ff fdd4 	bl	800c030 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c488:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c48a:	f847 8f04 	str.w	r8, [r7, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c48e:	e7a0      	b.n	800c3d2 <start_pass_huff_decoder+0x1ca>
	switch (cinfo->lim_Se) {
 800c490:	2923      	cmp	r1, #35	; 0x23
 800c492:	f103 3eff 	add.w	lr, r3, #4294967295
 800c496:	f102 39ff 	add.w	r9, r2, #4294967295
 800c49a:	d048      	beq.n	800c52e <start_pass_huff_decoder+0x326>
 800c49c:	2930      	cmp	r1, #48	; 0x30
 800c49e:	d054      	beq.n	800c54a <start_pass_huff_decoder+0x342>
 800c4a0:	2918      	cmp	r1, #24
 800c4a2:	d1ca      	bne.n	800c43a <start_pass_huff_decoder+0x232>
	  if (ci <= 0 || ci > 5) ci = 5;
 800c4a4:	f1be 0f05 	cmp.w	lr, #5
 800c4a8:	bf28      	it	cs
 800c4aa:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800c4ac:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c4b0:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800c4b4:	bf28      	it	cs
 800c4b6:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c4b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c4bc:	3a01      	subs	r2, #1
 800c4be:	4413      	add	r3, r2
 800c4c0:	4a33      	ldr	r2, [pc, #204]	; (800c590 <start_pass_huff_decoder+0x388>)
 800c4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4c6:	e020      	b.n	800c50a <start_pass_huff_decoder+0x302>
	  if (ci <= 0 || ci > 2) ci = 2;
 800c4c8:	1e59      	subs	r1, r3, #1
 800c4ca:	2902      	cmp	r1, #2
	  if (i <= 0 || i > 2) i = 2;
 800c4cc:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800c4d0:	bf28      	it	cs
 800c4d2:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800c4d4:	2902      	cmp	r1, #2
 800c4d6:	bf28      	it	cs
 800c4d8:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800c4da:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c4de:	4b2d      	ldr	r3, [pc, #180]	; (800c594 <start_pass_huff_decoder+0x38c>)
 800c4e0:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e6:	e010      	b.n	800c50a <start_pass_huff_decoder+0x302>
	  if (ci <= 0 || ci > 3) ci = 3;
 800c4e8:	1e59      	subs	r1, r3, #1
 800c4ea:	2903      	cmp	r1, #3
	  if (i <= 0 || i > 3) i = 3;
 800c4ec:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800c4f0:	bf28      	it	cs
 800c4f2:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800c4f4:	2903      	cmp	r1, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c4f6:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800c4fa:	bf28      	it	cs
 800c4fc:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c4fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c502:	3a01      	subs	r2, #1
 800c504:	4413      	add	r3, r2
 800c506:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c50a:	3301      	adds	r3, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c50c:	3501      	adds	r5, #1
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800c50e:	6523      	str	r3, [r4, #80]	; 0x50
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c510:	e76e      	b.n	800c3f0 <start_pass_huff_decoder+0x1e8>
	  if (ci <= 0 || ci > 4) ci = 4;
 800c512:	1e59      	subs	r1, r3, #1
 800c514:	2904      	cmp	r1, #4
	  if (i <= 0 || i > 4) i = 4;
 800c516:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800c51a:	bf28      	it	cs
 800c51c:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800c51e:	2904      	cmp	r1, #4
 800c520:	bf28      	it	cs
 800c522:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800c524:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c528:	4b1b      	ldr	r3, [pc, #108]	; (800c598 <start_pass_huff_decoder+0x390>)
 800c52a:	3a05      	subs	r2, #5
 800c52c:	e7d9      	b.n	800c4e2 <start_pass_huff_decoder+0x2da>
	  if (ci <= 0 || ci > 6) ci = 6;
 800c52e:	f1be 0f06 	cmp.w	lr, #6
 800c532:	bf28      	it	cs
 800c534:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800c536:	f1b9 0f06 	cmp.w	r9, #6
 800c53a:	bf28      	it	cs
 800c53c:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800c53e:	3b01      	subs	r3, #1
 800c540:	3a01      	subs	r2, #1
 800c542:	fb0c 2203 	mla	r2, ip, r3, r2
 800c546:	4b15      	ldr	r3, [pc, #84]	; (800c59c <start_pass_huff_decoder+0x394>)
 800c548:	e7cb      	b.n	800c4e2 <start_pass_huff_decoder+0x2da>
	  if (ci <= 0 || ci > 7) ci = 7;
 800c54a:	f1be 0f07 	cmp.w	lr, #7
 800c54e:	bf28      	it	cs
 800c550:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800c552:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c556:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800c55a:	bf28      	it	cs
 800c55c:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c55e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c562:	3a01      	subs	r2, #1
 800c564:	4413      	add	r3, r2
 800c566:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c56a:	e7ce      	b.n	800c50a <start_pass_huff_decoder+0x302>
	switch (cinfo->lim_Se) {
 800c56c:	2301      	movs	r3, #1
 800c56e:	e7cd      	b.n	800c50c <start_pass_huff_decoder+0x304>
 800c570:	0800b5f1 	.word	0x0800b5f1
 800c574:	0800b47d 	.word	0x0800b47d
 800c578:	0800b7e5 	.word	0x0800b7e5
 800c57c:	0800b751 	.word	0x0800b751
 800c580:	0800ba5d 	.word	0x0800ba5d
 800c584:	0800bd4d 	.word	0x0800bd4d
 800c588:	0802d058 	.word	0x0802d058
 800c58c:	0802cdf0 	.word	0x0802cdf0
 800c590:	0802cf64 	.word	0x0802cf64
 800c594:	0802cef0 	.word	0x0802cef0
 800c598:	0802cf24 	.word	0x0802cf24
 800c59c:	0802cfc8 	.word	0x0802cfc8
 800c5a0:	0802cf00 	.word	0x0802cf00

0800c5a4 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5a6:	6843      	ldr	r3, [r0, #4]
 800c5a8:	22d8      	movs	r2, #216	; 0xd8
 800c5aa:	2101      	movs	r1, #1
{
 800c5ac:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800c5b2:	4b17      	ldr	r3, [pc, #92]	; (800c610 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800c5b4:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5b8:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800c5ba:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800c5bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800c5c0:	b943      	cbnz	r3, 800c5d4 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800c5c2:	6503      	str	r3, [r0, #80]	; 0x50
 800c5c4:	6403      	str	r3, [r0, #64]	; 0x40
 800c5c6:	6543      	str	r3, [r0, #84]	; 0x54
 800c5c8:	6443      	str	r3, [r0, #68]	; 0x44
 800c5ca:	6583      	str	r3, [r0, #88]	; 0x58
 800c5cc:	6483      	str	r3, [r0, #72]	; 0x48
 800c5ce:	65c3      	str	r3, [r0, #92]	; 0x5c
 800c5d0:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	686b      	ldr	r3, [r5, #4]
 800c5da:	4628      	mov	r0, r5
 800c5dc:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c5de:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4798      	blx	r3
 800c5e4:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800c5e6:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c5ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c5ec:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800c5f0:	42b3      	cmp	r3, r6
 800c5f2:	dc05      	bgt.n	800c600 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800c5fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800c5fe:	e7e8      	b.n	800c5d2 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800c600:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c604:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c606:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800c608:	f01d fac6 	bl	8029b98 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c60c:	e7ed      	b.n	800c5ea <jinit_huff_decoder+0x46>
 800c60e:	bf00      	nop
 800c610:	0800c209 	.word	0x0800c209

0800c614 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800c614:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800c618:	4a01      	ldr	r2, [pc, #4]	; (800c620 <finish_input_pass+0xc>)
 800c61a:	601a      	str	r2, [r3, #0]
}
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	0800c7dd 	.word	0x0800c7dd

0800c624 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800c624:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800c626:	4a0a      	ldr	r2, [pc, #40]	; (800c650 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800c628:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800c62a:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800c62e:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800c630:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800c632:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800c634:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800c638:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800c63a:	6803      	ldr	r3, [r0, #0]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800c640:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c644:	4620      	mov	r0, r4
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800c64a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	0800c7dd 	.word	0x0800c7dd

0800c654 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800c654:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800c658:	2a01      	cmp	r2, #1
{
 800c65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c65e:	4604      	mov	r4, r0
 800c660:	f500 76a8 	add.w	r6, r0, #336	; 0x150
  if (cinfo->comps_in_scan == 1) {
 800c664:	d135      	bne.n	800c6d2 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800c666:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800c66a:	69d9      	ldr	r1, [r3, #28]
 800c66c:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800c670:	6a19      	ldr	r1, [r3, #32]
 800c672:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800c676:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800c678:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800c67a:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c67e:	68d8      	ldr	r0, [r3, #12]
 800c680:	fbb1 f5f0 	udiv	r5, r1, r0
 800c684:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800c688:	2900      	cmp	r1, #0
 800c68a:	bf08      	it	eq
 800c68c:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800c68e:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800c692:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800c694:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800c696:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800c69a:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800c69e:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c6a0:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800c6a2:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c6a6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c6aa:	429f      	cmp	r7, r3
 800c6ac:	db71      	blt.n	800c792 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800c6ae:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800c6b8:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800c6bc:	4620      	mov	r0, r4
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800c6c2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800c6c6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c6ca:	6852      	ldr	r2, [r2, #4]
 800c6cc:	601a      	str	r2, [r3, #0]
}
 800c6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800c6d2:	1e53      	subs	r3, r2, #1
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d907      	bls.n	800c6e8 <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800c6d8:	6803      	ldr	r3, [r0, #0]
 800c6da:	211b      	movs	r1, #27
 800c6dc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c6e0:	2204      	movs	r2, #4
 800c6e2:	61da      	str	r2, [r3, #28]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c6e8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800c6ec:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c6ee:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c6f2:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800c6f4:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800c6f6:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800c6fa:	4359      	muls	r1, r3
 800c6fc:	f009 fd9a 	bl	8016234 <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c700:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800c704:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800c708:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800c70c:	4359      	muls	r1, r3
 800c70e:	6a20      	ldr	r0, [r4, #32]
 800c710:	f009 fd90 	bl	8016234 <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800c714:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800c718:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c71c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c720:	429d      	cmp	r5, r3
 800c722:	dabc      	bge.n	800c69e <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800c724:	f858 3f04 	ldr.w	r3, [r8, #4]!
      compptr->MCU_width = compptr->h_samp_factor;
 800c728:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800c72c:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c72e:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800c730:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c734:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800c736:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800c738:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800c73a:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800c73c:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800c73e:	fbb2 fcf1 	udiv	ip, r2, r1
 800c742:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800c746:	2a00      	cmp	r2, #0
 800c748:	bf08      	it	eq
 800c74a:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800c74c:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	fbb2 f1f0 	udiv	r1, r2, r0
 800c754:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800c758:	2a00      	cmp	r2, #0
 800c75a:	bf08      	it	eq
 800c75c:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800c75e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800c760:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c764:	443b      	add	r3, r7
 800c766:	2b0a      	cmp	r3, #10
 800c768:	dd05      	ble.n	800c776 <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	4620      	mov	r0, r4
 800c76e:	f8c3 9014 	str.w	r9, [r3, #20]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4798      	blx	r3
      while (mcublks-- > 0) {
 800c776:	2f00      	cmp	r7, #0
 800c778:	dc01      	bgt.n	800c77e <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c77a:	3501      	adds	r5, #1
 800c77c:	e7ce      	b.n	800c71c <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800c77e:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c782:	3f01      	subs	r7, #1
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	335c      	adds	r3, #92	; 0x5c
 800c788:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800c78c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800c790:	e7f1      	b.n	800c776 <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800c792:	f859 6f04 	ldr.w	r6, [r9, #4]!
    if (compptr->quant_table != NULL)
 800c796:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c798:	b9eb      	cbnz	r3, 800c7d6 <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800c79a:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800c79c:	2a03      	cmp	r2, #3
 800c79e:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800c7a2:	d803      	bhi.n	800c7ac <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800c7a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	b92b      	cbnz	r3, 800c7b8 <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c7b8:	6863      	ldr	r3, [r4, #4]
 800c7ba:	2284      	movs	r2, #132	; 0x84
 800c7bc:	2101      	movs	r1, #1
 800c7be:	4620      	mov	r0, r4
 800c7c0:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800c7c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c7c6:	4798      	blx	r3
 800c7c8:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800c7ca:	2284      	movs	r2, #132	; 0x84
 800c7cc:	6869      	ldr	r1, [r5, #4]
 800c7ce:	f01d fac4 	bl	8029d5a <memcpy>
    compptr->quant_table = qtbl;
 800c7d2:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c7d6:	3701      	adds	r7, #1
 800c7d8:	e765      	b.n	800c6a6 <start_input_pass+0x52>
	...

0800c7dc <consume_markers>:
{
 800c7dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800c7e0:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800c7e4:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800c7e6:	6973      	ldr	r3, [r6, #20]
 800c7e8:	b9eb      	cbnz	r3, 800c826 <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800c7ea:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800c7ee:	4db0      	ldr	r5, [pc, #704]	; (800cab0 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800c7f0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	4798      	blx	r3
    switch (val) {
 800c7fa:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800c7fc:	4607      	mov	r7, r0
    switch (val) {
 800c7fe:	d016      	beq.n	800c82e <consume_markers+0x52>
 800c800:	2802      	cmp	r0, #2
 800c802:	d111      	bne.n	800c828 <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800c804:	2301      	movs	r3, #1
 800c806:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800c808:	69b3      	ldr	r3, [r6, #24]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8174 	beq.w	800caf8 <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800c810:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	b133      	cbz	r3, 800c826 <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800c818:	6823      	ldr	r3, [r4, #0]
 800c81a:	223d      	movs	r2, #61	; 0x3d
 800c81c:	4620      	mov	r0, r4
 800c81e:	615a      	str	r2, [r3, #20]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4798      	blx	r3
 800c824:	e000      	b.n	800c828 <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800c826:	2702      	movs	r7, #2
}
 800c828:	4638      	mov	r0, r7
 800c82a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800c82e:	69b3      	ldr	r3, [r6, #24]
 800c830:	2b00      	cmp	r3, #0
 800c832:	f000 8150 	beq.w	800cad6 <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800c836:	2b01      	cmp	r3, #1
 800c838:	f040 80d8 	bne.w	800c9ec <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800c83c:	6a22      	ldr	r2, [r4, #32]
 800c83e:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800c842:	429a      	cmp	r2, r3
 800c844:	dc02      	bgt.n	800c84c <consume_markers+0x70>
 800c846:	69e2      	ldr	r2, [r4, #28]
 800c848:	429a      	cmp	r2, r3
 800c84a:	dd08      	ble.n	800c85e <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	212a      	movs	r1, #42	; 0x2a
 800c850:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800c854:	4620      	mov	r0, r4
 800c856:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800c85e:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800c862:	2a08      	cmp	r2, #8
 800c864:	d006      	beq.n	800c874 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	2110      	movs	r1, #16
 800c86a:	4620      	mov	r0, r4
 800c86c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800c874:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c876:	2a0a      	cmp	r2, #10
 800c878:	dd08      	ble.n	800c88c <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	211b      	movs	r1, #27
 800c87e:	4620      	mov	r0, r4
 800c880:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c884:	220a      	movs	r2, #10
 800c886:	61da      	str	r2, [r3, #28]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c88c:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800c890:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800c894:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800c898:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c89c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c89e:	459a      	cmp	sl, r3
 800c8a0:	db0d      	blt.n	800c8be <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800c8a2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800c8a6:	b92b      	cbnz	r3, 800c8b4 <consume_markers+0xd8>
 800c8a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c8ac:	b383      	cbz	r3, 800c910 <consume_markers+0x134>
 800c8ae:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c8b2:	b36b      	cbz	r3, 800c910 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800c8b4:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800c8b6:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800c8ba:	233f      	movs	r3, #63	; 0x3f
 800c8bc:	e071      	b.n	800c9a2 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800c8be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d804      	bhi.n	800c8d2 <consume_markers+0xf6>
 800c8c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d905      	bls.n	800c8de <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f8c3 b014 	str.w	fp, [r3, #20]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c8de:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800c8e2:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c8e6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800c8ea:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	bfac      	ite	ge
 800c8f2:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800c8f6:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800c8fa:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800c8fe:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800c902:	429a      	cmp	r2, r3
 800c904:	bfac      	ite	ge
 800c906:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800c90a:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800c90e:	e7c5      	b.n	800c89c <consume_markers+0xc0>
    switch (cinfo->Se) {
 800c910:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800c914:	2b50      	cmp	r3, #80	; 0x50
 800c916:	f000 808a 	beq.w	800ca2e <consume_markers+0x252>
 800c91a:	dc2b      	bgt.n	800c974 <consume_markers+0x198>
 800c91c:	2b18      	cmp	r3, #24
 800c91e:	d078      	beq.n	800ca12 <consume_markers+0x236>
 800c920:	dc1d      	bgt.n	800c95e <consume_markers+0x182>
 800c922:	2b08      	cmp	r3, #8
 800c924:	d070      	beq.n	800ca08 <consume_markers+0x22c>
 800c926:	dc13      	bgt.n	800c950 <consume_markers+0x174>
 800c928:	b3bb      	cbz	r3, 800c99a <consume_markers+0x1be>
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d065      	beq.n	800c9fa <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c92e:	6822      	ldr	r2, [r4, #0]
 800c930:	2111      	movs	r1, #17
 800c932:	4620      	mov	r0, r4
 800c934:	6151      	str	r1, [r2, #20]
 800c936:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800c93a:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800c93e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800c942:	6213      	str	r3, [r2, #32]
 800c944:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800c948:	6253      	str	r3, [r2, #36]	; 0x24
 800c94a:	6813      	ldr	r3, [r2, #0]
 800c94c:	4798      	blx	r3
      break;
 800c94e:	e02a      	b.n	800c9a6 <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800c950:	2b0f      	cmp	r3, #15
 800c952:	d1ec      	bne.n	800c92e <consume_markers+0x152>
      cinfo->block_size = 4;
 800c954:	2204      	movs	r2, #4
 800c956:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800c95a:	4a56      	ldr	r2, [pc, #344]	; (800cab4 <consume_markers+0x2d8>)
 800c95c:	e051      	b.n	800ca02 <consume_markers+0x226>
    switch (cinfo->Se) {
 800c95e:	2b30      	cmp	r3, #48	; 0x30
 800c960:	d05c      	beq.n	800ca1c <consume_markers+0x240>
 800c962:	2b3f      	cmp	r3, #63	; 0x3f
 800c964:	d05f      	beq.n	800ca26 <consume_markers+0x24a>
 800c966:	2b23      	cmp	r3, #35	; 0x23
 800c968:	d1e1      	bne.n	800c92e <consume_markers+0x152>
      cinfo->block_size = 6;
 800c96a:	2206      	movs	r2, #6
 800c96c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800c970:	4a51      	ldr	r2, [pc, #324]	; (800cab8 <consume_markers+0x2dc>)
 800c972:	e046      	b.n	800ca02 <consume_markers+0x226>
    switch (cinfo->Se) {
 800c974:	2ba8      	cmp	r3, #168	; 0xa8
 800c976:	d060      	beq.n	800ca3a <consume_markers+0x25e>
 800c978:	dc07      	bgt.n	800c98a <consume_markers+0x1ae>
 800c97a:	2b78      	cmp	r3, #120	; 0x78
 800c97c:	d059      	beq.n	800ca32 <consume_markers+0x256>
 800c97e:	2b8f      	cmp	r3, #143	; 0x8f
 800c980:	d059      	beq.n	800ca36 <consume_markers+0x25a>
 800c982:	2b63      	cmp	r3, #99	; 0x63
 800c984:	d1d3      	bne.n	800c92e <consume_markers+0x152>
      cinfo->block_size = 10;
 800c986:	230a      	movs	r3, #10
 800c988:	e795      	b.n	800c8b6 <consume_markers+0xda>
    switch (cinfo->Se) {
 800c98a:	2be0      	cmp	r3, #224	; 0xe0
 800c98c:	d057      	beq.n	800ca3e <consume_markers+0x262>
 800c98e:	2bff      	cmp	r3, #255	; 0xff
 800c990:	d057      	beq.n	800ca42 <consume_markers+0x266>
 800c992:	2bc3      	cmp	r3, #195	; 0xc3
 800c994:	d1cb      	bne.n	800c92e <consume_markers+0x152>
      cinfo->block_size = 14;
 800c996:	230e      	movs	r3, #14
 800c998:	e78d      	b.n	800c8b6 <consume_markers+0xda>
      cinfo->block_size = 1;
 800c99a:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800c99e:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c9a2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c9a6:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800c9aa:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c9ae:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800c9b2:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800c9b4:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800c9ba:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c9be:	459a      	cmp	sl, r3
 800c9c0:	db41      	blt.n	800ca46 <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c9c2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800c9c6:	6a20      	ldr	r0, [r4, #32]
 800c9c8:	4359      	muls	r1, r3
 800c9ca:	f009 fc33 	bl	8016234 <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800c9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800c9d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c9de:	db03      	blt.n	800c9e8 <consume_markers+0x20c>
 800c9e0:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	d071      	beq.n	800cacc <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800c9e8:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800c9ec:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d16d      	bne.n	800cad0 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	61b3      	str	r3, [r6, #24]
	  break;
 800c9f8:	e6fa      	b.n	800c7f0 <consume_markers+0x14>
      cinfo->block_size = 2;
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800ca00:	4a2e      	ldr	r2, [pc, #184]	; (800cabc <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800ca02:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800ca06:	e7cc      	b.n	800c9a2 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800ca08:	2203      	movs	r2, #3
 800ca0a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800ca0e:	4a2c      	ldr	r2, [pc, #176]	; (800cac0 <consume_markers+0x2e4>)
 800ca10:	e7f7      	b.n	800ca02 <consume_markers+0x226>
      cinfo->block_size = 5;
 800ca12:	2205      	movs	r2, #5
 800ca14:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800ca18:	4a2a      	ldr	r2, [pc, #168]	; (800cac4 <consume_markers+0x2e8>)
 800ca1a:	e7f2      	b.n	800ca02 <consume_markers+0x226>
      cinfo->block_size = 7;
 800ca1c:	2207      	movs	r2, #7
 800ca1e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800ca22:	4a29      	ldr	r2, [pc, #164]	; (800cac8 <consume_markers+0x2ec>)
 800ca24:	e7ed      	b.n	800ca02 <consume_markers+0x226>
      cinfo->block_size = 8;
 800ca26:	2208      	movs	r2, #8
 800ca28:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800ca2c:	e7b7      	b.n	800c99e <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800ca2e:	2309      	movs	r3, #9
 800ca30:	e741      	b.n	800c8b6 <consume_markers+0xda>
      cinfo->block_size = 11;
 800ca32:	230b      	movs	r3, #11
 800ca34:	e73f      	b.n	800c8b6 <consume_markers+0xda>
      cinfo->block_size = 12;
 800ca36:	230c      	movs	r3, #12
 800ca38:	e73d      	b.n	800c8b6 <consume_markers+0xda>
      cinfo->block_size = 13;
 800ca3a:	230d      	movs	r3, #13
 800ca3c:	e73b      	b.n	800c8b6 <consume_markers+0xda>
      cinfo->block_size = 15;
 800ca3e:	230f      	movs	r3, #15
 800ca40:	e739      	b.n	800c8b6 <consume_markers+0xda>
      cinfo->block_size = 16;
 800ca42:	2310      	movs	r3, #16
 800ca44:	e737      	b.n	800c8b6 <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800ca46:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800ca4a:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800ca4e:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ca52:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800ca56:	69e3      	ldr	r3, [r4, #28]
 800ca58:	4351      	muls	r1, r2
 800ca5a:	4358      	muls	r0, r3
 800ca5c:	f009 fbea 	bl	8016234 <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800ca60:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ca64:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ca68:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ca6c:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ca6e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ca72:	4358      	muls	r0, r3
 800ca74:	4351      	muls	r1, r2
 800ca76:	f009 fbdd 	bl	8016234 <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800ca7a:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800ca7e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ca82:	69e3      	ldr	r3, [r4, #28]
 800ca84:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800ca88:	4358      	muls	r0, r3
 800ca8a:	f009 fbd3 	bl	8016234 <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800ca8e:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800ca92:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ca96:	6a23      	ldr	r3, [r4, #32]
 800ca98:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800ca9c:	4358      	muls	r0, r3
 800ca9e:	f009 fbc9 	bl	8016234 <jdiv_round_up>
    compptr->quant_table = NULL;
 800caa2:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800caa6:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800caaa:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800caae:	e783      	b.n	800c9b8 <consume_markers+0x1dc>
 800cab0:	0802e688 	.word	0x0802e688
 800cab4:	0802e87c 	.word	0x0802e87c
 800cab8:	0802e9a0 	.word	0x0802e9a0
 800cabc:	0802e7c8 	.word	0x0802e7c8
 800cac0:	0802e818 	.word	0x0802e818
 800cac4:	0802e8fc 	.word	0x0802e8fc
 800cac8:	0802ea70 	.word	0x0802ea70
    cinfo->inputctl->has_multiple_scans = FALSE;
 800cacc:	611a      	str	r2, [r3, #16]
 800cace:	e78d      	b.n	800c9ec <consume_markers+0x210>
	inputctl->inheaders = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	61b3      	str	r3, [r6, #24]
 800cad4:	e6a8      	b.n	800c828 <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800cad6:	6933      	ldr	r3, [r6, #16]
 800cad8:	b92b      	cbnz	r3, 800cae6 <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	2224      	movs	r2, #36	; 0x24
 800cade:	4620      	mov	r0, r4
 800cae0:	615a      	str	r2, [r3, #20]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800cae6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800caea:	2b00      	cmp	r3, #0
 800caec:	f43f ae80 	beq.w	800c7f0 <consume_markers+0x14>
	start_input_pass(cinfo);
 800caf0:	4620      	mov	r0, r4
 800caf2:	f7ff fdaf 	bl	800c654 <start_input_pass>
 800caf6:	e697      	b.n	800c828 <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800caf8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cafc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800cb00:	429a      	cmp	r2, r3
 800cb02:	f77f ae90 	ble.w	800c826 <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800cb06:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800cb0a:	e68d      	b.n	800c828 <consume_markers+0x4c>

0800cb0c <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800cb0c:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800cb10:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800cb12:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cb14:	434a      	muls	r2, r1
 800cb16:	429a      	cmp	r2, r3
{
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800cb1c:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800cb1e:	d813      	bhi.n	800cb48 <jpeg_core_output_dimensions+0x3c>
    cinfo->output_width = (JDIMENSION)
 800cb20:	2501      	movs	r5, #1
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800cb22:	f009 fb87 	bl	8016234 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800cb26:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800cb2a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800cb2c:	6a20      	ldr	r0, [r4, #32]
 800cb2e:	f009 fb81 	bl	8016234 <jdiv_round_up>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cb32:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cb36:	2200      	movs	r2, #0
 800cb38:	6a61      	ldr	r1, [r4, #36]	; 0x24
    cinfo->output_height = (JDIMENSION)
 800cb3a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 1;
 800cb3c:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cb40:	4291      	cmp	r1, r2
 800cb42:	f300 80bf 	bgt.w	800ccc4 <jpeg_core_output_dimensions+0x1b8>
}
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800cb48:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800cb4c:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800cb50:	d80b      	bhi.n	800cb6a <jpeg_core_output_dimensions+0x5e>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800cb52:	0040      	lsls	r0, r0, #1
 800cb54:	2502      	movs	r5, #2
 800cb56:	f009 fb6d 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cb5a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800cb5c:	6a20      	ldr	r0, [r4, #32]
 800cb5e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cb62:	0040      	lsls	r0, r0, #1
 800cb64:	f009 fb66 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 2;
 800cb68:	e7e3      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800cb6a:	441d      	add	r5, r3
 800cb6c:	42aa      	cmp	r2, r5
 800cb6e:	d80d      	bhi.n	800cb8c <jpeg_core_output_dimensions+0x80>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800cb70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cb74:	2503      	movs	r5, #3
 800cb76:	f009 fb5d 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cb7a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800cb7c:	6a20      	ldr	r0, [r4, #32]
 800cb7e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cb82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cb86:	f009 fb55 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 3;
 800cb8a:	e7d2      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800cb8c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800cb90:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800cb94:	d80b      	bhi.n	800cbae <jpeg_core_output_dimensions+0xa2>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800cb96:	0080      	lsls	r0, r0, #2
 800cb98:	2504      	movs	r5, #4
 800cb9a:	f009 fb4b 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cb9e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800cba0:	6a20      	ldr	r0, [r4, #32]
 800cba2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cba6:	0080      	lsls	r0, r0, #2
 800cba8:	f009 fb44 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 4;
 800cbac:	e7c1      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800cbae:	441d      	add	r5, r3
 800cbb0:	42aa      	cmp	r2, r5
 800cbb2:	d80d      	bhi.n	800cbd0 <jpeg_core_output_dimensions+0xc4>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800cbb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cbb8:	2505      	movs	r5, #5
 800cbba:	f009 fb3b 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cbbe:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800cbc0:	6a20      	ldr	r0, [r4, #32]
 800cbc2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cbc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cbca:	f009 fb33 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 5;
 800cbce:	e7b0      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800cbd0:	2506      	movs	r5, #6
 800cbd2:	fb05 f603 	mul.w	r6, r5, r3
 800cbd6:	42b2      	cmp	r2, r6
 800cbd8:	d80a      	bhi.n	800cbf0 <jpeg_core_output_dimensions+0xe4>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800cbda:	4368      	muls	r0, r5
 800cbdc:	f009 fb2a 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cbe0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800cbe2:	6a20      	ldr	r0, [r4, #32]
 800cbe4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cbe8:	4368      	muls	r0, r5
 800cbea:	f009 fb23 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 14;
 800cbee:	e7a0      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800cbf0:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800cbf4:	00dd      	lsls	r5, r3, #3
 800cbf6:	42b2      	cmp	r2, r6
 800cbf8:	d80d      	bhi.n	800cc16 <jpeg_core_output_dimensions+0x10a>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800cbfa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800cbfe:	2507      	movs	r5, #7
 800cc00:	f009 fb18 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cc04:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800cc06:	6a20      	ldr	r0, [r4, #32]
 800cc08:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cc0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800cc10:	f009 fb10 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 7;
 800cc14:	e78d      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800cc16:	42aa      	cmp	r2, r5
 800cc18:	d80b      	bhi.n	800cc32 <jpeg_core_output_dimensions+0x126>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800cc1a:	00c0      	lsls	r0, r0, #3
 800cc1c:	2508      	movs	r5, #8
 800cc1e:	f009 fb09 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cc22:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800cc24:	6a20      	ldr	r0, [r4, #32]
 800cc26:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cc2a:	00c0      	lsls	r0, r0, #3
 800cc2c:	f009 fb02 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 8;
 800cc30:	e77f      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800cc32:	441d      	add	r5, r3
 800cc34:	42aa      	cmp	r2, r5
 800cc36:	d80d      	bhi.n	800cc54 <jpeg_core_output_dimensions+0x148>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800cc38:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800cc3c:	2509      	movs	r5, #9
 800cc3e:	f009 faf9 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cc42:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800cc44:	6a20      	ldr	r0, [r4, #32]
 800cc46:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cc4a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800cc4e:	f009 faf1 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 9;
 800cc52:	e76e      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800cc54:	250a      	movs	r5, #10
 800cc56:	fb05 f603 	mul.w	r6, r5, r3
 800cc5a:	42b2      	cmp	r2, r6
 800cc5c:	d9bd      	bls.n	800cbda <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800cc5e:	250b      	movs	r5, #11
 800cc60:	fb05 f603 	mul.w	r6, r5, r3
 800cc64:	42b2      	cmp	r2, r6
 800cc66:	d9b8      	bls.n	800cbda <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800cc68:	250c      	movs	r5, #12
 800cc6a:	fb05 f603 	mul.w	r6, r5, r3
 800cc6e:	42b2      	cmp	r2, r6
 800cc70:	d9b3      	bls.n	800cbda <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800cc72:	250d      	movs	r5, #13
 800cc74:	fb05 f603 	mul.w	r6, r5, r3
 800cc78:	42b2      	cmp	r2, r6
 800cc7a:	d9ae      	bls.n	800cbda <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800cc7c:	250e      	movs	r5, #14
 800cc7e:	fb05 f603 	mul.w	r6, r5, r3
 800cc82:	42b2      	cmp	r2, r6
 800cc84:	d9a9      	bls.n	800cbda <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800cc86:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800cc90:	d80c      	bhi.n	800ccac <jpeg_core_output_dimensions+0x1a0>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800cc92:	1a18      	subs	r0, r3, r0
 800cc94:	250f      	movs	r5, #15
 800cc96:	f009 facd 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cc9a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800cc9c:	6a20      	ldr	r0, [r4, #32]
 800cc9e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cca2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800cca6:	f009 fac5 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 15;
 800ccaa:	e742      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800ccac:	4618      	mov	r0, r3
    cinfo->output_height = (JDIMENSION)
 800ccae:	2510      	movs	r5, #16
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800ccb0:	f009 fac0 	bl	8016234 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ccb4:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800ccb6:	6a20      	ldr	r0, [r4, #32]
 800ccb8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ccbc:	0100      	lsls	r0, r0, #4
 800ccbe:	f009 fab9 	bl	8016234 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 16;
 800ccc2:	e736      	b.n	800cb32 <jpeg_core_output_dimensions+0x26>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800ccc4:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800ccc8:	3201      	adds	r2, #1
 800ccca:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800cccc:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800ccd0:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800ccd4:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800ccd8:	e732      	b.n	800cb40 <jpeg_core_output_dimensions+0x34>
	...

0800ccdc <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ccdc:	6843      	ldr	r3, [r0, #4]
 800ccde:	221c      	movs	r2, #28
 800cce0:	2100      	movs	r1, #0
 800cce2:	681b      	ldr	r3, [r3, #0]
{
 800cce4:	b510      	push	{r4, lr}
 800cce6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800cce8:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800ccea:	4b08      	ldr	r3, [pc, #32]	; (800cd0c <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800ccec:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800ccf0:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800ccf2:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <jinit_input_controller+0x34>)
 800ccf4:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800ccf6:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <jinit_input_controller+0x38>)
 800ccf8:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800ccfa:	4b07      	ldr	r3, [pc, #28]	; (800cd18 <jinit_input_controller+0x3c>)
 800ccfc:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800ccfe:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800cd00:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800cd04:	2301      	movs	r3, #1
 800cd06:	6183      	str	r3, [r0, #24]
}
 800cd08:	bd10      	pop	{r4, pc}
 800cd0a:	bf00      	nop
 800cd0c:	0800c7dd 	.word	0x0800c7dd
 800cd10:	0800c625 	.word	0x0800c625
 800cd14:	0800c655 	.word	0x0800c655
 800cd18:	0800c615 	.word	0x0800c615

0800cd1c <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800cd1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cd20:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800cd24:	4602      	mov	r2, r0

  switch (pass_mode) {
 800cd26:	b149      	cbz	r1, 800cd3c <start_pass_main+0x20>
 800cd28:	2902      	cmp	r1, #2
 800cd2a:	d071      	beq.n	800ce10 <start_pass_main+0xf4>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800cd2c:	6803      	ldr	r3, [r0, #0]
 800cd2e:	2203      	movs	r2, #3
 800cd30:	615a      	str	r2, [r3, #20]
 800cd32:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800cd34:	b003      	add	sp, #12
 800cd36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800cd3a:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800cd3c:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800cd40:	6880      	ldr	r0, [r0, #8]
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d061      	beq.n	800ce0a <start_pass_main+0xee>
  int M = cinfo->min_DCT_v_scaled_size;
 800cd46:	f8d2 c144 	ldr.w	ip, [r2, #324]	; 0x144
      main->pub.process_data = process_data_context_main;
 800cd4a:	461f      	mov	r7, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd4c:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800cd50:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800cd52:	4831      	ldr	r0, [pc, #196]	; (800ce18 <start_pass_main+0xfc>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd54:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800cd56:	f10c 0202 	add.w	r2, ip, #2
      main->pub.process_data = process_data_context_main;
 800cd5a:	f847 0f04 	str.w	r0, [r7, #4]!
    for (i = 0; i < rgroup * (M + 2); i++) {
 800cd5e:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd60:	9a00      	ldr	r2, [sp, #0]
 800cd62:	4291      	cmp	r1, r2
 800cd64:	db09      	blt.n	800cd7a <start_pass_main+0x5e>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800cd66:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800cd68:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800cd6c:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800cd6e:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800cd70:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800cd74:	b003      	add	sp, #12
 800cd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cd7a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800cd7c:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800cd7e:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cd80:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800cd82:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800cd84:	f857 4f04 	ldr.w	r4, [r7, #4]!
    xbuf0 = main->xbuffer[0][ci];
 800cd88:	f850 e021 	ldr.w	lr, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800cd8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cd8e:	fb92 f2fc 	sdiv	r2, r2, ip
    xbuf1 = main->xbuffer[1][ci];
 800cd92:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800cd96:	fb02 f905 	mul.w	r9, r2, r5
 800cd9a:	2500      	movs	r5, #0
 800cd9c:	454d      	cmp	r5, r9
 800cd9e:	db1c      	blt.n	800cdda <start_pass_main+0xbe>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800cda0:	fb02 fb0c 	mul.w	fp, r2, ip
 800cda4:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800cda8:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800cdac:	fb05 b502 	mla	r5, r5, r2, fp
 800cdb0:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800cdb4:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800cdb8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800cdbc:	2400      	movs	r4, #0
 800cdbe:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800cdc2:	4554      	cmp	r4, sl
 800cdc4:	db11      	blt.n	800cdea <start_pass_main+0xce>
 800cdc6:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800cdca:	2400      	movs	r4, #0
 800cdcc:	fb00 e502 	mla	r5, r0, r2, lr
 800cdd0:	42a2      	cmp	r2, r4
 800cdd2:	dc14      	bgt.n	800cdfe <start_pass_main+0xe2>
       ci++, compptr++) {
 800cdd4:	3101      	adds	r1, #1
 800cdd6:	3658      	adds	r6, #88	; 0x58
 800cdd8:	e7c2      	b.n	800cd60 <start_pass_main+0x44>
      xbuf0[i] = xbuf1[i] = buf[i];
 800cdda:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800cdde:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800cde2:	f84e 8025 	str.w	r8, [lr, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800cde6:	3501      	adds	r5, #1
 800cde8:	e7d8      	b.n	800cd9c <start_pass_main+0x80>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800cdea:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800cdee:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800cdf0:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800cdf4:	f855 bb04 	ldr.w	fp, [r5], #4
 800cdf8:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800cdfc:	e7e1      	b.n	800cdc2 <start_pass_main+0xa6>
      xbuf0[i - rgroup] = xbuf0[0];
 800cdfe:	f8de 0000 	ldr.w	r0, [lr]
 800ce02:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800ce06:	3401      	adds	r4, #1
 800ce08:	e7e2      	b.n	800cdd0 <start_pass_main+0xb4>
      main->pub.process_data = process_data_simple_main;
 800ce0a:	4a04      	ldr	r2, [pc, #16]	; (800ce1c <start_pass_main+0x100>)
 800ce0c:	605a      	str	r2, [r3, #4]
 800ce0e:	e7ae      	b.n	800cd6e <start_pass_main+0x52>
    main->pub.process_data = process_data_crank_post;
 800ce10:	4a03      	ldr	r2, [pc, #12]	; (800ce20 <start_pass_main+0x104>)
 800ce12:	605a      	str	r2, [r3, #4]
    break;
 800ce14:	e7ae      	b.n	800cd74 <start_pass_main+0x58>
 800ce16:	bf00      	nop
 800ce18:	0800ce7d 	.word	0x0800ce7d
 800ce1c:	0800ce25 	.word	0x0800ce25
 800ce20:	0800d071 	.word	0x0800d071

0800ce24 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800ce24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ce28:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800ce2c:	4698      	mov	r8, r3
 800ce2e:	460e      	mov	r6, r1
 800ce30:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800ce32:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800ce34:	4605      	mov	r5, r0
 800ce36:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800ce38:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800ce3c:	b943      	cbnz	r3, 800ce50 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800ce3e:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800ce42:	9105      	str	r1, [sp, #20]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	4798      	blx	r3
 800ce48:	b1a8      	cbz	r0, 800ce76 <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	9905      	ldr	r1, [sp, #20]
 800ce4e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800ce50:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800ce54:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800ce58:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	9600      	str	r6, [sp, #0]
 800ce60:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800ce64:	685e      	ldr	r6, [r3, #4]
 800ce66:	464b      	mov	r3, r9
 800ce68:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800ce6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce6c:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800ce6e:	bf24      	itt	cs
 800ce70:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800ce72:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800ce76:	b007      	add	sp, #28
 800ce78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ce7c <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ce80:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800ce84:	4698      	mov	r8, r3
 800ce86:	b08b      	sub	sp, #44	; 0x2c
 800ce88:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800ce8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800ce8c:	4689      	mov	r9, r1
 800ce8e:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800ce90:	b973      	cbnz	r3, 800ceb0 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800ce92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce94:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800ce98:	330e      	adds	r3, #14
 800ce9a:	68d2      	ldr	r2, [r2, #12]
 800ce9c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800cea0:	4790      	blx	r2
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d05a      	beq.n	800cf5c <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800cea6:	2301      	movs	r3, #1
 800cea8:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800ceaa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ceac:	3301      	adds	r3, #1
 800ceae:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800ceb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d011      	beq.n	800ceda <process_data_context_main+0x5e>
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d036      	beq.n	800cf28 <process_data_context_main+0xac>
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d14e      	bne.n	800cf5c <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800cebe:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800cec2:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800cec4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800cec6:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800ceca:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800cecc:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800cece:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d045      	beq.n	800cf62 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800ced6:	2301      	movs	r3, #1
 800ced8:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800ceda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cedc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800cee0:	4628      	mov	r0, r5
 800cee2:	f103 010e 	add.w	r1, r3, #14
 800cee6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800ceea:	f8cd 9000 	str.w	r9, [sp]
 800ceee:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800cef2:	685e      	ldr	r6, [r3, #4]
 800cef4:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800cef8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cefa:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800cefc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cefe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d32b      	bcc.n	800cf5c <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800cf04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800cf06:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d063      	beq.n	800cfd6 <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800cf0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf10:	f083 0301 	eor.w	r3, r3, #1
 800cf14:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800cf16:	2300      	movs	r3, #0
 800cf18:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800cf1a:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800cf1c:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800cf1e:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800cf20:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800cf22:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800cf24:	6463      	str	r3, [r4, #68]	; 0x44
 800cf26:	e019      	b.n	800cf5c <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800cf28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf2a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f103 010e 	add.w	r1, r3, #14
 800cf34:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800cf38:	f8cd 9000 	str.w	r9, [sp]
 800cf3c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800cf40:	685e      	ldr	r6, [r3, #4]
 800cf42:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800cf46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cf48:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800cf4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cf4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d304      	bcc.n	800cf5c <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800cf52:	2300      	movs	r3, #0
 800cf54:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	4543      	cmp	r3, r8
 800cf5a:	d3b0      	bcc.n	800cebe <process_data_context_main+0x42>
  }
}
 800cf5c:	b00b      	add	sp, #44	; 0x2c
 800cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800cf64:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cf68:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf6c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800cf70:	9206      	str	r2, [sp, #24]
 800cf72:	9a06      	ldr	r2, [sp, #24]
 800cf74:	4296      	cmp	r6, r2
 800cf76:	daae      	bge.n	800ced6 <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800cf78:	68d8      	ldr	r0, [r3, #12]
 800cf7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf7c:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800cf7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cf80:	fbb0 fbf2 	udiv	fp, r0, r2
 800cf84:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800cf88:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	bf08      	it	eq
 800cf90:	4610      	moveq	r0, r2
    if (ci == 0) {
 800cf92:	b926      	cbnz	r6, 800cf9e <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800cf94:	1e42      	subs	r2, r0, #1
 800cf96:	fb92 f2fa 	sdiv	r2, r2, sl
 800cf9a:	3201      	adds	r2, #1
 800cf9c:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800cf9e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800cfa0:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800cfa2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800cfa6:	320e      	adds	r2, #14
 800cfa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cfac:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800cfb0:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	465a      	mov	r2, fp
 800cfb8:	3204      	adds	r2, #4
 800cfba:	9005      	str	r0, [sp, #20]
 800cfbc:	9805      	ldr	r0, [sp, #20]
 800cfbe:	4550      	cmp	r0, sl
 800cfc0:	db02      	blt.n	800cfc8 <process_data_context_main+0x14c>
       ci++, compptr++) {
 800cfc2:	3601      	adds	r6, #1
 800cfc4:	3358      	adds	r3, #88	; 0x58
 800cfc6:	e7d4      	b.n	800cf72 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800cfc8:	f8db 0000 	ldr.w	r0, [fp]
 800cfcc:	f842 0b04 	str.w	r0, [r2], #4
    for (i = 0; i < rgroup * 2; i++) {
 800cfd0:	9805      	ldr	r0, [sp, #20]
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	e7f1      	b.n	800cfba <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfd6:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cfda:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfde:	9305      	str	r3, [sp, #20]
 800cfe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfe2:	2500      	movs	r5, #0
 800cfe4:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfea:	9b08      	ldr	r3, [sp, #32]
 800cfec:	429d      	cmp	r5, r3
 800cfee:	da8e      	bge.n	800cf0e <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cff0:	9b05      	ldr	r3, [sp, #20]
 800cff2:	68da      	ldr	r2, [r3, #12]
 800cff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff6:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800cff8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cffc:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d000:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d004:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800d008:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d00c:	9b07      	ldr	r3, [sp, #28]
 800d00e:	4353      	muls	r3, r2
 800d010:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800d014:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d018:	4413      	add	r3, r2
 800d01a:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800d01c:	2100      	movs	r1, #0
 800d01e:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800d022:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d026:	461e      	mov	r6, r3
 800d028:	f06f 0303 	mvn.w	r3, #3
 800d02c:	fb03 fe02 	mul.w	lr, r3, r2
 800d030:	eb07 030e 	add.w	r3, r7, lr
 800d034:	44e6      	add	lr, ip
 800d036:	9309      	str	r3, [sp, #36]	; 0x24
 800d038:	428a      	cmp	r2, r1
 800d03a:	dc04      	bgt.n	800d046 <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800d03c:	9b05      	ldr	r3, [sp, #20]
 800d03e:	3501      	adds	r5, #1
 800d040:	3358      	adds	r3, #88	; 0x58
 800d042:	9305      	str	r3, [sp, #20]
 800d044:	e7d1      	b.n	800cfea <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d046:	9b06      	ldr	r3, [sp, #24]
 800d048:	f853 bb04 	ldr.w	fp, [r3], #4
 800d04c:	9306      	str	r3, [sp, #24]
 800d04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d050:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800d054:	f85a bb04 	ldr.w	fp, [sl], #4
 800d058:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d05c:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800d060:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d064:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d068:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d06a:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800d06e:	e7e3      	b.n	800d038 <process_data_context_main+0x1bc>

0800d070 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800d070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800d072:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800d076:	9100      	str	r1, [sp, #0]
 800d078:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d07c:	2300      	movs	r3, #0
 800d07e:	6864      	ldr	r4, [r4, #4]
 800d080:	461a      	mov	r2, r3
 800d082:	4619      	mov	r1, r3
 800d084:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800d086:	b004      	add	sp, #16
 800d088:	bd10      	pop	{r4, pc}
	...

0800d08c <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800d08c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d090:	6843      	ldr	r3, [r0, #4]
{
 800d092:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d094:	2250      	movs	r2, #80	; 0x50
 800d096:	2101      	movs	r1, #1
 800d098:	681b      	ldr	r3, [r3, #0]
{
 800d09a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d09c:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800d09e:	4b3a      	ldr	r3, [pc, #232]	; (800d188 <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800d0a0:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0a4:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800d0a6:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800d0a8:	b12d      	cbz	r5, 800d0b6 <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	2203      	movs	r2, #3
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	615a      	str	r2, [r3, #20]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800d0b6:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d0ba:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	b31b      	cbz	r3, 800d10a <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d0c2:	2d01      	cmp	r5, #1
 800d0c4:	dc05      	bgt.n	800d0d2 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	2230      	movs	r2, #48	; 0x30
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	615a      	str	r2, [r3, #20]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	6863      	ldr	r3, [r4, #4]
 800d0d8:	4620      	mov	r0, r4
 800d0da:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d0dc:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0e0:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d0e2:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800d0e6:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0ea:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d0ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800d0ee:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d0f0:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d0f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d0f8:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d0fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d0fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800d100:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d104:	4590      	cmp	r8, r2
 800d106:	db0a      	blt.n	800d11e <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800d108:	1c9d      	adds	r5, r3, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d10a:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d10e:	3604      	adds	r6, #4
 800d110:	f04f 0800 	mov.w	r8, #0
 800d114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d116:	4543      	cmp	r3, r8
 800d118:	dc1d      	bgt.n	800d156 <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800d11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d11e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d120:	4620      	mov	r0, r4
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d122:	68ea      	ldr	r2, [r5, #12]
       ci++, compptr++) {
 800d124:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d126:	434a      	muls	r2, r1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d128:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d12a:	fb92 fbf3 	sdiv	fp, r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d12e:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d130:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d13a:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800d13e:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800d142:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800d146:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800d14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800d150:	f108 0801 	add.w	r8, r8, #1
 800d154:	e7d3      	b.n	800d0fe <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d156:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800d158:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d15c:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800d15e:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d160:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d164:	4353      	muls	r3, r2
 800d166:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d16a:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d16c:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d170:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800d174:	436b      	muls	r3, r5
 800d176:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800d17a:	4620      	mov	r0, r4
 800d17c:	434a      	muls	r2, r1
 800d17e:	2101      	movs	r1, #1
 800d180:	47c8      	blx	r9
 800d182:	f846 0f04 	str.w	r0, [r6, #4]!
       ci++, compptr++) {
 800d186:	e7c5      	b.n	800d114 <jinit_d_main_controller+0x88>
 800d188:	0800cd1d 	.word	0x0800cd1d

0800d18c <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800d18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800d190:	6986      	ldr	r6, [r0, #24]
{
 800d192:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800d194:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800d198:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800d19c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d1a0:	b93d      	cbnz	r5, 800d1b2 <get_sof+0x26>
 800d1a2:	68f3      	ldr	r3, [r6, #12]
 800d1a4:	4798      	blx	r3
 800d1a6:	b910      	cbnz	r0, 800d1ae <get_sof+0x22>
 800d1a8:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d1ae:	e9d6 c500 	ldrd	ip, r5, [r6]
 800d1b2:	1e6b      	subs	r3, r5, #1
 800d1b4:	f89c 7000 	ldrb.w	r7, [ip]
 800d1b8:	f000 8088 	beq.w	800d2cc <get_sof+0x140>
 800d1bc:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d1c0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d1c2:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d1c6:	f000 808a 	beq.w	800d2de <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d1ca:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d1cc:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d1ce:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d1d0:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d1d4:	f000 808c 	beq.w	800d2f0 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d1d8:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d1da:	782a      	ldrb	r2, [r5, #0]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d1e2:	6222      	str	r2, [r4, #32]
 800d1e4:	f000 808d 	beq.w	800d302 <get_sof+0x176>
 800d1e8:	3501      	adds	r5, #1
 800d1ea:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d1ec:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d1ee:	6a22      	ldr	r2, [r4, #32]
 800d1f0:	440a      	add	r2, r1
 800d1f2:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d1f4:	f000 808e 	beq.w	800d314 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d1f8:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d1fa:	782a      	ldrb	r2, [r5, #0]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d202:	61e2      	str	r2, [r4, #28]
 800d204:	f000 808f 	beq.w	800d326 <get_sof+0x19a>
 800d208:	3501      	adds	r5, #1
 800d20a:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d20c:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d20e:	69e2      	ldr	r2, [r4, #28]
 800d210:	440a      	add	r2, r1
 800d212:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d214:	f000 8090 	beq.w	800d338 <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d218:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d21a:	f103 39ff 	add.w	r9, r3, #4294967295
 800d21e:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d222:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800d226:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d228:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d22a:	4620      	mov	r0, r4
 800d22c:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d22e:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d232:	619a      	str	r2, [r3, #24]
  length -= 8;
 800d234:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d238:	69e2      	ldr	r2, [r4, #28]
 800d23a:	61da      	str	r2, [r3, #28]
 800d23c:	6a22      	ldr	r2, [r4, #32]
 800d23e:	621a      	str	r2, [r3, #32]
 800d240:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d242:	625a      	str	r2, [r3, #36]	; 0x24
 800d244:	2266      	movs	r2, #102	; 0x66
 800d246:	615a      	str	r2, [r3, #20]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800d24c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	b12b      	cbz	r3, 800d260 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800d254:	6823      	ldr	r3, [r4, #0]
 800d256:	223c      	movs	r2, #60	; 0x3c
 800d258:	4620      	mov	r0, r4
 800d25a:	615a      	str	r2, [r3, #20]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800d260:	6a23      	ldr	r3, [r4, #32]
 800d262:	b123      	cbz	r3, 800d26e <get_sof+0xe2>
 800d264:	69e3      	ldr	r3, [r4, #28]
 800d266:	b113      	cbz	r3, 800d26e <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800d268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	dc05      	bgt.n	800d27a <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	2221      	movs	r2, #33	; 0x21
 800d272:	4620      	mov	r0, r4
 800d274:	615a      	str	r2, [r3, #20]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800d27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d27c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d280:	4543      	cmp	r3, r8
 800d282:	d005      	beq.n	800d290 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d284:	6823      	ldr	r3, [r4, #0]
 800d286:	220c      	movs	r2, #12
 800d288:	4620      	mov	r0, r4
 800d28a:	615a      	str	r2, [r3, #20]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800d290:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d294:	b94b      	cbnz	r3, 800d2aa <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800d296:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d298:	2158      	movs	r1, #88	; 0x58
 800d29a:	6863      	ldr	r3, [r4, #4]
 800d29c:	4620      	mov	r0, r4
 800d29e:	434a      	muls	r2, r1
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4798      	blx	r3
 800d2a6:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d2aa:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d2ae:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d2b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d2b6:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2ba:	4543      	cmp	r3, r8
 800d2bc:	dc45      	bgt.n	800d34a <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800d2be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d2c2:	2001      	movs	r0, #1
 800d2c4:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800d2c6:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800d2ca:	e76e      	b.n	800d1aa <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d2cc:	68f3      	ldr	r3, [r6, #12]
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	4798      	blx	r3
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	f43f af68 	beq.w	800d1a8 <get_sof+0x1c>
 800d2d8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d2dc:	e770      	b.n	800d1c0 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d2de:	68f3      	ldr	r3, [r6, #12]
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	4798      	blx	r3
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	f43f af5f 	beq.w	800d1a8 <get_sof+0x1c>
 800d2ea:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d2ee:	e76d      	b.n	800d1cc <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d2f0:	68f3      	ldr	r3, [r6, #12]
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	4798      	blx	r3
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f43f af56 	beq.w	800d1a8 <get_sof+0x1c>
 800d2fc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d300:	e76b      	b.n	800d1da <get_sof+0x4e>
 800d302:	68f3      	ldr	r3, [r6, #12]
 800d304:	4620      	mov	r0, r4
 800d306:	4798      	blx	r3
 800d308:	2800      	cmp	r0, #0
 800d30a:	f43f af4d 	beq.w	800d1a8 <get_sof+0x1c>
 800d30e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d312:	e76a      	b.n	800d1ea <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d314:	68f3      	ldr	r3, [r6, #12]
 800d316:	4620      	mov	r0, r4
 800d318:	4798      	blx	r3
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f43f af44 	beq.w	800d1a8 <get_sof+0x1c>
 800d320:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d324:	e769      	b.n	800d1fa <get_sof+0x6e>
 800d326:	68f3      	ldr	r3, [r6, #12]
 800d328:	4620      	mov	r0, r4
 800d32a:	4798      	blx	r3
 800d32c:	2800      	cmp	r0, #0
 800d32e:	f43f af3b 	beq.w	800d1a8 <get_sof+0x1c>
 800d332:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d336:	e768      	b.n	800d20a <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d338:	68f3      	ldr	r3, [r6, #12]
 800d33a:	4620      	mov	r0, r4
 800d33c:	4798      	blx	r3
 800d33e:	2800      	cmp	r0, #0
 800d340:	f43f af32 	beq.w	800d1a8 <get_sof+0x1c>
 800d344:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d348:	e767      	b.n	800d21a <get_sof+0x8e>
    compptr->component_index = ci;
 800d34a:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d34e:	f1b9 0f00 	cmp.w	r9, #0
 800d352:	d107      	bne.n	800d364 <get_sof+0x1d8>
 800d354:	68f3      	ldr	r3, [r6, #12]
 800d356:	4620      	mov	r0, r4
 800d358:	4798      	blx	r3
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f43f af24 	beq.w	800d1a8 <get_sof+0x1c>
 800d360:	e9d6 5900 	ldrd	r5, r9, [r6]
 800d364:	782b      	ldrb	r3, [r5, #0]
 800d366:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d36a:	f1b9 0301 	subs.w	r3, r9, #1
 800d36e:	d029      	beq.n	800d3c4 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d370:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800d372:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d374:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800d376:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800d37a:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800d37e:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800d382:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d386:	d026      	beq.n	800d3d6 <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d388:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d38a:	f103 39ff 	add.w	r9, r3, #4294967295
 800d38e:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d392:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800d396:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d398:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d39c:	4620      	mov	r0, r4
 800d39e:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800d3a0:	f108 0801 	add.w	r8, r8, #1
 800d3a4:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d3a6:	619a      	str	r2, [r3, #24]
 800d3a8:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800d3ac:	61da      	str	r2, [r3, #28]
 800d3ae:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800d3b2:	621a      	str	r2, [r3, #32]
 800d3b4:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800d3b8:	f8c3 a014 	str.w	sl, [r3, #20]
 800d3bc:	625a      	str	r2, [r3, #36]	; 0x24
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	4798      	blx	r3
       ci++, compptr++) {
 800d3c2:	e779      	b.n	800d2b8 <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d3c4:	68f3      	ldr	r3, [r6, #12]
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	4798      	blx	r3
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	f43f aeec 	beq.w	800d1a8 <get_sof+0x1c>
 800d3d0:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d3d4:	e7cd      	b.n	800d372 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d3d6:	68f3      	ldr	r3, [r6, #12]
 800d3d8:	4620      	mov	r0, r4
 800d3da:	4798      	blx	r3
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	f43f aee3 	beq.w	800d1a8 <get_sof+0x1c>
 800d3e2:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d3e6:	e7d0      	b.n	800d38a <get_sof+0x1fe>

0800d3e8 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800d3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800d3ec:	2a0d      	cmp	r2, #13
{
 800d3ee:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d3f0:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800d3f2:	eb02 0603 	add.w	r6, r2, r3
{
 800d3f6:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d3f8:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800d3fa:	d96d      	bls.n	800d4d8 <examine_app0+0xf0>
 800d3fc:	7822      	ldrb	r2, [r4, #0]
 800d3fe:	2a4a      	cmp	r2, #74	; 0x4a
 800d400:	f040 808f 	bne.w	800d522 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d404:	7862      	ldrb	r2, [r4, #1]
 800d406:	2a46      	cmp	r2, #70	; 0x46
 800d408:	f040 808b 	bne.w	800d522 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d40c:	78a2      	ldrb	r2, [r4, #2]
 800d40e:	2a49      	cmp	r2, #73	; 0x49
 800d410:	d16a      	bne.n	800d4e8 <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800d412:	78e2      	ldrb	r2, [r4, #3]
 800d414:	2a46      	cmp	r2, #70	; 0x46
 800d416:	d167      	bne.n	800d4e8 <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800d418:	7922      	ldrb	r2, [r4, #4]
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	d164      	bne.n	800d4e8 <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800d41e:	2201      	movs	r2, #1
 800d420:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800d424:	7962      	ldrb	r2, [r4, #5]
 800d426:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800d42a:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800d42c:	f894 c006 	ldrb.w	ip, [r4, #6]
 800d430:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800d434:	79e7      	ldrb	r7, [r4, #7]
 800d436:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800d43a:	f894 e008 	ldrb.w	lr, [r4, #8]
 800d43e:	7a67      	ldrb	r7, [r4, #9]
 800d440:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d444:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800d448:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800d44c:	7ae7      	ldrb	r7, [r4, #11]
 800d44e:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d452:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800d456:	d007      	beq.n	800d468 <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d458:	277a      	movs	r7, #122	; 0x7a
 800d45a:	f8c1 c01c 	str.w	ip, [r1, #28]
 800d45e:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800d462:	f04f 31ff 	mov.w	r1, #4294967295
 800d466:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	2101      	movs	r1, #1
 800d46c:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800d470:	4628      	mov	r0, r5
 800d472:	619a      	str	r2, [r3, #24]
 800d474:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800d478:	61da      	str	r2, [r3, #28]
 800d47a:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800d47e:	621a      	str	r2, [r3, #32]
 800d480:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800d484:	625a      	str	r2, [r3, #36]	; 0x24
 800d486:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800d48a:	629a      	str	r2, [r3, #40]	; 0x28
 800d48c:	2259      	movs	r2, #89	; 0x59
 800d48e:	615a      	str	r2, [r3, #20]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800d494:	7b23      	ldrb	r3, [r4, #12]
 800d496:	7b62      	ldrb	r2, [r4, #13]
 800d498:	4313      	orrs	r3, r2
 800d49a:	d00a      	beq.n	800d4b2 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	225c      	movs	r2, #92	; 0x5c
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	615a      	str	r2, [r3, #20]
 800d4a6:	7b22      	ldrb	r2, [r4, #12]
 800d4a8:	619a      	str	r2, [r3, #24]
 800d4aa:	7b62      	ldrb	r2, [r4, #13]
 800d4ac:	61da      	str	r2, [r3, #28]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d4b2:	7b23      	ldrb	r3, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800d4b4:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d4b6:	7b62      	ldrb	r2, [r4, #13]
 800d4b8:	fb13 f302 	smulbb	r3, r3, r2
 800d4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (totallen !=
 800d4c0:	42b3      	cmp	r3, r6
 800d4c2:	d030      	beq.n	800d526 <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800d4c4:	682b      	ldr	r3, [r5, #0]
 800d4c6:	225a      	movs	r2, #90	; 0x5a
 800d4c8:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800d4cc:	685b      	ldr	r3, [r3, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	2101      	movs	r1, #1
  }
}
 800d4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d4d6:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800d4d8:	2a05      	cmp	r2, #5
 800d4da:	d922      	bls.n	800d522 <examine_app0+0x13a>
 800d4dc:	7822      	ldrb	r2, [r4, #0]
 800d4de:	2a4a      	cmp	r2, #74	; 0x4a
 800d4e0:	d11f      	bne.n	800d522 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d4e2:	7862      	ldrb	r2, [r4, #1]
 800d4e4:	2a46      	cmp	r2, #70	; 0x46
 800d4e6:	d11c      	bne.n	800d522 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d4e8:	78a2      	ldrb	r2, [r4, #2]
 800d4ea:	2a58      	cmp	r2, #88	; 0x58
 800d4ec:	d119      	bne.n	800d522 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800d4ee:	78e2      	ldrb	r2, [r4, #3]
 800d4f0:	2a58      	cmp	r2, #88	; 0x58
 800d4f2:	d116      	bne.n	800d522 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800d4f4:	7922      	ldrb	r2, [r4, #4]
 800d4f6:	b9a2      	cbnz	r2, 800d522 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800d4f8:	7962      	ldrb	r2, [r4, #5]
 800d4fa:	2a11      	cmp	r2, #17
 800d4fc:	d007      	beq.n	800d50e <examine_app0+0x126>
 800d4fe:	2a13      	cmp	r2, #19
 800d500:	d007      	beq.n	800d512 <examine_app0+0x12a>
 800d502:	2a10      	cmp	r2, #16
 800d504:	d107      	bne.n	800d516 <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800d506:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d508:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800d50c:	e7df      	b.n	800d4ce <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800d50e:	226f      	movs	r2, #111	; 0x6f
 800d510:	e7fa      	b.n	800d508 <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800d512:	2270      	movs	r2, #112	; 0x70
 800d514:	e7f8      	b.n	800d508 <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800d516:	225b      	movs	r2, #91	; 0x5b
 800d518:	614a      	str	r2, [r1, #20]
 800d51a:	7962      	ldrb	r2, [r4, #5]
 800d51c:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800d520:	e7d5      	b.n	800d4ce <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d522:	224f      	movs	r2, #79	; 0x4f
 800d524:	e7f0      	b.n	800d508 <examine_app0+0x120>
}
 800d526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d52a <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800d52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800d52e:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d530:	6804      	ldr	r4, [r0, #0]
{
 800d532:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d534:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800d536:	d92b      	bls.n	800d590 <examine_app14+0x66>
 800d538:	780f      	ldrb	r7, [r1, #0]
 800d53a:	2f41      	cmp	r7, #65	; 0x41
 800d53c:	d128      	bne.n	800d590 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800d53e:	784f      	ldrb	r7, [r1, #1]
 800d540:	2f64      	cmp	r7, #100	; 0x64
 800d542:	d125      	bne.n	800d590 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800d544:	788f      	ldrb	r7, [r1, #2]
 800d546:	2f6f      	cmp	r7, #111	; 0x6f
 800d548:	d122      	bne.n	800d590 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800d54a:	78cf      	ldrb	r7, [r1, #3]
 800d54c:	2f62      	cmp	r7, #98	; 0x62
 800d54e:	d11f      	bne.n	800d590 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800d550:	790f      	ldrb	r7, [r1, #4]
 800d552:	2f65      	cmp	r7, #101	; 0x65
 800d554:	d11c      	bne.n	800d590 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800d556:	79cb      	ldrb	r3, [r1, #7]
 800d558:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d55a:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800d55c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d560:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800d562:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d566:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800d56a:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800d56c:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d56e:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800d572:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d576:	234e      	movs	r3, #78	; 0x4e
 800d578:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800d57c:	6163      	str	r3, [r4, #20]
 800d57e:	2101      	movs	r1, #1
 800d580:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800d582:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800d584:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800d588:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800d590:	2150      	movs	r1, #80	; 0x50
 800d592:	441a      	add	r2, r3
 800d594:	4628      	mov	r0, r5
 800d596:	4633      	mov	r3, r6
 800d598:	6161      	str	r1, [r4, #20]
 800d59a:	2101      	movs	r1, #1
 800d59c:	61a2      	str	r2, [r4, #24]
}
 800d59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800d5a2:	4718      	bx	r3

0800d5a4 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800d5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800d5a8:	6986      	ldr	r6, [r0, #24]
{
 800d5aa:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800d5ac:	e9d6 4700 	ldrd	r4, r7, [r6]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d5b0:	b947      	cbnz	r7, 800d5c4 <get_interesting_appn+0x20>
 800d5b2:	68f3      	ldr	r3, [r6, #12]
 800d5b4:	4798      	blx	r3
 800d5b6:	b918      	cbnz	r0, 800d5c0 <get_interesting_appn+0x1c>
 800d5b8:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800d5ba:	b004      	add	sp, #16
 800d5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d5c0:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d5c4:	f894 9000 	ldrb.w	r9, [r4]
 800d5c8:	3f01      	subs	r7, #1
 800d5ca:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800d5ce:	d02e      	beq.n	800d62e <get_interesting_appn+0x8a>
 800d5d0:	3401      	adds	r4, #1
 800d5d2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d5d6:	3f01      	subs	r7, #1
 800d5d8:	444d      	add	r5, r9
  length -= 2;
 800d5da:	3d02      	subs	r5, #2
  if (length >= APPN_DATA_LEN)
 800d5dc:	2d0d      	cmp	r5, #13
 800d5de:	dc2e      	bgt.n	800d63e <get_interesting_appn+0x9a>
  else if (length > 0)
 800d5e0:	2d00      	cmp	r5, #0
 800d5e2:	dd2f      	ble.n	800d644 <get_interesting_appn+0xa0>
    numtoread = (unsigned int) length;
 800d5e4:	46a9      	mov	r9, r5
  for (i = 0; i < numtoread; i++)
 800d5e6:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800d5ea:	b937      	cbnz	r7, 800d5fa <get_interesting_appn+0x56>
 800d5ec:	68f3      	ldr	r3, [r6, #12]
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	4798      	blx	r3
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d0e0      	beq.n	800d5b8 <get_interesting_appn+0x14>
 800d5f6:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d5fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d5fe:	3f01      	subs	r7, #1
 800d600:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800d604:	f10a 0a01 	add.w	sl, sl, #1
 800d608:	45d1      	cmp	r9, sl
 800d60a:	d1ee      	bne.n	800d5ea <get_interesting_appn+0x46>
  switch (cinfo->unread_marker) {
 800d60c:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800d610:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800d614:	2ae0      	cmp	r2, #224	; 0xe0
 800d616:	d018      	beq.n	800d64a <get_interesting_appn+0xa6>
 800d618:	2aee      	cmp	r2, #238	; 0xee
 800d61a:	d028      	beq.n	800d66e <get_interesting_appn+0xca>
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800d61c:	f8d8 3000 	ldr.w	r3, [r8]
 800d620:	2146      	movs	r1, #70	; 0x46
 800d622:	4640      	mov	r0, r8
 800d624:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4798      	blx	r3
    break;
 800d62c:	e013      	b.n	800d656 <get_interesting_appn+0xb2>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d62e:	68f3      	ldr	r3, [r6, #12]
 800d630:	4640      	mov	r0, r8
 800d632:	4798      	blx	r3
 800d634:	2800      	cmp	r0, #0
 800d636:	d0bf      	beq.n	800d5b8 <get_interesting_appn+0x14>
 800d638:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d63c:	e7c9      	b.n	800d5d2 <get_interesting_appn+0x2e>
    numtoread = APPN_DATA_LEN;
 800d63e:	f04f 090e 	mov.w	r9, #14
 800d642:	e7d0      	b.n	800d5e6 <get_interesting_appn+0x42>
    numtoread = 0;
 800d644:	f04f 0900 	mov.w	r9, #0
 800d648:	e7e0      	b.n	800d60c <get_interesting_appn+0x68>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800d64a:	462b      	mov	r3, r5
 800d64c:	464a      	mov	r2, r9
 800d64e:	4669      	mov	r1, sp
 800d650:	4640      	mov	r0, r8
 800d652:	f7ff fec9 	bl	800d3e8 <examine_app0>
  if (length > 0)
 800d656:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800d658:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800d65c:	dd05      	ble.n	800d66a <get_interesting_appn+0xc6>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800d65e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d662:	4629      	mov	r1, r5
 800d664:	4640      	mov	r0, r8
 800d666:	691b      	ldr	r3, [r3, #16]
 800d668:	4798      	blx	r3
  return TRUE;
 800d66a:	2001      	movs	r0, #1
 800d66c:	e7a5      	b.n	800d5ba <get_interesting_appn+0x16>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800d66e:	462b      	mov	r3, r5
 800d670:	464a      	mov	r2, r9
 800d672:	4669      	mov	r1, sp
 800d674:	4640      	mov	r0, r8
 800d676:	f7ff ff58 	bl	800d52a <examine_app14>
    break;
 800d67a:	e7ec      	b.n	800d656 <get_interesting_appn+0xb2>

0800d67c <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800d67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800d680:	6984      	ldr	r4, [r0, #24]
{
 800d682:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800d684:	e9d4 5300 	ldrd	r5, r3, [r4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d688:	b93b      	cbnz	r3, 800d69a <skip_variable+0x1e>
 800d68a:	68e3      	ldr	r3, [r4, #12]
 800d68c:	4798      	blx	r3
 800d68e:	b910      	cbnz	r0, 800d696 <skip_variable+0x1a>
 800d690:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800d692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d696:	e9d4 5300 	ldrd	r5, r3, [r4]
 800d69a:	f895 9000 	ldrb.w	r9, [r5]
 800d69e:	f1b3 0801 	subs.w	r8, r3, #1
 800d6a2:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800d6a6:	d01c      	beq.n	800d6e2 <skip_variable+0x66>
 800d6a8:	3501      	adds	r5, #1
 800d6aa:	f815 6b01 	ldrb.w	r6, [r5], #1
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d6ae:	235d      	movs	r3, #93	; 0x5d
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d6b4:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	6153      	str	r3, [r2, #20]
  length -= 2;
 800d6ba:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d6bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800d6c0:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800d6c4:	6853      	ldr	r3, [r2, #4]
 800d6c6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d6c8:	f108 33ff 	add.w	r3, r8, #4294967295
  if (length > 0)
 800d6cc:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800d6ce:	6025      	str	r5, [r4, #0]
 800d6d0:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800d6d2:	dd04      	ble.n	800d6de <skip_variable+0x62>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4638      	mov	r0, r7
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	4798      	blx	r3
  return TRUE;
 800d6de:	2001      	movs	r0, #1
 800d6e0:	e7d7      	b.n	800d692 <skip_variable+0x16>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d6e2:	68e3      	ldr	r3, [r4, #12]
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	4798      	blx	r3
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d0d1      	beq.n	800d690 <skip_variable+0x14>
 800d6ec:	e9d4 5800 	ldrd	r5, r8, [r4]
 800d6f0:	e7db      	b.n	800d6aa <skip_variable+0x2e>

0800d6f2 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800d6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800d6f6:	6986      	ldr	r6, [r0, #24]
{
 800d6f8:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800d6fa:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800d6fe:	b987      	cbnz	r7, 800d722 <next_marker+0x30>
 800d700:	68f3      	ldr	r3, [r6, #12]
 800d702:	4640      	mov	r0, r8
 800d704:	4798      	blx	r3
 800d706:	b950      	cbnz	r0, 800d71e <next_marker+0x2c>
 800d708:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800d70e:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800d712:	6993      	ldr	r3, [r2, #24]
 800d714:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800d716:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800d718:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d71c:	e7ef      	b.n	800d6fe <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800d71e:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d722:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d726:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800d728:	2bff      	cmp	r3, #255	; 0xff
 800d72a:	d1f0      	bne.n	800d70e <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800d72c:	b937      	cbnz	r7, 800d73c <next_marker+0x4a>
 800d72e:	68f3      	ldr	r3, [r6, #12]
 800d730:	4640      	mov	r0, r8
 800d732:	4798      	blx	r3
 800d734:	2800      	cmp	r0, #0
 800d736:	d0e7      	beq.n	800d708 <next_marker+0x16>
 800d738:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d73c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d740:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800d742:	2dff      	cmp	r5, #255	; 0xff
 800d744:	d0f2      	beq.n	800d72c <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800d746:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800d74a:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800d74c:	b90d      	cbnz	r5, 800d752 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800d74e:	3302      	adds	r3, #2
 800d750:	e7e1      	b.n	800d716 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800d752:	b173      	cbz	r3, 800d772 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800d754:	f8d8 2000 	ldr.w	r2, [r8]
 800d758:	2177      	movs	r1, #119	; 0x77
 800d75a:	4640      	mov	r0, r8
 800d75c:	61d5      	str	r5, [r2, #28]
 800d75e:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d762:	6853      	ldr	r3, [r2, #4]
 800d764:	f04f 31ff 	mov.w	r1, #4294967295
 800d768:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800d76a:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800d76e:	2200      	movs	r2, #0
 800d770:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800d772:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800d776:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800d778:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800d77c:	e7c5      	b.n	800d70a <next_marker+0x18>

0800d77e <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800d77e:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800d782:	b510      	push	{r4, lr}
 800d784:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800d786:	b1e3      	cbz	r3, 800d7c2 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800d788:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800d78c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800d790:	6959      	ldr	r1, [r3, #20]
 800d792:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800d796:	429a      	cmp	r2, r3
 800d798:	d119      	bne.n	800d7ce <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	2264      	movs	r2, #100	; 0x64
 800d79e:	4620      	mov	r0, r4
 800d7a0:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	2103      	movs	r1, #3
 800d7a8:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800d7b0:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800d7b4:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800d7b6:	6953      	ldr	r3, [r2, #20]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	f003 0307 	and.w	r3, r3, #7
 800d7be:	6153      	str	r3, [r2, #20]
  return TRUE;
 800d7c0:	e004      	b.n	800d7cc <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800d7c2:	f7ff ff96 	bl	800d6f2 <next_marker>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d1de      	bne.n	800d788 <read_restart_marker+0xa>
      return FALSE;
 800d7ca:	2000      	movs	r0, #0
}
 800d7cc:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800d7ce:	69a3      	ldr	r3, [r4, #24]
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	4798      	blx	r3
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d1ea      	bne.n	800d7b0 <read_restart_marker+0x32>
 800d7da:	e7f6      	b.n	800d7ca <read_restart_marker+0x4c>

0800d7dc <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800d7dc:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800d7de:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800d7e2:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800d7e6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800d7ea:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800d7ee:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800d7f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800d7f4:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800d7f8:	4770      	bx	lr

0800d7fa <get_dht>:
{
 800d7fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800d7fe:	6987      	ldr	r7, [r0, #24]
{
 800d800:	b0c9      	sub	sp, #292	; 0x124
 800d802:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800d804:	e9d7 4600 	ldrd	r4, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d808:	b946      	cbnz	r6, 800d81c <get_dht+0x22>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	4798      	blx	r3
 800d80e:	b918      	cbnz	r0, 800d818 <get_dht+0x1e>
 800d810:	2000      	movs	r0, #0
}
 800d812:	b049      	add	sp, #292	; 0x124
 800d814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d818:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d81c:	f894 8000 	ldrb.w	r8, [r4]
 800d820:	3e01      	subs	r6, #1
 800d822:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800d826:	d018      	beq.n	800d85a <get_dht+0x60>
 800d828:	3401      	adds	r4, #1
 800d82a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800d82e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800d830:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d834:	44c1      	add	r9, r8
  length -= 2;
 800d836:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800d83a:	f1b9 0f10 	cmp.w	r9, #16
 800d83e:	dc14      	bgt.n	800d86a <get_dht+0x70>
  if (length != 0)
 800d840:	f1b9 0f00 	cmp.w	r9, #0
 800d844:	d005      	beq.n	800d852 <get_dht+0x58>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d846:	682b      	ldr	r3, [r5, #0]
 800d848:	220c      	movs	r2, #12
 800d84a:	4628      	mov	r0, r5
 800d84c:	615a      	str	r2, [r3, #20]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4798      	blx	r3
  return TRUE;
 800d852:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800d854:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800d858:	e7db      	b.n	800d812 <get_dht+0x18>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	4628      	mov	r0, r5
 800d85e:	4798      	blx	r3
 800d860:	2800      	cmp	r0, #0
 800d862:	d0d5      	beq.n	800d810 <get_dht+0x16>
 800d864:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d868:	e7df      	b.n	800d82a <get_dht+0x30>
    INPUT_BYTE(cinfo, index, return FALSE);
 800d86a:	b936      	cbnz	r6, 800d87a <get_dht+0x80>
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	4628      	mov	r0, r5
 800d870:	4790      	blx	r2
 800d872:	2800      	cmp	r0, #0
 800d874:	d0cc      	beq.n	800d810 <get_dht+0x16>
 800d876:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d87a:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800d87e:	2152      	movs	r1, #82	; 0x52
 800d880:	682a      	ldr	r2, [r5, #0]
 800d882:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800d884:	f8cd 8000 	str.w	r8, [sp]
 800d888:	3e01      	subs	r6, #1
    count = 0;
 800d88a:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800d88e:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800d892:	6852      	ldr	r2, [r2, #4]
 800d894:	2101      	movs	r1, #1
 800d896:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800d898:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800d89a:	b946      	cbnz	r6, 800d8ae <get_dht+0xb4>
 800d89c:	68f9      	ldr	r1, [r7, #12]
 800d89e:	4628      	mov	r0, r5
 800d8a0:	9201      	str	r2, [sp, #4]
 800d8a2:	4788      	blx	r1
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d0b3      	beq.n	800d810 <get_dht+0x16>
 800d8a8:	9a01      	ldr	r2, [sp, #4]
 800d8aa:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b2:	3e01      	subs	r6, #1
 800d8b4:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800d8b8:	3201      	adds	r2, #1
      count += bits[i];
 800d8ba:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800d8bc:	2a11      	cmp	r2, #17
 800d8be:	d1ec      	bne.n	800d89a <get_dht+0xa0>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d8c0:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800d8c2:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d8c6:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800d8ca:	f04f 0958 	mov.w	r9, #88	; 0x58
 800d8ce:	4628      	mov	r0, r5
    length -= 1 + 16;
 800d8d0:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d8d2:	6191      	str	r1, [r2, #24]
 800d8d4:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800d8d8:	f8c2 9014 	str.w	r9, [r2, #20]
 800d8dc:	61d1      	str	r1, [r2, #28]
 800d8de:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800d8e2:	6211      	str	r1, [r2, #32]
 800d8e4:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800d8e8:	6251      	str	r1, [r2, #36]	; 0x24
 800d8ea:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800d8ee:	6291      	str	r1, [r2, #40]	; 0x28
 800d8f0:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800d8f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 800d8f6:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800d8fa:	6311      	str	r1, [r2, #48]	; 0x30
 800d8fc:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800d900:	6351      	str	r1, [r2, #52]	; 0x34
 800d902:	2102      	movs	r1, #2
 800d904:	6852      	ldr	r2, [r2, #4]
 800d906:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d908:	682a      	ldr	r2, [r5, #0]
 800d90a:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800d90e:	4628      	mov	r0, r5
 800d910:	f8c2 9014 	str.w	r9, [r2, #20]
 800d914:	6191      	str	r1, [r2, #24]
 800d916:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800d91a:	61d1      	str	r1, [r2, #28]
 800d91c:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800d920:	6211      	str	r1, [r2, #32]
 800d922:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800d926:	6251      	str	r1, [r2, #36]	; 0x24
 800d928:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800d92c:	6291      	str	r1, [r2, #40]	; 0x28
 800d92e:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800d932:	62d1      	str	r1, [r2, #44]	; 0x2c
 800d934:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800d938:	6311      	str	r1, [r2, #48]	; 0x30
 800d93a:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800d93e:	6351      	str	r1, [r2, #52]	; 0x34
 800d940:	2102      	movs	r1, #2
 800d942:	6852      	ldr	r2, [r2, #4]
 800d944:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800d946:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800d94a:	dc02      	bgt.n	800d952 <get_dht+0x158>
 800d94c:	9b01      	ldr	r3, [sp, #4]
 800d94e:	4553      	cmp	r3, sl
 800d950:	da05      	bge.n	800d95e <get_dht+0x164>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d952:	682a      	ldr	r2, [r5, #0]
 800d954:	2109      	movs	r1, #9
 800d956:	4628      	mov	r0, r5
 800d958:	6151      	str	r1, [r2, #20]
 800d95a:	6812      	ldr	r2, [r2, #0]
 800d95c:	4790      	blx	r2
 800d95e:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800d962:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800d964:	45d1      	cmp	r9, sl
 800d966:	d13f      	bne.n	800d9e8 <get_dht+0x1ee>
    if (index & 0x10) {		/* AC table definition */
 800d968:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800d96c:	9b01      	ldr	r3, [sp, #4]
 800d96e:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800d972:	bf17      	itett	ne
 800d974:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800d978:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800d97c:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800d980:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800d982:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800d984:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d906      	bls.n	800d99a <get_dht+0x1a0>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800d98c:	682a      	ldr	r2, [r5, #0]
 800d98e:	211f      	movs	r1, #31
 800d990:	4628      	mov	r0, r5
 800d992:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d996:	6812      	ldr	r2, [r2, #0]
 800d998:	4790      	blx	r2
    if (*htblptr == NULL)
 800d99a:	f8d8 2000 	ldr.w	r2, [r8]
 800d99e:	b922      	cbnz	r2, 800d9aa <get_dht+0x1b0>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	f7fb fbb5 	bl	8009110 <jpeg_alloc_huff_table>
 800d9a6:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	46de      	mov	lr, fp
 800d9ae:	f10d 0a1c 	add.w	sl, sp, #28
 800d9b2:	f88b 2000 	strb.w	r2, [fp]
 800d9b6:	f8d8 2000 	ldr.w	r2, [r8]
 800d9ba:	46f4      	mov	ip, lr
 800d9bc:	3208      	adds	r2, #8
 800d9be:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800d9c2:	45d4      	cmp	ip, sl
 800d9c4:	f842 0c08 	str.w	r0, [r2, #-8]
 800d9c8:	f842 1c04 	str.w	r1, [r2, #-4]
 800d9cc:	46e6      	mov	lr, ip
 800d9ce:	d1f4      	bne.n	800d9ba <get_dht+0x1c0>
 800d9d0:	f89c 1000 	ldrb.w	r1, [ip]
 800d9d4:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800d9d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9da:	f8d8 0000 	ldr.w	r0, [r8]
 800d9de:	a908      	add	r1, sp, #32
 800d9e0:	3011      	adds	r0, #17
 800d9e2:	f01c f9ba 	bl	8029d5a <memcpy>
 800d9e6:	e728      	b.n	800d83a <get_dht+0x40>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800d9e8:	b946      	cbnz	r6, 800d9fc <get_dht+0x202>
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	4790      	blx	r2
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	f43f af0d 	beq.w	800d810 <get_dht+0x16>
 800d9f6:	a908      	add	r1, sp, #32
 800d9f8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d9fc:	f814 2b01 	ldrb.w	r2, [r4], #1
 800da00:	3e01      	subs	r6, #1
 800da02:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800da06:	f109 0901 	add.w	r9, r9, #1
 800da0a:	e7ab      	b.n	800d964 <get_dht+0x16a>

0800da0c <read_markers>:
{
 800da0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da10:	4604      	mov	r4, r0
 800da12:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800da14:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800da18:	bb5b      	cbnz	r3, 800da72 <read_markers+0x66>
      if (! cinfo->marker->saw_SOI) {
 800da1a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d17b      	bne.n	800db1c <read_markers+0x110>
  INPUT_VARS(cinfo);
 800da24:	69a7      	ldr	r7, [r4, #24]
 800da26:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_BYTE(cinfo, c, return FALSE);
 800da2a:	b933      	cbnz	r3, 800da3a <read_markers+0x2e>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4620      	mov	r0, r4
 800da30:	4798      	blx	r3
 800da32:	2800      	cmp	r0, #0
 800da34:	d077      	beq.n	800db26 <read_markers+0x11a>
 800da36:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800da3a:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800da3c:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800da40:	d065      	beq.n	800db0e <read_markers+0x102>
  INPUT_BYTE(cinfo, c, return FALSE);
 800da42:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800da44:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800da48:	f103 36ff 	add.w	r6, r3, #4294967295
 800da4c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800da50:	d102      	bne.n	800da58 <read_markers+0x4c>
 800da52:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800da56:	d008      	beq.n	800da6a <read_markers+0x5e>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	2237      	movs	r2, #55	; 0x37
 800da5c:	4620      	mov	r0, r4
 800da5e:	f8c3 901c 	str.w	r9, [r3, #28]
 800da62:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800da6a:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800da6e:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800da72:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800da76:	2b01      	cmp	r3, #1
 800da78:	f000 83ba 	beq.w	800e1f0 <read_markers+0x7e4>
 800da7c:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800da80:	2a3e      	cmp	r2, #62	; 0x3e
 800da82:	f200 83c2 	bhi.w	800e20a <read_markers+0x7fe>
 800da86:	2a3e      	cmp	r2, #62	; 0x3e
 800da88:	f200 83bf 	bhi.w	800e20a <read_markers+0x7fe>
 800da8c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800da90:	0094008b 	.word	0x0094008b
 800da94:	00a00097 	.word	0x00a00097
 800da98:	00a00232 	.word	0x00a00232
 800da9c:	00a000a0 	.word	0x00a000a0
 800daa0:	009b00a0 	.word	0x009b00a0
 800daa4:	00a0009d 	.word	0x00a0009d
 800daa8:	00a001b9 	.word	0x00a001b9
 800daac:	00a000a0 	.word	0x00a000a0
 800dab0:	03b003b0 	.word	0x03b003b0
 800dab4:	03b003b0 	.word	0x03b003b0
 800dab8:	03b003b0 	.word	0x03b003b0
 800dabc:	03b003b0 	.word	0x03b003b0
 800dac0:	01ad004d 	.word	0x01ad004d
 800dac4:	023600a8 	.word	0x023600a8
 800dac8:	035203b9 	.word	0x035203b9
 800dacc:	03bd03bd 	.word	0x03bd03bd
 800dad0:	03a403a4 	.word	0x03a403a4
 800dad4:	03a403a4 	.word	0x03a403a4
 800dad8:	03a403a4 	.word	0x03a403a4
 800dadc:	03a403a4 	.word	0x03a403a4
 800dae0:	03a403a4 	.word	0x03a403a4
 800dae4:	03a403a4 	.word	0x03a403a4
 800dae8:	03a403a4 	.word	0x03a403a4
 800daec:	03a403a4 	.word	0x03a403a4
 800daf0:	03bd03bd 	.word	0x03bd03bd
 800daf4:	03bd03bd 	.word	0x03bd03bd
 800daf8:	03bd03bd 	.word	0x03bd03bd
 800dafc:	03bd03bd 	.word	0x03bd03bd
 800db00:	03bd03bd 	.word	0x03bd03bd
 800db04:	03bd03bd 	.word	0x03bd03bd
 800db08:	03bd03bd 	.word	0x03bd03bd
 800db0c:	03ac      	.short	0x03ac
  INPUT_BYTE(cinfo, c2, return FALSE);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	4620      	mov	r0, r4
 800db12:	4798      	blx	r3
 800db14:	b138      	cbz	r0, 800db26 <read_markers+0x11a>
 800db16:	e9d7 5300 	ldrd	r5, r3, [r7]
 800db1a:	e793      	b.n	800da44 <read_markers+0x38>
	if (! next_marker(cinfo))
 800db1c:	4620      	mov	r0, r4
 800db1e:	f7ff fde8 	bl	800d6f2 <next_marker>
 800db22:	2800      	cmp	r0, #0
 800db24:	d1a5      	bne.n	800da72 <read_markers+0x66>
	  return JPEG_SUSPENDED;
 800db26:	2000      	movs	r0, #0
 800db28:	e0ea      	b.n	800dd00 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800db2a:	6823      	ldr	r3, [r4, #0]
 800db2c:	2268      	movs	r2, #104	; 0x68
 800db2e:	2101      	movs	r1, #1
 800db30:	4620      	mov	r0, r4
 800db32:	615a      	str	r2, [r3, #20]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800db38:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	b12b      	cbz	r3, 800db4c <read_markers+0x140>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800db40:	6823      	ldr	r3, [r4, #0]
 800db42:	223f      	movs	r2, #63	; 0x3f
 800db44:	4620      	mov	r0, r4
 800db46:	615a      	str	r2, [r3, #20]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800db4c:	2210      	movs	r2, #16
 800db4e:	2100      	movs	r1, #0
 800db50:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800db54:	f01c f820 	bl	8029b98 <memset>
    cinfo->arith_dc_U[i] = 1;
 800db58:	2210      	movs	r2, #16
 800db5a:	2101      	movs	r1, #1
 800db5c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800db60:	f01c f81a 	bl	8029b98 <memset>
    cinfo->arith_ac_K[i] = 5;
 800db64:	2210      	movs	r2, #16
 800db66:	2105      	movs	r1, #5
 800db68:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800db6c:	f01c f814 	bl	8029b98 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800db70:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800db74:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800db76:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800db7a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800db7e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800db82:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800db86:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800db8a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800db8e:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800db92:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800db96:	2201      	movs	r2, #1
 800db98:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800db9c:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800dba4:	e736      	b.n	800da14 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800dba6:	2300      	movs	r3, #0
 800dba8:	2101      	movs	r1, #1
 800dbaa:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800dbac:	4620      	mov	r0, r4
 800dbae:	f7ff faed 	bl	800d18c <get_sof>
      if (! skip_variable(cinfo))
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d1f3      	bne.n	800db9e <read_markers+0x192>
 800dbb6:	e7b6      	b.n	800db26 <read_markers+0x11a>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800dbb8:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800dbba:	2200      	movs	r2, #0
 800dbbc:	e001      	b.n	800dbc2 <read_markers+0x1b6>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	e7f2      	b.n	800dbac <read_markers+0x1a0>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e7f7      	b.n	800dbba <read_markers+0x1ae>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800dbca:	2301      	movs	r3, #1
 800dbcc:	461a      	mov	r2, r3
 800dbce:	e7f8      	b.n	800dbc2 <read_markers+0x1b6>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800dbd0:	6822      	ldr	r2, [r4, #0]
 800dbd2:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800dbda:	6813      	ldr	r3, [r2, #0]
 800dbdc:	4798      	blx	r3
      break;
 800dbde:	e7de      	b.n	800db9e <read_markers+0x192>
  if (! cinfo->marker->saw_SOF)
 800dbe0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800dbe4:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800dbe6:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800dbe8:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800dbec:	b92b      	cbnz	r3, 800dbfa <read_markers+0x1ee>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	2240      	movs	r2, #64	; 0x40
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	615a      	str	r2, [r3, #20]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbfa:	b936      	cbnz	r6, 800dc0a <read_markers+0x1fe>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4620      	mov	r0, r4
 800dc00:	4798      	blx	r3
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d08f      	beq.n	800db26 <read_markers+0x11a>
 800dc06:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dc0a:	f895 9000 	ldrb.w	r9, [r5]
 800dc0e:	3e01      	subs	r6, #1
 800dc10:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800dc14:	d077      	beq.n	800dd06 <read_markers+0x2fa>
 800dc16:	3501      	adds	r5, #1
 800dc18:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800dc1c:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc1e:	44c8      	add	r8, r9
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800dc20:	d07a      	beq.n	800dd18 <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc22:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800dc24:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800dc28:	2269      	movs	r2, #105	; 0x69
 800dc2a:	6823      	ldr	r3, [r4, #0]
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800dc30:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800dc32:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800dc3a:	f109 0303 	add.w	r3, r9, #3
 800dc3e:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800dc42:	d108      	bne.n	800dc56 <read_markers+0x24a>
 800dc44:	f1b9 0f04 	cmp.w	r9, #4
 800dc48:	dc05      	bgt.n	800dc56 <read_markers+0x24a>
 800dc4a:	f1b9 0f00 	cmp.w	r9, #0
 800dc4e:	d108      	bne.n	800dc62 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800dc50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800dc54:	b92b      	cbnz	r3, 800dc62 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	220c      	movs	r2, #12
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	615a      	str	r2, [r3, #20]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800dc62:	f504 73a8 	add.w	r3, r4, #336	; 0x150
  for (i = 0; i < n; i++) {
 800dc66:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800dc6a:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	45d1      	cmp	r9, sl
 800dc72:	dc5a      	bgt.n	800dd2a <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc74:	b93e      	cbnz	r6, 800dc86 <read_markers+0x27a>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	4620      	mov	r0, r4
 800dc7a:	4798      	blx	r3
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	f43f af52 	beq.w	800db26 <read_markers+0x11a>
 800dc82:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dc86:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc88:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc8a:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc8e:	f000 809a 	beq.w	800ddc6 <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc92:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc94:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc96:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc98:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc9c:	f000 809c 	beq.w	800ddd8 <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800dca0:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800dca2:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800dca6:	2101      	movs	r1, #1
 800dca8:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800dcaa:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800dcac:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800dcae:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800dcb2:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800dcb6:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800dcba:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	619a      	str	r2, [r3, #24]
 800dcc2:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800dcc6:	61da      	str	r2, [r3, #28]
 800dcc8:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800dccc:	621a      	str	r2, [r3, #32]
 800dcce:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800dcd2:	625a      	str	r2, [r3, #36]	; 0x24
 800dcd4:	226b      	movs	r2, #107	; 0x6b
 800dcd6:	615a      	str	r2, [r3, #20]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800dcdc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dce0:	2200      	movs	r2, #0
 800dce2:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800dce4:	f1b9 0f00 	cmp.w	r9, #0
 800dce8:	d004      	beq.n	800dcf4 <read_markers+0x2e8>
 800dcea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800dcee:	3301      	adds	r3, #1
 800dcf0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800dcf4:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800dcf6:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800dcf8:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800dcfc:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800dd00:	b005      	add	sp, #20
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	4620      	mov	r0, r4
 800dd0a:	4798      	blx	r3
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f43f af0a 	beq.w	800db26 <read_markers+0x11a>
 800dd12:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dd16:	e77f      	b.n	800dc18 <read_markers+0x20c>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	4798      	blx	r3
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	f43f af01 	beq.w	800db26 <read_markers+0x11a>
 800dd24:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dd28:	e77c      	b.n	800dc24 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800dd2a:	b93e      	cbnz	r6, 800dd3c <read_markers+0x330>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4620      	mov	r0, r4
 800dd30:	4798      	blx	r3
 800dd32:	2800      	cmp	r0, #0
 800dd34:	f43f aef7 	beq.w	800db26 <read_markers+0x11a>
 800dd38:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd3c:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800dd3e:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd42:	d02f      	beq.n	800dda4 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800dd44:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800dd46:	3e01      	subs	r6, #1
 800dd48:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dd4c:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800dd50:	2000      	movs	r0, #0
 800dd52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dd54:	4290      	cmp	r0, r2
 800dd56:	db2e      	blt.n	800ddb6 <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800dd58:	6821      	ldr	r1, [r4, #0]
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	9302      	str	r3, [sp, #8]
 800dd5e:	2304      	movs	r3, #4
 800dd60:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800dd64:	6809      	ldr	r1, [r1, #0]
 800dd66:	4788      	blx	r1
 800dd68:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800dd6a:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800dd6c:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800dd6e:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800dd72:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800dd74:	f842 8f04 	str.w	r8, [r2, #4]!
  for (i = 0; i < n; i++) {
 800dd78:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800dd7c:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800dd80:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800dd82:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800dd86:	f8c1 b018 	str.w	fp, [r1, #24]
 800dd8a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800dd8e:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800dd90:	61cb      	str	r3, [r1, #28]
 800dd92:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dd96:	620b      	str	r3, [r1, #32]
 800dd98:	236a      	movs	r3, #106	; 0x6a
 800dd9a:	614b      	str	r3, [r1, #20]
 800dd9c:	684b      	ldr	r3, [r1, #4]
 800dd9e:	2101      	movs	r1, #1
 800dda0:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800dda2:	e765      	b.n	800dc70 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	4620      	mov	r0, r4
 800dda8:	4798      	blx	r3
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	f43f aebb 	beq.w	800db26 <read_markers+0x11a>
 800ddb0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ddb4:	e7c7      	b.n	800dd46 <read_markers+0x33a>
      if (cc == compptr->component_id)
 800ddb6:	f8d8 1000 	ldr.w	r1, [r8]
 800ddba:	458b      	cmp	fp, r1
 800ddbc:	d0d5      	beq.n	800dd6a <read_markers+0x35e>
	 ci++, compptr++) {
 800ddbe:	3001      	adds	r0, #1
 800ddc0:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800ddc4:	e7c6      	b.n	800dd54 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	4620      	mov	r0, r4
 800ddca:	4798      	blx	r3
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	f43f aeaa 	beq.w	800db26 <read_markers+0x11a>
 800ddd2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ddd6:	e75d      	b.n	800dc94 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	4620      	mov	r0, r4
 800dddc:	4798      	blx	r3
 800ddde:	2800      	cmp	r0, #0
 800dde0:	f43f aea1 	beq.w	800db26 <read_markers+0x11a>
 800dde4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dde8:	e75b      	b.n	800dca2 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800ddea:	6823      	ldr	r3, [r4, #0]
 800ddec:	2257      	movs	r2, #87	; 0x57
 800ddee:	4620      	mov	r0, r4
 800ddf0:	2101      	movs	r1, #1
 800ddf2:	615a      	str	r2, [r3, #20]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800ddf8:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800ddfa:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800ddfc:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800de00:	e77e      	b.n	800dd00 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800de02:	69a7      	ldr	r7, [r4, #24]
 800de04:	e9d7 5600 	ldrd	r5, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de08:	b93e      	cbnz	r6, 800de1a <read_markers+0x40e>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	4620      	mov	r0, r4
 800de0e:	4798      	blx	r3
 800de10:	2800      	cmp	r0, #0
 800de12:	f43f ae88 	beq.w	800db26 <read_markers+0x11a>
 800de16:	e9d7 5600 	ldrd	r5, r6, [r7]
 800de1a:	f895 8000 	ldrb.w	r8, [r5]
 800de1e:	3e01      	subs	r6, #1
 800de20:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800de24:	d015      	beq.n	800de52 <read_markers+0x446>
 800de26:	3501      	adds	r5, #1
 800de28:	f815 9b01 	ldrb.w	r9, [r5], #1
 800de2c:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800de2e:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de32:	44c1      	add	r9, r8
  length -= 2;
 800de34:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800de38:	f1b9 0f00 	cmp.w	r9, #0
 800de3c:	dc12      	bgt.n	800de64 <read_markers+0x458>
  if (length != 0)
 800de3e:	d005      	beq.n	800de4c <read_markers+0x440>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	220c      	movs	r2, #12
 800de44:	4620      	mov	r0, r4
 800de46:	615a      	str	r2, [r3, #20]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800de4c:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800de4e:	607e      	str	r6, [r7, #4]
  return TRUE;
 800de50:	e6a5      	b.n	800db9e <read_markers+0x192>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	4620      	mov	r0, r4
 800de56:	4798      	blx	r3
 800de58:	2800      	cmp	r0, #0
 800de5a:	f43f ae64 	beq.w	800db26 <read_markers+0x11a>
 800de5e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800de62:	e7e1      	b.n	800de28 <read_markers+0x41c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800de64:	b93e      	cbnz	r6, 800de76 <read_markers+0x46a>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4620      	mov	r0, r4
 800de6a:	4798      	blx	r3
 800de6c:	2800      	cmp	r0, #0
 800de6e:	f43f ae5a 	beq.w	800db26 <read_markers+0x11a>
 800de72:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800de76:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800de78:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800de7c:	d01f      	beq.n	800debe <read_markers+0x4b2>
    INPUT_BYTE(cinfo, index, return FALSE);
 800de7e:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800de80:	6822      	ldr	r2, [r4, #0]
 800de82:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800de84:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800de88:	2101      	movs	r1, #1
 800de8a:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800de8c:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800de8e:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800de92:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800de96:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800de9a:	6852      	ldr	r2, [r2, #4]
 800de9c:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800de9e:	f1b8 0f1f 	cmp.w	r8, #31
 800dea2:	d905      	bls.n	800deb0 <read_markers+0x4a4>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800dea4:	6822      	ldr	r2, [r4, #0]
 800dea6:	4620      	mov	r0, r4
 800dea8:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800deac:	6812      	ldr	r2, [r2, #0]
 800deae:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800deb0:	f1b8 0f0f 	cmp.w	r8, #15
 800deb4:	44a0      	add	r8, r4
 800deb6:	dd0b      	ble.n	800ded0 <read_markers+0x4c4>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800deb8:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800debc:	e7bc      	b.n	800de38 <read_markers+0x42c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	4620      	mov	r0, r4
 800dec2:	4798      	blx	r3
 800dec4:	2800      	cmp	r0, #0
 800dec6:	f43f ae2e 	beq.w	800db26 <read_markers+0x11a>
 800deca:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dece:	e7d7      	b.n	800de80 <read_markers+0x474>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800ded0:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800ded4:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800ded8:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800deda:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800dede:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800dee2:	d9a9      	bls.n	800de38 <read_markers+0x42c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800dee4:	6822      	ldr	r2, [r4, #0]
 800dee6:	211e      	movs	r1, #30
 800dee8:	4620      	mov	r0, r4
 800deea:	6813      	ldr	r3, [r2, #0]
 800deec:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800def0:	4798      	blx	r3
 800def2:	e7a1      	b.n	800de38 <read_markers+0x42c>
      if (! get_dht(cinfo))
 800def4:	4620      	mov	r0, r4
 800def6:	f7ff fc80 	bl	800d7fa <get_dht>
 800defa:	e65a      	b.n	800dbb2 <read_markers+0x1a6>
  INPUT_VARS(cinfo);
 800defc:	69a6      	ldr	r6, [r4, #24]
 800defe:	e9d6 5300 	ldrd	r5, r3, [r6]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df02:	b93b      	cbnz	r3, 800df14 <read_markers+0x508>
 800df04:	68f3      	ldr	r3, [r6, #12]
 800df06:	4620      	mov	r0, r4
 800df08:	4798      	blx	r3
 800df0a:	2800      	cmp	r0, #0
 800df0c:	f43f ae0b 	beq.w	800db26 <read_markers+0x11a>
 800df10:	e9d6 5300 	ldrd	r5, r3, [r6]
 800df14:	782f      	ldrb	r7, [r5, #0]
 800df16:	3b01      	subs	r3, #1
 800df18:	ea4f 2707 	mov.w	r7, r7, lsl #8
 800df1c:	d014      	beq.n	800df48 <read_markers+0x53c>
 800df1e:	3501      	adds	r5, #1
 800df20:	f815 8b01 	ldrb.w	r8, [r5], #1
 800df24:	f103 3aff 	add.w	sl, r3, #4294967295
 800df28:	44b8      	add	r8, r7
  length -= 2;
 800df2a:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800df2e:	f1b8 0f00 	cmp.w	r8, #0
 800df32:	dc12      	bgt.n	800df5a <read_markers+0x54e>
  if (length != 0)
 800df34:	d005      	beq.n	800df42 <read_markers+0x536>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800df36:	6822      	ldr	r2, [r4, #0]
 800df38:	210c      	movs	r1, #12
 800df3a:	4620      	mov	r0, r4
 800df3c:	6151      	str	r1, [r2, #20]
 800df3e:	6812      	ldr	r2, [r2, #0]
 800df40:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800df42:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800df46:	e62a      	b.n	800db9e <read_markers+0x192>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df48:	68f3      	ldr	r3, [r6, #12]
 800df4a:	4620      	mov	r0, r4
 800df4c:	4798      	blx	r3
 800df4e:	2800      	cmp	r0, #0
 800df50:	f43f ade9 	beq.w	800db26 <read_markers+0x11a>
 800df54:	e9d6 5300 	ldrd	r5, r3, [r6]
 800df58:	e7e2      	b.n	800df20 <read_markers+0x514>
    length--;
 800df5a:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800df5e:	f1ba 0f00 	cmp.w	sl, #0
 800df62:	d107      	bne.n	800df74 <read_markers+0x568>
 800df64:	68f3      	ldr	r3, [r6, #12]
 800df66:	4620      	mov	r0, r4
 800df68:	4798      	blx	r3
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f43f addb 	beq.w	800db26 <read_markers+0x11a>
 800df70:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800df74:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800df78:	2153      	movs	r1, #83	; 0x53
 800df7a:	6822      	ldr	r2, [r4, #0]
 800df7c:	4620      	mov	r0, r4
    prec = n >> 4;
 800df7e:	ea4f 1329 	mov.w	r3, r9, asr #4
 800df82:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800df86:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800df8a:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800df8c:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800df8e:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800df92:	6852      	ldr	r2, [r2, #4]
 800df94:	2101      	movs	r1, #1
 800df96:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800df98:	f019 0f0c 	tst.w	r9, #12
 800df9c:	d006      	beq.n	800dfac <read_markers+0x5a0>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800df9e:	6822      	ldr	r2, [r4, #0]
 800dfa0:	2120      	movs	r1, #32
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800dfa8:	6812      	ldr	r2, [r2, #0]
 800dfaa:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800dfac:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800dfb0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dfb4:	b922      	cbnz	r2, 800dfc0 <read_markers+0x5b4>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f7fb f8a0 	bl	80090fc <jpeg_alloc_quant_table>
 800dfbc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800dfc0:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800dfc2:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d057      	beq.n	800e07a <read_markers+0x66e>
      if (length < DCTSIZE2 * 2) {
 800dfca:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800dfce:	dc6c      	bgt.n	800e0aa <read_markers+0x69e>
 800dfd0:	f1ab 0202 	sub.w	r2, fp, #2
 800dfd4:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800dfd8:	2001      	movs	r0, #1
 800dfda:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800dfde:	4291      	cmp	r1, r2
 800dfe0:	d1fb      	bne.n	800dfda <read_markers+0x5ce>
	count = length >> 1;
 800dfe2:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800dfe6:	f1b9 0f19 	cmp.w	r9, #25
 800dfea:	d062      	beq.n	800e0b2 <read_markers+0x6a6>
 800dfec:	dc53      	bgt.n	800e096 <read_markers+0x68a>
 800dfee:	f1b9 0f09 	cmp.w	r9, #9
 800dff2:	d060      	beq.n	800e0b6 <read_markers+0x6aa>
 800dff4:	f1b9 0f10 	cmp.w	r9, #16
 800dff8:	d05f      	beq.n	800e0ba <read_markers+0x6ae>
    default:    natural_order = jpeg_natural_order;  break;
 800dffa:	4f85      	ldr	r7, [pc, #532]	; (800e210 <read_markers+0x804>)
 800dffc:	4a85      	ldr	r2, [pc, #532]	; (800e214 <read_markers+0x808>)
 800dffe:	f1b9 0f04 	cmp.w	r9, #4
 800e002:	bf18      	it	ne
 800e004:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800e006:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800e00a:	9302      	str	r3, [sp, #8]
 800e00c:	9b02      	ldr	r3, [sp, #8]
 800e00e:	42bb      	cmp	r3, r7
 800e010:	d157      	bne.n	800e0c2 <read_markers+0x6b6>
    if (cinfo->err->trace_level >= 2) {
 800e012:	6822      	ldr	r2, [r4, #0]
 800e014:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e016:	2a01      	cmp	r2, #1
 800e018:	dd26      	ble.n	800e068 <read_markers+0x65c>
 800e01a:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e01e:	275f      	movs	r7, #95	; 0x5f
 800e020:	f8bb 1000 	ldrh.w	r1, [fp]
 800e024:	4620      	mov	r0, r4
 800e026:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e028:	f10b 0b10 	add.w	fp, fp, #16
 800e02c:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e02e:	6191      	str	r1, [r2, #24]
 800e030:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800e034:	61d1      	str	r1, [r2, #28]
 800e036:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800e03a:	6211      	str	r1, [r2, #32]
 800e03c:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800e040:	6251      	str	r1, [r2, #36]	; 0x24
 800e042:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800e046:	6291      	str	r1, [r2, #40]	; 0x28
 800e048:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800e04c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e04e:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800e052:	6311      	str	r1, [r2, #48]	; 0x30
 800e054:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800e058:	6157      	str	r7, [r2, #20]
 800e05a:	6351      	str	r1, [r2, #52]	; 0x34
 800e05c:	2102      	movs	r1, #2
 800e05e:	6852      	ldr	r2, [r2, #4]
 800e060:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e062:	9b02      	ldr	r3, [sp, #8]
 800e064:	459b      	cmp	fp, r3
 800e066:	d1db      	bne.n	800e020 <read_markers+0x614>
    if (prec) length -= count;
 800e068:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800e06a:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f43f af5d 	beq.w	800df2e <read_markers+0x522>
 800e074:	eba8 0809 	sub.w	r8, r8, r9
 800e078:	e759      	b.n	800df2e <read_markers+0x522>
      if (length < DCTSIZE2) {
 800e07a:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800e07e:	dc14      	bgt.n	800e0aa <read_markers+0x69e>
 800e080:	f1ab 0202 	sub.w	r2, fp, #2
 800e084:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e088:	2001      	movs	r0, #1
 800e08a:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e08e:	4291      	cmp	r1, r2
 800e090:	d1fb      	bne.n	800e08a <read_markers+0x67e>
 800e092:	46c1      	mov	r9, r8
 800e094:	e7a7      	b.n	800dfe6 <read_markers+0x5da>
    switch (count) {
 800e096:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800e09a:	d010      	beq.n	800e0be <read_markers+0x6b2>
    default:    natural_order = jpeg_natural_order;  break;
 800e09c:	4f5d      	ldr	r7, [pc, #372]	; (800e214 <read_markers+0x808>)
 800e09e:	4b5e      	ldr	r3, [pc, #376]	; (800e218 <read_markers+0x80c>)
 800e0a0:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800e0a4:	bf08      	it	eq
 800e0a6:	461f      	moveq	r7, r3
 800e0a8:	e7ad      	b.n	800e006 <read_markers+0x5fa>
	count = DCTSIZE2;
 800e0aa:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800e0ae:	4f59      	ldr	r7, [pc, #356]	; (800e214 <read_markers+0x808>)
 800e0b0:	e7a9      	b.n	800e006 <read_markers+0x5fa>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800e0b2:	4f5a      	ldr	r7, [pc, #360]	; (800e21c <read_markers+0x810>)
 800e0b4:	e7a7      	b.n	800e006 <read_markers+0x5fa>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800e0b6:	4f5a      	ldr	r7, [pc, #360]	; (800e220 <read_markers+0x814>)
 800e0b8:	e7a5      	b.n	800e006 <read_markers+0x5fa>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800e0ba:	4f5a      	ldr	r7, [pc, #360]	; (800e224 <read_markers+0x818>)
 800e0bc:	e7a3      	b.n	800e006 <read_markers+0x5fa>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800e0be:	4f5a      	ldr	r7, [pc, #360]	; (800e228 <read_markers+0x81c>)
 800e0c0:	e7a1      	b.n	800e006 <read_markers+0x5fa>
      if (prec)
 800e0c2:	9b01      	ldr	r3, [sp, #4]
 800e0c4:	b333      	cbz	r3, 800e114 <read_markers+0x708>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e0c6:	f1ba 0f00 	cmp.w	sl, #0
 800e0ca:	d107      	bne.n	800e0dc <read_markers+0x6d0>
 800e0cc:	68f3      	ldr	r3, [r6, #12]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4798      	blx	r3
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	f43f ad27 	beq.w	800db26 <read_markers+0x11a>
 800e0d8:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e0dc:	782a      	ldrb	r2, [r5, #0]
 800e0de:	f1ba 0301 	subs.w	r3, sl, #1
 800e0e2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e0e6:	d00a      	beq.n	800e0fe <read_markers+0x6f2>
 800e0e8:	3501      	adds	r5, #1
 800e0ea:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e0ee:	f103 3aff 	add.w	sl, r3, #4294967295
 800e0f2:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800e0f4:	f857 1b04 	ldr.w	r1, [r7], #4
 800e0f8:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800e0fc:	e786      	b.n	800e00c <read_markers+0x600>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e0fe:	68f3      	ldr	r3, [r6, #12]
 800e100:	4620      	mov	r0, r4
 800e102:	9203      	str	r2, [sp, #12]
 800e104:	4798      	blx	r3
 800e106:	2800      	cmp	r0, #0
 800e108:	f43f ad0d 	beq.w	800db26 <read_markers+0x11a>
 800e10c:	9a03      	ldr	r2, [sp, #12]
 800e10e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e112:	e7ea      	b.n	800e0ea <read_markers+0x6de>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800e114:	f1ba 0f00 	cmp.w	sl, #0
 800e118:	d107      	bne.n	800e12a <read_markers+0x71e>
 800e11a:	68f3      	ldr	r3, [r6, #12]
 800e11c:	4620      	mov	r0, r4
 800e11e:	4798      	blx	r3
 800e120:	2800      	cmp	r0, #0
 800e122:	f43f ad00 	beq.w	800db26 <read_markers+0x11a>
 800e126:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e12e:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e132:	e7df      	b.n	800e0f4 <read_markers+0x6e8>
  INPUT_VARS(cinfo);
 800e134:	69a7      	ldr	r7, [r4, #24]
 800e136:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e13a:	b93b      	cbnz	r3, 800e14c <read_markers+0x740>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4620      	mov	r0, r4
 800e140:	4798      	blx	r3
 800e142:	2800      	cmp	r0, #0
 800e144:	f43f acef 	beq.w	800db26 <read_markers+0x11a>
 800e148:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e14c:	f895 8000 	ldrb.w	r8, [r5]
 800e150:	3b01      	subs	r3, #1
 800e152:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e156:	d024      	beq.n	800e1a2 <read_markers+0x796>
 800e158:	3501      	adds	r5, #1
 800e15a:	782a      	ldrb	r2, [r5, #0]
 800e15c:	1e5e      	subs	r6, r3, #1
 800e15e:	4442      	add	r2, r8
  if (length != 4)
 800e160:	2a04      	cmp	r2, #4
 800e162:	d005      	beq.n	800e170 <read_markers+0x764>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e164:	6823      	ldr	r3, [r4, #0]
 800e166:	220c      	movs	r2, #12
 800e168:	4620      	mov	r0, r4
 800e16a:	615a      	str	r2, [r3, #20]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e170:	b306      	cbz	r6, 800e1b4 <read_markers+0x7a8>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e172:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e174:	f895 9000 	ldrb.w	r9, [r5]
 800e178:	3e01      	subs	r6, #1
 800e17a:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e17e:	d022      	beq.n	800e1c6 <read_markers+0x7ba>
 800e180:	3501      	adds	r5, #1
 800e182:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e186:	2254      	movs	r2, #84	; 0x54
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e18c:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e18e:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e190:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e192:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800e19a:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800e19e:	603d      	str	r5, [r7, #0]
 800e1a0:	e655      	b.n	800de4e <read_markers+0x442>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	4798      	blx	r3
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	f43f acbc 	beq.w	800db26 <read_markers+0x11a>
 800e1ae:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e1b2:	e7d2      	b.n	800e15a <read_markers+0x74e>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	4798      	blx	r3
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f43f acb3 	beq.w	800db26 <read_markers+0x11a>
 800e1c0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e1c4:	e7d6      	b.n	800e174 <read_markers+0x768>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	4798      	blx	r3
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	f43f acaa 	beq.w	800db26 <read_markers+0x11a>
 800e1d2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e1d6:	e7d4      	b.n	800e182 <read_markers+0x776>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800e1d8:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800e1dc:	3bd8      	subs	r3, #216	; 0xd8
 800e1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	4798      	blx	r3
 800e1e6:	e4e4      	b.n	800dbb2 <read_markers+0x1a6>
 800e1e8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	e7f8      	b.n	800e1e2 <read_markers+0x7d6>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800e1f0:	6822      	ldr	r2, [r4, #0]
 800e1f2:	215e      	movs	r1, #94	; 0x5e
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e1fa:	6853      	ldr	r3, [r2, #4]
 800e1fc:	2101      	movs	r1, #1
 800e1fe:	4798      	blx	r3
      break;
 800e200:	e4cd      	b.n	800db9e <read_markers+0x192>
      if (! skip_variable(cinfo))
 800e202:	4620      	mov	r0, r4
 800e204:	f7ff fa3a 	bl	800d67c <skip_variable>
 800e208:	e4d3      	b.n	800dbb2 <read_markers+0x1a6>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e20a:	6822      	ldr	r2, [r4, #0]
 800e20c:	2146      	movs	r1, #70	; 0x46
 800e20e:	e4e1      	b.n	800dbd4 <read_markers+0x1c8>
 800e210:	0802e7c8 	.word	0x0802e7c8
 800e214:	0802e688 	.word	0x0802e688
 800e218:	0802ea70 	.word	0x0802ea70
 800e21c:	0802e8fc 	.word	0x0802e8fc
 800e220:	0802e818 	.word	0x0802e818
 800e224:	0802e87c 	.word	0x0802e87c
 800e228:	0802e9a0 	.word	0x0802e9a0

0800e22c <jpeg_resync_to_restart>:
{
 800e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e230:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e232:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800e234:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e238:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e23a:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e23e:	61d9      	str	r1, [r3, #28]
 800e240:	f04f 31ff 	mov.w	r1, #4294967295
{
 800e244:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e246:	f008 0807 	and.w	r8, r8, #7
 800e24a:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e24e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800e256:	2dbf      	cmp	r5, #191	; 0xbf
 800e258:	dd2e      	ble.n	800e2b8 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800e25a:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800e25e:	2b07      	cmp	r3, #7
 800e260:	d828      	bhi.n	800e2b4 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e262:	4545      	cmp	r5, r8
 800e264:	d026      	beq.n	800e2b4 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800e266:	1cbb      	adds	r3, r7, #2
 800e268:	f003 0307 	and.w	r3, r3, #7
 800e26c:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e26e:	429d      	cmp	r5, r3
 800e270:	d020      	beq.n	800e2b4 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800e272:	1e7b      	subs	r3, r7, #1
 800e274:	f003 0307 	and.w	r3, r3, #7
 800e278:	33d0      	adds	r3, #208	; 0xd0
 800e27a:	429d      	cmp	r5, r3
 800e27c:	d01c      	beq.n	800e2b8 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800e27e:	1ebc      	subs	r4, r7, #2
 800e280:	f004 0407 	and.w	r4, r4, #7
 800e284:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800e286:	42a5      	cmp	r5, r4
 800e288:	bf14      	ite	ne
 800e28a:	2401      	movne	r4, #1
 800e28c:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800e28e:	6833      	ldr	r3, [r6, #0]
 800e290:	2263      	movs	r2, #99	; 0x63
 800e292:	2104      	movs	r1, #4
 800e294:	4630      	mov	r0, r6
 800e296:	61dc      	str	r4, [r3, #28]
 800e298:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	4798      	blx	r3
    switch (action) {
 800e2a0:	2c02      	cmp	r4, #2
 800e2a2:	d00b      	beq.n	800e2bc <jpeg_resync_to_restart+0x90>
 800e2a4:	2c03      	cmp	r4, #3
 800e2a6:	d002      	beq.n	800e2ae <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800e2ae:	2001      	movs	r0, #1
}
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800e2b4:	2403      	movs	r4, #3
 800e2b6:	e7ea      	b.n	800e28e <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800e2b8:	2402      	movs	r4, #2
 800e2ba:	e7e8      	b.n	800e28e <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f7ff fa18 	bl	800d6f2 <next_marker>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d0f4      	beq.n	800e2b0 <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800e2c6:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800e2ca:	e7c4      	b.n	800e256 <jpeg_resync_to_restart+0x2a>

0800e2cc <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800e2cc:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e2ce:	6843      	ldr	r3, [r0, #4]
 800e2d0:	22ac      	movs	r2, #172	; 0xac
 800e2d2:	2100      	movs	r1, #0
{
 800e2d4:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e2da:	4b11      	ldr	r3, [pc, #68]	; (800e320 <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800e2dc:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e2e0:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e2e2:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800e2e4:	f100 015c 	add.w	r1, r0, #92	; 0x5c
 800e2e8:	4b0e      	ldr	r3, [pc, #56]	; (800e324 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800e2ea:	4a0f      	ldr	r2, [pc, #60]	; (800e328 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800e2ec:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800e2ee:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800e2f0:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800e2f2:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800e2f8:	f100 031c 	add.w	r3, r0, #28
    marker->process_APPn[i] = skip_variable;
 800e2fc:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0; i < 16; i++) {
 800e300:	4299      	cmp	r1, r3
 800e302:	d1fb      	bne.n	800e2fc <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800e304:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800e308:	2240      	movs	r2, #64	; 0x40
 800e30a:	2100      	movs	r1, #0
 800e30c:	f01b fc44 	bl	8029b98 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800e310:	4b07      	ldr	r3, [pc, #28]	; (800e330 <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800e312:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800e314:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800e316:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800e318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800e31c:	f7ff ba5e 	b.w	800d7dc <reset_marker_reader>
 800e320:	0800d7dd 	.word	0x0800d7dd
 800e324:	0800da0d 	.word	0x0800da0d
 800e328:	0800d67d 	.word	0x0800d67d
 800e32c:	0800d77f 	.word	0x0800d77f
 800e330:	0800d5a5 	.word	0x0800d5a5

0800e334 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800e334:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e336:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800e33a:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800e33c:	68ab      	ldr	r3, [r5, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d02a      	beq.n	800e398 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800e342:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e344:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800e348:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e34e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e352:	2102      	movs	r1, #2
 800e354:	4620      	mov	r0, r4
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e35a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e35e:	2102      	movs	r1, #2
 800e360:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e362:	4620      	mov	r0, r4
 800e364:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800e366:	68a2      	ldr	r2, [r4, #8]
 800e368:	b1aa      	cbz	r2, 800e396 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e36a:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800e36c:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e36e:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800e370:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e372:	bf14      	ite	ne
 800e374:	2102      	movne	r1, #2
 800e376:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800e378:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e37a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800e37c:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e37e:	b151      	cbz	r1, 800e396 <prepare_for_output_pass+0x62>
 800e380:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800e384:	6949      	ldr	r1, [r1, #20]
 800e386:	b931      	cbnz	r1, 800e396 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800e388:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e38a:	2900      	cmp	r1, #0
 800e38c:	bf14      	ite	ne
 800e38e:	2102      	movne	r1, #2
 800e390:	2101      	moveq	r1, #1
 800e392:	440b      	add	r3, r1
 800e394:	6113      	str	r3, [r2, #16]
    }
  }
}
 800e396:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800e398:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e39a:	b16b      	cbz	r3, 800e3b8 <prepare_for_output_pass+0x84>
 800e39c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e3a0:	b953      	cbnz	r3, 800e3b8 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800e3a2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d037      	beq.n	800e418 <prepare_for_output_pass+0xe4>
 800e3a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d034      	beq.n	800e418 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800e3ae:	69ab      	ldr	r3, [r5, #24]
 800e3b0:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800e3b8:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800e3bc:	4620      	mov	r0, r4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800e3c2:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800e3cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1c9      	bne.n	800e366 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800e3d2:	692b      	ldr	r3, [r5, #16]
 800e3d4:	b923      	cbnz	r3, 800e3e0 <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800e3d6:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800e3da:	4620      	mov	r0, r4
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800e3e0:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800e3ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e3ec:	b12b      	cbz	r3, 800e3fa <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800e3ee:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	68a9      	ldr	r1, [r5, #8]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800e3fa:	68aa      	ldr	r2, [r5, #8]
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e402:	2a00      	cmp	r2, #0
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	bf14      	ite	ne
 800e408:	2103      	movne	r1, #3
 800e40a:	2100      	moveq	r1, #0
 800e40c:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e40e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e412:	2100      	movs	r1, #0
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	e7a4      	b.n	800e362 <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800e418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e41a:	b11b      	cbz	r3, 800e424 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800e41c:	696b      	ldr	r3, [r5, #20]
 800e41e:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800e422:	e7c9      	b.n	800e3b8 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	222f      	movs	r2, #47	; 0x2f
 800e428:	4620      	mov	r0, r4
 800e42a:	615a      	str	r2, [r3, #20]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4798      	blx	r3
 800e430:	e7c2      	b.n	800e3b8 <prepare_for_output_pass+0x84>

0800e432 <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800e432:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800e434:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e436:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800e43a:	b11a      	cbz	r2, 800e444 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800e43c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	4798      	blx	r3
  master->pass_number++;
 800e444:	68e3      	ldr	r3, [r4, #12]
 800e446:	3301      	adds	r3, #1
 800e448:	60e3      	str	r3, [r4, #12]
}
 800e44a:	bd10      	pop	{r4, pc}

0800e44c <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e44c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800e44e:	4602      	mov	r2, r0
 800e450:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e452:	2b00      	cmp	r3, #0
 800e454:	d142      	bne.n	800e4dc <use_merged_upsample+0x90>
 800e456:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d140      	bne.n	800e4e0 <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800e45e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800e462:	2b03      	cmp	r3, #3
 800e464:	d139      	bne.n	800e4da <use_merged_upsample+0x8e>
 800e466:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e468:	2b03      	cmp	r3, #3
 800e46a:	d136      	bne.n	800e4da <use_merged_upsample+0x8e>
 800e46c:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800e470:	2b02      	cmp	r3, #2
 800e472:	d132      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->out_color_space != JCS_RGB ||
 800e474:	6f93      	ldr	r3, [r2, #120]	; 0x78
 800e476:	2b03      	cmp	r3, #3
 800e478:	d12f      	bne.n	800e4da <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800e47a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 800e47e:	6899      	ldr	r1, [r3, #8]
 800e480:	2902      	cmp	r1, #2
 800e482:	d12a      	bne.n	800e4da <use_merged_upsample+0x8e>
 800e484:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800e486:	2901      	cmp	r1, #1
 800e488:	d127      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800e48a:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e48e:	2901      	cmp	r1, #1
 800e490:	d123      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800e492:	68d9      	ldr	r1, [r3, #12]
 800e494:	2902      	cmp	r1, #2
 800e496:	dc20      	bgt.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800e498:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800e49a:	2901      	cmp	r1, #1
 800e49c:	d11d      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800e49e:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e4a2:	2901      	cmp	r1, #1
 800e4a4:	d119      	bne.n	800e4da <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e4a6:	f8d2 4140 	ldr.w	r4, [r2, #320]	; 0x140
 800e4aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e4ac:	42a1      	cmp	r1, r4
 800e4ae:	d114      	bne.n	800e4da <use_merged_upsample+0x8e>
 800e4b0:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800e4b2:	42a1      	cmp	r1, r4
 800e4b4:	d111      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e4b6:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800e4ba:	42a1      	cmp	r1, r4
 800e4bc:	d10d      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e4be:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e4c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4c4:	428a      	cmp	r2, r1
 800e4c6:	d108      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e4c8:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800e4cc:	428a      	cmp	r2, r1
 800e4ce:	d104      	bne.n	800e4da <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e4d0:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 800e4d4:	1a83      	subs	r3, r0, r2
 800e4d6:	4258      	negs	r0, r3
 800e4d8:	4158      	adcs	r0, r3
}
 800e4da:	bd10      	pop	{r4, pc}
    return FALSE;
 800e4dc:	2000      	movs	r0, #0
 800e4de:	e7fc      	b.n	800e4da <use_merged_upsample+0x8e>
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	e7fa      	b.n	800e4da <use_merged_upsample+0x8e>

0800e4e4 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800e4e4:	6942      	ldr	r2, [r0, #20]
 800e4e6:	2aca      	cmp	r2, #202	; 0xca
{
 800e4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ec:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800e4ee:	d005      	beq.n	800e4fc <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800e4f0:	6803      	ldr	r3, [r0, #0]
 800e4f2:	2115      	movs	r1, #21
 800e4f4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800e4fc:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e4fe:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800e500:	f7fe fb04 	bl	800cb0c <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e504:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800e508:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e50c:	462b      	mov	r3, r5
 800e50e:	45b4      	cmp	ip, r6
 800e510:	dd7a      	ble.n	800e608 <jpeg_calc_output_dimensions+0x124>
 800e512:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800e514:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e516:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800e51a:	2a00      	cmp	r2, #0
 800e51c:	bf14      	ite	ne
 800e51e:	2708      	movne	r7, #8
 800e520:	2704      	moveq	r7, #4
 800e522:	e000      	b.n	800e526 <jpeg_calc_output_dimensions+0x42>
      ssize = ssize * 2;
 800e524:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e526:	fb01 f008 	mul.w	r0, r1, r8
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e52a:	42b8      	cmp	r0, r7
 800e52c:	dc0a      	bgt.n	800e544 <jpeg_calc_output_dimensions+0x60>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800e52e:	689a      	ldr	r2, [r3, #8]
 800e530:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800e534:	434a      	muls	r2, r1
 800e536:	0052      	lsls	r2, r2, #1
 800e538:	fb9e f9f2 	sdiv	r9, lr, r2
 800e53c:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e540:	2a00      	cmp	r2, #0
 800e542:	d0ef      	beq.n	800e524 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800e544:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800e546:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800e54a:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800e54e:	fb08 f109 	mul.w	r1, r8, r9
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e552:	42b9      	cmp	r1, r7
 800e554:	dc0a      	bgt.n	800e56c <jpeg_calc_output_dimensions+0x88>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800e556:	68da      	ldr	r2, [r3, #12]
 800e558:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800e55c:	fb02 f208 	mul.w	r2, r2, r8
 800e560:	0052      	lsls	r2, r2, #1
 800e562:	fb9e faf2 	sdiv	sl, lr, r2
 800e566:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e56a:	b14a      	cbz	r2, 800e580 <jpeg_calc_output_dimensions+0x9c>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e56c:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800e570:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e572:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800e576:	dd06      	ble.n	800e586 <jpeg_calc_output_dimensions+0xa2>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800e578:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800e57a:	3601      	adds	r6, #1
 800e57c:	3358      	adds	r3, #88	; 0x58
 800e57e:	e7c6      	b.n	800e50e <jpeg_calc_output_dimensions+0x2a>
      ssize = ssize * 2;
 800e580:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800e584:	e7e3      	b.n	800e54e <jpeg_calc_output_dimensions+0x6a>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800e586:	0042      	lsls	r2, r0, #1
 800e588:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800e58c:	bfc8      	it	gt
 800e58e:	629a      	strgt	r2, [r3, #40]	; 0x28
 800e590:	e7f3      	b.n	800e57a <jpeg_calc_output_dimensions+0x96>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800e594:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e596:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800e598:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e59a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e59e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e5a2:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800e5a4:	69e3      	ldr	r3, [r4, #28]
 800e5a6:	4351      	muls	r1, r2
 800e5a8:	4358      	muls	r0, r3
 800e5aa:	f007 fe43 	bl	8016234 <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e5ae:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800e5b2:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e5b6:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e5ba:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800e5be:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e5c2:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800e5c4:	6a23      	ldr	r3, [r4, #32]
 800e5c6:	4351      	muls	r1, r2
 800e5c8:	4358      	muls	r0, r3
 800e5ca:	f007 fe33 	bl	8016234 <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800e5ce:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5d4:	42b3      	cmp	r3, r6
 800e5d6:	dcdc      	bgt.n	800e592 <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800e5d8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800e5dc:	2a03      	cmp	r2, #3
 800e5de:	d815      	bhi.n	800e60c <jpeg_calc_output_dimensions+0x128>
 800e5e0:	2a01      	cmp	r2, #1
 800e5e2:	d818      	bhi.n	800e616 <jpeg_calc_output_dimensions+0x132>
 800e5e4:	d100      	bne.n	800e5e8 <jpeg_calc_output_dimensions+0x104>
 800e5e6:	4613      	mov	r3, r2
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e5e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (use_merged_upsample(cinfo))
 800e5ea:	4620      	mov	r0, r4
    cinfo->out_color_components = 1;
 800e5ec:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e5ee:	2a00      	cmp	r2, #0
 800e5f0:	bf18      	it	ne
 800e5f2:	2301      	movne	r3, #1
 800e5f4:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800e5f6:	f7ff ff29 	bl	800e44c <use_merged_upsample>
 800e5fa:	b170      	cbz	r0, 800e61a <jpeg_calc_output_dimensions+0x136>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800e5fc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800e600:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800e604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e608:	2600      	movs	r6, #0
 800e60a:	e7e2      	b.n	800e5d2 <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800e60c:	3a04      	subs	r2, #4
 800e60e:	2a01      	cmp	r2, #1
 800e610:	bf98      	it	ls
 800e612:	2304      	movls	r3, #4
 800e614:	e7e8      	b.n	800e5e8 <jpeg_calc_output_dimensions+0x104>
 800e616:	2303      	movs	r3, #3
 800e618:	e7e6      	b.n	800e5e8 <jpeg_calc_output_dimensions+0x104>
    cinfo->rec_outbuf_height = 1;
 800e61a:	2301      	movs	r3, #1
 800e61c:	e7f0      	b.n	800e600 <jpeg_calc_output_dimensions+0x11c>
	...

0800e620 <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e622:	6843      	ldr	r3, [r0, #4]
 800e624:	221c      	movs	r2, #28
 800e626:	2101      	movs	r1, #1
{
 800e628:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e62a:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800e62c:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e62e:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800e630:	4b6d      	ldr	r3, [pc, #436]	; (800e7e8 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800e632:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e636:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800e638:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800e63a:	4b6c      	ldr	r3, [pc, #432]	; (800e7ec <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800e63c:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800e63e:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800e640:	4620      	mov	r0, r4
 800e642:	f7ff ff4f 	bl	800e4e4 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e646:	6863      	ldr	r3, [r4, #4]
 800e648:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800e64c:	2101      	movs	r1, #1
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4620      	mov	r0, r4
 800e652:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800e654:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e658:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800e65a:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800e65c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800e660:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e664:	f01b fa98 	bl	8029b98 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800e668:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800e66c:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800e66e:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800e672:	3101      	adds	r1, #1
 800e674:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e678:	d1f9      	bne.n	800e66e <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800e67a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e67e:	21ff      	movs	r1, #255	; 0xff
 800e680:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800e684:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800e686:	f01b fa87 	bl	8029b98 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800e68a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e68e:	2100      	movs	r1, #0
 800e690:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800e694:	f01b fa80 	bl	8029b98 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800e698:	2280      	movs	r2, #128	; 0x80
 800e69a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800e69e:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800e6a2:	f01b fb5a 	bl	8029d5a <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800e6a6:	4620      	mov	r0, r4
  master->pass_number = 0;
 800e6a8:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800e6aa:	f7ff fecf 	bl	800e44c <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800e6ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800e6b0:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800e6b2:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800e6b6:	b1b3      	cbz	r3, 800e6e6 <jinit_master_decompress+0xc6>
 800e6b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e6ba:	b1a2      	cbz	r2, 800e6e6 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800e6bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d166      	bne.n	800e790 <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800e6c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	f04f 0301 	mov.w	r3, #1
 800e6ca:	d068      	beq.n	800e79e <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800e6cc:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800e6ce:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800e6d0:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800e6d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f006 feb9 	bl	8015450 <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800e6de:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e6e2:	616b      	str	r3, [r5, #20]
 800e6e4:	e062      	b.n	800e7ac <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800e6e6:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800e6ea:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1e5      	bne.n	800e6bc <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800e6f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e6f2:	b94b      	cbnz	r3, 800e708 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800e6f4:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800e6f6:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d069      	beq.n	800e7d0 <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800e6fc:	f000 fa1e 	bl	800eb3c <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800e700:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e702:	4620      	mov	r0, r4
 800e704:	f000 fb9a 	bl	800ee3c <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800e708:	4620      	mov	r0, r4
 800e70a:	f7fc fdbd 	bl	800b288 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800e70e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800e712:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800e714:	2b00      	cmp	r3, #0
 800e716:	d061      	beq.n	800e7dc <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800e718:	f7fb fc2c 	bl	8009f74 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800e71c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d15d      	bne.n	800e7e2 <jinit_master_decompress+0x1c2>
 800e726:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e728:	3900      	subs	r1, #0
 800e72a:	bf18      	it	ne
 800e72c:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800e72e:	4620      	mov	r0, r4
 800e730:	f7fc f916 	bl	800a960 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800e734:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e736:	b911      	cbnz	r1, 800e73e <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800e738:	4620      	mov	r0, r4
 800e73a:	f7fe fca7 	bl	800d08c <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800e73e:	6863      	ldr	r3, [r4, #4]
 800e740:	4620      	mov	r0, r4
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800e746:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800e74a:	4620      	mov	r0, r4
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800e750:	68a2      	ldr	r2, [r4, #8]
 800e752:	b1e2      	cbz	r2, 800e78e <jinit_master_decompress+0x16e>
 800e754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e756:	b9d3      	cbnz	r3, 800e78e <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800e758:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	b1b3      	cbz	r3, 800e78e <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800e760:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800e764:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800e766:	b111      	cbz	r1, 800e76e <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800e768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e76c:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800e76e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800e772:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800e774:	4359      	muls	r1, r3
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800e776:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    cinfo->progress->pass_counter = 0L;
 800e778:	6050      	str	r0, [r2, #4]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800e77a:	4283      	cmp	r3, r0
 800e77c:	bf14      	ite	ne
 800e77e:	2303      	movne	r3, #3
 800e780:	2302      	moveq	r3, #2
 800e782:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800e784:	68eb      	ldr	r3, [r5, #12]
 800e786:	3301      	adds	r3, #1
    cinfo->progress->completed_passes = 0;
 800e788:	e9c2 1002 	strd	r1, r0, [r2, #8]
    master->pass_number++;
 800e78c:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800e78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	2230      	movs	r2, #48	; 0x30
 800e794:	4620      	mov	r0, r4
 800e796:	615a      	str	r2, [r3, #20]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4798      	blx	r3
 800e79c:	e791      	b.n	800e6c2 <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800e79e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800e7a2:	b17a      	cbz	r2, 800e7c4 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800e7a4:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800e7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d195      	bne.n	800e6d8 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800e7ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e7ae:	b913      	cbnz	r3, 800e7b6 <jinit_master_decompress+0x196>
 800e7b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d09c      	beq.n	800e6f0 <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f007 fcd0 	bl	801615c <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800e7bc:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e7c0:	61ab      	str	r3, [r5, #24]
 800e7c2:	e795      	b.n	800e6f0 <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800e7c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e7c6:	b10a      	cbz	r2, 800e7cc <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800e7c8:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e7ca:	e7ec      	b.n	800e7a6 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800e7cc:	6663      	str	r3, [r4, #100]	; 0x64
 800e7ce:	e783      	b.n	800e6d8 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800e7d0:	f7fc faea 	bl	800ada8 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	f000 fc4f 	bl	800f078 <jinit_upsampler>
 800e7da:	e791      	b.n	800e700 <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800e7dc:	f7fd fee2 	bl	800c5a4 <jinit_huff_decoder>
 800e7e0:	e79c      	b.n	800e71c <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800e7e2:	2101      	movs	r1, #1
 800e7e4:	e7a3      	b.n	800e72e <jinit_master_decompress+0x10e>
 800e7e6:	bf00      	nop
 800e7e8:	0800e335 	.word	0x0800e335
 800e7ec:	0800e433 	.word	0x0800e433

0800e7f0 <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e7f0:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800e7f8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800e7fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e7fc:	4770      	bx	lr

0800e7fe <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800e7fe:	b570      	push	{r4, r5, r6, lr}
 800e800:	9d05      	ldr	r5, [sp, #20]
 800e802:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800e804:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800e808:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800e80a:	68de      	ldr	r6, [r3, #12]
 800e80c:	9b04      	ldr	r3, [sp, #16]
 800e80e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e812:	6822      	ldr	r2, [r4, #0]
 800e814:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	3301      	adds	r3, #1
 800e81a:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800e81c:	6823      	ldr	r3, [r4, #0]
 800e81e:	3301      	adds	r3, #1
 800e820:	6023      	str	r3, [r4, #0]
}
 800e822:	bd70      	pop	{r4, r5, r6, pc}

0800e824 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e828:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800e82c:	b089      	sub	sp, #36	; 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800e82e:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800e832:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800e834:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800e838:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800e83a:	9601      	str	r6, [sp, #4]
  int * Cbbtab = upsample->Cb_b_tab;
 800e83c:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800e83e:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800e842:	9602      	str	r6, [sp, #8]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e844:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800e846:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e848:	9603      	str	r6, [sp, #12]
  inptr0 = input_buf[0][in_row_group_ctr];
 800e84a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800e84e:	9504      	str	r5, [sp, #16]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e850:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e852:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e854:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e858:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e85c:	9904      	ldr	r1, [sp, #16]
 800e85e:	9205      	str	r2, [sp, #20]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e860:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800e862:	f8dd 9014 	ldr.w	r9, [sp, #20]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e866:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800e86a:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800e86e:	9206      	str	r2, [sp, #24]
 800e870:	9a06      	ldr	r2, [sp, #24]
 800e872:	3306      	adds	r3, #6
 800e874:	3102      	adds	r1, #2
 800e876:	4295      	cmp	r5, r2
 800e878:	d128      	bne.n	800e8cc <h2v1_merged_upsample+0xa8>
 800e87a:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800e87c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800e87e:	fb03 f30e 	mul.w	r3, r3, lr
 800e882:	07d2      	lsls	r2, r2, #31
 800e884:	eb0c 0103 	add.w	r1, ip, r3
 800e888:	d51d      	bpl.n	800e8c6 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800e88a:	9a05      	ldr	r2, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800e88c:	9f01      	ldr	r7, [sp, #4]
    cred = Crrtab[cr];
 800e88e:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e892:	782a      	ldrb	r2, [r5, #0]
 800e894:	9d03      	ldr	r5, [sp, #12]
 800e896:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800e89a:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e89e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e8a2:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800e8a4:	9d02      	ldr	r5, [sp, #8]
 800e8a6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e8aa:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800e8ae:	9a04      	ldr	r2, [sp, #16]
 800e8b0:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e8b4:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e8b6:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800e8b8:	5dbe      	ldrb	r6, [r7, r6]
 800e8ba:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e8bc:	5c80      	ldrb	r0, [r0, r2]
 800e8be:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e8c0:	5ca2      	ldrb	r2, [r4, r2]
 800e8c2:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800e8c6:	b009      	add	sp, #36	; 0x24
 800e8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e8cc:	f815 ab01 	ldrb.w	sl, [r5], #1
    cred = Crrtab[cr];
 800e8d0:	f819 2b01 	ldrb.w	r2, [r9], #1
 800e8d4:	9e01      	ldr	r6, [sp, #4]
 800e8d6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e8da:	f858 602a 	ldr.w	r6, [r8, sl, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e8de:	4427      	add	r7, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e8e0:	9607      	str	r6, [sp, #28]
 800e8e2:	9e03      	ldr	r6, [sp, #12]
 800e8e4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800e8e8:	9e07      	ldr	r6, [sp, #28]
 800e8ea:	4432      	add	r2, r6
    cblue = Cbbtab[cb];
 800e8ec:	9e02      	ldr	r6, [sp, #8]
 800e8ee:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e8f2:	eb04 4222 	add.w	r2, r4, r2, asr #16
    y  = GETJSAMPLE(*inptr0++);
 800e8f6:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e8fa:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800e8fc:	f817 b00a 	ldrb.w	fp, [r7, sl]
 800e900:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e904:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800e908:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e90c:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800e910:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800e914:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e918:	f817 700a 	ldrb.w	r7, [r7, sl]
 800e91c:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e920:	f812 200a 	ldrb.w	r2, [r2, sl]
 800e924:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e928:	f816 200a 	ldrb.w	r2, [r6, sl]
 800e92c:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e930:	e79e      	b.n	800e870 <h2v1_merged_upsample+0x4c>

0800e932 <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800e932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e936:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800e93a:	b08d      	sub	sp, #52	; 0x34
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800e93c:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800e940:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800e942:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800e946:	9604      	str	r6, [sp, #16]
  int * Cbbtab = upsample->Cb_b_tab;
 800e948:	696e      	ldr	r6, [r5, #20]
 800e94a:	9605      	str	r6, [sp, #20]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e94c:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800e94e:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e950:	9606      	str	r6, [sp, #24]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800e952:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800e956:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800e95a:	686d      	ldr	r5, [r5, #4]
 800e95c:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800e95e:	9607      	str	r6, [sp, #28]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800e960:	9508      	str	r5, [sp, #32]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e962:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e964:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e966:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e96a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e96e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800e970:	9209      	str	r2, [sp, #36]	; 0x24
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e972:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e980:	910a      	str	r1, [sp, #40]	; 0x28
  inptr2 = input_buf[2][in_row_group_ctr];
 800e982:	9909      	ldr	r1, [sp, #36]	; 0x24
  outptr0 = output_buf[0];
 800e984:	9201      	str	r2, [sp, #4]
  outptr1 = output_buf[1];
 800e986:	9302      	str	r3, [sp, #8]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e988:	9103      	str	r1, [sp, #12]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e98a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e98c:	3206      	adds	r2, #6
 800e98e:	3306      	adds	r3, #6
 800e990:	f10e 0e02 	add.w	lr, lr, #2
 800e994:	4588      	cmp	r8, r1
 800e996:	f10c 0c02 	add.w	ip, ip, #2
 800e99a:	d139      	bne.n	800ea10 <h2v2_merged_upsample+0xde>
 800e99c:	2306      	movs	r3, #6
 800e99e:	9a01      	ldr	r2, [sp, #4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800e9a0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800e9a2:	437b      	muls	r3, r7
 800e9a4:	07c0      	lsls	r0, r0, #31
 800e9a6:	eb02 0103 	add.w	r1, r2, r3
 800e9aa:	9a02      	ldr	r2, [sp, #8]
 800e9ac:	441a      	add	r2, r3
 800e9ae:	d52c      	bpl.n	800ea0a <h2v2_merged_upsample+0xd8>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800e9b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9b2:	9d04      	ldr	r5, [sp, #16]
 800e9b4:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e9b6:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800e9ba:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e9be:	9d06      	ldr	r5, [sp, #24]
 800e9c0:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800e9c4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
 800e9c8:	9d05      	ldr	r5, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e9ca:	4460      	add	r0, ip
    cblue = Cbbtab[cb];
 800e9cc:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
    y  = GETJSAMPLE(*inptr00);
 800e9d0:	9d07      	ldr	r5, [sp, #28]
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e9d2:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr00);
 800e9d6:	f815 6017 	ldrb.w	r6, [r5, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e9da:	eb0e 0504 	add.w	r5, lr, r4
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e9de:	4464      	add	r4, ip
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e9e0:	f815 e006 	ldrb.w	lr, [r5, r6]
 800e9e4:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e9e8:	f810 e006 	ldrb.w	lr, [r0, r6]
 800e9ec:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e9f0:	5da1      	ldrb	r1, [r4, r6]
 800e9f2:	9e01      	ldr	r6, [sp, #4]
 800e9f4:	54f1      	strb	r1, [r6, r3]
    y  = GETJSAMPLE(*inptr01);
 800e9f6:	9908      	ldr	r1, [sp, #32]
 800e9f8:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800e9fc:	5c6d      	ldrb	r5, [r5, r1]
 800e9fe:	7095      	strb	r5, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ea00:	5c40      	ldrb	r0, [r0, r1]
 800ea02:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800ea04:	5c62      	ldrb	r2, [r4, r1]
 800ea06:	9902      	ldr	r1, [sp, #8]
 800ea08:	54ca      	strb	r2, [r1, r3]
  }
}
 800ea0a:	b00d      	add	sp, #52	; 0x34
 800ea0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800ea10:	9d03      	ldr	r5, [sp, #12]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ea12:	f818 9b01 	ldrb.w	r9, [r8], #1
    cred = Crrtab[cr];
 800ea16:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ea1a:	9503      	str	r5, [sp, #12]
 800ea1c:	9d04      	ldr	r5, [sp, #16]
 800ea1e:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ea22:	f85a 5029 	ldr.w	r5, [sl, r9, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ea26:	4426      	add	r6, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ea28:	950b      	str	r5, [sp, #44]	; 0x2c
 800ea2a:	9d06      	ldr	r5, [sp, #24]
 800ea2c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800ea30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ea32:	4429      	add	r1, r5
    cblue = Cbbtab[cb];
 800ea34:	9d05      	ldr	r5, [sp, #20]
 800ea36:	f855 5029 	ldr.w	r5, [r5, r9, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ea3a:	eb04 4121 	add.w	r1, r4, r1, asr #16
    y  = GETJSAMPLE(*inptr00++);
 800ea3e:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ea42:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ea44:	f816 b009 	ldrb.w	fp, [r6, r9]
 800ea48:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ea4c:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ea50:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ea54:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ea58:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800ea5c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ea60:	f816 b009 	ldrb.w	fp, [r6, r9]
 800ea64:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ea68:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ea6c:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ea70:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ea74:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800ea78:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ea7c:	f816 b009 	ldrb.w	fp, [r6, r9]
 800ea80:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ea84:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ea88:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800ea8c:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ea90:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800ea94:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ea98:	f816 6009 	ldrb.w	r6, [r6, r9]
 800ea9c:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800eaa0:	f811 1009 	ldrb.w	r1, [r1, r9]
 800eaa4:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800eaa8:	f815 1009 	ldrb.w	r1, [r5, r9]
 800eaac:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800eab0:	e76b      	b.n	800e98a <h2v2_merged_upsample+0x58>

0800eab2 <merged_2v_upsample>:
{
 800eab2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800eab6:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800eaba:	4616      	mov	r6, r2
 800eabc:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800eac0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800eac2:	f8d8 3000 	ldr.w	r3, [r8]
 800eac6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800eaca:	b1dd      	cbz	r5, 800eb04 <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800eacc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eace:	2501      	movs	r5, #1
 800ead0:	f104 0020 	add.w	r0, r4, #32
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	2300      	movs	r3, #0
 800ead8:	9500      	str	r5, [sp, #0]
 800eada:	4619      	mov	r1, r3
 800eadc:	f007 fbb7 	bl	801624e <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800eae0:	2300      	movs	r3, #0
 800eae2:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800eae4:	f8d8 3000 	ldr.w	r3, [r8]
 800eae8:	442b      	add	r3, r5
 800eaea:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800eaee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eaf0:	1b5b      	subs	r3, r3, r5
 800eaf2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800eaf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf6:	b913      	cbnz	r3, 800eafe <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800eaf8:	6833      	ldr	r3, [r6, #0]
 800eafa:	3301      	adds	r3, #1
 800eafc:	6033      	str	r3, [r6, #0]
}
 800eafe:	b004      	add	sp, #16
 800eb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800eb04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800eb06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800eb08:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800eb0a:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800eb0e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800eb12:	bf28      	it	cs
 800eb14:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800eb16:	9302      	str	r3, [sp, #8]
 800eb18:	42bd      	cmp	r5, r7
 800eb1a:	bf28      	it	cs
 800eb1c:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800eb1e:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800eb20:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800eb22:	bf17      	itett	ne
 800eb24:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800eb26:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800eb28:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800eb2a:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800eb2c:	bf0c      	ite	eq
 800eb2e:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800eb30:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800eb32:	ab02      	add	r3, sp, #8
 800eb34:	6832      	ldr	r2, [r6, #0]
 800eb36:	47b8      	blx	r7
 800eb38:	e7d4      	b.n	800eae4 <merged_2v_upsample+0x32>
	...

0800eb3c <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb3c:	6843      	ldr	r3, [r0, #4]
 800eb3e:	2230      	movs	r2, #48	; 0x30
 800eb40:	2101      	movs	r1, #1
 800eb42:	681b      	ldr	r3, [r3, #0]
{
 800eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb48:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb4a:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800eb4c:	4b37      	ldr	r3, [pc, #220]	; (800ec2c <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb4e:	4605      	mov	r5, r0
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800eb50:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800eb54:	6f22      	ldr	r2, [r4, #112]	; 0x70
  upsample->pub.start_pass = start_pass_merged_upsample;
 800eb56:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800eb58:	2000      	movs	r0, #0
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800eb5a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  upsample->pub.need_context_rows = FALSE;
 800eb5c:	60a8      	str	r0, [r5, #8]
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800eb5e:	435a      	muls	r2, r3

  if (cinfo->max_v_samp_factor == 2) {
 800eb60:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800eb64:	2b02      	cmp	r3, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800eb66:	62aa      	str	r2, [r5, #40]	; 0x28
  if (cinfo->max_v_samp_factor == 2) {
 800eb68:	d15a      	bne.n	800ec20 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800eb6a:	4b31      	ldr	r3, [pc, #196]	; (800ec30 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	4620      	mov	r0, r4
    upsample->pub.upsample = merged_2v_upsample;
 800eb70:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800eb72:	4b30      	ldr	r3, [pc, #192]	; (800ec34 <jinit_merged_upsampler+0xf8>)
 800eb74:	60eb      	str	r3, [r5, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb76:	6863      	ldr	r3, [r4, #4]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb7c:	6863      	ldr	r3, [r4, #4]
 800eb7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    upsample->spare_row = (JSAMPROW)
 800eb82:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb84:	2101      	movs	r1, #1
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4620      	mov	r0, r4
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800eb8a:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb8e:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb90:	6863      	ldr	r3, [r4, #4]
 800eb92:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800eb96:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eb98:	2101      	movs	r1, #1
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eba0:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800eba2:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2101      	movs	r1, #1
 800ebac:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ebae:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800ec4c <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ebb2:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ebb4:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800ebb6:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ebb8:	2101      	movs	r1, #1
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800ebc2:	4f1d      	ldr	r7, [pc, #116]	; (800ec38 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ebc4:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ebc6:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800ebc8:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800ebca:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ebcc:	f8df e080 	ldr.w	lr, [pc, #128]	; 800ec50 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800ebd0:	491a      	ldr	r1, [pc, #104]	; (800ec3c <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800ebd2:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ebd6:	4d1a      	ldr	r5, [pc, #104]	; (800ec40 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ebd8:	fb08 e203 	mla	r2, r8, r3, lr
 800ebdc:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800ebde:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800ebe2:	fb07 f203 	mul.w	r2, r7, r3
 800ebe6:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800ebea:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800ebee:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800ebf0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ebf4:	fb05 f203 	mul.w	r2, r5, r3
 800ebf8:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800ebfc:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800ec00:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800ec04:	fb01 f203 	mul.w	r2, r1, r3
 800ec08:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800ec0c:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800ec10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800ec14:	3301      	adds	r3, #1
 800ec16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec1a:	d1dd      	bne.n	800ebd8 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800ec20:	4b08      	ldr	r3, [pc, #32]	; (800ec44 <jinit_merged_upsampler+0x108>)
 800ec22:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800ec24:	4b08      	ldr	r3, [pc, #32]	; (800ec48 <jinit_merged_upsampler+0x10c>)
 800ec26:	60eb      	str	r3, [r5, #12]
    upsample->spare_row = NULL;
 800ec28:	e7a8      	b.n	800eb7c <jinit_merged_upsampler+0x40>
 800ec2a:	bf00      	nop
 800ec2c:	0800e7f1 	.word	0x0800e7f1
 800ec30:	0800eab3 	.word	0x0800eab3
 800ec34:	0800e933 	.word	0x0800e933
 800ec38:	0001c5a2 	.word	0x0001c5a2
 800ec3c:	ffffa7e6 	.word	0xffffa7e6
 800ec40:	ffff492e 	.word	0xffff492e
 800ec44:	0800e7ff 	.word	0x0800e7ff
 800ec48:	0800e825 	.word	0x0800e825
 800ec4c:	000166e9 	.word	0x000166e9
 800ec50:	ff4d0b80 	.word	0xff4d0b80

0800ec54 <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800ec54:	2902      	cmp	r1, #2
{
 800ec56:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ec58:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800ec5c:	d023      	beq.n	800eca6 <start_pass_dpost+0x52>
 800ec5e:	2903      	cmp	r1, #3
 800ec60:	d019      	beq.n	800ec96 <start_pass_dpost+0x42>
 800ec62:	2900      	cmp	r1, #0
 800ec64:	d128      	bne.n	800ecb8 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800ec66:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800ec68:	b182      	cbz	r2, 800ec8c <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800ec6a:	4a16      	ldr	r2, [pc, #88]	; (800ecc4 <start_pass_dpost+0x70>)
 800ec6c:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800ec6e:	68e2      	ldr	r2, [r4, #12]
 800ec70:	b93a      	cbnz	r2, 800ec82 <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800ec72:	6843      	ldr	r3, [r0, #4]
 800ec74:	2101      	movs	r1, #1
 800ec76:	9100      	str	r1, [sp, #0]
 800ec78:	69dd      	ldr	r5, [r3, #28]
 800ec7a:	68a1      	ldr	r1, [r4, #8]
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	47a8      	blx	r5
 800ec80:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800ec88:	b003      	add	sp, #12
 800ec8a:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800ec8c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800ec90:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800ec92:	6063      	str	r3, [r4, #4]
    break;
 800ec94:	e7f5      	b.n	800ec82 <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800ec96:	68a2      	ldr	r2, [r4, #8]
 800ec98:	b91a      	cbnz	r2, 800eca2 <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ec9a:	6803      	ldr	r3, [r0, #0]
 800ec9c:	6159      	str	r1, [r3, #20]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800eca2:	4b09      	ldr	r3, [pc, #36]	; (800ecc8 <start_pass_dpost+0x74>)
 800eca4:	e7f5      	b.n	800ec92 <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800eca6:	68a2      	ldr	r2, [r4, #8]
 800eca8:	b922      	cbnz	r2, 800ecb4 <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ecaa:	6803      	ldr	r3, [r0, #0]
 800ecac:	2203      	movs	r2, #3
 800ecae:	615a      	str	r2, [r3, #20]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800ecb4:	4b05      	ldr	r3, [pc, #20]	; (800eccc <start_pass_dpost+0x78>)
 800ecb6:	e7ec      	b.n	800ec92 <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ecb8:	6803      	ldr	r3, [r0, #0]
 800ecba:	2203      	movs	r2, #3
 800ecbc:	615a      	str	r2, [r3, #20]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4798      	blx	r3
    break;
 800ecc2:	e7de      	b.n	800ec82 <start_pass_dpost+0x2e>
 800ecc4:	0800ecd1 	.word	0x0800ecd1
 800ecc8:	0800ed31 	.word	0x0800ed31
 800eccc:	0800edbf 	.word	0x0800edbf

0800ecd0 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd4:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ecd6:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800ecda:	4604      	mov	r4, r0
 800ecdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800ecde:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800ece0:	682f      	ldr	r7, [r5, #0]
 800ece2:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800ece4:	2700      	movs	r7, #0
 800ece6:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800ece8:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800ecec:	9705      	str	r7, [sp, #20]
 800ecee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ecf2:	42be      	cmp	r6, r7
 800ecf4:	bf94      	ite	ls
 800ecf6:	9602      	strls	r6, [sp, #8]
 800ecf8:	9702      	strhi	r7, [sp, #8]
 800ecfa:	ae07      	add	r6, sp, #28
 800ecfc:	9601      	str	r6, [sp, #4]
 800ecfe:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ed02:	9600      	str	r6, [sp, #0]
 800ed04:	9e05      	ldr	r6, [sp, #20]
 800ed06:	6876      	ldr	r6, [r6, #4]
 800ed08:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800ed0a:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800ed0c:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ed10:	4620      	mov	r0, r4
 800ed12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed14:	685e      	ldr	r6, [r3, #4]
 800ed16:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ed1a:	9b07      	ldr	r3, [sp, #28]
 800ed1c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800ed20:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800ed22:	682b      	ldr	r3, [r5, #0]
 800ed24:	9a07      	ldr	r2, [sp, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	602b      	str	r3, [r5, #0]
}
 800ed2a:	b008      	add	sp, #32
 800ed2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed30 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800ed30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ed34:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800ed38:	b085      	sub	sp, #20
 800ed3a:	469a      	mov	sl, r3
 800ed3c:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800ed3e:	69a3      	ldr	r3, [r4, #24]
{
 800ed40:	460e      	mov	r6, r1
 800ed42:	4691      	mov	r9, r2
 800ed44:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800ed48:	b943      	cbnz	r3, 800ed5c <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800ed4a:	6843      	ldr	r3, [r0, #4]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	9200      	str	r2, [sp, #0]
 800ed50:	69df      	ldr	r7, [r3, #28]
 800ed52:	68a1      	ldr	r1, [r4, #8]
 800ed54:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ed58:	47b8      	blx	r7
 800ed5a:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800ed5c:	6922      	ldr	r2, [r4, #16]
 800ed5e:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800ed60:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800ed62:	4628      	mov	r0, r5
 800ed64:	9202      	str	r2, [sp, #8]
 800ed66:	f104 0218 	add.w	r2, r4, #24
 800ed6a:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800ed6e:	9201      	str	r2, [sp, #4]
 800ed70:	68e2      	ldr	r2, [r4, #12]
 800ed72:	9200      	str	r2, [sp, #0]
 800ed74:	464a      	mov	r2, r9
 800ed76:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800ed7a:	4653      	mov	r3, sl
 800ed7c:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800ed7e:	69a6      	ldr	r6, [r4, #24]
 800ed80:	42be      	cmp	r6, r7
 800ed82:	d910      	bls.n	800eda6 <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800ed84:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800ed88:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800ed8a:	68e1      	ldr	r1, [r4, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ed92:	4628      	mov	r0, r5
 800ed94:	4633      	mov	r3, r6
 800ed96:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800ed9a:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800ed9c:	f8d8 3000 	ldr.w	r3, [r8]
 800eda0:	4433      	add	r3, r6
 800eda2:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800eda6:	6922      	ldr	r2, [r4, #16]
 800eda8:	69a3      	ldr	r3, [r4, #24]
 800edaa:	4293      	cmp	r3, r2
 800edac:	d304      	bcc.n	800edb8 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800edae:	6963      	ldr	r3, [r4, #20]
 800edb0:	4413      	add	r3, r2
 800edb2:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800edb4:	2300      	movs	r3, #0
 800edb6:	61a3      	str	r3, [r4, #24]
  }
}
 800edb8:	b005      	add	sp, #20
 800edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edbe <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800edbe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800edc2:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800edc6:	4606      	mov	r6, r0
 800edc8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800edca:	69a3      	ldr	r3, [r4, #24]
 800edcc:	b93b      	cbnz	r3, 800edde <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800edce:	6842      	ldr	r2, [r0, #4]
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	69d5      	ldr	r5, [r2, #28]
 800edd4:	68a1      	ldr	r1, [r4, #8]
 800edd6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800edda:	47a8      	blx	r5
 800eddc:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800edde:	6963      	ldr	r3, [r4, #20]
 800ede0:	6f75      	ldr	r5, [r6, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800ede2:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800ede4:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800ede6:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800ede8:	683a      	ldr	r2, [r7, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800edea:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800edec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800edee:	429d      	cmp	r5, r3
 800edf0:	bf28      	it	cs
 800edf2:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800edf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edf6:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800edf8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800edfc:	429d      	cmp	r5, r3
 800edfe:	bf28      	it	cs
 800ee00:	461d      	movcs	r5, r3
 800ee02:	68e3      	ldr	r3, [r4, #12]
 800ee04:	9303      	str	r3, [sp, #12]
 800ee06:	9803      	ldr	r0, [sp, #12]
 800ee08:	f8d6 31e0 	ldr.w	r3, [r6, #480]	; 0x1e0
 800ee0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee10:	4630      	mov	r0, r6
 800ee12:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ee16:	462b      	mov	r3, r5
 800ee18:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	442b      	add	r3, r5
 800ee1e:	603b      	str	r3, [r7, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800ee20:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800ee22:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800ee24:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800ee26:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800ee28:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800ee2a:	d304      	bcc.n	800ee36 <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800ee2c:	6963      	ldr	r3, [r4, #20]
 800ee2e:	4413      	add	r3, r2
 800ee30:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	61a3      	str	r3, [r4, #24]
  }
}
 800ee36:	b004      	add	sp, #16
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee3c <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee3c:	6843      	ldr	r3, [r0, #4]
 800ee3e:	221c      	movs	r2, #28
{
 800ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee42:	681b      	ldr	r3, [r3, #0]
{
 800ee44:	b085      	sub	sp, #20
 800ee46:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee48:	2101      	movs	r1, #1
{
 800ee4a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee4c:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800ee4e:	4b15      	ldr	r3, [pc, #84]	; (800eea4 <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800ee50:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800ee52:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee56:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800ee58:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800ee5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800ee5c:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800ee60:	b1bb      	cbz	r3, 800ee92 <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800ee62:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ee66:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800ee68:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ee6a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ee6c:	6861      	ldr	r1, [r4, #4]
 800ee6e:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800ee70:	b18f      	cbz	r7, 800ee96 <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ee72:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800ee74:	4619      	mov	r1, r3
 800ee76:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ee78:	9203      	str	r2, [sp, #12]
 800ee7a:	f007 f9e0 	bl	801623e <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ee7e:	692b      	ldr	r3, [r5, #16]
 800ee80:	2101      	movs	r1, #1
 800ee82:	9a03      	ldr	r2, [sp, #12]
 800ee84:	e9cd 0300 	strd	r0, r3, [sp]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	47b8      	blx	r7
 800ee90:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800ee92:	b005      	add	sp, #20
 800ee94:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800ee96:	688e      	ldr	r6, [r1, #8]
 800ee98:	4620      	mov	r0, r4
 800ee9a:	2101      	movs	r1, #1
 800ee9c:	47b0      	blx	r6
 800ee9e:	60e8      	str	r0, [r5, #12]
}
 800eea0:	e7f7      	b.n	800ee92 <jinit_d_post_controller+0x56>
 800eea2:	bf00      	nop
 800eea4:	0800ec55 	.word	0x0800ec55

0800eea8 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800eea8:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800eeac:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800eeb0:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800eeb2:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800eeb4:	661a      	str	r2, [r3, #96]	; 0x60
}
 800eeb6:	4770      	bx	lr

0800eeb8 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800eebc:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800eec0:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800eec2:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800eec6:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800eec8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800eeca:	4683      	mov	fp, r0
 800eecc:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800eece:	429a      	cmp	r2, r3
 800eed0:	db10      	blt.n	800eef4 <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eed2:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800eed6:	2600      	movs	r6, #0
 800eed8:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800eedc:	9303      	str	r3, [sp, #12]
 800eede:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800eee2:	9a03      	ldr	r2, [sp, #12]
 800eee4:	fb0a 2106 	mla	r1, sl, r6, r2
 800eee8:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800eeec:	42b2      	cmp	r2, r6
 800eeee:	dc31      	bgt.n	800ef54 <sep_upsample+0x9c>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800eef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800eef6:	4658      	mov	r0, fp
  out_rows_avail -= *out_row_ctr;
 800eef8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800eefe:	1af6      	subs	r6, r6, r3
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800ef00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  if (num_rows > out_rows_avail)
 800ef02:	428e      	cmp	r6, r1
 800ef04:	bf28      	it	cs
 800ef06:	460e      	movcs	r6, r1
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800ef08:	f8db 113c 	ldr.w	r1, [fp, #316]	; 0x13c
 800ef0c:	1a89      	subs	r1, r1, r2
 800ef0e:	428e      	cmp	r6, r1
 800ef10:	bf28      	it	cs
 800ef12:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800ef14:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800ef18:	9600      	str	r6, [sp, #0]
 800ef1a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800ef1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ef20:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ef24:	f104 010c 	add.w	r1, r4, #12
 800ef28:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800ef2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4433      	add	r3, r6
 800ef32:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800ef34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ef36:	1b9b      	subs	r3, r3, r6
 800ef38:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800ef3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ef3c:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800ef3e:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800ef42:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800ef44:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800ef46:	bfa2      	ittt	ge
 800ef48:	682b      	ldrge	r3, [r5, #0]
 800ef4a:	3301      	addge	r3, #1
 800ef4c:	602b      	strge	r3, [r5, #0]
}
 800ef4e:	b005      	add	sp, #20
 800ef50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800ef54:	6b58      	ldr	r0, [r3, #52]	; 0x34
      (*upsample->methods[ci]) (cinfo, compptr,
 800ef56:	f103 0904 	add.w	r9, r3, #4
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800ef5a:	682a      	ldr	r2, [r5, #0]
      (*upsample->methods[ci]) (cinfo, compptr,
 800ef5c:	3b24      	subs	r3, #36	; 0x24
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800ef5e:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800ef60:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ef62:	4607      	mov	r7, r0
 800ef64:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800ef68:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800ef6a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ef6e:	4658      	mov	r0, fp
 800ef70:	47b8      	blx	r7
	 ci++, compptr++) {
 800ef72:	464b      	mov	r3, r9
 800ef74:	e7b5      	b.n	800eee2 <sep_upsample+0x2a>

0800ef76 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800ef76:	601a      	str	r2, [r3, #0]
}
 800ef78:	4770      	bx	lr

0800ef7a <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]
}
 800ef7e:	4770      	bx	lr

0800ef80 <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800ef82:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800ef84:	2300      	movs	r3, #0
 800ef86:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800ef8a:	4299      	cmp	r1, r3
 800ef8c:	dc00      	bgt.n	800ef90 <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800ef8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800ef90:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800ef94:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800ef96:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800ef9a:	440c      	add	r4, r1
    while (outptr < outend) {
 800ef9c:	42a1      	cmp	r1, r4
 800ef9e:	d301      	bcc.n	800efa4 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800efa0:	3301      	adds	r3, #1
 800efa2:	e7f0      	b.n	800ef86 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800efa4:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800efa8:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800efac:	f801 6c01 	strb.w	r6, [r1, #-1]
 800efb0:	e7f4      	b.n	800ef9c <h2v1_upsample+0x1c>

0800efb2 <int_upsample>:
{
 800efb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb6:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800efb8:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800efba:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800efbe:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800efc0:	684b      	ldr	r3, [r1, #4]
 800efc2:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800efc4:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800efc6:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800efc8:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800efcc:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800efd0:	f108 33ff 	add.w	r3, r8, #4294967295
 800efd4:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800efd6:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800efda:	42a3      	cmp	r3, r4
 800efdc:	dc02      	bgt.n	800efe4 <int_upsample+0x32>
}
 800efde:	b005      	add	sp, #20
 800efe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800efe4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800efe8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800efea:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800efee:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800eff2:	454b      	cmp	r3, r9
 800eff4:	d30e      	bcc.n	800f014 <int_upsample+0x62>
    if (v_expand > 1) {
 800eff6:	f1b8 0f01 	cmp.w	r8, #1
 800effa:	dd09      	ble.n	800f010 <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800effc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800effe:	463a      	mov	r2, r7
 800f000:	4621      	mov	r1, r4
 800f002:	4638      	mov	r0, r7
 800f004:	9301      	str	r3, [sp, #4]
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	1c63      	adds	r3, r4, #1
 800f00c:	f007 f91f 	bl	801624e <jcopy_sample_rows>
    outrow += v_expand;
 800f010:	4444      	add	r4, r8
 800f012:	e7e0      	b.n	800efd6 <int_upsample+0x24>
	*outptr++ = invalue;
 800f014:	4618      	mov	r0, r3
 800f016:	4652      	mov	r2, sl
 800f018:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800f01c:	f01a fdbc 	bl	8029b98 <memset>
 800f020:	4603      	mov	r3, r0
 800f022:	4453      	add	r3, sl
 800f024:	e7e5      	b.n	800eff2 <int_upsample+0x40>

0800f026 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f026:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f02a:	4605      	mov	r5, r0
 800f02c:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800f02e:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800f030:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f032:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800f036:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f03a:	42a3      	cmp	r3, r4
 800f03c:	dc02      	bgt.n	800f044 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800f03e:	b002      	add	sp, #8
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800f044:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f048:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f04a:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800f04e:	441a      	add	r2, r3
    while (outptr < outend) {
 800f050:	4293      	cmp	r3, r2
 800f052:	d30a      	bcc.n	800f06a <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f054:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f056:	4621      	mov	r1, r4
 800f058:	4632      	mov	r2, r6
 800f05a:	4630      	mov	r0, r6
 800f05c:	e9cd 8300 	strd	r8, r3, [sp]
 800f060:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800f062:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f064:	f007 f8f3 	bl	801624e <jcopy_sample_rows>
    outrow += 2;
 800f068:	e7e5      	b.n	800f036 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f06a:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800f06e:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800f072:	f803 0c01 	strb.w	r0, [r3, #-1]
 800f076:	e7eb      	b.n	800f050 <h2v2_upsample+0x2a>

0800f078 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800f078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f07c:	6843      	ldr	r3, [r0, #4]
 800f07e:	22a0      	movs	r2, #160	; 0xa0
 800f080:	2101      	movs	r1, #1
{
 800f082:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800f088:	4b3f      	ldr	r3, [pc, #252]	; (800f188 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f08a:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f08e:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800f090:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800f092:	4b3e      	ldr	r3, [pc, #248]	; (800f18c <jinit_upsampler+0x114>)
 800f094:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800f096:	2300      	movs	r3, #0
 800f098:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800f09a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f09e:	b12b      	cbz	r3, 800f0ac <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	221a      	movs	r2, #26
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	615a      	str	r2, [r3, #20]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f0ac:	f105 060c 	add.w	r6, r5, #12
 800f0b0:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800f0b4:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800f0b8:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800f0bc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800f19c <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f0c0:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800f0c4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f1a0 <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f0c8:	3574      	adds	r5, #116	; 0x74
 800f0ca:	eb05 0308 	add.w	r3, r5, r8
 800f0ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	dc01      	bgt.n	800f0d8 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800f0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0da:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f0dc:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f0e0:	4343      	muls	r3, r0
 800f0e2:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f0e6:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800f0ea:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f0ee:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800f0f2:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800f0f6:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800f0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0fa:	b932      	cbnz	r2, 800f10a <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800f0fc:	4b24      	ldr	r3, [pc, #144]	; (800f190 <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800f0fe:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800f100:	3758      	adds	r7, #88	; 0x58
 800f102:	3604      	adds	r6, #4
 800f104:	f108 0801 	add.w	r8, r8, #1
 800f108:	e7df      	b.n	800f0ca <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f10a:	fb0c f20e 	mul.w	r2, ip, lr
 800f10e:	fb92 f2f1 	sdiv	r2, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800f112:	455a      	cmp	r2, fp
 800f114:	d103      	bne.n	800f11e <jinit_upsampler+0xa6>
 800f116:	4283      	cmp	r3, r0
 800f118:	d101      	bne.n	800f11e <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800f11a:	4b1e      	ldr	r3, [pc, #120]	; (800f194 <jinit_upsampler+0x11c>)
 800f11c:	e7ef      	b.n	800f0fe <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800f11e:	ebbb 0f42 	cmp.w	fp, r2, lsl #1
 800f122:	d119      	bne.n	800f158 <jinit_upsampler+0xe0>
 800f124:	4283      	cmp	r3, r0
 800f126:	d111      	bne.n	800f14c <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800f128:	4b1b      	ldr	r3, [pc, #108]	; (800f198 <jinit_upsampler+0x120>)
 800f12a:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f12c:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f12e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800f132:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f134:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f138:	f007 f881 	bl	801623e <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f13c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f140:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f142:	2101      	movs	r1, #1
 800f144:	4620      	mov	r0, r4
 800f146:	47d8      	blx	fp
 800f148:	6030      	str	r0, [r6, #0]
 800f14a:	e7d9      	b.n	800f100 <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800f14c:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800f150:	d102      	bne.n	800f158 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800f152:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800f156:	e7e9      	b.n	800f12c <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800f158:	fb9b f1f2 	sdiv	r1, fp, r2
 800f15c:	fb02 b211 	mls	r2, r2, r1, fp
 800f160:	b95a      	cbnz	r2, 800f17a <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800f162:	fb90 f2f3 	sdiv	r2, r0, r3
 800f166:	fb03 0312 	mls	r3, r3, r2, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800f16a:	b933      	cbnz	r3, 800f17a <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800f16c:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800f170:	f888 1000 	strb.w	r1, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800f174:	f888 200a 	strb.w	r2, [r8, #10]
    if (need_buffer) {
 800f178:	e7d8      	b.n	800f12c <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	2227      	movs	r2, #39	; 0x27
 800f17e:	4620      	mov	r0, r4
 800f180:	615a      	str	r2, [r3, #20]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4798      	blx	r3
    if (need_buffer) {
 800f186:	e7d1      	b.n	800f12c <jinit_upsampler+0xb4>
 800f188:	0800eea9 	.word	0x0800eea9
 800f18c:	0800eeb9 	.word	0x0800eeb9
 800f190:	0800ef7b 	.word	0x0800ef7b
 800f194:	0800ef77 	.word	0x0800ef77
 800f198:	0800ef81 	.word	0x0800ef81
 800f19c:	0800efb3 	.word	0x0800efb3
 800f1a0:	0800f027 	.word	0x0800f027

0800f1a4 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800f1a4:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800f1a6:	6803      	ldr	r3, [r0, #0]
{
 800f1a8:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	4669      	mov	r1, sp
 800f1ae:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800f1b0:	b033      	add	sp, #204	; 0xcc
 800f1b2:	f85d fb04 	ldr.w	pc, [sp], #4

0800f1b6 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800f1b6:	2900      	cmp	r1, #0
{
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800f1bc:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800f1be:	da0b      	bge.n	800f1d8 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800f1c0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800f1c2:	b112      	cbz	r2, 800f1ca <emit_message+0x14>
 800f1c4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800f1c6:	2a02      	cmp	r2, #2
 800f1c8:	dd02      	ble.n	800f1d0 <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800f1ca:	68a2      	ldr	r2, [r4, #8]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800f1d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800f1d6:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800f1d8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f1da:	428b      	cmp	r3, r1
 800f1dc:	dbfb      	blt.n	800f1d6 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800f1de:	68a3      	ldr	r3, [r4, #8]
}
 800f1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800f1e4:	4718      	bx	r3

0800f1e6 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800f1e6:	6803      	ldr	r3, [r0, #0]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800f1ec:	615a      	str	r2, [r3, #20]
}
 800f1ee:	4770      	bx	lr

0800f1f0 <format_message>:
{
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800f1f4:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800f1f6:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f1f8:	2b00      	cmp	r3, #0
{
 800f1fa:	b530      	push	{r4, r5, lr}
 800f1fc:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f1fe:	dd1f      	ble.n	800f240 <format_message+0x50>
 800f200:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800f202:	4299      	cmp	r1, r3
 800f204:	db1c      	blt.n	800f240 <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800f206:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f208:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800f20c:	b911      	cbnz	r1, 800f214 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800f20e:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800f210:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f212:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800f214:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800f216:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f21a:	b9fc      	cbnz	r4, 800f25c <format_message+0x6c>
    sprintf(buffer, msgtext,
 800f21c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f21e:	9305      	str	r3, [sp, #20]
 800f220:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f222:	9304      	str	r3, [sp, #16]
 800f224:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f226:	9303      	str	r3, [sp, #12]
 800f228:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f22a:	9302      	str	r3, [sp, #8]
 800f22c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	6a13      	ldr	r3, [r2, #32]
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800f238:	f01a fbb6 	bl	80299a8 <siprintf>
}
 800f23c:	b007      	add	sp, #28
 800f23e:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800f240:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800f242:	2c00      	cmp	r4, #0
 800f244:	d0e3      	beq.n	800f20e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f246:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800f248:	4299      	cmp	r1, r3
 800f24a:	dce0      	bgt.n	800f20e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f24c:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800f250:	429d      	cmp	r5, r3
 800f252:	dbdc      	blt.n	800f20e <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800f254:	1a59      	subs	r1, r3, r1
 800f256:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800f25a:	e7d7      	b.n	800f20c <format_message+0x1c>
    if (ch == '%') {
 800f25c:	2c25      	cmp	r4, #37	; 0x25
 800f25e:	d1da      	bne.n	800f216 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b73      	cmp	r3, #115	; 0x73
 800f264:	d1da      	bne.n	800f21c <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f266:	3218      	adds	r2, #24
}
 800f268:	b007      	add	sp, #28
 800f26a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f26e:	f01a bb9b 	b.w	80299a8 <siprintf>

0800f272 <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800f272:	6803      	ldr	r3, [r0, #0]
{
 800f274:	b510      	push	{r4, lr}
 800f276:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800f27c:	4620      	mov	r0, r4
}
 800f27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800f282:	f7f9 bf31 	b.w	80090e8 <jpeg_destroy>
	...

0800f288 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800f288:	4a0a      	ldr	r2, [pc, #40]	; (800f2b4 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800f28a:	490b      	ldr	r1, [pc, #44]	; (800f2b8 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800f28c:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800f28e:	4a0b      	ldr	r2, [pc, #44]	; (800f2bc <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800f290:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800f292:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800f294:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800f296:	4a0a      	ldr	r2, [pc, #40]	; (800f2c0 <jpeg_std_error+0x38>)
 800f298:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800f29a:	4a0a      	ldr	r2, [pc, #40]	; (800f2c4 <jpeg_std_error+0x3c>)
 800f29c:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800f29e:	4a0a      	ldr	r2, [pc, #40]	; (800f2c8 <jpeg_std_error+0x40>)
 800f2a0:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800f2a2:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800f2a4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800f2a8:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800f2aa:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800f2ae:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800f2b2:	4770      	bx	lr
 800f2b4:	0800f273 	.word	0x0800f273
 800f2b8:	0802e36c 	.word	0x0802e36c
 800f2bc:	0800f1b7 	.word	0x0800f1b7
 800f2c0:	0800f1a5 	.word	0x0800f1a5
 800f2c4:	0800f1f1 	.word	0x0800f1f1
 800f2c8:	0800f1e7 	.word	0x0800f1e7

0800f2cc <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800f2d0:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800f2d4:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800f2d6:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f2da:	3a02      	subs	r2, #2
 800f2dc:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800f2e0:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f2e2:	ed9f 5abc 	vldr	s10, [pc, #752]	; 800f5d4 <jpeg_idct_float+0x308>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f2e6:	ed9f 4abc 	vldr	s8, [pc, #752]	; 800f5d8 <jpeg_idct_float+0x30c>
 800f2ea:	eddf 4abc 	vldr	s9, [pc, #752]	; 800f5dc <jpeg_idct_float+0x310>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f2ee:	eddf 3abc 	vldr	s7, [pc, #752]	; 800f5e0 <jpeg_idct_float+0x314>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f2f2:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800f2f6:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f2f8:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f2fc:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800f300:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f304:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800f308:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800f30c:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f310:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800f314:	ecbc 7a01 	vldmia	ip!, {s14}
 800f318:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f31c:	ea4e 0b09 	orr.w	fp, lr, r9
 800f320:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f328:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f32c:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f330:	ea41 0b0b 	orr.w	fp, r1, fp
 800f334:	ea45 0b0b 	orr.w	fp, r5, fp
 800f338:	ea50 0b0b 	orrs.w	fp, r0, fp
 800f33c:	f040 80bf 	bne.w	800f4be <jpeg_idct_float+0x1f2>
      wsptr[DCTSIZE*0] = dcval;
 800f340:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f344:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f348:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f34c:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f350:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f354:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f358:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f35c:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f360:	45e2      	cmp	sl, ip
 800f362:	d1c6      	bne.n	800f2f2 <jpeg_idct_float+0x26>
 800f364:	1f1c      	subs	r4, r3, #4
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800f366:	4669      	mov	r1, sp
 800f368:	331c      	adds	r3, #28
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f36a:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800f5e4 <jpeg_idct_float+0x318>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f36e:	eddf 4a99 	vldr	s9, [pc, #612]	; 800f5d4 <jpeg_idct_float+0x308>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f372:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800f5d8 <jpeg_idct_float+0x30c>
 800f376:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800f5dc <jpeg_idct_float+0x310>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f37a:	eddf 3a99 	vldr	s7, [pc, #612]	; 800f5e0 <jpeg_idct_float+0x314>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f37e:	edd1 6a00 	vldr	s13, [r1]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f382:	3120      	adds	r1, #32
    tmp10 = z5 + wsptr[4];
 800f384:	ed11 7a04 	vldr	s14, [r1, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f388:	ee76 6aa2 	vadd.f32	s13, s13, s5
    tmp13 = wsptr[2] + wsptr[6];
 800f38c:	ed51 5a02 	vldr	s11, [r1, #-8]
    z11 = wsptr[1] + wsptr[7];
 800f390:	ed11 1a01 	vldr	s2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 800f394:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800f398:	ee77 7a26 	vadd.f32	s15, s14, s13
    outptr = output_buf[ctr] + output_col;
 800f39c:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800f39e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    tmp13 = wsptr[2] + wsptr[6];
 800f3a2:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800f3a6:	18a8      	adds	r0, r5, r2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f3a8:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800f3aa:	ee37 6a25 	vadd.f32	s12, s14, s11
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f3ae:	42a3      	cmp	r3, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f3b0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f3b4:	eeb0 2a46 	vmov.f32	s4, s12
    tmp0 = tmp10 + tmp13;
 800f3b8:	ee77 5a86 	vadd.f32	s11, s15, s12
    tmp3 = tmp10 - tmp13;
 800f3bc:	ee37 5ac6 	vsub.f32	s10, s15, s12
    z13 = wsptr[5] + wsptr[3];
 800f3c0:	ed51 7a03 	vldr	s15, [r1, #-12]
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f3c4:	ee97 2a24 	vfnms.f32	s4, s14, s9
    z13 = wsptr[5] + wsptr[3];
 800f3c8:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 800f3cc:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800f3d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800f3d4:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800f3d8:	ee36 6a82 	vadd.f32	s12, s13, s4
    tmp2 = tmp11 - tmp12;
 800f3dc:	ee76 6ac2 	vsub.f32	s13, s13, s4
    z11 = wsptr[1] + wsptr[7];
 800f3e0:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800f3e4:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800f3e8:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800f3ec:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f3f0:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f3f4:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f3f8:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f3fc:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f400:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800f404:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800f408:	eef0 1a67 	vmov.f32	s3, s15
 800f40c:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f410:	ee35 2a81 	vadd.f32	s4, s11, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f414:	ee75 5ac1 	vsub.f32	s11, s11, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f418:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f41c:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tmp4 = tmp10 - tmp5;
 800f420:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f424:	ee12 2a10 	vmov	r2, s4
 800f428:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f42c:	5cb2      	ldrb	r2, [r6, r2]
 800f42e:	55ea      	strb	r2, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f430:	ee15 2a90 	vmov	r2, s11
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f434:	ee76 5a27 	vadd.f32	s11, s12, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f438:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f43c:	ee36 6a67 	vsub.f32	s12, s12, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f440:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f444:	5cb2      	ldrb	r2, [r6, r2]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f446:	eefd 7ac6 	vcvt.s32.f32	s15, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f44a:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f44c:	ee15 2a90 	vmov	r2, s11
 800f450:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f454:	5cb2      	ldrb	r2, [r6, r2]
 800f456:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f458:	ee17 2a90 	vmov	r2, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f45c:	ee76 7aa1 	vadd.f32	s15, s13, s3
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f460:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f464:	ee76 6ae1 	vsub.f32	s13, s13, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f46c:	5cb2      	ldrb	r2, [r6, r2]
 800f46e:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f470:	ee17 2a90 	vmov	r2, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f474:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f478:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f47c:	5cb2      	ldrb	r2, [r6, r2]
 800f47e:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f480:	ee17 2a90 	vmov	r2, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f484:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f488:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f48c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f490:	5cb2      	ldrb	r2, [r6, r2]
 800f492:	7142      	strb	r2, [r0, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f494:	ee17 2a90 	vmov	r2, s15
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f498:	ee75 7a47 	vsub.f32	s15, s10, s14
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f49c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f4a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f4a4:	5cb2      	ldrb	r2, [r6, r2]
 800f4a6:	70c2      	strb	r2, [r0, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f4a8:	ee17 2a90 	vmov	r2, s15
 800f4ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f4b0:	5cb2      	ldrb	r2, [r6, r2]
 800f4b2:	7102      	strb	r2, [r0, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f4b4:	f47f af63 	bne.w	800f37e <jpeg_idct_float+0xb2>
  }
}
 800f4b8:	b041      	add	sp, #260	; 0x104
 800f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f4be:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f4c2:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f4c6:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f4ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f4ce:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f4d2:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f4d6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f4da:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f4de:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f4e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f4e6:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f4ea:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f4ee:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f4f2:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800f4f6:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f4fa:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f4fe:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f502:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f506:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f50a:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f50e:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800f512:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f516:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f51a:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800f51e:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800f522:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f526:	ee07 ea90 	vmov	s15, lr
 800f52a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f52e:	ee07 8a90 	vmov	s15, r8
 800f532:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f536:	ee07 1a90 	vmov	s15, r1
 800f53a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f53e:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f542:	ee07 0a10 	vmov	s14, r0
 800f546:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f54a:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f54e:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800f552:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f556:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800f55a:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800f55e:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800f562:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f566:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f56a:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800f56e:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f572:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f576:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800f57a:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f57e:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f582:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800f586:	eeb0 6a67 	vmov.f32	s12, s15
 800f58a:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800f58e:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800f592:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800f596:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800f59a:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800f59e:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800f5a2:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800f5a6:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800f5aa:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800f5ae:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800f5b2:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800f5b6:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800f5ba:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800f5be:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800f5c2:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800f5c6:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800f5ca:	ee73 7a47 	vsub.f32	s15, s6, s14
 800f5ce:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
    wsptr++;
 800f5d2:	e6c5      	b.n	800f360 <jpeg_idct_float+0x94>
 800f5d4:	3fb504f3 	.word	0x3fb504f3
 800f5d8:	3f8a8bd4 	.word	0x3f8a8bd4
 800f5dc:	3fec835e 	.word	0x3fec835e
 800f5e0:	40273d75 	.word	0x40273d75
 800f5e4:	43008000 	.word	0x43008000

0800f5e8 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ec:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800f5ee:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f5f0:	3a02      	subs	r2, #2
{
 800f5f2:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f5f4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800f5f8:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f5fc:	f105 0320 	add.w	r3, r5, #32
 800f600:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800f602:	ab04      	add	r3, sp, #16
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f604:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800f608:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f60a:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f60e:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800f612:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f616:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800f61a:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800f61e:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f622:	f855 0b04 	ldr.w	r0, [r5], #4
 800f626:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800f62a:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f62c:	ea46 000c 	orr.w	r0, r6, ip
 800f630:	4338      	orrs	r0, r7
 800f632:	ea4a 0000 	orr.w	r0, sl, r0
 800f636:	4308      	orrs	r0, r1
 800f638:	ea4e 0000 	orr.w	r0, lr, r0
 800f63c:	ea58 0000 	orrs.w	r0, r8, r0
 800f640:	d13f      	bne.n	800f6c2 <jpeg_idct_ifast+0xda>
      wsptr[DCTSIZE*0] = dcval;
 800f642:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f646:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f648:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f64a:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f64c:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f64e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f652:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f656:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f65a:	9903      	ldr	r1, [sp, #12]
 800f65c:	42a9      	cmp	r1, r5
 800f65e:	d1d1      	bne.n	800f604 <jpeg_idct_ifast+0x1c>
 800f660:	9b02      	ldr	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800f662:	ad04      	add	r5, sp, #16
 800f664:	f1a3 0b04 	sub.w	fp, r3, #4
 800f668:	331c      	adds	r3, #28
 800f66a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f66c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800f66e:	f85b af04 	ldr.w	sl, [fp, #4]!
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f672:	69ea      	ldr	r2, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 800f674:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800f678:	e9d5 e801 	ldrd	lr, r8, [r5, #4]
 800f67c:	e9d5 4703 	ldrd	r4, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f680:	ea4e 0608 	orr.w	r6, lr, r8
 800f684:	4326      	orrs	r6, r4
 800f686:	e9d5 3c05 	ldrd	r3, ip, [r5, #20]
 800f68a:	433e      	orrs	r6, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800f68c:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f690:	431e      	orrs	r6, r3
 800f692:	ea46 060c 	orr.w	r6, r6, ip
 800f696:	4316      	orrs	r6, r2
 800f698:	d17e      	bne.n	800f798 <jpeg_idct_ifast+0x1b0>
				  & RANGE_MASK];
 800f69a:	f3c1 1149 	ubfx	r1, r1, #5, #10
      
      outptr[0] = dcval;
 800f69e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800f6a0:	f819 3001 	ldrb.w	r3, [r9, r1]
      outptr[0] = dcval;
 800f6a4:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800f6a8:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800f6aa:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800f6ac:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800f6ae:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800f6b0:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800f6b2:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800f6b4:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f6b6:	9b03      	ldr	r3, [sp, #12]
 800f6b8:	455b      	cmp	r3, fp
 800f6ba:	d1d7      	bne.n	800f66c <jpeg_idct_ifast+0x84>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800f6bc:	b045      	add	sp, #276	; 0x114
 800f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f6c2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800f6c4:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f6c8:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800f6ca:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f6ce:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800f6d2:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f6d6:	eb0a 0004 	add.w	r0, sl, r4
    tmp11 = tmp0 - tmp2;
 800f6da:	eba4 040a 	sub.w	r4, r4, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f6de:	ebac 0b0e 	sub.w	fp, ip, lr
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f6e2:	eb0c 0a0e 	add.w	sl, ip, lr
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f6e6:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f6ea:	eb00 0e0a 	add.w	lr, r0, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f6ee:	fb0c fb0b 	mul.w	fp, ip, fp
 800f6f2:	ebca 2b2b 	rsb	fp, sl, fp, asr #8
    tmp3 = tmp10 - tmp13;
 800f6f6:	eba0 0a0a 	sub.w	sl, r0, sl
    tmp2 = tmp11 - tmp12;
 800f6fa:	eba4 000b 	sub.w	r0, r4, fp
    tmp1 = tmp11 + tmp12;
 800f6fe:	eb04 0c0b 	add.w	ip, r4, fp
    tmp2 = tmp11 - tmp12;
 800f702:	9001      	str	r0, [sp, #4]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f704:	69e8      	ldr	r0, [r5, #28]
 800f706:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f708:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800f70a:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f70c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800f710:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f712:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800f716:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f71a:	eb07 0801 	add.w	r8, r7, r1
    z10 = tmp6 - tmp5;
 800f71e:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800f720:	1837      	adds	r7, r6, r0
    z12 = tmp4 - tmp7;
 800f722:	1a30      	subs	r0, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f724:	180e      	adds	r6, r1, r0
    z12 = tmp4 - tmp7;
 800f726:	4604      	mov	r4, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f728:	f240 10d9 	movw	r0, #473	; 0x1d9
    tmp7 = z11 + z13;		/* phase 5 */
 800f72c:	eb08 0b07 	add.w	fp, r8, r7
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f730:	eba7 0708 	sub.w	r7, r7, r8
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f734:	4346      	muls	r6, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f736:	f46f 7027 	mvn.w	r0, #668	; 0x29c
 800f73a:	4341      	muls	r1, r0
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f73c:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800f740:	4347      	muls	r7, r0
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f742:	f240 1015 	movw	r0, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f746:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f748:	4344      	muls	r4, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f74a:	eb01 2126 	add.w	r1, r1, r6, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f74e:	1220      	asrs	r0, r4, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f750:	eba1 010b 	sub.w	r1, r1, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f754:	eba0 2026 	sub.w	r0, r0, r6, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800f758:	eb0e 060b 	add.w	r6, lr, fp
    tmp5 = tmp11 - tmp6;
 800f75c:	ebc1 2727 	rsb	r7, r1, r7, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800f760:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800f764:	ebae 060b 	sub.w	r6, lr, fp
    tmp4 = tmp10 + tmp5;
 800f768:	4438      	add	r0, r7
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800f76a:	f8c3 60dc 	str.w	r6, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800f76e:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800f772:	ebac 0101 	sub.w	r1, ip, r1
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800f776:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800f778:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800f77c:	9901      	ldr	r1, [sp, #4]
 800f77e:	4439      	add	r1, r7
 800f780:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800f782:	9901      	ldr	r1, [sp, #4]
 800f784:	1bcc      	subs	r4, r1, r7
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800f786:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800f78a:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800f78e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800f792:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800f794:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800f796:	e760      	b.n	800f65a <jpeg_idct_ifast+0x72>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800f798:	187e      	adds	r6, r7, r1
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800f79a:	1bc9      	subs	r1, r1, r7
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800f79c:	eb08 070c 	add.w	r7, r8, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800f7a0:	eba8 080c 	sub.w	r8, r8, ip
 800f7a4:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
 800f7a8:	fb0c f808 	mul.w	r8, ip, r8
    tmp0 = tmp10 + tmp13;
 800f7ac:	eb06 0c07 	add.w	ip, r6, r7
    tmp3 = tmp10 - tmp13;
 800f7b0:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800f7b2:	ebc7 2828 	rsb	r8, r7, r8, asr #8
    tmp1 = tmp11 + tmp12;
 800f7b6:	eb01 0708 	add.w	r7, r1, r8
    tmp2 = tmp11 - tmp12;
 800f7ba:	eba1 0108 	sub.w	r1, r1, r8
 800f7be:	9101      	str	r1, [sp, #4]
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800f7c0:	18e1      	adds	r1, r4, r3
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800f7c2:	1b1b      	subs	r3, r3, r4
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800f7c4:	eb0e 0402 	add.w	r4, lr, r2
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800f7c8:	ebae 0202 	sub.w	r2, lr, r2
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800f7cc:	9102      	str	r1, [sp, #8]
    tmp7 = z11 + z13;		/* phase 5 */
 800f7ce:	eb01 0804 	add.w	r8, r1, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f7d2:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f7d6:	eb03 0e02 	add.w	lr, r3, r2
 800f7da:	fb01 fe0e 	mul.w	lr, r1, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f7de:	f46f 7127 	mvn.w	r1, #668	; 0x29c
 800f7e2:	434b      	muls	r3, r1
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f7e4:	9902      	ldr	r1, [sp, #8]
 800f7e6:	1a64      	subs	r4, r4, r1
 800f7e8:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f7ec:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f7ee:	434c      	muls	r4, r1
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f7f0:	f240 1115 	movw	r1, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f7f4:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f7f8:	434a      	muls	r2, r1
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800f7fa:	994e      	ldr	r1, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f7fc:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f800:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800f802:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f806:	eba2 222e 	sub.w	r2, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800f80a:	eb0c 0e08 	add.w	lr, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800f80e:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 800f812:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    tmp4 = tmp10 + tmp5;
 800f816:	4422      	add	r2, r4
			    & RANGE_MASK];
 800f818:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800f81c:	f819 e00e 	ldrb.w	lr, [r9, lr]
 800f820:	f80a e001 	strb.w	lr, [sl, r1]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800f824:	f819 c00c 	ldrb.w	ip, [r9, ip]
 800f828:	f880 c007 	strb.w	ip, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800f82c:	eb07 0c03 	add.w	ip, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800f830:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800f832:	f3cc 1c49 	ubfx	ip, ip, #5, #10
			    & RANGE_MASK];
 800f836:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800f83a:	f819 c00c 	ldrb.w	ip, [r9, ip]
 800f83e:	f880 c001 	strb.w	ip, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800f842:	f819 3007 	ldrb.w	r3, [r9, r7]
 800f846:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800f848:	9b01      	ldr	r3, [sp, #4]
 800f84a:	4423      	add	r3, r4
			    & RANGE_MASK];
 800f84c:	f3c3 1349 	ubfx	r3, r3, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800f850:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f854:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800f856:	9b01      	ldr	r3, [sp, #4]
 800f858:	1b19      	subs	r1, r3, r4
			    & RANGE_MASK];
 800f85a:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800f85e:	f819 3001 	ldrb.w	r3, [r9, r1]
 800f862:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800f864:	18b3      	adds	r3, r6, r2
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800f866:	1ab6      	subs	r6, r6, r2
			    & RANGE_MASK];
 800f868:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800f86c:	f3c6 1649 	ubfx	r6, r6, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800f870:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f874:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800f876:	f819 3006 	ldrb.w	r3, [r9, r6]
 800f87a:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f87c:	e71b      	b.n	800f6b6 <jpeg_idct_ifast+0xce>
	...

0800f880 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f884:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800f886:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 800f888:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800f88a:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f88c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800f890:	3380      	adds	r3, #128	; 0x80
 800f892:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f894:	1e93      	subs	r3, r2, #2
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	f105 0320 	add.w	r3, r5, #32
 800f89c:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f89e:	9b00      	ldr	r3, [sp, #0]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800f8a0:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800f8a2:	f855 0b04 	ldr.w	r0, [r5], #4
 800f8a6:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f8a8:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 800f8ac:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f8b0:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 800f8b4:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f8b8:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 800f8bc:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800f8c0:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800f8c4:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800f8c8:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f8ca:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800f8ce:	9200      	str	r2, [sp, #0]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f8d0:	ea4e 0000 	orr.w	r0, lr, r0
 800f8d4:	4330      	orrs	r0, r6
 800f8d6:	ea48 0000 	orr.w	r0, r8, r0
 800f8da:	4320      	orrs	r0, r4
 800f8dc:	ea59 0000 	orrs.w	r0, r9, r0
 800f8e0:	d146      	bne.n	800f970 <jpeg_idct_islow+0xf0>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800f8e2:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 800f8e4:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f8e8:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f8ea:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f8ec:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f8ee:	67cb      	str	r3, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f8f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f8f4:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f8f8:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f8fc:	9b04      	ldr	r3, [sp, #16]
 800f8fe:	42ab      	cmp	r3, r5
 800f900:	d1cd      	bne.n	800f89e <jpeg_idct_islow+0x1e>
 800f902:	9b03      	ldr	r3, [sp, #12]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800f904:	ad06      	add	r5, sp, #24
 800f906:	f1a3 0904 	sub.w	r9, r3, #4
 800f90a:	331c      	adds	r3, #28
 800f90c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f90e:	f859 3f04 	ldr.w	r3, [r9, #4]!
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f912:	f8d5 b01c 	ldr.w	fp, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	9a00      	ldr	r2, [sp, #0]
 800f91a:	9b50      	ldr	r3, [sp, #320]	; 0x140
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800f91c:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 800f920:	e9d5 e603 	ldrd	lr, r6, [r5, #12]
    outptr = output_buf[ctr] + output_col;
 800f924:	4413      	add	r3, r2
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f926:	ea4a 0200 	orr.w	r2, sl, r0
 800f92a:	ea42 020e 	orr.w	r2, r2, lr
 800f92e:	e9d5 8405 	ldrd	r8, r4, [r5, #20]
 800f932:	4332      	orrs	r2, r6
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800f934:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f938:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800f93c:	3110      	adds	r1, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f93e:	4322      	orrs	r2, r4
 800f940:	ea52 020b 	orrs.w	r2, r2, fp
 800f944:	f040 8092 	bne.w	800fa6c <jpeg_idct_islow+0x1ec>
				  & RANGE_MASK];
 800f948:	f3c1 1149 	ubfx	r1, r1, #5, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800f94c:	9a01      	ldr	r2, [sp, #4]

      outptr[0] = dcval;
 800f94e:	9800      	ldr	r0, [sp, #0]
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800f950:	5c52      	ldrb	r2, [r2, r1]
      outptr[0] = dcval;
 800f952:	9950      	ldr	r1, [sp, #320]	; 0x140
 800f954:	5442      	strb	r2, [r0, r1]
      outptr[1] = dcval;
 800f956:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800f958:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800f95a:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800f95c:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800f95e:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800f960:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800f962:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f964:	9b05      	ldr	r3, [sp, #20]
 800f966:	454b      	cmp	r3, r9
 800f968:	d1d1      	bne.n	800f90e <jpeg_idct_islow+0x8e>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800f96a:	b047      	add	sp, #284	; 0x11c
 800f96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f970:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800f972:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 800f976:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f978:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f97a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f97e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f982:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800f984:	183c      	adds	r4, r7, r0
 800f986:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800f988:	f641 027e 	movw	r2, #6270	; 0x187e
 800f98c:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800f990:	4a74      	ldr	r2, [pc, #464]	; (800fb64 <jpeg_idct_islow+0x2e4>)
 800f992:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f996:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800f998:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 800f99a:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 800f99e:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 800f9a2:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 800f9a6:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f9a8:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 800f9ac:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 800f9ae:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f9b0:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f9b2:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f9b6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f9ba:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f9be:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f9c2:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 800f9c4:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800f9c6:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f9ca:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 800f9ce:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 800f9d2:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800f9d6:	1930      	adds	r0, r6, r4
 800f9d8:	4350      	muls	r0, r2
    z2 += z1;
 800f9da:	4a63      	ldr	r2, [pc, #396]	; (800fb68 <jpeg_idct_islow+0x2e8>)
 800f9dc:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 800f9e0:	4a62      	ldr	r2, [pc, #392]	; (800fb6c <jpeg_idct_islow+0x2ec>)
 800f9e2:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800f9e6:	eb09 040a 	add.w	r4, r9, sl
 800f9ea:	4a61      	ldr	r2, [pc, #388]	; (800fb70 <jpeg_idct_islow+0x2f0>)
 800f9ec:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 800f9ee:	f640 128e 	movw	r2, #2446	; 0x98e
 800f9f2:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 800f9f6:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 800f9f8:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 800f9fc:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fa00:	4a5c      	ldr	r2, [pc, #368]	; (800fb74 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 800fa02:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fa06:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 800fa0a:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fa0e:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 800fa12:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 800fa14:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 800fa16:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 800fa1a:	f246 2854 	movw	r8, #25172	; 0x6254
 800fa1e:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fa22:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fa26:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fa2a:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fa2c:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fa30:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fa34:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fa38:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fa3c:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fa40:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fa42:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fa44:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fa46:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fa48:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fa4a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fa4e:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fa50:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fa52:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fa54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800fa58:	9b02      	ldr	r3, [sp, #8]
 800fa5a:	444b      	add	r3, r9
 800fa5c:	12db      	asrs	r3, r3, #11
 800fa5e:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 800fa60:	9b02      	ldr	r3, [sp, #8]
 800fa62:	eba3 0309 	sub.w	r3, r3, r9
 800fa66:	12db      	asrs	r3, r3, #11
 800fa68:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 800fa6a:	e747      	b.n	800f8fc <jpeg_idct_islow+0x7c>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800fa6c:	1902      	adds	r2, r0, r4
 800fa6e:	f241 1751 	movw	r7, #4433	; 0x1151
 800fa72:	437a      	muls	r2, r7
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800fa74:	f641 077e 	movw	r7, #6270	; 0x187e
 800fa78:	fb07 2000 	mla	r0, r7, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800fa7c:	4f39      	ldr	r7, [pc, #228]	; (800fb64 <jpeg_idct_islow+0x2e4>)
 800fa7e:	fb07 2204 	mla	r2, r7, r4, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 800fa82:	1874      	adds	r4, r6, r1
    tmp1 = (z2 - z3) << CONST_BITS;
 800fa84:	1b89      	subs	r1, r1, r6
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800fa86:	f242 57a1 	movw	r7, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 800fa8a:	eb00 3644 	add.w	r6, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 800fa8e:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 800fa92:	eb0e 040b 	add.w	r4, lr, fp
    tmp10 = tmp0 + tmp2;
 800fa96:	9602      	str	r6, [sp, #8]
    tmp11 = tmp1 + tmp3;
 800fa98:	eb02 3641 	add.w	r6, r2, r1, lsl #13
    tmp13 = tmp0 - tmp2;
 800fa9c:	9003      	str	r0, [sp, #12]
    z3 = tmp1 + tmp3;
 800fa9e:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 800faa2:	ebc2 3241 	rsb	r2, r2, r1, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800faa6:	1821      	adds	r1, r4, r0
    tmp12 = tmp1 - tmp3;
 800faa8:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800faaa:	4379      	muls	r1, r7
    z2 += z1;
 800faac:	4f2e      	ldr	r7, [pc, #184]	; (800fb68 <jpeg_idct_islow+0x2e8>)
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800faae:	9a00      	ldr	r2, [sp, #0]
    z2 += z1;
 800fab0:	fb07 1404 	mla	r4, r7, r4, r1
    z3 += z1;
 800fab4:	4f2d      	ldr	r7, [pc, #180]	; (800fb6c <jpeg_idct_islow+0x2ec>)
 800fab6:	fb07 1100 	mla	r1, r7, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800faba:	eb0a 000b 	add.w	r0, sl, fp
 800fabe:	4f2c      	ldr	r7, [pc, #176]	; (800fb70 <jpeg_idct_islow+0x2f0>)
 800fac0:	4378      	muls	r0, r7
    tmp0 += z1 + z2;
 800fac2:	f640 178e 	movw	r7, #2446	; 0x98e
 800fac6:	eb04 0c00 	add.w	ip, r4, r0
    tmp3 += z1 + z3;
 800faca:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 800facc:	fb07 cc0b 	mla	ip, r7, fp, ip
    tmp3 += z1 + z3;
 800fad0:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fad4:	4f27      	ldr	r7, [pc, #156]	; (800fb74 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 800fad6:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fada:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 800fade:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fae2:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fae6:	9f02      	ldr	r7, [sp, #8]
    tmp1 += z1 + z3;
 800fae8:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 800faea:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 800faec:	fb0b 1108 	mla	r1, fp, r8, r1
    tmp2 += z1 + z2;
 800faf0:	f246 2854 	movw	r8, #25172	; 0x6254
 800faf4:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800faf8:	eb07 0e00 	add.w	lr, r7, r0
 800fafc:	9f01      	ldr	r7, [sp, #4]
			    & RANGE_MASK];
 800fafe:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800fb02:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800fb06:	9f50      	ldr	r7, [sp, #320]	; 0x140
 800fb08:	f802 e007 	strb.w	lr, [r2, r7]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800fb0c:	9f02      	ldr	r7, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800fb0e:	9a04      	ldr	r2, [sp, #16]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800fb10:	1a3f      	subs	r7, r7, r0
 800fb12:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 800fb14:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800fb18:	5dc0      	ldrb	r0, [r0, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800fb1a:	9f01      	ldr	r7, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800fb1c:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800fb1e:	1930      	adds	r0, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800fb20:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 800fb22:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800fb26:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800fb2a:	5c38      	ldrb	r0, [r7, r0]
 800fb2c:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800fb2e:	5db8      	ldrb	r0, [r7, r6]
 800fb30:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800fb32:	1850      	adds	r0, r2, r1
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fb34:	1a52      	subs	r2, r2, r1
			    & RANGE_MASK];
 800fb36:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800fb3a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800fb3e:	5c38      	ldrb	r0, [r7, r0]
 800fb40:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fb42:	5cba      	ldrb	r2, [r7, r2]
 800fb44:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800fb46:	9a03      	ldr	r2, [sp, #12]
 800fb48:	4462      	add	r2, ip
			    & RANGE_MASK];
 800fb4a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800fb4e:	5cba      	ldrb	r2, [r7, r2]
 800fb50:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800fb52:	9a03      	ldr	r2, [sp, #12]
 800fb54:	eba2 020c 	sub.w	r2, r2, ip
			    & RANGE_MASK];
 800fb58:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800fb5c:	5cba      	ldrb	r2, [r7, r2]
 800fb5e:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fb60:	e700      	b.n	800f964 <jpeg_idct_islow+0xe4>
 800fb62:	bf00      	nop
 800fb64:	ffffc4df 	.word	0xffffc4df
 800fb68:	ffffc13b 	.word	0xffffc13b
 800fb6c:	fffff384 	.word	0xfffff384
 800fb70:	ffffe333 	.word	0xffffe333
 800fb74:	ffffadfd 	.word	0xffffadfd

0800fb78 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	b0b9      	sub	sp, #228	; 0xe4
 800fb7e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fb80:	1e96      	subs	r6, r2, #2
 800fb82:	9303      	str	r3, [sp, #12]
 800fb84:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fb86:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800fb8a:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fb8e:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800fb92:	f102 030c 	add.w	r3, r2, #12
 800fb96:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fb98:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fb9c:	f640 2112 	movw	r1, #2578	; 0xa12
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fba0:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fba4:	f642 09c6 	movw	r9, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fba8:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800fbac:	f10c 0c04 	add.w	ip, ip, #4
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fbb0:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fbb2:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fbb6:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 800fbba:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fbbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbc0:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fbc2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800fbc4:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fbc6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800fbca:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fbce:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 800fbd2:	435a      	muls	r2, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fbd4:	f641 4337 	movw	r3, #7223	; 0x1c37
 800fbd8:	ebae 0702 	sub.w	r7, lr, r2
 800fbdc:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fbde:	eba4 030e 	sub.w	r3, r4, lr
 800fbe2:	434b      	muls	r3, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800fbe4:	9901      	ldr	r1, [sp, #4]
 800fbe6:	18f8      	adds	r0, r7, r3
 800fbe8:	4408      	add	r0, r1
 800fbea:	4985      	ldr	r1, [pc, #532]	; (800fe00 <jpeg_idct_7x7+0x288>)
 800fbec:	fb01 010e 	mla	r1, r1, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fbf0:	18a0      	adds	r0, r4, r2
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800fbf2:	9102      	str	r1, [sp, #8]
    tmp0 = z1 + z3;
 800fbf4:	18a1      	adds	r1, r4, r2
 800fbf6:	9104      	str	r1, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fbf8:	9901      	ldr	r1, [sp, #4]
 800fbfa:	fb09 1100 	mla	r1, r9, r0, r1
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fbfe:	f46f 701f 	mvn.w	r0, #636	; 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fc02:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fc06:	fb00 1202 	mla	r2, r0, r2, r1
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fc0a:	487e      	ldr	r0, [pc, #504]	; (800fe04 <jpeg_idct_7x7+0x28c>)
 800fc0c:	fb00 1104 	mla	r1, r0, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fc10:	6a2c      	ldr	r4, [r5, #32]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fc12:	443a      	add	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fc14:	6e2f      	ldr	r7, [r5, #96]	; 0x60
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fc16:	4419      	add	r1, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fc18:	f9b6 3010 	ldrsh.w	r3, [r6, #16]

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fc1c:	f641 50ef 	movw	r0, #7663	; 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fc20:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fc22:	f9b6 4030 	ldrsh.w	r4, [r6, #48]	; 0x30
 800fc26:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fc28:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fc2c:	eb03 0b04 	add.w	fp, r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fc30:	fb07 f909 	mul.w	r9, r7, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fc34:	1b1f      	subs	r7, r3, r4
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fc36:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fc3a:	f240 5073 	movw	r0, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fc3e:	444b      	add	r3, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fc40:	444c      	add	r4, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fc42:	4347      	muls	r7, r0
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fc44:	4870      	ldr	r0, [pc, #448]	; (800fe08 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 800fc46:	ebab 0a07 	sub.w	sl, fp, r7
    tmp1 += tmp2;
 800fc4a:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fc4c:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fc50:	4344      	muls	r4, r0
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fc52:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fc56:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800fc5a:	4427      	add	r7, r4
    tmp0 += z2;
 800fc5c:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fc5e:	fb0b 3309 	mla	r3, fp, r9, r3
 800fc62:	4423      	add	r3, r4

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fc64:	eb02 040a 	add.w	r4, r2, sl
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fc68:	eba2 020a 	sub.w	r2, r2, sl
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fc6c:	12e4      	asrs	r4, r4, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fc6e:	12d2      	asrs	r2, r2, #11
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fc70:	f84c 4c04 	str.w	r4, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fc74:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800fc78:	9a02      	ldr	r2, [sp, #8]
 800fc7a:	443a      	add	r2, r7
 800fc7c:	12d2      	asrs	r2, r2, #11
 800fc7e:	f8cc 2018 	str.w	r2, [ip, #24]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fc82:	9a02      	ldr	r2, [sp, #8]
 800fc84:	1bd0      	subs	r0, r2, r7
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fc86:	18ca      	adds	r2, r1, r3
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fc88:	1ac9      	subs	r1, r1, r3
    z2 -= tmp0;
 800fc8a:	9b04      	ldr	r3, [sp, #16]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fc8c:	12d2      	asrs	r2, r2, #11
    z2 -= tmp0;
 800fc8e:	ebae 0e03 	sub.w	lr, lr, r3
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800fc92:	f642 5341 	movw	r3, #11585	; 0x2d41
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fc96:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fc9a:	12c0      	asrs	r0, r0, #11
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800fc9c:	9a01      	ldr	r2, [sp, #4]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fc9e:	12c9      	asrs	r1, r1, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fca0:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800fca4:	fb03 230e 	mla	r3, r3, lr, r2
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fca8:	f8cc 106c 	str.w	r1, [ip, #108]	; 0x6c
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 800fcac:	12db      	asrs	r3, r3, #11
 800fcae:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800fcb2:	9b05      	ldr	r3, [sp, #20]
 800fcb4:	42b3      	cmp	r3, r6
 800fcb6:	f47f af6f 	bne.w	800fb98 <jpeg_idct_7x7+0x20>
 800fcba:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 800fcbc:	ac07      	add	r4, sp, #28
 800fcbe:	f1a3 0904 	sub.w	r9, r3, #4
 800fcc2:	3318      	adds	r3, #24
 800fcc4:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fcc6:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 800fcca:	341c      	adds	r4, #28
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fccc:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 800fcd0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800fcd2:	9303      	str	r3, [sp, #12]
 800fcd4:	189e      	adds	r6, r3, r2
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fcd6:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 800fcda:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fcde:	9301      	str	r3, [sp, #4]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fce0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 800fce4:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fce8:	eba3 0c01 	sub.w	ip, r3, r1
 800fcec:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800fcf0:	4f43      	ldr	r7, [pc, #268]	; (800fe00 <jpeg_idct_7x7+0x288>)
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fcf2:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fcf6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 800fcfa:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fcfe:	1aea      	subs	r2, r5, r3
 800fd00:	f640 2312 	movw	r3, #2578	; 0xa12
    z3 = (INT32) wsptr[5];
 800fd04:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fd08:	435a      	muls	r2, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800fd0a:	9b01      	ldr	r3, [sp, #4]
 800fd0c:	eb0c 0002 	add.w	r0, ip, r2
 800fd10:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 800fd14:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800fd18:	fb07 0003 	mla	r0, r7, r3, r0
    tmp0 = z1 + z3;
 800fd1c:	186b      	adds	r3, r5, r1
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fd1e:	f642 07c6 	movw	r7, #10438	; 0x28c6
    tmp0 = z1 + z3;
 800fd22:	9304      	str	r3, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fd24:	437b      	muls	r3, r7
 800fd26:	9f01      	ldr	r7, [sp, #4]
 800fd28:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fd2c:	f46f 771f 	mvn.w	r7, #636	; 0x27c
 800fd30:	fb07 3101 	mla	r1, r7, r1, r3
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fd34:	4f33      	ldr	r7, [pc, #204]	; (800fe04 <jpeg_idct_7x7+0x28c>)
 800fd36:	fb07 3305 	mla	r3, r7, r5, r3
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fd3a:	f240 5773 	movw	r7, #1395	; 0x573
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fd3e:	4461      	add	r1, ip
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fd40:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 800fd42:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fd46:	9302      	str	r3, [sp, #8]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fd48:	eb02 0b0a 	add.w	fp, r2, sl
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fd4c:	eba2 050a 	sub.w	r5, r2, sl
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fd50:	f641 53ef 	movw	r3, #7663	; 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fd54:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fd56:	44f2      	add	sl, lr
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fd58:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fd5c:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fd5e:	437d      	muls	r5, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fd60:	4f29      	ldr	r7, [pc, #164]	; (800fe08 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 800fd62:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 800fd66:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fd68:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fd6c:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fd70:	9f03      	ldr	r7, [sp, #12]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fd72:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fd76:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800fd7a:	4455      	add	r5, sl
    tmp0 += z2;
 800fd7c:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fd7e:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fd82:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fd86:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fd8a:	4452      	add	r2, sl
			    & RANGE_MASK];
 800fd8c:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 800fd90:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fd94:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800fd98:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fd9c:	f818 1001 	ldrb.w	r1, [r8, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fda0:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fda2:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800fda4:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fda6:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 800fda8:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 800fdac:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800fdb0:	f818 1001 	ldrb.w	r1, [r8, r1]
 800fdb4:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fdb6:	f818 1000 	ldrb.w	r1, [r8, r0]
 800fdba:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fdbc:	1899      	adds	r1, r3, r2
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fdbe:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 800fdc0:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 800fdc4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fdc8:	f818 1001 	ldrb.w	r1, [r8, r1]
 800fdcc:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fdce:	f818 3003 	ldrb.w	r3, [r8, r3]
 800fdd2:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 800fdd4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800fdd8:	9a04      	ldr	r2, [sp, #16]
 800fdda:	1a9b      	subs	r3, r3, r2
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800fddc:	f642 5241 	movw	r2, #11585	; 0x2d41
 800fde0:	4353      	muls	r3, r2
 800fde2:	9a01      	ldr	r2, [sp, #4]
 800fde4:	eb03 3342 	add.w	r3, r3, r2, lsl #13
			    & RANGE_MASK];
 800fde8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 800fdec:	f818 3003 	ldrb.w	r3, [r8, r3]
 800fdf0:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 800fdf2:	9b05      	ldr	r3, [sp, #20]
 800fdf4:	454b      	cmp	r3, r9
 800fdf6:	f47f af66 	bne.w	800fcc6 <jpeg_idct_7x7+0x14e>
  }
}
 800fdfa:	b039      	add	sp, #228	; 0xe4
 800fdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe00:	ffffc515 	.word	0xffffc515
 800fe04:	ffffb0f1 	.word	0xffffb0f1
 800fe08:	ffffd3e1 	.word	0xffffd3e1

0800fe0c <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe10:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800fe14:	b0a7      	sub	sp, #156	; 0x9c
 800fe16:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fe18:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe1a:	3080      	adds	r0, #128	; 0x80
 800fe1c:	320a      	adds	r2, #10
 800fe1e:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800fe20:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe22:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fe24:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe26:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800fe2a:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe2e:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fe32:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe34:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe38:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe3a:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe3e:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe42:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 800fe44:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fe46:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe4a:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fe4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fe52:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fe56:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 800fe58:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 800fe5a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe5e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800fe60:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800fe64:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe66:	6a28      	ldr	r0, [r5, #32]
    tmp10 = tmp1 + tmp0;
 800fe68:	eb04 0e02 	add.w	lr, r4, r2
    tmp12 = tmp1 - tmp0;
 800fe6c:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe6e:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 800fe72:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe74:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800fe76:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fe7a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 800fe7e:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fe82:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800fe86:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fe8a:	eb02 0c08 	add.w	ip, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800fe8e:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800fe92:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fe96:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800fe9a:	eba2 0208 	sub.w	r2, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800fe9e:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800fea2:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fea4:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fea8:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800feac:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800feb0:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800feb4:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800feb8:	f8c7 e074 	str.w	lr, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800febc:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800fec0:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fec4:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800fec8:	f8c7 e014 	str.w	lr, [r7, #20]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800fecc:	65fa      	str	r2, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fece:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fed2:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fed6:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fed8:	12e4      	asrs	r4, r4, #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800feda:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fedc:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fede:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fee0:	42b2      	cmp	r2, r6
 800fee2:	d1a0      	bne.n	800fe26 <jpeg_idct_6x6+0x1a>
 800fee4:	f1a3 0e04 	sub.w	lr, r3, #4
 800fee8:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 800feec:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800feee:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fef2:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 800fef6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 800fef8:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fefa:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 800fefe:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 800ff00:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800ff04:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800ff08:	fb00 f402 	mul.w	r4, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800ff0c:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800ff10:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 800ff14:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = tmp0 + tmp10;
 800ff18:	eb04 3243 	add.w	r2, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 800ff1c:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 800ff20:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800ff24:	f851 4c10 	ldr.w	r4, [r1, #-16]
 800ff28:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800ff2c:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp1 + tmp0;
 800ff30:	eb02 0604 	add.w	r6, r2, r4
    tmp12 = tmp1 - tmp0;
 800ff34:	eba2 0204 	sub.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 800ff38:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800ff3c:	eb04 0508 	add.w	r5, r4, r8
 800ff40:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800ff44:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800ff48:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800ff4c:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800ff50:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800ff54:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800ff56:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800ff5a:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800ff5e:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800ff62:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800ff66:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 800ff6a:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 800ff6e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800ff72:	f810 8008 	ldrb.w	r8, [r0, r8]
 800ff76:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800ff78:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800ff7c:	9800      	ldr	r0, [sp, #0]
 800ff7e:	5d86      	ldrb	r6, [r0, r6]
 800ff80:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800ff82:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800ff86:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 800ff8a:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 800ff8e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800ff92:	5d86      	ldrb	r6, [r0, r6]
 800ff94:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800ff96:	5cc3      	ldrb	r3, [r0, r3]
 800ff98:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800ff9a:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800ff9e:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 800ffa2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 800ffa6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800ffaa:	5cc3      	ldrb	r3, [r0, r3]
 800ffac:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800ffae:	5c83      	ldrb	r3, [r0, r2]
 800ffb0:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 800ffb2:	d19c      	bne.n	800feee <jpeg_idct_6x6+0xe2>
  }
}
 800ffb4:	b027      	add	sp, #156	; 0x9c
 800ffb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ffbc <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800ffbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ffc0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800ffc4:	b09d      	sub	sp, #116	; 0x74
 800ffc6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800ffc8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ffca:	3080      	adds	r0, #128	; 0x80
 800ffcc:	3208      	adds	r2, #8
 800ffce:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800ffd0:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800ffd2:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800ffd6:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ffda:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800ffdc:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ffde:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800ffe2:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ffe4:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ffe8:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ffec:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ffee:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800fff0:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fff4:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 800fff6:	0352      	lsls	r2, r2, #13
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fff8:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fffa:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fffe:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010006:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801000a:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801000e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010012:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010014:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010018:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801001a:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 801001e:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010022:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010026:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 801002a:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 801002c:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8010030:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8010034:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010038:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 801003c:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 801003e:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010042:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010046:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010048:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801004c:	483a      	ldr	r0, [pc, #232]	; (8010138 <jpeg_idct_5x5+0x17c>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801004e:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010050:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010054:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010058:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801005c:	42b2      	cmp	r2, r6
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801005e:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010062:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010066:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801006a:	f8c7 904c 	str.w	r9, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801006e:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010072:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010076:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801007a:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801007e:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010082:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010084:	d1ab      	bne.n	800ffde <jpeg_idct_5x5+0x22>
 8010086:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 801008a:	a903      	add	r1, sp, #12
 801008c:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801008e:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010092:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8010096:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8010098:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 801009c:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80100a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80100a2:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 80100a4:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80100a8:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80100ac:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 80100b0:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80100b4:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 80100b8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 80100bc:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80100c0:	189c      	adds	r4, r3, r2
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80100c2:	1a9b      	subs	r3, r3, r2
 80100c4:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80100c8:	fb0a f404 	mul.w	r4, sl, r4
    z3 = tmp12 + z2;
 80100cc:	eb03 324c 	add.w	r2, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 80100d0:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 80100d2:	18a5      	adds	r5, r4, r2
    tmp11 = z3 - z1;
 80100d4:	1b12      	subs	r2, r2, r4
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80100d6:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 80100da:	ebc3 334c 	rsb	r3, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80100de:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80100e0:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 80100e4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80100e8:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 80100ec:	4812      	ldr	r0, [pc, #72]	; (8010138 <jpeg_idct_5x5+0x17c>)
 80100ee:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80100f2:	eb05 0b06 	add.w	fp, r5, r6
 80100f6:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80100f8:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 80100fa:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 80100fe:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010102:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8010106:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010108:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801010c:	9800      	ldr	r0, [sp, #0]
 801010e:	5d45      	ldrb	r5, [r0, r5]
 8010110:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010112:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010114:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8010116:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 801011a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801011e:	5d45      	ldrb	r5, [r0, r5]
 8010120:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010122:	5c82      	ldrb	r2, [r0, r2]
 8010124:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8010126:	5cc3      	ldrb	r3, [r0, r3]
 8010128:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 801012a:	9b01      	ldr	r3, [sp, #4]
 801012c:	4573      	cmp	r3, lr
 801012e:	d1b3      	bne.n	8010098 <jpeg_idct_5x5+0xdc>
  }
}
 8010130:	b01d      	add	sp, #116	; 0x74
 8010132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010136:	bf00      	nop
 8010138:	ffffba5c 	.word	0xffffba5c

0801013c <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801013c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010140:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
{
 8010144:	b093      	sub	sp, #76	; 0x4c
 8010146:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010148:	1e97      	subs	r7, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801014a:	3680      	adds	r6, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801014c:	3206      	adds	r2, #6
 801014e:	3d04      	subs	r5, #4
  wsptr = workspace;
 8010150:	a802      	add	r0, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010152:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010156:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801015a:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010264 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801015e:	f937 4f02 	ldrsh.w	r4, [r7, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010162:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010164:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010168:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801016c:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801016e:	fb01 f404 	mul.w	r4, r1, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010172:	6c29      	ldr	r1, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010174:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010178:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801017c:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8010180:	eb04 0901 	add.w	r9, r4, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8010184:	eba4 0401 	sub.w	r4, r4, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010188:	6a29      	ldr	r1, [r5, #32]
 801018a:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801018e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8010190:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010194:	eb0a 010b 	add.w	r1, sl, fp
 8010198:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801019c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80101a0:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80101a4:	fb0c 110b 	mla	r1, ip, fp, r1
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80101a8:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80101ac:	ea4f 21e1 	mov.w	r1, r1, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 80101b0:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80101b4:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80101b8:	eb01 0984 	add.w	r9, r1, r4, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 80101bc:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80101c0:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80101c4:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80101c8:	f8c0 900c 	str.w	r9, [r0, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80101cc:	61c1      	str	r1, [r0, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80101ce:	d1c6      	bne.n	801015e <jpeg_idct_4x4+0x22>
 80101d0:	1f1d      	subs	r5, r3, #4
 80101d2:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80101d6:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80101d8:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80101dc:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80101e0:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010264 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 80101e4:	f855 3f04 	ldr.w	r3, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 80101e8:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 80101ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80101ec:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 80101f0:	45ac      	cmp	ip, r5
    outptr = output_buf[ctr] + output_col;
 80101f2:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 80101f6:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 80101fa:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80101fe:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8010202:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010206:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801020a:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801020e:	eb01 020b 	add.w	r2, r1, fp
 8010212:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010216:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801021a:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801021e:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010222:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010226:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8010228:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801022c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 801022e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010232:	f816 b00b 	ldrb.w	fp, [r6, fp]
 8010236:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801023a:	5c73      	ldrb	r3, [r6, r1]
 801023c:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801023e:	9b01      	ldr	r3, [sp, #4]
 8010240:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8010244:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010248:	5cf3      	ldrb	r3, [r6, r3]
 801024a:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801024c:	9b01      	ldr	r3, [sp, #4]
 801024e:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 8010252:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010256:	5cb3      	ldrb	r3, [r6, r2]
 8010258:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 801025a:	d1c3      	bne.n	80101e4 <jpeg_idct_4x4+0xa8>
  }
}
 801025c:	b013      	add	sp, #76	; 0x4c
 801025e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010262:	bf00      	nop
 8010264:	ffffc4df 	.word	0xffffc4df

08010268 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026c:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801026e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8010272:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010274:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010278:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801027a:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801027e:	f1a1 0c04 	sub.w	ip, r1, #4
 8010282:	3204      	adds	r2, #4
 8010284:	4620      	mov	r0, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010286:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801028a:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801028e:	f938 1f02 	ldrsh.w	r1, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010292:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010294:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010298:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801029c:	4542      	cmp	r2, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801029e:	fb05 f101 	mul.w	r1, r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80102a2:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
 80102a6:	f9b8 5020 	ldrsh.w	r5, [r8, #32]
    tmp0 <<= CONST_BITS;
 80102aa:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102ae:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80102b2:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80102b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102ba:	fb07 f70b 	mul.w	r7, r7, fp
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80102be:	fb0a f505 	mul.w	r5, sl, r5
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80102c2:	fb09 f707 	mul.w	r7, r9, r7
    tmp10 = tmp0 + tmp12;
 80102c6:	eb01 0605 	add.w	r6, r1, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 80102ca:	eba1 0145 	sub.w	r1, r1, r5, lsl #1

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80102ce:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80102d2:	eba6 0607 	sub.w	r6, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80102d6:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80102da:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80102de:	ea4f 26e6 	mov.w	r6, r6, asr #11
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80102e2:	60a1      	str	r1, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80102e4:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80102e8:	6166      	str	r6, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80102ea:	d1d0      	bne.n	801028e <jpeg_idct_3x3+0x26>
 80102ec:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80102ee:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 80102f2:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80102f4:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 80102f8:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 80102fc:	300c      	adds	r0, #12
    outptr = output_buf[ctr] + output_col;
 80102fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010300:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010304:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010306:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801030a:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801030e:	fb0c f101 	mul.w	r1, ip, r1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010312:	f850 4c08 	ldr.w	r4, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010316:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801031a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801031c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8010320:	eb01 3842 	add.w	r8, r1, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8010324:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010328:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801032c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8010330:	eba2 0201 	sub.w	r2, r2, r1
			    & RANGE_MASK];
 8010334:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010338:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 801033c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010340:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8010344:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010348:	f81e 4008 	ldrb.w	r4, [lr, r8]
 801034c:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801034e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8010352:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8010354:	d1d0      	bne.n	80102f8 <jpeg_idct_3x3+0x90>
  }
}
 8010356:	b00b      	add	sp, #44	; 0x2c
 8010358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801035c <jpeg_idct_2x2>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801035c:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010360:	f9b2 1000 	ldrsh.w	r1, [r2]
{
 8010364:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010366:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801036a:	f8dc 0000 	ldr.w	r0, [ip]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801036e:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010372:	3680      	adds	r6, #128	; 0x80
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010374:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010376:	f8dc 0020 	ldr.w	r0, [ip, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 801037a:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801037e:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8010380:	3104      	adds	r1, #4
{
 8010382:	9f05      	ldr	r7, [sp, #20]
  tmp0 = tmp4 + tmp5;
 8010384:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8010386:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010388:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801038c:	4365      	muls	r5, r4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 801038e:	f9b2 4012 	ldrsh.w	r4, [r2, #18]
 8010392:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8010396:	4354      	muls	r4, r2

  tmp1 = tmp4 + tmp5;
 8010398:	eb05 0c04 	add.w	ip, r5, r4
  tmp3 = tmp4 - tmp5;
 801039c:	1b2a      	subs	r2, r5, r4

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 801039e:	681d      	ldr	r5, [r3, #0]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80103a0:	eb00 040c 	add.w	r4, r0, ip
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80103a4:	eba0 000c 	sub.w	r0, r0, ip
  outptr = output_buf[0] + output_col;
 80103a8:	eb05 0e07 	add.w	lr, r5, r7
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80103ac:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80103b0:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80103b4:	5d34      	ldrb	r4, [r6, r4]
 80103b6:	55ec      	strb	r4, [r5, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80103b8:	5c30      	ldrb	r0, [r6, r0]
 80103ba:	f88e 0001 	strb.w	r0, [lr, #1]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 80103be:	6858      	ldr	r0, [r3, #4]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80103c0:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80103c2:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80103c4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr = output_buf[1] + output_col;
 80103c8:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80103ca:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80103ce:	5cf3      	ldrb	r3, [r6, r3]
 80103d0:	55c3      	strb	r3, [r0, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80103d2:	5c73      	ldrb	r3, [r6, r1]
 80103d4:	7063      	strb	r3, [r4, #1]
}
 80103d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080103d8 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 80103d8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80103da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80103de:	6809      	ldr	r1, [r1, #0]
 80103e0:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 80103e2:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 80103e6:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 80103e8:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80103ec:	440a      	add	r2, r1
 80103ee:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	9b00      	ldr	r3, [sp, #0]
 80103f6:	54d1      	strb	r1, [r2, r3]
}
 80103f8:	4770      	bx	lr
	...

080103fc <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80103fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010400:	b0d1      	sub	sp, #324	; 0x144
 8010402:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010404:	f1a2 0e02 	sub.w	lr, r2, #2
 8010408:	9306      	str	r3, [sp, #24]
 801040a:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801040c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010410:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010412:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010416:	f102 030e 	add.w	r3, r2, #14
 801041a:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801041c:	f93e 5f02 	ldrsh.w	r5, [lr, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010420:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010422:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010426:	f9be 1020 	ldrsh.w	r1, [lr, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801042a:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801042c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801042e:	f9be 2040 	ldrsh.w	r2, [lr, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010432:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010434:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010438:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp0 <<= CONST_BITS;
 801043c:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801043e:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010440:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010444:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010448:	f9be c050 	ldrsh.w	ip, [lr, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801044c:	4373      	muls	r3, r6
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 801044e:	f241 66a1 	movw	r6, #5793	; 0x16a1
 8010452:	4373      	muls	r3, r6
    tmp1 = tmp0 + tmp3;
 8010454:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010456:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 801045a:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 801045c:	1a8b      	subs	r3, r1, r2
 801045e:	4373      	muls	r3, r6
 8010460:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010462:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8010466:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010468:	188b      	adds	r3, r1, r2
 801046a:	f642 2587 	movw	r5, #10887	; 0x2a87
 801046e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010470:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010474:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010476:	f240 75dc 	movw	r5, #2012	; 0x7dc
 801047a:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 801047c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 801047e:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 8010480:	1a7f      	subs	r7, r7, r1
    tmp10 = tmp1 + tmp0 - tmp3;
 8010482:	1aad      	subs	r5, r5, r2
    tmp13 = tmp1 - tmp2 + tmp3;
 8010484:	18ba      	adds	r2, r7, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8010486:	440b      	add	r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010488:	f9be 1010 	ldrsh.w	r1, [lr, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 801048c:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801048e:	6a22      	ldr	r2, [r4, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010490:	6e27      	ldr	r7, [r4, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010492:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010494:	f9be 2030 	ldrsh.w	r2, [lr, #48]	; 0x30
    tmp12 = tmp1 - tmp0 + tmp2;
 8010498:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801049a:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801049c:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80104a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80104a4:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80104a8:	f9be 7070 	ldrsh.w	r7, [lr, #112]	; 0x70
    tmp10 = tmp1 + tmp0 - tmp3;
 80104ac:	9503      	str	r5, [sp, #12]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80104ae:	f642 4591 	movw	r5, #11409	; 0x2c91
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80104b2:	435f      	muls	r7, r3
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80104b4:	4b81      	ldr	r3, [pc, #516]	; (80106bc <jpeg_idct_9x9+0x2c0>)
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80104b6:	eb01 0b0c 	add.w	fp, r1, ip
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80104ba:	435a      	muls	r2, r3
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80104bc:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80104c0:	eb01 0907 	add.w	r9, r1, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80104c4:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80104c8:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80104cc:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80104d0:	1bc9      	subs	r1, r1, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80104d2:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80104d6:	ebac 0307 	sub.w	r3, ip, r7
 80104da:	436b      	muls	r3, r5
    tmp0 = tmp2 + tmp3 - z2;
 80104dc:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80104e0:	461d      	mov	r5, r3
    tmp2 += z2 - tmp1;
 80104e2:	1ad3      	subs	r3, r2, r3
    tmp0 = tmp2 + tmp3 - z2;
 80104e4:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 80104e8:	449b      	add	fp, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80104ea:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp3 += z2 + tmp1;
 80104ee:	442a      	add	r2, r5
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80104f0:	4359      	muls	r1, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80104f2:	9b03      	ldr	r3, [sp, #12]
    tmp3 += z2 + tmp1;
 80104f4:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80104f6:	eba3 0508 	sub.w	r5, r3, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80104fa:	eb03 0708 	add.w	r7, r3, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80104fe:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010500:	12ed      	asrs	r5, r5, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010502:	12ff      	asrs	r7, r7, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010504:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010508:	1875      	adds	r5, r6, r1
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801050a:	1a76      	subs	r6, r6, r1
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801050c:	eb03 010b 	add.w	r1, r3, fp
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010510:	eba3 030b 	sub.w	r3, r3, fp
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010514:	12ed      	asrs	r5, r5, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010516:	12f6      	asrs	r6, r6, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010518:	f840 7c04 	str.w	r7, [r0, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801051c:	12db      	asrs	r3, r3, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801051e:	61c5      	str	r5, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010520:	12c9      	asrs	r1, r1, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010522:	f8c0 60dc 	str.w	r6, [r0, #220]	; 0xdc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010526:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 801052a:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801052c:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 801052e:	4413      	add	r3, r2
 8010530:	12db      	asrs	r3, r3, #11
 8010532:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010534:	9b05      	ldr	r3, [sp, #20]
 8010536:	1a9b      	subs	r3, r3, r2
 8010538:	12db      	asrs	r3, r3, #11
 801053a:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 801053e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8010542:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010546:	12db      	asrs	r3, r3, #11
 8010548:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801054a:	9b07      	ldr	r3, [sp, #28]
 801054c:	4573      	cmp	r3, lr
 801054e:	f47f af65 	bne.w	801041c <jpeg_idct_9x9+0x20>
 8010552:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010554:	aa08      	add	r2, sp, #32
 8010556:	f1a3 0904 	sub.w	r9, r3, #4
 801055a:	3320      	adds	r3, #32
 801055c:	9306      	str	r3, [sp, #24]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801055e:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010562:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8010566:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010568:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 801056a:	9305      	str	r3, [sp, #20]
 801056c:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801056e:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8010572:	f852 0c18 	ldr.w	r0, [r2, #-24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010576:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 801057a:	f852 3c08 	ldr.w	r3, [r2, #-8]
    z2 = (INT32) wsptr[4];
 801057e:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010582:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010586:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 801058a:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp2 = tmp0 - tmp3 - tmp3;
 801058e:	1b9b      	subs	r3, r3, r6
 8010590:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010592:	1a43      	subs	r3, r0, r1
 8010594:	fb0c f303 	mul.w	r3, ip, r3
 8010598:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 801059a:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 801059e:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80105a0:	1843      	adds	r3, r0, r1
 80105a2:	f642 2587 	movw	r5, #10887	; 0x2a87
 80105a6:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 80105a8:	f242 25ab 	movw	r5, #8875	; 0x22ab
 80105ac:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 80105ae:	f240 75dc 	movw	r5, #2012	; 0x7dc
 80105b2:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 80105b4:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 80105b6:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 80105b8:	1a3f      	subs	r7, r7, r0
    tmp10 = tmp1 + tmp0 - tmp3;
 80105ba:	1a6d      	subs	r5, r5, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 80105bc:	1879      	adds	r1, r7, r1
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80105be:	4f3f      	ldr	r7, [pc, #252]	; (80106bc <jpeg_idct_9x9+0x2c0>)
    tmp12 = tmp1 - tmp0 + tmp2;
 80105c0:	4403      	add	r3, r0
    z1 = (INT32) wsptr[1];
 80105c2:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp13 = tmp1 - tmp2 + tmp3;
 80105c6:	9104      	str	r1, [sp, #16]
    z2 = (INT32) wsptr[3];
 80105c8:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp12 = tmp1 - tmp0 + tmp2;
 80105cc:	9303      	str	r3, [sp, #12]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80105ce:	f641 5317 	movw	r3, #7447	; 0x1d17
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80105d2:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80105d4:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 80105d8:	eb00 0b07 	add.w	fp, r0, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80105dc:	f852 7c04 	ldr.w	r7, [r2, #-4]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80105e0:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80105e4:	eb00 0e07 	add.w	lr, r0, r7
 80105e8:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80105ec:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80105f0:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80105f4:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80105f8:	eba7 0803 	sub.w	r8, r7, r3
 80105fc:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8010600:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010604:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010608:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 801060c:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8010610:	eba1 0708 	sub.w	r7, r1, r8
    tmp3 += z2 + tmp1;
 8010614:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010616:	1ac0      	subs	r0, r0, r3
 8010618:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp3 += z2 + tmp1;
 801061c:	eb01 080e 	add.w	r8, r1, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010620:	eb05 0e0c 	add.w	lr, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010624:	1ac0      	subs	r0, r0, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010626:	eba5 050c 	sub.w	r5, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801062a:	f242 7331 	movw	r3, #10033	; 0x2731
			    & RANGE_MASK];
 801062e:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010632:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8010634:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010638:	f81a e00e 	ldrb.w	lr, [sl, lr]
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801063c:	4358      	muls	r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801063e:	9b05      	ldr	r3, [sp, #20]
    tmp2 += z2 - tmp1;
 8010640:	445f      	add	r7, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010642:	f803 e001 	strb.w	lr, [r3, r1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010646:	f81a 5005 	ldrb.w	r5, [sl, r5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801064a:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801064c:	7225      	strb	r5, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801064e:	1835      	adds	r5, r6, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010650:	1a36      	subs	r6, r6, r0
			    & RANGE_MASK];
 8010652:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010656:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801065a:	f81a 5005 	ldrb.w	r5, [sl, r5]
 801065e:	7065      	strb	r5, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010660:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8010664:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010666:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010668:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 801066a:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 801066e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010672:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010676:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010678:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801067c:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 801067e:	9b04      	ldr	r3, [sp, #16]
 8010680:	4443      	add	r3, r8
			    & RANGE_MASK];
 8010682:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010686:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801068a:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 801068c:	9b04      	ldr	r3, [sp, #16]
 801068e:	eba3 0308 	sub.w	r3, r3, r8
			    & RANGE_MASK];
 8010692:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010696:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801069a:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 801069c:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80106a0:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
			    & RANGE_MASK];
 80106a4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80106a8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80106ac:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 80106ae:	9b06      	ldr	r3, [sp, #24]
 80106b0:	454b      	cmp	r3, r9
 80106b2:	f47f af54 	bne.w	801055e <jpeg_idct_9x9+0x162>
  }
}
 80106b6:	b051      	add	sp, #324	; 0x144
 80106b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106bc:	ffffd8cf 	.word	0xffffd8cf

080106c0 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80106c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80106c4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80106c8:	b0d9      	sub	sp, #356	; 0x164
 80106ca:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80106cc:	f1a2 0b02 	sub.w	fp, r2, #2
 80106d0:	9304      	str	r3, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80106d2:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80106d6:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80106d8:	a908      	add	r1, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80106da:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80106dc:	f102 030e 	add.w	r3, r2, #14
 80106e0:	9306      	str	r3, [sp, #24]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80106e2:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80106e6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80106ea:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80106ee:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80106f0:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80106f4:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80106f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80106fa:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80106fe:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010700:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8010704:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010706:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801070a:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801070e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010712:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8010714:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010716:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 8010718:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801071a:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801071e:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010722:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010726:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801072a:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801072c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8010730:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010732:	19f3      	adds	r3, r6, r7
 8010734:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010736:	f241 0071 	movw	r0, #4209	; 0x1071
 801073a:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801073e:	48a0      	ldr	r0, [pc, #640]	; (80109c0 <jpeg_idct_10x10+0x300>)
 8010740:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010744:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8010748:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801074a:	6e25      	ldr	r5, [r4, #96]	; 0x60
    tmp21 = tmp11 + tmp13;
 801074c:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 801074e:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010750:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8010754:	9303      	str	r3, [sp, #12]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010756:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010758:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801075c:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801075e:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	; 0x30
    tmp24 = tmp10 - tmp12;
 8010762:	9002      	str	r0, [sp, #8]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010764:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010768:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801076a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 801076e:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010772:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8010776:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8010778:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 801077c:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801077e:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010782:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010786:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801078a:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 801078e:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010792:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010796:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801079a:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801079e:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80107a0:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80107a2:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80107a6:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80107a8:	1b86      	subs	r6, r0, r6

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) (tmp22 + tmp12);
 80107aa:	9805      	ldr	r0, [sp, #20]
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80107ac:	eba3 030e 	sub.w	r3, r3, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80107b0:	f642 0e53 	movw	lr, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80107b4:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80107b6:	f241 2acf 	movw	sl, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80107ba:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80107be:	009b      	lsls	r3, r3, #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80107c0:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80107c4:	f241 4a8c 	movw	sl, #5260	; 0x148c
 80107c8:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80107cc:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80107d0:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80107d4:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80107d8:	442a      	add	r2, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80107da:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80107de:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80107e2:	12ed      	asrs	r5, r5, #11
 80107e4:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80107e8:	ea4f 25ec 	mov.w	r5, ip, asr #11
 80107ec:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80107f0:	eb07 050e 	add.w	r5, r7, lr
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80107f4:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80107f8:	12ed      	asrs	r5, r5, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80107fa:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80107fc:	61cd      	str	r5, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 80107fe:	eb03 25e0 	add.w	r5, r3, r0, asr #11
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010802:	ebc3 23e0 	rsb	r3, r3, r0, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010806:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801080a:	63cd      	str	r5, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 801080c:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010810:	9b03      	ldr	r3, [sp, #12]
 8010812:	4413      	add	r3, r2
 8010814:	12db      	asrs	r3, r3, #11
 8010816:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010818:	9b03      	ldr	r3, [sp, #12]
 801081a:	1a9b      	subs	r3, r3, r2
 801081c:	12db      	asrs	r3, r3, #11
 801081e:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010822:	9b02      	ldr	r3, [sp, #8]
 8010824:	4433      	add	r3, r6
 8010826:	12db      	asrs	r3, r3, #11
 8010828:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801082a:	9b02      	ldr	r3, [sp, #8]
 801082c:	1b9b      	subs	r3, r3, r6
 801082e:	12db      	asrs	r3, r3, #11
 8010830:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010834:	9b06      	ldr	r3, [sp, #24]
 8010836:	455b      	cmp	r3, fp
 8010838:	f47f af53 	bne.w	80106e2 <jpeg_idct_10x10+0x22>
 801083c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 801083e:	a908      	add	r1, sp, #32
 8010840:	f1a3 0b04 	sub.w	fp, r3, #4
 8010844:	3324      	adds	r3, #36	; 0x24
 8010846:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010848:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801084c:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8010850:	9a62      	ldr	r2, [sp, #392]	; 0x188
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010852:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8010854:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8010858:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801085a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801085e:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010860:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010864:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010868:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801086c:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801086e:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8010870:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010874:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8010876:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 801087a:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801087e:	006d      	lsls	r5, r5, #1
 8010880:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8010884:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010888:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801088a:	19eb      	adds	r3, r5, r7
 801088c:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801088e:	f241 0071 	movw	r0, #4209	; 0x1071
 8010892:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010896:	484a      	ldr	r0, [pc, #296]	; (80109c0 <jpeg_idct_10x10+0x300>)
 8010898:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 801089c:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 80108a0:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 80108a2:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 80108a6:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80108a8:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 80108aa:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80108ac:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 80108b0:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 80108b2:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 80108b6:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 80108ba:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 80108be:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80108c0:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80108c4:	f641 606f 	movw	r0, #7791	; 0x1e6f
 80108c8:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 80108cc:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 80108d0:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80108d4:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 80108d8:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80108dc:	f240 7014 	movw	r0, #1812	; 0x714
 80108e0:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80108e4:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80108e6:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80108ea:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80108ee:	f642 0853 	movw	r8, #10323	; 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80108f2:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80108f6:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80108f8:	f241 2acf 	movw	sl, #4815	; 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80108fc:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010900:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010904:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010908:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801090c:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801090e:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010912:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010916:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010918:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801091c:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010920:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010924:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010926:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010928:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801092c:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801092e:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010932:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010934:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010938:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801093c:	5d5d      	ldrb	r5, [r3, r5]
 801093e:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8010940:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010942:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010944:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010946:	f813 500c 	ldrb.w	r5, [r3, ip]
 801094a:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801094c:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010950:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 8010954:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010958:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801095c:	5d5d      	ldrb	r5, [r3, r5]
 801095e:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010960:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010962:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010964:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010966:	181d      	adds	r5, r3, r0
 8010968:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801096a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801096e:	5d5d      	ldrb	r5, [r3, r5]
 8010970:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010972:	9b02      	ldr	r3, [sp, #8]
 8010974:	1a1b      	subs	r3, r3, r0
 8010976:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8010978:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801097c:	5cc3      	ldrb	r3, [r0, r3]
 801097e:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010980:	9b04      	ldr	r3, [sp, #16]
 8010982:	4413      	add	r3, r2
			    & RANGE_MASK];
 8010984:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010988:	5cc3      	ldrb	r3, [r0, r3]
 801098a:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801098c:	9b04      	ldr	r3, [sp, #16]
 801098e:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 8010990:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010994:	5cc3      	ldrb	r3, [r0, r3]
 8010996:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010998:	9b03      	ldr	r3, [sp, #12]
 801099a:	4433      	add	r3, r6
			    & RANGE_MASK];
 801099c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80109a0:	5cc3      	ldrb	r3, [r0, r3]
 80109a2:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80109a4:	9b03      	ldr	r3, [sp, #12]
 80109a6:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 80109a8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80109ac:	5cc3      	ldrb	r3, [r0, r3]
 80109ae:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 80109b0:	9b07      	ldr	r3, [sp, #28]
 80109b2:	455b      	cmp	r3, fp
 80109b4:	f47f af48 	bne.w	8010848 <jpeg_idct_10x10+0x188>
  }
}
 80109b8:	b059      	add	sp, #356	; 0x164
 80109ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109be:	bf00      	nop
 80109c0:	ffffba5c 	.word	0xffffba5c

080109c4 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80109c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c8:	b0e5      	sub	sp, #404	; 0x194
 80109ca:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80109cc:	f1a2 0b02 	sub.w	fp, r2, #2
 80109d0:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80109d2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80109d6:	3380      	adds	r3, #128	; 0x80
 80109d8:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80109da:	1f0b      	subs	r3, r1, #4
 80109dc:	9302      	str	r3, [sp, #8]
 80109de:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 80109e2:	aa0c      	add	r2, sp, #48	; 0x30
 80109e4:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109e6:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80109e8:	f642 3e6c 	movw	lr, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109ec:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80109f0:	f244 2958 	movw	r9, #16984	; 0x4258
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80109f4:	f851 0f04 	ldr.w	r0, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80109f8:	3204      	adds	r2, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80109fa:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80109fe:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a00:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a02:	f9bb 0020 	ldrsh.w	r0, [fp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a06:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
    tmp10 <<= CONST_BITS;
 8010a0a:	035b      	lsls	r3, r3, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a0c:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a0e:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a12:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a18:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010a1a:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
 8010a1e:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010a20:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010a24:	1a27      	subs	r7, r4, r0
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010a26:	eba4 0c06 	sub.w	ip, r4, r6
 8010a2a:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010a2e:	f640 55c9 	movw	r5, #3529	; 0xdc9
 8010a32:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8010a34:	1985      	adds	r5, r0, r6
    z4 -= z2;
 8010a36:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010a38:	fb0e 3301 	mla	r3, lr, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010a3c:	eb0c 0e07 	add.w	lr, ip, r7
    z4 -= z2;
 8010a40:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010a42:	449e      	add	lr, r3
 8010a44:	49d0      	ldr	r1, [pc, #832]	; (8010d88 <jpeg_idct_11x11+0x3c4>)
 8010a46:	fb01 e104 	mla	r1, r1, r4, lr
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010a4a:	f244 3eb5 	movw	lr, #17333	; 0x43b5
 8010a4e:	fb0e 3e06 	mla	lr, lr, r6, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010a52:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010a54:	eb0e 010c 	add.w	r1, lr, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010a58:	f44f 6e4c 	mov.w	lr, #3264	; 0xcc0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010a5c:	9104      	str	r1, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010a5e:	49cb      	ldr	r1, [pc, #812]	; (8010d8c <jpeg_idct_11x11+0x3c8>)
 8010a60:	fb01 3c00 	mla	ip, r1, r0, r3
 8010a64:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010a68:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010a6c:	f9bb c050 	ldrsh.w	ip, [fp, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010a70:	9105      	str	r1, [sp, #20]
    tmp24 += tmp25;
 8010a72:	49c7      	ldr	r1, [pc, #796]	; (8010d90 <jpeg_idct_11x11+0x3cc>)
 8010a74:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010a78:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 8010a7c:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010a80:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010a84:	9106      	str	r1, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8010a86:	49c3      	ldr	r1, [pc, #780]	; (8010d94 <jpeg_idct_11x11+0x3d0>)
 8010a88:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010a8a:	fb06 0004 	mla	r0, r6, r4, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a8e:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010a92:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010a96:	1941      	adds	r1, r0, r5
 8010a98:	9107      	str	r1, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a9a:	9902      	ldr	r1, [sp, #8]
 8010a9c:	6a08      	ldr	r0, [r1, #32]
 8010a9e:	4344      	muls	r4, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010aa0:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8010aa2:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010aa4:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8010aa8:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010aac:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010ab0:	49b9      	ldr	r1, [pc, #740]	; (8010d98 <jpeg_idct_11x11+0x3d4>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010ab2:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8010ab4:	19e0      	adds	r0, r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010ab6:	eb04 0a0c 	add.w	sl, r4, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010aba:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010abe:	eb04 0806 	add.w	r8, r4, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010ac2:	4435      	add	r5, r6
 8010ac4:	fb0e f505 	mul.w	r5, lr, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010ac8:	f641 4e6a 	movw	lr, #7274	; 0x1c6a
 8010acc:	fb0e f000 	mul.w	r0, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010ad0:	f241 5e74 	movw	lr, #5492	; 0x1574
 8010ad4:	fb0e fa0a 	mul.w	sl, lr, sl
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010ad8:	f640 3eb8 	movw	lr, #3000	; 0xbb8
 8010adc:	fb0e 5808 	mla	r8, lr, r8, r5
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010ae0:	eb00 0e0a 	add.w	lr, r0, sl
 8010ae4:	44c6      	add	lr, r8
 8010ae6:	fb01 ee04 	mla	lr, r1, r4, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010aea:	eb07 040c 	add.w	r4, r7, ip
 8010aee:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
 8010af2:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010af6:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010af8:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010afc:	fb01 440c 	mla	r4, r1, ip, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010b00:	49a6      	ldr	r1, [pc, #664]	; (8010d9c <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010b02:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010b04:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010b06:	4454      	add	r4, sl
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010b08:	f244 3a47 	movw	sl, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010b0c:	4348      	muls	r0, r1
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010b0e:	9904      	ldr	r1, [sp, #16]
    tmp11 += z1;
 8010b10:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010b12:	fb0a 0006 	mla	r0, sl, r6, r0
 8010b16:	4440      	add	r0, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010b18:	f242 080b 	movw	r8, #8203	; 0x200b
 8010b1c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010b20:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8010da4 <jpeg_idct_11x11+0x3e0>
 8010b24:	fb08 cc07 	mla	ip, r8, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010b28:	4f9d      	ldr	r7, [pc, #628]	; (8010da0 <jpeg_idct_11x11+0x3dc>)
 8010b2a:	fb07 cc06 	mla	ip, r7, r6, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010b2e:	44ac      	add	ip, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010b30:	eb01 050e 	add.w	r5, r1, lr
 8010b34:	12ed      	asrs	r5, r5, #11
 8010b36:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010b3a:	eba1 050e 	sub.w	r5, r1, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010b3e:	9903      	ldr	r1, [sp, #12]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010b40:	12ed      	asrs	r5, r5, #11
 8010b42:	f8c2 513c 	str.w	r5, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010b46:	eb01 0509 	add.w	r5, r1, r9
 8010b4a:	12ed      	asrs	r5, r5, #11
 8010b4c:	61d5      	str	r5, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010b4e:	eba1 0509 	sub.w	r5, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010b52:	9906      	ldr	r1, [sp, #24]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010b54:	12ed      	asrs	r5, r5, #11
 8010b56:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010b5a:	190d      	adds	r5, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010b5c:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010b5e:	12ed      	asrs	r5, r5, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010b60:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010b62:	63d5      	str	r5, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010b64:	9905      	ldr	r1, [sp, #20]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010b66:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010b6a:	180c      	adds	r4, r1, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010b6c:	1a08      	subs	r0, r1, r0
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010b6e:	9907      	ldr	r1, [sp, #28]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010b70:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010b72:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010b74:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010b78:	eb01 000c 	add.w	r0, r1, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010b7c:	65d4      	str	r4, [r2, #92]	; 0x5c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010b7e:	12c0      	asrs	r0, r0, #11
 8010b80:	67d0      	str	r0, [r2, #124]	; 0x7c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010b82:	eba1 000c 	sub.w	r0, r1, ip
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010b86:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010b88:	12c0      	asrs	r0, r0, #11
 8010b8a:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010b8e:	f645 00ad 	movw	r0, #22701	; 0x58ad
 8010b92:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8010b96:	12db      	asrs	r3, r3, #11
 8010b98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b9e:	455b      	cmp	r3, fp
 8010ba0:	f47f af21 	bne.w	80109e6 <jpeg_idct_11x11+0x22>
 8010ba4:	9b08      	ldr	r3, [sp, #32]
 8010ba6:	3b04      	subs	r3, #4
 8010ba8:	9303      	str	r3, [sp, #12]
 8010baa:	9b08      	ldr	r3, [sp, #32]
 8010bac:	3328      	adds	r3, #40	; 0x28
 8010bae:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8010bb0:	ab0c      	add	r3, sp, #48	; 0x30
 8010bb2:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010bb4:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010bb6:	f245 107e 	movw	r0, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8010bba:	9a02      	ldr	r2, [sp, #8]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010bbc:	f244 2a58 	movw	sl, #16984	; 0x4258
    outptr = output_buf[ctr] + output_col;
 8010bc0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z2 = (INT32) wsptr[4];
 8010bc4:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8010bc6:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8010bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8010bca:	9303      	str	r3, [sp, #12]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010bd0:	eba6 0e07 	sub.w	lr, r6, r7
    z1 = (INT32) wsptr[2];
 8010bd4:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 8010bd6:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010bd8:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8010bda:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010bdc:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010be0:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010be4:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010be6:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010bea:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010bec:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010bee:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 8010bf2:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8010bf4:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 8010bf6:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010bf8:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8010bfc:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010c00:	eb0e 000c 	add.w	r0, lr, ip
 8010c04:	4a60      	ldr	r2, [pc, #384]	; (8010d88 <jpeg_idct_11x11+0x3c4>)
 8010c06:	4418      	add	r0, r3
 8010c08:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010c0c:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8010c10:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010c14:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010c16:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c1a:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010c1c:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010c1e:	4a5b      	ldr	r2, [pc, #364]	; (8010d8c <jpeg_idct_11x11+0x3c8>)
 8010c20:	fb02 3e04 	mla	lr, r2, r4, r3
 8010c24:	eb0e 020c 	add.w	r2, lr, ip
 8010c28:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8010c2a:	4a59      	ldr	r2, [pc, #356]	; (8010d90 <jpeg_idct_11x11+0x3cc>)
 8010c2c:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010c30:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 8010c34:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010c38:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010c3c:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8010c3e:	4a55      	ldr	r2, [pc, #340]	; (8010d94 <jpeg_idct_11x11+0x3d0>)
 8010c40:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010c42:	fb07 4406 	mla	r4, r7, r6, r4
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010c46:	f44f 674c 	mov.w	r7, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010c4a:	1962      	adds	r2, r4, r5
 8010c4c:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8010c4e:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8010c50:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 8010c54:	6855      	ldr	r5, [r2, #4]
    z3 = (INT32) wsptr[5];
 8010c56:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8010c5a:	eb05 040e 	add.w	r4, r5, lr
    z4 = (INT32) wsptr[7];
 8010c5e:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010c62:	eb05 0b08 	add.w	fp, r5, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010c66:	4a4c      	ldr	r2, [pc, #304]	; (8010d98 <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010c68:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010c6c:	eb05 090c 	add.w	r9, r5, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010c70:	4466      	add	r6, ip
 8010c72:	437e      	muls	r6, r7
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010c74:	f641 476a 	movw	r7, #7274	; 0x1c6a
 8010c78:	437c      	muls	r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010c7a:	f241 5774 	movw	r7, #5492	; 0x1574
 8010c7e:	fb07 fb0b 	mul.w	fp, r7, fp
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010c82:	f640 37b8 	movw	r7, #3000	; 0xbb8
 8010c86:	fb07 6909 	mla	r9, r7, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010c8a:	eb04 070b 	add.w	r7, r4, fp
 8010c8e:	444f      	add	r7, r9
 8010c90:	fb02 7705 	mla	r7, r2, r5, r7
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010c94:	eb0e 0508 	add.w	r5, lr, r8
 8010c98:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8010c9c:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010ca0:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010ca2:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010ca6:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010caa:	4a3c      	ldr	r2, [pc, #240]	; (8010d9c <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010cac:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010cae:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010cb2:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010cb4:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010cb8:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010cba:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8010cbc:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010cbe:	fb0b 440c 	mla	r4, fp, ip, r4
 8010cc2:	444c      	add	r4, r9
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010cc4:	f242 090b 	movw	r9, #8203	; 0x200b
 8010cc8:	fb09 f808 	mul.w	r8, r9, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010ccc:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8010da4 <jpeg_idct_11x11+0x3e0>
 8010cd0:	fb09 880e 	mla	r8, r9, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010cd4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8010da0 <jpeg_idct_11x11+0x3dc>
 8010cd8:	fb0e 880c 	mla	r8, lr, ip, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010cdc:	44b0      	add	r8, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010cde:	19d6      	adds	r6, r2, r7
 8010ce0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010ce2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010ce6:	5d96      	ldrb	r6, [r2, r6]
 8010ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cea:	5416      	strb	r6, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010cec:	9a05      	ldr	r2, [sp, #20]
 8010cee:	1bd0      	subs	r0, r2, r7
 8010cf0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010cf2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010cf6:	5c10      	ldrb	r0, [r2, r0]
 8010cf8:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010cfa:	9a04      	ldr	r2, [sp, #16]
 8010cfc:	eb02 000a 	add.w	r0, r2, sl
 8010d00:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d02:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010d06:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010d08:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010d0a:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010d0c:	eba2 000a 	sub.w	r0, r2, sl
 8010d10:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d12:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010d16:	5c10      	ldrb	r0, [r2, r0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010d18:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010d1a:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010d1c:	1950      	adds	r0, r2, r5
 8010d1e:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d20:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010d24:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010d26:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010d28:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010d2a:	1b50      	subs	r0, r2, r5
 8010d2c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d2e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010d32:	5c10      	ldrb	r0, [r2, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010d34:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010d36:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010d38:	1910      	adds	r0, r2, r4
 8010d3a:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d3c:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010d40:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010d42:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010d44:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010d46:	1b10      	subs	r0, r2, r4
 8010d48:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d4a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010d4e:	5c10      	ldrb	r0, [r2, r0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010d50:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010d52:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010d54:	eb02 0008 	add.w	r0, r2, r8
 8010d58:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d5a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010d5e:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010d60:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010d62:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010d64:	eba2 0008 	sub.w	r0, r2, r8
 8010d68:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d6a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010d6e:	5c10      	ldrb	r0, [r2, r0]
 8010d70:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010d72:	f645 00ad 	movw	r0, #22701	; 0x58ad
 8010d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d78:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8010d7c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d7e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8010d82:	5cd3      	ldrb	r3, [r2, r3]
 8010d84:	e010      	b.n	8010da8 <jpeg_idct_11x11+0x3e4>
 8010d86:	bf00      	nop
 8010d88:	ffffc5b4 	.word	0xffffc5b4
 8010d8c:	ffffcf91 	.word	0xffffcf91
 8010d90:	ffffdb05 	.word	0xffffdb05
 8010d94:	ffffd37d 	.word	0xffffd37d
 8010d98:	ffffe276 	.word	0xffffe276
 8010d9c:	ffffc675 	.word	0xffffc675
 8010da0:	ffffca16 	.word	0xffffca16
 8010da4:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 8010da8:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8010daa:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 8010dac:	9b02      	ldr	r3, [sp, #8]
 8010dae:	3320      	adds	r3, #32
 8010db0:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 8010db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010db4:	4293      	cmp	r3, r2
 8010db6:	f47f aefd 	bne.w	8010bb4 <jpeg_idct_11x11+0x1f0>
  }
}
 8010dba:	b065      	add	sp, #404	; 0x194
 8010dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010dc0 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	b0eb      	sub	sp, #428	; 0x1ac
 8010dc6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010dc8:	f1a2 0802 	sub.w	r8, r2, #2
 8010dcc:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010dce:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010dd2:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010dd6:	1f0b      	subs	r3, r1, #4
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	f102 030e 	add.w	r3, r2, #14
 8010dde:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8010de0:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010de2:	9900      	ldr	r1, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010de4:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010de6:	f938 cf02 	ldrsh.w	ip, [r8, #2]!
 8010dea:	f851 2f04 	ldr.w	r2, [r1, #4]!
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010dee:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010df2:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010df6:	fb02 fc0c 	mul.w	ip, r2, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010dfa:	f9b8 2040 	ldrsh.w	r2, [r8, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010dfe:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 8010e00:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010e04:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010e06:	f242 7031 	movw	r0, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e0a:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010e0e:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010e12:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e14:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010e16:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e1a:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 8010e1c:	eb0c 0702 	add.w	r7, ip, r2
    tmp11 = z3 - z4;
 8010e20:	ebac 0202 	sub.w	r2, ip, r2
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010e24:	fb01 f006 	mul.w	r0, r1, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010e28:	9900      	ldr	r1, [sp, #0]
 8010e2a:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
 8010e2e:	436c      	muls	r4, r5
    z2 <<= CONST_BITS;
 8010e30:	0364      	lsls	r4, r4, #13

    tmp12 = z1 - z2;
 8010e32:	ebc4 3546 	rsb	r5, r4, r6, lsl #13

    tmp21 = z3 + tmp12;
 8010e36:	eb0c 0105 	add.w	r1, ip, r5
 8010e3a:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 8010e3c:	ebac 0105 	sub.w	r1, ip, r5

    tmp12 = z4 + z2;
 8010e40:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 8010e42:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 8010e46:	9102      	str	r1, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010e48:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp25 = tmp10 - tmp12;
 8010e4c:	1b79      	subs	r1, r7, r5
    tmp12 = z4 - z1 - z2;
 8010e4e:	1b00      	subs	r0, r0, r4
    tmp20 = tmp10 + tmp12;
 8010e50:	eb07 0b05 	add.w	fp, r7, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e54:	f9b8 7010 	ldrsh.w	r7, [r8, #16]
    tmp25 = tmp10 - tmp12;
 8010e58:	9103      	str	r1, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8010e5a:	1811      	adds	r1, r2, r0
    tmp23 = tmp11 - tmp12;
 8010e5c:	1a12      	subs	r2, r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e5e:	f9b8 c030 	ldrsh.w	ip, [r8, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e62:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp23 = tmp11 - tmp12;
 8010e66:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e68:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8010e6a:	9104      	str	r1, [sp, #16]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e6c:	6a12      	ldr	r2, [r2, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e6e:	9900      	ldr	r1, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e70:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e72:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e74:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010e78:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e7c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8010e7e:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e82:	9a00      	ldr	r2, [sp, #0]
 8010e84:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010e88:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010e8c:	49b9      	ldr	r1, [pc, #740]	; (8011174 <jpeg_idct_12x12+0x3b4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e8e:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e90:	f9b8 2070 	ldrsh.w	r2, [r8, #112]	; 0x70
    tmp10 = z1 + z3;
 8010e94:	eb07 0a05 	add.w	sl, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e98:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010e9a:	fb01 f00c 	mul.w	r0, r1, ip
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010e9e:	eb02 0e0a 	add.w	lr, r2, sl
 8010ea2:	fb06 fe0e 	mul.w	lr, r6, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8010ea6:	f640 065b 	movw	r6, #2139	; 0x85b
 8010eaa:	fb06 ea0a 	mla	sl, r6, sl, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010eae:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8010eb2:	eb04 010a 	add.w	r1, r4, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010eb6:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010eba:	fb06 1107 	mla	r1, r6, r7, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010ebe:	18ae      	adds	r6, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010ec0:	9106      	str	r1, [sp, #24]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010ec2:	49ad      	ldr	r1, [pc, #692]	; (8011178 <jpeg_idct_12x12+0x3b8>)
 8010ec4:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010ec6:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010ec8:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010eca:	49ac      	ldr	r1, [pc, #688]	; (801117c <jpeg_idct_12x12+0x3bc>)
 8010ecc:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010ed0:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8010ed2:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010ed6:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010eda:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010edc:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8010ee0:	fb0a 4402 	mla	r4, sl, r2, r4
 8010ee4:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010ee6:	49a6      	ldr	r1, [pc, #664]	; (8011180 <jpeg_idct_12x12+0x3c0>)
 8010ee8:	fb01 0007 	mla	r0, r1, r7, r0
 8010eec:	49a5      	ldr	r1, [pc, #660]	; (8011184 <jpeg_idct_12x12+0x3c4>)
 8010eee:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8010ef2:	1aba      	subs	r2, r7, r2
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010ef4:	1957      	adds	r7, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010ef6:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010ef8:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8010efc:	f641 0c7e 	movw	ip, #6270	; 0x187e
 8010f00:	fb0c 7c02 	mla	ip, ip, r2, r7
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010f04:	4aa0      	ldr	r2, [pc, #640]	; (8011188 <jpeg_idct_12x12+0x3c8>)
 8010f06:	fb02 7705 	mla	r7, r2, r5, r7

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010f0a:	9a06      	ldr	r2, [sp, #24]
 8010f0c:	445a      	add	r2, fp
 8010f0e:	12d2      	asrs	r2, r2, #11
 8010f10:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010f14:	9a06      	ldr	r2, [sp, #24]
 8010f16:	ebab 0b02 	sub.w	fp, fp, r2
 8010f1a:	ea4f 22eb 	mov.w	r2, fp, asr #11
 8010f1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010f22:	9a01      	ldr	r2, [sp, #4]
 8010f24:	4462      	add	r2, ip
 8010f26:	12d2      	asrs	r2, r2, #11
 8010f28:	61da      	str	r2, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010f2a:	9a01      	ldr	r2, [sp, #4]
 8010f2c:	eba2 020c 	sub.w	r2, r2, ip
 8010f30:	12d2      	asrs	r2, r2, #11
 8010f32:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010f36:	9a04      	ldr	r2, [sp, #16]
 8010f38:	4432      	add	r2, r6
 8010f3a:	12d2      	asrs	r2, r2, #11
 8010f3c:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010f3e:	9a04      	ldr	r2, [sp, #16]
 8010f40:	1b92      	subs	r2, r2, r6
 8010f42:	12d2      	asrs	r2, r2, #11
 8010f44:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010f48:	9a05      	ldr	r2, [sp, #20]
 8010f4a:	4422      	add	r2, r4
 8010f4c:	12d2      	asrs	r2, r2, #11
 8010f4e:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010f50:	9a05      	ldr	r2, [sp, #20]
 8010f52:	1b12      	subs	r2, r2, r4
 8010f54:	12d2      	asrs	r2, r2, #11
 8010f56:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010f5a:	9a02      	ldr	r2, [sp, #8]
 8010f5c:	443a      	add	r2, r7
 8010f5e:	12d2      	asrs	r2, r2, #11
 8010f60:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010f62:	9a02      	ldr	r2, [sp, #8]
 8010f64:	1bd2      	subs	r2, r2, r7
 8010f66:	12d2      	asrs	r2, r2, #11
 8010f68:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010f6c:	9a03      	ldr	r2, [sp, #12]
 8010f6e:	4402      	add	r2, r0
 8010f70:	12d2      	asrs	r2, r2, #11
 8010f72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010f76:	9a03      	ldr	r2, [sp, #12]
 8010f78:	1a12      	subs	r2, r2, r0
 8010f7a:	12d2      	asrs	r2, r2, #11
 8010f7c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f82:	4542      	cmp	r2, r8
 8010f84:	f47f af2d 	bne.w	8010de2 <jpeg_idct_12x12+0x22>
 8010f88:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8010f8a:	aa0a      	add	r2, sp, #40	; 0x28
 8010f8c:	f1a3 0a04 	sub.w	sl, r3, #4
 8010f90:	332c      	adds	r3, #44	; 0x2c
 8010f92:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010f94:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010f98:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8010f9a:	9974      	ldr	r1, [sp, #464]	; 0x1d0
    z2 = (INT32) wsptr[6];
 8010f9c:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 8010fa0:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 8010fa4:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8010fa6:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010fa8:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8010fac:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8010fae:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 8010fb2:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010fb6:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8010fb8:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010fba:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010fbe:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010fc2:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010fc4:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8010fc8:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8010fcc:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 8010fd0:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 8010fd2:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8010fd6:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8010fda:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8010fde:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 8010fe2:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 8010fe4:	1b09      	subs	r1, r1, r4
    tmp25 = tmp10 - tmp12;
 8010fe6:	eba6 030c 	sub.w	r3, r6, ip
    z3 = (INT32) wsptr[5];
 8010fea:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp20 = tmp10 + tmp12;
 8010fee:	eb06 070c 	add.w	r7, r6, ip
    tmp25 = tmp10 - tmp12;
 8010ff2:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8010ff4:	1843      	adds	r3, r0, r1
    z4 = (INT32) wsptr[7];
 8010ff6:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010ffa:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp22 = tmp11 + tmp12;
 8010ffe:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8011000:	1a43      	subs	r3, r0, r1
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011002:	f642 11cf 	movw	r1, #10703	; 0x29cf
    tmp23 = tmp11 - tmp12;
 8011006:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011008:	f852 3c14 	ldr.w	r3, [r2, #-20]
 801100c:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011010:	4958      	ldr	r1, [pc, #352]	; (8011174 <jpeg_idct_12x12+0x3b4>)
 8011012:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 8011014:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011018:	eb03 0b05 	add.w	fp, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801101c:	eb04 0c0b 	add.w	ip, r4, fp
 8011020:	fb06 fc0c 	mul.w	ip, r6, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011024:	f640 065b 	movw	r6, #2139	; 0x85b
 8011028:	fb06 cb0b 	mla	fp, r6, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801102c:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011030:	eb00 0e0b 	add.w	lr, r0, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011034:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011038:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801103c:	192e      	adds	r6, r5, r4
 801103e:	4b4e      	ldr	r3, [pc, #312]	; (8011178 <jpeg_idct_12x12+0x3b8>)
 8011040:	fb03 f806 	mul.w	r8, r3, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011044:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 8011048:	eb01 0608 	add.w	r6, r1, r8
 801104c:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011050:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011054:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011056:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 801105a:	fb0b 0004 	mla	r0, fp, r4, r0
 801105e:	eb00 0b08 	add.w	fp, r0, r8
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011062:	4847      	ldr	r0, [pc, #284]	; (8011180 <jpeg_idct_12x12+0x3c0>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011064:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011068:	fb00 1103 	mla	r1, r0, r3, r1
 801106c:	4b45      	ldr	r3, [pc, #276]	; (8011184 <jpeg_idct_12x12+0x3c4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801106e:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011070:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8011074:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011078:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 801107a:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801107e:	4461      	add	r1, ip
    z2 -= z3;
 8011080:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011082:	4b41      	ldr	r3, [pc, #260]	; (8011188 <jpeg_idct_12x12+0x3c8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011084:	eb04 0c05 	add.w	ip, r4, r5
 8011088:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801108c:	f641 087e 	movw	r8, #6270	; 0x187e
 8011090:	fb08 c804 	mla	r8, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011094:	eb07 040e 	add.w	r4, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011098:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801109c:	fb03 cc05 	mla	ip, r3, r5, ip
			     & RANGE_MASK];
 80110a0:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80110a4:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80110a6:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80110aa:	f819 4004 	ldrb.w	r4, [r9, r4]
 80110ae:	541c      	strb	r4, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80110b0:	9b00      	ldr	r3, [sp, #0]
 80110b2:	f819 4007 	ldrb.w	r4, [r9, r7]
 80110b6:	72dc      	strb	r4, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80110b8:	9b01      	ldr	r3, [sp, #4]
 80110ba:	eb03 0408 	add.w	r4, r3, r8
 80110be:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80110c0:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80110c4:	f819 4004 	ldrb.w	r4, [r9, r4]
 80110c8:	705c      	strb	r4, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80110ca:	9b01      	ldr	r3, [sp, #4]
 80110cc:	eba3 0408 	sub.w	r4, r3, r8
			     & RANGE_MASK];
 80110d0:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80110d4:	f819 4004 	ldrb.w	r4, [r9, r4]
 80110d8:	9b00      	ldr	r3, [sp, #0]
 80110da:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80110dc:	9b04      	ldr	r3, [sp, #16]
 80110de:	199c      	adds	r4, r3, r6
 80110e0:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80110e2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80110e6:	f819 4004 	ldrb.w	r4, [r9, r4]
 80110ea:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80110ec:	9b04      	ldr	r3, [sp, #16]
 80110ee:	1b9c      	subs	r4, r3, r6
 80110f0:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80110f2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80110f6:	f819 4004 	ldrb.w	r4, [r9, r4]
 80110fa:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80110fc:	9b05      	ldr	r3, [sp, #20]
 80110fe:	eb03 040b 	add.w	r4, r3, fp
 8011102:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011104:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011108:	f819 4004 	ldrb.w	r4, [r9, r4]
 801110c:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801110e:	9b05      	ldr	r3, [sp, #20]
 8011110:	eba3 000b 	sub.w	r0, r3, fp
 8011114:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011116:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801111a:	f819 0000 	ldrb.w	r0, [r9, r0]
 801111e:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011120:	9b02      	ldr	r3, [sp, #8]
 8011122:	eb03 000c 	add.w	r0, r3, ip
 8011126:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011128:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801112c:	f819 0000 	ldrb.w	r0, [r9, r0]
 8011130:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011132:	9b02      	ldr	r3, [sp, #8]
 8011134:	eba3 000c 	sub.w	r0, r3, ip
 8011138:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801113a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801113e:	f819 0000 	ldrb.w	r0, [r9, r0]
 8011142:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011144:	9b03      	ldr	r3, [sp, #12]
 8011146:	1858      	adds	r0, r3, r1
 8011148:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801114a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801114e:	f819 0000 	ldrb.w	r0, [r9, r0]
 8011152:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011154:	9b03      	ldr	r3, [sp, #12]
 8011156:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011158:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801115c:	f819 1001 	ldrb.w	r1, [r9, r1]
 8011160:	9b00      	ldr	r3, [sp, #0]
 8011162:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8011164:	9b07      	ldr	r3, [sp, #28]
 8011166:	4553      	cmp	r3, sl
 8011168:	f47f af14 	bne.w	8010f94 <jpeg_idct_12x12+0x1d4>
  }
}
 801116c:	b06b      	add	sp, #428	; 0x1ac
 801116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011172:	bf00      	nop
 8011174:	ffffeeaf 	.word	0xffffeeaf
 8011178:	ffffde8b 	.word	0xffffde8b
 801117c:	ffffd0b0 	.word	0xffffd0b0
 8011180:	ffffea5c 	.word	0xffffea5c
 8011184:	ffffc08c 	.word	0xffffc08c
 8011188:	ffffc4df 	.word	0xffffc4df

0801118c <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011190:	b0f7      	sub	sp, #476	; 0x1dc
 8011192:	f1a2 0902 	sub.w	r9, r2, #2
 8011196:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011198:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801119c:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80111a0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80111a2:	f1a3 0e04 	sub.w	lr, r3, #4
 80111a6:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 80111aa:	aa0e      	add	r2, sp, #56	; 0x38
 80111ac:	930d      	str	r3, [sp, #52]	; 0x34
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111ae:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80111b2:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111b6:	f85e 1f04 	ldr.w	r1, [lr, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80111ba:	3204      	adds	r2, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80111bc:	f9b9 4020 	ldrsh.w	r4, [r9, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111c0:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80111c2:	f9b9 1040 	ldrsh.w	r1, [r9, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80111c6:	f9b9 0060 	ldrsh.w	r0, [r9, #96]	; 0x60
    z1 <<= CONST_BITS;
 80111ca:	035b      	lsls	r3, r3, #13

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80111cc:	f9b9 7050 	ldrsh.w	r7, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80111d0:	f9b9 c070 	ldrsh.w	ip, [r9, #112]	; 0x70
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80111d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80111d8:	9303      	str	r3, [sp, #12]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80111da:	f8de 3040 	ldr.w	r3, [lr, #64]	; 0x40
 80111de:	4363      	muls	r3, r4
 80111e0:	9301      	str	r3, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80111e2:	f8de 3080 	ldr.w	r3, [lr, #128]	; 0x80
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 80111e6:	9c01      	ldr	r4, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80111e8:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80111ea:	f8de 30c0 	ldr.w	r3, [lr, #192]	; 0xc0
 80111ee:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 80111f0:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 80111f2:	1a09      	subs	r1, r1, r0
 80111f4:	9102      	str	r1, [sp, #8]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80111f6:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80111fa:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80111fc:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
 8011200:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011204:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011208:	fb00 5004 	mla	r0, r0, r4, r5
 801120c:	4408      	add	r0, r1
 801120e:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011210:	f241 000c 	movw	r0, #4108	; 0x100c
 8011214:	4360      	muls	r0, r4
 8011216:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011218:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801121c:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801121e:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011222:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011226:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011228:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801122c:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801122e:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011230:	1a2d      	subs	r5, r5, r0
 8011232:	440d      	add	r5, r1
 8011234:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011236:	4dd9      	ldr	r5, [pc, #868]	; (801159c <jpeg_idct_13x13+0x410>)
 8011238:	fb05 0004 	mla	r0, r5, r4, r0
 801123c:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801123e:	9803      	ldr	r0, [sp, #12]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011240:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011242:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011246:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011248:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 801124c:	4371      	muls	r1, r6

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
    tmp10 = tmp11 + tmp12 + tmp13 -
 801124e:	4ed4      	ldr	r6, [pc, #848]	; (80115a0 <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011250:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011252:	48d4      	ldr	r0, [pc, #848]	; (80115a4 <jpeg_idct_13x13+0x418>)
 8011254:	4360      	muls	r0, r4
 8011256:	1ac0      	subs	r0, r0, r3
 8011258:	1a40      	subs	r0, r0, r1
 801125a:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801125c:	48d2      	ldr	r0, [pc, #840]	; (80115a8 <jpeg_idct_13x13+0x41c>)
 801125e:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011262:	f8de 0060 	ldr.w	r0, [lr, #96]	; 0x60
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011266:	f641 6402 	movw	r4, #7682	; 0x1e02
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801126a:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801126c:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011270:	9309      	str	r3, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011272:	f8de 3020 	ldr.w	r3, [lr, #32]
 8011276:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011278:	f9b9 3030 	ldrsh.w	r3, [r9, #48]	; 0x30
 801127c:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801127e:	f8de 00a0 	ldr.w	r0, [lr, #160]	; 0xa0
 8011282:	4347      	muls	r7, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011284:	f8de 00e0 	ldr.w	r0, [lr, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011288:	eb01 0b03 	add.w	fp, r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801128c:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011290:	f642 2050 	movw	r0, #10832	; 0x2a50
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011294:	19cd      	adds	r5, r1, r7
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011296:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801129a:	f242 503e 	movw	r0, #9534	; 0x253e
 801129e:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80112a0:	eb01 000c 	add.w	r0, r1, ip
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80112a4:	fb04 fa00 	mul.w	sl, r4, r0
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80112a8:	4cc0      	ldr	r4, [pc, #768]	; (80115ac <jpeg_idct_13x13+0x420>)
    tmp15 = z1 + z4;
 80112aa:	900a      	str	r0, [sp, #40]	; 0x28
    tmp10 = tmp11 + tmp12 + tmp13 -
 80112ac:	eb0b 0005 	add.w	r0, fp, r5
 80112b0:	4450      	add	r0, sl
 80112b2:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80112b6:	4ebe      	ldr	r6, [pc, #760]	; (80115b0 <jpeg_idct_13x13+0x424>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 80112b8:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80112ba:	19d8      	adds	r0, r3, r7
 80112bc:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80112be:	f641 26cb 	movw	r6, #6859	; 0x1acb
 80112c2:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80112c6:	fb04 0007 	mla	r0, r4, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80112ca:	f604 5411 	addw	r4, r4, #3345	; 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80112ce:	445e      	add	r6, fp
    tmp11 += tmp14;
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80112d0:	f244 6b94 	movw	fp, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80112d4:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80112d6:	eb03 050c 	add.w	r5, r3, ip
 80112da:	4365      	muls	r5, r4
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80112dc:	4cb5      	ldr	r4, [pc, #724]	; (80115b4 <jpeg_idct_13x13+0x428>)
    tmp11 += tmp14;
 80112de:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80112e0:	fb0b 550c 	mla	r5, fp, ip, r5
    tmp12 += tmp14;
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80112e4:	f640 2b33 	movw	fp, #2611	; 0xa33
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80112e8:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80112ea:	eb07 0a0c 	add.w	sl, r7, ip
 80112ee:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80112f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp12 += tmp14;
 80112f4:	4450      	add	r0, sl
    tmp13 += tmp14;
 80112f6:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80112f8:	f640 25d5 	movw	r5, #2773	; 0xad5
 80112fc:	4365      	muls	r5, r4
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80112fe:	4cae      	ldr	r4, [pc, #696]	; (80115b8 <jpeg_idct_13x13+0x42c>)
 8011300:	fb0b 5101 	mla	r1, fp, r1, r5
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011304:	f640 4b4e 	movw	fp, #3150	; 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011308:	fb04 1103 	mla	r1, r4, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801130c:	1afb      	subs	r3, r7, r3
 801130e:	f641 6402 	movw	r4, #7682	; 0x1e02
 8011312:	4363      	muls	r3, r4
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011314:	9c04      	ldr	r4, [sp, #16]
    tmp14 += z1;
 8011316:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011318:	fb0b 3307 	mla	r3, fp, r7, r3
 801131c:	f46f 575f 	mvn.w	r7, #14272	; 0x37c0
 8011320:	fb07 330c 	mla	r3, r7, ip, r3
 8011324:	442b      	add	r3, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011326:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011328:	1965      	adds	r5, r4, r5
 801132a:	12ed      	asrs	r5, r5, #11
 801132c:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011330:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011332:	1b65      	subs	r5, r4, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011334:	9c06      	ldr	r4, [sp, #24]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011336:	12ed      	asrs	r5, r5, #11
 8011338:	f8c2 517c 	str.w	r5, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801133c:	19a5      	adds	r5, r4, r6
 801133e:	12ed      	asrs	r5, r5, #11
 8011340:	61d5      	str	r5, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011342:	1ba5      	subs	r5, r4, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011344:	9c05      	ldr	r4, [sp, #20]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011346:	12ed      	asrs	r5, r5, #11
 8011348:	f8c2 515c 	str.w	r5, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801134c:	1825      	adds	r5, r4, r0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801134e:	1a20      	subs	r0, r4, r0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011350:	12ed      	asrs	r5, r5, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011352:	12c0      	asrs	r0, r0, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011354:	63d5      	str	r5, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011356:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801135a:	9808      	ldr	r0, [sp, #32]
 801135c:	4450      	add	r0, sl
 801135e:	12c0      	asrs	r0, r0, #11
 8011360:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011362:	9808      	ldr	r0, [sp, #32]
 8011364:	eba0 000a 	sub.w	r0, r0, sl
 8011368:	12c0      	asrs	r0, r0, #11
 801136a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801136e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011370:	4408      	add	r0, r1
 8011372:	12c0      	asrs	r0, r0, #11
 8011374:	67d0      	str	r0, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011378:	1a41      	subs	r1, r0, r1
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801137a:	9803      	ldr	r0, [sp, #12]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801137c:	12c9      	asrs	r1, r1, #11
 801137e:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011382:	9907      	ldr	r1, [sp, #28]
 8011384:	4419      	add	r1, r3
 8011386:	12c9      	asrs	r1, r1, #11
 8011388:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801138c:	9907      	ldr	r1, [sp, #28]
 801138e:	1acb      	subs	r3, r1, r3
 8011390:	12db      	asrs	r3, r3, #11
 8011392:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011396:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 801139a:	1a5b      	subs	r3, r3, r1
 801139c:	f642 5141 	movw	r1, #11585	; 0x2d41
 80113a0:	fb01 0303 	mla	r3, r1, r3, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 80113a4:	12db      	asrs	r3, r3, #11
 80113a6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80113aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113ac:	454b      	cmp	r3, r9
 80113ae:	f47f aefe 	bne.w	80111ae <jpeg_idct_13x13+0x22>
 80113b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 80113b4:	ac0e      	add	r4, sp, #56	; 0x38
 80113b6:	3b04      	subs	r3, #4
 80113b8:	9303      	str	r3, [sp, #12]
 80113ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113bc:	3330      	adds	r3, #48	; 0x30
 80113be:	930c      	str	r3, [sp, #48]	; 0x30
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80113c0:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80113c2:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 80113c6:	6920      	ldr	r0, [r4, #16]
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80113c8:	f641 6702 	movw	r7, #7682	; 0x1e02
    outptr = output_buf[ctr] + output_col;
 80113cc:	f853 2f04 	ldr.w	r2, [r3, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80113d0:	3420      	adds	r4, #32
    z4 = (INT32) wsptr[6];
 80113d2:	f854 1c08 	ldr.w	r1, [r4, #-8]
    outptr = output_buf[ctr] + output_col;
 80113d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80113d8:	9303      	str	r3, [sp, #12]
 80113da:	4613      	mov	r3, r2
 80113dc:	9a80      	ldr	r2, [sp, #512]	; 0x200
    z2 = (INT32) wsptr[2];
 80113de:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 80113e2:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80113e4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    z3 = (INT32) wsptr[5];
 80113e8:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80113ec:	3310      	adds	r3, #16
 80113ee:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 80113f0:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 80113f2:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80113f4:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 80113f6:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80113f8:	f240 3119 	movw	r1, #793	; 0x319
 80113fc:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80113fe:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011400:	4341      	muls	r1, r0
 8011402:	9802      	ldr	r0, [sp, #8]
 8011404:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011408:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 801140c:	fb00 500e 	mla	r0, r0, lr, r5
 8011410:	4408      	add	r0, r1
 8011412:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011414:	f241 000c 	movw	r0, #4108	; 0x100c
 8011418:	fb00 f00e 	mul.w	r0, r0, lr
 801141c:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801141e:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011422:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011424:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011428:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801142c:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801142e:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011432:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011436:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011438:	1a2d      	subs	r5, r5, r0
 801143a:	440d      	add	r5, r1
 801143c:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801143e:	4d57      	ldr	r5, [pc, #348]	; (801159c <jpeg_idct_13x13+0x410>)
 8011440:	fb05 000e 	mla	r0, r5, lr, r0
 8011444:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011446:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011448:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801144a:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801144e:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011450:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011454:	4371      	muls	r1, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011456:	4e56      	ldr	r6, [pc, #344]	; (80115b0 <jpeg_idct_13x13+0x424>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011458:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 801145c:	4851      	ldr	r0, [pc, #324]	; (80115a4 <jpeg_idct_13x13+0x418>)
 801145e:	fb00 f00e 	mul.w	r0, r0, lr
 8011462:	1ac0      	subs	r0, r0, r3
 8011464:	1a40      	subs	r0, r0, r1
 8011466:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011468:	484f      	ldr	r0, [pc, #316]	; (80115a8 <jpeg_idct_13x13+0x41c>)
 801146a:	fb00 330e 	mla	r3, r0, lr, r3
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801146e:	f642 2050 	movw	r0, #10832	; 0x2a50
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011472:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8011474:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011478:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801147a:	eb01 050c 	add.w	r5, r1, ip
    z2 = (INT32) wsptr[3];
 801147e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011482:	eb01 0b03 	add.w	fp, r1, r3
 8011486:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801148a:	f242 503e 	movw	r0, #9534	; 0x253e
 801148e:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011490:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011494:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011498:	4841      	ldr	r0, [pc, #260]	; (80115a0 <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801149a:	fb07 fa09 	mul.w	sl, r7, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 801149e:	eb0b 0705 	add.w	r7, fp, r5
 80114a2:	4457      	add	r7, sl
 80114a4:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80114a8:	4f40      	ldr	r7, [pc, #256]	; (80115ac <jpeg_idct_13x13+0x420>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 80114aa:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80114ac:	eb03 000c 	add.w	r0, r3, ip
 80114b0:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80114b2:	f641 26cb 	movw	r6, #6859	; 0x1acb
 80114b6:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80114ba:	fb07 000c 	mla	r0, r7, ip, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80114be:	f607 5711 	addw	r7, r7, #3345	; 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80114c2:	445e      	add	r6, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80114c4:	f244 6b94 	movw	fp, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80114c8:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80114ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80114ce:	195d      	adds	r5, r3, r5
 80114d0:	437d      	muls	r5, r7
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80114d2:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp11 += tmp14;
 80114d6:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80114d8:	fb0b 5507 	mla	r5, fp, r7, r5
 80114dc:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80114de:	eb0c 0a07 	add.w	sl, ip, r7
 80114e2:	4f34      	ldr	r7, [pc, #208]	; (80115b4 <jpeg_idct_13x13+0x428>)
 80114e4:	fb07 fa0a 	mul.w	sl, r7, sl
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80114e8:	f207 671e 	addw	r7, r7, #1566	; 0x61e
    tmp12 += tmp14;
 80114ec:	4450      	add	r0, sl
    tmp13 += tmp14;
 80114ee:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80114f0:	f640 25d5 	movw	r5, #2773	; 0xad5
 80114f4:	fb05 f509 	mul.w	r5, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80114f8:	f640 2933 	movw	r9, #2611	; 0xa33
 80114fc:	fb09 5101 	mla	r1, r9, r1, r5
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011500:	f640 494e 	movw	r9, #3150	; 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011504:	fb07 1103 	mla	r1, r7, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011508:	ebac 0303 	sub.w	r3, ip, r3
 801150c:	f641 6702 	movw	r7, #7682	; 0x1e02
 8011510:	437b      	muls	r3, r7
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011512:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp14 += z1;
 8011516:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011518:	fb09 330c 	mla	r3, r9, ip, r3
 801151c:	f46f 5c5f 	mvn.w	ip, #14272	; 0x37c0
 8011520:	fb0c 3307 	mla	r3, ip, r7, r3
 8011524:	eb03 0c05 	add.w	ip, r3, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801152a:	9d04      	ldr	r5, [sp, #16]
 801152c:	441d      	add	r5, r3
			     & RANGE_MASK];
 801152e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011532:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011536:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011538:	9b80      	ldr	r3, [sp, #512]	; 0x200
 801153a:	54fd      	strb	r5, [r7, r3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801153c:	9b04      	ldr	r3, [sp, #16]
 801153e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011540:	1b5d      	subs	r5, r3, r5
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011542:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8011544:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011548:	f818 5005 	ldrb.w	r5, [r8, r5]
 801154c:	7315      	strb	r5, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801154e:	199d      	adds	r5, r3, r6
			     & RANGE_MASK];
 8011550:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011554:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011558:	7055      	strb	r5, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801155a:	1b9d      	subs	r5, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801155c:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 801155e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011562:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011566:	72d5      	strb	r5, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011568:	181d      	adds	r5, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801156a:	1a18      	subs	r0, r3, r0
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801156c:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 801156e:	f3c5 4589 	ubfx	r5, r5, #18, #10
			     & RANGE_MASK];
 8011572:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011576:	f818 5005 	ldrb.w	r5, [r8, r5]
 801157a:	7095      	strb	r5, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801157c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8011580:	7290      	strb	r0, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011582:	eb03 000a 	add.w	r0, r3, sl
			     & RANGE_MASK];
 8011586:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801158a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801158e:	70d0      	strb	r0, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011590:	eba3 000a 	sub.w	r0, r3, sl
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011594:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8011596:	f3c0 4089 	ubfx	r0, r0, #18, #10
 801159a:	e00f      	b.n	80115bc <jpeg_idct_13x13+0x430>
 801159c:	ffffd7ee 	.word	0xffffd7ee
 80115a0:	ffffbf5b 	.word	0xffffbf5b
 80115a4:	fffffa8c 	.word	0xfffffa8c
 80115a8:	ffffe64b 	.word	0xffffe64b
 80115ac:	ffffcdb1 	.word	0xffffcdb1
 80115b0:	fffff52b 	.word	0xfffff52b
 80115b4:	ffffeaf8 	.word	0xffffeaf8
 80115b8:	fffff116 	.word	0xfffff116
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80115bc:	f818 0000 	ldrb.w	r0, [r8, r0]
 80115c0:	7250      	strb	r0, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80115c2:	1858      	adds	r0, r3, r1
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80115c4:	1a59      	subs	r1, r3, r1
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80115c6:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80115c8:	f3c0 4089 	ubfx	r0, r0, #18, #10
			     & RANGE_MASK];
 80115cc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80115d0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80115d4:	7110      	strb	r0, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80115d6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80115da:	7211      	strb	r1, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80115dc:	eb03 010c 	add.w	r1, r3, ip
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80115e0:	eba3 030c 	sub.w	r3, r3, ip
			     & RANGE_MASK];
 80115e4:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 80115e8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80115ec:	f818 1001 	ldrb.w	r1, [r8, r1]
 80115f0:	7151      	strb	r1, [r2, #5]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80115f2:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80115f6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80115fa:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80115fc:	9b01      	ldr	r3, [sp, #4]
 80115fe:	eba3 030e 	sub.w	r3, r3, lr
 8011602:	434b      	muls	r3, r1
 8011604:	9902      	ldr	r1, [sp, #8]
 8011606:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 801160a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 801160e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8011612:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8011614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011616:	9a03      	ldr	r2, [sp, #12]
 8011618:	4293      	cmp	r3, r2
 801161a:	f47f aed1 	bne.w	80113c0 <jpeg_idct_13x13+0x234>
  }
}
 801161e:	b077      	add	sp, #476	; 0x1dc
 8011620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011624 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b0fd      	sub	sp, #500	; 0x1f4
 801162a:	f1a2 0b02 	sub.w	fp, r2, #2
 801162e:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011630:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011634:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011636:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801163a:	1f03      	subs	r3, r0, #4
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	f102 030e 	add.w	r3, r2, #14
 8011642:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8011644:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011646:	9900      	ldr	r1, [sp, #0]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011648:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801164c:	f93b 4f02 	ldrsh.w	r4, [fp, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011650:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011654:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011658:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801165a:	9100      	str	r1, [sp, #0]
 801165c:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801165e:	9a00      	ldr	r2, [sp, #0]
 8011660:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
 8011664:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8011668:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801166a:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801166c:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801166e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011672:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011676:	fb01 f702 	mul.w	r7, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801167a:	f640 2112 	movw	r1, #2578	; 0xa12
 801167e:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011682:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8011686:	19e6      	adds	r6, r4, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011688:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801168a:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 801168c:	eb04 050c 	add.w	r5, r4, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011690:	f9bb c020 	ldrsh.w	ip, [fp, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011694:	1abf      	subs	r7, r7, r2
    tmp12 = z1 - z4;
 8011696:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011698:	eba4 0247 	sub.w	r2, r4, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801169c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80116a0:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80116a4:	48d6      	ldr	r0, [pc, #856]	; (8011a00 <jpeg_idct_14x14+0x3dc>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80116a6:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80116a8:	9a00      	ldr	r2, [sp, #0]
 80116aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80116ac:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80116b0:	f9bb 2060 	ldrsh.w	r2, [fp, #96]	; 0x60
 80116b4:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80116b6:	eb0c 0402 	add.w	r4, ip, r2
 80116ba:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80116bc:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80116c0:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80116c4:	fb00 4402 	mla	r4, r0, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80116c8:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 80116cc:	4342      	muls	r2, r0
    tmp20 = tmp10 + tmp13;
 80116ce:	19f0      	adds	r0, r6, r7
 80116d0:	9001      	str	r0, [sp, #4]
    tmp26 = tmp10 - tmp13;
 80116d2:	1bf0      	subs	r0, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80116d4:	fb0e 220c 	mla	r2, lr, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80116d8:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	; 0x30
    tmp26 = tmp10 - tmp13;
 80116dc:	9002      	str	r0, [sp, #8]
    tmp21 = tmp11 + tmp14;
 80116de:	1928      	adds	r0, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80116e0:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp11 + tmp14;
 80116e4:	9003      	str	r0, [sp, #12]
    tmp25 = tmp11 - tmp14;
 80116e6:	1b28      	subs	r0, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80116e8:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80116ec:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 80116f0:	9004      	str	r0, [sp, #16]
    tmp22 = tmp12 + tmp15;
 80116f2:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 80116f4:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80116f6:	9900      	ldr	r1, [sp, #0]
    tmp22 = tmp12 + tmp15;
 80116f8:	9005      	str	r0, [sp, #20]
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80116fa:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
    tmp24 = tmp12 - tmp15;
 80116fe:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011700:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011702:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011706:	6a12      	ldr	r2, [r2, #32]
 8011708:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801170a:	9a00      	ldr	r2, [sp, #0]
 801170c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801170e:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011710:	9a00      	ldr	r2, [sp, #0]
 8011712:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011716:	eb04 0c07 	add.w	ip, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801171a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801171c:	f9bb 2070 	ldrsh.w	r2, [fp, #112]	; 0x70
    tmp14 = z1 + z3;
 8011720:	eb04 0a06 	add.w	sl, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011724:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011726:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801172a:	fb05 f50a 	mul.w	r5, r5, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801172e:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011732:	49b4      	ldr	r1, [pc, #720]	; (8011a04 <jpeg_idct_14x14+0x3e0>)
 8011734:	eb0c 0e05 	add.w	lr, ip, r5
 8011738:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 801173c:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011740:	f641 0114 	movw	r1, #6164	; 0x1814
 8011744:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011748:	49af      	ldr	r1, [pc, #700]	; (8011a08 <jpeg_idct_14x14+0x3e4>)
 801174a:	fb01 a104 	mla	r1, r1, r4, sl
    z1    -= z2;
 801174e:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011750:	fb08 f804 	mul.w	r8, r8, r4
 8011754:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8011758:	4441      	add	r1, r8
 801175a:	9107      	str	r1, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801175c:	19b9      	adds	r1, r7, r6
 801175e:	4341      	muls	r1, r0
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011760:	f6a0 0081 	subw	r0, r0, #2177	; 0x881
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011764:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011768:	fb00 1007 	mla	r0, r0, r7, r1
 801176c:	4460      	add	r0, ip
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801176e:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011772:	9008      	str	r0, [sp, #32]
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011774:	48a5      	ldr	r0, [pc, #660]	; (8011a0c <jpeg_idct_14x14+0x3e8>)
 8011776:	fb00 1106 	mla	r1, r0, r6, r1
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801177a:	48a5      	ldr	r0, [pc, #660]	; (8011a10 <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801177c:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801177e:	1bf5      	subs	r5, r6, r7
 8011780:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011784:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8011788:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801178a:	fb00 cc06 	mla	ip, r0, r6, ip

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801178e:	9801      	ldr	r0, [sp, #4]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8011790:	1b92      	subs	r2, r2, r6
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011792:	eb00 040e 	add.w	r4, r0, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011796:	44d4      	add	ip, sl
    tmp13 = (z1 - z3) << PASS1_BITS;
 8011798:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801179a:	f241 5a99 	movw	sl, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801179e:	12e4      	asrs	r4, r4, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80117a0:	fb0a 5507 	mla	r5, sl, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80117a4:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80117a8:	eba0 040e 	sub.w	r4, r0, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80117ac:	9803      	ldr	r0, [sp, #12]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80117ae:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80117b0:	12e4      	asrs	r4, r4, #11
 80117b2:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80117b6:	9c08      	ldr	r4, [sp, #32]
 80117b8:	1904      	adds	r4, r0, r4
 80117ba:	12e4      	asrs	r4, r4, #11
 80117bc:	61dc      	str	r4, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80117be:	9c08      	ldr	r4, [sp, #32]
 80117c0:	1b04      	subs	r4, r0, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80117c2:	9805      	ldr	r0, [sp, #20]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80117c4:	12e4      	asrs	r4, r4, #11
 80117c6:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80117ca:	1844      	adds	r4, r0, r1
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80117cc:	1a41      	subs	r1, r0, r1
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80117ce:	12e4      	asrs	r4, r4, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80117d0:	12c9      	asrs	r1, r1, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80117d2:	63dc      	str	r4, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80117d4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 80117d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80117da:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 80117de:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 80117e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80117e2:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80117e6:	9907      	ldr	r1, [sp, #28]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 80117e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80117ec:	9a06      	ldr	r2, [sp, #24]
 80117ee:	4462      	add	r2, ip
 80117f0:	12d2      	asrs	r2, r2, #11
 80117f2:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80117f4:	9a06      	ldr	r2, [sp, #24]
 80117f6:	eba2 020c 	sub.w	r2, r2, ip
 80117fa:	12d2      	asrs	r2, r2, #11
 80117fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011800:	9a04      	ldr	r2, [sp, #16]
 8011802:	442a      	add	r2, r5
 8011804:	12d2      	asrs	r2, r2, #11
 8011806:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801180a:	9a04      	ldr	r2, [sp, #16]
 801180c:	1b52      	subs	r2, r2, r5
 801180e:	12d2      	asrs	r2, r2, #11
 8011810:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011814:	9a02      	ldr	r2, [sp, #8]
 8011816:	440a      	add	r2, r1
 8011818:	12d2      	asrs	r2, r2, #11
 801181a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801181e:	9a02      	ldr	r2, [sp, #8]
 8011820:	1a52      	subs	r2, r2, r1
 8011822:	12d2      	asrs	r2, r2, #11
 8011824:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801182a:	455a      	cmp	r2, fp
 801182c:	f47f af0b 	bne.w	8011646 <jpeg_idct_14x14+0x22>
 8011830:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8011832:	a80c      	add	r0, sp, #48	; 0x30
 8011834:	3b04      	subs	r3, #4
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801183a:	3334      	adds	r3, #52	; 0x34
 801183c:	930b      	str	r3, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801183e:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011840:	f640 2412 	movw	r4, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 8011844:	6906      	ldr	r6, [r0, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011846:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 801184a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801184e:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011852:	6801      	ldr	r1, [r0, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011854:	fb04 f706 	mul.w	r7, r4, r6
    outptr = output_buf[ctr] + output_col;
 8011858:	920a      	str	r2, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801185a:	f641 4437 	movw	r4, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 801185e:	9300      	str	r3, [sp, #0]
 8011860:	4613      	mov	r3, r2
 8011862:	9a86      	ldr	r2, [sp, #536]	; 0x218
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011864:	3110      	adds	r1, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011866:	3020      	adds	r0, #32
    outptr = output_buf[ctr] + output_col;
 8011868:	189a      	adds	r2, r3, r2
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801186a:	f642 03c6 	movw	r3, #10438	; 0x28c6
    tmp11 = z1 + z3;
 801186e:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011872:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011874:	4366      	muls	r6, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011876:	4c62      	ldr	r4, [pc, #392]	; (8011a00 <jpeg_idct_14x14+0x3dc>)
    tmp10 = z1 + z2;
 8011878:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801187c:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 801187e:	ebc6 3841 	rsb	r8, r6, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011882:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011886:	1b9b      	subs	r3, r3, r6
    z1 = (INT32) wsptr[2];
 8011888:	f850 6c18 	ldr.w	r6, [r0, #-24]
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801188c:	005b      	lsls	r3, r3, #1
 801188e:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8011892:	9301      	str	r3, [sp, #4]
    z2 = (INT32) wsptr[6];
 8011894:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011898:	18f1      	adds	r1, r6, r3
 801189a:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801189c:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80118a0:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80118a4:	fb04 1103 	mla	r1, r4, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80118a8:	f604 24e5 	addw	r4, r4, #2789	; 0xae5
 80118ac:	4363      	muls	r3, r4
    tmp20 = tmp10 + tmp13;
 80118ae:	eb0c 0407 	add.w	r4, ip, r7
 80118b2:	9402      	str	r4, [sp, #8]
    tmp26 = tmp10 - tmp13;
 80118b4:	ebac 0407 	sub.w	r4, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80118b8:	fb0e 3306 	mla	r3, lr, r6, r3
    z3 = (INT32) wsptr[5];
 80118bc:	f850 cc0c 	ldr.w	ip, [r0, #-12]
    tmp26 = tmp10 - tmp13;
 80118c0:	9403      	str	r4, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80118c2:	186c      	adds	r4, r5, r1
    tmp25 = tmp11 - tmp14;
 80118c4:	1a69      	subs	r1, r5, r1
    z4 = (INT32) wsptr[7];
 80118c6:	f850 6c04 	ldr.w	r6, [r0, #-4]
    tmp21 = tmp11 + tmp14;
 80118ca:	9404      	str	r4, [sp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80118cc:	f242 6452 	movw	r4, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 80118d0:	9105      	str	r1, [sp, #20]
    tmp22 = tmp12 + tmp15;
 80118d2:	eb08 0103 	add.w	r1, r8, r3
    tmp24 = tmp12 - tmp15;
 80118d6:	eba8 0303 	sub.w	r3, r8, r3
    z2 = (INT32) wsptr[3];
 80118da:	f850 8c14 	ldr.w	r8, [r0, #-20]
    tmp22 = tmp12 + tmp15;
 80118de:	9106      	str	r1, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80118e0:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 80118e4:	9307      	str	r3, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80118e6:	f640 6ef2 	movw	lr, #3826	; 0xef2
    z1 = (INT32) wsptr[1];
 80118ea:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    tmp14 = z1 + z3;
 80118ee:	eb03 0b0c 	add.w	fp, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80118f2:	eb03 0508 	add.w	r5, r3, r8
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80118f6:	fb04 f40b 	mul.w	r4, r4, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80118fa:	434d      	muls	r5, r1
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80118fc:	4941      	ldr	r1, [pc, #260]	; (8011a04 <jpeg_idct_14x14+0x3e0>)
 80118fe:	192f      	adds	r7, r5, r4
 8011900:	eb07 3746 	add.w	r7, r7, r6, lsl #13
 8011904:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011908:	f641 0114 	movw	r1, #6164	; 0x1814
 801190c:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011910:	493d      	ldr	r1, [pc, #244]	; (8011a08 <jpeg_idct_14x14+0x3e4>)
 8011912:	fb01 b103 	mla	r1, r1, r3, fp
    z1    -= z2;
 8011916:	eba3 0308 	sub.w	r3, r3, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801191a:	fb0e fe03 	mul.w	lr, lr, r3
    z1    -= z2;
 801191e:	9308      	str	r3, [sp, #32]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011920:	ebae 3e46 	sub.w	lr, lr, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011924:	4b3b      	ldr	r3, [pc, #236]	; (8011a14 <jpeg_idct_14x14+0x3f0>)
    tmp16 += tmp15;
 8011926:	4471      	add	r1, lr
 8011928:	9109      	str	r1, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801192a:	eb08 010c 	add.w	r1, r8, ip
 801192e:	fb0a f101 	mul.w	r1, sl, r1
 8011932:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011936:	fb03 1a08 	mla	sl, r3, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801193a:	4b34      	ldr	r3, [pc, #208]	; (8011a0c <jpeg_idct_14x14+0x3e8>)
 801193c:	fb03 110c 	mla	r1, r3, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011940:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011942:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011946:	4b32      	ldr	r3, [pc, #200]	; (8011a10 <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011948:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801194a:	ebac 0408 	sub.w	r4, ip, r8
 801194e:	436c      	muls	r4, r5
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011950:	eb04 3546 	add.w	r5, r4, r6, lsl #13
 8011954:	fb03 550c 	mla	r5, r3, ip, r5
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011958:	9b08      	ldr	r3, [sp, #32]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801195a:	445d      	add	r5, fp
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801195c:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011960:	f241 5b99 	movw	fp, #5529	; 0x1599
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011964:	035b      	lsls	r3, r3, #13
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011966:	fb0b 4408 	mla	r4, fp, r8, r4
 801196a:	4474      	add	r4, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801196c:	eb03 3e46 	add.w	lr, r3, r6, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011970:	9e02      	ldr	r6, [sp, #8]
 8011972:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8011974:	eb06 0c07 	add.w	ip, r6, r7
 8011978:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			     & RANGE_MASK];
 801197a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801197e:	f819 c00c 	ldrb.w	ip, [r9, ip]
 8011982:	f806 c003 	strb.w	ip, [r6, r3]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011986:	9b02      	ldr	r3, [sp, #8]
 8011988:	1bde      	subs	r6, r3, r7
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801198a:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 801198c:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011990:	f819 6006 	ldrb.w	r6, [r9, r6]
 8011994:	7356      	strb	r6, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011996:	eb03 060a 	add.w	r6, r3, sl
			     & RANGE_MASK];
 801199a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801199e:	f819 6006 	ldrb.w	r6, [r9, r6]
 80119a2:	7056      	strb	r6, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80119a4:	eba3 060a 	sub.w	r6, r3, sl
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80119a8:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80119aa:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80119ae:	f819 6006 	ldrb.w	r6, [r9, r6]
 80119b2:	7316      	strb	r6, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80119b4:	185e      	adds	r6, r3, r1
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80119b6:	1a59      	subs	r1, r3, r1
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80119b8:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80119ba:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 80119be:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80119c2:	f819 6006 	ldrb.w	r6, [r9, r6]
 80119c6:	7096      	strb	r6, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80119c8:	f819 1001 	ldrb.w	r1, [r9, r1]
 80119cc:	72d1      	strb	r1, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80119ce:	eb03 010e 	add.w	r1, r3, lr
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80119d2:	eba3 030e 	sub.w	r3, r3, lr
			     & RANGE_MASK];
 80119d6:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 80119da:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80119de:	f819 1001 	ldrb.w	r1, [r9, r1]
 80119e2:	70d1      	strb	r1, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80119e4:	f819 3003 	ldrb.w	r3, [r9, r3]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80119e8:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80119ea:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80119ec:	9b07      	ldr	r3, [sp, #28]
 80119ee:	442b      	add	r3, r5
			     & RANGE_MASK];
 80119f0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80119f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80119f8:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80119fa:	9b07      	ldr	r3, [sp, #28]
 80119fc:	1b5b      	subs	r3, r3, r5
 80119fe:	e00b      	b.n	8011a18 <jpeg_idct_14x14+0x3f4>
 8011a00:	ffffc8fc 	.word	0xffffc8fc
 8011a04:	ffffdbf0 	.word	0xffffdbf0
 8011a08:	ffffde0b 	.word	0xffffde0b
 8011a0c:	ffffb409 	.word	0xffffb409
 8011a10:	ffffc9e6 	.word	0xffffc9e6
 8011a14:	fffff26e 	.word	0xfffff26e
			     & RANGE_MASK];
 8011a18:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011a1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a20:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011a22:	9b05      	ldr	r3, [sp, #20]
 8011a24:	4423      	add	r3, r4
			     & RANGE_MASK];
 8011a26:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011a2a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a2e:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011a30:	9b05      	ldr	r3, [sp, #20]
 8011a32:	1b1b      	subs	r3, r3, r4
			     & RANGE_MASK];
 8011a34:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011a38:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a3c:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011a3e:	9b03      	ldr	r3, [sp, #12]
 8011a40:	440b      	add	r3, r1
			     & RANGE_MASK];
 8011a42:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011a46:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a4a:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011a4c:	9b03      	ldr	r3, [sp, #12]
 8011a4e:	1a5b      	subs	r3, r3, r1
			     & RANGE_MASK];
 8011a50:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011a54:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a58:	71d3      	strb	r3, [r2, #7]
  for (ctr = 0; ctr < 14; ctr++) {
 8011a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a5c:	9a00      	ldr	r2, [sp, #0]
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	f47f aeed 	bne.w	801183e <jpeg_idct_14x14+0x21a>
  }
}
 8011a64:	b07d      	add	sp, #500	; 0x1f4
 8011a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a6a:	bf00      	nop

08011a6c <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a70:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8011a74:	f1a2 0a02 	sub.w	sl, r2, #2
 8011a78:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011a7a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011a7e:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011a80:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011a84:	1f03      	subs	r3, r0, #4
 8011a86:	9300      	str	r3, [sp, #0]
 8011a88:	f102 030e 	add.w	r3, r2, #14
 8011a8c:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8011a8e:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011a90:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011a92:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011a96:	f93a 5f02 	ldrsh.w	r5, [sl, #2]!
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011a9a:	f241 2b68 	movw	fp, #4712	; 0x1268
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011a9e:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011aa2:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011aa6:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011aaa:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011aac:	9100      	str	r1, [sp, #0]
 8011aae:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011ab0:	9a00      	ldr	r2, [sp, #0]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ab2:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011ab4:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8011ab6:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011ab8:	f9ba 1020 	ldrsh.w	r1, [sl, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011abc:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011ac0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011ac4:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ac6:	f9ba 2040 	ldrsh.w	r2, [sl, #64]	; 0x40
 8011aca:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011acc:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011ad0:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011ad4:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011ad6:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011ada:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011ade:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011ae2:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8011ae4:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8011ae8:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011aea:	eba4 040c 	sub.w	r4, r4, ip
 8011aee:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8011af2:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8011af4:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011af6:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011afa:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011afc:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011b00:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8011b04:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011b08:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011b0c:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8011b0e:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011b12:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011b14:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8011b18:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011b1a:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011b1c:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011b20:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011b24:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011b26:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8011b28:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011b2c:	443c      	add	r4, r7
 8011b2e:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8011b32:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011b36:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011b3a:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8011b3c:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011b3e:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8011b40:	f641 114c 	movw	r1, #6476	; 0x194c
 8011b44:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011b46:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8011b4a:	440f      	add	r7, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011b4c:	436a      	muls	r2, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8011b4e:	1a76      	subs	r6, r6, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8011b50:	18b8      	adds	r0, r7, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8011b52:	18b2      	adds	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011b54:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 8011b58:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8011b5a:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8011b5c:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8011b60:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b62:	f9ba 5030 	ldrsh.w	r5, [sl, #48]	; 0x30
    tmp11 += tmp11;
 8011b66:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011b68:	9908      	ldr	r1, [sp, #32]
 8011b6a:	9a01      	ldr	r2, [sp, #4]
 8011b6c:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011b6e:	9900      	ldr	r1, [sp, #0]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011b70:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011b72:	6a09      	ldr	r1, [r1, #32]
 8011b74:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
 8011b78:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b7a:	9900      	ldr	r1, [sp, #0]
 8011b7c:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8011b7e:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011b80:	9900      	ldr	r1, [sp, #0]
 8011b82:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011b86:	f9ba e070 	ldrsh.w	lr, [sl, #112]	; 0x70
 8011b8a:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011b8c:	434e      	muls	r6, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011b8e:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011b92:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011b96:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011b98:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp13 = z2 - z4;
 8011b9c:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011ba0:	1917      	adds	r7, r2, r4
 8011ba2:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011ba6:	f241 0c71 	movw	ip, #4209	; 0x1071
 8011baa:	fb0c 7002 	mla	r0, ip, r2, r7
    z2 = z1 - z4;
 8011bae:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011bb2:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011bb4:	48cd      	ldr	r0, [pc, #820]	; (8011eec <jpeg_idct_15x15+0x480>)
 8011bb6:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011bba:	48cd      	ldr	r0, [pc, #820]	; (8011ef0 <jpeg_idct_15x15+0x484>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011bbc:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011bc0:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011bc2:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011bc6:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011bc8:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011bcc:	48c9      	ldr	r0, [pc, #804]	; (8011ef4 <jpeg_idct_15x15+0x488>)
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011bce:	eb02 010e 	add.w	r1, r2, lr
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011bd2:	fb08 480e 	mla	r8, r8, lr, r4
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011bd6:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011bd8:	f200 7071 	addw	r0, r0, #1905	; 0x771
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011bdc:	fb0b f101 	mul.w	r1, fp, r1
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011be0:	f640 7b39 	movw	fp, #3897	; 0xf39
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011be4:	fb00 4402 	mla	r4, r0, r2, r4
 8011be8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011bea:	fb0b 1202 	mla	r2, fp, r2, r1
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011bee:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011bf2:	4404      	add	r4, r0
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011bf4:	ebac 0c06 	sub.w	ip, ip, r6
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011bf8:	1b92      	subs	r2, r2, r6
 8011bfa:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011bfc:	48be      	ldr	r0, [pc, #760]	; (8011ef8 <jpeg_idct_15x15+0x48c>)
 8011bfe:	fb00 110e 	mla	r1, r0, lr, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c02:	9802      	ldr	r0, [sp, #8]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011c04:	4431      	add	r1, r6
 8011c06:	4429      	add	r1, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c08:	eb00 0508 	add.w	r5, r0, r8
 8011c0c:	12ed      	asrs	r5, r5, #11
 8011c0e:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c12:	eba0 0508 	sub.w	r5, r0, r8
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011c16:	9806      	ldr	r0, [sp, #24]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c18:	12ed      	asrs	r5, r5, #11
 8011c1a:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011c1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011c20:	1945      	adds	r5, r0, r5
 8011c22:	12ed      	asrs	r5, r5, #11
 8011c24:	61dd      	str	r5, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011c26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011c28:	1b45      	subs	r5, r0, r5
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011c2c:	12ed      	asrs	r5, r5, #11
 8011c2e:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011c32:	eb00 050c 	add.w	r5, r0, ip
 8011c36:	12ed      	asrs	r5, r5, #11
 8011c38:	63dd      	str	r5, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011c3a:	eba0 050c 	sub.w	r5, r0, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011c3e:	9803      	ldr	r0, [sp, #12]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011c40:	12ed      	asrs	r5, r5, #11
 8011c42:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011c46:	1885      	adds	r5, r0, r2
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011c48:	1a82      	subs	r2, r0, r2
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011c4a:	12ed      	asrs	r5, r5, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011c4c:	12d2      	asrs	r2, r2, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011c4e:	65dd      	str	r5, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011c50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011c54:	9a07      	ldr	r2, [sp, #28]
 8011c56:	443a      	add	r2, r7
 8011c58:	12d2      	asrs	r2, r2, #11
 8011c5a:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011c5c:	9a07      	ldr	r2, [sp, #28]
 8011c5e:	1bd2      	subs	r2, r2, r7
 8011c60:	12d2      	asrs	r2, r2, #11
 8011c62:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011c66:	9a04      	ldr	r2, [sp, #16]
 8011c68:	440a      	add	r2, r1
 8011c6a:	12d2      	asrs	r2, r2, #11
 8011c6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011c70:	9a04      	ldr	r2, [sp, #16]
 8011c72:	1a52      	subs	r2, r2, r1
 8011c74:	12d2      	asrs	r2, r2, #11
 8011c76:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011c7a:	9a05      	ldr	r2, [sp, #20]
 8011c7c:	4422      	add	r2, r4
 8011c7e:	12d2      	asrs	r2, r2, #11
 8011c80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011c84:	9a05      	ldr	r2, [sp, #20]
 8011c86:	1b12      	subs	r2, r2, r4
 8011c88:	12d2      	asrs	r2, r2, #11
 8011c8a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011c8e:	9a01      	ldr	r2, [sp, #4]
 8011c90:	9908      	ldr	r1, [sp, #32]
 8011c92:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8011c96:	12d2      	asrs	r2, r2, #11
 8011c98:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c9e:	4552      	cmp	r2, sl
 8011ca0:	f47f aef6 	bne.w	8011a90 <jpeg_idct_15x15+0x24>
 8011ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ca6:	3b04      	subs	r3, #4
 8011ca8:	9301      	str	r3, [sp, #4]
 8011caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cac:	3338      	adds	r3, #56	; 0x38
 8011cae:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8011cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8011cb2:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011cb4:	9b01      	ldr	r3, [sp, #4]

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011cb6:	f640 51fc 	movw	r1, #3580	; 0xdfc
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011cba:	f44f 74bb 	mov.w	r4, #374	; 0x176
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011cbe:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8011cc2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[5];
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011cc6:	f242 7a31 	movw	sl, #10033	; 0x2731
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011cca:	f241 0871 	movw	r8, #4209	; 0x1071
    outptr = output_buf[ctr] + output_col;
 8011cce:	920c      	str	r2, [sp, #48]	; 0x30
 8011cd0:	9301      	str	r3, [sp, #4]
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	9a90      	ldr	r2, [sp, #576]	; 0x240
 8011cd6:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011cd8:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[2];
 8011cda:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8011cdc:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011cde:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8011ce0:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ce2:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011ce4:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011ce8:	f242 419d 	movw	r1, #9373	; 0x249d
 8011cec:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8011cee:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8011cf2:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011cf6:	eba2 020c 	sub.w	r2, r2, ip
 8011cfa:	0052      	lsls	r2, r2, #1
 8011cfc:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8011d00:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8011d02:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011d04:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011d08:	9202      	str	r2, [sp, #8]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011d0a:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011d0e:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011d12:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8011d14:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011d18:	1a8a      	subs	r2, r1, r2
 8011d1a:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8011d1c:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011d20:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011d24:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 8011d26:	9403      	str	r4, [sp, #12]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011d28:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011d2c:	9204      	str	r2, [sp, #16]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011d2e:	f241 1282 	movw	r2, #4482	; 0x1182
 8011d32:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8011d34:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011d38:	440a      	add	r2, r1
 8011d3a:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8011d3e:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011d42:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8011d44:	9405      	str	r4, [sp, #20]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011d46:	4c69      	ldr	r4, [pc, #420]	; (8011eec <jpeg_idct_15x15+0x480>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011d48:	9206      	str	r2, [sp, #24]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8011d4a:	f641 124c 	movw	r2, #6476	; 0x194c
 8011d4e:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011d50:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp24 = tmp13 - tmp10 + tmp11;
 8011d54:	1a3f      	subs	r7, r7, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011d56:	4372      	muls	r2, r6
    tmp21 = tmp12 + tmp10 + tmp11;
 8011d58:	4401      	add	r1, r0
 8011d5a:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8011d5c:	18ba      	adds	r2, r7, r2
 8011d5e:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8011d60:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8011d64:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011d66:	f641 269a 	movw	r6, #6810	; 0x1a9a
    tmp11 += tmp11;
 8011d6a:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011d6c:	9808      	ldr	r0, [sp, #32]
 8011d6e:	9a02      	ldr	r2, [sp, #8]
 8011d70:	eb02 0b00 	add.w	fp, r2, r0
    z2 = (INT32) wsptr[3];
 8011d74:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 8011d76:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[3];
 8011d78:	68c7      	ldr	r7, [r0, #12]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011d7a:	6940      	ldr	r0, [r0, #20]
    z1 = (INT32) wsptr[1];
 8011d7c:	6852      	ldr	r2, [r2, #4]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011d7e:	fb0a fc00 	mul.w	ip, sl, r0
    z4 = (INT32) wsptr[7];
 8011d82:	9800      	ldr	r0, [sp, #0]
 8011d84:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 8011d88:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011d8c:	1950      	adds	r0, r2, r5
 8011d8e:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011d90:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011d94:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011d98:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8011d9c:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011da0:	4c56      	ldr	r4, [pc, #344]	; (8011efc <jpeg_idct_15x15+0x490>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011da2:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011da4:	4852      	ldr	r0, [pc, #328]	; (8011ef0 <jpeg_idct_15x15+0x484>)
 8011da6:	4378      	muls	r0, r7
 8011da8:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011daa:	4852      	ldr	r0, [pc, #328]	; (8011ef4 <jpeg_idct_15x15+0x488>)
 8011dac:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011dae:	f642 5002 	movw	r0, #11522	; 0x2d02
 8011db2:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011db6:	fb0a f505 	mul.w	r5, sl, r5
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011dba:	f241 2a68 	movw	sl, #4712	; 0x1268
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011dbe:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011dc2:	fb04 0002 	mla	r0, r4, r2, r0
 8011dc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011dc8:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011dca:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011dce:	4420      	add	r0, r4
 8011dd0:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011dd2:	eb02 000e 	add.w	r0, r2, lr
 8011dd6:	fb0a f000 	mul.w	r0, sl, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011dda:	f640 7a39 	movw	sl, #3897	; 0xf39
 8011dde:	fb0a 0202 	mla	r2, sl, r2, r0
 8011de2:	eba2 020c 	sub.w	r2, r2, ip
 8011de6:	eb02 0a04 	add.w	sl, r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011dea:	4c43      	ldr	r4, [pc, #268]	; (8011ef8 <jpeg_idct_15x15+0x48c>)
 8011dec:	fb04 000e 	mla	r0, r4, lr, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011df0:	9c03      	ldr	r4, [sp, #12]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011df2:	4460      	add	r0, ip
 8011df4:	4438      	add	r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011df6:	19a7      	adds	r7, r4, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011df8:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011dfc:	f819 7007 	ldrb.w	r7, [r9, r7]
 8011e00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011e02:	9a90      	ldr	r2, [sp, #576]	; 0x240
 8011e04:	54a7      	strb	r7, [r4, r2]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e06:	9a03      	ldr	r2, [sp, #12]
 8011e08:	1b96      	subs	r6, r2, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011e0a:	9a04      	ldr	r2, [sp, #16]
			     & RANGE_MASK];
 8011e0c:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e10:	f819 6006 	ldrb.w	r6, [r9, r6]
 8011e14:	739e      	strb	r6, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e16:	eb01 0608 	add.w	r6, r1, r8
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011e1a:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 8011e1e:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8011e22:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e26:	f819 6006 	ldrb.w	r6, [r9, r6]
 8011e2a:	705e      	strb	r6, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011e2c:	f819 1001 	ldrb.w	r1, [r9, r1]
 8011e30:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e32:	eb0b 0105 	add.w	r1, fp, r5
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011e36:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8011e3a:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 8011e3e:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e42:	f819 1001 	ldrb.w	r1, [r9, r1]
 8011e46:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011e48:	f819 100b 	ldrb.w	r1, [r9, fp]
 8011e4c:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011e4e:	eb02 010a 	add.w	r1, r2, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011e52:	eba2 020a 	sub.w	r2, r2, sl
			     & RANGE_MASK];
 8011e56:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011e5a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011e5e:	f819 1001 	ldrb.w	r1, [r9, r1]
 8011e62:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011e64:	f819 2002 	ldrb.w	r2, [r9, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011e68:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011e6a:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011e6c:	9a07      	ldr	r2, [sp, #28]
 8011e6e:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011e70:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011e74:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011e78:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011e7a:	9a07      	ldr	r2, [sp, #28]
 8011e7c:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011e7e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011e82:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011e86:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011e88:	9a05      	ldr	r2, [sp, #20]
 8011e8a:	4402      	add	r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011e8c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011e90:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011e94:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011e96:	9a05      	ldr	r2, [sp, #20]
 8011e98:	1a12      	subs	r2, r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011e9a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011e9e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011ea2:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011ea4:	9a06      	ldr	r2, [sp, #24]
 8011ea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ea8:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011eaa:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011eae:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011eb2:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011eb4:	9a06      	ldr	r2, [sp, #24]
 8011eb6:	1a52      	subs	r2, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011eb8:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011eba:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011ebe:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011ec2:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011ec4:	9a02      	ldr	r2, [sp, #8]
 8011ec6:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011eca:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8011ece:	f819 2002 	ldrb.w	r2, [r9, r2]
 8011ed2:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 8011ed4:	9b00      	ldr	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8011ed6:	9a01      	ldr	r2, [sp, #4]
    wsptr += 8;		/* advance pointer to next row */
 8011ed8:	3320      	adds	r3, #32
 8011eda:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8011edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	f47f aee8 	bne.w	8011cb4 <jpeg_idct_15x15+0x248>
  }
}
 8011ee4:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8011ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eec:	ffffba5c 	.word	0xffffba5c
 8011ef0:	ffffe566 	.word	0xffffe566
 8011ef4:	ffffd4f6 	.word	0xffffd4f6
 8011ef8:	ffffe42f 	.word	0xffffe42f
 8011efc:	ffffdc67 	.word	0xffffdc67

08011f00 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f04:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8011f08:	f1a2 0b02 	sub.w	fp, r2, #2
 8011f0c:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011f0e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011f12:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011f16:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8011f18:	f1a3 0a04 	sub.w	sl, r3, #4
 8011f1c:	f102 030e 	add.w	r3, r2, #14
 8011f20:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8011f22:	ab0e      	add	r3, sp, #56	; 0x38
 8011f24:	9300      	str	r3, [sp, #0]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f26:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011f2a:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f2e:	f85a 1f04 	ldr.w	r1, [sl, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8011f32:	f642 4563 	movw	r5, #11363	; 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011f36:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011f3a:	f245 2e03 	movw	lr, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f3e:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011f40:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011f44:	f9bb c060 	ldrsh.w	ip, [fp, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011f48:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8011f4a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011f4c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8011f50:	4bcd      	ldr	r3, [pc, #820]	; (8012288 <jpeg_idct_16x16+0x388>)
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8011f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011f56:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011f58:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011f5a:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 8011f5e:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8011f60:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8011f62:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8011f64:	1a52      	subs	r2, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011f66:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 8011f6a:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011f6e:	f8da 10c0 	ldr.w	r1, [sl, #192]	; 0xc0
 8011f72:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011f76:	f640 01d4 	movw	r1, #2260	; 0x8d4
    z3 = z1 - z2;
 8011f7a:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011f7e:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8011f80:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011f82:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011f86:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8011f8a:	fb03 4409 	mla	r4, r3, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8011f8e:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011f92:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8011f96:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8011f9a:	fb03 110c 	mla	r1, r3, ip, r1
    tmp20 = tmp10 + tmp0;
 8011f9e:	eb07 030e 	add.w	r3, r7, lr
 8011fa2:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8011fa4:	eba7 030e 	sub.w	r3, r7, lr
 8011fa8:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8011faa:	1973      	adds	r3, r6, r5
 8011fac:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8011fae:	1b73      	subs	r3, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011fb0:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8011fb4:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8011fb6:	1913      	adds	r3, r2, r4
 8011fb8:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8011fba:	1b13      	subs	r3, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011fbc:	f8da 2020 	ldr.w	r2, [sl, #32]
    tmp25 = tmp13 - tmp2;
 8011fc0:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8011fc2:	1843      	adds	r3, r0, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011fc4:	f8da 40e0 	ldr.w	r4, [sl, #224]	; 0xe0
    tmp23 = tmp11 + tmp3;
 8011fc8:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8011fca:	1a43      	subs	r3, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011fcc:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011fd0:	f8da 0060 	ldr.w	r0, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011fd4:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011fd6:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
    tmp24 = tmp11 - tmp3;
 8011fda:	9308      	str	r3, [sp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011fdc:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011fde:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8011fe2:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011fe4:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011fe8:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011fea:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011fec:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 8011ff0:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011ff2:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011ff4:	eb01 0e00 	add.w	lr, r1, r0
 8011ff8:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8011ffc:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012000:	fb09 f907 	mul.w	r9, r9, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012004:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012008:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 801200c:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012010:	f241 5455 	movw	r4, #5461	; 0x1555
 8012014:	fb04 f307 	mul.w	r3, r4, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012018:	1a8c      	subs	r4, r1, r2
    tmp0  = tmp1 + tmp2 + tmp3 -
 801201a:	eb06 0709 	add.w	r7, r6, r9
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801201e:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012020:	f640 5323 	movw	r3, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012024:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012026:	435c      	muls	r4, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012028:	4b98      	ldr	r3, [pc, #608]	; (801228c <jpeg_idct_16x16+0x38c>)
 801202a:	fb03 7701 	mla	r7, r3, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012030:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012032:	eb0c 0403 	add.w	r4, ip, r3
 8012036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012038:	441c      	add	r4, r3
 801203a:	4b95      	ldr	r3, [pc, #596]	; (8012290 <jpeg_idct_16x16+0x390>)
 801203c:	fb03 4101 	mla	r1, r3, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012040:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012042:	4b94      	ldr	r3, [pc, #592]	; (8012294 <jpeg_idct_16x16+0x394>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012044:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012046:	f44f 618e 	mov.w	r1, #1136	; 0x470
 801204a:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801204c:	f240 214d 	movw	r1, #589	; 0x24d
 8012050:	fb01 4102 	mla	r1, r1, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012054:	fb03 4405 	mla	r4, r3, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012058:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801205c:	440e      	add	r6, r1
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801205e:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012060:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012062:	f642 5909 	movw	r9, #11529	; 0x2d09
 8012066:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801206a:	fb03 1905 	mla	r9, r3, r5, r1
 801206e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012070:	4499      	add	r9, r3
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012072:	f643 731a 	movw	r3, #16154	; 0x3f1a
 8012076:	fb03 1102 	mla	r1, r3, r2, r1
 801207a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    z2    += z4;
 801207c:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801207e:	18cb      	adds	r3, r1, r3
 8012080:	9309      	str	r3, [sp, #36]	; 0x24
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012082:	4b85      	ldr	r3, [pc, #532]	; (8012298 <jpeg_idct_16x16+0x398>)
 8012084:	fb03 f102 	mul.w	r1, r3, r2
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012088:	f242 2318 	movw	r3, #8728	; 0x2218
    tmp1  += z1;
 801208c:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801208e:	fb03 1100 	mla	r1, r3, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012092:	4b82      	ldr	r3, [pc, #520]	; (801229c <jpeg_idct_16x16+0x39c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012094:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012096:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801209a:	435a      	muls	r2, r3
    tmp12 += z2;
 801209c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801209e:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 80120a2:	441a      	add	r2, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80120a4:	4b7e      	ldr	r3, [pc, #504]	; (80122a0 <jpeg_idct_16x16+0x3a0>)
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80120a6:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80120a8:	eb05 0c00 	add.w	ip, r5, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80120ac:	1b40      	subs	r0, r0, r5
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80120ae:	fb03 fc0c 	mul.w	ip, r3, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80120b2:	f640 5323 	movw	r3, #3363	; 0xd23
 80120b6:	4358      	muls	r0, r3
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80120b8:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 80120ba:	4464      	add	r4, ip
    tmp3  += z2;
 80120bc:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80120be:	19dd      	adds	r5, r3, r7
 80120c0:	9b00      	ldr	r3, [sp, #0]
    tmp10 += z2;
 80120c2:	4486      	add	lr, r0
    tmp11 += z2;
 80120c4:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80120c6:	12ed      	asrs	r5, r5, #11
 80120c8:	601d      	str	r5, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80120ca:	9b01      	ldr	r3, [sp, #4]
 80120cc:	1bdd      	subs	r5, r3, r7
 80120ce:	9b00      	ldr	r3, [sp, #0]
 80120d0:	12ed      	asrs	r5, r5, #11
 80120d2:	f8c3 51e0 	str.w	r5, [r3, #480]	; 0x1e0
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80120d6:	9b03      	ldr	r3, [sp, #12]
 80120d8:	199d      	adds	r5, r3, r6
 80120da:	9b00      	ldr	r3, [sp, #0]
 80120dc:	12ed      	asrs	r5, r5, #11
 80120de:	621d      	str	r5, [r3, #32]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80120e0:	9b03      	ldr	r3, [sp, #12]
 80120e2:	1b9d      	subs	r5, r3, r6
 80120e4:	9b00      	ldr	r3, [sp, #0]
 80120e6:	12ed      	asrs	r5, r5, #11
 80120e8:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80120ec:	9b05      	ldr	r3, [sp, #20]
 80120ee:	191d      	adds	r5, r3, r4
 80120f0:	9b00      	ldr	r3, [sp, #0]
 80120f2:	12ed      	asrs	r5, r5, #11
 80120f4:	641d      	str	r5, [r3, #64]	; 0x40
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80120f6:	9b05      	ldr	r3, [sp, #20]
 80120f8:	1b1c      	subs	r4, r3, r4
 80120fa:	9b00      	ldr	r3, [sp, #0]
 80120fc:	12e4      	asrs	r4, r4, #11
 80120fe:	f8c3 41a0 	str.w	r4, [r3, #416]	; 0x1a0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012102:	9b07      	ldr	r3, [sp, #28]
 8012104:	185c      	adds	r4, r3, r1
 8012106:	9b00      	ldr	r3, [sp, #0]
 8012108:	12e4      	asrs	r4, r4, #11
 801210a:	661c      	str	r4, [r3, #96]	; 0x60
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801210c:	9b07      	ldr	r3, [sp, #28]
 801210e:	1a59      	subs	r1, r3, r1
 8012110:	9b00      	ldr	r3, [sp, #0]
 8012112:	12c9      	asrs	r1, r1, #11
 8012114:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012118:	9b08      	ldr	r3, [sp, #32]
 801211a:	eb03 010e 	add.w	r1, r3, lr
 801211e:	9b00      	ldr	r3, [sp, #0]
 8012120:	12c9      	asrs	r1, r1, #11
 8012122:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012126:	9b08      	ldr	r3, [sp, #32]
 8012128:	eba3 010e 	sub.w	r1, r3, lr
 801212c:	9b00      	ldr	r3, [sp, #0]
 801212e:	12c9      	asrs	r1, r1, #11
 8012130:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8012134:	9b06      	ldr	r3, [sp, #24]
 8012136:	1819      	adds	r1, r3, r0
 8012138:	9b00      	ldr	r3, [sp, #0]
 801213a:	12c9      	asrs	r1, r1, #11
 801213c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012140:	9b06      	ldr	r3, [sp, #24]
 8012142:	1a19      	subs	r1, r3, r0
 8012144:	9b00      	ldr	r3, [sp, #0]
 8012146:	12c9      	asrs	r1, r1, #11
 8012148:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801214c:	9b04      	ldr	r3, [sp, #16]
 801214e:	1899      	adds	r1, r3, r2
 8012150:	9b00      	ldr	r3, [sp, #0]
 8012152:	12c9      	asrs	r1, r1, #11
 8012154:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012158:	9b04      	ldr	r3, [sp, #16]
 801215a:	1a9a      	subs	r2, r3, r2
 801215c:	9b00      	ldr	r3, [sp, #0]
 801215e:	12d2      	asrs	r2, r2, #11
 8012160:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012164:	9b02      	ldr	r3, [sp, #8]
 8012166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012168:	189a      	adds	r2, r3, r2
 801216a:	9b00      	ldr	r3, [sp, #0]
 801216c:	12d2      	asrs	r2, r2, #11
 801216e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012172:	9b02      	ldr	r3, [sp, #8]
 8012174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012176:	1a9a      	subs	r2, r3, r2
 8012178:	9b00      	ldr	r3, [sp, #0]
 801217a:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801217c:	3304      	adds	r3, #4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801217e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012182:	9300      	str	r3, [sp, #0]
 8012184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012186:	455b      	cmp	r3, fp
 8012188:	f47f aecd 	bne.w	8011f26 <jpeg_idct_16x16+0x26>
 801218c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801218e:	3b04      	subs	r3, #4
 8012190:	9301      	str	r3, [sp, #4]
 8012192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012194:	333c      	adds	r3, #60	; 0x3c
 8012196:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8012198:	ab0e      	add	r3, sp, #56	; 0x38
 801219a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801219c:	9b01      	ldr	r3, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801219e:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80121a2:	f642 14cf 	movw	r4, #10703	; 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80121a6:	f642 4663 	movw	r6, #11363	; 0x2c63
    outptr = output_buf[ctr] + output_col;
 80121aa:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80121ae:	f245 2703 	movw	r7, #20995	; 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80121b2:	4d35      	ldr	r5, [pc, #212]	; (8012288 <jpeg_idct_16x16+0x388>)
    outptr = output_buf[ctr] + output_col;
 80121b4:	920c      	str	r2, [sp, #48]	; 0x30
 80121b6:	9301      	str	r3, [sp, #4]
 80121b8:	4613      	mov	r3, r2
 80121ba:	9a98      	ldr	r2, [sp, #608]	; 0x260
 80121bc:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80121be:	9b00      	ldr	r3, [sp, #0]
    z1 = (INT32) wsptr[4];
 80121c0:	9a00      	ldr	r2, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80121c2:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 80121c4:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80121c6:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80121c8:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80121ca:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80121cc:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp10 = tmp0 + tmp1;
 80121d0:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 80121d4:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 80121d8:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 80121dc:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 80121e0:	9b00      	ldr	r3, [sp, #0]
 80121e2:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 80121e6:	f8d3 a018 	ldr.w	sl, [r3, #24]
    z3 = z1 - z2;
 80121ea:	eba9 030a 	sub.w	r3, r9, sl
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80121ee:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80121f0:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80121f2:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80121f6:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80121fa:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80121fe:	f205 25ee 	addw	r5, r5, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012202:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012206:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801220a:	fb05 000a 	mla	r0, r5, sl, r0
    tmp20 = tmp10 + tmp0;
 801220e:	eb0e 0507 	add.w	r5, lr, r7
 8012212:	9502      	str	r5, [sp, #8]
    tmp27 = tmp10 - tmp0;
 8012214:	ebae 0507 	sub.w	r5, lr, r7
 8012218:	9503      	str	r5, [sp, #12]
    tmp21 = tmp12 + tmp1;
 801221a:	eb0c 0506 	add.w	r5, ip, r6
 801221e:	9504      	str	r5, [sp, #16]
    tmp26 = tmp12 - tmp1;
 8012220:	ebac 0506 	sub.w	r5, ip, r6
 8012224:	9505      	str	r5, [sp, #20]
    tmp22 = tmp13 + tmp2;
 8012226:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8012228:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 801222a:	9506      	str	r5, [sp, #24]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801222c:	f640 5523 	movw	r5, #3363	; 0xd23
    tmp25 = tmp13 - tmp2;
 8012230:	9307      	str	r3, [sp, #28]
    tmp23 = tmp11 + tmp3;
 8012232:	1823      	adds	r3, r4, r0
 8012234:	9308      	str	r3, [sp, #32]
    tmp24 = tmp11 - tmp3;
 8012236:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 8012238:	9800      	ldr	r0, [sp, #0]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801223a:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp24 = tmp11 - tmp3;
 801223e:	9309      	str	r3, [sp, #36]	; 0x24
    z1 = (INT32) wsptr[1];
 8012240:	9b00      	ldr	r3, [sp, #0]
    z3 = (INT32) wsptr[5];
 8012242:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 8012244:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8012246:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8012248:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 801224a:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801224e:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012250:	eba2 0b03 	sub.w	fp, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012254:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012258:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801225c:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801225e:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012262:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012266:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801226a:	f641 44b6 	movw	r4, #7350	; 0x1cb6
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801226e:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012272:	4d06      	ldr	r5, [pc, #24]	; (801228c <jpeg_idct_16x16+0x38c>)
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012274:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012278:	f241 5455 	movw	r4, #5461	; 0x1555
 801227c:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012280:	eb06 0409 	add.w	r4, r6, r9
 8012284:	4474      	add	r4, lr
 8012286:	e00d      	b.n	80122a4 <jpeg_idct_16x16+0x3a4>
 8012288:	ffffecc2 	.word	0xffffecc2
 801228c:	ffffb6d6 	.word	0xffffb6d6
 8012290:	ffffc542 	.word	0xffffc542
 8012294:	ffffdbfa 	.word	0xffffdbfa
 8012298:	ffffeaab 	.word	0xffffeaab
 801229c:	ffffd817 	.word	0xffffd817
 80122a0:	ffffd4b2 	.word	0xffffd4b2
 80122a4:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80122a8:	f605 656c 	addw	r5, r5, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80122ac:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80122ae:	eb0c 040a 	add.w	r4, ip, sl
 80122b2:	445c      	add	r4, fp
 80122b4:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80122b8:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80122ba:	4d5e      	ldr	r5, [pc, #376]	; (8012434 <jpeg_idct_16x16+0x534>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80122bc:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80122be:	f44f 628e 	mov.w	r2, #1136	; 0x470
 80122c2:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80122c4:	f240 224d 	movw	r2, #589	; 0x24d
 80122c8:	fb02 4203 	mla	r2, r2, r3, r4
 80122cc:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80122ce:	4a5a      	ldr	r2, [pc, #360]	; (8012438 <jpeg_idct_16x16+0x538>)
 80122d0:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80122d4:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80122d6:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80122d8:	f642 5909 	movw	r9, #11529	; 0x2d09
 80122dc:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80122e0:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
    z2    += z4;
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80122e4:	f6a5 7563 	subw	r5, r5, #3939	; 0xf63
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80122e8:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80122ea:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80122ee:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 80122f2:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80122f4:	eb02 0a0b 	add.w	sl, r2, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80122f8:	4a50      	ldr	r2, [pc, #320]	; (801243c <jpeg_idct_16x16+0x53c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80122fa:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80122fe:	435a      	muls	r2, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012300:	436b      	muls	r3, r5
    tmp1  += z1;
 8012302:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012304:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
    tmp12 += z2;
 8012308:	449a      	add	sl, r3
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801230a:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801230c:	f246 4e85 	movw	lr, #25733	; 0x6485
 8012310:	fb0e 3e00 	mla	lr, lr, r0, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012314:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012318:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801231a:	441d      	add	r5, r3
 801231c:	eb07 0c00 	add.w	ip, r7, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012320:	1bc0      	subs	r0, r0, r7
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012322:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012324:	fb05 fc0c 	mul.w	ip, r5, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012328:	f640 5523 	movw	r5, #3363	; 0xd23
 801232c:	4368      	muls	r0, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801232e:	9d02      	ldr	r5, [sp, #8]
    tmp2  += z2;
 8012330:	4464      	add	r4, ip
    tmp3  += z2;
 8012332:	4462      	add	r2, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012334:	19ef      	adds	r7, r5, r7
 8012336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    tmp10 += z2;
 8012338:	4486      	add	lr, r0
    tmp11 += z2;
 801233a:	4448      	add	r0, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801233c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012340:	f818 7007 	ldrb.w	r7, [r8, r7]
 8012344:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8012346:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012348:	9b02      	ldr	r3, [sp, #8]
 801234a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801234c:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801234e:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012350:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012354:	f818 7007 	ldrb.w	r7, [r8, r7]
 8012358:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801235a:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801235c:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801235e:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012360:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8012364:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012368:	f818 7007 	ldrb.w	r7, [r8, r7]
 801236c:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801236e:	f818 6006 	ldrb.w	r6, [r8, r6]
 8012372:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012374:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012376:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012378:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 801237a:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 801237e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012382:	f818 6006 	ldrb.w	r6, [r8, r6]
 8012386:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012388:	f818 4004 	ldrb.w	r4, [r8, r4]
 801238c:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801238e:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012390:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012392:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8012394:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 8012398:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801239c:	f818 4004 	ldrb.w	r4, [r8, r4]
 80123a0:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80123a2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80123a6:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80123a8:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80123ac:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80123b0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80123b4:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80123b6:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80123ba:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80123bc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80123c0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80123c4:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80123c6:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80123c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80123cc:	f818 2002 	ldrb.w	r2, [r8, r2]
 80123d0:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80123d2:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80123d4:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80123d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80123da:	f818 2002 	ldrb.w	r2, [r8, r2]
 80123de:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80123e0:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80123e4:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 80123e8:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80123ec:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80123f0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80123f4:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80123f6:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80123fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80123fc:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80123fe:	9b03      	ldr	r3, [sp, #12]
 8012400:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012402:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012406:	f818 3003 	ldrb.w	r3, [r8, r3]
 801240a:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801240c:	9b03      	ldr	r3, [sp, #12]
 801240e:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8012410:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012412:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012416:	f818 3003 	ldrb.w	r3, [r8, r3]
 801241a:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 801241c:	9b00      	ldr	r3, [sp, #0]
 801241e:	3320      	adds	r3, #32
 8012420:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
 8012422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012424:	4293      	cmp	r3, r2
 8012426:	f47f aeb9 	bne.w	801219c <jpeg_idct_16x16+0x29c>
  }
}
 801242a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012432:	bf00      	nop
 8012434:	ffffe77a 	.word	0xffffe77a
 8012438:	ffffdbfa 	.word	0xffffdbfa
 801243c:	ffffeaab 	.word	0xffffeaab

08012440 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	b0d1      	sub	sp, #324	; 0x144
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012446:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 8012448:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 801244a:	a910      	add	r1, sp, #64	; 0x40
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801244c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012450:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012454:	1e93      	subs	r3, r2, #2
 8012456:	9301      	str	r3, [sp, #4]
 8012458:	f105 0320 	add.w	r3, r5, #32
 801245c:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801245e:	9b01      	ldr	r3, [sp, #4]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8012460:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012462:	f855 0b04 	ldr.w	r0, [r5], #4
 8012466:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012468:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 801246c:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8012470:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 8012474:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012478:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 801247c:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8012480:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012484:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8012488:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801248a:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801248e:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012490:	ea4e 0000 	orr.w	r0, lr, r0
 8012494:	4330      	orrs	r0, r6
 8012496:	ea48 0000 	orr.w	r0, r8, r0
 801249a:	4320      	orrs	r0, r4
 801249c:	ea59 0000 	orrs.w	r0, r9, r0
 80124a0:	f040 8152 	bne.w	8012748 <jpeg_idct_16x8+0x308>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80124a4:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 80124a6:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80124aa:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 80124ac:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80124ae:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80124b0:	67cb      	str	r3, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 80124b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 80124b6:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 80124ba:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80124be:	9b05      	ldr	r3, [sp, #20]
 80124c0:	42ab      	cmp	r3, r5
 80124c2:	d1cc      	bne.n	801245e <jpeg_idct_16x8+0x1e>
 80124c4:	9b04      	ldr	r3, [sp, #16]
 80124c6:	3b04      	subs	r3, #4
 80124c8:	9302      	str	r3, [sp, #8]
 80124ca:	9b04      	ldr	r3, [sp, #16]
 80124cc:	331c      	adds	r3, #28
 80124ce:	930f      	str	r3, [sp, #60]	; 0x3c
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 80124d0:	ab10      	add	r3, sp, #64	; 0x40
 80124d2:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80124d4:	9b02      	ldr	r3, [sp, #8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80124d6:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80124da:	f642 14cf 	movw	r4, #10703	; 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80124de:	f642 4663 	movw	r6, #11363	; 0x2c63
    outptr = output_buf[ctr] + output_col;
 80124e2:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80124e6:	f245 2703 	movw	r7, #20995	; 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80124ea:	4dd7      	ldr	r5, [pc, #860]	; (8012848 <jpeg_idct_16x8+0x408>)
    outptr = output_buf[ctr] + output_col;
 80124ec:	920e      	str	r2, [sp, #56]	; 0x38
 80124ee:	9302      	str	r3, [sp, #8]
 80124f0:	4613      	mov	r3, r2
 80124f2:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 80124f4:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80124f6:	9b01      	ldr	r3, [sp, #4]
    z1 = (INT32) wsptr[4];
 80124f8:	9a01      	ldr	r2, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80124fa:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 80124fc:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80124fe:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012500:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012502:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012504:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp10 = tmp0 + tmp1;
 8012508:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 801250c:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8012510:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8012514:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 8012518:	9b01      	ldr	r3, [sp, #4]
 801251a:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 801251e:	f8d3 8018 	ldr.w	r8, [r3, #24]
    z3 = z1 - z2;
 8012522:	eba9 0308 	sub.w	r3, r9, r8
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012526:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012528:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801252a:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801252e:	fb07 3708 	mla	r7, r7, r8, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012532:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012536:	f205 25ee 	addw	r5, r5, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801253a:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801253e:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012542:	fb05 0008 	mla	r0, r5, r8, r0
    tmp20 = tmp10 + tmp0;
 8012546:	eb0e 0507 	add.w	r5, lr, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801254a:	f640 5823 	movw	r8, #3363	; 0xd23
    tmp20 = tmp10 + tmp0;
 801254e:	9503      	str	r5, [sp, #12]
    tmp27 = tmp10 - tmp0;
 8012550:	ebae 0507 	sub.w	r5, lr, r7
 8012554:	9504      	str	r5, [sp, #16]
    tmp21 = tmp12 + tmp1;
 8012556:	eb0c 0506 	add.w	r5, ip, r6
 801255a:	9505      	str	r5, [sp, #20]
    tmp26 = tmp12 - tmp1;
 801255c:	ebac 0506 	sub.w	r5, ip, r6
 8012560:	9506      	str	r5, [sp, #24]
    tmp22 = tmp13 + tmp2;
 8012562:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8012564:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 8012566:	9507      	str	r5, [sp, #28]
    tmp25 = tmp13 - tmp2;
 8012568:	9308      	str	r3, [sp, #32]
    tmp23 = tmp11 + tmp3;
 801256a:	1823      	adds	r3, r4, r0
    tmp0  = tmp1 + tmp2 + tmp3 -
 801256c:	4db7      	ldr	r5, [pc, #732]	; (801284c <jpeg_idct_16x8+0x40c>)
    tmp23 = tmp11 + tmp3;
 801256e:	9309      	str	r3, [sp, #36]	; 0x24
    tmp24 = tmp11 - tmp3;
 8012570:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 8012572:	9801      	ldr	r0, [sp, #4]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012574:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp24 = tmp11 - tmp3;
 8012578:	930a      	str	r3, [sp, #40]	; 0x28
    z1 = (INT32) wsptr[1];
 801257a:	9b01      	ldr	r3, [sp, #4]
    z3 = (INT32) wsptr[5];
 801257c:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 801257e:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8012580:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8012582:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8012584:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012588:	18d6      	adds	r6, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801258a:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801258e:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012592:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012594:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012598:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801259c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80125a0:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80125a4:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80125a8:	f241 5455 	movw	r4, #5461	; 0x1555
 80125ac:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80125b0:	1ad4      	subs	r4, r2, r3
 80125b2:	fb08 f404 	mul.w	r4, r8, r4
 80125b6:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80125b8:	eb06 0409 	add.w	r4, r6, r9
 80125bc:	4474      	add	r4, lr
 80125be:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 80125c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 80125c4:	940c      	str	r4, [sp, #48]	; 0x30
    tmp13 = tmp10 + tmp11 + tmp12 -
 80125c6:	eb0c 040a 	add.w	r4, ip, sl
 80125ca:	442c      	add	r4, r5
 80125cc:	4da0      	ldr	r5, [pc, #640]	; (8012850 <jpeg_idct_16x8+0x410>)
 80125ce:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80125d2:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80125d4:	4d9f      	ldr	r5, [pc, #636]	; (8012854 <jpeg_idct_16x8+0x414>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80125d6:	920d      	str	r2, [sp, #52]	; 0x34
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80125d8:	f44f 628e 	mov.w	r2, #1136	; 0x470
 80125dc:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80125de:	f240 224d 	movw	r2, #589	; 0x24d
 80125e2:	fb02 4203 	mla	r2, r2, r3, r4
 80125e6:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80125e8:	4a9b      	ldr	r2, [pc, #620]	; (8012858 <jpeg_idct_16x8+0x418>)
 80125ea:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80125ee:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80125f0:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80125f2:	f642 5909 	movw	r9, #11529	; 0x2d09
 80125f6:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80125fa:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80125fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012600:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012602:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012606:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 801260a:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801260c:	eb02 0a05 	add.w	sl, r2, r5
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012610:	4a92      	ldr	r2, [pc, #584]	; (801285c <jpeg_idct_16x8+0x41c>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012612:	f242 2518 	movw	r5, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012616:	435a      	muls	r2, r3
    tmp1  += z1;
 8012618:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801261a:	fb05 2200 	mla	r2, r5, r0, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801261e:	4d90      	ldr	r5, [pc, #576]	; (8012860 <jpeg_idct_16x8+0x420>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012620:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012622:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012626:	436b      	muls	r3, r5
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012628:	fb0e 3e00 	mla	lr, lr, r0, r3
    tmp12 += z2;
 801262c:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801262e:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012632:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012634:	eb07 0c00 	add.w	ip, r7, r0
 8012638:	441d      	add	r5, r3
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801263a:	1bc0      	subs	r0, r0, r7
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801263c:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012640:	9d03      	ldr	r5, [sp, #12]
 8012642:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012644:	fb08 f000 	mul.w	r0, r8, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012648:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    tmp2  += z2;
 801264a:	4464      	add	r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801264c:	19ef      	adds	r7, r5, r7
 801264e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    tmp3  += z2;
 8012650:	4462      	add	r2, ip
    tmp10 += z2;
 8012652:	4486      	add	lr, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012654:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp11 += z2;
 8012658:	4448      	add	r0, r9
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801265a:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801265e:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012660:	9b03      	ldr	r3, [sp, #12]
 8012662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012664:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012666:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012668:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801266c:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8012670:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012672:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012674:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012676:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012678:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 801267c:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012680:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8012684:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012686:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801268a:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801268c:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801268e:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012690:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8012692:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8012696:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801269a:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801269e:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80126a0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80126a4:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80126a6:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80126a8:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80126aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			     & RANGE_MASK];
 80126ac:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 80126b0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80126b4:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80126b8:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80126ba:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80126be:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80126c0:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126c4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80126c8:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80126cc:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80126ce:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80126d2:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 80126d4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80126d8:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80126dc:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80126de:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126e0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80126e4:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80126e8:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80126ea:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80126ec:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80126f0:	f81b 2002 	ldrb.w	r2, [fp, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80126f4:	9b06      	ldr	r3, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80126f6:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80126f8:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80126fc:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012700:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012704:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012708:	f81b 2002 	ldrb.w	r2, [fp, r2]
 801270c:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801270e:	f81b 3003 	ldrb.w	r3, [fp, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012714:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012716:	9b04      	ldr	r3, [sp, #16]
 8012718:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801271a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801271e:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012722:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012724:	9b04      	ldr	r3, [sp, #16]
 8012726:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8012728:	9a02      	ldr	r2, [sp, #8]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801272a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801272e:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012732:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 8012734:	9b01      	ldr	r3, [sp, #4]
 8012736:	3320      	adds	r3, #32
 8012738:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
 801273a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801273c:	4293      	cmp	r3, r2
 801273e:	f47f aec9 	bne.w	80124d4 <jpeg_idct_16x8+0x94>
  }
}
 8012742:	b051      	add	sp, #324	; 0x144
 8012744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012748:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801274a:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 801274e:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012750:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012752:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801275a:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801275c:	183c      	adds	r4, r7, r0
 801275e:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012760:	f641 027e 	movw	r2, #6270	; 0x187e
 8012764:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012768:	4a3e      	ldr	r2, [pc, #248]	; (8012864 <jpeg_idct_16x8+0x424>)
 801276a:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801276e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8012770:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8012772:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8012776:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 801277a:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 801277e:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012780:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 8012784:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8012786:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012788:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801278a:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801278e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012792:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012796:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801279a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 801279c:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801279e:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80127a2:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 80127a6:	eb08 040a 	add.w	r4, r8, sl
    tmp12 = tmp1 - tmp3;
 80127aa:	9303      	str	r3, [sp, #12]
    tmp0 += z1 + z2;
 80127ac:	f640 138e 	movw	r3, #2446	; 0x98e
    z2 = tmp0 + tmp2;
 80127b0:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80127b4:	1930      	adds	r0, r6, r4
 80127b6:	4350      	muls	r0, r2
    z2 += z1;
 80127b8:	4a2b      	ldr	r2, [pc, #172]	; (8012868 <jpeg_idct_16x8+0x428>)
 80127ba:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 80127be:	4a2b      	ldr	r2, [pc, #172]	; (801286c <jpeg_idct_16x8+0x42c>)
 80127c0:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80127c4:	eb09 040a 	add.w	r4, r9, sl
 80127c8:	4a29      	ldr	r2, [pc, #164]	; (8012870 <jpeg_idct_16x8+0x430>)
 80127ca:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 80127cc:	1932      	adds	r2, r6, r4
    tmp3 += z1 + z3;
 80127ce:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 80127d0:	fb03 2909 	mla	r9, r3, r9, r2
    tmp3 += z1 + z3;
 80127d4:	f243 030b 	movw	r3, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80127d8:	4a26      	ldr	r2, [pc, #152]	; (8012874 <jpeg_idct_16x8+0x434>)
    tmp3 += z1 + z3;
 80127da:	fb03 440a 	mla	r4, r3, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80127de:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80127e2:	f244 13b3 	movw	r3, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80127e6:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 80127ea:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 80127ec:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 80127ee:	fb03 0008 	mla	r0, r3, r8, r0
    tmp2 += z1 + z2;
 80127f2:	f246 2854 	movw	r8, #25172	; 0x6254
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80127f6:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 80127f8:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80127fc:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012800:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012804:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012806:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801280a:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801280e:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012812:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012816:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801281a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801281c:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801281e:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012820:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012822:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012824:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012828:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801282a:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801282c:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801282e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012832:	9b02      	ldr	r3, [sp, #8]
 8012834:	444b      	add	r3, r9
 8012836:	12db      	asrs	r3, r3, #11
 8012838:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801283a:	9b02      	ldr	r3, [sp, #8]
 801283c:	eba3 0309 	sub.w	r3, r3, r9
 8012840:	12db      	asrs	r3, r3, #11
 8012842:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8012844:	e63b      	b.n	80124be <jpeg_idct_16x8+0x7e>
 8012846:	bf00      	nop
 8012848:	ffffecc2 	.word	0xffffecc2
 801284c:	ffffb6d6 	.word	0xffffb6d6
 8012850:	ffffc542 	.word	0xffffc542
 8012854:	ffffe77a 	.word	0xffffe77a
 8012858:	ffffdbfa 	.word	0xffffdbfa
 801285c:	ffffeaab 	.word	0xffffeaab
 8012860:	ffffd817 	.word	0xffffd817
 8012864:	ffffc4df 	.word	0xffffc4df
 8012868:	ffffc13b 	.word	0xffffc13b
 801286c:	fffff384 	.word	0xfffff384
 8012870:	ffffe333 	.word	0xffffe333
 8012874:	ffffadfd 	.word	0xffffadfd

08012878 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287c:	b0c5      	sub	sp, #276	; 0x114
 801287e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8012880:	f1a2 0c02 	sub.w	ip, r2, #2
 8012884:	320e      	adds	r2, #14
 8012886:	9303      	str	r3, [sp, #12]
 8012888:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801288a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801288e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8012892:	9205      	str	r2, [sp, #20]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012894:	3380      	adds	r3, #128	; 0x80
 8012896:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012898:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801289c:	f640 2012 	movw	r0, #2578	; 0xa12
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80128a0:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80128a4:	f642 09c6 	movw	r9, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80128a8:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80128ac:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80128b0:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80128b2:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80128b6:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 80128ba:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 80128bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80128c0:	9202      	str	r2, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80128c2:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80128c4:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80128c6:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 80128ca:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80128ce:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 80128d2:	4351      	muls	r1, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80128d4:	f641 4237 	movw	r2, #7223	; 0x1c37
 80128d8:	eba8 0701 	sub.w	r7, r8, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80128dc:	186b      	adds	r3, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80128de:	4357      	muls	r7, r2
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80128e0:	eba5 0208 	sub.w	r2, r5, r8
 80128e4:	4342      	muls	r2, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80128e6:	9802      	ldr	r0, [sp, #8]
 80128e8:	18bc      	adds	r4, r7, r2
 80128ea:	4404      	add	r4, r0
 80128ec:	48bd      	ldr	r0, [pc, #756]	; (8012be4 <jpeg_idct_14x7+0x36c>)
 80128ee:	fb00 4408 	mla	r4, r0, r8, r4
    tmp10 = z1 + z3;
 80128f2:	1868      	adds	r0, r5, r1
 80128f4:	9004      	str	r0, [sp, #16]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80128f6:	9802      	ldr	r0, [sp, #8]
 80128f8:	fb09 0003 	mla	r0, r9, r3, r0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80128fc:	f46f 731f 	mvn.w	r3, #636	; 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012900:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012904:	fb03 0101 	mla	r1, r3, r1, r0
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012908:	4bb7      	ldr	r3, [pc, #732]	; (8012be8 <jpeg_idct_14x7+0x370>)
 801290a:	fb03 0005 	mla	r0, r3, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801290e:	6a35      	ldr	r5, [r6, #32]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012910:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012912:	6e37      	ldr	r7, [r6, #96]	; 0x60
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012914:	4410      	add	r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012916:	f9bc 2010 	ldrsh.w	r2, [ip, #16]

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801291a:	f641 53ef 	movw	r3, #7663	; 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801291e:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012920:	f9bc 5030 	ldrsh.w	r5, [ip, #48]	; 0x30
 8012924:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012926:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801292a:	eb02 0b05 	add.w	fp, r2, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801292e:	fb07 f909 	mul.w	r9, r7, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012932:	1b57      	subs	r7, r2, r5
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012934:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012938:	f240 5373 	movw	r3, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801293c:	444a      	add	r2, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801293e:	444d      	add	r5, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012940:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012942:	4baa      	ldr	r3, [pc, #680]	; (8012bec <jpeg_idct_14x7+0x374>)
    tmp10 = tmp11 - tmp12;
 8012944:	ebab 0a07 	sub.w	sl, fp, r7
    tmp11 += tmp12;
 8012948:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801294a:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801294e:	435d      	muls	r5, r3
    z2 -= tmp10;
 8012950:	9b04      	ldr	r3, [sp, #16]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012952:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012956:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 801295a:	442f      	add	r7, r5
    z2 -= tmp10;
 801295c:	eba8 0803 	sub.w	r8, r8, r3
    tmp10 += z2;
 8012960:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012962:	fb0b 2209 	mla	r2, fp, r9, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012966:	9b02      	ldr	r3, [sp, #8]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012968:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801296a:	eb01 050a 	add.w	r5, r1, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801296e:	eba1 010a 	sub.w	r1, r1, sl
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012972:	12ed      	asrs	r5, r5, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012974:	12c9      	asrs	r1, r1, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012976:	f84e 5c04 	str.w	r5, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801297a:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801297e:	19e1      	adds	r1, r4, r7
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012980:	1be4      	subs	r4, r4, r7
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012982:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012984:	12e4      	asrs	r4, r4, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012986:	f8ce 101c 	str.w	r1, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801298a:	1881      	adds	r1, r0, r2
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801298c:	1a80      	subs	r0, r0, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801298e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012992:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012994:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012998:	fb02 3208 	mla	r2, r2, r8, r3
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801299c:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801299e:	12c0      	asrs	r0, r0, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80129a0:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 80129a4:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129a6:	4563      	cmp	r3, ip
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80129a8:	f8ce 007c 	str.w	r0, [lr, #124]	; 0x7c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 80129ac:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129b0:	f47f af72 	bne.w	8012898 <jpeg_idct_14x7+0x20>
 80129b4:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 80129b6:	ac0c      	add	r4, sp, #48	; 0x30
 80129b8:	f1a3 0904 	sub.w	r9, r3, #4
 80129bc:	3318      	adds	r3, #24
 80129be:	930b      	str	r3, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80129c0:	f859 3f04 	ldr.w	r3, [r9, #4]!
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80129c4:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 80129c8:	9a4e      	ldr	r2, [sp, #312]	; 0x138

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80129ca:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z4 = (INT32) wsptr[4];
 80129ce:	6927      	ldr	r7, [r4, #16]
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80129d0:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    outptr = output_buf[ctr] + output_col;
 80129d4:	1899      	adds	r1, r3, r2
 80129d6:	930a      	str	r3, [sp, #40]	; 0x28
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80129d8:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80129dc:	6820      	ldr	r0, [r4, #0]
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80129de:	3420      	adds	r4, #32
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80129e0:	fb03 f207 	mul.w	r2, r3, r7
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80129e4:	f640 2312 	movw	r3, #2578	; 0xa12
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80129e8:	3010      	adds	r0, #16
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80129ea:	fb03 fe07 	mul.w	lr, r3, r7
    tmp10 = z1 + z2;
 80129ee:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80129f2:	436f      	muls	r7, r5
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80129f4:	4472      	add	r2, lr
    tmp11 = z1 + z3;
 80129f6:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z1 = (INT32) wsptr[2];
 80129fa:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 80129fe:	ebc7 3540 	rsb	r5, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012a02:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012a04:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012a08:	0052      	lsls	r2, r2, #1
 8012a0a:	ebc2 3340 	rsb	r3, r2, r0, lsl #13
    z2 = (INT32) wsptr[6];
 8012a0e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012a12:	eb0e 0002 	add.w	r0, lr, r2
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012a16:	9302      	str	r3, [sp, #8]
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012a18:	4b75      	ldr	r3, [pc, #468]	; (8012bf0 <jpeg_idct_14x7+0x378>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012a1a:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012a1c:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8012a20:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012a24:	fb03 0002 	mla	r0, r3, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012a28:	f603 23e5 	addw	r3, r3, #2789	; 0xae5
 8012a2c:	435a      	muls	r2, r3
    tmp20 = tmp10 + tmp13;
 8012a2e:	eb0c 0307 	add.w	r3, ip, r7
 8012a32:	9303      	str	r3, [sp, #12]
    tmp26 = tmp10 - tmp13;
 8012a34:	ebac 0307 	sub.w	r3, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012a38:	fb08 220e 	mla	r2, r8, lr, r2
    z3 = (INT32) wsptr[5];
 8012a3c:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp26 = tmp10 - tmp13;
 8012a40:	9304      	str	r3, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8012a42:	1833      	adds	r3, r6, r0
    z2 = (INT32) wsptr[3];
 8012a44:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012a48:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8012a4c:	9305      	str	r3, [sp, #20]
    tmp25 = tmp11 - tmp14;
 8012a4e:	1a33      	subs	r3, r6, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012a50:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp25 = tmp11 - tmp14;
 8012a54:	9306      	str	r3, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8012a56:	18ab      	adds	r3, r5, r2
 8012a58:	9307      	str	r3, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8012a5a:	1aab      	subs	r3, r5, r2
    z1 = (INT32) wsptr[1];
 8012a5c:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012a60:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp24 = tmp12 - tmp15;
 8012a64:	9308      	str	r3, [sp, #32]
    tmp14 = z1 + z3;
 8012a66:	eb02 0b0c 	add.w	fp, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012a6a:	eb02 0608 	add.w	r6, r2, r8
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012a6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012a72:	4346      	muls	r6, r0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012a74:	f641 0014 	movw	r0, #6164	; 0x1814
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012a78:	fb05 f50b 	mul.w	r5, r5, fp
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012a7c:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012a80:	1977      	adds	r7, r6, r5
 8012a82:	eb07 3743 	add.w	r7, r7, r3, lsl #13
 8012a86:	4b5b      	ldr	r3, [pc, #364]	; (8012bf4 <jpeg_idct_14x7+0x37c>)
 8012a88:	fb03 7702 	mla	r7, r3, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012a8c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012a90:	fb03 b002 	mla	r0, r3, r2, fp
    z1    -= z2;
 8012a94:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012a98:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012a9c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012aa0:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012aa4:	ebae 3e43 	sub.w	lr, lr, r3, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012aa8:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8012aaa:	eb00 030e 	add.w	r3, r0, lr
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012aae:	eb08 000c 	add.w	r0, r8, ip
    tmp16 += tmp15;
 8012ab2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012ab4:	fb0a f000 	mul.w	r0, sl, r0
 8012ab8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012abc:	eba0 3043 	sub.w	r0, r0, r3, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012ac0:	4b4d      	ldr	r3, [pc, #308]	; (8012bf8 <jpeg_idct_14x7+0x380>)
 8012ac2:	fb03 0a08 	mla	sl, r3, r8, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012ac6:	4b4d      	ldr	r3, [pc, #308]	; (8012bfc <jpeg_idct_14x7+0x384>)
 8012ac8:	fb03 000c 	mla	r0, r3, ip, r0
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012acc:	44b2      	add	sl, r6
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012ace:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ad2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012ad6:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012ad8:	ebac 0508 	sub.w	r5, ip, r8
 8012adc:	4375      	muls	r5, r6
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ade:	eb05 3643 	add.w	r6, r5, r3, lsl #13
 8012ae2:	4b47      	ldr	r3, [pc, #284]	; (8012c00 <jpeg_idct_14x7+0x388>)
 8012ae4:	fb03 660c 	mla	r6, r3, ip, r6
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012ae8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012aec:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012aee:	f241 5b99 	movw	fp, #5529	; 0x1599
 8012af2:	fb0b 5508 	mla	r5, fp, r8, r5
 8012af6:	4475      	add	r5, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012af8:	eb02 3e43 	add.w	lr, r2, r3, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012afc:	9b03      	ldr	r3, [sp, #12]
 8012afe:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8012b00:	eb03 0c07 	add.w	ip, r3, r7
 8012b04:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b06:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012b0a:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8012b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b10:	f803 c002 	strb.w	ip, [r3, r2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012b14:	9b03      	ldr	r3, [sp, #12]
 8012b16:	1bdf      	subs	r7, r3, r7
 8012b18:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b1a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012b1e:	5ddf      	ldrb	r7, [r3, r7]
 8012b20:	734f      	strb	r7, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012b22:	9b05      	ldr	r3, [sp, #20]
 8012b24:	eb03 070a 	add.w	r7, r3, sl
 8012b28:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b2a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012b2e:	5ddf      	ldrb	r7, [r3, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012b30:	9b05      	ldr	r3, [sp, #20]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012b32:	704f      	strb	r7, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012b34:	eba3 070a 	sub.w	r7, r3, sl
 8012b38:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b3a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012b3e:	5ddf      	ldrb	r7, [r3, r7]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012b40:	9b07      	ldr	r3, [sp, #28]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012b42:	730f      	strb	r7, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012b44:	181f      	adds	r7, r3, r0
 8012b46:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b48:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012b4c:	5ddf      	ldrb	r7, [r3, r7]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012b4e:	9b07      	ldr	r3, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012b50:	708f      	strb	r7, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012b52:	1a18      	subs	r0, r3, r0
 8012b54:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b56:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012b5a:	5c18      	ldrb	r0, [r3, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012b5c:	9b02      	ldr	r3, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012b5e:	72c8      	strb	r0, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012b60:	eb03 000e 	add.w	r0, r3, lr
 8012b64:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b66:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012b6a:	5c18      	ldrb	r0, [r3, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012b6c:	9b02      	ldr	r3, [sp, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012b6e:	70c8      	strb	r0, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012b70:	eba3 020e 	sub.w	r2, r3, lr
 8012b74:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b76:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012b7a:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012b7c:	9b08      	ldr	r3, [sp, #32]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012b7e:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012b80:	199a      	adds	r2, r3, r6
 8012b82:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b84:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012b88:	5c9a      	ldrb	r2, [r3, r2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012b8a:	9b08      	ldr	r3, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012b8c:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012b8e:	1b9a      	subs	r2, r3, r6
 8012b90:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012b92:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012b96:	5c9a      	ldrb	r2, [r3, r2]
 8012b98:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012b9a:	9b06      	ldr	r3, [sp, #24]
 8012b9c:	195a      	adds	r2, r3, r5
 8012b9e:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012ba0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012ba4:	5c9a      	ldrb	r2, [r3, r2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012ba6:	9b06      	ldr	r3, [sp, #24]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012ba8:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012baa:	1b5a      	subs	r2, r3, r5
 8012bac:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012bae:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012bb2:	5c9a      	ldrb	r2, [r3, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012bb4:	9b04      	ldr	r3, [sp, #16]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012bb6:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bba:	189a      	adds	r2, r3, r2
 8012bbc:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012bbe:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012bc2:	5c9a      	ldrb	r2, [r3, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012bc4:	9b04      	ldr	r3, [sp, #16]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012bc6:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bca:	1a9a      	subs	r2, r3, r2
 8012bcc:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012bce:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012bd2:	5c9a      	ldrb	r2, [r3, r2]
  for (ctr = 0; ctr < 7; ctr++) {
 8012bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012bd6:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8012bd8:	454b      	cmp	r3, r9
 8012bda:	f47f aef1 	bne.w	80129c0 <jpeg_idct_14x7+0x148>
  }
}
 8012bde:	b045      	add	sp, #276	; 0x114
 8012be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be4:	ffffc515 	.word	0xffffc515
 8012be8:	ffffb0f1 	.word	0xffffb0f1
 8012bec:	ffffd3e1 	.word	0xffffd3e1
 8012bf0:	ffffc8fc 	.word	0xffffc8fc
 8012bf4:	ffffdbf0 	.word	0xffffdbf0
 8012bf8:	fffff26e 	.word	0xfffff26e
 8012bfc:	ffffb409 	.word	0xffffb409
 8012c00:	ffffc9e6 	.word	0xffffc9e6

08012c04 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012c08:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012c0c:	b0bb      	sub	sp, #236	; 0xec
 8012c0e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012c10:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012c12:	3080      	adds	r0, #128	; 0x80
 8012c14:	320e      	adds	r2, #14
 8012c16:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012c18:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012c1a:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012c1c:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012c1e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8012c22:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012c26:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012c2a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c2c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012c30:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c32:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012c36:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c3a:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8012c3c:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8012c3e:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012c42:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012c46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c4a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8012c4e:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8012c50:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8012c52:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012c56:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8012c58:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8012c5c:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012c5e:	6a28      	ldr	r0, [r5, #32]
    tmp20 = tmp11 + tmp10;
 8012c60:	eb04 0e02 	add.w	lr, r4, r2
    tmp22 = tmp11 - tmp10;
 8012c64:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012c66:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 8012c6a:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012c6c:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8012c6e:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c72:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 8012c76:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012c7a:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8012c7e:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012c82:	eb02 0c08 	add.w	ip, r2, r8
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012c86:	eba2 0209 	sub.w	r2, r2, r9
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8012c8a:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012c8e:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012c92:	eba2 0208 	sub.w	r2, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8012c96:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012c9a:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012c9c:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012ca0:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8012ca4:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012ca8:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012cac:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012cb0:	f8c7 e09c 	str.w	lr, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8012cb4:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8012cb8:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012cbc:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8012cc0:	f8c7 e01c 	str.w	lr, [r7, #28]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8012cc4:	67fa      	str	r2, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012cc6:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012cca:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012cce:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012cd0:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012cd2:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012cd4:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012cd6:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012cd8:	42b2      	cmp	r2, r6
 8012cda:	d1a0      	bne.n	8012c1e <jpeg_idct_12x6+0x1a>
 8012cdc:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8012ce0:	aa0a      	add	r2, sp, #40	; 0x28
 8012ce2:	3314      	adds	r3, #20
 8012ce4:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012ce6:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012cea:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8012cec:	9944      	ldr	r1, [sp, #272]	; 0x110
 8012cee:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 8012cf0:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8012cf4:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012cf6:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8012cfa:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8012cfe:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012d00:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 8012d04:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012d08:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8012d0c:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 8012d10:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012d14:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012d16:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8012d1a:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012d1e:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 8012d20:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 8012d24:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8012d26:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8012d2a:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8012d2e:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 8012d32:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8012d36:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8012d3a:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8012d3c:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 8012d40:	1b49      	subs	r1, r1, r5
    tmp10 = z1 + z3;
 8012d42:	eb08 0b06 	add.w	fp, r8, r6
    tmp20 = tmp10 + tmp12;
 8012d46:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8012d48:	eba7 000c 	sub.w	r0, r7, ip
    z4 = (INT32) wsptr[7];
 8012d4c:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012d50:	f641 378d 	movw	r7, #7053	; 0x1b8d
    tmp25 = tmp10 - tmp12;
 8012d54:	9005      	str	r0, [sp, #20]
    tmp22 = tmp11 + tmp12;
 8012d56:	1860      	adds	r0, r4, r1
    tmp23 = tmp11 - tmp12;
 8012d58:	1a61      	subs	r1, r4, r1
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012d5a:	eb05 0c0b 	add.w	ip, r5, fp
    tmp22 = tmp11 + tmp12;
 8012d5e:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012d60:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp23 = tmp11 - tmp12;
 8012d64:	9107      	str	r1, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012d66:	eb06 0905 	add.w	r9, r6, r5
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012d6a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012d6e:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012d72:	f640 075b 	movw	r7, #2139	; 0x85b
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012d76:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012d7a:	484b      	ldr	r0, [pc, #300]	; (8012ea8 <jpeg_idct_12x6+0x2a4>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012d7c:	fb07 cb0b 	mla	fp, r7, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012d80:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012d84:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012d86:	4849      	ldr	r0, [pc, #292]	; (8012eac <jpeg_idct_12x6+0x2a8>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012d88:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012d8c:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012d90:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012d94:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012d98:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012d9c:	eb01 0709 	add.w	r7, r1, r9
 8012da0:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012da4:	4842      	ldr	r0, [pc, #264]	; (8012eb0 <jpeg_idct_12x6+0x2ac>)
 8012da6:	fb00 1108 	mla	r1, r0, r8, r1
 8012daa:	4842      	ldr	r0, [pc, #264]	; (8012eb4 <jpeg_idct_12x6+0x2b0>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012dac:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012dae:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012db2:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 8012db6:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012dba:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8012dbe:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8012dc2:	1b86      	subs	r6, r0, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012dc4:	4461      	add	r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012dc6:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012dca:	483b      	ldr	r0, [pc, #236]	; (8012eb8 <jpeg_idct_12x6+0x2b4>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012dcc:	eb05 0c06 	add.w	ip, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012dd0:	444c      	add	r4, r9
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012dd2:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012dd6:	f641 087e 	movw	r8, #6270	; 0x187e
 8012dda:	fb08 c805 	mla	r8, r8, r5, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012dde:	fb00 cc06 	mla	ip, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012de2:	9804      	ldr	r0, [sp, #16]
 8012de4:	9e44      	ldr	r6, [sp, #272]	; 0x110
 8012de6:	eb00 050e 	add.w	r5, r0, lr
 8012dea:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012dec:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012df0:	5d45      	ldrb	r5, [r0, r5]
 8012df2:	9808      	ldr	r0, [sp, #32]
 8012df4:	5585      	strb	r5, [r0, r6]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012df6:	9804      	ldr	r0, [sp, #16]
 8012df8:	eba0 050e 	sub.w	r5, r0, lr
 8012dfc:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012dfe:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012e02:	5d45      	ldrb	r5, [r0, r5]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012e04:	9802      	ldr	r0, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012e06:	72dd      	strb	r5, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012e08:	eb00 0508 	add.w	r5, r0, r8
 8012e0c:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e0e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012e12:	5d45      	ldrb	r5, [r0, r5]
 8012e14:	705d      	strb	r5, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012e16:	9802      	ldr	r0, [sp, #8]
 8012e18:	eba0 0508 	sub.w	r5, r0, r8
 8012e1c:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e1e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012e22:	5d45      	ldrb	r5, [r0, r5]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012e24:	9806      	ldr	r0, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012e26:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012e28:	19c5      	adds	r5, r0, r7
 8012e2a:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e2c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012e30:	5d45      	ldrb	r5, [r0, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012e32:	9806      	ldr	r0, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012e34:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012e36:	1bc5      	subs	r5, r0, r7
 8012e38:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e3a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012e3e:	5d45      	ldrb	r5, [r0, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012e40:	9807      	ldr	r0, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012e42:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012e44:	1905      	adds	r5, r0, r4
 8012e46:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e48:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012e4c:	5d45      	ldrb	r5, [r0, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012e4e:	9807      	ldr	r0, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012e50:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012e52:	1b04      	subs	r4, r0, r4
 8012e54:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e56:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012e5a:	5d04      	ldrb	r4, [r0, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012e5c:	9803      	ldr	r0, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012e5e:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012e60:	eb00 040c 	add.w	r4, r0, ip
 8012e64:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e66:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012e6a:	5d04      	ldrb	r4, [r0, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012e6c:	9803      	ldr	r0, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012e6e:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012e70:	eba0 040c 	sub.w	r4, r0, ip
 8012e74:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e76:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012e7a:	5d04      	ldrb	r4, [r0, r4]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012e7c:	9805      	ldr	r0, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012e7e:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012e80:	1844      	adds	r4, r0, r1
 8012e82:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e84:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012e88:	5d04      	ldrb	r4, [r0, r4]
 8012e8a:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012e8c:	9805      	ldr	r0, [sp, #20]
 8012e8e:	1a41      	subs	r1, r0, r1
 8012e90:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8012e92:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012e96:	5c41      	ldrb	r1, [r0, r1]
 8012e98:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8012e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e9c:	4553      	cmp	r3, sl
 8012e9e:	f47f af22 	bne.w	8012ce6 <jpeg_idct_12x6+0xe2>
  }
}
 8012ea2:	b03b      	add	sp, #236	; 0xec
 8012ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea8:	ffffeeaf 	.word	0xffffeeaf
 8012eac:	ffffde8b 	.word	0xffffde8b
 8012eb0:	ffffea5c 	.word	0xffffea5c
 8012eb4:	ffffc08c 	.word	0xffffc08c
 8012eb8:	ffffc4df 	.word	0xffffc4df

08012ebc <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012ec0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012ec4:	b0b1      	sub	sp, #196	; 0xc4
 8012ec6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012ec8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012eca:	3080      	adds	r0, #128	; 0x80
 8012ecc:	320e      	adds	r2, #14
 8012ece:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012ed0:	af08      	add	r7, sp, #32
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012ed2:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012ed6:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012eda:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012edc:	9202      	str	r2, [sp, #8]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012ede:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ee2:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012ee4:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012ee8:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012eec:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012eee:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8012ef0:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012ef4:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8012ef6:	0352      	lsls	r2, r2, #13
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012ef8:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012efa:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012efe:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012f06:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012f0a:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012f0e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012f12:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012f14:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012f18:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012f1a:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012f1e:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012f22:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012f26:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 8012f2a:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 8012f2c:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8012f30:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8012f34:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012f38:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012f3c:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012f3e:	fb00 f808 	mul.w	r8, r0, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8012f42:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012f46:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8012f48:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8012f4c:	486e      	ldr	r0, [pc, #440]	; (8013108 <jpeg_idct_10x5+0x24c>)
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f4e:	9a02      	ldr	r2, [sp, #8]
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8012f50:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8012f54:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012f58:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f5c:	42b2      	cmp	r2, r6
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8012f5e:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012f62:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8012f66:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012f6a:	f8c7 907c 	str.w	r9, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012f6e:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8012f72:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012f76:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8012f7a:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012f7e:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8012f82:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012f84:	d1ab      	bne.n	8012ede <jpeg_idct_10x5+0x22>
 8012f86:	f1a3 0b04 	sub.w	fp, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8012f8a:	a908      	add	r1, sp, #32
 8012f8c:	3310      	adds	r3, #16
 8012f8e:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012f90:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012f94:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8012f98:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012f9a:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8012f9c:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8012fa0:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012fa2:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8012fa6:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012fa8:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012fac:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012fb0:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012fb4:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012fb6:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8012fb8:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012fbc:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8012fbe:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8012fc2:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012fc6:	006d      	lsls	r5, r5, #1
 8012fc8:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8012fcc:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012fd0:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012fd2:	19eb      	adds	r3, r5, r7
 8012fd4:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8012fd6:	f241 0071 	movw	r0, #4209	; 0x1071
 8012fda:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8012fde:	484a      	ldr	r0, [pc, #296]	; (8013108 <jpeg_idct_10x5+0x24c>)
 8012fe0:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8012fe4:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8012fe8:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 8012fea:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 8012fee:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8012ff0:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8012ff2:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012ff4:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 8012ff8:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 8012ffa:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 8012ffe:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8013002:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8013006:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013008:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801300c:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8013010:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8013014:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8013018:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801301c:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8013020:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013024:	f240 7014 	movw	r0, #1812	; 0x714
 8013028:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801302c:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801302e:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013032:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013036:	f642 0853 	movw	r8, #10323	; 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801303a:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801303e:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013040:	f241 2acf 	movw	sl, #4815	; 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013044:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013048:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801304c:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013050:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013054:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013056:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801305a:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801305e:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013060:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013064:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013068:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801306c:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801306e:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013070:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013074:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013076:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801307a:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801307c:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8013080:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013084:	5d5d      	ldrb	r5, [r3, r5]
 8013086:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8013088:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801308a:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801308c:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801308e:	f813 500c 	ldrb.w	r5, [r3, ip]
 8013092:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013094:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013098:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 801309c:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80130a0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80130a4:	5d5d      	ldrb	r5, [r3, r5]
 80130a6:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80130a8:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130aa:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80130ac:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130ae:	181d      	adds	r5, r3, r0
 80130b0:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80130b2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80130b6:	5d5d      	ldrb	r5, [r3, r5]
 80130b8:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80130ba:	9b02      	ldr	r3, [sp, #8]
 80130bc:	1a1b      	subs	r3, r3, r0
 80130be:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80130c0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80130c4:	5cc3      	ldrb	r3, [r0, r3]
 80130c6:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80130c8:	9b04      	ldr	r3, [sp, #16]
 80130ca:	4413      	add	r3, r2
			    & RANGE_MASK];
 80130cc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80130d0:	5cc3      	ldrb	r3, [r0, r3]
 80130d2:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80130d4:	9b04      	ldr	r3, [sp, #16]
 80130d6:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 80130d8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80130dc:	5cc3      	ldrb	r3, [r0, r3]
 80130de:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80130e0:	9b03      	ldr	r3, [sp, #12]
 80130e2:	4433      	add	r3, r6
			    & RANGE_MASK];
 80130e4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80130e8:	5cc3      	ldrb	r3, [r0, r3]
 80130ea:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80130ec:	9b03      	ldr	r3, [sp, #12]
 80130ee:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 80130f0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80130f4:	5cc3      	ldrb	r3, [r0, r3]
 80130f6:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 80130f8:	9b07      	ldr	r3, [sp, #28]
 80130fa:	455b      	cmp	r3, fp
 80130fc:	f47f af48 	bne.w	8012f90 <jpeg_idct_10x5+0xd4>
  }
}
 8013100:	b031      	add	sp, #196	; 0xc4
 8013102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013106:	bf00      	nop
 8013108:	ffffba5c 	.word	0xffffba5c

0801310c <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	b0a5      	sub	sp, #148	; 0x94
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013112:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013116:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8013118:	1e97      	subs	r7, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801311a:	ac04      	add	r4, sp, #16
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801311c:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013120:	320e      	adds	r2, #14
 8013122:	3e04      	subs	r6, #4
 8013124:	4620      	mov	r0, r4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013126:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801312a:	f641 0c7e 	movw	ip, #6270	; 0x187e
 801312e:	9200      	str	r2, [sp, #0]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013130:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013134:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013136:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801313a:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801313e:	434d      	muls	r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013140:	6c31      	ldr	r1, [r6, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013142:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013146:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801314a:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801314e:	4a65      	ldr	r2, [pc, #404]	; (80132e4 <jpeg_idct_8x4+0x1d8>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8013150:	eb05 0901 	add.w	r9, r5, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8013154:	1a6d      	subs	r5, r5, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013156:	6a31      	ldr	r1, [r6, #32]
 8013158:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801315c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801315e:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013162:	eb0a 010b 	add.w	r1, sl, fp
 8013166:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801316a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801316e:	fb0c 1a0a 	mla	sl, ip, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013172:	fb02 110b 	mla	r1, r2, fp, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013176:	9a00      	ldr	r2, [sp, #0]
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013178:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801317c:	12c9      	asrs	r1, r1, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801317e:	42ba      	cmp	r2, r7
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013180:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013184:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013188:	eb01 0985 	add.w	r9, r1, r5, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 801318c:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013190:	ebc1 0185 	rsb	r1, r1, r5, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013194:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013198:	f8c4 901c 	str.w	r9, [r4, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 801319c:	63e1      	str	r1, [r4, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801319e:	d1c7      	bne.n	8013130 <jpeg_idct_8x4+0x24>
 80131a0:	f1a3 0804 	sub.w	r8, r3, #4
 80131a4:	330c      	adds	r3, #12
 80131a6:	9303      	str	r3, [sp, #12]
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80131a8:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80131ac:	f241 1551 	movw	r5, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 80131b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 80131b2:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 80131b4:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 80131b8:	189c      	adds	r4, r3, r2
 80131ba:	9302      	str	r3, [sp, #8]
    z3 = (INT32) wsptr[6];
 80131bc:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = (INT32) wsptr[4];
 80131c0:	f850 6c10 	ldr.w	r6, [r0, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80131c4:	18ca      	adds	r2, r1, r3
    tmp2 = (INT32) wsptr[3];
 80131c6:	f850 cc14 	ldr.w	ip, [r0, #-20]
    tmp3 = (INT32) wsptr[1];
 80131ca:	f850 9c1c 	ldr.w	r9, [r0, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80131ce:	436a      	muls	r2, r5
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80131d0:	f641 057e 	movw	r5, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 80131d4:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80131d8:	fb05 2101 	mla	r1, r5, r1, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80131dc:	4d41      	ldr	r5, [pc, #260]	; (80132e4 <jpeg_idct_8x4+0x1d8>)
 80131de:	fb05 2203 	mla	r2, r5, r3, r2
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80131e2:	f850 3c20 	ldr.w	r3, [r0, #-32]
 80131e6:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 80131e8:	199d      	adds	r5, r3, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 80131ea:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 80131ec:	eb01 3645 	add.w	r6, r1, r5, lsl #13
    tmp13 = tmp0 - tmp2;
 80131f0:	ebc1 3145 	rsb	r1, r1, r5, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80131f4:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp12 = tmp1 - tmp3;
 80131f8:	ebc2 3b43 	rsb	fp, r2, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 80131fc:	9100      	str	r1, [sp, #0]
    tmp11 = tmp1 + tmp3;
 80131fe:	eb02 3143 	add.w	r1, r2, r3, lsl #13
    z3 = tmp1 + tmp3;
 8013202:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    tmp11 = tmp1 + tmp3;
 8013206:	9101      	str	r1, [sp, #4]
    z2 = tmp0 + tmp2;
 8013208:	eb07 010c 	add.w	r1, r7, ip
    z3 = tmp1 + tmp3;
 801320c:	eb03 0209 	add.w	r2, r3, r9
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013210:	188b      	adds	r3, r1, r2
 8013212:	436b      	muls	r3, r5
    z2 += z1;
 8013214:	4d34      	ldr	r5, [pc, #208]	; (80132e8 <jpeg_idct_8x4+0x1dc>)
 8013216:	fb05 3101 	mla	r1, r5, r1, r3
    z3 += z1;
 801321a:	4d34      	ldr	r5, [pc, #208]	; (80132ec <jpeg_idct_8x4+0x1e0>)
 801321c:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013220:	eb07 0209 	add.w	r2, r7, r9
 8013224:	4d32      	ldr	r5, [pc, #200]	; (80132f0 <jpeg_idct_8x4+0x1e4>)
 8013226:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8013228:	f640 158e 	movw	r5, #2446	; 0x98e
 801322c:	eb01 0a02 	add.w	sl, r1, r2
    tmp3 += z1 + z3;
 8013230:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8013232:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013236:	f850 5c0c 	ldr.w	r5, [r0, #-12]
    tmp3 += z1 + z3;
 801323a:	f243 0a0b 	movw	sl, #12299	; 0x300b
 801323e:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013242:	eb05 090c 	add.w	r9, r5, ip
 8013246:	4d2b      	ldr	r5, [pc, #172]	; (80132f4 <jpeg_idct_8x4+0x1e8>)
    tmp1 += z1 + z3;
 8013248:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801324c:	fb05 f909 	mul.w	r9, r5, r9
    tmp1 += z1 + z3;
 8013250:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8013254:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8013256:	4449      	add	r1, r9
 8013258:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 801325c:	fb0a 3a05 	mla	sl, sl, r5, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013260:	9d02      	ldr	r5, [sp, #8]
    tmp2 += z1 + z2;
 8013262:	fb09 110c 	mla	r1, r9, ip, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013266:	eb06 0c02 	add.w	ip, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801326a:	1ab6      	subs	r6, r6, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801326c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
			    & RANGE_MASK];
 801326e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
			    & RANGE_MASK];
 8013272:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013276:	f81e c00c 	ldrb.w	ip, [lr, ip]
 801327a:	f805 c003 	strb.w	ip, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801327e:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013280:	f81e 2006 	ldrb.w	r2, [lr, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013284:	1a5d      	subs	r5, r3, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013286:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013288:	185a      	adds	r2, r3, r1
			    & RANGE_MASK];
 801328a:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 801328e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013292:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013296:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013298:	f81e 2005 	ldrb.w	r2, [lr, r5]
 801329c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801329e:	eb0b 020a 	add.w	r2, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80132a2:	ebab 0b0a 	sub.w	fp, fp, sl
			    & RANGE_MASK];
 80132a6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80132aa:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80132ae:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80132b2:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80132b4:	f81e 300b 	ldrb.w	r3, [lr, fp]
 80132b8:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80132ba:	9b00      	ldr	r3, [sp, #0]
 80132bc:	443b      	add	r3, r7
			    & RANGE_MASK];
 80132be:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80132c2:	f81e 3003 	ldrb.w	r3, [lr, r3]
 80132c6:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80132c8:	9b00      	ldr	r3, [sp, #0]
 80132ca:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 80132cc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80132d0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 80132d4:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 80132d6:	9b03      	ldr	r3, [sp, #12]
 80132d8:	4543      	cmp	r3, r8
 80132da:	f47f af65 	bne.w	80131a8 <jpeg_idct_8x4+0x9c>
  }
}
 80132de:	b025      	add	sp, #148	; 0x94
 80132e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e4:	ffffc4df 	.word	0xffffc4df
 80132e8:	ffffc13b 	.word	0xffffc13b
 80132ec:	fffff384 	.word	0xfffff384
 80132f0:	ffffe333 	.word	0xffffe333
 80132f4:	ffffadfd 	.word	0xffffadfd

080132f8 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80132f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132fc:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80132fe:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013302:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013304:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013308:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801330a:	3080      	adds	r0, #128	; 0x80
 801330c:	f102 040a 	add.w	r4, r2, #10
 8013310:	f1a1 0c04 	sub.w	ip, r1, #4
 8013314:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013316:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801331a:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801331e:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013320:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013324:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013326:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801332a:	f9be a010 	ldrsh.w	sl, [lr, #16]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801332e:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013330:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013334:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8013338:	f9be 6020 	ldrsh.w	r6, [lr, #32]
    tmp0 <<= CONST_BITS;
 801333c:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013340:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013344:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013348:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801334c:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013350:	fb09 f606 	mul.w	r6, r9, r6
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013354:	fb08 fa0a 	mul.w	sl, r8, sl
    tmp10 = tmp0 + tmp12;
 8013358:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 801335c:	eba1 0146 	sub.w	r1, r1, r6, lsl #1

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013360:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013364:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013368:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801336c:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013370:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013374:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013376:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801337a:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801337c:	d1d0      	bne.n	8013320 <jpeg_idct_6x3+0x28>
 801337e:	f1a3 0e04 	sub.w	lr, r3, #4
 8013382:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013386:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801338a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 801338e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013390:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013392:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8013396:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013398:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801339c:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80133a0:	fb00 f401 	mul.w	r4, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80133a4:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80133a8:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80133ac:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = tmp0 + tmp10;
 80133b0:	eb04 3143 	add.w	r1, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 80133b4:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 80133b8:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80133bc:	f852 4c10 	ldr.w	r4, [r2, #-16]
 80133c0:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80133c4:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp1 + tmp0;
 80133c8:	eb01 0604 	add.w	r6, r1, r4
    tmp12 = tmp1 - tmp0;
 80133cc:	eba1 0104 	sub.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 80133d0:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80133d4:	eb04 0508 	add.w	r5, r4, r8
 80133d8:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80133dc:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 80133e0:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80133e4:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80133e8:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80133ec:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80133ee:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80133f2:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80133f6:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80133fa:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80133fe:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8013402:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8013406:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801340a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801340e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013410:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013414:	9801      	ldr	r0, [sp, #4]
 8013416:	5d86      	ldrb	r6, [r0, r6]
 8013418:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801341a:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801341e:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 8013422:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8013426:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801342a:	5d86      	ldrb	r6, [r0, r6]
 801342c:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801342e:	5cc3      	ldrb	r3, [r0, r3]
 8013430:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013432:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013436:	eba1 0105 	sub.w	r1, r1, r5
			    & RANGE_MASK];
 801343a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 801343e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013442:	5cc3      	ldrb	r3, [r0, r3]
 8013444:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013446:	5c43      	ldrb	r3, [r0, r1]
 8013448:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 801344a:	d19c      	bne.n	8013386 <jpeg_idct_6x3+0x8e>
  }
}
 801344c:	b015      	add	sp, #84	; 0x54
 801344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013454 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013458:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801345a:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 801345e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8013460:	1e97      	subs	r7, r2, #2
 8013462:	f10d 0c08 	add.w	ip, sp, #8
 8013466:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013468:	3e04      	subs	r6, #4
 801346a:	3206      	adds	r2, #6
 801346c:	4660      	mov	r0, ip
{
 801346e:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013470:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
 8013474:	f856 4f04 	ldr.w	r4, [r6, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013478:	42ba      	cmp	r2, r7
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801347a:	fb04 f101 	mul.w	r1, r4, r1

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801347e:	6a33      	ldr	r3, [r6, #32]
 8013480:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8013484:	fb03 f404 	mul.w	r4, r3, r4

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013488:	eb01 0e04 	add.w	lr, r1, r4
    wsptr[4*1] = tmp10 - tmp0;
 801348c:	eba1 0104 	sub.w	r1, r1, r4
    wsptr[4*0] = tmp10 + tmp0;
 8013490:	f84c eb04 	str.w	lr, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8013494:	f8cc 100c 	str.w	r1, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013498:	d1ea      	bne.n	8013470 <jpeg_idct_4x2+0x1c>
 801349a:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801349c:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80134a0:	f641 097e 	movw	r9, #6270	; 0x187e
 80134a4:	f1a3 0c04 	sub.w	ip, r3, #4
    tmp0 = wsptr[0] + (ONE << 2);
 80134a8:	6804      	ldr	r4, [r0, #0]
 80134aa:	46e0      	mov	r8, ip
    tmp2 = wsptr[2];
 80134ac:	6882      	ldr	r2, [r0, #8]
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 80134ae:	3010      	adds	r0, #16
    z3 = wsptr[3];
 80134b0:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp0 = wsptr[0] + (ONE << 2);
 80134b4:	3404      	adds	r4, #4
    z2 = wsptr[1];
 80134b6:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80134ba:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80134be:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80134c0:	19ca      	adds	r2, r1, r7
    outptr = output_buf[ctr] + output_col;
 80134c2:	f85c ef04 	ldr.w	lr, [ip, #4]!
 80134c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80134c8:	fb0a f202 	mul.w	r2, sl, r2
    outptr = output_buf[ctr] + output_col;
 80134cc:	eb0e 0603 	add.w	r6, lr, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80134d0:	4b12      	ldr	r3, [pc, #72]	; (801351c <jpeg_idct_4x2+0xc8>)
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80134d2:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80134d6:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80134da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134dc:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80134e0:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 80134e4:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 80134e8:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80134ec:	5def      	ldrb	r7, [r5, r7]
 80134ee:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80134f2:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 80134f4:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80134f6:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80134f8:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80134fc:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8013500:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013502:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013506:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801350a:	5c69      	ldrb	r1, [r5, r1]
 801350c:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801350e:	5caa      	ldrb	r2, [r5, r2]
 8013510:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013512:	d1c9      	bne.n	80134a8 <jpeg_idct_4x2+0x54>
  }
}
 8013514:	b00b      	add	sp, #44	; 0x2c
 8013516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351a:	bf00      	nop
 801351c:	ffffc4df 	.word	0xffffc4df

08013520 <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013520:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013522:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013526:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8013528:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801352a:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 801352c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013530:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013532:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013536:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013538:	437b      	muls	r3, r7
{
 801353a:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 801353c:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801353e:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8013540:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013542:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013544:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013546:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 801354a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801354e:	5c41      	ldrb	r1, [r0, r1]
 8013550:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013552:	5cc3      	ldrb	r3, [r0, r3]
 8013554:	7073      	strb	r3, [r6, #1]
}
 8013556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013558 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801355c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013560:	f1a2 0b02 	sub.w	fp, r2, #2
 8013564:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013566:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801356a:	3380      	adds	r3, #128	; 0x80
 801356c:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801356e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8013570:	f1a3 0804 	sub.w	r8, r3, #4
 8013574:	f102 030e 	add.w	r3, r2, #14
 8013578:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801357a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801357c:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013580:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013584:	f858 1f04 	ldr.w	r1, [r8, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013588:	f642 4563 	movw	r5, #11363	; 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801358c:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013590:	f245 2e03 	movw	lr, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013594:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013596:	f8d8 1080 	ldr.w	r1, [r8, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801359a:	f9bb c060 	ldrsh.w	ip, [fp, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801359e:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80135a0:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 80135a2:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80135a4:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80135a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80135ac:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80135ae:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80135b0:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 80135b4:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80135b6:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80135b8:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80135ba:	eba2 0a01 	sub.w	sl, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80135be:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80135c2:	4acf      	ldr	r2, [pc, #828]	; (8013900 <jpeg_idct_8x16+0x3a8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80135c4:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80135c8:	f8d8 10c0 	ldr.w	r1, [r8, #192]	; 0xc0
 80135cc:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80135d0:	f640 01d4 	movw	r1, #2260	; 0x8d4
    z3 = z1 - z2;
 80135d4:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80135d8:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80135da:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80135dc:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80135e0:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80135e4:	fb02 4409 	mla	r4, r2, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80135e8:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80135ec:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80135f0:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80135f4:	fb02 110c 	mla	r1, r2, ip, r1
    tmp20 = tmp10 + tmp0;
 80135f8:	eb07 020e 	add.w	r2, r7, lr
 80135fc:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80135fe:	eba7 020e 	sub.w	r2, r7, lr
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013602:	f640 5723 	movw	r7, #3363	; 0xd23
    tmp27 = tmp10 - tmp0;
 8013606:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013608:	1972      	adds	r2, r6, r5
 801360a:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801360c:	1b72      	subs	r2, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801360e:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8013612:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013614:	eb0a 0204 	add.w	r2, sl, r4
 8013618:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801361a:	ebaa 0204 	sub.w	r2, sl, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801361e:	f8d8 40e0 	ldr.w	r4, [r8, #224]	; 0xe0
    tmp25 = tmp13 - tmp2;
 8013622:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013624:	1842      	adds	r2, r0, r1
 8013626:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013628:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801362a:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = tmp11 - tmp3;
 801362e:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013630:	f8d8 2020 	ldr.w	r2, [r8, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013634:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013638:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801363a:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
 801363e:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013640:	f8d8 00a0 	ldr.w	r0, [r8, #160]	; 0xa0
 8013644:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013646:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801364a:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801364c:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801364e:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 8013652:	eb01 0a05 	add.w	sl, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013656:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013658:	eb01 0e00 	add.w	lr, r1, r0
 801365c:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013660:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013664:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013668:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801366c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013670:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013674:	f241 5455 	movw	r4, #5461	; 0x1555
 8013678:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801367c:	1a8c      	subs	r4, r1, r2
 801367e:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013680:	eb06 0709 	add.w	r7, r6, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013684:	9409      	str	r4, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013686:	4477      	add	r7, lr
 8013688:	4c9e      	ldr	r4, [pc, #632]	; (8013904 <jpeg_idct_8x16+0x3ac>)
 801368a:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801368e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013690:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013692:	eb0c 040a 	add.w	r4, ip, sl
 8013696:	443c      	add	r4, r7
 8013698:	4f9b      	ldr	r7, [pc, #620]	; (8013908 <jpeg_idct_8x16+0x3b0>)
 801369a:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801369e:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80136a0:	4f9a      	ldr	r7, [pc, #616]	; (801390c <jpeg_idct_8x16+0x3b4>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80136a2:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80136a4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80136a8:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80136aa:	f240 214d 	movw	r1, #589	; 0x24d
 80136ae:	fb01 4102 	mla	r1, r1, r2, r4
 80136b2:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80136b4:	4996      	ldr	r1, [pc, #600]	; (8013910 <jpeg_idct_8x16+0x3b8>)
 80136b6:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80136ba:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80136bc:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80136be:	f642 5909 	movw	r9, #11529	; 0x2d09
 80136c2:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80136c6:	fb07 1905 	mla	r9, r7, r5, r1
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80136ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80136cc:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80136ce:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80136d2:	fb0a 1102 	mla	r1, sl, r2, r1
    z2    += z4;
 80136d6:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80136d8:	eb01 0a07 	add.w	sl, r1, r7
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80136dc:	498d      	ldr	r1, [pc, #564]	; (8013914 <jpeg_idct_8x16+0x3bc>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80136de:	f242 2718 	movw	r7, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80136e2:	4351      	muls	r1, r2
    tmp1  += z1;
 80136e4:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80136e6:	fb07 1100 	mla	r1, r7, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80136ea:	4f8b      	ldr	r7, [pc, #556]	; (8013918 <jpeg_idct_8x16+0x3c0>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80136ec:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80136ee:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80136f2:	437a      	muls	r2, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80136f4:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 80136f8:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80136fa:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80136fe:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013700:	eb05 0c00 	add.w	ip, r5, r0
 8013704:	4457      	add	r7, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013706:	1b40      	subs	r0, r0, r5
 8013708:	f640 5523 	movw	r5, #3363	; 0xd23
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801370c:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013710:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013712:	4368      	muls	r0, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013714:	9d01      	ldr	r5, [sp, #4]
    tmp2  += z2;
 8013716:	4464      	add	r4, ip
    tmp3  += z2;
 8013718:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801371a:	443d      	add	r5, r7
    tmp10 += z2;
 801371c:	4486      	add	lr, r0
    tmp11 += z2;
 801371e:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013720:	12ed      	asrs	r5, r5, #11
 8013722:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013726:	9d01      	ldr	r5, [sp, #4]
 8013728:	1bed      	subs	r5, r5, r7
 801372a:	12ed      	asrs	r5, r5, #11
 801372c:	f8c3 51dc 	str.w	r5, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013730:	9d03      	ldr	r5, [sp, #12]
 8013732:	4435      	add	r5, r6
 8013734:	12ed      	asrs	r5, r5, #11
 8013736:	61dd      	str	r5, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013738:	9d03      	ldr	r5, [sp, #12]
 801373a:	1bad      	subs	r5, r5, r6
 801373c:	12ed      	asrs	r5, r5, #11
 801373e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013742:	9d05      	ldr	r5, [sp, #20]
 8013744:	4425      	add	r5, r4
 8013746:	12ed      	asrs	r5, r5, #11
 8013748:	63dd      	str	r5, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801374a:	9d05      	ldr	r5, [sp, #20]
 801374c:	1b2c      	subs	r4, r5, r4
 801374e:	12e4      	asrs	r4, r4, #11
 8013750:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013754:	9c07      	ldr	r4, [sp, #28]
 8013756:	440c      	add	r4, r1
 8013758:	12e4      	asrs	r4, r4, #11
 801375a:	65dc      	str	r4, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801375c:	9c07      	ldr	r4, [sp, #28]
 801375e:	1a61      	subs	r1, r4, r1
 8013760:	12c9      	asrs	r1, r1, #11
 8013762:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013766:	9908      	ldr	r1, [sp, #32]
 8013768:	4471      	add	r1, lr
 801376a:	12c9      	asrs	r1, r1, #11
 801376c:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 801376e:	9908      	ldr	r1, [sp, #32]
 8013770:	eba1 010e 	sub.w	r1, r1, lr
 8013774:	12c9      	asrs	r1, r1, #11
 8013776:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801377a:	9906      	ldr	r1, [sp, #24]
 801377c:	4401      	add	r1, r0
 801377e:	12c9      	asrs	r1, r1, #11
 8013780:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013784:	9906      	ldr	r1, [sp, #24]
 8013786:	1a09      	subs	r1, r1, r0
 8013788:	12c9      	asrs	r1, r1, #11
 801378a:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801378e:	9904      	ldr	r1, [sp, #16]
 8013790:	4411      	add	r1, r2
 8013792:	12c9      	asrs	r1, r1, #11
 8013794:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013798:	9904      	ldr	r1, [sp, #16]
 801379a:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801379c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801379e:	12d2      	asrs	r2, r2, #11
 80137a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80137a4:	9a02      	ldr	r2, [sp, #8]
 80137a6:	440a      	add	r2, r1
 80137a8:	12d2      	asrs	r2, r2, #11
 80137aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80137ae:	9a02      	ldr	r2, [sp, #8]
 80137b0:	1a52      	subs	r2, r2, r1
 80137b2:	12d2      	asrs	r2, r2, #11
 80137b4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137ba:	455a      	cmp	r2, fp
 80137bc:	f47f aede 	bne.w	801357c <jpeg_idct_8x16+0x24>
 80137c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80137c2:	a80e      	add	r0, sp, #56	; 0x38
 80137c4:	f1a3 0904 	sub.w	r9, r3, #4
 80137c8:	333c      	adds	r3, #60	; 0x3c
 80137ca:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80137cc:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80137d0:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 80137d4:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80137d6:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 80137d8:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 80137dc:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 80137de:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 80137e2:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80137e4:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 80137e6:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp0 = (INT32) wsptr[7];
 80137ea:	f850 bc04 	ldr.w	fp, [r0, #-4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80137ee:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80137f0:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp1 = (INT32) wsptr[5];
 80137f4:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80137f8:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80137fc:	4c47      	ldr	r4, [pc, #284]	; (801391c <jpeg_idct_8x16+0x3c4>)
    tmp2 = (INT32) wsptr[3];
 80137fe:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013802:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013806:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp3 = (INT32) wsptr[1];
 801380a:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801380e:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013810:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8013812:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8013814:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8013818:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 801381c:	eb0b 040e 	add.w	r4, fp, lr
    tmp11 = tmp1 + tmp3;
 8013820:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8013824:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8013826:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 801382a:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 801382e:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013830:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8013834:	1862      	adds	r2, r4, r1
 8013836:	435a      	muls	r2, r3
    z2 += z1;
 8013838:	4b39      	ldr	r3, [pc, #228]	; (8013920 <jpeg_idct_8x16+0x3c8>)
 801383a:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 801383e:	4b39      	ldr	r3, [pc, #228]	; (8013924 <jpeg_idct_8x16+0x3cc>)
 8013840:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013844:	eb0b 010a 	add.w	r1, fp, sl
 8013848:	4b37      	ldr	r3, [pc, #220]	; (8013928 <jpeg_idct_8x16+0x3d0>)
 801384a:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 801384c:	f640 138e 	movw	r3, #2446	; 0x98e
 8013850:	eb04 0c01 	add.w	ip, r4, r1
    tmp3 += z1 + z3;
 8013854:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8013856:	fb03 cc0b 	mla	ip, r3, fp, ip
    tmp3 += z1 + z3;
 801385a:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801385e:	4b33      	ldr	r3, [pc, #204]	; (801392c <jpeg_idct_8x16+0x3d4>)
    tmp3 += z1 + z3;
 8013860:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013864:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8013868:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801386c:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013870:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8013872:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8013874:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 8013876:	fb0b 2b08 	mla	fp, fp, r8, r2
    tmp2 += z1 + z2;
 801387a:	f246 2854 	movw	r8, #25172	; 0x6254
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801387e:	9a98      	ldr	r2, [sp, #608]	; 0x260
    tmp2 += z1 + z2;
 8013880:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013884:	eb07 0e01 	add.w	lr, r7, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013888:	1a7f      	subs	r7, r7, r1
			    & RANGE_MASK];
 801388a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 801388e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013892:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013896:	9b03      	ldr	r3, [sp, #12]
 8013898:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801389c:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801389e:	9a00      	ldr	r2, [sp, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80138a0:	5dd9      	ldrb	r1, [r3, r7]
 80138a2:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80138a4:	1931      	adds	r1, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80138a6:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 80138a8:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 80138ac:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80138b0:	5c59      	ldrb	r1, [r3, r1]
 80138b2:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80138b4:	5d99      	ldrb	r1, [r3, r6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80138b6:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80138b8:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80138ba:	eb03 010b 	add.w	r1, r3, fp
 80138be:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80138c0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80138c4:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80138c6:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80138c8:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80138ca:	eba3 030b 	sub.w	r3, r3, fp
			    & RANGE_MASK];
 80138ce:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80138d2:	5cd3      	ldrb	r3, [r2, r3]
 80138d4:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80138d6:	9b01      	ldr	r3, [sp, #4]
 80138d8:	4463      	add	r3, ip
			    & RANGE_MASK];
 80138da:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80138de:	5cd3      	ldrb	r3, [r2, r3]
 80138e0:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80138e2:	9b01      	ldr	r3, [sp, #4]
 80138e4:	eba3 030c 	sub.w	r3, r3, ip
			    & RANGE_MASK];
 80138e8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80138ec:	5cd3      	ldrb	r3, [r2, r3]
 80138ee:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 80138f0:	9b04      	ldr	r3, [sp, #16]
 80138f2:	454b      	cmp	r3, r9
 80138f4:	f47f af6a 	bne.w	80137cc <jpeg_idct_8x16+0x274>
  }
}
 80138f8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80138fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013900:	ffffecc2 	.word	0xffffecc2
 8013904:	ffffb6d6 	.word	0xffffb6d6
 8013908:	ffffc542 	.word	0xffffc542
 801390c:	ffffe77a 	.word	0xffffe77a
 8013910:	ffffdbfa 	.word	0xffffdbfa
 8013914:	ffffeaab 	.word	0xffffeaab
 8013918:	ffffd817 	.word	0xffffd817
 801391c:	ffffc4df 	.word	0xffffc4df
 8013920:	ffffc13b 	.word	0xffffc13b
 8013924:	fffff384 	.word	0xfffff384
 8013928:	ffffe333 	.word	0xffffe333
 801392c:	ffffadfd 	.word	0xffffadfd

08013930 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013934:	b0ef      	sub	sp, #444	; 0x1bc
 8013936:	f1a2 0e02 	sub.w	lr, r2, #2
 801393a:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801393c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013940:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013942:	3380      	adds	r3, #128	; 0x80
 8013944:	3804      	subs	r0, #4
 8013946:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013948:	f102 030c 	add.w	r3, r2, #12
 801394c:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 801394e:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013950:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013954:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013958:	f850 1f04 	ldr.w	r1, [r0, #4]!
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801395c:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013960:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013964:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013966:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013968:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801396c:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801396e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8013972:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013974:	fb01 f704 	mul.w	r7, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013978:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801397c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013980:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013984:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8013988:	19d6      	adds	r6, r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801398a:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801398c:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 801398e:	eb02 050c 	add.w	r5, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013992:	f9be c020 	ldrsh.w	ip, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013996:	1b3f      	subs	r7, r7, r4
    tmp12 = z1 - z4;
 8013998:	eba2 0904 	sub.w	r9, r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801399c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80139a0:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80139a4:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80139a8:	49b4      	ldr	r1, [pc, #720]	; (8013c7c <jpeg_idct_7x14+0x34c>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80139aa:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80139ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80139ae:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80139b2:	f9be 2060 	ldrsh.w	r2, [lr, #96]	; 0x60
 80139b6:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80139b8:	eb0c 0402 	add.w	r4, ip, r2
 80139bc:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80139be:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80139c2:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80139c6:	fb01 4402 	mla	r4, r1, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80139ca:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 80139ce:	434a      	muls	r2, r1
    tmp20 = tmp10 + tmp13;
 80139d0:	19f1      	adds	r1, r6, r7
 80139d2:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 80139d4:	1bf1      	subs	r1, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80139d6:	fb08 220c 	mla	r2, r8, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139da:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp26 = tmp10 - tmp13;
 80139de:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 80139e0:	1929      	adds	r1, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80139e2:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp21 = tmp11 + tmp14;
 80139e6:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 80139e8:	1b29      	subs	r1, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139ea:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80139ee:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 80139f2:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 80139f4:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 80139f8:	eba9 0202 	sub.w	r2, r9, r2
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80139fc:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8013a00:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8013a02:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013a04:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013a06:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013a0a:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013a0c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8013a0e:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013a10:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8013a14:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013a16:	f9be 2070 	ldrsh.w	r2, [lr, #112]	; 0x70
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013a1a:	eb04 0c07 	add.w	ip, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013a1e:	434a      	muls	r2, r1
    tmp14 = z1 + z3;
 8013a20:	eb04 0b06 	add.w	fp, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013a24:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013a28:	fb05 f50b 	mul.w	r5, r5, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013a2c:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013a30:	4993      	ldr	r1, [pc, #588]	; (8013c80 <jpeg_idct_7x14+0x350>)
 8013a32:	eb0c 0805 	add.w	r8, ip, r5
 8013a36:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 8013a3a:	fb01 8804 	mla	r8, r1, r4, r8
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013a3e:	f641 0114 	movw	r1, #6164	; 0x1814
 8013a42:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013a46:	498f      	ldr	r1, [pc, #572]	; (8013c84 <jpeg_idct_7x14+0x354>)
 8013a48:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8013a4c:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013a4e:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 8013a52:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013a54:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013a58:	4c8b      	ldr	r4, [pc, #556]	; (8013c88 <jpeg_idct_7x14+0x358>)
    tmp16 += tmp15;
 8013a5a:	4449      	add	r1, r9
 8013a5c:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013a5e:	19b9      	adds	r1, r7, r6
 8013a60:	fb0a f101 	mul.w	r1, sl, r1
 8013a64:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013a68:	fb04 1a07 	mla	sl, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013a6c:	4c87      	ldr	r4, [pc, #540]	; (8013c8c <jpeg_idct_7x14+0x35c>)
 8013a6e:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013a72:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013a74:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013a78:	4c85      	ldr	r4, [pc, #532]	; (8013c90 <jpeg_idct_7x14+0x360>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013a7a:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013a7c:	1bf5      	subs	r5, r6, r7
 8013a7e:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013a82:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8013a86:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8013a8a:	9c07      	ldr	r4, [sp, #28]
 8013a8c:	4422      	add	r2, r4

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013a8e:	9c01      	ldr	r4, [sp, #4]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013a90:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013a92:	f241 5b99 	movw	fp, #5529	; 0x1599
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013a96:	4444      	add	r4, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8013a98:	1b92      	subs	r2, r2, r6
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013a9a:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013a9e:	12e4      	asrs	r4, r4, #11
    tmp13 = (z1 - z3) << PASS1_BITS;
 8013aa0:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013aa2:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013aa4:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013aa8:	9c01      	ldr	r4, [sp, #4]
 8013aaa:	eba4 0408 	sub.w	r4, r4, r8
 8013aae:	12e4      	asrs	r4, r4, #11
 8013ab0:	f8c3 4168 	str.w	r4, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013ab4:	9c03      	ldr	r4, [sp, #12]
 8013ab6:	4454      	add	r4, sl
 8013ab8:	12e4      	asrs	r4, r4, #11
 8013aba:	619c      	str	r4, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013abc:	9c03      	ldr	r4, [sp, #12]
 8013abe:	eba4 040a 	sub.w	r4, r4, sl
 8013ac2:	12e4      	asrs	r4, r4, #11
 8013ac4:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013ac8:	9c05      	ldr	r4, [sp, #20]
 8013aca:	440c      	add	r4, r1
 8013acc:	12e4      	asrs	r4, r4, #11
 8013ace:	635c      	str	r4, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013ad0:	9c05      	ldr	r4, [sp, #20]
 8013ad2:	1a61      	subs	r1, r4, r1
 8013ad4:	12c9      	asrs	r1, r1, #11
 8013ad6:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8013ada:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013adc:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 8013ae0:	6519      	str	r1, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013ae2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ae4:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013ae8:	9908      	ldr	r1, [sp, #32]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013aea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013aee:	9a06      	ldr	r2, [sp, #24]
 8013af0:	4462      	add	r2, ip
 8013af2:	12d2      	asrs	r2, r2, #11
 8013af4:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013af6:	9a06      	ldr	r2, [sp, #24]
 8013af8:	eba2 020c 	sub.w	r2, r2, ip
 8013afc:	12d2      	asrs	r2, r2, #11
 8013afe:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013b02:	9a04      	ldr	r2, [sp, #16]
 8013b04:	442a      	add	r2, r5
 8013b06:	12d2      	asrs	r2, r2, #11
 8013b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013b0c:	9a04      	ldr	r2, [sp, #16]
 8013b0e:	1b52      	subs	r2, r2, r5
 8013b10:	12d2      	asrs	r2, r2, #11
 8013b12:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013b16:	9a02      	ldr	r2, [sp, #8]
 8013b18:	440a      	add	r2, r1
 8013b1a:	12d2      	asrs	r2, r2, #11
 8013b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013b20:	9a02      	ldr	r2, [sp, #8]
 8013b22:	1a52      	subs	r2, r2, r1
 8013b24:	12d2      	asrs	r2, r2, #11
 8013b26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b2c:	4572      	cmp	r2, lr
 8013b2e:	f47f af0f 	bne.w	8013950 <jpeg_idct_7x14+0x20>
 8013b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8013b34:	ac0c      	add	r4, sp, #48	; 0x30
 8013b36:	f1a3 0904 	sub.w	r9, r3, #4
 8013b3a:	3334      	adds	r3, #52	; 0x34
 8013b3c:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013b3e:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8013b42:	341c      	adds	r4, #28
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b44:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 8013b48:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
 8013b4a:	9303      	str	r3, [sp, #12]
 8013b4c:	189e      	adds	r6, r3, r2
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b4e:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 8013b52:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b56:	9301      	str	r3, [sp, #4]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013b58:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 8013b5c:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013b60:	eba3 0c01 	sub.w	ip, r3, r1
 8013b64:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013b68:	4f4a      	ldr	r7, [pc, #296]	; (8013c94 <jpeg_idct_7x14+0x364>)
    tmp10 = z1 + z3;
 8013b6a:	eb05 0801 	add.w	r8, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013b6e:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013b72:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8013b76:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013b7a:	1aea      	subs	r2, r5, r3
 8013b7c:	f640 2312 	movw	r3, #2578	; 0xa12
    z3 = (INT32) wsptr[5];
 8013b80:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013b84:	435a      	muls	r2, r3
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013b86:	9b01      	ldr	r3, [sp, #4]
 8013b88:	eb0c 0002 	add.w	r0, ip, r2
 8013b8c:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 8013b90:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8013b94:	fb07 0003 	mla	r0, r7, r3, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013b98:	f642 03c6 	movw	r3, #10438	; 0x28c6
 8013b9c:	9f01      	ldr	r7, [sp, #4]
 8013b9e:	fb03 f308 	mul.w	r3, r3, r8
 8013ba2:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013ba6:	f46f 771f 	mvn.w	r7, #636	; 0x27c
 8013baa:	fb07 3101 	mla	r1, r7, r1, r3
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013bae:	4f3a      	ldr	r7, [pc, #232]	; (8013c98 <jpeg_idct_7x14+0x368>)
 8013bb0:	fb07 3305 	mla	r3, r7, r5, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013bb4:	f240 5773 	movw	r7, #1395	; 0x573
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013bb8:	4461      	add	r1, ip
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013bba:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 8013bbc:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013bc0:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013bc2:	eb02 0b0a 	add.w	fp, r2, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013bc6:	eba2 050a 	sub.w	r5, r2, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013bca:	f641 53ef 	movw	r3, #7663	; 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013bce:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013bd0:	44f2      	add	sl, lr
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013bd2:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013bd6:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013bd8:	437d      	muls	r5, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013bda:	4f30      	ldr	r7, [pc, #192]	; (8013c9c <jpeg_idct_7x14+0x36c>)
    tmp10 = tmp11 - tmp12;
 8013bdc:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 8013be0:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013be2:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013be6:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013bea:	9f00      	ldr	r7, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013bec:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013bf0:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8013bf4:	4455      	add	r5, sl
    tmp10 += z2;
 8013bf6:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013bf8:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013bfc:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013c00:	eba1 010c 	sub.w	r1, r1, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013c04:	4452      	add	r2, sl
			    & RANGE_MASK];
 8013c06:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8013c0a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013c0e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8013c12:	9f03      	ldr	r7, [sp, #12]
 8013c14:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013c18:	9b00      	ldr	r3, [sp, #0]
 8013c1a:	5c59      	ldrb	r1, [r3, r1]
 8013c1c:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013c1e:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013c20:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8013c22:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8013c26:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013c2a:	5c59      	ldrb	r1, [r3, r1]
 8013c2c:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013c2e:	5c19      	ldrb	r1, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013c30:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013c32:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013c34:	1899      	adds	r1, r3, r2
 8013c36:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013c38:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013c3c:	5c59      	ldrb	r1, [r3, r1]
 8013c3e:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013c40:	9b02      	ldr	r3, [sp, #8]
 8013c42:	1a9b      	subs	r3, r3, r2
 8013c44:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 8013c46:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013c4a:	5cd3      	ldrb	r3, [r2, r3]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013c4c:	f642 5241 	movw	r2, #11585	; 0x2d41
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013c50:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8013c52:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8013c56:	eba3 0308 	sub.w	r3, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013c5a:	4353      	muls	r3, r2
 8013c5c:	9a01      	ldr	r2, [sp, #4]
 8013c5e:	eb03 3342 	add.w	r3, r3, r2, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8013c62:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 8013c64:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8013c68:	5cd3      	ldrb	r3, [r2, r3]
 8013c6a:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8013c6c:	9b04      	ldr	r3, [sp, #16]
 8013c6e:	454b      	cmp	r3, r9
 8013c70:	f47f af65 	bne.w	8013b3e <jpeg_idct_7x14+0x20e>
  }
}
 8013c74:	b06f      	add	sp, #444	; 0x1bc
 8013c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c7a:	bf00      	nop
 8013c7c:	ffffc8fc 	.word	0xffffc8fc
 8013c80:	ffffdbf0 	.word	0xffffdbf0
 8013c84:	ffffde0b 	.word	0xffffde0b
 8013c88:	fffff26e 	.word	0xfffff26e
 8013c8c:	ffffb409 	.word	0xffffb409
 8013c90:	ffffc9e6 	.word	0xffffc9e6
 8013c94:	ffffc515 	.word	0xffffc515
 8013c98:	ffffb0f1 	.word	0xffffb0f1
 8013c9c:	ffffd3e1 	.word	0xffffd3e1

08013ca0 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca4:	b0d3      	sub	sp, #332	; 0x14c
 8013ca6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013ca8:	f1a2 0902 	sub.w	r9, r2, #2
 8013cac:	9308      	str	r3, [sp, #32]
 8013cae:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013cb0:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013cb4:	3380      	adds	r3, #128	; 0x80
 8013cb6:	9300      	str	r3, [sp, #0]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013cb8:	f102 030a 	add.w	r3, r2, #10
 8013cbc:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8013cbe:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cc0:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013cc4:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cc6:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013cca:	f9b9 4060 	ldrsh.w	r4, [r9, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013cce:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cd2:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013cd4:	f9b9 2040 	ldrsh.w	r2, [r9, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013cd8:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    z3 <<= CONST_BITS;
 8013cdc:	037f      	lsls	r7, r7, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013cde:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013ce0:	f242 7031 	movw	r0, #10033	; 0x2731
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ce4:	f9b9 6020 	ldrsh.w	r6, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013ce8:	436c      	muls	r4, r5
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013cea:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013cec:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013cee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 <<= CONST_BITS;
 8013cf2:	0364      	lsls	r4, r4, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013cf4:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 8013cf6:	eb07 0c02 	add.w	ip, r7, r2
    tmp11 = z3 - z4;
 8013cfa:	eba7 0e02 	sub.w	lr, r7, r2

    tmp12 = z1 - z2;
 8013cfe:	ebc4 3546 	rsb	r5, r4, r6, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013d02:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 8013d06:	fb02 f006 	mul.w	r0, r2, r6

    tmp21 = z3 + tmp12;
 8013d0a:	197a      	adds	r2, r7, r5
 8013d0c:	9201      	str	r2, [sp, #4]
    tmp24 = z3 - tmp12;
 8013d0e:	1b7a      	subs	r2, r7, r5

    tmp12 = z4 + z2;
 8013d10:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 8013d12:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 8013d16:	9202      	str	r2, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013d18:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8013d1c:	eb0c 0205 	add.w	r2, ip, r5
    tmp12 = z4 - z1 - z2;
 8013d20:	1b00      	subs	r0, r0, r4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013d22:	4f87      	ldr	r7, [pc, #540]	; (8013f40 <jpeg_idct_6x12+0x2a0>)
    tmp20 = tmp10 + tmp12;
 8013d24:	9203      	str	r2, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8013d26:	ebac 0205 	sub.w	r2, ip, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013d2a:	f9b9 c010 	ldrsh.w	ip, [r9, #16]
    tmp25 = tmp10 - tmp12;
 8013d2e:	9204      	str	r2, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8013d30:	eb0e 0200 	add.w	r2, lr, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013d34:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    tmp22 = tmp11 + tmp12;
 8013d38:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 8013d3a:	ebae 0200 	sub.w	r2, lr, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013d3e:	f9b9 e030 	ldrsh.w	lr, [r9, #48]	; 0x30
    tmp23 = tmp11 - tmp12;
 8013d42:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013d44:	6a0a      	ldr	r2, [r1, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013d46:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013d4a:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013d4e:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8013d50:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013d54:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 8013d58:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013d5a:	f9b9 2070 	ldrsh.w	r2, [r9, #112]	; 0x70
    tmp10 = z1 + z3;
 8013d5e:	eb0c 0b05 	add.w	fp, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013d62:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013d64:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013d68:	eb02 080b 	add.w	r8, r2, fp
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013d6c:	fb00 f40e 	mul.w	r4, r0, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013d70:	4874      	ldr	r0, [pc, #464]	; (8013f44 <jpeg_idct_6x12+0x2a4>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013d72:	fb06 f808 	mul.w	r8, r6, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013d76:	f640 065b 	movw	r6, #2139	; 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013d7a:	fb00 f00e 	mul.w	r0, r0, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013d7e:	fb06 8b0b 	mla	fp, r6, fp, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013d82:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8013d86:	eb04 0a0b 	add.w	sl, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013d8a:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013d8e:	fb06 a60c 	mla	r6, r6, ip, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013d92:	eb05 0a02 	add.w	sl, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013d96:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013d98:	4e6b      	ldr	r6, [pc, #428]	; (8013f48 <jpeg_idct_6x12+0x2a8>)
 8013d9a:	fb06 fa0a 	mul.w	sl, r6, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013d9e:	eb00 060a 	add.w	r6, r0, sl
 8013da2:	fb07 6605 	mla	r6, r7, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013da6:	4f69      	ldr	r7, [pc, #420]	; (8013f4c <jpeg_idct_6x12+0x2ac>)
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8013da8:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013dac:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013db0:	445e      	add	r6, fp
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013db2:	fb07 000c 	mla	r0, r7, ip, r0
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013db6:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013dba:	4f65      	ldr	r7, [pc, #404]	; (8013f50 <jpeg_idct_6x12+0x2b0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013dbc:	fb0b 4402 	mla	r4, fp, r2, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013dc0:	fb07 0002 	mla	r0, r7, r2, r0
    z1 -= z4;
 8013dc4:	ebac 0202 	sub.w	r2, ip, r2
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013dc8:	4454      	add	r4, sl
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013dca:	eb02 0c05 	add.w	ip, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013dce:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013dd0:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013dd4:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8013dd8:	fb0e ce02 	mla	lr, lr, r2, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013ddc:	4a5d      	ldr	r2, [pc, #372]	; (8013f54 <jpeg_idct_6x12+0x2b4>)
 8013dde:	fb02 cc05 	mla	ip, r2, r5, ip

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013de2:	9d03      	ldr	r5, [sp, #12]
 8013de4:	9a07      	ldr	r2, [sp, #28]
 8013de6:	442a      	add	r2, r5
 8013de8:	12d2      	asrs	r2, r2, #11
 8013dea:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013dee:	9a07      	ldr	r2, [sp, #28]
 8013df0:	1aaf      	subs	r7, r5, r2
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013df2:	9a01      	ldr	r2, [sp, #4]
 8013df4:	4472      	add	r2, lr
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013df6:	12ff      	asrs	r7, r7, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013df8:	12d2      	asrs	r2, r2, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013dfa:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013dfe:	615a      	str	r2, [r3, #20]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013e00:	9a01      	ldr	r2, [sp, #4]
 8013e02:	eba2 020e 	sub.w	r2, r2, lr
 8013e06:	12d2      	asrs	r2, r2, #11
 8013e08:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013e0c:	9a05      	ldr	r2, [sp, #20]
 8013e0e:	4432      	add	r2, r6
 8013e10:	12d2      	asrs	r2, r2, #11
 8013e12:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013e14:	9a05      	ldr	r2, [sp, #20]
 8013e16:	1b92      	subs	r2, r2, r6
 8013e18:	12d2      	asrs	r2, r2, #11
 8013e1a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013e1e:	9a06      	ldr	r2, [sp, #24]
 8013e20:	4422      	add	r2, r4
 8013e22:	12d2      	asrs	r2, r2, #11
 8013e24:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013e26:	9a06      	ldr	r2, [sp, #24]
 8013e28:	1b12      	subs	r2, r2, r4
 8013e2a:	12d2      	asrs	r2, r2, #11
 8013e2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013e30:	9a02      	ldr	r2, [sp, #8]
 8013e32:	4462      	add	r2, ip
 8013e34:	12d2      	asrs	r2, r2, #11
 8013e36:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013e38:	9a02      	ldr	r2, [sp, #8]
 8013e3a:	eba2 020c 	sub.w	r2, r2, ip
 8013e3e:	12d2      	asrs	r2, r2, #11
 8013e40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013e44:	9a04      	ldr	r2, [sp, #16]
 8013e46:	4402      	add	r2, r0
 8013e48:	12d2      	asrs	r2, r2, #11
 8013e4a:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013e4c:	9a04      	ldr	r2, [sp, #16]
 8013e4e:	1a12      	subs	r2, r2, r0
 8013e50:	12d2      	asrs	r2, r2, #11
 8013e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e58:	454a      	cmp	r2, r9
 8013e5a:	f47f af31 	bne.w	8013cc0 <jpeg_idct_6x12+0x20>
 8013e5e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8013e60:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013e62:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 8013e66:	f1a3 0c04 	sub.w	ip, r3, #4
 8013e6a:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8013e6e:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    tmp11 = tmp10 + tmp20;
    tmp21 = tmp10 - tmp20 - tmp20;
    tmp20 = (INT32) wsptr[2];
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013e72:	f242 7431 	movw	r4, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8013e76:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013e78:	f640 37b6 	movw	r7, #2998	; 0xbb6
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013e7c:	690a      	ldr	r2, [r1, #16]
  for (ctr = 0; ctr < 12; ctr++) {
 8013e7e:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8013e80:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013e84:	680b      	ldr	r3, [r1, #0]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013e86:	fb0b f002 	mul.w	r0, fp, r2
    z3 = (INT32) wsptr[5];
 8013e8a:	f8d1 e014 	ldr.w	lr, [r1, #20]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013e8e:	f103 0310 	add.w	r3, r3, #16
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013e92:	f101 0118 	add.w	r1, r1, #24
    tmp11 = tmp10 + tmp20;
 8013e96:	eb00 3243 	add.w	r2, r0, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8013e9a:	ebc0 3343 	rsb	r3, r0, r3, lsl #13
 8013e9e:	eba3 0300 	sub.w	r3, r3, r0
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013ea2:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8013ea6:	fb04 f000 	mul.w	r0, r4, r0
    tmp21 = tmp10 - tmp20 - tmp20;
 8013eaa:	9301      	str	r3, [sp, #4]
    tmp20 = tmp11 + tmp10;
 8013eac:	eb02 0500 	add.w	r5, r2, r0
    tmp22 = tmp11 - tmp10;
 8013eb0:	eba2 0200 	sub.w	r2, r2, r0
    z1 = (INT32) wsptr[1];
 8013eb4:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013eb8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013ebc:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013ec0:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013ec4:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013ec8:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8013ecc:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8013ece:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ed2:	9b00      	ldr	r3, [sp, #0]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013ed4:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8013ed8:	eba0 000e 	sub.w	r0, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013edc:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ee0:	eb05 0e07 	add.w	lr, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013ee4:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8013ee8:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8013eec:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ef0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013ef4:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8013ef6:	f809 e003 	strb.w	lr, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013efa:	9b00      	ldr	r3, [sp, #0]
 8013efc:	5d5d      	ldrb	r5, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013efe:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013f00:	7175      	strb	r5, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013f02:	eb03 3540 	add.w	r5, r3, r0, lsl #13
 8013f06:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013f08:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013f0c:	5d5d      	ldrb	r5, [r3, r5]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013f0e:	9b01      	ldr	r3, [sp, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013f10:	7075      	strb	r5, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013f12:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
 8013f16:	9800      	ldr	r0, [sp, #0]
			    & RANGE_MASK];
 8013f18:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013f1c:	5cc3      	ldrb	r3, [r0, r3]
 8013f1e:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013f20:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013f24:	eba2 0204 	sub.w	r2, r2, r4
			    & RANGE_MASK];
 8013f28:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013f2c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013f30:	5cc3      	ldrb	r3, [r0, r3]
 8013f32:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013f34:	5c83      	ldrb	r3, [r0, r2]
 8013f36:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8013f38:	d199      	bne.n	8013e6e <jpeg_idct_6x12+0x1ce>
  }
}
 8013f3a:	b053      	add	sp, #332	; 0x14c
 8013f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f40:	ffffd0b0 	.word	0xffffd0b0
 8013f44:	ffffeeaf 	.word	0xffffeeaf
 8013f48:	ffffde8b 	.word	0xffffde8b
 8013f4c:	ffffea5c 	.word	0xffffea5c
 8013f50:	ffffc08c 	.word	0xffffc08c
 8013f54:	ffffc4df 	.word	0xffffc4df

08013f58 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5c:	b0b9      	sub	sp, #228	; 0xe4
 8013f5e:	1e94      	subs	r4, r2, #2
 8013f60:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013f62:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013f66:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013f68:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013f6a:	3380      	adds	r3, #128	; 0x80
 8013f6c:	3804      	subs	r0, #4
 8013f6e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013f70:	f102 0308 	add.w	r3, r2, #8
 8013f74:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f76:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013f7a:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f7c:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013f80:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f84:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013f86:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8013f8a:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013f8c:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8013f90:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013f92:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013f96:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013f9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013f9e:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013fa0:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 8013fa4:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8013fa6:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 8013fa8:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8013fac:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013fb0:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013fb4:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8013fb8:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013fba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013fbc:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013fbe:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8013fc2:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013fc4:	19f3      	adds	r3, r6, r7
 8013fc6:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013fc8:	f241 0271 	movw	r2, #4209	; 0x1071
 8013fcc:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8013fd0:	4a6e      	ldr	r2, [pc, #440]	; (801418c <jpeg_idct_5x10+0x234>)
 8013fd2:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 8013fd6:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8013fd8:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013fdc:	6e05      	ldr	r5, [r0, #96]	; 0x60
    tmp21 = tmp11 + tmp13;
 8013fde:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 8013fe2:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8013fe6:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8013fe8:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013fea:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8013fee:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013ff0:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ff4:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ff6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013ffa:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ffe:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014000:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 8014004:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014008:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 801400c:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801400e:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 8014012:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8014016:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014018:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801401c:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014020:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014024:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014026:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801402a:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 801402e:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014032:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014034:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014038:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801403a:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801403e:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014042:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014044:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014046:	f241 2acf 	movw	sl, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801404a:	eba3 030e 	sub.w	r3, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801404e:	f642 0e53 	movw	lr, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014052:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014056:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801405a:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801405e:	009b      	lsls	r3, r3, #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014060:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014064:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014068:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801406c:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014070:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014072:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014076:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801407a:	12ed      	asrs	r5, r5, #11
 801407c:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014080:	ea4f 25ec 	mov.w	r5, ip, asr #11
 8014084:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014088:	eb07 050e 	add.w	r5, r7, lr
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801408c:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014090:	12ed      	asrs	r5, r5, #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014092:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014094:	610d      	str	r5, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014096:	9d04      	ldr	r5, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014098:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801409c:	eb03 25e5 	add.w	r5, r3, r5, asr #11
 80140a0:	624d      	str	r5, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80140a2:	9d04      	ldr	r5, [sp, #16]
 80140a4:	ebc3 23e5 	rsb	r3, r3, r5, asr #11
 80140a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80140ac:	9b02      	ldr	r3, [sp, #8]
 80140ae:	4413      	add	r3, r2
 80140b0:	12db      	asrs	r3, r3, #11
 80140b2:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80140b4:	9b02      	ldr	r3, [sp, #8]
 80140b6:	1a9b      	subs	r3, r3, r2
 80140b8:	12db      	asrs	r3, r3, #11
 80140ba:	674b      	str	r3, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80140bc:	9b01      	ldr	r3, [sp, #4]
 80140be:	4433      	add	r3, r6
 80140c0:	12db      	asrs	r3, r3, #11
 80140c2:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80140c4:	9b01      	ldr	r3, [sp, #4]
 80140c6:	1b9b      	subs	r3, r3, r6
 80140c8:	12db      	asrs	r3, r3, #11
 80140ca:	660b      	str	r3, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80140cc:	9b05      	ldr	r3, [sp, #20]
 80140ce:	42a3      	cmp	r3, r4
 80140d0:	f47f af51 	bne.w	8013f76 <jpeg_idct_5x10+0x1e>
 80140d4:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 80140d6:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80140d8:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80140dc:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80140e0:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80140e4:	f641 289a 	movw	r8, #6810	; 0x1a9a
 80140e8:	3324      	adds	r3, #36	; 0x24
 80140ea:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 80140ec:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80140f0:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 80140f2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 80140f4:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80140f8:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 80140fc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014100:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014104:	1898      	adds	r0, r3, r2
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014106:	1a9b      	subs	r3, r3, r2
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014108:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 801410a:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801410e:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8014112:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014116:	fb0a f000 	mul.w	r0, sl, r0
    z3 = tmp12 + z2;
 801411a:	eb03 3247 	add.w	r2, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801411e:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014120:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8014124:	1884      	adds	r4, r0, r2
    tmp11 = z3 - z1;
 8014126:	1a12      	subs	r2, r2, r0
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014128:	eb05 000b 	add.w	r0, r5, fp
 801412c:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014130:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014134:	4b15      	ldr	r3, [pc, #84]	; (801418c <jpeg_idct_5x10+0x234>)
 8014136:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801413a:	eb04 0b05 	add.w	fp, r4, r5
 801413e:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014140:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8014142:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8014146:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801414a:	f813 b00b 	ldrb.w	fp, [r3, fp]
 801414e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014150:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014154:	9b00      	ldr	r3, [sp, #0]
 8014156:	5d1c      	ldrb	r4, [r3, r4]
 8014158:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801415a:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801415c:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 801415e:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8014162:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8014166:	5d1c      	ldrb	r4, [r3, r4]
 8014168:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801416a:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 801416c:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801416e:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014170:	009b      	lsls	r3, r3, #2
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014172:	9a00      	ldr	r2, [sp, #0]
    tmp12 -= z2 << 2;
 8014174:	ebc3 3347 	rsb	r3, r3, r7, lsl #13
			    & RANGE_MASK];
 8014178:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801417c:	5cd3      	ldrb	r3, [r2, r3]
 801417e:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014180:	9b02      	ldr	r3, [sp, #8]
 8014182:	4563      	cmp	r3, ip
 8014184:	d1b2      	bne.n	80140ec <jpeg_idct_5x10+0x194>
  }
}
 8014186:	b039      	add	sp, #228	; 0xe4
 8014188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801418c:	ffffba5c 	.word	0xffffba5c

08014190 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014194:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014196:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 8014198:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 801419a:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801419c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80141a0:	3380      	adds	r3, #128	; 0x80
 80141a2:	9302      	str	r3, [sp, #8]
  for (ctr = 4; ctr > 0; ctr--) {
 80141a4:	1e93      	subs	r3, r2, #2
 80141a6:	9301      	str	r3, [sp, #4]
 80141a8:	f105 0310 	add.w	r3, r5, #16
 80141ac:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80141ae:	9b01      	ldr	r3, [sp, #4]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80141b0:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80141b2:	f855 0b04 	ldr.w	r0, [r5], #4
 80141b6:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80141b8:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 80141bc:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80141c0:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 80141c4:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80141c8:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 80141cc:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80141d0:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80141d4:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80141d8:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80141da:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80141de:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80141e0:	ea4e 0000 	orr.w	r0, lr, r0
 80141e4:	4330      	orrs	r0, r6
 80141e6:	ea48 0000 	orr.w	r0, r8, r0
 80141ea:	4320      	orrs	r0, r4
 80141ec:	ea59 0000 	orrs.w	r0, r9, r0
 80141f0:	d155      	bne.n	801429e <jpeg_idct_4x8+0x10e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80141f2:	009b      	lsls	r3, r3, #2
      wsptr[4*0] = dcval;
 80141f4:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[4*1] = dcval;
 80141f8:	60cb      	str	r3, [r1, #12]
      wsptr[4*2] = dcval;
 80141fa:	61cb      	str	r3, [r1, #28]
      wsptr[4*3] = dcval;
 80141fc:	62cb      	str	r3, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 80141fe:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 8014200:	64cb      	str	r3, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 8014202:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014204:	66cb      	str	r3, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014206:	9b05      	ldr	r3, [sp, #20]
 8014208:	42ab      	cmp	r3, r5
 801420a:	d1d0      	bne.n	80141ae <jpeg_idct_4x8+0x1e>
 801420c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801420e:	a806      	add	r0, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014210:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014214:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014218:	1f1c      	subs	r4, r3, #4
 801421a:	f103 0b1c 	add.w	fp, r3, #28
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801421e:	f8df c174 	ldr.w	ip, [pc, #372]	; 8014394 <jpeg_idct_4x8+0x204>
    outptr = output_buf[ctr] + output_col;
 8014222:	f854 6f04 	ldr.w	r6, [r4, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014226:	3010      	adds	r0, #16
    outptr = output_buf[ctr] + output_col;
 8014228:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801422a:	f850 1c10 	ldr.w	r1, [r0, #-16]
  for (ctr = 0; ctr < 8; ctr++) {
 801422e:	45a3      	cmp	fp, r4
    outptr = output_buf[ctr] + output_col;
 8014230:	eb06 0503 	add.w	r5, r6, r3
    z3 = (INT32) wsptr[3];
 8014234:	f850 ac04 	ldr.w	sl, [r0, #-4]
    tmp2 = (INT32) wsptr[2];
 8014238:	f850 3c08 	ldr.w	r3, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801423c:	f101 0110 	add.w	r1, r1, #16
    z2 = (INT32) wsptr[1];
 8014240:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014244:	eb01 0903 	add.w	r9, r1, r3
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014248:	eba1 0103 	sub.w	r1, r1, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801424c:	eb02 030a 	add.w	r3, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014250:	9f02      	ldr	r7, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014252:	fb08 f303 	mul.w	r3, r8, r3
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014256:	fb0e 3202 	mla	r2, lr, r2, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801425a:	fb0c 330a 	mla	r3, ip, sl, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801425e:	eb02 3a49 	add.w	sl, r2, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014262:	ebc2 3249 	rsb	r2, r2, r9, lsl #13
			    & RANGE_MASK];
 8014266:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 801426a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801426e:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8014272:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8014274:	f806 a007 	strb.w	sl, [r6, r7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014278:	9e02      	ldr	r6, [sp, #8]
 801427a:	5cb2      	ldrb	r2, [r6, r2]
 801427c:	70ea      	strb	r2, [r5, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801427e:	eb03 3241 	add.w	r2, r3, r1, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014282:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
			    & RANGE_MASK];
 8014286:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801428a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801428e:	5cb2      	ldrb	r2, [r6, r2]
 8014290:	706a      	strb	r2, [r5, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014292:	5cf3      	ldrb	r3, [r6, r3]
 8014294:	70ab      	strb	r3, [r5, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8014296:	d1c4      	bne.n	8014222 <jpeg_idct_4x8+0x92>
  }
}
 8014298:	b027      	add	sp, #156	; 0x9c
 801429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801429e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80142a0:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 80142a4:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142a6:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80142a8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80142ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80142b0:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80142b2:	183c      	adds	r4, r7, r0
 80142b4:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80142b6:	f641 027e 	movw	r2, #6270	; 0x187e
 80142ba:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80142be:	4a35      	ldr	r2, [pc, #212]	; (8014394 <jpeg_idct_4x8+0x204>)
 80142c0:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142c4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80142c6:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 80142c8:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 80142cc:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 80142d0:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 80142d4:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80142d6:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 80142da:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 80142dc:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80142de:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80142e0:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80142e4:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80142e8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80142ec:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80142f0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 80142f2:	9203      	str	r2, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80142f4:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80142f8:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 80142fc:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8014300:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014304:	1930      	adds	r0, r6, r4
 8014306:	4350      	muls	r0, r2
    z2 += z1;
 8014308:	4a23      	ldr	r2, [pc, #140]	; (8014398 <jpeg_idct_4x8+0x208>)
 801430a:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 801430e:	4a23      	ldr	r2, [pc, #140]	; (801439c <jpeg_idct_4x8+0x20c>)
 8014310:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014314:	eb09 040a 	add.w	r4, r9, sl
 8014318:	4a21      	ldr	r2, [pc, #132]	; (80143a0 <jpeg_idct_4x8+0x210>)
 801431a:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 801431c:	f640 128e 	movw	r2, #2446	; 0x98e
 8014320:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8014324:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8014326:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 801432a:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801432e:	4a1d      	ldr	r2, [pc, #116]	; (80143a4 <jpeg_idct_4x8+0x214>)
    tmp3 += z1 + z3;
 8014330:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014334:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8014338:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801433c:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8014340:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8014342:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014344:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8014348:	f246 2854 	movw	r8, #25172	; 0x6254
 801434c:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014350:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014354:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014358:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801435a:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801435e:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014362:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014364:	eb07 040e 	add.w	r4, r7, lr
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014368:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801436c:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801436e:	12ff      	asrs	r7, r7, #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014370:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014372:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014374:	1a1b      	subs	r3, r3, r0
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014376:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014378:	12e4      	asrs	r4, r4, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801437a:	12db      	asrs	r3, r3, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801437c:	61cc      	str	r4, [r1, #28]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801437e:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014380:	9b03      	ldr	r3, [sp, #12]
 8014382:	444b      	add	r3, r9
 8014384:	12db      	asrs	r3, r3, #11
 8014386:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8014388:	9b03      	ldr	r3, [sp, #12]
 801438a:	eba3 0309 	sub.w	r3, r3, r9
 801438e:	12db      	asrs	r3, r3, #11
 8014390:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8014392:	e738      	b.n	8014206 <jpeg_idct_4x8+0x76>
 8014394:	ffffc4df 	.word	0xffffc4df
 8014398:	ffffc13b 	.word	0xffffc13b
 801439c:	fffff384 	.word	0xfffff384
 80143a0:	ffffe333 	.word	0xffffe333
 80143a4:	ffffadfd 	.word	0xffffadfd

080143a8 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80143a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80143ac:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80143b0:	b095      	sub	sp, #84	; 0x54
 80143b2:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80143b4:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80143b6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80143ba:	3204      	adds	r2, #4
 80143bc:	3c04      	subs	r4, #4
  wsptr = workspace;
 80143be:	ae02      	add	r6, sp, #8
{
 80143c0:	9300      	str	r3, [sp, #0]
 80143c2:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143c4:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80143c8:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143cc:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80143d0:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80143d2:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143d6:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80143d8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80143dc:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80143e0:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 80143e2:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80143e4:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80143e8:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80143ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80143f0:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80143f4:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 80143f6:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80143f8:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80143fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80143fe:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014400:	f242 7731 	movw	r7, #10033	; 0x2731
 8014404:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014406:	6a27      	ldr	r7, [r4, #32]
    tmp10 = tmp1 + tmp0;
 8014408:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 801440c:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801440e:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8014412:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014414:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8014416:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801441a:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 801441e:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014422:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014426:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801442a:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801442e:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014432:	435f      	muls	r7, r3
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014434:	eba2 0208 	sub.w	r2, r2, r8
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014438:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801443a:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801443e:	0092      	lsls	r2, r2, #2
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014440:	42ab      	cmp	r3, r5

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014442:	eb0c 080a 	add.w	r8, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014446:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801444a:	eb07 374b 	add.w	r7, r7, fp, lsl #13
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801444e:	ea4f 2cec 	mov.w	ip, ip, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014452:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014456:	f8c6 c038 	str.w	ip, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 801445a:	eb02 2ce1 	add.w	ip, r2, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 801445e:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014462:	f846 8c04 	str.w	r8, [r6, #-4]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014466:	f8c6 c008 	str.w	ip, [r6, #8]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 801446a:	62f2      	str	r2, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801446c:	eb00 0207 	add.w	r2, r0, r7
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014470:	eba0 0007 	sub.w	r0, r0, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014474:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014478:	ea4f 20e0 	mov.w	r0, r0, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801447c:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801447e:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014480:	d1a0      	bne.n	80143c4 <jpeg_idct_3x6+0x1c>
 8014482:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8014484:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014486:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801448a:	f242 7b31 	movw	fp, #10033	; 0x2731
 801448e:	1f1d      	subs	r5, r3, #4
 8014490:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8014492:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8014496:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8014498:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801449a:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 801449e:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 80144a0:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80144a4:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80144a8:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80144ac:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80144b0:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80144b4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80144b6:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 80144ba:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 80144be:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80144c2:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80144c6:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 80144ca:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 80144ce:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80144d2:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 80144d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80144da:	f81e a00a 	ldrb.w	sl, [lr, sl]
 80144de:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80144e2:	f81e 4008 	ldrb.w	r4, [lr, r8]
 80144e6:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 80144e8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80144ec:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 80144ee:	d1d0      	bne.n	8014492 <jpeg_idct_3x6+0xea>
  }
}
 80144f0:	b015      	add	sp, #84	; 0x54
 80144f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080144f8 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80144f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80144fc:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014500:	b08b      	sub	sp, #44	; 0x2c
 8014502:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014504:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014506:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801450a:	ad02      	add	r5, sp, #8
 801450c:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801450e:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014512:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014516:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014518:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801451c:	46b4      	mov	ip, r6
 801451e:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014522:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014524:	4f29      	ldr	r7, [pc, #164]	; (80145cc <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014526:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014528:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801452c:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8014530:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014532:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014536:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801453a:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801453e:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014542:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014546:	6a21      	ldr	r1, [r4, #32]
 8014548:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801454c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801454e:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014552:	eb0a 010b 	add.w	r1, sl, fp
 8014556:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801455a:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801455e:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8014562:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014566:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 801456a:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 801456e:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8014572:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014576:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 801457a:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 801457e:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014580:	d1ca      	bne.n	8014518 <jpeg_idct_2x4+0x20>
 8014582:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8014584:	a902      	add	r1, sp, #8
 8014586:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014588:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 801458c:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 801458e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8014590:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014594:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 8014596:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801459a:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801459e:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80145a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80145a4:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80145a8:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 80145ac:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 80145b0:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80145b4:	5d3c      	ldrb	r4, [r7, r4]
 80145b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80145b8:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80145ba:	9c01      	ldr	r4, [sp, #4]
 80145bc:	5ca2      	ldrb	r2, [r4, r2]
 80145be:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 80145c2:	d1e1      	bne.n	8014588 <jpeg_idct_2x4+0x90>
  }
}
 80145c4:	b00b      	add	sp, #44	; 0x2c
 80145c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ca:	bf00      	nop
 80145cc:	ffffc4df 	.word	0xffffc4df

080145d0 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80145d0:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80145d2:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80145d4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80145d8:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145da:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80145de:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80145e0:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80145e2:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145e6:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 80145e8:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80145ea:	3080      	adds	r0, #128	; 0x80
{
 80145ec:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 80145ee:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 80145f0:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 80145f2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 80145f6:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 80145fa:	5d06      	ldrb	r6, [r0, r4]
 80145fc:	681c      	ldr	r4, [r3, #0]
 80145fe:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014600:	5c42      	ldrb	r2, [r0, r1]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	555a      	strb	r2, [r3, r5]
}
 8014606:	bd70      	pop	{r4, r5, r6, pc}

08014608 <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8014608:	6803      	ldr	r3, [r0, #0]
 801460a:	2238      	movs	r2, #56	; 0x38
 801460c:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	4718      	bx	r3

08014614 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014614:	688b      	ldr	r3, [r1, #8]
{
 8014616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801461a:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 801461e:	698b      	ldr	r3, [r1, #24]
{
 8014620:	b085      	sub	sp, #20
 8014622:	4681      	mov	r9, r0
 8014624:	460c      	mov	r4, r1
 8014626:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8014628:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801462c:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801462e:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014632:	6922      	ldr	r2, [r4, #16]
 8014634:	42b2      	cmp	r2, r6
 8014636:	dc02      	bgt.n	801463e <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8014638:	b005      	add	sp, #20
 801463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801463e:	1b92      	subs	r2, r2, r6
 8014640:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8014642:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014644:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014646:	6865      	ldr	r5, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8014648:	4430      	add	r0, r6
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801464a:	bfa8      	it	ge
 801464c:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801464e:	69e1      	ldr	r1, [r4, #28]
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014650:	1a2d      	subs	r5, r5, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014652:	1a09      	subs	r1, r1, r0
 8014654:	4291      	cmp	r1, r2
 8014656:	bfa8      	it	ge
 8014658:	4611      	movge	r1, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801465a:	428d      	cmp	r5, r1
 801465c:	bfa8      	it	ge
 801465e:	460d      	movge	r5, r1
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014660:	2d00      	cmp	r5, #0
 8014662:	dde9      	ble.n	8014638 <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 8014664:	fb05 f308 	mul.w	r3, r5, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014668:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 801466a:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801466c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8014670:	f1ba 0f00 	cmp.w	sl, #0
 8014674:	d00a      	beq.n	801468c <do_barray_io+0x78>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014676:	9300      	str	r3, [sp, #0]
 8014678:	4659      	mov	r1, fp
 801467a:	463b      	mov	r3, r7
 801467c:	4648      	mov	r0, r9
 801467e:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014680:	47a8      	blx	r5
    file_offset += byte_count;
 8014682:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014684:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014686:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014688:	4416      	add	r6, r2
 801468a:	e7d2      	b.n	8014632 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801468c:	9b03      	ldr	r3, [sp, #12]
 801468e:	4659      	mov	r1, fp
 8014690:	4648      	mov	r0, r9
 8014692:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014694:	9300      	str	r3, [sp, #0]
 8014696:	463b      	mov	r3, r7
 8014698:	e7f2      	b.n	8014680 <do_barray_io+0x6c>
	...

0801469c <alloc_small>:
{
 801469c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80146a0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80146a4:	4606      	mov	r6, r0
 80146a6:	460d      	mov	r5, r1
 80146a8:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80146aa:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80146ac:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80146ae:	d902      	bls.n	80146b6 <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 80146b0:	2101      	movs	r1, #1
 80146b2:	f7ff ffa9 	bl	8014608 <out_of_memory>
  if (odd_bytes > 0)
 80146b6:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80146ba:	bf1c      	itt	ne
 80146bc:	3408      	addne	r4, #8
 80146be:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80146c0:	2d01      	cmp	r5, #1
 80146c2:	d906      	bls.n	80146d2 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80146c4:	6833      	ldr	r3, [r6, #0]
 80146c6:	220f      	movs	r2, #15
 80146c8:	4630      	mov	r0, r6
 80146ca:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 80146d2:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 80146d6:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 80146da:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 80146de:	b9e8      	cbnz	r0, 801471c <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 80146e0:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80146e4:	f1ba 0f00 	cmp.w	sl, #0
 80146e8:	d11e      	bne.n	8014728 <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 80146ea:	4b1d      	ldr	r3, [pc, #116]	; (8014760 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 80146ec:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 80146f0:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 80146f4:	429d      	cmp	r5, r3
 80146f6:	bf28      	it	cs
 80146f8:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 80146fa:	eb05 0b09 	add.w	fp, r5, r9
 80146fe:	4630      	mov	r0, r6
 8014700:	4659      	mov	r1, fp
 8014702:	f000 fbd1 	bl	8014ea8 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8014706:	b988      	cbnz	r0, 801472c <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014708:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 801470a:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 801470e:	d803      	bhi.n	8014718 <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8014710:	2102      	movs	r1, #2
 8014712:	4630      	mov	r0, r6
 8014714:	f7ff ff78 	bl	8014608 <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8014718:	465d      	mov	r5, fp
 801471a:	e7ee      	b.n	80146fa <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 801471c:	6883      	ldr	r3, [r0, #8]
 801471e:	42a3      	cmp	r3, r4
 8014720:	d211      	bcs.n	8014746 <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8014722:	4682      	mov	sl, r0
 8014724:	6800      	ldr	r0, [r0, #0]
 8014726:	e7da      	b.n	80146de <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8014728:	4b0e      	ldr	r3, [pc, #56]	; (8014764 <alloc_small+0xc8>)
 801472a:	e7df      	b.n	80146ec <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 801472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 801472e:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8014730:	445b      	add	r3, fp
 8014732:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8014734:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014736:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8014738:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 801473c:	f1ba 0f00 	cmp.w	sl, #0
 8014740:	d10b      	bne.n	801475a <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8014742:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014746:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014748:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801474a:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 801474c:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 801474e:	6882      	ldr	r2, [r0, #8]
 8014750:	1b12      	subs	r2, r2, r4
 8014752:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014754:	4418      	add	r0, r3
}
 8014756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 801475a:	f8ca 0000 	str.w	r0, [sl]
 801475e:	e7f2      	b.n	8014746 <alloc_small+0xaa>
 8014760:	0802e574 	.word	0x0802e574
 8014764:	0802e56c 	.word	0x0802e56c

08014768 <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8014768:	2901      	cmp	r1, #1
{
 801476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801476e:	4604      	mov	r4, r0
 8014770:	460d      	mov	r5, r1
 8014772:	4616      	mov	r6, r2
 8014774:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014776:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 801477a:	d005      	beq.n	8014788 <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801477c:	6803      	ldr	r3, [r0, #0]
 801477e:	220f      	movs	r2, #15
 8014780:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8014788:	223c      	movs	r2, #60	; 0x3c
 801478a:	4629      	mov	r1, r5
 801478c:	4620      	mov	r0, r4
 801478e:	f7ff ff85 	bl	801469c <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014792:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8014794:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014796:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8014798:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801479a:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 801479e:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 80147a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 80147a2:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 80147a6:	9a07      	ldr	r2, [sp, #28]
 80147a8:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 80147aa:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 80147ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147b2 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 80147b2:	2901      	cmp	r1, #1
{
 80147b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147b8:	4604      	mov	r4, r0
 80147ba:	460d      	mov	r5, r1
 80147bc:	4616      	mov	r6, r2
 80147be:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80147c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 80147c4:	d005      	beq.n	80147d2 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80147c6:	6803      	ldr	r3, [r0, #0]
 80147c8:	220f      	movs	r2, #15
 80147ca:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 80147d2:	223c      	movs	r2, #60	; 0x3c
 80147d4:	4629      	mov	r1, r5
 80147d6:	4620      	mov	r0, r4
 80147d8:	f7ff ff60 	bl	801469c <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80147dc:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 80147de:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80147e0:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 80147e2:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 80147e4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 80147e8:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 80147ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 80147ec:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 80147f0:	9a07      	ldr	r2, [sp, #28]
 80147f2:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 80147f4:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 80147f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147fc <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80147fc:	2901      	cmp	r1, #1
{
 80147fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014802:	4606      	mov	r6, r0
 8014804:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014806:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014808:	d910      	bls.n	801482c <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801480a:	6803      	ldr	r3, [r0, #0]
 801480c:	220f      	movs	r2, #15
 801480e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8014816:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 801481a:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 801481c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 801481e:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8014820:	bb0b      	cbnz	r3, 8014866 <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8014822:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8014824:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 8014826:	bb69      	cbnz	r1, 8014884 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8014828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 801482c:	d1f3      	bne.n	8014816 <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801482e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014830:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014832:	b924      	cbnz	r4, 801483e <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014834:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 8014836:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014838:	b95f      	cbnz	r7, 8014852 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 801483a:	64af      	str	r7, [r5, #72]	; 0x48
 801483c:	e7eb      	b.n	8014816 <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 801483e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014840:	b12b      	cbz	r3, 801484e <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014844:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014848:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 801484a:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 801484c:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801484e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014850:	e7ef      	b.n	8014832 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8014852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014854:	b12b      	cbz	r3, 8014862 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014858:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801485c:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 801485e:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014860:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014862:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8014864:	e7e8      	b.n	8014838 <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014866:	e9d3 8700 	ldrd	r8, r7, [r3]
 801486a:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 801486c:	4619      	mov	r1, r3
 801486e:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014870:	4417      	add	r7, r2
 8014872:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014874:	463a      	mov	r2, r7
 8014876:	f000 fb20 	bl	8014eba <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 801487a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801487c:	1bdb      	subs	r3, r3, r7
 801487e:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8014880:	4643      	mov	r3, r8
 8014882:	e7cd      	b.n	8014820 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8014884:	688b      	ldr	r3, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014886:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8014888:	e9d1 7400 	ldrd	r7, r4, [r1]
 801488c:	441c      	add	r4, r3
 801488e:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014890:	4622      	mov	r2, r4
 8014892:	f000 fb0c 	bl	8014eae <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8014896:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8014898:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 801489a:	1b1b      	subs	r3, r3, r4
 801489c:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 801489e:	e7c2      	b.n	8014826 <free_pool+0x2a>

080148a0 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 80148a0:	b510      	push	{r4, lr}
 80148a2:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 80148a4:	2101      	movs	r1, #1
 80148a6:	f7ff ffa9 	bl	80147fc <free_pool>
 80148aa:	2100      	movs	r1, #0
 80148ac:	4620      	mov	r0, r4
 80148ae:	f7ff ffa5 	bl	80147fc <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 80148b2:	4620      	mov	r0, r4
 80148b4:	6861      	ldr	r1, [r4, #4]
 80148b6:	2254      	movs	r2, #84	; 0x54
 80148b8:	f000 faf9 	bl	8014eae <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80148bc:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80148be:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80148c0:	6063      	str	r3, [r4, #4]
}
 80148c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80148c6:	f000 bb04 	b.w	8014ed2 <jpeg_mem_term>

080148ca <access_virt_barray>:
{
 80148ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 80148ce:	18d7      	adds	r7, r2, r3
{
 80148d0:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80148d2:	684a      	ldr	r2, [r1, #4]
{
 80148d4:	460c      	mov	r4, r1
 80148d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80148da:	42ba      	cmp	r2, r7
 80148dc:	d304      	bcc.n	80148e8 <access_virt_barray+0x1e>
 80148de:	68ca      	ldr	r2, [r1, #12]
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d301      	bcc.n	80148e8 <access_virt_barray+0x1e>
 80148e4:	680b      	ldr	r3, [r1, #0]
 80148e6:	b933      	cbnz	r3, 80148f6 <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80148e8:	6803      	ldr	r3, [r0, #0]
 80148ea:	2217      	movs	r2, #23
 80148ec:	9001      	str	r0, [sp, #4]
 80148ee:	615a      	str	r2, [r3, #20]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	4798      	blx	r3
 80148f4:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 80148f6:	69a3      	ldr	r3, [r4, #24]
 80148f8:	42ab      	cmp	r3, r5
 80148fa:	d803      	bhi.n	8014904 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80148fc:	6922      	ldr	r2, [r4, #16]
 80148fe:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014900:	42bb      	cmp	r3, r7
 8014902:	d221      	bcs.n	8014948 <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8014904:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014906:	b933      	cbnz	r3, 8014916 <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8014908:	6803      	ldr	r3, [r0, #0]
 801490a:	2247      	movs	r2, #71	; 0x47
 801490c:	9001      	str	r0, [sp, #4]
 801490e:	615a      	str	r2, [r3, #20]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	4798      	blx	r3
 8014914:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 8014916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014918:	b13b      	cbz	r3, 801492a <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 801491a:	2201      	movs	r2, #1
 801491c:	4621      	mov	r1, r4
 801491e:	9001      	str	r0, [sp, #4]
 8014920:	f7ff fe78 	bl	8014614 <do_barray_io>
      ptr->dirty = FALSE;
 8014924:	2300      	movs	r3, #0
 8014926:	9801      	ldr	r0, [sp, #4]
 8014928:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 801492a:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 801492c:	2200      	movs	r2, #0
 801492e:	4621      	mov	r1, r4
 8014930:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8014932:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014934:	bf29      	itett	cs
 8014936:	6923      	ldrcs	r3, [r4, #16]
 8014938:	462b      	movcc	r3, r5
 801493a:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 801493c:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8014940:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8014942:	f7ff fe67 	bl	8014614 <do_barray_io>
 8014946:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8014948:	69e6      	ldr	r6, [r4, #28]
 801494a:	42be      	cmp	r6, r7
 801494c:	d21c      	bcs.n	8014988 <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 801494e:	42ae      	cmp	r6, r5
 8014950:	d20c      	bcs.n	801496c <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8014952:	f1b8 0f00 	cmp.w	r8, #0
 8014956:	d01b      	beq.n	8014990 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014958:	6803      	ldr	r3, [r0, #0]
 801495a:	2217      	movs	r2, #23
 801495c:	9001      	str	r0, [sp, #4]
 801495e:	462e      	mov	r6, r5
 8014960:	615a      	str	r2, [r3, #20]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	4798      	blx	r3
    if (writable)
 8014966:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8014968:	61e7      	str	r7, [r4, #28]
 801496a:	e002      	b.n	8014972 <access_virt_barray+0xa8>
    if (writable)
 801496c:	f1b8 0f00 	cmp.w	r8, #0
 8014970:	d1fa      	bne.n	8014968 <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8014972:	6a22      	ldr	r2, [r4, #32]
 8014974:	b1b2      	cbz	r2, 80149a4 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014976:	68a2      	ldr	r2, [r4, #8]
 8014978:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801497c:	69a2      	ldr	r2, [r4, #24]
 801497e:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8014980:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8014982:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014984:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8014986:	d305      	bcc.n	8014994 <access_virt_barray+0xca>
  if (writable)
 8014988:	f1b8 0f00 	cmp.w	r8, #0
 801498c:	d10d      	bne.n	80149aa <access_virt_barray+0xe0>
 801498e:	e00e      	b.n	80149ae <access_virt_barray+0xe4>
 8014990:	462e      	mov	r6, r5
 8014992:	e7ee      	b.n	8014972 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014994:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014998:	464a      	mov	r2, r9
 801499a:	2100      	movs	r1, #0
	undef_row++;
 801499c:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801499e:	f015 f8fb 	bl	8029b98 <memset>
	undef_row++;
 80149a2:	e7ee      	b.n	8014982 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 80149a4:	f1b8 0f00 	cmp.w	r8, #0
 80149a8:	d009      	beq.n	80149be <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 80149aa:	2301      	movs	r3, #1
 80149ac:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80149ae:	69a3      	ldr	r3, [r4, #24]
 80149b0:	6820      	ldr	r0, [r4, #0]
 80149b2:	1aed      	subs	r5, r5, r3
}
 80149b4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80149b8:	b003      	add	sp, #12
 80149ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80149be:	6803      	ldr	r3, [r0, #0]
 80149c0:	2217      	movs	r2, #23
 80149c2:	615a      	str	r2, [r3, #20]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	4798      	blx	r3
  if (writable)
 80149c8:	e7f1      	b.n	80149ae <access_virt_barray+0xe4>

080149ca <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80149ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80149ce:	429a      	cmp	r2, r3
{
 80149d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d4:	4606      	mov	r6, r0
 80149d6:	4688      	mov	r8, r1
 80149d8:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80149da:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80149dc:	d902      	bls.n	80149e4 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 80149de:	2103      	movs	r1, #3
 80149e0:	f7ff fe12 	bl	8014608 <out_of_memory>
  if (odd_bytes > 0)
 80149e4:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80149e8:	bf1c      	itt	ne
 80149ea:	3408      	addne	r4, #8
 80149ec:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80149ee:	f1b8 0f01 	cmp.w	r8, #1
 80149f2:	d906      	bls.n	8014a02 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80149f4:	6833      	ldr	r3, [r6, #0]
 80149f6:	220f      	movs	r2, #15
 80149f8:	4630      	mov	r0, r6
 80149fa:	e9c3 2805 	strd	r2, r8, [r3, #20]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8014a02:	f104 0110 	add.w	r1, r4, #16
 8014a06:	4630      	mov	r0, r6
 8014a08:	f000 fa54 	bl	8014eb4 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	b918      	cbnz	r0, 8014a18 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8014a10:	2104      	movs	r1, #4
 8014a12:	4630      	mov	r0, r6
 8014a14:	f7ff fdf8 	bl	8014608 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a1a:	eb07 0188 	add.w	r1, r7, r8, lsl #2
}
 8014a1e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014a22:	3310      	adds	r3, #16
 8014a24:	4423      	add	r3, r4
 8014a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8014a28:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8014a2a:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8014a32:	63cd      	str	r5, [r1, #60]	; 0x3c
}
 8014a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a38 <alloc_barray>:
{
 8014a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8014a3c:	01d7      	lsls	r7, r2, #7
{
 8014a3e:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014a40:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014a44:	4680      	mov	r8, r0
 8014a46:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014a48:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8014a4a:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014a4c:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8014a50:	d904      	bls.n	8014a5c <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8014a52:	6803      	ldr	r3, [r0, #0]
 8014a54:	2248      	movs	r2, #72	; 0x48
 8014a56:	615a      	str	r2, [r3, #20]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8014a5c:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014a5e:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8014a62:	4651      	mov	r1, sl
 8014a64:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8014a66:	bfa8      	it	ge
 8014a68:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8014a6a:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8014a6c:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014a6e:	f7ff fe15 	bl	801469c <alloc_small>
 8014a72:	4681      	mov	r9, r0
  while (currow < numrows) {
 8014a74:	42ae      	cmp	r6, r5
 8014a76:	d302      	bcc.n	8014a7e <alloc_barray+0x46>
}
 8014a78:	4648      	mov	r0, r9
 8014a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014a7e:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8014a80:	4651      	mov	r1, sl
 8014a82:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014a84:	429c      	cmp	r4, r3
 8014a86:	bf28      	it	cs
 8014a88:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8014a8a:	fb04 f207 	mul.w	r2, r4, r7
 8014a8e:	f7ff ff9c 	bl	80149ca <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8014a92:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8014a96:	4426      	add	r6, r4
 8014a98:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	d0e9      	beq.n	8014a74 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8014aa0:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8014aa4:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8014aa6:	e7f9      	b.n	8014a9c <alloc_barray+0x64>

08014aa8 <alloc_sarray>:
{
 8014aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014aac:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014aae:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014ab2:	4607      	mov	r7, r0
 8014ab4:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8014ab6:	429a      	cmp	r2, r3
{
 8014ab8:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014aba:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014abc:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8014ac0:	d904      	bls.n	8014acc <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8014ac2:	6803      	ldr	r3, [r0, #0]
 8014ac4:	2248      	movs	r2, #72	; 0x48
 8014ac6:	615a      	str	r2, [r3, #20]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8014acc:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8014ace:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8014ad2:	4651      	mov	r1, sl
 8014ad4:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8014ad6:	bfa8      	it	ge
 8014ad8:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8014ada:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8014adc:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8014ade:	f7ff fddd 	bl	801469c <alloc_small>
 8014ae2:	4681      	mov	r9, r0
  while (currow < numrows) {
 8014ae4:	42ae      	cmp	r6, r5
 8014ae6:	d302      	bcc.n	8014aee <alloc_sarray+0x46>
}
 8014ae8:	4648      	mov	r0, r9
 8014aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014aee:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8014af0:	4651      	mov	r1, sl
 8014af2:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014af4:	429c      	cmp	r4, r3
 8014af6:	bf28      	it	cs
 8014af8:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8014afa:	fb04 f208 	mul.w	r2, r4, r8
 8014afe:	f7ff ff64 	bl	80149ca <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8014b02:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8014b06:	4426      	add	r6, r4
 8014b08:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8014b0c:	4293      	cmp	r3, r2
 8014b0e:	d0e9      	beq.n	8014ae4 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8014b10:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8014b14:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8014b16:	e7f9      	b.n	8014b0c <alloc_sarray+0x64>

08014b18 <realize_virt_arrays>:
{
 8014b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014b1c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8014b20:	2500      	movs	r5, #0
{
 8014b22:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014b24:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8014b28:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014b2a:	bb03      	cbnz	r3, 8014b6e <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014b2c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8014b30:	bb43      	cbnz	r3, 8014b84 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8014b32:	2e00      	cmp	r6, #0
 8014b34:	dd19      	ble.n	8014b6a <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8014b36:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8014b3a:	462a      	mov	r2, r5
 8014b3c:	4631      	mov	r1, r6
 8014b3e:	4638      	mov	r0, r7
 8014b40:	f000 f9be 	bl	8014ec0 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8014b44:	4285      	cmp	r5, r0
 8014b46:	dd2a      	ble.n	8014b9e <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8014b48:	fb90 f6f6 	sdiv	r6, r0, r6
 8014b4c:	2e01      	cmp	r6, #1
 8014b4e:	bfb8      	it	lt
 8014b50:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014b52:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014b56:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8014b5a:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014b5c:	bb0c      	cbnz	r4, 8014ba2 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014b5e:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014b62:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014b66:	2d00      	cmp	r5, #0
 8014b68:	d141      	bne.n	8014bee <realize_virt_arrays+0xd6>
}
 8014b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8014b6e:	681a      	ldr	r2, [r3, #0]
 8014b70:	b932      	cbnz	r2, 8014b80 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8014b72:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8014b76:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8014b7a:	6859      	ldr	r1, [r3, #4]
 8014b7c:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b82:	e7d2      	b.n	8014b2a <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	b942      	cbnz	r2, 8014b9a <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 8014b88:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8014b8c:	4351      	muls	r1, r2
 8014b8e:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8014b92:	6859      	ldr	r1, [r3, #4]
 8014b94:	434a      	muls	r2, r1
 8014b96:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b9c:	e7c8      	b.n	8014b30 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8014b9e:	4e27      	ldr	r6, [pc, #156]	; (8014c3c <realize_virt_arrays+0x124>)
 8014ba0:	e7d7      	b.n	8014b52 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8014ba2:	6823      	ldr	r3, [r4, #0]
 8014ba4:	b9b3      	cbnz	r3, 8014bd4 <realize_virt_arrays+0xbc>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8014ba6:	6862      	ldr	r2, [r4, #4]
				(long) sptr->samplesperrow *
 8014ba8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8014bac:	1e53      	subs	r3, r2, #1
 8014bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8014bb2:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8014bb4:	429e      	cmp	r6, r3
 8014bb6:	db0f      	blt.n	8014bd8 <realize_virt_arrays+0xc0>
	sptr->rows_in_mem = sptr->rows_in_array;
 8014bb8:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014bba:	6923      	ldr	r3, [r4, #16]
 8014bbc:	2101      	movs	r1, #1
 8014bbe:	68a2      	ldr	r2, [r4, #8]
 8014bc0:	4638      	mov	r0, r7
 8014bc2:	f7ff ff71 	bl	8014aa8 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8014bc6:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014bca:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8014bcc:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8014bce:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8014bd0:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014bd4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014bd6:	e7c1      	b.n	8014b5c <realize_virt_arrays+0x44>
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8014bd8:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8014bda:	4342      	muls	r2, r0
 8014bdc:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8014bde:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8014be0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014be4:	f000 f96e 	bl	8014ec4 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8014be8:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8014bec:	e7e5      	b.n	8014bba <realize_virt_arrays+0xa2>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8014bee:	682b      	ldr	r3, [r5, #0]
 8014bf0:	b9b3      	cbnz	r3, 8014c20 <realize_virt_arrays+0x108>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8014bf2:	6868      	ldr	r0, [r5, #4]
				(long) bptr->blocksperrow *
 8014bf4:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8014bf8:	1e43      	subs	r3, r0, #1
 8014bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8014bfe:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8014c00:	429e      	cmp	r6, r3
 8014c02:	db0f      	blt.n	8014c24 <realize_virt_arrays+0x10c>
	bptr->rows_in_mem = bptr->rows_in_array;
 8014c04:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014c06:	692b      	ldr	r3, [r5, #16]
 8014c08:	2101      	movs	r1, #1
 8014c0a:	68aa      	ldr	r2, [r5, #8]
 8014c0c:	4638      	mov	r0, r7
 8014c0e:	f7ff ff13 	bl	8014a38 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8014c12:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014c16:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8014c18:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8014c1a:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8014c1c:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014c20:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8014c22:	e7a0      	b.n	8014b66 <realize_virt_arrays+0x4e>
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014c24:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 8014c26:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014c28:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014c2a:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014c2c:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8014c30:	01d2      	lsls	r2, r2, #7
 8014c32:	f000 f947 	bl	8014ec4 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8014c36:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8014c3a:	e7e4      	b.n	8014c06 <realize_virt_arrays+0xee>
 8014c3c:	3b9aca00 	.word	0x3b9aca00

08014c40 <access_virt_sarray>:
{
 8014c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8014c44:	eb02 0803 	add.w	r8, r2, r3
{
 8014c48:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014c4a:	684a      	ldr	r2, [r1, #4]
{
 8014c4c:	b087      	sub	sp, #28
 8014c4e:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014c50:	4542      	cmp	r2, r8
{
 8014c52:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014c56:	d304      	bcc.n	8014c62 <access_virt_sarray+0x22>
 8014c58:	68ca      	ldr	r2, [r1, #12]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d301      	bcc.n	8014c62 <access_virt_sarray+0x22>
 8014c5e:	680b      	ldr	r3, [r1, #0]
 8014c60:	b933      	cbnz	r3, 8014c70 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014c62:	6803      	ldr	r3, [r0, #0]
 8014c64:	2217      	movs	r2, #23
 8014c66:	9003      	str	r0, [sp, #12]
 8014c68:	615a      	str	r2, [r3, #20]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	4798      	blx	r3
 8014c6e:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8014c70:	69a3      	ldr	r3, [r4, #24]
 8014c72:	42ab      	cmp	r3, r5
 8014c74:	d80c      	bhi.n	8014c90 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8014c76:	6922      	ldr	r2, [r4, #16]
 8014c78:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014c7a:	4543      	cmp	r3, r8
 8014c7c:	d308      	bcc.n	8014c90 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8014c7e:	69e6      	ldr	r6, [r4, #28]
 8014c80:	4546      	cmp	r6, r8
 8014c82:	f0c0 8083 	bcc.w	8014d8c <access_virt_sarray+0x14c>
  if (writable)
 8014c86:	f1ba 0f00 	cmp.w	sl, #0
 8014c8a:	f040 80aa 	bne.w	8014de2 <access_virt_sarray+0x1a2>
 8014c8e:	e0aa      	b.n	8014de6 <access_virt_sarray+0x1a6>
    if (! ptr->b_s_open)
 8014c90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014c92:	b933      	cbnz	r3, 8014ca2 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8014c94:	6803      	ldr	r3, [r0, #0]
 8014c96:	2247      	movs	r2, #71	; 0x47
 8014c98:	9003      	str	r0, [sp, #12]
 8014c9a:	615a      	str	r2, [r3, #20]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	4798      	blx	r3
 8014ca0:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8014ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ca4:	b17b      	cbz	r3, 8014cc6 <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8014ca6:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014caa:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8014cae:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014cb0:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8014cb4:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014cb8:	6922      	ldr	r2, [r4, #16]
 8014cba:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014cbc:	e9d4 7e06 	ldrd	r7, lr, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014cc0:	dc3d      	bgt.n	8014d3e <access_virt_sarray+0xfe>
      ptr->dirty = FALSE;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8014cc6:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014cc8:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014ccc:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014cce:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8014cd2:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8014cd4:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014cd8:	bf2a      	itet	cs
 8014cda:	eba8 0303 	subcs.w	r3, r8, r3
 8014cde:	462b      	movcc	r3, r5
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8014ce0:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8014ce4:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 8014ce6:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014cea:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014cec:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014cee:	454a      	cmp	r2, r9
 8014cf0:	ddc5      	ble.n	8014c7e <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014cf2:	eba2 0209 	sub.w	r2, r2, r9
 8014cf6:	6967      	ldr	r7, [r4, #20]
 8014cf8:	42ba      	cmp	r2, r7
 8014cfa:	bfa8      	it	ge
 8014cfc:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8014cfe:	69a7      	ldr	r7, [r4, #24]
 8014d00:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014d02:	eba6 0c07 	sub.w	ip, r6, r7
 8014d06:	4594      	cmp	ip, r2
 8014d08:	bfa8      	it	ge
 8014d0a:	4694      	movge	ip, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014d0c:	6862      	ldr	r2, [r4, #4]
 8014d0e:	1bd6      	subs	r6, r2, r7
 8014d10:	4566      	cmp	r6, ip
 8014d12:	bfa8      	it	ge
 8014d14:	4666      	movge	r6, ip
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014d16:	2e00      	cmp	r6, #0
 8014d18:	ddb1      	ble.n	8014c7e <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 8014d1a:	fb06 f60b 	mul.w	r6, r6, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014d1e:	6822      	ldr	r2, [r4, #0]
 8014d20:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8014d22:	9600      	str	r6, [sp, #0]
 8014d24:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8014d28:	9305      	str	r3, [sp, #20]
 8014d2a:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8014d2e:	47b8      	blx	r7
    file_offset += byte_count;
 8014d30:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014d32:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014d34:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014d36:	4491      	add	r9, r2
 8014d38:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8014d3c:	e7d5      	b.n	8014cea <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014d3e:	eba2 0209 	sub.w	r2, r2, r9
 8014d42:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8014d44:	eb07 0c09 	add.w	ip, r7, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014d48:	42b2      	cmp	r2, r6
 8014d4a:	bfa8      	it	ge
 8014d4c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014d4e:	ebae 060c 	sub.w	r6, lr, ip
 8014d52:	4296      	cmp	r6, r2
 8014d54:	bfa8      	it	ge
 8014d56:	4616      	movge	r6, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014d58:	6862      	ldr	r2, [r4, #4]
 8014d5a:	eba2 070c 	sub.w	r7, r2, ip
 8014d5e:	42b7      	cmp	r7, r6
 8014d60:	bfa8      	it	ge
 8014d62:	4637      	movge	r7, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014d64:	2f00      	cmp	r7, #0
 8014d66:	ddac      	ble.n	8014cc2 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8014d68:	fb07 f70b 	mul.w	r7, r7, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014d6c:	6822      	ldr	r2, [r4, #0]
 8014d6e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8014d70:	9700      	str	r7, [sp, #0]
 8014d72:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8014d76:	9305      	str	r3, [sp, #20]
 8014d78:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8014d7c:	47b0      	blx	r6
    file_offset += byte_count;
 8014d7e:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014d80:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014d82:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014d84:	4491      	add	r9, r2
 8014d86:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8014d8a:	e795      	b.n	8014cb8 <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 8014d8c:	42ae      	cmp	r6, r5
 8014d8e:	d20d      	bcs.n	8014dac <access_virt_sarray+0x16c>
      if (writable)		/* writer skipped over a section of array */
 8014d90:	f1ba 0f00 	cmp.w	sl, #0
 8014d94:	d020      	beq.n	8014dd8 <access_virt_sarray+0x198>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014d96:	6803      	ldr	r3, [r0, #0]
 8014d98:	2217      	movs	r2, #23
 8014d9a:	9003      	str	r0, [sp, #12]
 8014d9c:	462e      	mov	r6, r5
 8014d9e:	615a      	str	r2, [r3, #20]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	4798      	blx	r3
    if (writable)
 8014da4:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8014da6:	f8c4 801c 	str.w	r8, [r4, #28]
 8014daa:	e002      	b.n	8014db2 <access_virt_sarray+0x172>
    if (writable)
 8014dac:	f1ba 0f00 	cmp.w	sl, #0
 8014db0:	d1f9      	bne.n	8014da6 <access_virt_sarray+0x166>
    if (ptr->pre_zero) {
 8014db2:	6a22      	ldr	r2, [r4, #32]
 8014db4:	b192      	cbz	r2, 8014ddc <access_virt_sarray+0x19c>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014db6:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8014db8:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014dba:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 8014dbc:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8014dc0:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014dc2:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8014dc4:	f4bf af5f 	bcs.w	8014c86 <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014dc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014dcc:	463a      	mov	r2, r7
 8014dce:	2100      	movs	r1, #0
	undef_row++;
 8014dd0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014dd2:	f014 fee1 	bl	8029b98 <memset>
	undef_row++;
 8014dd6:	e7f3      	b.n	8014dc0 <access_virt_sarray+0x180>
 8014dd8:	462e      	mov	r6, r5
 8014dda:	e7ea      	b.n	8014db2 <access_virt_sarray+0x172>
      if (! writable)		/* reader looking at undefined data */
 8014ddc:	f1ba 0f00 	cmp.w	sl, #0
 8014de0:	d009      	beq.n	8014df6 <access_virt_sarray+0x1b6>
    ptr->dirty = TRUE;
 8014de2:	2301      	movs	r3, #1
 8014de4:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8014de6:	69a3      	ldr	r3, [r4, #24]
 8014de8:	6820      	ldr	r0, [r4, #0]
 8014dea:	1aed      	subs	r5, r5, r3
}
 8014dec:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8014df0:	b007      	add	sp, #28
 8014df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014df6:	6803      	ldr	r3, [r0, #0]
 8014df8:	2217      	movs	r2, #23
 8014dfa:	615a      	str	r2, [r3, #20]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	4798      	blx	r3
  if (writable)
 8014e00:	e7f1      	b.n	8014de6 <access_virt_sarray+0x1a6>
	...

08014e04 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8014e04:	2300      	movs	r3, #0
{
 8014e06:	b570      	push	{r4, r5, r6, lr}
 8014e08:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 8014e0a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8014e0c:	f000 f85f 	bl	8014ece <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8014e10:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8014e12:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8014e14:	4628      	mov	r0, r5
 8014e16:	f000 f847 	bl	8014ea8 <jpeg_get_small>

  if (mem == NULL) {
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	b948      	cbnz	r0, 8014e32 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 8014e1e:	4628      	mov	r0, r5
 8014e20:	f000 f857 	bl	8014ed2 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8014e24:	682b      	ldr	r3, [r5, #0]
 8014e26:	2238      	movs	r2, #56	; 0x38
 8014e28:	4628      	mov	r0, r5
 8014e2a:	e9c3 2405 	strd	r2, r4, [r3, #20]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8014e32:	4b12      	ldr	r3, [pc, #72]	; (8014e7c <jinit_memory_mgr+0x78>)
 8014e34:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8014e36:	4b12      	ldr	r3, [pc, #72]	; (8014e80 <jinit_memory_mgr+0x7c>)
 8014e38:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 8014e3a:	4b12      	ldr	r3, [pc, #72]	; (8014e84 <jinit_memory_mgr+0x80>)
 8014e3c:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 8014e3e:	4b12      	ldr	r3, [pc, #72]	; (8014e88 <jinit_memory_mgr+0x84>)
 8014e40:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8014e42:	4b12      	ldr	r3, [pc, #72]	; (8014e8c <jinit_memory_mgr+0x88>)
 8014e44:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8014e46:	4b12      	ldr	r3, [pc, #72]	; (8014e90 <jinit_memory_mgr+0x8c>)
 8014e48:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 8014e4a:	4b12      	ldr	r3, [pc, #72]	; (8014e94 <jinit_memory_mgr+0x90>)
 8014e4c:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 8014e4e:	4b12      	ldr	r3, [pc, #72]	; (8014e98 <jinit_memory_mgr+0x94>)
 8014e50:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8014e52:	4b12      	ldr	r3, [pc, #72]	; (8014e9c <jinit_memory_mgr+0x98>)
 8014e54:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 8014e56:	4b12      	ldr	r3, [pc, #72]	; (8014ea0 <jinit_memory_mgr+0x9c>)
 8014e58:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 8014e5a:	4b12      	ldr	r3, [pc, #72]	; (8014ea4 <jinit_memory_mgr+0xa0>)
 8014e5c:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 8014e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8014e62:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8014e66:	2300      	movs	r3, #0
 8014e68:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 8014e6a:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 8014e6c:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 8014e6e:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8014e70:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8014e74:	2354      	movs	r3, #84	; 0x54
 8014e76:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8014e78:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 8014e7a:	bd70      	pop	{r4, r5, r6, pc}
 8014e7c:	0801469d 	.word	0x0801469d
 8014e80:	080149cb 	.word	0x080149cb
 8014e84:	08014aa9 	.word	0x08014aa9
 8014e88:	08014a39 	.word	0x08014a39
 8014e8c:	080147b3 	.word	0x080147b3
 8014e90:	08014769 	.word	0x08014769
 8014e94:	08014b19 	.word	0x08014b19
 8014e98:	08014c41 	.word	0x08014c41
 8014e9c:	080148cb 	.word	0x080148cb
 8014ea0:	080147fd 	.word	0x080147fd
 8014ea4:	080148a1 	.word	0x080148a1

08014ea8 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8014ea8:	4608      	mov	r0, r1
 8014eaa:	f7f2 b90f 	b.w	80070cc <pvPortMalloc>

08014eae <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 8014eae:	4608      	mov	r0, r1
 8014eb0:	f7f2 b9a2 	b.w	80071f8 <vPortFree>

08014eb4 <jpeg_get_large>:
 8014eb4:	4608      	mov	r0, r1
 8014eb6:	f7f2 b909 	b.w	80070cc <pvPortMalloc>

08014eba <jpeg_free_large>:
 8014eba:	4608      	mov	r0, r1
 8014ebc:	f7f2 b99c 	b.w	80071f8 <vPortFree>

08014ec0 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8014ec0:	4610      	mov	r0, r2
 8014ec2:	4770      	bx	lr

08014ec4 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8014ec4:	6803      	ldr	r3, [r0, #0]
 8014ec6:	2233      	movs	r2, #51	; 0x33
 8014ec8:	615a      	str	r2, [r3, #20]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4718      	bx	r3

08014ece <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 8014ece:	2000      	movs	r0, #0
 8014ed0:	4770      	bx	lr

08014ed2 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8014ed2:	4770      	bx	lr

08014ed4 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8014ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8014ed8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8014edc:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014ede:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8014ee2:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8014ee4:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014ee6:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 8014eea:	bf16      	itet	ne
 8014eec:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 8014eee:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8014ef2:	461e      	movne	r6, r3
 8014ef4:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8014ef6:	6843      	ldr	r3, [r0, #4]
 8014ef8:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8014efc:	689f      	ldr	r7, [r3, #8]
 8014efe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8014f00:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8014f02:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8014f06:	f105 0e1c 	add.w	lr, r5, #28

  for (i = 0; i < cinfo->out_color_components; i++) {
 8014f0a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8014f0c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014f0e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8014f10:	429a      	cmp	r2, r3
 8014f12:	dc01      	bgt.n	8014f18 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8014f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8014f18:	f85e 1f04 	ldr.w	r1, [lr, #4]!
      cquantize->colorindex[i] += MAXJSAMPLE;
 8014f1c:	009f      	lsls	r7, r3, #2
 8014f1e:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8014f20:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8014f24:	b126      	cbz	r6, 8014f30 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8014f26:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014f2a:	32ff      	adds	r2, #255	; 0xff
 8014f2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8014f30:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014f34:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8014f38:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 8014f3a:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014f3c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8014f40:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014f42:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8014f46:	428f      	cmp	r7, r1
 8014f48:	db0a      	blt.n	8014f60 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 8014f4a:	fb10 fb0c 	smulbb	fp, r0, ip
 8014f4e:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8014f52:	3101      	adds	r1, #1
 8014f54:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8014f58:	d1f5      	bne.n	8014f46 <create_colorindex+0x72>
    if (pad)
 8014f5a:	b93e      	cbnz	r6, 8014f6c <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	e7d6      	b.n	8014f0e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8014f60:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014f62:	fb08 a700 	mla	r7, r8, r0, sl
 8014f66:	fb97 f7f9 	sdiv	r7, r7, r9
 8014f6a:	e7ec      	b.n	8014f46 <create_colorindex+0x72>
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8014f72:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8014f76:	f892 9000 	ldrb.w	r9, [r2]
 8014f7a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8014f7e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8014f80:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8014f84:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8014f88:	d1f5      	bne.n	8014f76 <create_colorindex+0xa2>
 8014f8a:	e7e7      	b.n	8014f5c <create_colorindex+0x88>

08014f8c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 8014f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8014f90:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8014f94:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8014f96:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8014f9a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 8014f9e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8014fa2:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8014fa4:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8014fa6:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8014fa8:	4540      	cmp	r0, r8
 8014faa:	db02      	blt.n	8014fb2 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8014fac:	b003      	add	sp, #12
 8014fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8014fb2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8014fb6:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8014fb8:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8014fbc:	eb04 0a03 	add.w	sl, r4, r3
 8014fc0:	4554      	cmp	r4, sl
 8014fc2:	d10f      	bne.n	8014fe4 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8014fc4:	3001      	adds	r0, #1
 8014fc6:	e7ef      	b.n	8014fa8 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8014fc8:	f815 b003 	ldrb.w	fp, [r5, r3]
 8014fcc:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8014fd0:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8014fd2:	f817 700b 	ldrb.w	r7, [r7, fp]
 8014fd6:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8014fd8:	4563      	cmp	r3, ip
 8014fda:	dbf5      	blt.n	8014fc8 <color_quantize+0x3c>
 8014fdc:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 8014fde:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8014fe2:	e7ed      	b.n	8014fc0 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8014fe4:	2300      	movs	r3, #0
      pixcode = 0;
 8014fe6:	461e      	mov	r6, r3
 8014fe8:	e7f6      	b.n	8014fd8 <color_quantize+0x4c>

08014fea <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8014fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8014fee:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8014ff2:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8014ff6:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8014ff8:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8014ffa:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8014ffe:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8015002:	4298      	cmp	r0, r3
 8015004:	db01      	blt.n	801500a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 801500a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801500e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015012:	eb05 0a09 	add.w	sl, r5, r9
 8015016:	4555      	cmp	r5, sl
 8015018:	f104 0403 	add.w	r4, r4, #3
 801501c:	d101      	bne.n	8015022 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 801501e:	3001      	adds	r0, #1
 8015020:	e7ef      	b.n	8015002 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8015022:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8015026:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 801502a:	f81c 6006 	ldrb.w	r6, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801502e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015032:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8015034:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8015038:	f818 6006 	ldrb.w	r6, [r8, r6]
 801503c:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 801503e:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8015042:	e7e8      	b.n	8015016 <color_quantize3+0x2c>

08015044 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8015044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015048:	469a      	mov	sl, r3
 801504a:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801504c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015050:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015054:	699a      	ldr	r2, [r3, #24]
 8015056:	6811      	ldr	r1, [r2, #0]
 8015058:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801505a:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801505c:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801505e:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015060:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015062:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8015064:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8015066:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015068:	4551      	cmp	r1, sl
 801506a:	db02      	blt.n	8015072 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 801506c:	b00b      	add	sp, #44	; 0x2c
 801506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8015072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8015074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015076:	9c07      	ldr	r4, [sp, #28]
 8015078:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 801507c:	0190      	lsls	r0, r2, #6
 801507e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8015082:	9002      	str	r0, [sp, #8]
 8015084:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8015088:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 801508a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 801508c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8015090:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8015092:	9808      	ldr	r0, [sp, #32]
 8015094:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015098:	4575      	cmp	r5, lr
 801509a:	f100 0003 	add.w	r0, r0, #3
 801509e:	d106      	bne.n	80150ae <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 80150a0:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80150a2:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80150a4:	3201      	adds	r2, #1
 80150a6:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 80150aa:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80150ac:	e7dc      	b.n	8015068 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80150ae:	9e02      	ldr	r6, [sp, #8]
 80150b0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80150b4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80150b8:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 80150ba:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80150bc:	f858 7006 	ldr.w	r7, [r8, r6]
 80150c0:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80150c2:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 80150c4:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80150c8:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80150cc:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 80150d0:	f859 7006 	ldr.w	r7, [r9, r6]
 80150d4:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80150d6:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80150d8:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80150dc:	5996      	ldr	r6, [r2, r6]
 80150de:	f810 cc01 	ldrb.w	ip, [r0, #-1]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80150e2:	445f      	add	r7, fp
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80150e4:	9a06      	ldr	r2, [sp, #24]
 80150e6:	4494      	add	ip, r2
 80150e8:	f81c 6006 	ldrb.w	r6, [ip, r6]
 80150ec:	443e      	add	r6, r7
      *output_ptr++ = (JSAMPLE) pixcode;
 80150ee:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 80150f2:	e7d1      	b.n	8015098 <quantize3_ord_dither+0x54>

080150f4 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80150f4:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 80150f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80150f8:	3202      	adds	r2, #2
 80150fa:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 80150fe:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015100:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015102:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015104:	3640      	adds	r6, #64	; 0x40
 8015106:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015108:	42bb      	cmp	r3, r7
 801510a:	dc00      	bgt.n	801510e <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 801510c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801510e:	6863      	ldr	r3, [r4, #4]
 8015110:	462a      	mov	r2, r5
 8015112:	2101      	movs	r1, #1
 8015114:	4620      	mov	r0, r4
 8015116:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015118:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801511a:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 801511c:	f846 0f04 	str.w	r0, [r6, #4]!
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015120:	e7f1      	b.n	8015106 <alloc_fs_workspace+0x12>

08015122 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8015122:	4770      	bx	lr

08015124 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8015124:	6803      	ldr	r3, [r0, #0]
 8015126:	222f      	movs	r2, #47	; 0x2f
 8015128:	615a      	str	r2, [r3, #20]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	4718      	bx	r3
	...

08015130 <start_pass_1_quant>:
{
 8015130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015134:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015138:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 801513a:	692b      	ldr	r3, [r5, #16]
 801513c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 8015140:	696b      	ldr	r3, [r5, #20]
 8015142:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8015146:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801514a:	2b01      	cmp	r3, #1
 801514c:	d00b      	beq.n	8015166 <start_pass_1_quant+0x36>
 801514e:	2b02      	cmp	r3, #2
 8015150:	d05e      	beq.n	8015210 <start_pass_1_quant+0xe0>
 8015152:	2b00      	cmp	r3, #0
 8015154:	d174      	bne.n	8015240 <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8015156:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015158:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 801515a:	bf0c      	ite	eq
 801515c:	4b3c      	ldreq	r3, [pc, #240]	; (8015250 <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 801515e:	4b3d      	ldrne	r3, [pc, #244]	; (8015254 <start_pass_1_quant+0x124>)
 8015160:	606b      	str	r3, [r5, #4]
}
 8015162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8015166:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8015168:	4b3b      	ldr	r3, [pc, #236]	; (8015258 <start_pass_1_quant+0x128>)
 801516a:	4a3c      	ldr	r2, [pc, #240]	; (801525c <start_pass_1_quant+0x12c>)
 801516c:	2903      	cmp	r1, #3
 801516e:	bf18      	it	ne
 8015170:	4613      	movne	r3, r2
 8015172:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015174:	2300      	movs	r3, #0
 8015176:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015178:	69eb      	ldr	r3, [r5, #28]
 801517a:	b90b      	cbnz	r3, 8015180 <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 801517c:	f7ff feaa 	bl	8014ed4 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 8015180:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8015182:	2d00      	cmp	r5, #0
 8015184:	d1ed      	bne.n	8015162 <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015186:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 801518a:	f107 081c 	add.w	r8, r7, #28
 801518e:	4646      	mov	r6, r8
 8015190:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015192:	429d      	cmp	r5, r3
 8015194:	dae5      	bge.n	8015162 <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015196:	f856 9f04 	ldr.w	r9, [r6, #4]!
    for (j = 0; j < i; j++) {
 801519a:	4642      	mov	r2, r8
 801519c:	2300      	movs	r3, #0
 801519e:	429d      	cmp	r5, r3
 80151a0:	d007      	beq.n	80151b2 <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 80151a2:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80151a6:	4589      	cmp	r9, r1
 80151a8:	d130      	bne.n	801520c <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 80151aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80151ae:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 80151b0:	bb48      	cbnz	r0, 8015206 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80151b2:	6863      	ldr	r3, [r4, #4]
 80151b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80151b8:	2101      	movs	r1, #1
 80151ba:	4620      	mov	r0, r4
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 80151c0:	f109 32ff 	add.w	r2, r9, #4294967295
 80151c4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 80151c8:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015264 <start_pass_1_quant+0x134>
 80151cc:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 80151ce:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 80151d2:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 80151d6:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 80151d8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80151dc:	005b      	lsls	r3, r3, #1
 80151de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 80151e2:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 80151e6:	bf45      	ittet	mi
 80151e8:	425b      	negmi	r3, r3
 80151ea:	fb93 f3f2 	sdivmi	r3, r3, r2
 80151ee:	fb93 f3f2 	sdivpl	r3, r3, r2
 80151f2:	425b      	negmi	r3, r3
 80151f4:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 80151f8:	458e      	cmp	lr, r1
 80151fa:	d1ed      	bne.n	80151d8 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 80151fc:	3140      	adds	r1, #64	; 0x40
 80151fe:	f10c 0c10 	add.w	ip, ip, #16
 8015202:	458a      	cmp	sl, r1
 8015204:	d1e5      	bne.n	80151d2 <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015206:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015208:	6170      	str	r0, [r6, #20]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801520a:	e7c1      	b.n	8015190 <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 801520c:	3301      	adds	r3, #1
 801520e:	e7c6      	b.n	801519e <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8015210:	4b13      	ldr	r3, [pc, #76]	; (8015260 <start_pass_1_quant+0x130>)
 8015212:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015214:	2300      	movs	r3, #0
 8015216:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015218:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801521a:	b90b      	cbnz	r3, 8015220 <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 801521c:	f7ff ff6a 	bl	80150f4 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015220:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015222:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < cinfo->out_color_components; i++)
 8015224:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015226:	3202      	adds	r2, #2
 8015228:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 801522a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801522c:	42bb      	cmp	r3, r7
 801522e:	dd98      	ble.n	8015162 <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015230:	4632      	mov	r2, r6
 8015232:	2100      	movs	r1, #0
 8015234:	f855 0f04 	ldr.w	r0, [r5, #4]!
    for (i = 0; i < cinfo->out_color_components; i++)
 8015238:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801523a:	f014 fcad 	bl	8029b98 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 801523e:	e7f4      	b.n	801522a <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015240:	6803      	ldr	r3, [r0, #0]
 8015242:	2231      	movs	r2, #49	; 0x31
}
 8015244:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015248:	615a      	str	r2, [r3, #20]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	4718      	bx	r3
 801524e:	bf00      	nop
 8015250:	08014feb 	.word	0x08014feb
 8015254:	08014f8d 	.word	0x08014f8d
 8015258:	08015045 	.word	0x08015045
 801525c:	080153a1 	.word	0x080153a1
 8015260:	08015269 	.word	0x08015269
 8015264:	0802e588 	.word	0x0802e588

08015268 <quantize_fs_dither>:
{
 8015268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801526c:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 801526e:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015270:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8015274:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015278:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 801527c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015280:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015284:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015286:	1e6b      	subs	r3, r5, #1
 8015288:	9305      	str	r3, [sp, #20]
 801528a:	fb03 f309 	mul.w	r3, r3, r9
 801528e:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015290:	1c6b      	adds	r3, r5, #1
 8015292:	005b      	lsls	r3, r3, #1
 8015294:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8015296:	2300      	movs	r3, #0
 8015298:	9300      	str	r3, [sp, #0]
 801529a:	9a00      	ldr	r2, [sp, #0]
 801529c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801529e:	429a      	cmp	r2, r3
 80152a0:	db02      	blt.n	80152a8 <quantize_fs_dither+0x40>
}
 80152a2:	b011      	add	sp, #68	; 0x44
 80152a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80152a8:	2100      	movs	r1, #0
 80152aa:	462a      	mov	r2, r5
 80152ac:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 80152b0:	f014 fc72 	bl	8029b98 <memset>
    for (ci = 0; ci < nc; ci++) {
 80152b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80152b8:	2100      	movs	r1, #0
 80152ba:	9304      	str	r3, [sp, #16]
	dirnc = -nc;
 80152bc:	f1c9 0300 	rsb	r3, r9, #0
 80152c0:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 80152c2:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 80152c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 80152c6:	db06      	blt.n	80152d6 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80152c8:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 80152cc:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80152ce:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 80152d0:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80152d2:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 80152d4:	e7e0      	b.n	8015298 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 80152d6:	9800      	ldr	r0, [sp, #0]
 80152d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 80152de:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 80152e2:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80152e6:	9b04      	ldr	r3, [sp, #16]
 80152e8:	f853 cf04 	ldr.w	ip, [r3, #4]!
 80152ec:	9304      	str	r3, [sp, #16]
      if (cquantize->on_odd_row) {
 80152ee:	b312      	cbz	r2, 8015336 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80152f0:	9b08      	ldr	r3, [sp, #32]
 80152f2:	449e      	add	lr, r3
	output_ptr += width-1;
 80152f4:	9b05      	ldr	r3, [sp, #20]
 80152f6:	4418      	add	r0, r3
	dirnc = -nc;
 80152f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152fa:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80152fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152fe:	449c      	add	ip, r3
	dir = -1;
 8015300:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8015304:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8015306:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8015308:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 801530a:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 801530c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015310:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 8015312:	6923      	ldr	r3, [r4, #16]
 8015314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015318:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801531a:	9b02      	ldr	r3, [sp, #8]
 801531c:	005b      	lsls	r3, r3, #1
 801531e:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 8015320:	2300      	movs	r3, #0
      cur = 0;
 8015322:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015324:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015326:	9a03      	ldr	r2, [sp, #12]
 8015328:	b94a      	cbnz	r2, 801533e <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801532a:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 801532c:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801532e:	436a      	muls	r2, r5
 8015330:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8015334:	e7c5      	b.n	80152c2 <quantize_fs_dither+0x5a>
	dir = 1;
 8015336:	2301      	movs	r3, #1
 8015338:	f8cd 901c 	str.w	r9, [sp, #28]
 801533c:	e7e2      	b.n	8015304 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801533e:	9a01      	ldr	r2, [sp, #4]
 8015340:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015346:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8015348:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801534c:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8015350:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8015356:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 801535a:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 801535e:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015362:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015364:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8015368:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 801536c:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015370:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015372:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015376:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8015378:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 801537a:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 801537e:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8015380:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015382:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8015384:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015388:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 801538a:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 801538c:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 801538e:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015390:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8015392:	4443      	add	r3, r8
	belowerr = bnexterr;
 8015394:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8015398:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 801539c:	4417      	add	r7, r2
 801539e:	e7c2      	b.n	8015326 <quantize_fs_dither+0xbe>

080153a0 <quantize_ord_dither>:
{
 80153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a4:	b089      	sub	sp, #36	; 0x24
 80153a6:	4688      	mov	r8, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80153a8:	f8d0 91e0 	ldr.w	r9, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 80153ac:	1f14      	subs	r4, r2, #4
{
 80153ae:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80153b0:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 80153b2:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 80153b4:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 80153b8:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80153ba:	9b07      	ldr	r3, [sp, #28]
 80153bc:	429f      	cmp	r7, r3
 80153be:	db02      	blt.n	80153c6 <quantize_ord_dither+0x26>
}
 80153c0:	b009      	add	sp, #36	; 0x24
 80153c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80153c6:	4652      	mov	r2, sl
 80153c8:	2100      	movs	r1, #0
 80153ca:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80153ce:	f014 fbe3 	bl	8029b98 <memset>
    row_index = cquantize->row_index;
 80153d2:	4649      	mov	r1, r9
    for (ci = 0; ci < nc; ci++) {
 80153d4:	2000      	movs	r0, #0
    row_index = cquantize->row_index;
 80153d6:	f851 3f30 	ldr.w	r3, [r1, #48]!
      dither = cquantize->odither[ci][row_index];
 80153da:	019a      	lsls	r2, r3, #6
 80153dc:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 80153de:	9a01      	ldr	r2, [sp, #4]
 80153e0:	4290      	cmp	r0, r2
 80153e2:	db06      	blt.n	80153f2 <quantize_ord_dither+0x52>
    row_index = (row_index + 1) & ODITHER_MASK;
 80153e4:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 80153e6:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80153e8:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 80153ec:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80153f0:	e7e3      	b.n	80153ba <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 80153f2:	f8d9 2018 	ldr.w	r2, [r9, #24]
      col_index = 0;
 80153f6:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 80153f8:	f858 5027 	ldr.w	r5, [r8, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 80153fc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
      input_ptr = input_buf[row] + ci;
 8015400:	eb05 0c00 	add.w	ip, r5, r0
      colorindex_ci = cquantize->colorindex[ci];
 8015404:	6825      	ldr	r5, [r4, #0]
 8015406:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015408:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801540c:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 801540e:	eb0a 0205 	add.w	r2, sl, r5
 8015412:	9206      	str	r2, [sp, #24]
 8015414:	9a06      	ldr	r2, [sp, #24]
 8015416:	4295      	cmp	r5, r2
 8015418:	d101      	bne.n	801541e <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 801541a:	3001      	adds	r0, #1
 801541c:	e7df      	b.n	80153de <quantize_ord_dither+0x3e>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801541e:	782a      	ldrb	r2, [r5, #0]
 8015420:	f89c e000 	ldrb.w	lr, [ip]
 8015424:	9204      	str	r2, [sp, #16]
 8015426:	9a02      	ldr	r2, [sp, #8]
 8015428:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 801542c:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 801542e:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015430:	f85b b002 	ldr.w	fp, [fp, r2]
 8015434:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015436:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801543a:	4496      	add	lr, r2
 801543c:	9a04      	ldr	r2, [sp, #16]
 801543e:	f81e e00b 	ldrb.w	lr, [lr, fp]
 8015442:	4472      	add	r2, lr
 8015444:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8015448:	9a01      	ldr	r2, [sp, #4]
 801544a:	4494      	add	ip, r2
      for (col = width; col > 0; col--) {
 801544c:	e7e2      	b.n	8015414 <quantize_ord_dither+0x74>
	...

08015450 <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015450:	6843      	ldr	r3, [r0, #4]
 8015452:	2258      	movs	r2, #88	; 0x58
 8015454:	2101      	movs	r1, #1
 8015456:	681b      	ldr	r3, [r3, #0]
{
 8015458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801545c:	b085      	sub	sp, #20
 801545e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015460:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8015462:	4b68      	ldr	r3, [pc, #416]	; (8015604 <jinit_1pass_quantizer+0x1b4>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015464:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8015468:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 801546a:	4b67      	ldr	r3, [pc, #412]	; (8015608 <jinit_1pass_quantizer+0x1b8>)
 801546c:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 801546e:	4b67      	ldr	r3, [pc, #412]	; (801560c <jinit_1pass_quantizer+0x1bc>)
 8015470:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8015472:	2300      	movs	r3, #0
 8015474:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8015476:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8015478:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801547a:	2b04      	cmp	r3, #4
 801547c:	dd07      	ble.n	801548e <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 801547e:	6823      	ldr	r3, [r4, #0]
 8015480:	2039      	movs	r0, #57	; 0x39
 8015482:	2204      	movs	r2, #4
 8015484:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	4620      	mov	r0, r4
 801548c:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 801548e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015494:	dd08      	ble.n	80154a8 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8015496:	6823      	ldr	r3, [r4, #0]
 8015498:	213b      	movs	r1, #59	; 0x3b
 801549a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801549e:	4620      	mov	r0, r4
 80154a0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80154a8:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 80154ac:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 80154ae:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 80154b2:	f106 0920 	add.w	r9, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 80154b6:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    iroot++;
 80154ba:	469b      	mov	fp, r3
 80154bc:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 80154be:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 80154c0:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 80154c2:	4588      	cmp	r8, r1
 80154c4:	dc49      	bgt.n	801555a <jinit_1pass_quantizer+0x10a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 80154c6:	4592      	cmp	sl, r2
 80154c8:	daf7      	bge.n	80154ba <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 80154ca:	f1bb 0f01 	cmp.w	fp, #1
 80154ce:	d106      	bne.n	80154de <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 80154d0:	6823      	ldr	r3, [r4, #0]
 80154d2:	213a      	movs	r1, #58	; 0x3a
 80154d4:	4620      	mov	r0, r4
 80154d6:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4798      	blx	r3
 80154de:	f106 071c 	add.w	r7, r6, #28
    for (i = 1; i < nc; i++)
 80154e2:	2300      	movs	r3, #0
 80154e4:	2501      	movs	r5, #1
 80154e6:	463a      	mov	r2, r7
  for (i = 0; i < nc; i++) {
 80154e8:	4598      	cmp	r8, r3
 80154ea:	dc39      	bgt.n	8015560 <jinit_1pass_quantizer+0x110>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80154ec:	f8df c120 	ldr.w	ip, [pc, #288]	; 8015610 <jinit_1pass_quantizer+0x1c0>
    changed = FALSE;
 80154f0:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 80154f2:	460b      	mov	r3, r1
 80154f4:	4598      	cmp	r8, r3
 80154f6:	dc39      	bgt.n	801556c <jinit_1pass_quantizer+0x11c>
  } while (changed);
 80154f8:	2900      	cmp	r1, #0
 80154fa:	d1f9      	bne.n	80154f0 <jinit_1pass_quantizer+0xa0>
  if (cinfo->out_color_components == 3)
 80154fc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 80154fe:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8015500:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015502:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8015504:	d149      	bne.n	801559a <jinit_1pass_quantizer+0x14a>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015506:	619d      	str	r5, [r3, #24]
 8015508:	6a31      	ldr	r1, [r6, #32]
 801550a:	61d9      	str	r1, [r3, #28]
 801550c:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801550e:	6219      	str	r1, [r3, #32]
 8015510:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015512:	6259      	str	r1, [r3, #36]	; 0x24
 8015514:	2160      	movs	r1, #96	; 0x60
 8015516:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015518:	2101      	movs	r1, #1
 801551a:	4620      	mov	r0, r4
 801551c:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 801551e:	6863      	ldr	r3, [r4, #4]
 8015520:	462a      	mov	r2, r5
 8015522:	2101      	movs	r1, #1
 8015524:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8015528:	4620      	mov	r0, r4
 801552a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801552c:	47c0      	blx	r8
  for (i = 0; i < cinfo->out_color_components; i++) {
 801552e:	46a8      	mov	r8, r5
 8015530:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8015532:	9001      	str	r0, [sp, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015534:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015536:	429a      	cmp	r2, r3
 8015538:	db33      	blt.n	80155a2 <jinit_1pass_quantizer+0x152>
  cquantize->sv_colormap = colormap;
 801553a:	9b01      	ldr	r3, [sp, #4]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 801553c:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 801553e:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015542:	f7ff fcc7 	bl	8014ed4 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8015546:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801554a:	2b02      	cmp	r3, #2
 801554c:	d156      	bne.n	80155fc <jinit_1pass_quantizer+0x1ac>
    alloc_fs_workspace(cinfo);
 801554e:	4620      	mov	r0, r4
}
 8015550:	b005      	add	sp, #20
 8015552:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8015556:	f7ff bdcd 	b.w	80150f4 <alloc_fs_workspace>
      temp *= iroot;
 801555a:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 801555c:	3101      	adds	r1, #1
 801555e:	e7b0      	b.n	80154c2 <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015560:	fb0b f505 	mul.w	r5, fp, r5
  for (i = 0; i < nc; i++) {
 8015564:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8015566:	f842 bf04 	str.w	fp, [r2, #4]!
  for (i = 0; i < nc; i++) {
 801556a:	e7bd      	b.n	80154e8 <jinit_1pass_quantizer+0x98>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 801556c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8015570:	2a02      	cmp	r2, #2
 8015572:	bf0c      	ite	eq
 8015574:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8015578:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 801557a:	f859 b020 	ldr.w	fp, [r9, r0, lsl #2]
 801557e:	fb95 f2fb 	sdiv	r2, r5, fp
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8015582:	fb0b 2202 	mla	r2, fp, r2, r2
 8015586:	f10b 0e01 	add.w	lr, fp, #1
      if (temp > (long) max_colors)
 801558a:	4592      	cmp	sl, r2
 801558c:	dbb4      	blt.n	80154f8 <jinit_1pass_quantizer+0xa8>
    for (i = 0; i < nc; i++) {
 801558e:	3301      	adds	r3, #1
 8015590:	4615      	mov	r5, r2
      changed = TRUE;
 8015592:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8015594:	f849 e020 	str.w	lr, [r9, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8015598:	e7ac      	b.n	80154f4 <jinit_1pass_quantizer+0xa4>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 801559a:	2161      	movs	r1, #97	; 0x61
 801559c:	e9c3 1505 	strd	r1, r5, [r3, #20]
 80155a0:	e7ba      	b.n	8015518 <jinit_1pass_quantizer+0xc8>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80155a2:	f857 af04 	ldr.w	sl, [r7, #4]!
      val = output_value(cinfo, i, j, nci-1);
 80155a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80155aa:	9302      	str	r3, [sp, #8]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80155ac:	105b      	asrs	r3, r3, #1
    blksize = blkdist / nci;
 80155ae:	fb98 f9fa 	sdiv	r9, r8, sl
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80155b2:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 80155b4:	2300      	movs	r3, #0
 80155b6:	469b      	mov	fp, r3
 80155b8:	459a      	cmp	sl, r3
 80155ba:	dc02      	bgt.n	80155c2 <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80155bc:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 80155be:	46c8      	mov	r8, r9
 80155c0:	e7b8      	b.n	8015534 <jinit_1pass_quantizer+0xe4>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80155c2:	9803      	ldr	r0, [sp, #12]
 80155c4:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 80155c8:	46dc      	mov	ip, fp
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80155ca:	4401      	add	r1, r0
 80155cc:	9802      	ldr	r0, [sp, #8]
 80155ce:	fb91 f1f0 	sdiv	r1, r1, r0
 80155d2:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 80155d4:	45ac      	cmp	ip, r5
 80155d6:	db0e      	blt.n	80155f6 <jinit_1pass_quantizer+0x1a6>
    for (j = 0; j < nci; j++) {
 80155d8:	3301      	adds	r3, #1
 80155da:	44cb      	add	fp, r9
 80155dc:	e7ec      	b.n	80155b8 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 80155de:	9901      	ldr	r1, [sp, #4]
 80155e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80155e4:	4471      	add	r1, lr
	for (k = 0; k < blksize; k++)
 80155e6:	f10e 0e01 	add.w	lr, lr, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 80155ea:	f801 000c 	strb.w	r0, [r1, ip]
	for (k = 0; k < blksize; k++)
 80155ee:	45f1      	cmp	r9, lr
 80155f0:	dcf5      	bgt.n	80155de <jinit_1pass_quantizer+0x18e>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 80155f2:	44c4      	add	ip, r8
 80155f4:	e7ee      	b.n	80155d4 <jinit_1pass_quantizer+0x184>
	for (k = 0; k < blksize; k++)
 80155f6:	f04f 0e00 	mov.w	lr, #0
 80155fa:	e7f8      	b.n	80155ee <jinit_1pass_quantizer+0x19e>
}
 80155fc:	b005      	add	sp, #20
 80155fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015602:	bf00      	nop
 8015604:	08015131 	.word	0x08015131
 8015608:	08015123 	.word	0x08015123
 801560c:	08015125 	.word	0x08015125
 8015610:	0802e57c 	.word	0x0802e57c

08015614 <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8015614:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015618:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
{
 801561c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  register hist3d histogram = cquantize->histogram;
 8015620:	6997      	ldr	r7, [r2, #24]

  for (row = 0; row < num_rows; row++) {
 8015622:	2500      	movs	r5, #0
 8015624:	f04f 0e02 	mov.w	lr, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
 8015628:	f64f 78ff 	movw	r8, #65535	; 0xffff
  for (row = 0; row < num_rows; row++) {
 801562c:	429d      	cmp	r5, r3
 801562e:	db01      	blt.n	8015634 <prescan_quantize+0x20>
      ptr += 3;
    }
  }
}
 8015630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (col = width; col > 0; col--) {
 8015634:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 8015638:	4666      	mov	r6, ip
 801563a:	3003      	adds	r0, #3
 801563c:	b90e      	cbnz	r6, 8015642 <prescan_quantize+0x2e>
  for (row = 0; row < num_rows; row++) {
 801563e:	3501      	adds	r5, #1
 8015640:	e7f4      	b.n	801562c <prescan_quantize+0x18>
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015642:	f810 2c02 	ldrb.w	r2, [r0, #-2]
    for (col = width; col > 0; col--) {
 8015646:	3e01      	subs	r6, #1
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015648:	f810 9c03 	ldrb.w	r9, [r0, #-3]
 801564c:	3003      	adds	r0, #3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 801564e:	f810 4c04 	ldrb.w	r4, [r0, #-4]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015652:	0892      	lsrs	r2, r2, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015654:	ea4f 09d9 	mov.w	r9, r9, lsr #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015658:	0192      	lsls	r2, r2, #6
 801565a:	08e4      	lsrs	r4, r4, #3
 801565c:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8015660:	fb1e 2404 	smlabb	r4, lr, r4, r2
      if (++(*histp) <= 0)
 8015664:	f839 2004 	ldrh.w	r2, [r9, r4]
 8015668:	3201      	adds	r2, #1
 801566a:	b292      	uxth	r2, r2
	(*histp)--;
 801566c:	2a00      	cmp	r2, #0
 801566e:	bf08      	it	eq
 8015670:	4642      	moveq	r2, r8
 8015672:	f829 2004 	strh.w	r2, [r9, r4]
    for (col = width; col > 0; col--) {
 8015676:	e7e1      	b.n	801563c <prescan_quantize+0x28>

08015678 <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8015678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801567c:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 8015680:	4680      	mov	r8, r0
  for (i = 0; i < numcolors; i++) {
 8015682:	2500      	movs	r5, #0
{
 8015684:	930b      	str	r3, [sp, #44]	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015686:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 801568a:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 801568c:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801568e:	0140      	lsls	r0, r0, #5
{
 8015690:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  c0 >>= BOX_C0_LOG;
 8015694:	1089      	asrs	r1, r1, #2
  hist3d histogram = cquantize->histogram;
 8015696:	9306      	str	r3, [sp, #24]
  c2 >>= BOX_C2_LOG;
 8015698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801569a:	f100 0a02 	add.w	sl, r0, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 801569e:	0149      	lsls	r1, r1, #5
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 80156a0:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 80156a2:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 80156a4:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 80156a8:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 80156ac:	311c      	adds	r1, #28
  int numcolors = cinfo->actual_number_of_colors;
 80156ae:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 80156b0:	0164      	lsls	r4, r4, #5
  centerc0 = (minc0 + maxc0) >> 1;
 80156b2:	eb09 0301 	add.w	r3, r9, r1
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 80156b6:	f104 0b04 	add.w	fp, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 80156ba:	341c      	adds	r4, #28
  centerc0 = (minc0 + maxc0) >> 1;
 80156bc:	105b      	asrs	r3, r3, #1
 80156be:	9303      	str	r3, [sp, #12]
  centerc1 = (minc1 + maxc1) >> 1;
 80156c0:	eb0a 0300 	add.w	r3, sl, r0
 80156c4:	105b      	asrs	r3, r3, #1
 80156c6:	9304      	str	r3, [sp, #16]
  centerc2 = (minc2 + maxc2) >> 1;
 80156c8:	eb0b 0304 	add.w	r3, fp, r4
 80156cc:	105b      	asrs	r3, r3, #1
 80156ce:	9305      	str	r3, [sp, #20]
  minmaxdist = 0x7FFFFFFFL;
 80156d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80156d4:	9301      	str	r3, [sp, #4]
  for (i = 0; i < numcolors; i++) {
 80156d6:	9b02      	ldr	r3, [sp, #8]
 80156d8:	42ab      	cmp	r3, r5
 80156da:	dc43      	bgt.n	8015764 <fill_inverse_cmap+0xec>
  ncolors = 0;
 80156dc:	2200      	movs	r2, #0
 80156de:	a972      	add	r1, sp, #456	; 0x1c8
      colorlist[ncolors++] = (JSAMPLE) i;
 80156e0:	a832      	add	r0, sp, #200	; 0xc8
  for (i = 0; i < numcolors; i++) {
 80156e2:	4613      	mov	r3, r2
 80156e4:	9c02      	ldr	r4, [sp, #8]
 80156e6:	429c      	cmp	r4, r3
 80156e8:	f300 809d 	bgt.w	8015826 <fill_inverse_cmap+0x1ae>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80156ec:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 80156ee:	a972      	add	r1, sp, #456	; 0x1c8
    *bptr++ = 0x7FFFFFFFL;
 80156f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80156f4:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 80156f6:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80156fa:	d1fb      	bne.n	80156f4 <fill_inverse_cmap+0x7c>
 80156fc:	a932      	add	r1, sp, #200	; 0xc8
 80156fe:	9108      	str	r1, [sp, #32]
  for (i = 0; i < numcolors; i++) {
 8015700:	9301      	str	r3, [sp, #4]
 8015702:	9b01      	ldr	r3, [sp, #4]
 8015704:	4293      	cmp	r3, r2
 8015706:	f040 8097 	bne.w	8015838 <fill_inverse_cmap+0x1c0>
  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 801570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
  cptr = bestcolor;
 801570c:	a912      	add	r1, sp, #72	; 0x48
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 801570e:	f023 0003 	bic.w	r0, r3, #3
 8015712:	9b06      	ldr	r3, [sp, #24]
 8015714:	eb03 0580 	add.w	r5, r3, r0, lsl #2
  c2 <<= BOX_C2_LOG;
 8015718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801571a:	f023 0203 	bic.w	r2, r3, #3
  c1 <<= BOX_C1_LOG;
 801571e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015720:	4628      	mov	r0, r5
 8015722:	f023 0307 	bic.w	r3, r3, #7
 8015726:	3010      	adds	r0, #16
 8015728:	019b      	lsls	r3, r3, #6
 801572a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 801572e:	f855 4b04 	ldr.w	r4, [r5], #4
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015732:	f101 0720 	add.w	r7, r1, #32
 8015736:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015738:	4626      	mov	r6, r4
 801573a:	460a      	mov	r2, r1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 801573c:	f101 0c04 	add.w	ip, r1, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015740:	f812 1b01 	ldrb.w	r1, [r2], #1
 8015744:	3101      	adds	r1, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015746:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015748:	f826 1b02 	strh.w	r1, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 801574c:	d1f8      	bne.n	8015740 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 801574e:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015750:	4611      	mov	r1, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015752:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8015756:	d1ef      	bne.n	8015738 <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8015758:	4285      	cmp	r5, r0
 801575a:	d1e8      	bne.n	801572e <fill_inverse_cmap+0xb6>
      }
    }
  }
}
 801575c:	f20d 5dcc 	addw	sp, sp, #1484	; 0x5cc
 8015760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8015764:	f8d8 7088 	ldr.w	r7, [r8, #136]	; 0x88
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 801576c:	4591      	cmp	r9, r2
 801576e:	dd2b      	ble.n	80157c8 <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8015770:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8015774:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8015776:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 801577a:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8015780:	459a      	cmp	sl, r3
 8015782:	dd34      	ble.n	80157ee <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8015784:	eba3 0e0a 	sub.w	lr, r3, sl
 8015788:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 801578c:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8015790:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8015792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8015796:	fb03 2303 	mla	r3, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 801579a:	68ba      	ldr	r2, [r7, #8]
 801579c:	5d52      	ldrb	r2, [r2, r5]
    if (x < minc2) {
 801579e:	4593      	cmp	fp, r2
 80157a0:	dd34      	ble.n	801580c <fill_inverse_cmap+0x194>
      tdist = (x - minc2) * C2_SCALE;
 80157a2:	eba2 070b 	sub.w	r7, r2, fp
 80157a6:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 80157a8:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 80157ac:	1b12      	subs	r2, r2, r4
	tdist = (x - minc2) * C2_SCALE;
 80157ae:	0052      	lsls	r2, r2, #1
	max_dist += tdist*tdist;
 80157b0:	fb02 3302 	mla	r3, r2, r2, r3
    mindist[i] = min_dist;	/* save away the results */
 80157b4:	aa72      	add	r2, sp, #456	; 0x1c8
 80157b6:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 80157ba:	3501      	adds	r5, #1
 80157bc:	9a01      	ldr	r2, [sp, #4]
 80157be:	429a      	cmp	r2, r3
 80157c0:	bfa8      	it	ge
 80157c2:	461a      	movge	r2, r3
 80157c4:	9201      	str	r2, [sp, #4]
 80157c6:	e786      	b.n	80156d6 <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 80157c8:	4291      	cmp	r1, r2
 80157ca:	da06      	bge.n	80157da <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 80157cc:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 80157d0:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 80157d4:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 80157d8:	e7cf      	b.n	801577a <fill_inverse_cmap+0x102>
      if (x <= centerc0) {
 80157da:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 80157dc:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 80157e0:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 80157e2:	bfac      	ite	ge
 80157e4:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 80157e6:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 80157ea:	4352      	muls	r2, r2
 80157ec:	e7c6      	b.n	801577c <fill_inverse_cmap+0x104>
    } else if (x > maxc1) {
 80157ee:	4298      	cmp	r0, r3
 80157f0:	da08      	bge.n	8015804 <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 80157f2:	eba3 0e00 	sub.w	lr, r3, r0
 80157f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 80157fa:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 80157fe:	eba3 030a 	sub.w	r3, r3, sl
 8015802:	e7c6      	b.n	8015792 <fill_inverse_cmap+0x11a>
      if (x <= centerc1) {
 8015804:	9e04      	ldr	r6, [sp, #16]
 8015806:	429e      	cmp	r6, r3
 8015808:	dbf9      	blt.n	80157fe <fill_inverse_cmap+0x186>
 801580a:	e7c1      	b.n	8015790 <fill_inverse_cmap+0x118>
    } else if (x > maxc2) {
 801580c:	4294      	cmp	r4, r2
 801580e:	da06      	bge.n	801581e <fill_inverse_cmap+0x1a6>
      tdist = (x - maxc2) * C2_SCALE;
 8015810:	1b17      	subs	r7, r2, r4
 8015812:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015814:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8015818:	eba2 020b 	sub.w	r2, r2, fp
 801581c:	e7c7      	b.n	80157ae <fill_inverse_cmap+0x136>
      if (x <= centerc2) {
 801581e:	9e05      	ldr	r6, [sp, #20]
 8015820:	4296      	cmp	r6, r2
 8015822:	dbf9      	blt.n	8015818 <fill_inverse_cmap+0x1a0>
 8015824:	e7c2      	b.n	80157ac <fill_inverse_cmap+0x134>
    if (mindist[i] <= minmaxdist)
 8015826:	f851 4b04 	ldr.w	r4, [r1], #4
 801582a:	9d01      	ldr	r5, [sp, #4]
 801582c:	42a5      	cmp	r5, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 801582e:	bfa4      	itt	ge
 8015830:	5483      	strbge	r3, [r0, r2]
 8015832:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8015834:	3301      	adds	r3, #1
 8015836:	e755      	b.n	80156e4 <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8015838:	9b08      	ldr	r3, [sp, #32]
    cptr = bestcolor;
 801583a:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 801583e:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
    icolor = GETJSAMPLE(colorlist[i]);
 8015842:	f813 4b01 	ldrb.w	r4, [r3], #1
 8015846:	9308      	str	r3, [sp, #32]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015848:	680b      	ldr	r3, [r1, #0]
 801584a:	5d1d      	ldrb	r5, [r3, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 801584c:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 801584e:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015850:	eba9 0505 	sub.w	r5, r9, r5
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015854:	5d18      	ldrb	r0, [r3, r4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015856:	5d09      	ldrb	r1, [r1, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015858:	ebaa 0000 	sub.w	r0, sl, r0
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 801585c:	ebab 0101 	sub.w	r1, fp, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015860:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015864:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8015866:	435b      	muls	r3, r3
 8015868:	fb05 3305 	mla	r3, r5, r5, r3
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 801586c:	3504      	adds	r5, #4
    dist0 += inc2*inc2;
 801586e:	fb01 3301 	mla	r3, r1, r1, r3
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015872:	3108      	adds	r1, #8
    dist0 += inc2*inc2;
 8015874:	9304      	str	r3, [sp, #16]
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015876:	012b      	lsls	r3, r5, #4
 8015878:	930c      	str	r3, [sp, #48]	; 0x30
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 801587a:	2348      	movs	r3, #72	; 0x48
 801587c:	4358      	muls	r0, r3
 801587e:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8015882:	930d      	str	r3, [sp, #52]	; 0x34
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015884:	014b      	lsls	r3, r1, #5
 8015886:	2100      	movs	r1, #0
 8015888:	9307      	str	r3, [sp, #28]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801588a:	f500 6319 	add.w	r3, r0, #2448	; 0x990
 801588e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015890:	9b07      	ldr	r3, [sp, #28]
 8015892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015896:	930e      	str	r3, [sp, #56]	; 0x38
 8015898:	ab72      	add	r3, sp, #456	; 0x1c8
	xx2 = inc2;
 801589a:	46f4      	mov	ip, lr
      xx1 = inc1;
 801589c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801589e:	440b      	add	r3, r1
 80158a0:	9305      	str	r3, [sp, #20]
 80158a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158a4:	440b      	add	r3, r1
 80158a6:	9310      	str	r3, [sp, #64]	; 0x40
 80158a8:	9b04      	ldr	r3, [sp, #16]
 80158aa:	9303      	str	r3, [sp, #12]
 80158ac:	e023      	b.n	80158f6 <fill_inverse_cmap+0x27e>
	  if (dist2 < *bptr) {
 80158ae:	463b      	mov	r3, r7
 80158b0:	f853 7f04 	ldr.w	r7, [r3, #4]!
 80158b4:	9711      	str	r7, [sp, #68]	; 0x44
 80158b6:	461f      	mov	r7, r3
 80158b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158ba:	42ab      	cmp	r3, r5
	    *bptr = dist2;
 80158bc:	bfc4      	itt	gt
 80158be:	463b      	movgt	r3, r7
 80158c0:	601d      	strgt	r5, [r3, #0]
	  dist2 += xx2;
 80158c2:	4435      	add	r5, r6
	    *cptr = (JSAMPLE) icolor;
 80158c4:	bfc8      	it	gt
 80158c6:	9b02      	ldrgt	r3, [sp, #8]
	  xx2 += 2 * STEP_C2 * STEP_C2;
 80158c8:	f506 7600 	add.w	r6, r6, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 80158cc:	bfc8      	it	gt
 80158ce:	701c      	strbgt	r4, [r3, #0]
	  cptr++;
 80158d0:	9b02      	ldr	r3, [sp, #8]
 80158d2:	3301      	adds	r3, #1
 80158d4:	9302      	str	r3, [sp, #8]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 80158d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158d8:	42b3      	cmp	r3, r6
 80158da:	d1e8      	bne.n	80158ae <fill_inverse_cmap+0x236>
	  bptr++;
 80158dc:	9b05      	ldr	r3, [sp, #20]
	  cptr++;
 80158de:	f10c 0c04 	add.w	ip, ip, #4
	  bptr++;
 80158e2:	3310      	adds	r3, #16
 80158e4:	9305      	str	r3, [sp, #20]
	dist1 += xx1;
 80158e6:	9b03      	ldr	r3, [sp, #12]
 80158e8:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 80158ea:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 80158ee:	9303      	str	r3, [sp, #12]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 80158f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158f2:	4298      	cmp	r0, r3
 80158f4:	d007      	beq.n	8015906 <fill_inverse_cmap+0x28e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 80158f6:	9b05      	ldr	r3, [sp, #20]
	xx2 = inc2;
 80158f8:	9e07      	ldr	r6, [sp, #28]
 80158fa:	3b04      	subs	r3, #4
 80158fc:	9d03      	ldr	r5, [sp, #12]
 80158fe:	f8cd c008 	str.w	ip, [sp, #8]
 8015902:	461f      	mov	r7, r3
 8015904:	e7d3      	b.n	80158ae <fill_inverse_cmap+0x236>
      dist0 += xx0;
 8015906:	9804      	ldr	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015908:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 801590a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	  cptr++;
 801590c:	f10e 0e20 	add.w	lr, lr, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015910:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
      dist0 += xx0;
 8015914:	4418      	add	r0, r3
 8015916:	9004      	str	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015918:	d1be      	bne.n	8015898 <fill_inverse_cmap+0x220>
  for (i = 0; i < numcolors; i++) {
 801591a:	9b01      	ldr	r3, [sp, #4]
 801591c:	3301      	adds	r3, #1
 801591e:	e6ef      	b.n	8015700 <fill_inverse_cmap+0x88>

08015920 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8015920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015924:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015926:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801592a:	b085      	sub	sp, #20
 801592c:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 801592e:	699b      	ldr	r3, [r3, #24]
{
 8015930:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015932:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8015934:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8015936:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015938:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 801593a:	4555      	cmp	r5, sl
 801593c:	db02      	blt.n	8015944 <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 801593e:	b005      	add	sp, #20
 8015940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8015944:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8015948:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 801594c:	9b01      	ldr	r3, [sp, #4]
 801594e:	3403      	adds	r4, #3
 8015950:	eb06 0b03 	add.w	fp, r6, r3
 8015954:	455e      	cmp	r6, fp
 8015956:	d101      	bne.n	801595c <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8015958:	3501      	adds	r5, #1
 801595a:	e7ee      	b.n	801593a <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 801595c:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015960:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015964:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8015968:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 801596a:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 801596e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 8015972:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015976:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8015978:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 801597c:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8015980:	f1bc 0f00 	cmp.w	ip, #0
 8015984:	d106      	bne.n	8015994 <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8015986:	4672      	mov	r2, lr
 8015988:	9303      	str	r3, [sp, #12]
 801598a:	9002      	str	r0, [sp, #8]
 801598c:	f7ff fe74 	bl	8015678 <fill_inverse_cmap>
 8015990:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8015994:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8015998:	3403      	adds	r4, #3
 801599a:	3b01      	subs	r3, #1
 801599c:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 80159a0:	e7d8      	b.n	8015954 <pass2_no_dither+0x34>

080159a2 <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 80159a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80159a6:	f8d0 a1e0 	ldr.w	sl, [r0, #480]	; 0x1e0
{
 80159aa:	b09f      	sub	sp, #124	; 0x7c
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80159ac:	f8d0 b070 	ldr.w	fp, [r0, #112]	; 0x70
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 80159b0:	f04f 0900 	mov.w	r9, #0
{
 80159b4:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 80159b6:	f8da 3018 	ldr.w	r3, [sl, #24]
 80159ba:	9315      	str	r3, [sp, #84]	; 0x54
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80159bc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80159c0:	9308      	str	r3, [sp, #32]
  int *error_limit = cquantize->error_limiter;
 80159c2:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 80159c6:	9309      	str	r3, [sp, #36]	; 0x24
  JSAMPROW colormap0 = cinfo->colormap[0];
 80159c8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80159cc:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 80159d4:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 80159d6:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 80159d8:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 80159da:	9318      	str	r3, [sp, #96]	; 0x60
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80159dc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80159e0:	3b03      	subs	r3, #3
 80159e2:	9310      	str	r3, [sp, #64]	; 0x40
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80159e4:	2306      	movs	r3, #6
 80159e6:	fb0b 3303 	mla	r3, fp, r3, r3
 80159ea:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 80159ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159ee:	4599      	cmp	r9, r3
 80159f0:	db02      	blt.n	80159f8 <pass2_fs_dither+0x56>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 80159f2:	b01f      	add	sp, #124	; 0x7c
 80159f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 80159f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159fa:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80159fe:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8015a00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015a02:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8015a06:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015a08:	f8da 3020 	ldr.w	r3, [sl, #32]
 8015a0c:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 8015a0e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d036      	beq.n	8015a84 <pass2_fs_dither+0xe2>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a18:	9a01      	ldr	r2, [sp, #4]
 8015a1a:	441a      	add	r2, r3
      outptr += width-1;
 8015a1c:	f10b 33ff 	add.w	r3, fp, #4294967295
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015a20:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8015a22:	9a03      	ldr	r2, [sp, #12]
 8015a24:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015a26:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8015a28:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015a2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015a2c:	4413      	add	r3, r2
      dir3 = -3;
 8015a2e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015a32:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8015a34:	2300      	movs	r3, #0
      dir3 = -3;
 8015a36:	9206      	str	r2, [sp, #24]
      dir = -1;
 8015a38:	f04f 32ff 	mov.w	r2, #4294967295
 8015a3c:	920d      	str	r2, [sp, #52]	; 0x34
 8015a3e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015a42:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015a44:	9b06      	ldr	r3, [sp, #24]
 8015a46:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8015a48:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015a4a:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 8015a4c:	4622      	mov	r2, r4
    for (col = width; col > 0; col--) {
 8015a4e:	f8cd b01c 	str.w	fp, [sp, #28]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015a52:	1cab      	adds	r3, r5, #2
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015a54:	940a      	str	r4, [sp, #40]	; 0x28
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015a56:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015a58:	1d2b      	adds	r3, r5, #4
 8015a5a:	9314      	str	r3, [sp, #80]	; 0x50
    cur0 = cur1 = cur2 = 0;
 8015a5c:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015a5e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015a62:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    for (col = width; col > 0; col--) {
 8015a66:	9f07      	ldr	r7, [sp, #28]
 8015a68:	b98f      	cbnz	r7, 8015a8e <pass2_fs_dither+0xec>
 8015a6a:	fb0b f505 	mul.w	r5, fp, r5
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8015a6e:	9a02      	ldr	r2, [sp, #8]
 8015a70:	9b02      	ldr	r3, [sp, #8]
  for (row = 0; row < num_rows; row++) {
 8015a72:	f109 0901 	add.w	r9, r9, #1
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8015a76:	9904      	ldr	r1, [sp, #16]
 8015a78:	442b      	add	r3, r5
 8015a7a:	5351      	strh	r1, [r2, r5]
    errorptr[1] = (FSERROR) bpreverr1;
 8015a7c:	9a05      	ldr	r2, [sp, #20]
    errorptr[2] = (FSERROR) bpreverr2;
 8015a7e:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8015a80:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8015a82:	e7b3      	b.n	80159ec <pass2_fs_dither+0x4a>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8015a84:	2301      	movs	r3, #1
      dir3 = 3;
 8015a86:	2203      	movs	r2, #3
      dir = 1;
 8015a88:	930d      	str	r3, [sp, #52]	; 0x34
      dir3 = 3;
 8015a8a:	9206      	str	r2, [sp, #24]
 8015a8c:	e7d7      	b.n	8015a3e <pass2_fs_dither+0x9c>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015a8e:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8015a92:	1977      	adds	r7, r6, r5
 8015a94:	449c      	add	ip, r3
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015a98:	9711      	str	r7, [sp, #68]	; 0x44
 8015a9a:	5ef3      	ldrsh	r3, [r6, r3]
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015a9c:	f10c 0c08 	add.w	ip, ip, #8
      cur0 = error_limit[cur0];
 8015aa0:	9f09      	ldr	r7, [sp, #36]	; 0x24
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015aa2:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015aa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015aa6:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015aa8:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015aaa:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015aac:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015aae:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015ab2:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8015ab4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8015ab8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015abc:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 8015abe:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8015ac2:	9f01      	ldr	r7, [sp, #4]
 8015ac4:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015ac8:	9f08      	ldr	r7, [sp, #32]
 8015aca:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015acc:	443a      	add	r2, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015ace:	f811 100c 	ldrb.w	r1, [r1, ip]
 8015ad2:	910e      	str	r1, [sp, #56]	; 0x38
      cur1 += GETJSAMPLE(inptr[1]);
 8015ad4:	9901      	ldr	r1, [sp, #4]
 8015ad6:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015ad8:	5c52      	ldrb	r2, [r2, r1]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015ada:	9908      	ldr	r1, [sp, #32]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015adc:	4617      	mov	r7, r2
      cur2 += GETJSAMPLE(inptr[2]);
 8015ade:	9a01      	ldr	r2, [sp, #4]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015ae0:	440b      	add	r3, r1
      cur2 += GETJSAMPLE(inptr[2]);
 8015ae2:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015ae4:	5c9b      	ldrb	r3, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015ae6:	10ba      	asrs	r2, r7, #2
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015ae8:	930f      	str	r3, [sp, #60]	; 0x3c
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015aec:	10d9      	asrs	r1, r3, #3
 8015aee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015af0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015af4:	eb03 1882 	add.w	r8, r3, r2, lsl #6
 8015af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015afa:	10db      	asrs	r3, r3, #3
      if (*cachep == 0)
 8015afc:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8015b00:	f1bc 0f00 	cmp.w	ip, #0
 8015b04:	d105      	bne.n	8015b12 <pass2_fs_dither+0x170>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8015b06:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 8015b0a:	f7ff fdb5 	bl	8015678 <fill_inverse_cmap>
 8015b0e:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8015b12:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8015b16:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8015b18:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015b1a:	9905      	ldr	r1, [sp, #20]
	*outptr = (JSAMPLE) pixcode;
 8015b1c:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8015b1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015b20:	f812 c003 	ldrb.w	ip, [r2, r3]
 8015b24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b26:	eba2 0c0c 	sub.w	ip, r2, ip
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8015b2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015b2c:	f812 e003 	ldrb.w	lr, [r2, r3]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8015b30:	9a18      	ldr	r2, [sp, #96]	; 0x60
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8015b32:	eba7 0e0e 	sub.w	lr, r7, lr
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015b36:	9f01      	ldr	r7, [sp, #4]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8015b38:	f812 8003 	ldrb.w	r8, [r2, r3]
 8015b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015b3e:	9a04      	ldr	r2, [sp, #16]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8015b40:	eba3 0808 	sub.w	r8, r3, r8
	cur0 += delta;		/* form error * 3 */
 8015b44:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015b48:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8015b4a:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015b4e:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8015b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b52:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8015b54:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8015b58:	9204      	str	r2, [sp, #16]
	cur1 += delta;		/* form error * 3 */
 8015b5a:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015b5e:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8015b60:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015b64:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8015b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b68:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8015b6a:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8015b6e:	9105      	str	r1, [sp, #20]
	cur2 += delta;		/* form error * 3 */
 8015b70:	eb08 0148 	add.w	r1, r8, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8015b74:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8015b76:	eb01 0148 	add.w	r1, r1, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8015b7a:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015b7c:	9e06      	ldr	r6, [sp, #24]
	bpreverr2 = belowerr2 + cur2;
 8015b7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015b80:	4437      	add	r7, r6
      outptr += dir;
 8015b82:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8015b84:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8015b86:	eb01 0148 	add.w	r1, r1, r8, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015b8a:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8015b8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015b8e:	443e      	add	r6, r7
 8015b90:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 8015b92:	9e07      	ldr	r6, [sp, #28]
 8015b94:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8015b96:	e9cd e80b 	strd	lr, r8, [sp, #44]	; 0x2c
    for (col = width; col > 0; col--) {
 8015b9a:	9607      	str	r6, [sp, #28]
 8015b9c:	9e11      	ldr	r6, [sp, #68]	; 0x44
	belowerr0 = bnexterr;
 8015b9e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8015ba2:	e760      	b.n	8015a66 <pass2_fs_dither+0xc4>

08015ba4 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8015ba4:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8015ba6:	6843      	ldr	r3, [r0, #4]
 8015ba8:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8015bac:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015bae:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8015bb6:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8015bba:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8015bbe:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8015bc2:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015bc4:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8015bc6:	425c      	negs	r4, r3
 8015bc8:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015bcc:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8015bce:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8015bd2:	2b10      	cmp	r3, #16
 8015bd4:	d1f7      	bne.n	8015bc6 <init_error_limit+0x22>
 8015bd6:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8015bda:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8015bde:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8015be2:	425d      	negs	r5, r3
 8015be4:	f844 3f04 	str.w	r3, [r4, #4]!
 8015be8:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8015bec:	f002 0501 	and.w	r5, r2, #1
 8015bf0:	3a01      	subs	r2, #1
 8015bf2:	442b      	add	r3, r5
 8015bf4:	f112 0f32 	cmn.w	r2, #50	; 0x32
 8015bf8:	d1f3      	bne.n	8015be2 <init_error_limit+0x3e>
 8015bfa:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8015bfe:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8015c02:	425c      	negs	r4, r3
 8015c04:	f841 3f04 	str.w	r3, [r1, #4]!
 8015c08:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8015c0c:	4282      	cmp	r2, r0
 8015c0e:	d1f9      	bne.n	8015c04 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8015c10:	bd38      	pop	{r3, r4, r5, pc}

08015c12 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8015c12:	4770      	bx	lr

08015c14 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8015c14:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8015c18:	2201      	movs	r2, #1
 8015c1a:	61da      	str	r2, [r3, #28]
}
 8015c1c:	4770      	bx	lr
	...

08015c20 <start_pass_2_quant>:
{
 8015c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015c22:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015c26:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 8015c28:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8015c2c:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d050      	beq.n	8015cd4 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8015c32:	2302      	movs	r3, #2
 8015c34:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 8015c38:	b189      	cbz	r1, 8015c5e <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 8015c3a:	4b28      	ldr	r3, [pc, #160]	; (8015cdc <start_pass_2_quant+0xbc>)
 8015c3c:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8015c3e:	4b28      	ldr	r3, [pc, #160]	; (8015ce0 <start_pass_2_quant+0xc0>)
 8015c40:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8015c42:	1f34      	subs	r4, r6, #4
 8015c44:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 8015c46:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015c4e:	2100      	movs	r1, #0
 8015c50:	f013 ffa2 	bl	8029b98 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8015c54:	42a6      	cmp	r6, r4
 8015c56:	d1f6      	bne.n	8015c46 <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	61eb      	str	r3, [r5, #28]
}
 8015c5c:	e02f      	b.n	8015cbe <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8015c5e:	4b21      	ldr	r3, [pc, #132]	; (8015ce4 <start_pass_2_quant+0xc4>)
 8015c60:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8015c62:	4b21      	ldr	r3, [pc, #132]	; (8015ce8 <start_pass_2_quant+0xc8>)
 8015c64:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 8015c66:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	dc29      	bgt.n	8015cc2 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8015c6e:	223a      	movs	r2, #58	; 0x3a
 8015c70:	6823      	ldr	r3, [r4, #0]
 8015c72:	615a      	str	r2, [r3, #20]
 8015c74:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8015c76:	619a      	str	r2, [r3, #24]
 8015c78:	4620      	mov	r0, r4
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8015c7e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015c82:	2b02      	cmp	r3, #2
 8015c84:	d118      	bne.n	8015cb8 <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8015c86:	2306      	movs	r3, #6
 8015c88:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015c8a:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8015c8c:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8015c8e:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8015c90:	b93b      	cbnz	r3, 8015ca2 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8015c92:	6863      	ldr	r3, [r4, #4]
 8015c94:	2101      	movs	r1, #1
 8015c96:	4620      	mov	r0, r4
 8015c98:	9201      	str	r2, [sp, #4]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	4798      	blx	r3
 8015c9e:	9a01      	ldr	r2, [sp, #4]
 8015ca0:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8015ca2:	2100      	movs	r1, #0
 8015ca4:	6a28      	ldr	r0, [r5, #32]
 8015ca6:	f013 ff77 	bl	8029b98 <memset>
      if (cquantize->error_limiter == NULL)
 8015caa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015cac:	b913      	cbnz	r3, 8015cb4 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f7ff ff78 	bl	8015ba4 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 8015cb8:	69eb      	ldr	r3, [r5, #28]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d1c1      	bne.n	8015c42 <start_pass_2_quant+0x22>
}
 8015cbe:	b002      	add	sp, #8
 8015cc0:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8015cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015cc6:	ddda      	ble.n	8015c7e <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8015cc8:	223b      	movs	r2, #59	; 0x3b
 8015cca:	6823      	ldr	r3, [r4, #0]
 8015ccc:	615a      	str	r2, [r3, #20]
 8015cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015cd2:	e7d0      	b.n	8015c76 <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8015cd4:	2900      	cmp	r1, #0
 8015cd6:	d1b0      	bne.n	8015c3a <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 8015cd8:	4b04      	ldr	r3, [pc, #16]	; (8015cec <start_pass_2_quant+0xcc>)
 8015cda:	e7c1      	b.n	8015c60 <start_pass_2_quant+0x40>
 8015cdc:	08015615 	.word	0x08015615
 8015ce0:	08015f1b 	.word	0x08015f1b
 8015ce4:	080159a3 	.word	0x080159a3
 8015ce8:	08015c13 	.word	0x08015c13
 8015cec:	08015921 	.word	0x08015921

08015cf0 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8015cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hist3d histogram = cquantize->histogram;
 8015cf4:	f8d0 c018 	ldr.w	ip, [r0, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015cf8:	690b      	ldr	r3, [r1, #16]
 8015cfa:	694d      	ldr	r5, [r1, #20]
 8015cfc:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8015d00:	9301      	str	r3, [sp, #4]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8015d02:	e9d1 7000 	ldrd	r7, r0, [r1]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015d06:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
  if (c0max > c0min)
 8015d0a:	4287      	cmp	r7, r0
 8015d0c:	463b      	mov	r3, r7
 8015d0e:	db34      	blt.n	8015d7a <update_box.isra.0+0x8a>
  if (c1max > c1min)
 8015d10:	45a6      	cmp	lr, r4
 8015d12:	4672      	mov	r2, lr
 8015d14:	db6e      	blt.n	8015df4 <update_box.isra.0+0x104>
  if (c2max > c2min)
 8015d16:	9e01      	ldr	r6, [sp, #4]
 8015d18:	42ae      	cmp	r6, r5
 8015d1a:	f2c0 80c1 	blt.w	8015ea0 <update_box.isra.0+0x1b0>
 have_c2min:
 8015d1e:	46b6      	mov	lr, r6
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8015d20:	1aa6      	subs	r6, r4, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8015d22:	1ac7      	subs	r7, r0, r3
 8015d24:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8015d28:	ea4f 08c6 	mov.w	r8, r6, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8015d2c:	00ff      	lsls	r7, r7, #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8015d2e:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8015d32:	eba5 060e 	sub.w	r6, r5, lr
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015d36:	fb08 f808 	mul.w	r8, r8, r8
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8015d3a:	0136      	lsls	r6, r6, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015d3c:	fb07 8707 	mla	r7, r7, r7, r8
  ccount = 0;
 8015d40:	f04f 0800 	mov.w	r8, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015d44:	fb06 7606 	mla	r6, r6, r6, r7
 8015d48:	618e      	str	r6, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 8015d4a:	4298      	cmp	r0, r3
 8015d4c:	f280 80e3 	bge.w	8015f16 <update_box.isra.0+0x226>
  boxp->colorcount = ccount;
 8015d50:	f8c1 801c 	str.w	r8, [r1, #28]
}
 8015d54:	b003      	add	sp, #12
 8015d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	histp = & histogram[c0][c1][c2min];
 8015d5a:	eb08 1a89 	add.w	sl, r8, r9, lsl #6
 8015d5e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015d62:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015d64:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (c2 = c2min; c2 <= c2max; c2++)
 8015d68:	4555      	cmp	r5, sl
 8015d6a:	da08      	bge.n	8015d7e <update_box.isra.0+0x8e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8015d6c:	f109 0901 	add.w	r9, r9, #1
 8015d70:	454c      	cmp	r4, r9
 8015d72:	daf2      	bge.n	8015d5a <update_box.isra.0+0x6a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8015d74:	3301      	adds	r3, #1
 8015d76:	4298      	cmp	r0, r3
 8015d78:	db0f      	blt.n	8015d9a <update_box.isra.0+0xaa>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015d7a:	46f1      	mov	r9, lr
 8015d7c:	e7f8      	b.n	8015d70 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8015d7e:	f832 bb02 	ldrh.w	fp, [r2], #2
 8015d82:	f1bb 0f00 	cmp.w	fp, #0
 8015d86:	d005      	beq.n	8015d94 <update_box.isra.0+0xa4>
  if (c0max > c0min)
 8015d88:	4298      	cmp	r0, r3
	    boxp->c0min = c0min = c0;
 8015d8a:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8015d8c:	ddc0      	ble.n	8015d10 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015d8e:	4607      	mov	r7, r0
 8015d90:	46f1      	mov	r9, lr
 8015d92:	e00f      	b.n	8015db4 <update_box.isra.0+0xc4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015d94:	f10a 0a01 	add.w	sl, sl, #1
 8015d98:	e7e6      	b.n	8015d68 <update_box.isra.0+0x78>
 have_c0min:
 8015d9a:	463b      	mov	r3, r7
 8015d9c:	e7f7      	b.n	8015d8e <update_box.isra.0+0x9e>
	histp = & histogram[c0][c1][c2min];
 8015d9e:	eb08 1a89 	add.w	sl, r8, r9, lsl #6
 8015da2:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 8015da6:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015da8:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (c2 = c2min; c2 <= c2max; c2++)
 8015dac:	4555      	cmp	r5, sl
 8015dae:	da07      	bge.n	8015dc0 <update_box.isra.0+0xd0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8015db0:	f109 0901 	add.w	r9, r9, #1
 8015db4:	454c      	cmp	r4, r9
 8015db6:	daf2      	bge.n	8015d9e <update_box.isra.0+0xae>
    for (c0 = c0max; c0 >= c0min; c0--)
 8015db8:	3f01      	subs	r7, #1
 8015dba:	429f      	cmp	r7, r3
 8015dbc:	dba8      	blt.n	8015d10 <update_box.isra.0+0x20>
 8015dbe:	e7e7      	b.n	8015d90 <update_box.isra.0+0xa0>
	  if (*histp++ != 0) {
 8015dc0:	f832 bb02 	ldrh.w	fp, [r2], #2
 8015dc4:	f1bb 0f00 	cmp.w	fp, #0
 8015dc8:	d002      	beq.n	8015dd0 <update_box.isra.0+0xe0>
	    goto have_c0max;
 8015dca:	4638      	mov	r0, r7
	    boxp->c0max = c0max = c0;
 8015dcc:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8015dce:	e79f      	b.n	8015d10 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015dd0:	f10a 0a01 	add.w	sl, sl, #1
 8015dd4:	e7ea      	b.n	8015dac <update_box.isra.0+0xbc>
	histp = & histogram[c0][c1][c2min];
 8015dd6:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015dda:	f8dd a004 	ldr.w	sl, [sp, #4]
	histp = & histogram[c0][c1][c2min];
 8015dde:	eb07 060b 	add.w	r6, r7, fp
	for (c2 = c2min; c2 <= c2max; c2++)
 8015de2:	4555      	cmp	r5, sl
 8015de4:	da0a      	bge.n	8015dfc <update_box.isra.0+0x10c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015de6:	f109 0901 	add.w	r9, r9, #1
 8015dea:	4581      	cmp	r9, r0
 8015dec:	ddf3      	ble.n	8015dd6 <update_box.isra.0+0xe6>
    for (c1 = c1min; c1 <= c1max; c1++)
 8015dee:	3201      	adds	r2, #1
 8015df0:	4294      	cmp	r4, r2
 8015df2:	db11      	blt.n	8015e18 <update_box.isra.0+0x128>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015df4:	4699      	mov	r9, r3
	histp = & histogram[c0][c1][c2min];
 8015df6:	eb08 1b82 	add.w	fp, r8, r2, lsl #6
 8015dfa:	e7f6      	b.n	8015dea <update_box.isra.0+0xfa>
	  if (*histp++ != 0) {
 8015dfc:	f836 7b02 	ldrh.w	r7, [r6], #2
 8015e00:	b13f      	cbz	r7, 8015e12 <update_box.isra.0+0x122>
  if (c1max > c1min)
 8015e02:	4294      	cmp	r4, r2
	    boxp->c1min = c1min = c1;
 8015e04:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8015e06:	dd86      	ble.n	8015d16 <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015e08:	46a6      	mov	lr, r4
 8015e0a:	4699      	mov	r9, r3
	histp = & histogram[c0][c1][c2min];
 8015e0c:	eb08 1b8e 	add.w	fp, r8, lr, lsl #6
 8015e10:	e00e      	b.n	8015e30 <update_box.isra.0+0x140>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015e12:	f10a 0a01 	add.w	sl, sl, #1
 8015e16:	e7e4      	b.n	8015de2 <update_box.isra.0+0xf2>
 have_c1min:
 8015e18:	4672      	mov	r2, lr
 8015e1a:	e7f5      	b.n	8015e08 <update_box.isra.0+0x118>
	histp = & histogram[c0][c1][c2min];
 8015e1c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015e20:	f8dd a004 	ldr.w	sl, [sp, #4]
	histp = & histogram[c0][c1][c2min];
 8015e24:	eb07 060b 	add.w	r6, r7, fp
	for (c2 = c2min; c2 <= c2max; c2++)
 8015e28:	4555      	cmp	r5, sl
 8015e2a:	da09      	bge.n	8015e40 <update_box.isra.0+0x150>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015e2c:	f109 0901 	add.w	r9, r9, #1
 8015e30:	4548      	cmp	r0, r9
 8015e32:	daf3      	bge.n	8015e1c <update_box.isra.0+0x12c>
    for (c1 = c1max; c1 >= c1min; c1--)
 8015e34:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015e38:	4596      	cmp	lr, r2
 8015e3a:	f6ff af6c 	blt.w	8015d16 <update_box.isra.0+0x26>
 8015e3e:	e7e4      	b.n	8015e0a <update_box.isra.0+0x11a>
	  if (*histp++ != 0) {
 8015e40:	f836 7b02 	ldrh.w	r7, [r6], #2
 8015e44:	b11f      	cbz	r7, 8015e4e <update_box.isra.0+0x15e>
	    goto have_c1max;
 8015e46:	4674      	mov	r4, lr
	    boxp->c1max = c1max = c1;
 8015e48:	f8c1 e00c 	str.w	lr, [r1, #12]
	    goto have_c1max;
 8015e4c:	e763      	b.n	8015d16 <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015e4e:	f10a 0a01 	add.w	sl, sl, #1
 8015e52:	e7e9      	b.n	8015e28 <update_box.isra.0+0x138>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015e54:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
 8015e58:	4691      	mov	r9, r2
 8015e5a:	4457      	add	r7, sl
 8015e5c:	45a1      	cmp	r9, r4
 8015e5e:	dd0b      	ble.n	8015e78 <update_box.isra.0+0x188>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015e60:	f108 0801 	add.w	r8, r8, #1
 8015e64:	4540      	cmp	r0, r8
 8015e66:	daf5      	bge.n	8015e54 <update_box.isra.0+0x164>
    for (c2 = c2min; c2 <= c2max; c2++)
 8015e68:	f10e 0e01 	add.w	lr, lr, #1
 8015e6c:	4575      	cmp	r5, lr
 8015e6e:	db1a      	blt.n	8015ea6 <update_box.isra.0+0x1b6>
 8015e70:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015e74:	4698      	mov	r8, r3
 8015e76:	e7f5      	b.n	8015e64 <update_box.isra.0+0x174>
	  if (*histp != 0) {
 8015e78:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 8015e7c:	f837 b00b 	ldrh.w	fp, [r7, fp]
 8015e80:	f1bb 0f00 	cmp.w	fp, #0
 8015e84:	d009      	beq.n	8015e9a <update_box.isra.0+0x1aa>
  if (c2max > c2min)
 8015e86:	4575      	cmp	r5, lr
	    boxp->c2min = c2min = c2;
 8015e88:	f8c1 e010 	str.w	lr, [r1, #16]
  if (c2max > c2min)
 8015e8c:	f77f af48 	ble.w	8015d20 <update_box.isra.0+0x30>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015e90:	462f      	mov	r7, r5
 8015e92:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8015e96:	4698      	mov	r8, r3
 8015e98:	e010      	b.n	8015ebc <update_box.isra.0+0x1cc>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015e9a:	f109 0901 	add.w	r9, r9, #1
 8015e9e:	e7dd      	b.n	8015e5c <update_box.isra.0+0x16c>
 8015ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015ea4:	e7e4      	b.n	8015e70 <update_box.isra.0+0x180>
 have_c2min:
 8015ea6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015eaa:	e7f1      	b.n	8015e90 <update_box.isra.0+0x1a0>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015eac:	f85c 6028 	ldr.w	r6, [ip, r8, lsl #2]
 8015eb0:	4691      	mov	r9, r2
 8015eb2:	4456      	add	r6, sl
 8015eb4:	454c      	cmp	r4, r9
 8015eb6:	da08      	bge.n	8015eca <update_box.isra.0+0x1da>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015eb8:	f108 0801 	add.w	r8, r8, #1
 8015ebc:	4540      	cmp	r0, r8
 8015ebe:	daf5      	bge.n	8015eac <update_box.isra.0+0x1bc>
    for (c2 = c2max; c2 >= c2min; c2--)
 8015ec0:	3f01      	subs	r7, #1
 8015ec2:	4577      	cmp	r7, lr
 8015ec4:	f6ff af2c 	blt.w	8015d20 <update_box.isra.0+0x30>
 8015ec8:	e7e3      	b.n	8015e92 <update_box.isra.0+0x1a2>
	  if (*histp != 0) {
 8015eca:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 8015ece:	f836 b00b 	ldrh.w	fp, [r6, fp]
 8015ed2:	f1bb 0f00 	cmp.w	fp, #0
 8015ed6:	d002      	beq.n	8015ede <update_box.isra.0+0x1ee>
	    goto have_c2max;
 8015ed8:	463d      	mov	r5, r7
	    boxp->c2max = c2max = c2;
 8015eda:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 8015edc:	e720      	b.n	8015d20 <update_box.isra.0+0x30>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015ede:	f109 0901 	add.w	r9, r9, #1
 8015ee2:	e7e7      	b.n	8015eb4 <update_box.isra.0+0x1c4>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8015ee4:	eb0a 1987 	add.w	r9, sl, r7, lsl #6
 8015ee8:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8015eec:	f1a9 0902 	sub.w	r9, r9, #2
 8015ef0:	444e      	add	r6, r9
 8015ef2:	46f1      	mov	r9, lr
 8015ef4:	454d      	cmp	r5, r9
 8015ef6:	da04      	bge.n	8015f02 <update_box.isra.0+0x212>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8015ef8:	3701      	adds	r7, #1
 8015efa:	42bc      	cmp	r4, r7
 8015efc:	daf2      	bge.n	8015ee4 <update_box.isra.0+0x1f4>
  for (c0 = c0min; c0 <= c0max; c0++)
 8015efe:	3301      	adds	r3, #1
 8015f00:	e723      	b.n	8015d4a <update_box.isra.0+0x5a>
	if (*histp != 0) {
 8015f02:	f836 bf02 	ldrh.w	fp, [r6, #2]!
 8015f06:	f1bb 0f00 	cmp.w	fp, #0
 8015f0a:	d001      	beq.n	8015f10 <update_box.isra.0+0x220>
	  ccount++;
 8015f0c:	f108 0801 	add.w	r8, r8, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8015f10:	f109 0901 	add.w	r9, r9, #1
 8015f14:	e7ee      	b.n	8015ef4 <update_box.isra.0+0x204>
 8015f16:	4617      	mov	r7, r2
 8015f18:	e7ef      	b.n	8015efa <update_box.isra.0+0x20a>

08015f1a <finish_pass1>:
{
 8015f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015f1e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015f22:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015f24:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 8015f26:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015f2a:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8015f2c:	691b      	ldr	r3, [r3, #16]
{
 8015f2e:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8015f30:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 8015f34:	9b02      	ldr	r3, [sp, #8]
 8015f36:	695b      	ldr	r3, [r3, #20]
 8015f38:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015f3a:	9a01      	ldr	r2, [sp, #4]
 8015f3c:	6843      	ldr	r3, [r0, #4]
 8015f3e:	0152      	lsls	r2, r2, #5
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8015f44:	2300      	movs	r3, #0
 8015f46:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8015f48:	213f      	movs	r1, #63	; 0x3f
  boxlist[0].c1min = 0;
 8015f4a:	6083      	str	r3, [r0, #8]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015f4c:	4604      	mov	r4, r0
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8015f4e:	6142      	str	r2, [r0, #20]
 8015f50:	46a0      	mov	r8, r4
  update_box(cinfo, & boxlist[0]);
 8015f52:	4627      	mov	r7, r4
  boxlist[0].c2min = 0;
 8015f54:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8015f58:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8015f5c:	9b00      	ldr	r3, [sp, #0]
 8015f5e:	4601      	mov	r1, r0
 8015f60:	f8d3 a1e0 	ldr.w	sl, [r3, #480]	; 0x1e0
 8015f64:	4650      	mov	r0, sl
 8015f66:	f7ff fec3 	bl	8015cf0 <update_box.isra.0>
  while (numboxes < desired_colors) {
 8015f6a:	9b01      	ldr	r3, [sp, #4]
 8015f6c:	455b      	cmp	r3, fp
 8015f6e:	dc24      	bgt.n	8015fba <finish_pass1+0xa0>
 8015f70:	2100      	movs	r1, #0
  hist3d histogram = cquantize->histogram;
 8015f72:	9b00      	ldr	r3, [sp, #0]
 8015f74:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8015f78:	699b      	ldr	r3, [r3, #24]
 8015f7a:	9303      	str	r3, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8015f7c:	e9d8 7300 	ldrd	r7, r3, [r8]
 8015f80:	9304      	str	r3, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f86:	9305      	str	r3, [sp, #20]
 8015f88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f8c:	9306      	str	r3, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015f8e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015f92:	9301      	str	r3, [sp, #4]
 8015f94:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015f98:	9307      	str	r3, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 8015f9a:	9b01      	ldr	r3, [sp, #4]
 8015f9c:	005b      	lsls	r3, r3, #1
 8015f9e:	9309      	str	r3, [sp, #36]	; 0x24
  long c2total = 0;
 8015fa0:	2300      	movs	r3, #0
  long c1total = 0;
 8015fa2:	469a      	mov	sl, r3
  long c0total = 0;
 8015fa4:	4699      	mov	r9, r3
  long total = 0;
 8015fa6:	461a      	mov	r2, r3
  for (c0 = c0min; c0 <= c0max; c0++)
 8015fa8:	9804      	ldr	r0, [sp, #16]
 8015faa:	42b8      	cmp	r0, r7
 8015fac:	f2c0 8097 	blt.w	80160de <finish_pass1+0x1c4>
 8015fb0:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8015fb2:	9e05      	ldr	r6, [sp, #20]
 8015fb4:	3004      	adds	r0, #4
 8015fb6:	9008      	str	r0, [sp, #32]
 8015fb8:	e07b      	b.n	80160b2 <finish_pass1+0x198>
    if (numboxes*2 <= desired_colors) {
 8015fba:	9b01      	ldr	r3, [sp, #4]
 8015fbc:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8015fc0:	db4e      	blt.n	8016060 <finish_pass1+0x146>
  boxptr which = NULL;
 8015fc2:	2100      	movs	r1, #0
 8015fc4:	4622      	mov	r2, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015fc6:	4608      	mov	r0, r1
  register long maxc = 0;
 8015fc8:	460e      	mov	r6, r1
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 8015fca:	69d3      	ldr	r3, [r2, #28]
 8015fcc:	42b3      	cmp	r3, r6
 8015fce:	dd04      	ble.n	8015fda <finish_pass1+0xc0>
 8015fd0:	6995      	ldr	r5, [r2, #24]
 8015fd2:	2d00      	cmp	r5, #0
 8015fd4:	bfc4      	itt	gt
 8015fd6:	4611      	movgt	r1, r2
 8015fd8:	461e      	movgt	r6, r3
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015fda:	3001      	adds	r0, #1
 8015fdc:	3220      	adds	r2, #32
 8015fde:	4583      	cmp	fp, r0
 8015fe0:	d1f3      	bne.n	8015fca <finish_pass1+0xb0>
    if (b1 == NULL)		/* no splittable boxes left! */
 8015fe2:	2900      	cmp	r1, #0
 8015fe4:	d0c5      	beq.n	8015f72 <finish_pass1+0x58>
    b2 = &boxlist[numboxes];	/* where new box will go */
 8015fe6:	f107 0320 	add.w	r3, r7, #32
 8015fea:	ee07 3a90 	vmov	s15, r3
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 8015fee:	684b      	ldr	r3, [r1, #4]
 8015ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8015ff2:	68ca      	ldr	r2, [r1, #12]
 8015ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015ff6:	694a      	ldr	r2, [r1, #20]
 8015ff8:	637a      	str	r2, [r7, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8015ffa:	680a      	ldr	r2, [r1, #0]
 8015ffc:	623a      	str	r2, [r7, #32]
 8015ffe:	688a      	ldr	r2, [r1, #8]
 8016000:	62ba      	str	r2, [r7, #40]	; 0x28
 8016002:	6908      	ldr	r0, [r1, #16]
 8016004:	6338      	str	r0, [r7, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8016006:	680a      	ldr	r2, [r1, #0]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016008:	688e      	ldr	r6, [r1, #8]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 801600a:	9203      	str	r2, [sp, #12]
 801600c:	1a9a      	subs	r2, r3, r2
 801600e:	ea4f 09c2 	mov.w	r9, r2, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016012:	68ca      	ldr	r2, [r1, #12]
 8016014:	9204      	str	r2, [sp, #16]
 8016016:	1b92      	subs	r2, r2, r6
 8016018:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 801601c:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016020:	694a      	ldr	r2, [r1, #20]
 8016022:	eba2 0e00 	sub.w	lr, r2, r0
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016026:	ebbc 1f0e 	cmp.w	ip, lr, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801602a:	ea4f 150e 	mov.w	r5, lr, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 801602e:	f2c0 808a 	blt.w	8016146 <finish_pass1+0x22c>
    if (c0 > cmax) { n = 0; }
 8016032:	45e1      	cmp	r9, ip
 8016034:	dd23      	ble.n	801607e <finish_pass1+0x164>
      lb = (b1->c0max + b1->c0min) / 2;
 8016036:	9a03      	ldr	r2, [sp, #12]
 8016038:	4413      	add	r3, r2
 801603a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801603e:	105b      	asrs	r3, r3, #1
      b1->c0max = lb;
 8016040:	604b      	str	r3, [r1, #4]
      b2->c0min = lb+1;
 8016042:	3301      	adds	r3, #1
 8016044:	623b      	str	r3, [r7, #32]
    update_box(cinfo, b1);
 8016046:	4650      	mov	r0, sl
    numboxes++;
 8016048:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 801604c:	f7ff fe50 	bl	8015cf0 <update_box.isra.0>
    update_box(cinfo, b2);
 8016050:	ee17 1a90 	vmov	r1, s15
 8016054:	4650      	mov	r0, sl
    numboxes++;
 8016056:	ee17 7a90 	vmov	r7, s15
    update_box(cinfo, b2);
 801605a:	f7ff fe49 	bl	8015cf0 <update_box.isra.0>
    numboxes++;
 801605e:	e784      	b.n	8015f6a <finish_pass1+0x50>
  boxptr which = NULL;
 8016060:	2100      	movs	r1, #0
 8016062:	4623      	mov	r3, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016064:	460a      	mov	r2, r1
  register INT32 maxv = 0;
 8016066:	4608      	mov	r0, r1
    if (boxp->volume > maxv) {
 8016068:	699e      	ldr	r6, [r3, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801606a:	3201      	adds	r2, #1
    if (boxp->volume > maxv) {
 801606c:	4286      	cmp	r6, r0
 801606e:	bfc4      	itt	gt
 8016070:	4619      	movgt	r1, r3
 8016072:	4630      	movgt	r0, r6
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016074:	4593      	cmp	fp, r2
 8016076:	f103 0320 	add.w	r3, r3, #32
 801607a:	d1f5      	bne.n	8016068 <finish_pass1+0x14e>
 801607c:	e7b1      	b.n	8015fe2 <finish_pass1+0xc8>
      lb = (b1->c1max + b1->c1min) / 2;
 801607e:	9b04      	ldr	r3, [sp, #16]
 8016080:	4433      	add	r3, r6
 8016082:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 8016086:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 8016088:	60ce      	str	r6, [r1, #12]
      b2->c1min = lb+1;
 801608a:	3601      	adds	r6, #1
 801608c:	62be      	str	r6, [r7, #40]	; 0x28
      break;
 801608e:	e7da      	b.n	8016046 <finish_pass1+0x12c>
      histp = & histogram[c0][c1][c2min];
 8016090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016092:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8016096:	9c03      	ldr	r4, [sp, #12]
 8016098:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 801609c:	f10e 0e02 	add.w	lr, lr, #2
 80160a0:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 80160a4:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 80160a8:	4420      	add	r0, r4
      for (c2 = c2min; c2 <= c2max; c2++) {
 80160aa:	9c07      	ldr	r4, [sp, #28]
 80160ac:	4564      	cmp	r4, ip
 80160ae:	da05      	bge.n	80160bc <finish_pass1+0x1a2>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80160b0:	3601      	adds	r6, #1
 80160b2:	9806      	ldr	r0, [sp, #24]
 80160b4:	42b0      	cmp	r0, r6
 80160b6:	daeb      	bge.n	8016090 <finish_pass1+0x176>
  for (c0 = c0min; c0 <= c0max; c0++)
 80160b8:	3701      	adds	r7, #1
 80160ba:	e775      	b.n	8015fa8 <finish_pass1+0x8e>
	if ((count = *histp++) != 0) {
 80160bc:	f830 4b02 	ldrh.w	r4, [r0], #2
 80160c0:	b154      	cbz	r4, 80160d8 <finish_pass1+0x1be>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80160c2:	9d08      	ldr	r5, [sp, #32]
	  total += count;
 80160c4:	4422      	add	r2, r4
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 80160c6:	fb0e aa04 	mla	sl, lr, r4, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80160ca:	fb05 9904 	mla	r9, r5, r4, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 80160ce:	ea4f 05cc 	mov.w	r5, ip, lsl #3
 80160d2:	3504      	adds	r5, #4
 80160d4:	fb04 3305 	mla	r3, r4, r5, r3
      for (c2 = c2min; c2 <= c2max; c2++) {
 80160d8:	f10c 0c01 	add.w	ip, ip, #1
 80160dc:	e7e5      	b.n	80160aa <finish_pass1+0x190>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80160de:	9800      	ldr	r0, [sp, #0]
 80160e0:	eb09 0962 	add.w	r9, r9, r2, asr #1
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80160e4:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
  for (i = 0; i < numboxes; i++)
 80160e8:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80160ec:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 80160f0:	eb03 0362 	add.w	r3, r3, r2, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80160f4:	fb99 f9f2 	sdiv	r9, r9, r2
 80160f8:	6800      	ldr	r0, [r0, #0]
 80160fa:	f800 9001 	strb.w	r9, [r0, r1]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80160fe:	9800      	ldr	r0, [sp, #0]
 8016100:	fb9a faf2 	sdiv	sl, sl, r2
 8016104:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016108:	6840      	ldr	r0, [r0, #4]
 801610a:	f800 a001 	strb.w	sl, [r0, r1]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 801610e:	9800      	ldr	r0, [sp, #0]
 8016110:	fb93 f3f2 	sdiv	r3, r3, r2
 8016114:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016118:	6880      	ldr	r0, [r0, #8]
 801611a:	5443      	strb	r3, [r0, r1]
  for (i = 0; i < numboxes; i++)
 801611c:	3101      	adds	r1, #1
 801611e:	4559      	cmp	r1, fp
 8016120:	f47f af27 	bne.w	8015f72 <finish_pass1+0x58>
  cinfo->actual_number_of_colors = numboxes;
 8016124:	9b00      	ldr	r3, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016126:	2262      	movs	r2, #98	; 0x62
 8016128:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 801612a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016134:	685b      	ldr	r3, [r3, #4]
 8016136:	2101      	movs	r1, #1
 8016138:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 801613a:	2301      	movs	r3, #1
 801613c:	9a02      	ldr	r2, [sp, #8]
 801613e:	61d3      	str	r3, [r2, #28]
}
 8016140:	b00b      	add	sp, #44	; 0x2c
 8016142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8016146:	45a9      	cmp	r9, r5
 8016148:	f73f af75 	bgt.w	8016036 <finish_pass1+0x11c>
      lb = (b1->c2max + b1->c2min) / 2;
 801614c:	4402      	add	r2, r0
 801614e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016152:	1052      	asrs	r2, r2, #1
      b1->c2max = lb;
 8016154:	614a      	str	r2, [r1, #20]
      b2->c2min = lb+1;
 8016156:	3201      	adds	r2, #1
 8016158:	633a      	str	r2, [r7, #48]	; 0x30
      break;
 801615a:	e774      	b.n	8016046 <finish_pass1+0x12c>

0801615c <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 801615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801615e:	6843      	ldr	r3, [r0, #4]
 8016160:	222c      	movs	r2, #44	; 0x2c
 8016162:	2101      	movs	r1, #1
{
 8016164:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 801616a:	4b30      	ldr	r3, [pc, #192]	; (801622c <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 801616c:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016170:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 8016172:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8016174:	4b2e      	ldr	r3, [pc, #184]	; (8016230 <jinit_2pass_quantizer+0xd4>)
 8016176:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8016178:	2300      	movs	r3, #0
 801617a:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 801617c:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 801617e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016180:	2b03      	cmp	r3, #3
 8016182:	d005      	beq.n	8016190 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8016184:	6823      	ldr	r3, [r4, #0]
 8016186:	2230      	movs	r2, #48	; 0x30
 8016188:	4620      	mov	r0, r4
 801618a:	615a      	str	r2, [r3, #20]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8016190:	6863      	ldr	r3, [r4, #4]
 8016192:	2600      	movs	r6, #0
 8016194:	2280      	movs	r2, #128	; 0x80
 8016196:	2101      	movs	r1, #1
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	4620      	mov	r0, r4
 801619c:	4798      	blx	r3
 801619e:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 80161a0:	6863      	ldr	r3, [r4, #4]
 80161a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80161a6:	69af      	ldr	r7, [r5, #24]
 80161a8:	2101      	movs	r1, #1
 80161aa:	685b      	ldr	r3, [r3, #4]
 80161ac:	4620      	mov	r0, r4
 80161ae:	4798      	blx	r3
 80161b0:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 80161b2:	3604      	adds	r6, #4
 80161b4:	2e80      	cmp	r6, #128	; 0x80
 80161b6:	d1f3      	bne.n	80161a0 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 80161b8:	2301      	movs	r3, #1
 80161ba:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 80161bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d031      	beq.n	8016226 <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 80161c2:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 80161c4:	2e07      	cmp	r6, #7
 80161c6:	dc25      	bgt.n	8016214 <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 80161c8:	223a      	movs	r2, #58	; 0x3a
 80161ca:	6823      	ldr	r3, [r4, #0]
 80161cc:	615a      	str	r2, [r3, #20]
 80161ce:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80161d0:	619a      	str	r2, [r3, #24]
 80161d2:	4620      	mov	r0, r4
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 80161d8:	6863      	ldr	r3, [r4, #4]
 80161da:	4632      	mov	r2, r6
 80161dc:	2101      	movs	r1, #1
 80161de:	4620      	mov	r0, r4
 80161e0:	689f      	ldr	r7, [r3, #8]
 80161e2:	2303      	movs	r3, #3
 80161e4:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 80161e6:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 80161ea:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80161ee:	b1e3      	cbz	r3, 801622a <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 80161f0:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80161f2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80161f4:	4620      	mov	r0, r4
 80161f6:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 80161f8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80161fc:	2306      	movs	r3, #6
 80161fe:	435a      	muls	r2, r3
 8016200:	6863      	ldr	r3, [r4, #4]
 8016202:	320c      	adds	r2, #12
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	4798      	blx	r3
 8016208:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 801620a:	4620      	mov	r0, r4
  }
}
 801620c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016210:	f7ff bcc8 	b.w	8015ba4 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8016214:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016218:	ddde      	ble.n	80161d8 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801621a:	223b      	movs	r2, #59	; 0x3b
 801621c:	6823      	ldr	r3, [r4, #0]
 801621e:	615a      	str	r2, [r3, #20]
 8016220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016224:	e7d4      	b.n	80161d0 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8016226:	612b      	str	r3, [r5, #16]
 8016228:	e7df      	b.n	80161ea <jinit_2pass_quantizer+0x8e>
}
 801622a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801622c:	08015c21 	.word	0x08015c21
 8016230:	08015c15 	.word	0x08015c15

08016234 <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8016234:	1843      	adds	r3, r0, r1
 8016236:	3b01      	subs	r3, #1
}
 8016238:	fb93 f0f1 	sdiv	r0, r3, r1
 801623c:	4770      	bx	lr

0801623e <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 801623e:	1e4b      	subs	r3, r1, #1
 8016240:	4418      	add	r0, r3
  return a - (a % b);
 8016242:	fb90 f3f1 	sdiv	r3, r0, r1
 8016246:	fb01 0313 	mls	r3, r1, r3, r0
}
 801624a:	1ac0      	subs	r0, r0, r3
 801624c:	4770      	bx	lr

0801624e <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 801624e:	b570      	push	{r4, r5, r6, lr}
 8016250:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8016252:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8016256:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 801625a:	2e00      	cmp	r6, #0
 801625c:	dc00      	bgt.n	8016260 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 801625e:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016260:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8016262:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8016264:	f854 1b04 	ldr.w	r1, [r4], #4
 8016268:	f855 0b04 	ldr.w	r0, [r5], #4
 801626c:	f013 fd75 	bl	8029d5a <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016270:	e7f3      	b.n	801625a <jcopy_sample_rows+0xc>

08016272 <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8016272:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8016274:	01d2      	lsls	r2, r2, #7
 8016276:	4601      	mov	r1, r0
 8016278:	4618      	mov	r0, r3
 801627a:	f013 bd6e 	b.w	8029d5a <memcpy>

0801627e <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801627e:	8880      	ldrh	r0, [r0, #4]
 8016280:	4770      	bx	lr

08016282 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016282:	b570      	push	{r4, r5, r6, lr}
 8016284:	6803      	ldr	r3, [r0, #0]
 8016286:	460c      	mov	r4, r1
 8016288:	2100      	movs	r1, #0
 801628a:	4605      	mov	r5, r0
 801628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801628e:	4798      	blx	r3
 8016290:	4606      	mov	r6, r0
 8016292:	682b      	ldr	r3, [r5, #0]
 8016294:	4628      	mov	r0, r5
 8016296:	1ba4      	subs	r4, r4, r6
 8016298:	6a1b      	ldr	r3, [r3, #32]
 801629a:	b2a4      	uxth	r4, r4
 801629c:	4798      	blx	r3
 801629e:	fbb4 f0f0 	udiv	r0, r4, r0
 80162a2:	bd70      	pop	{r4, r5, r6, pc}

080162a4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80162a4:	2300      	movs	r3, #0
 80162a6:	8083      	strh	r3, [r0, #4]
 80162a8:	4770      	bx	lr

080162aa <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80162aa:	b510      	push	{r4, lr}
 80162ac:	6803      	ldr	r3, [r0, #0]
 80162ae:	4604      	mov	r4, r0
 80162b0:	8881      	ldrh	r1, [r0, #4]
 80162b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b4:	4798      	blx	r3
 80162b6:	88a3      	ldrh	r3, [r4, #4]
 80162b8:	3301      	adds	r3, #1
 80162ba:	80a3      	strh	r3, [r4, #4]
 80162bc:	bd10      	pop	{r4, pc}

080162be <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80162be:	6803      	ldr	r3, [r0, #0]
 80162c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162c2:	4718      	bx	r3

080162c4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80162c4:	4770      	bx	lr
	...

080162c8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80162c8:	4a02      	ldr	r2, [pc, #8]	; (80162d4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80162ca:	6002      	str	r2, [r0, #0]
 80162cc:	2200      	movs	r2, #0
 80162ce:	8082      	strh	r2, [r0, #4]
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	0802eb7c 	.word	0x0802eb7c

080162d8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80162d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80162da:	4770      	bx	lr

080162dc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80162dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80162de:	2000      	movs	r0, #0
 80162e0:	b12b      	cbz	r3, 80162ee <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80162e2:	b920      	cbnz	r0, 80162ee <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80162e4:	1a5a      	subs	r2, r3, r1
 80162e6:	699b      	ldr	r3, [r3, #24]
 80162e8:	4250      	negs	r0, r2
 80162ea:	4150      	adcs	r0, r2
 80162ec:	e7f8      	b.n	80162e0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80162ee:	4770      	bx	lr

080162f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80162f0:	2300      	movs	r3, #0
 80162f2:	6148      	str	r0, [r1, #20]
 80162f4:	618b      	str	r3, [r1, #24]
 80162f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80162f8:	b913      	cbnz	r3, 8016300 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80162fa:	6281      	str	r1, [r0, #40]	; 0x28
 80162fc:	4770      	bx	lr
 80162fe:	4613      	mov	r3, r2
 8016300:	699a      	ldr	r2, [r3, #24]
 8016302:	2a00      	cmp	r2, #0
 8016304:	d1fb      	bne.n	80162fe <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016306:	6199      	str	r1, [r3, #24]
 8016308:	4770      	bx	lr

0801630a <_ZN8touchgfx9Container9removeAllEv>:
 801630a:	2200      	movs	r2, #0
 801630c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801630e:	b123      	cbz	r3, 801631a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016310:	6999      	ldr	r1, [r3, #24]
 8016312:	6281      	str	r1, [r0, #40]	; 0x28
 8016314:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016318:	e7f8      	b.n	801630c <_ZN8touchgfx9Container9removeAllEv+0x2>
 801631a:	4770      	bx	lr

0801631c <_ZN8touchgfx9Container6unlinkEv>:
 801631c:	2300      	movs	r3, #0
 801631e:	6283      	str	r3, [r0, #40]	; 0x28
 8016320:	4770      	bx	lr

08016322 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016322:	2200      	movs	r2, #0
 8016324:	8002      	strh	r2, [r0, #0]
 8016326:	8042      	strh	r2, [r0, #2]
 8016328:	8082      	strh	r2, [r0, #4]
 801632a:	80c2      	strh	r2, [r0, #6]
 801632c:	4770      	bx	lr

0801632e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801632e:	b570      	push	{r4, r5, r6, lr}
 8016330:	460d      	mov	r5, r1
 8016332:	4616      	mov	r6, r2
 8016334:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016336:	b13c      	cbz	r4, 8016348 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016338:	6823      	ldr	r3, [r4, #0]
 801633a:	4620      	mov	r0, r4
 801633c:	4632      	mov	r2, r6
 801633e:	4629      	mov	r1, r5
 8016340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016342:	4798      	blx	r3
 8016344:	69a4      	ldr	r4, [r4, #24]
 8016346:	e7f6      	b.n	8016336 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016348:	bd70      	pop	{r4, r5, r6, pc}

0801634a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801634a:	b538      	push	{r3, r4, r5, lr}
 801634c:	460d      	mov	r5, r1
 801634e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016350:	b134      	cbz	r4, 8016360 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016352:	682b      	ldr	r3, [r5, #0]
 8016354:	4621      	mov	r1, r4
 8016356:	4628      	mov	r0, r5
 8016358:	689b      	ldr	r3, [r3, #8]
 801635a:	4798      	blx	r3
 801635c:	69a4      	ldr	r4, [r4, #24]
 801635e:	e7f7      	b.n	8016350 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016360:	bd38      	pop	{r3, r4, r5, pc}

08016362 <_ZN8touchgfx9ContainerD1Ev>:
 8016362:	4770      	bx	lr

08016364 <_ZN8touchgfx9ContainerD0Ev>:
 8016364:	b510      	push	{r4, lr}
 8016366:	4604      	mov	r4, r0
 8016368:	212c      	movs	r1, #44	; 0x2c
 801636a:	f013 f92d 	bl	80295c8 <_ZdlPvj>
 801636e:	4620      	mov	r0, r4
 8016370:	bd10      	pop	{r4, pc}

08016372 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016372:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016374:	b19b      	cbz	r3, 801639e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016376:	428b      	cmp	r3, r1
 8016378:	d109      	bne.n	801638e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801637a:	699a      	ldr	r2, [r3, #24]
 801637c:	2100      	movs	r1, #0
 801637e:	6159      	str	r1, [r3, #20]
 8016380:	6282      	str	r2, [r0, #40]	; 0x28
 8016382:	b902      	cbnz	r2, 8016386 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016384:	4770      	bx	lr
 8016386:	6199      	str	r1, [r3, #24]
 8016388:	4770      	bx	lr
 801638a:	4613      	mov	r3, r2
 801638c:	b13a      	cbz	r2, 801639e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801638e:	699a      	ldr	r2, [r3, #24]
 8016390:	428a      	cmp	r2, r1
 8016392:	d1fa      	bne.n	801638a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016394:	698a      	ldr	r2, [r1, #24]
 8016396:	619a      	str	r2, [r3, #24]
 8016398:	2300      	movs	r3, #0
 801639a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801639e:	4770      	bx	lr

080163a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80163a0:	b410      	push	{r4}
 80163a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80163a4:	4604      	mov	r4, r0
 80163a6:	b92b      	cbnz	r3, 80163b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80163a8:	6803      	ldr	r3, [r0, #0]
 80163aa:	4611      	mov	r1, r2
 80163ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80163b2:	4718      	bx	r3
 80163b4:	b941      	cbnz	r1, 80163c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80163b6:	6193      	str	r3, [r2, #24]
 80163b8:	6282      	str	r2, [r0, #40]	; 0x28
 80163ba:	6154      	str	r4, [r2, #20]
 80163bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163c0:	4770      	bx	lr
 80163c2:	4603      	mov	r3, r0
 80163c4:	2800      	cmp	r0, #0
 80163c6:	d0f9      	beq.n	80163bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80163c8:	4299      	cmp	r1, r3
 80163ca:	6998      	ldr	r0, [r3, #24]
 80163cc:	d1f9      	bne.n	80163c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80163ce:	6190      	str	r0, [r2, #24]
 80163d0:	618a      	str	r2, [r1, #24]
 80163d2:	e7f2      	b.n	80163ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080163d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80163d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d8:	461f      	mov	r7, r3
 80163da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80163de:	460d      	mov	r5, r1
 80163e0:	4616      	mov	r6, r2
 80163e2:	b103      	cbz	r3, 80163e6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80163e4:	6038      	str	r0, [r7, #0]
 80163e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80163e8:	b314      	cbz	r4, 8016430 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80163ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80163ee:	b1eb      	cbz	r3, 801642c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80163f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80163f4:	428d      	cmp	r5, r1
 80163f6:	db19      	blt.n	801642c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80163f8:	b289      	uxth	r1, r1
 80163fa:	8923      	ldrh	r3, [r4, #8]
 80163fc:	440b      	add	r3, r1
 80163fe:	b21b      	sxth	r3, r3
 8016400:	429d      	cmp	r5, r3
 8016402:	da13      	bge.n	801642c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016404:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016408:	4296      	cmp	r6, r2
 801640a:	db0f      	blt.n	801642c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801640c:	b292      	uxth	r2, r2
 801640e:	8963      	ldrh	r3, [r4, #10]
 8016410:	4413      	add	r3, r2
 8016412:	b21b      	sxth	r3, r3
 8016414:	429e      	cmp	r6, r3
 8016416:	da09      	bge.n	801642c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016418:	6823      	ldr	r3, [r4, #0]
 801641a:	1ab2      	subs	r2, r6, r2
 801641c:	1a69      	subs	r1, r5, r1
 801641e:	4620      	mov	r0, r4
 8016420:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016424:	b212      	sxth	r2, r2
 8016426:	463b      	mov	r3, r7
 8016428:	b209      	sxth	r1, r1
 801642a:	47c0      	blx	r8
 801642c:	69a4      	ldr	r4, [r4, #24]
 801642e:	e7db      	b.n	80163e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016434 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016438:	4c6d      	ldr	r4, [pc, #436]	; (80165f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801643a:	b0a1      	sub	sp, #132	; 0x84
 801643c:	4606      	mov	r6, r0
 801643e:	6824      	ldr	r4, [r4, #0]
 8016440:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016442:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016446:	2400      	movs	r4, #0
 8016448:	9303      	str	r3, [sp, #12]
 801644a:	802c      	strh	r4, [r5, #0]
 801644c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801644e:	802c      	strh	r4, [r5, #0]
 8016450:	601c      	str	r4, [r3, #0]
 8016452:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016456:	f7ff ffbd 	bl	80163d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801645a:	f1b9 0f03 	cmp.w	r9, #3
 801645e:	f340 80c1 	ble.w	80165e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8016462:	4631      	mov	r1, r6
 8016464:	a80c      	add	r0, sp, #48	; 0x30
 8016466:	f004 f889 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801646a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801646e:	9306      	str	r3, [sp, #24]
 8016470:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016474:	9307      	str	r3, [sp, #28]
 8016476:	9b03      	ldr	r3, [sp, #12]
 8016478:	f8d3 a000 	ldr.w	sl, [r3]
 801647c:	f1ba 0f00 	cmp.w	sl, #0
 8016480:	f000 80b3 	beq.w	80165ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8016484:	4651      	mov	r1, sl
 8016486:	a810      	add	r0, sp, #64	; 0x40
 8016488:	f004 f878 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801648c:	2002      	movs	r0, #2
 801648e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8016492:	9b01      	ldr	r3, [sp, #4]
 8016494:	9a06      	ldr	r2, [sp, #24]
 8016496:	fb91 f1f0 	sdiv	r1, r1, r0
 801649a:	189d      	adds	r5, r3, r2
 801649c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80164a0:	9a07      	ldr	r2, [sp, #28]
 80164a2:	4419      	add	r1, r3
 80164a4:	9b02      	ldr	r3, [sp, #8]
 80164a6:	4413      	add	r3, r2
 80164a8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80164ac:	1a6d      	subs	r5, r5, r1
 80164ae:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80164b2:	fb92 f2f0 	sdiv	r2, r2, r0
 80164b6:	440a      	add	r2, r1
 80164b8:	1a9b      	subs	r3, r3, r2
 80164ba:	435b      	muls	r3, r3
 80164bc:	fb05 3505 	mla	r5, r5, r5, r3
 80164c0:	4f4c      	ldr	r7, [pc, #304]	; (80165f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80164c2:	ac10      	add	r4, sp, #64	; 0x40
 80164c4:	f1b9 0f0c 	cmp.w	r9, #12
 80164c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164d4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80164d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80164dc:	f04f 0303 	mov.w	r3, #3
 80164e0:	bfd8      	it	le
 80164e2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80164e6:	f04f 0400 	mov.w	r4, #0
 80164ea:	f8cd 9000 	str.w	r9, [sp]
 80164ee:	bfcc      	ite	gt
 80164f0:	4698      	movgt	r8, r3
 80164f2:	fb92 f8f3 	sdivle	r8, r2, r3
 80164f6:	1c63      	adds	r3, r4, #1
 80164f8:	aa10      	add	r2, sp, #64	; 0x40
 80164fa:	f004 0401 	and.w	r4, r4, #1
 80164fe:	f04f 0b00 	mov.w	fp, #0
 8016502:	9308      	str	r3, [sp, #32]
 8016504:	9b00      	ldr	r3, [sp, #0]
 8016506:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801650a:	fb93 f3f8 	sdiv	r3, r3, r8
 801650e:	3404      	adds	r4, #4
 8016510:	b29b      	uxth	r3, r3
 8016512:	9304      	str	r3, [sp, #16]
 8016514:	9a04      	ldr	r2, [sp, #16]
 8016516:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801651a:	fb13 f302 	smulbb	r3, r3, r2
 801651e:	9a01      	ldr	r2, [sp, #4]
 8016520:	b29b      	uxth	r3, r3
 8016522:	1899      	adds	r1, r3, r2
 8016524:	9305      	str	r3, [sp, #20]
 8016526:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801652a:	b209      	sxth	r1, r1
 801652c:	4299      	cmp	r1, r3
 801652e:	db4d      	blt.n	80165cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016530:	8932      	ldrh	r2, [r6, #8]
 8016532:	4413      	add	r3, r2
 8016534:	b21b      	sxth	r3, r3
 8016536:	4299      	cmp	r1, r3
 8016538:	da48      	bge.n	80165cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801653a:	9b04      	ldr	r3, [sp, #16]
 801653c:	6827      	ldr	r7, [r4, #0]
 801653e:	fb17 f703 	smulbb	r7, r7, r3
 8016542:	9b02      	ldr	r3, [sp, #8]
 8016544:	b2bf      	uxth	r7, r7
 8016546:	18fa      	adds	r2, r7, r3
 8016548:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801654c:	b212      	sxth	r2, r2
 801654e:	429a      	cmp	r2, r3
 8016550:	db3c      	blt.n	80165cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016552:	8970      	ldrh	r0, [r6, #10]
 8016554:	4403      	add	r3, r0
 8016556:	b21b      	sxth	r3, r3
 8016558:	429a      	cmp	r2, r3
 801655a:	da37      	bge.n	80165cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801655c:	2300      	movs	r3, #0
 801655e:	4630      	mov	r0, r6
 8016560:	930b      	str	r3, [sp, #44]	; 0x2c
 8016562:	ab0b      	add	r3, sp, #44	; 0x2c
 8016564:	f7ff ff36 	bl	80163d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801656a:	b37a      	cbz	r2, 80165cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801656c:	4552      	cmp	r2, sl
 801656e:	d02d      	beq.n	80165cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016570:	4611      	mov	r1, r2
 8016572:	a80e      	add	r0, sp, #56	; 0x38
 8016574:	9209      	str	r2, [sp, #36]	; 0x24
 8016576:	f004 f801 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801657a:	f04f 0e02 	mov.w	lr, #2
 801657e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8016582:	9a06      	ldr	r2, [sp, #24]
 8016584:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016588:	9b01      	ldr	r3, [sp, #4]
 801658a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801658e:	4413      	add	r3, r2
 8016590:	9a07      	ldr	r2, [sp, #28]
 8016592:	fb91 f1fe 	sdiv	r1, r1, lr
 8016596:	fb9c fcfe 	sdiv	ip, ip, lr
 801659a:	4401      	add	r1, r0
 801659c:	1a58      	subs	r0, r3, r1
 801659e:	9b02      	ldr	r3, [sp, #8]
 80165a0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80165a4:	4413      	add	r3, r2
 80165a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165a8:	448c      	add	ip, r1
 80165aa:	eba3 030c 	sub.w	r3, r3, ip
 80165ae:	435b      	muls	r3, r3
 80165b0:	fb00 3300 	mla	r3, r0, r0, r3
 80165b4:	42ab      	cmp	r3, r5
 80165b6:	d208      	bcs.n	80165ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80165b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165ba:	461d      	mov	r5, r3
 80165bc:	9803      	ldr	r0, [sp, #12]
 80165be:	6001      	str	r1, [r0, #0]
 80165c0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80165c2:	9805      	ldr	r0, [sp, #20]
 80165c4:	8008      	strh	r0, [r1, #0]
 80165c6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80165c8:	800f      	strh	r7, [r1, #0]
 80165ca:	4692      	mov	sl, r2
 80165cc:	f10b 0b01 	add.w	fp, fp, #1
 80165d0:	3408      	adds	r4, #8
 80165d2:	f1bb 0f04 	cmp.w	fp, #4
 80165d6:	d19d      	bne.n	8016514 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80165d8:	9b00      	ldr	r3, [sp, #0]
 80165da:	9c08      	ldr	r4, [sp, #32]
 80165dc:	444b      	add	r3, r9
 80165de:	4544      	cmp	r4, r8
 80165e0:	9300      	str	r3, [sp, #0]
 80165e2:	d188      	bne.n	80164f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80165e4:	b021      	add	sp, #132	; 0x84
 80165e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ea:	f04f 35ff 	mov.w	r5, #4294967295
 80165ee:	e767      	b.n	80164c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80165f0:	20015038 	.word	0x20015038
 80165f4:	0802aa48 	.word	0x0802aa48

080165f8 <_ZN8touchgfx4RectaNERKS0_>:
 80165f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165fc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016600:	888c      	ldrh	r4, [r1, #4]
 8016602:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016606:	443c      	add	r4, r7
 8016608:	b2a4      	uxth	r4, r4
 801660a:	fa0f f884 	sxth.w	r8, r4
 801660e:	45c1      	cmp	r9, r8
 8016610:	da2f      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016612:	8882      	ldrh	r2, [r0, #4]
 8016614:	444a      	add	r2, r9
 8016616:	b292      	uxth	r2, r2
 8016618:	fa0f fe82 	sxth.w	lr, r2
 801661c:	4577      	cmp	r7, lr
 801661e:	da28      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016620:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016624:	88cb      	ldrh	r3, [r1, #6]
 8016626:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801662a:	442b      	add	r3, r5
 801662c:	b21b      	sxth	r3, r3
 801662e:	429e      	cmp	r6, r3
 8016630:	da1f      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016632:	88c3      	ldrh	r3, [r0, #6]
 8016634:	4433      	add	r3, r6
 8016636:	b29b      	uxth	r3, r3
 8016638:	fa0f fc83 	sxth.w	ip, r3
 801663c:	4565      	cmp	r5, ip
 801663e:	da18      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016640:	454f      	cmp	r7, r9
 8016642:	bfb8      	it	lt
 8016644:	464f      	movlt	r7, r9
 8016646:	42b5      	cmp	r5, r6
 8016648:	bfb8      	it	lt
 801664a:	4635      	movlt	r5, r6
 801664c:	45f0      	cmp	r8, lr
 801664e:	bfd8      	it	le
 8016650:	4622      	movle	r2, r4
 8016652:	1bd2      	subs	r2, r2, r7
 8016654:	8082      	strh	r2, [r0, #4]
 8016656:	884a      	ldrh	r2, [r1, #2]
 8016658:	88c9      	ldrh	r1, [r1, #6]
 801665a:	8007      	strh	r7, [r0, #0]
 801665c:	440a      	add	r2, r1
 801665e:	8045      	strh	r5, [r0, #2]
 8016660:	b292      	uxth	r2, r2
 8016662:	b211      	sxth	r1, r2
 8016664:	458c      	cmp	ip, r1
 8016666:	bfa8      	it	ge
 8016668:	4613      	movge	r3, r2
 801666a:	1b5b      	subs	r3, r3, r5
 801666c:	80c3      	strh	r3, [r0, #6]
 801666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016672:	2300      	movs	r3, #0
 8016674:	8003      	strh	r3, [r0, #0]
 8016676:	8043      	strh	r3, [r0, #2]
 8016678:	8083      	strh	r3, [r0, #4]
 801667a:	80c3      	strh	r3, [r0, #6]
 801667c:	e7f7      	b.n	801666e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801667e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801667e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	dd06      	ble.n	8016694 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016686:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801668a:	2800      	cmp	r0, #0
 801668c:	bfcc      	ite	gt
 801668e:	2000      	movgt	r0, #0
 8016690:	2001      	movle	r0, #1
 8016692:	4770      	bx	lr
 8016694:	2001      	movs	r0, #1
 8016696:	4770      	bx	lr

08016698 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801669c:	2300      	movs	r3, #0
 801669e:	4604      	mov	r4, r0
 80166a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80166a2:	8003      	strh	r3, [r0, #0]
 80166a4:	8043      	strh	r3, [r0, #2]
 80166a6:	8083      	strh	r3, [r0, #4]
 80166a8:	80c3      	strh	r3, [r0, #6]
 80166aa:	2d00      	cmp	r5, #0
 80166ac:	d040      	beq.n	8016730 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80166ae:	1d28      	adds	r0, r5, #4
 80166b0:	f7ff ffe5 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80166b4:	b988      	cbnz	r0, 80166da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80166b6:	4620      	mov	r0, r4
 80166b8:	f7ff ffe1 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80166bc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80166c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80166c4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80166c8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80166cc:	b138      	cbz	r0, 80166de <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80166ce:	8022      	strh	r2, [r4, #0]
 80166d0:	8063      	strh	r3, [r4, #2]
 80166d2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80166d6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80166da:	69ad      	ldr	r5, [r5, #24]
 80166dc:	e7e5      	b.n	80166aa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80166de:	f9b4 0000 	ldrsh.w	r0, [r4]
 80166e2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80166e6:	4290      	cmp	r0, r2
 80166e8:	4607      	mov	r7, r0
 80166ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80166ee:	460e      	mov	r6, r1
 80166f0:	bfa8      	it	ge
 80166f2:	4617      	movge	r7, r2
 80166f4:	4299      	cmp	r1, r3
 80166f6:	4472      	add	r2, lr
 80166f8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80166fc:	bfa8      	it	ge
 80166fe:	461e      	movge	r6, r3
 8016700:	4440      	add	r0, r8
 8016702:	4471      	add	r1, lr
 8016704:	4463      	add	r3, ip
 8016706:	b200      	sxth	r0, r0
 8016708:	8027      	strh	r7, [r4, #0]
 801670a:	b212      	sxth	r2, r2
 801670c:	8066      	strh	r6, [r4, #2]
 801670e:	b209      	sxth	r1, r1
 8016710:	b21b      	sxth	r3, r3
 8016712:	4290      	cmp	r0, r2
 8016714:	bfac      	ite	ge
 8016716:	ebc7 0200 	rsbge	r2, r7, r0
 801671a:	ebc7 0202 	rsblt	r2, r7, r2
 801671e:	4299      	cmp	r1, r3
 8016720:	bfac      	ite	ge
 8016722:	ebc6 0301 	rsbge	r3, r6, r1
 8016726:	ebc6 0303 	rsblt	r3, r6, r3
 801672a:	80a2      	strh	r2, [r4, #4]
 801672c:	80e3      	strh	r3, [r4, #6]
 801672e:	e7d4      	b.n	80166da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016730:	4620      	mov	r0, r4
 8016732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016736 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016736:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801673a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801673e:	b383      	cbz	r3, 80167a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016740:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016742:	b374      	cbz	r4, 80167a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016744:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016748:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801674c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016750:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016754:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016758:	b303      	cbz	r3, 801679c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801675a:	4668      	mov	r0, sp
 801675c:	1d21      	adds	r1, r4, #4
 801675e:	f8ad 5000 	strh.w	r5, [sp]
 8016762:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016766:	f8ad 7004 	strh.w	r7, [sp, #4]
 801676a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801676e:	f7ff ff43 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 8016772:	4668      	mov	r0, sp
 8016774:	f7ff ff83 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016778:	b980      	cbnz	r0, 801679c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801677a:	f8bd 3000 	ldrh.w	r3, [sp]
 801677e:	4669      	mov	r1, sp
 8016780:	88a2      	ldrh	r2, [r4, #4]
 8016782:	4620      	mov	r0, r4
 8016784:	1a9b      	subs	r3, r3, r2
 8016786:	88e2      	ldrh	r2, [r4, #6]
 8016788:	f8ad 3000 	strh.w	r3, [sp]
 801678c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016790:	1a9b      	subs	r3, r3, r2
 8016792:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016796:	6823      	ldr	r3, [r4, #0]
 8016798:	689b      	ldr	r3, [r3, #8]
 801679a:	4798      	blx	r3
 801679c:	69a4      	ldr	r4, [r4, #24]
 801679e:	2c00      	cmp	r4, #0
 80167a0:	d1d8      	bne.n	8016754 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80167a2:	b002      	add	sp, #8
 80167a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80167a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80167aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80167ae:	460d      	mov	r5, r1
 80167b0:	4616      	mov	r6, r2
 80167b2:	b323      	cbz	r3, 80167fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80167b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80167b6:	b314      	cbz	r4, 80167fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80167b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80167bc:	b1eb      	cbz	r3, 80167fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80167be:	6828      	ldr	r0, [r5, #0]
 80167c0:	466b      	mov	r3, sp
 80167c2:	6869      	ldr	r1, [r5, #4]
 80167c4:	c303      	stmia	r3!, {r0, r1}
 80167c6:	4668      	mov	r0, sp
 80167c8:	1d21      	adds	r1, r4, #4
 80167ca:	f7ff ff15 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 80167ce:	4668      	mov	r0, sp
 80167d0:	f7ff ff55 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80167d4:	b988      	cbnz	r0, 80167fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80167d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80167da:	4669      	mov	r1, sp
 80167dc:	88a2      	ldrh	r2, [r4, #4]
 80167de:	4620      	mov	r0, r4
 80167e0:	1a9b      	subs	r3, r3, r2
 80167e2:	88e2      	ldrh	r2, [r4, #6]
 80167e4:	f8ad 3000 	strh.w	r3, [sp]
 80167e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80167ec:	1a9b      	subs	r3, r3, r2
 80167ee:	4632      	mov	r2, r6
 80167f0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80167f8:	4798      	blx	r3
 80167fa:	69a4      	ldr	r4, [r4, #24]
 80167fc:	e7db      	b.n	80167b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80167fe:	b002      	add	sp, #8
 8016800:	bd70      	pop	{r4, r5, r6, pc}

08016802 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016802:	6803      	ldr	r3, [r0, #0]
 8016804:	b513      	push	{r0, r1, r4, lr}
 8016806:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801680a:	2300      	movs	r3, #0
 801680c:	e9cd 3300 	strd	r3, r3, [sp]
 8016810:	466b      	mov	r3, sp
 8016812:	47a0      	blx	r4
 8016814:	b002      	add	sp, #8
 8016816:	bd10      	pop	{r4, pc}

08016818 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016818:	2301      	movs	r3, #1
 801681a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801681e:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8016822:	4770      	bx	lr

08016824 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016824:	2301      	movs	r3, #1
 8016826:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801682a:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 801682e:	4770      	bx	lr

08016830 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016830:	6843      	ldr	r3, [r0, #4]
 8016832:	2201      	movs	r2, #1
 8016834:	725a      	strb	r2, [r3, #9]
 8016836:	6840      	ldr	r0, [r0, #4]
 8016838:	6803      	ldr	r3, [r0, #0]
 801683a:	691b      	ldr	r3, [r3, #16]
 801683c:	4718      	bx	r3

0801683e <_ZN8touchgfx3HAL8flushDMAEv>:
 801683e:	6840      	ldr	r0, [r0, #4]
 8016840:	6803      	ldr	r3, [r0, #0]
 8016842:	689b      	ldr	r3, [r3, #8]
 8016844:	4718      	bx	r3

08016846 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8016846:	b530      	push	{r4, r5, lr}
 8016848:	b08b      	sub	sp, #44	; 0x2c
 801684a:	6804      	ldr	r4, [r0, #0]
 801684c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016850:	9509      	str	r5, [sp, #36]	; 0x24
 8016852:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016856:	9508      	str	r5, [sp, #32]
 8016858:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801685c:	9507      	str	r5, [sp, #28]
 801685e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016862:	9506      	str	r5, [sp, #24]
 8016864:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8016868:	9505      	str	r5, [sp, #20]
 801686a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801686e:	9504      	str	r5, [sp, #16]
 8016870:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8016874:	9503      	str	r5, [sp, #12]
 8016876:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801687a:	9502      	str	r5, [sp, #8]
 801687c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016880:	e9cd 3500 	strd	r3, r5, [sp]
 8016884:	4613      	mov	r3, r2
 8016886:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8016888:	2200      	movs	r2, #0
 801688a:	47a0      	blx	r4
 801688c:	b00b      	add	sp, #44	; 0x2c
 801688e:	bd30      	pop	{r4, r5, pc}

08016890 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016890:	4b04      	ldr	r3, [pc, #16]	; (80168a4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	b123      	cbz	r3, 80168a0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016896:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 801689a:	f080 0001 	eor.w	r0, r0, #1
 801689e:	4770      	bx	lr
 80168a0:	2001      	movs	r0, #1
 80168a2:	4770      	bx	lr
 80168a4:	20015036 	.word	0x20015036

080168a8 <_ZN8touchgfx3HAL8endFrameEv>:
 80168a8:	b510      	push	{r4, lr}
 80168aa:	4604      	mov	r4, r0
 80168ac:	6840      	ldr	r0, [r0, #4]
 80168ae:	6803      	ldr	r3, [r0, #0]
 80168b0:	689b      	ldr	r3, [r3, #8]
 80168b2:	4798      	blx	r3
 80168b4:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 80168b8:	b113      	cbz	r3, 80168c0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80168ba:	2301      	movs	r3, #1
 80168bc:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80168c0:	bd10      	pop	{r4, pc}

080168c2 <_ZN8touchgfx3HAL10initializeEv>:
 80168c2:	b510      	push	{r4, lr}
 80168c4:	4604      	mov	r4, r0
 80168c6:	f7eb fb09 	bl	8001edc <_ZN8touchgfx10OSWrappers10initializeEv>
 80168ca:	f7eb f9e7 	bl	8001c9c <_ZN8touchgfx4GPIO4initEv>
 80168ce:	6860      	ldr	r0, [r4, #4]
 80168d0:	6803      	ldr	r3, [r0, #0]
 80168d2:	68db      	ldr	r3, [r3, #12]
 80168d4:	4798      	blx	r3
 80168d6:	68e0      	ldr	r0, [r4, #12]
 80168d8:	6803      	ldr	r3, [r0, #0]
 80168da:	689b      	ldr	r3, [r3, #8]
 80168dc:	4798      	blx	r3
 80168de:	6823      	ldr	r3, [r4, #0]
 80168e0:	4620      	mov	r0, r4
 80168e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168e8:	4718      	bx	r3

080168ea <_ZN8touchgfx3HAL9taskEntryEv>:
 80168ea:	b508      	push	{r3, lr}
 80168ec:	6803      	ldr	r3, [r0, #0]
 80168ee:	4604      	mov	r4, r0
 80168f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80168f4:	4798      	blx	r3
 80168f6:	6823      	ldr	r3, [r4, #0]
 80168f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80168fa:	4620      	mov	r0, r4
 80168fc:	4798      	blx	r3
 80168fe:	f7eb fb39 	bl	8001f74 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016902:	6823      	ldr	r3, [r4, #0]
 8016904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016906:	e7f8      	b.n	80168fa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08016908 <_ZN8touchgfx3HAL4tickEv>:
 8016908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801690a:	6803      	ldr	r3, [r0, #0]
 801690c:	4604      	mov	r4, r0
 801690e:	4d5b      	ldr	r5, [pc, #364]	; (8016a7c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8016910:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016914:	4798      	blx	r3
 8016916:	2800      	cmp	r0, #0
 8016918:	f000 8095 	beq.w	8016a46 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801691c:	2001      	movs	r0, #1
 801691e:	2600      	movs	r6, #0
 8016920:	f7eb f922 	bl	8001b68 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016924:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8016928:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801692c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016930:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8016934:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8016938:	b133      	cbz	r3, 8016948 <_ZN8touchgfx3HAL4tickEv+0x40>
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	4620      	mov	r0, r4
 801693e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016942:	4798      	blx	r3
 8016944:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8016948:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801694c:	2601      	movs	r6, #1
 801694e:	6862      	ldr	r2, [r4, #4]
 8016950:	f083 0301 	eor.w	r3, r3, #1
 8016954:	702e      	strb	r6, [r5, #0]
 8016956:	7253      	strb	r3, [r2, #9]
 8016958:	f002 fcfc 	bl	8019354 <_ZN8touchgfx11Application11getInstanceEv>
 801695c:	6803      	ldr	r3, [r0, #0]
 801695e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016960:	4798      	blx	r3
 8016962:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8016966:	b90b      	cbnz	r3, 801696c <_ZN8touchgfx3HAL4tickEv+0x64>
 8016968:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 801696c:	f002 fcf2 	bl	8019354 <_ZN8touchgfx11Application11getInstanceEv>
 8016970:	6803      	ldr	r3, [r0, #0]
 8016972:	695b      	ldr	r3, [r3, #20]
 8016974:	4798      	blx	r3
 8016976:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8016978:	6803      	ldr	r3, [r0, #0]
 801697a:	691b      	ldr	r3, [r3, #16]
 801697c:	4798      	blx	r3
 801697e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8016982:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8016986:	3b01      	subs	r3, #1
 8016988:	b2db      	uxtb	r3, r3
 801698a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801698e:	b10a      	cbz	r2, 8016994 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016990:	2b00      	cmp	r3, #0
 8016992:	d1eb      	bne.n	801696c <_ZN8touchgfx3HAL4tickEv+0x64>
 8016994:	4a3a      	ldr	r2, [pc, #232]	; (8016a80 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016996:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 801699a:	7813      	ldrb	r3, [r2, #0]
 801699c:	3301      	adds	r3, #1
 801699e:	b25b      	sxtb	r3, r3
 80169a0:	4299      	cmp	r1, r3
 80169a2:	7013      	strb	r3, [r2, #0]
 80169a4:	dc10      	bgt.n	80169c8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80169a6:	2300      	movs	r3, #0
 80169a8:	68e0      	ldr	r0, [r4, #12]
 80169aa:	a902      	add	r1, sp, #8
 80169ac:	7013      	strb	r3, [r2, #0]
 80169ae:	aa03      	add	r2, sp, #12
 80169b0:	6803      	ldr	r3, [r0, #0]
 80169b2:	68db      	ldr	r3, [r3, #12]
 80169b4:	4798      	blx	r3
 80169b6:	6823      	ldr	r3, [r4, #0]
 80169b8:	2800      	cmp	r0, #0
 80169ba:	d050      	beq.n	8016a5e <_ZN8touchgfx3HAL4tickEv+0x156>
 80169bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80169c0:	4620      	mov	r0, r4
 80169c2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80169c6:	4798      	blx	r3
 80169c8:	2300      	movs	r3, #0
 80169ca:	6960      	ldr	r0, [r4, #20]
 80169cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80169d0:	b158      	cbz	r0, 80169ea <_ZN8touchgfx3HAL4tickEv+0xe2>
 80169d2:	6803      	ldr	r3, [r0, #0]
 80169d4:	f10d 0107 	add.w	r1, sp, #7
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	4798      	blx	r3
 80169dc:	b128      	cbz	r0, 80169ea <_ZN8touchgfx3HAL4tickEv+0xe2>
 80169de:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80169e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80169e4:	6803      	ldr	r3, [r0, #0]
 80169e6:	68db      	ldr	r3, [r3, #12]
 80169e8:	4798      	blx	r3
 80169ea:	f104 001c 	add.w	r0, r4, #28
 80169ee:	f012 fd17 	bl	8029420 <_ZN8touchgfx8Gestures4tickEv>
 80169f2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80169f6:	b30b      	cbz	r3, 8016a3c <_ZN8touchgfx3HAL4tickEv+0x134>
 80169f8:	6920      	ldr	r0, [r4, #16]
 80169fa:	6803      	ldr	r3, [r0, #0]
 80169fc:	691b      	ldr	r3, [r3, #16]
 80169fe:	4798      	blx	r3
 8016a00:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016a02:	4606      	mov	r6, r0
 8016a04:	b903      	cbnz	r3, 8016a08 <_ZN8touchgfx3HAL4tickEv+0x100>
 8016a06:	6760      	str	r0, [r4, #116]	; 0x74
 8016a08:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016a0a:	4a1e      	ldr	r2, [pc, #120]	; (8016a84 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016a0c:	1af3      	subs	r3, r6, r3
 8016a0e:	4293      	cmp	r3, r2
 8016a10:	d914      	bls.n	8016a3c <_ZN8touchgfx3HAL4tickEv+0x134>
 8016a12:	6920      	ldr	r0, [r4, #16]
 8016a14:	6803      	ldr	r3, [r0, #0]
 8016a16:	699b      	ldr	r3, [r3, #24]
 8016a18:	4798      	blx	r3
 8016a1a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016a1c:	2264      	movs	r2, #100	; 0x64
 8016a1e:	1af3      	subs	r3, r6, r3
 8016a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a24:	fbb0 f0f3 	udiv	r0, r0, r3
 8016a28:	2800      	cmp	r0, #0
 8016a2a:	dc1d      	bgt.n	8016a68 <_ZN8touchgfx3HAL4tickEv+0x160>
 8016a2c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8016a30:	6920      	ldr	r0, [r4, #16]
 8016a32:	2100      	movs	r1, #0
 8016a34:	6803      	ldr	r3, [r0, #0]
 8016a36:	69db      	ldr	r3, [r3, #28]
 8016a38:	4798      	blx	r3
 8016a3a:	6766      	str	r6, [r4, #116]	; 0x74
 8016a3c:	f002 fc8a 	bl	8019354 <_ZN8touchgfx11Application11getInstanceEv>
 8016a40:	6803      	ldr	r3, [r0, #0]
 8016a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a44:	4798      	blx	r3
 8016a46:	6823      	ldr	r3, [r4, #0]
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016a4e:	4798      	blx	r3
 8016a50:	2001      	movs	r0, #1
 8016a52:	f7eb f8b9 	bl	8001bc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016a56:	2300      	movs	r3, #0
 8016a58:	702b      	strb	r3, [r5, #0]
 8016a5a:	b004      	add	sp, #16
 8016a5c:	bd70      	pop	{r4, r5, r6, pc}
 8016a5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016a62:	4620      	mov	r0, r4
 8016a64:	4798      	blx	r3
 8016a66:	e7af      	b.n	80169c8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016a68:	2863      	cmp	r0, #99	; 0x63
 8016a6a:	bfcb      	itete	gt
 8016a6c:	2300      	movgt	r3, #0
 8016a6e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016a72:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8016a76:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8016a7a:	e7d9      	b.n	8016a30 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016a7c:	2001503c 	.word	0x2001503c
 8016a80:	2001503d 	.word	0x2001503d
 8016a84:	05f5e100 	.word	0x05f5e100

08016a88 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016a88:	b510      	push	{r4, lr}
 8016a8a:	4604      	mov	r4, r0
 8016a8c:	f7eb fa56 	bl	8001f3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8016a90:	2200      	movs	r2, #0
 8016a92:	6863      	ldr	r3, [r4, #4]
 8016a94:	729a      	strb	r2, [r3, #10]
 8016a96:	bd10      	pop	{r4, pc}

08016a98 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016a98:	65c1      	str	r1, [r0, #92]	; 0x5c
 8016a9a:	301c      	adds	r0, #28
 8016a9c:	f012 bcbe 	b.w	802941c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016aa0 <_ZN8touchgfx3HAL5touchEll>:
 8016aa0:	b530      	push	{r4, r5, lr}
 8016aa2:	b087      	sub	sp, #28
 8016aa4:	4604      	mov	r4, r0
 8016aa6:	a804      	add	r0, sp, #16
 8016aa8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016aac:	f002 fa3a 	bl	8018f24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016ab0:	9b04      	ldr	r3, [sp, #16]
 8016ab2:	a906      	add	r1, sp, #24
 8016ab4:	a803      	add	r0, sp, #12
 8016ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016aba:	9b05      	ldr	r3, [sp, #20]
 8016abc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016ac0:	f002 fa82 	bl	8018fc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016ac4:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8016ac8:	f104 001c 	add.w	r0, r4, #28
 8016acc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016ad0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016ad4:	b189      	cbz	r1, 8016afa <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016ad6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8016ada:	9300      	str	r3, [sp, #0]
 8016adc:	4613      	mov	r3, r2
 8016ade:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016ae2:	462a      	mov	r2, r5
 8016ae4:	f012 fcaa 	bl	802943c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016ae8:	b128      	cbz	r0, 8016af6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016aea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016aee:	6623      	str	r3, [r4, #96]	; 0x60
 8016af0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016af4:	6663      	str	r3, [r4, #100]	; 0x64
 8016af6:	b007      	add	sp, #28
 8016af8:	bd30      	pop	{r4, r5, pc}
 8016afa:	f012 fcdf 	bl	80294bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016afe:	2301      	movs	r3, #1
 8016b00:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8016b04:	e7f1      	b.n	8016aea <_ZN8touchgfx3HAL5touchEll+0x4a>

08016b06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016b06:	b510      	push	{r4, lr}
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d046      	beq.n	8016b9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016b0c:	ea81 0002 	eor.w	r0, r1, r2
 8016b10:	07c4      	lsls	r4, r0, #31
 8016b12:	d508      	bpl.n	8016b26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016b14:	440b      	add	r3, r1
 8016b16:	3a01      	subs	r2, #1
 8016b18:	428b      	cmp	r3, r1
 8016b1a:	d93e      	bls.n	8016b9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016b1c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016b20:	f801 0b01 	strb.w	r0, [r1], #1
 8016b24:	e7f8      	b.n	8016b18 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016b26:	07d0      	lsls	r0, r2, #31
 8016b28:	bf42      	ittt	mi
 8016b2a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016b2e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016b32:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016b36:	2b01      	cmp	r3, #1
 8016b38:	d911      	bls.n	8016b5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016b3a:	ea81 0402 	eor.w	r4, r1, r2
 8016b3e:	4610      	mov	r0, r2
 8016b40:	07a4      	lsls	r4, r4, #30
 8016b42:	d022      	beq.n	8016b8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8016b44:	f023 0401 	bic.w	r4, r3, #1
 8016b48:	440c      	add	r4, r1
 8016b4a:	428c      	cmp	r4, r1
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	d904      	bls.n	8016b5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8016b50:	8812      	ldrh	r2, [r2, #0]
 8016b52:	3002      	adds	r0, #2
 8016b54:	f821 2b02 	strh.w	r2, [r1], #2
 8016b58:	e7f7      	b.n	8016b4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8016b5a:	f003 0301 	and.w	r3, r3, #1
 8016b5e:	f023 0003 	bic.w	r0, r3, #3
 8016b62:	4408      	add	r0, r1
 8016b64:	4288      	cmp	r0, r1
 8016b66:	4614      	mov	r4, r2
 8016b68:	d904      	bls.n	8016b74 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8016b6a:	6824      	ldr	r4, [r4, #0]
 8016b6c:	3204      	adds	r2, #4
 8016b6e:	f841 4b04 	str.w	r4, [r1], #4
 8016b72:	e7f7      	b.n	8016b64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8016b74:	f003 0303 	and.w	r3, r3, #3
 8016b78:	3a01      	subs	r2, #1
 8016b7a:	440b      	add	r3, r1
 8016b7c:	428b      	cmp	r3, r1
 8016b7e:	d90c      	bls.n	8016b9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016b80:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016b84:	f801 0b01 	strb.w	r0, [r1], #1
 8016b88:	e7f8      	b.n	8016b7c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016b8a:	0790      	lsls	r0, r2, #30
 8016b8c:	d0e7      	beq.n	8016b5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016b8e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016b92:	3b02      	subs	r3, #2
 8016b94:	f821 0b02 	strh.w	r0, [r1], #2
 8016b98:	e7e1      	b.n	8016b5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016b9a:	2001      	movs	r0, #1
 8016b9c:	bd10      	pop	{r4, pc}

08016b9e <_ZN8touchgfx3HAL7noTouchEv>:
 8016b9e:	b510      	push	{r4, lr}
 8016ba0:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8016ba4:	4604      	mov	r4, r0
 8016ba6:	b153      	cbz	r3, 8016bbe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016ba8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8016bac:	2101      	movs	r1, #1
 8016bae:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8016bb2:	301c      	adds	r0, #28
 8016bb4:	f012 fc82 	bl	80294bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8016bbe:	bd10      	pop	{r4, pc}

08016bc0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bc4:	b085      	sub	sp, #20
 8016bc6:	4604      	mov	r4, r0
 8016bc8:	2000      	movs	r0, #0
 8016bca:	4699      	mov	r9, r3
 8016bcc:	ad04      	add	r5, sp, #16
 8016bce:	460f      	mov	r7, r1
 8016bd0:	4690      	mov	r8, r2
 8016bd2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016bd6:	69a0      	ldr	r0, [r4, #24]
 8016bd8:	6806      	ldr	r6, [r0, #0]
 8016bda:	9501      	str	r5, [sp, #4]
 8016bdc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016be0:	9500      	str	r5, [sp, #0]
 8016be2:	6835      	ldr	r5, [r6, #0]
 8016be4:	47a8      	blx	r5
 8016be6:	4d10      	ldr	r5, [pc, #64]	; (8016c28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8016be8:	4606      	mov	r6, r0
 8016bea:	f8a5 9000 	strh.w	r9, [r5]
 8016bee:	f7ec fd29 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 8016bf2:	6803      	ldr	r3, [r0, #0]
 8016bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bf6:	4798      	blx	r3
 8016bf8:	b128      	cbz	r0, 8016c06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8016bfa:	2801      	cmp	r0, #1
 8016bfc:	d00b      	beq.n	8016c16 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8016bfe:	4630      	mov	r0, r6
 8016c00:	b005      	add	sp, #20
 8016c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c06:	882b      	ldrh	r3, [r5, #0]
 8016c08:	fb08 7203 	mla	r2, r8, r3, r7
 8016c0c:	9b03      	ldr	r3, [sp, #12]
 8016c0e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016c12:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016c14:	e7f3      	b.n	8016bfe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016c16:	882a      	ldrh	r2, [r5, #0]
 8016c18:	9b03      	ldr	r3, [sp, #12]
 8016c1a:	fb08 7202 	mla	r2, r8, r2, r7
 8016c1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016c22:	1a9a      	subs	r2, r3, r2
 8016c24:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016c26:	e7ea      	b.n	8016bfe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016c28:	20015032 	.word	0x20015032

08016c2c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8016c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c2e:	b08b      	sub	sp, #44	; 0x2c
 8016c30:	4617      	mov	r7, r2
 8016c32:	4604      	mov	r4, r0
 8016c34:	460e      	mov	r6, r1
 8016c36:	461d      	mov	r5, r3
 8016c38:	f7ec fd04 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 8016c3c:	6803      	ldr	r3, [r0, #0]
 8016c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c40:	4798      	blx	r3
 8016c42:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016c46:	9007      	str	r0, [sp, #28]
 8016c48:	4631      	mov	r1, r6
 8016c4a:	6822      	ldr	r2, [r4, #0]
 8016c4c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016c50:	4b0c      	ldr	r3, [pc, #48]	; (8016c84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8016c52:	4620      	mov	r0, r4
 8016c54:	881b      	ldrh	r3, [r3, #0]
 8016c56:	9306      	str	r3, [sp, #24]
 8016c58:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016c5c:	9305      	str	r3, [sp, #20]
 8016c5e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016c62:	9304      	str	r3, [sp, #16]
 8016c64:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016c68:	9303      	str	r3, [sp, #12]
 8016c6a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016c6e:	9302      	str	r3, [sp, #8]
 8016c70:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016c74:	e9cd 5300 	strd	r5, r3, [sp]
 8016c78:	463b      	mov	r3, r7
 8016c7a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	47a8      	blx	r5
 8016c80:	b00b      	add	sp, #44	; 0x2c
 8016c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c84:	20015032 	.word	0x20015032

08016c88 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c8c:	4698      	mov	r8, r3
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	b08b      	sub	sp, #44	; 0x2c
 8016c92:	4617      	mov	r7, r2
 8016c94:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8016c96:	460e      	mov	r6, r1
 8016c98:	4b13      	ldr	r3, [pc, #76]	; (8016ce8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	f8b3 9000 	ldrh.w	r9, [r3]
 8016ca0:	f7ec fcd0 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 8016ca4:	6803      	ldr	r3, [r0, #0]
 8016ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca8:	4798      	blx	r3
 8016caa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016cae:	2200      	movs	r2, #0
 8016cb0:	4631      	mov	r1, r6
 8016cb2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016cb6:	2302      	movs	r3, #2
 8016cb8:	4620      	mov	r0, r4
 8016cba:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	9305      	str	r3, [sp, #20]
 8016cc2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016cc6:	9304      	str	r3, [sp, #16]
 8016cc8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016ccc:	9303      	str	r3, [sp, #12]
 8016cce:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016cd2:	9302      	str	r3, [sp, #8]
 8016cd4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016cd8:	e9cd 8300 	strd	r8, r3, [sp]
 8016cdc:	463b      	mov	r3, r7
 8016cde:	47a8      	blx	r5
 8016ce0:	b00b      	add	sp, #44	; 0x2c
 8016ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ce6:	bf00      	nop
 8016ce8:	20015032 	.word	0x20015032

08016cec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016cf0:	4698      	mov	r8, r3
 8016cf2:	6803      	ldr	r3, [r0, #0]
 8016cf4:	b087      	sub	sp, #28
 8016cf6:	460e      	mov	r6, r1
 8016cf8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8016cfa:	4617      	mov	r7, r2
 8016cfc:	4b0f      	ldr	r3, [pc, #60]	; (8016d3c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8016cfe:	4604      	mov	r4, r0
 8016d00:	f8b3 9000 	ldrh.w	r9, [r3]
 8016d04:	f7ec fc9e 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 8016d08:	6803      	ldr	r3, [r0, #0]
 8016d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d0c:	4798      	blx	r3
 8016d0e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016d12:	463a      	mov	r2, r7
 8016d14:	4631      	mov	r1, r6
 8016d16:	f8cd 900c 	str.w	r9, [sp, #12]
 8016d1a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8016d1e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016d22:	4620      	mov	r0, r4
 8016d24:	9302      	str	r3, [sp, #8]
 8016d26:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016d2a:	9301      	str	r3, [sp, #4]
 8016d2c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016d30:	9300      	str	r3, [sp, #0]
 8016d32:	4643      	mov	r3, r8
 8016d34:	47a8      	blx	r5
 8016d36:	b007      	add	sp, #28
 8016d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d3c:	20015032 	.word	0x20015032

08016d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d44:	4604      	mov	r4, r0
 8016d46:	b08f      	sub	sp, #60	; 0x3c
 8016d48:	4610      	mov	r0, r2
 8016d4a:	460d      	mov	r5, r1
 8016d4c:	4691      	mov	r9, r2
 8016d4e:	461e      	mov	r6, r3
 8016d50:	f004 ff38 	bl	801bbc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	f000 809d 	beq.w	8016e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8016d5a:	6823      	ldr	r3, [r4, #0]
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	f8df b198 	ldr.w	fp, [pc, #408]	; 8016ef8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8016d62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d68:	4798      	blx	r3
 8016d6a:	6823      	ldr	r3, [r4, #0]
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8016efc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8016d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d74:	4798      	blx	r3
 8016d76:	f8bb 3000 	ldrh.w	r3, [fp]
 8016d7a:	4f5c      	ldr	r7, [pc, #368]	; (8016eec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016d7c:	9301      	str	r3, [sp, #4]
 8016d7e:	f8ba 3000 	ldrh.w	r3, [sl]
 8016d82:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8016d86:	4640      	mov	r0, r8
 8016d88:	9302      	str	r3, [sp, #8]
 8016d8a:	883b      	ldrh	r3, [r7, #0]
 8016d8c:	9303      	str	r3, [sp, #12]
 8016d8e:	4b58      	ldr	r3, [pc, #352]	; (8016ef0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016d90:	881a      	ldrh	r2, [r3, #0]
 8016d92:	9305      	str	r3, [sp, #20]
 8016d94:	9204      	str	r2, [sp, #16]
 8016d96:	f004 ffa9 	bl	801bcec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016d9a:	8038      	strh	r0, [r7, #0]
 8016d9c:	4640      	mov	r0, r8
 8016d9e:	f004 ffd9 	bl	801bd54 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016da2:	9b05      	ldr	r3, [sp, #20]
 8016da4:	b280      	uxth	r0, r0
 8016da6:	8018      	strh	r0, [r3, #0]
 8016da8:	4b52      	ldr	r3, [pc, #328]	; (8016ef4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016daa:	781b      	ldrb	r3, [r3, #0]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d174      	bne.n	8016e9a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8016db0:	883b      	ldrh	r3, [r7, #0]
 8016db2:	f8aa 0000 	strh.w	r0, [sl]
 8016db6:	f8ab 3000 	strh.w	r3, [fp]
 8016dba:	4648      	mov	r0, r9
 8016dbc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016dc0:	f004 ff00 	bl	801bbc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016dca:	4611      	mov	r1, r2
 8016dcc:	4628      	mov	r0, r5
 8016dce:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016dd2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016dd6:	f7ec fcf1 	bl	80037bc <_ZN8touchgfx8Drawable5setXYEss>
 8016dda:	2301      	movs	r3, #1
 8016ddc:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016de0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016de4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	dd5c      	ble.n	8016ea6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016dec:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	dd58      	ble.n	8016ea6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016df4:	462a      	mov	r2, r5
 8016df6:	ab0a      	add	r3, sp, #40	; 0x28
 8016df8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016dfc:	6851      	ldr	r1, [r2, #4]
 8016dfe:	c303      	stmia	r3!, {r0, r1}
 8016e00:	4631      	mov	r1, r6
 8016e02:	a80a      	add	r0, sp, #40	; 0x28
 8016e04:	f7ff fbf8 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 8016e08:	4b38      	ldr	r3, [pc, #224]	; (8016eec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e10:	4b37      	ldr	r3, [pc, #220]	; (8016ef0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016e12:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016e16:	aa0a      	add	r2, sp, #40	; 0x28
 8016e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e1c:	910c      	str	r1, [sp, #48]	; 0x30
 8016e1e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016e22:	ab08      	add	r3, sp, #32
 8016e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e28:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	a90c      	add	r1, sp, #48	; 0x30
 8016e30:	f7ff fbe2 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 8016e34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d13c      	bne.n	8016eb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8016e3a:	2000      	movs	r0, #0
 8016e3c:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8016e40:	2600      	movs	r6, #0
 8016e42:	696b      	ldr	r3, [r5, #20]
 8016e44:	a908      	add	r1, sp, #32
 8016e46:	682a      	ldr	r2, [r5, #0]
 8016e48:	4628      	mov	r0, r5
 8016e4a:	9305      	str	r3, [sp, #20]
 8016e4c:	616e      	str	r6, [r5, #20]
 8016e4e:	6892      	ldr	r2, [r2, #8]
 8016e50:	4790      	blx	r2
 8016e52:	9b05      	ldr	r3, [sp, #20]
 8016e54:	4652      	mov	r2, sl
 8016e56:	4649      	mov	r1, r9
 8016e58:	616b      	str	r3, [r5, #20]
 8016e5a:	4628      	mov	r0, r5
 8016e5c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8016e60:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8016e64:	f7ec fcaa 	bl	80037bc <_ZN8touchgfx8Drawable5setXYEss>
 8016e68:	9a01      	ldr	r2, [sp, #4]
 8016e6a:	4b23      	ldr	r3, [pc, #140]	; (8016ef8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8016e6c:	4620      	mov	r0, r4
 8016e6e:	801a      	strh	r2, [r3, #0]
 8016e70:	9a02      	ldr	r2, [sp, #8]
 8016e72:	4b22      	ldr	r3, [pc, #136]	; (8016efc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8016e74:	801a      	strh	r2, [r3, #0]
 8016e76:	9a03      	ldr	r2, [sp, #12]
 8016e78:	4b1c      	ldr	r3, [pc, #112]	; (8016eec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016e7a:	801a      	strh	r2, [r3, #0]
 8016e7c:	4b1c      	ldr	r3, [pc, #112]	; (8016ef0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016e7e:	9a04      	ldr	r2, [sp, #16]
 8016e80:	801a      	strh	r2, [r3, #0]
 8016e82:	6823      	ldr	r3, [r4, #0]
 8016e84:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8016e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e8a:	4798      	blx	r3
 8016e8c:	6823      	ldr	r3, [r4, #0]
 8016e8e:	4620      	mov	r0, r4
 8016e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e92:	4798      	blx	r3
 8016e94:	b00f      	add	sp, #60	; 0x3c
 8016e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e9a:	883b      	ldrh	r3, [r7, #0]
 8016e9c:	f8ab 0000 	strh.w	r0, [fp]
 8016ea0:	f8aa 3000 	strh.w	r3, [sl]
 8016ea4:	e789      	b.n	8016dba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8016ea6:	462a      	mov	r2, r5
 8016ea8:	ab0a      	add	r3, sp, #40	; 0x28
 8016eaa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016eae:	6851      	ldr	r1, [r2, #4]
 8016eb0:	c303      	stmia	r3!, {r0, r1}
 8016eb2:	e7a9      	b.n	8016e08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8016eb4:	a807      	add	r0, sp, #28
 8016eb6:	f005 f889 	bl	801bfcc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016eba:	4606      	mov	r6, r0
 8016ebc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016ebe:	6803      	ldr	r3, [r0, #0]
 8016ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ec2:	4798      	blx	r3
 8016ec4:	4286      	cmp	r6, r0
 8016ec6:	d1b8      	bne.n	8016e3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8016ec8:	f7ec fbbc 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 8016ecc:	6803      	ldr	r3, [r0, #0]
 8016ece:	4606      	mov	r6, r0
 8016ed0:	a807      	add	r0, sp, #28
 8016ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ed4:	9305      	str	r3, [sp, #20]
 8016ed6:	f005 f879 	bl	801bfcc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016eda:	9b05      	ldr	r3, [sp, #20]
 8016edc:	4601      	mov	r1, r0
 8016ede:	4630      	mov	r0, r6
 8016ee0:	4798      	blx	r3
 8016ee2:	f080 0001 	eor.w	r0, r0, #1
 8016ee6:	b2c0      	uxtb	r0, r0
 8016ee8:	e7a8      	b.n	8016e3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8016eea:	bf00      	nop
 8016eec:	2001502c 	.word	0x2001502c
 8016ef0:	2001502e 	.word	0x2001502e
 8016ef4:	20015030 	.word	0x20015030
 8016ef8:	20015032 	.word	0x20015032
 8016efc:	20015034 	.word	0x20015034

08016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016f00:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016f02:	b510      	push	{r4, lr}
 8016f04:	781b      	ldrb	r3, [r3, #0]
 8016f06:	4604      	mov	r4, r0
 8016f08:	b13b      	cbz	r3, 8016f1a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016f0a:	6803      	ldr	r3, [r0, #0]
 8016f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f0e:	4798      	blx	r3
 8016f10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016f12:	4283      	cmp	r3, r0
 8016f14:	d101      	bne.n	8016f1a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016f16:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016f18:	bd10      	pop	{r4, pc}
 8016f1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016f1c:	e7fc      	b.n	8016f18 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016f1e:	bf00      	nop
 8016f20:	20015036 	.word	0x20015036

08016f24 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f28:	461d      	mov	r5, r3
 8016f2a:	b08a      	sub	sp, #40	; 0x28
 8016f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f30:	4690      	mov	r8, r2
 8016f32:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8016f36:	2400      	movs	r4, #0
 8016f38:	4607      	mov	r7, r0
 8016f3a:	fb06 8505 	mla	r5, r6, r5, r8
 8016f3e:	9404      	str	r4, [sp, #16]
 8016f40:	f88d 4020 	strb.w	r4, [sp, #32]
 8016f44:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016f48:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016f4c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016f50:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016f54:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016f58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016f5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016f60:	f7ff ffce 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016f64:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016f6e:	a901      	add	r1, sp, #4
 8016f70:	9505      	str	r5, [sp, #20]
 8016f72:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016f76:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8016f7a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016f7e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016f82:	6803      	ldr	r3, [r0, #0]
 8016f84:	685b      	ldr	r3, [r3, #4]
 8016f86:	4798      	blx	r3
 8016f88:	b00a      	add	sp, #40	; 0x28
 8016f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f8e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016f8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f92:	b08b      	sub	sp, #44	; 0x2c
 8016f94:	2400      	movs	r4, #0
 8016f96:	4691      	mov	r9, r2
 8016f98:	461d      	mov	r5, r3
 8016f9a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016fa2:	4688      	mov	r8, r1
 8016fa4:	4607      	mov	r7, r0
 8016fa6:	9404      	str	r4, [sp, #16]
 8016fa8:	fb06 9505 	mla	r5, r6, r5, r9
 8016fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016fb0:	f7ff ffa6 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016fb4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016fb8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016fc2:	a901      	add	r1, sp, #4
 8016fc4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016fc8:	9505      	str	r5, [sp, #20]
 8016fca:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016fce:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016fd2:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016fd6:	f8cd 8010 	str.w	r8, [sp, #16]
 8016fda:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016fde:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016fe2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016fe6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016fea:	6803      	ldr	r3, [r0, #0]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	4798      	blx	r3
 8016ff0:	b00b      	add	sp, #44	; 0x2c
 8016ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08016ff8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8016ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ffc:	b08a      	sub	sp, #40	; 0x28
 8016ffe:	4698      	mov	r8, r3
 8017000:	2300      	movs	r3, #0
 8017002:	4606      	mov	r6, r0
 8017004:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8017008:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801700c:	2d0b      	cmp	r5, #11
 801700e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8017012:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8017016:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801701a:	9304      	str	r3, [sp, #16]
 801701c:	d137      	bne.n	801708e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801701e:	2380      	movs	r3, #128	; 0x80
 8017020:	f88d 0020 	strb.w	r0, [sp, #32]
 8017024:	4630      	mov	r0, r6
 8017026:	9203      	str	r2, [sp, #12]
 8017028:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801702c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017030:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017034:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017038:	f8ad 301a 	strh.w	r3, [sp, #26]
 801703c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017040:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017044:	f7ff ff5c 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017048:	2c0b      	cmp	r4, #11
 801704a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801704e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017052:	bf94      	ite	ls
 8017054:	4b19      	ldrls	r3, [pc, #100]	; (80170bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8017056:	2100      	movhi	r1, #0
 8017058:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801705c:	bf98      	it	ls
 801705e:	5d19      	ldrbls	r1, [r3, r4]
 8017060:	fb02 8307 	mla	r3, r2, r7, r8
 8017064:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017068:	10c9      	asrs	r1, r1, #3
 801706a:	fb01 0003 	mla	r0, r1, r3, r0
 801706e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017072:	a901      	add	r1, sp, #4
 8017074:	9005      	str	r0, [sp, #20]
 8017076:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801707a:	2300      	movs	r3, #0
 801707c:	6870      	ldr	r0, [r6, #4]
 801707e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017082:	6803      	ldr	r3, [r0, #0]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	4798      	blx	r3
 8017088:	b00a      	add	sp, #40	; 0x28
 801708a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801708e:	2d02      	cmp	r5, #2
 8017090:	d109      	bne.n	80170a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8017092:	28ff      	cmp	r0, #255	; 0xff
 8017094:	d105      	bne.n	80170a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8017096:	f1bc 0f00 	cmp.w	ip, #0
 801709a:	bf14      	ite	ne
 801709c:	2340      	movne	r3, #64	; 0x40
 801709e:	2320      	moveq	r3, #32
 80170a0:	e7be      	b.n	8017020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80170a2:	2340      	movs	r3, #64	; 0x40
 80170a4:	e7bc      	b.n	8017020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80170a6:	28ff      	cmp	r0, #255	; 0xff
 80170a8:	d105      	bne.n	80170b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80170aa:	f1bc 0f00 	cmp.w	ip, #0
 80170ae:	bf14      	ite	ne
 80170b0:	2304      	movne	r3, #4
 80170b2:	2301      	moveq	r3, #1
 80170b4:	e7b4      	b.n	8017020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80170b6:	2304      	movs	r3, #4
 80170b8:	e7b2      	b.n	8017020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80170ba:	bf00      	nop
 80170bc:	0802ec38 	.word	0x0802ec38

080170c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80170c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c4:	b08b      	sub	sp, #44	; 0x2c
 80170c6:	461d      	mov	r5, r3
 80170c8:	2400      	movs	r4, #0
 80170ca:	4688      	mov	r8, r1
 80170cc:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80170d0:	4693      	mov	fp, r2
 80170d2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80170d6:	4607      	mov	r7, r0
 80170d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80170dc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80170e0:	9404      	str	r4, [sp, #16]
 80170e2:	bf14      	ite	ne
 80170e4:	2308      	movne	r3, #8
 80170e6:	2302      	moveq	r3, #2
 80170e8:	fb05 b50a 	mla	r5, r5, sl, fp
 80170ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80170f0:	f7ff ff06 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80170f4:	2e0b      	cmp	r6, #11
 80170f6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80170fa:	a901      	add	r1, sp, #4
 80170fc:	bf98      	it	ls
 80170fe:	4b13      	ldrls	r3, [pc, #76]	; (801714c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8017100:	f8ad a01e 	strh.w	sl, [sp, #30]
 8017104:	bf98      	it	ls
 8017106:	5d9c      	ldrbls	r4, [r3, r6]
 8017108:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801710c:	10e4      	asrs	r4, r4, #3
 801710e:	f8cd 8010 	str.w	r8, [sp, #16]
 8017112:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017116:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801711a:	fb04 0405 	mla	r4, r4, r5, r0
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017124:	2300      	movs	r3, #0
 8017126:	9405      	str	r4, [sp, #20]
 8017128:	f8ad 301c 	strh.w	r3, [sp, #28]
 801712c:	f88d 9020 	strb.w	r9, [sp, #32]
 8017130:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8017134:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017138:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801713c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8017140:	6803      	ldr	r3, [r0, #0]
 8017142:	685b      	ldr	r3, [r3, #4]
 8017144:	4798      	blx	r3
 8017146:	b00b      	add	sp, #44	; 0x2c
 8017148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801714c:	0802ec38 	.word	0x0802ec38

08017150 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017154:	461e      	mov	r6, r3
 8017156:	4b0a      	ldr	r3, [pc, #40]	; (8017180 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8017158:	460f      	mov	r7, r1
 801715a:	4690      	mov	r8, r2
 801715c:	881d      	ldrh	r5, [r3, #0]
 801715e:	f7ec fa71 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 8017162:	6803      	ldr	r3, [r0, #0]
 8017164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017166:	4798      	blx	r3
 8017168:	280b      	cmp	r0, #11
 801716a:	bf96      	itet	ls
 801716c:	4b05      	ldrls	r3, [pc, #20]	; (8017184 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801716e:	2400      	movhi	r4, #0
 8017170:	5c1c      	ldrbls	r4, [r3, r0]
 8017172:	fb08 7005 	mla	r0, r8, r5, r7
 8017176:	10e4      	asrs	r4, r4, #3
 8017178:	fb04 6000 	mla	r0, r4, r0, r6
 801717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017180:	20015032 	.word	0x20015032
 8017184:	0802ec38 	.word	0x0802ec38

08017188 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801718a:	b08b      	sub	sp, #44	; 0x2c
 801718c:	461f      	mov	r7, r3
 801718e:	4604      	mov	r4, r0
 8017190:	4616      	mov	r6, r2
 8017192:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017196:	2500      	movs	r5, #0
 8017198:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801719c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80171a0:	9504      	str	r5, [sp, #16]
 80171a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80171a6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80171aa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80171ae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80171b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80171b6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80171ba:	f88d 3020 	strb.w	r3, [sp, #32]
 80171be:	f7ff fe9f 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80171c2:	463a      	mov	r2, r7
 80171c4:	4631      	mov	r1, r6
 80171c6:	4603      	mov	r3, r0
 80171c8:	4620      	mov	r0, r4
 80171ca:	f7ff ffc1 	bl	8017150 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80171ce:	4b0e      	ldr	r3, [pc, #56]	; (8017208 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80171d0:	9005      	str	r0, [sp, #20]
 80171d2:	881b      	ldrh	r3, [r3, #0]
 80171d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80171d8:	f7ec fa34 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 80171dc:	6803      	ldr	r3, [r0, #0]
 80171de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e0:	4798      	blx	r3
 80171e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80171e4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80171e8:	a901      	add	r1, sp, #4
 80171ea:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80171ee:	9304      	str	r3, [sp, #16]
 80171f0:	6860      	ldr	r0, [r4, #4]
 80171f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80171f6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80171fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80171fe:	6803      	ldr	r3, [r0, #0]
 8017200:	685b      	ldr	r3, [r3, #4]
 8017202:	4798      	blx	r3
 8017204:	b00b      	add	sp, #44	; 0x2c
 8017206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017208:	20015032 	.word	0x20015032

0801720c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801720c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801720e:	b08d      	sub	sp, #52	; 0x34
 8017210:	2501      	movs	r5, #1
 8017212:	4604      	mov	r4, r0
 8017214:	466b      	mov	r3, sp
 8017216:	9503      	str	r5, [sp, #12]
 8017218:	e883 0006 	stmia.w	r3, {r1, r2}
 801721c:	2300      	movs	r3, #0
 801721e:	f8bd 6000 	ldrh.w	r6, [sp]
 8017222:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017226:	9306      	str	r3, [sp, #24]
 8017228:	6803      	ldr	r3, [r0, #0]
 801722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801722c:	4798      	blx	r3
 801722e:	463a      	mov	r2, r7
 8017230:	4631      	mov	r1, r6
 8017232:	4603      	mov	r3, r0
 8017234:	4620      	mov	r0, r4
 8017236:	f7ff ff8b 	bl	8017150 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801723a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801723c:	9004      	str	r0, [sp, #16]
 801723e:	9307      	str	r3, [sp, #28]
 8017240:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017244:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017248:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801724c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017250:	4b0e      	ldr	r3, [pc, #56]	; (801728c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8017252:	881b      	ldrh	r3, [r3, #0]
 8017254:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017258:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801725c:	f7ec f9f2 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 8017260:	6803      	ldr	r3, [r0, #0]
 8017262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017264:	4798      	blx	r3
 8017266:	23ff      	movs	r3, #255	; 0xff
 8017268:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801726c:	a903      	add	r1, sp, #12
 801726e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017272:	6860      	ldr	r0, [r4, #4]
 8017274:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017278:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801727c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017280:	6803      	ldr	r3, [r0, #0]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	4798      	blx	r3
 8017286:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017288:	b00d      	add	sp, #52	; 0x34
 801728a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801728c:	20015032 	.word	0x20015032

08017290 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017294:	b08c      	sub	sp, #48	; 0x30
 8017296:	461e      	mov	r6, r3
 8017298:	2300      	movs	r3, #0
 801729a:	4604      	mov	r4, r0
 801729c:	466d      	mov	r5, sp
 801729e:	9306      	str	r3, [sp, #24]
 80172a0:	6803      	ldr	r3, [r0, #0]
 80172a2:	e885 0006 	stmia.w	r5, {r1, r2}
 80172a6:	2501      	movs	r5, #1
 80172a8:	f8bd 7000 	ldrh.w	r7, [sp]
 80172ac:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80172b0:	9503      	str	r5, [sp, #12]
 80172b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172b4:	4798      	blx	r3
 80172b6:	4642      	mov	r2, r8
 80172b8:	4639      	mov	r1, r7
 80172ba:	4603      	mov	r3, r0
 80172bc:	4620      	mov	r0, r4
 80172be:	f7ff ff47 	bl	8017150 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80172c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80172c6:	9004      	str	r0, [sp, #16]
 80172c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80172cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80172d0:	9607      	str	r6, [sp, #28]
 80172d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80172d6:	4b10      	ldr	r3, [pc, #64]	; (8017318 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80172d8:	881b      	ldrh	r3, [r3, #0]
 80172da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80172de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80172e0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80172e4:	f7ec f9ae 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 80172e8:	6803      	ldr	r3, [r0, #0]
 80172ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172ec:	4798      	blx	r3
 80172ee:	23ff      	movs	r3, #255	; 0xff
 80172f0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80172f4:	a903      	add	r1, sp, #12
 80172f6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80172fa:	6860      	ldr	r0, [r4, #4]
 80172fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017300:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017304:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017308:	6803      	ldr	r3, [r0, #0]
 801730a:	685b      	ldr	r3, [r3, #4]
 801730c:	4798      	blx	r3
 801730e:	4630      	mov	r0, r6
 8017310:	b00c      	add	sp, #48	; 0x30
 8017312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017316:	bf00      	nop
 8017318:	20015032 	.word	0x20015032

0801731c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801731c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801731e:	b085      	sub	sp, #20
 8017320:	4605      	mov	r5, r0
 8017322:	ac02      	add	r4, sp, #8
 8017324:	e884 0006 	stmia.w	r4, {r1, r2}
 8017328:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801732c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017330:	f7ff fde6 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017334:	4631      	mov	r1, r6
 8017336:	4603      	mov	r3, r0
 8017338:	463a      	mov	r2, r7
 801733a:	4628      	mov	r0, r5
 801733c:	f7ff ff08 	bl	8017150 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017340:	4a05      	ldr	r2, [pc, #20]	; (8017358 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8017342:	682b      	ldr	r3, [r5, #0]
 8017344:	8812      	ldrh	r2, [r2, #0]
 8017346:	9200      	str	r2, [sp, #0]
 8017348:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801734a:	4603      	mov	r3, r0
 801734c:	4628      	mov	r0, r5
 801734e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017352:	47b0      	blx	r6
 8017354:	b005      	add	sp, #20
 8017356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017358:	20015032 	.word	0x20015032

0801735c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801735c:	b570      	push	{r4, r5, r6, lr}
 801735e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8017362:	4604      	mov	r4, r0
 8017364:	b19b      	cbz	r3, 801738e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017366:	2002      	movs	r0, #2
 8017368:	f7ea fc5e 	bl	8001c28 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801736c:	2300      	movs	r3, #0
 801736e:	4620      	mov	r0, r4
 8017370:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8017374:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8017378:	6823      	ldr	r3, [r4, #0]
 801737a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801737e:	f7ff fdbf 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017382:	4601      	mov	r1, r0
 8017384:	4620      	mov	r0, r4
 8017386:	462b      	mov	r3, r5
 8017388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801738c:	4718      	bx	r3
 801738e:	bd70      	pop	{r4, r5, r6, pc}

08017390 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8017390:	b570      	push	{r4, r5, r6, lr}
 8017392:	4605      	mov	r5, r0
 8017394:	460c      	mov	r4, r1
 8017396:	2003      	movs	r0, #3
 8017398:	b149      	cbz	r1, 80173ae <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801739a:	f7ea fbe5 	bl	8001b68 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801739e:	6928      	ldr	r0, [r5, #16]
 80173a0:	b168      	cbz	r0, 80173be <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80173a2:	6803      	ldr	r3, [r0, #0]
 80173a4:	2101      	movs	r1, #1
 80173a6:	695b      	ldr	r3, [r3, #20]
 80173a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173ac:	4718      	bx	r3
 80173ae:	f7ea fc0b 	bl	8001bc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80173b2:	6928      	ldr	r0, [r5, #16]
 80173b4:	b118      	cbz	r0, 80173be <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80173b6:	6803      	ldr	r3, [r0, #0]
 80173b8:	4621      	mov	r1, r4
 80173ba:	695b      	ldr	r3, [r3, #20]
 80173bc:	e7f4      	b.n	80173a8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80173be:	bd70      	pop	{r4, r5, r6, pc}

080173c0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80173c0:	b538      	push	{r3, r4, r5, lr}
 80173c2:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 80173c6:	4604      	mov	r4, r0
 80173c8:	460d      	mov	r5, r1
 80173ca:	428b      	cmp	r3, r1
 80173cc:	d006      	beq.n	80173dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80173ce:	6803      	ldr	r3, [r0, #0]
 80173d0:	b929      	cbnz	r1, 80173de <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80173d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80173d6:	4798      	blx	r3
 80173d8:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 80173dc:	bd38      	pop	{r3, r4, r5, pc}
 80173de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80173e2:	e7f8      	b.n	80173d6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080173e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80173e4:	4b0d      	ldr	r3, [pc, #52]	; (801741c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80173e6:	b510      	push	{r4, lr}
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	4604      	mov	r4, r0
 80173ec:	b95b      	cbnz	r3, 8017406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80173ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80173f2:	2b02      	cmp	r3, #2
 80173f4:	d007      	beq.n	8017406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80173f6:	6840      	ldr	r0, [r0, #4]
 80173f8:	f000 f912 	bl	8017620 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80173fc:	b118      	cbz	r0, 8017406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80173fe:	6862      	ldr	r2, [r4, #4]
 8017400:	7a53      	ldrb	r3, [r2, #9]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d0fc      	beq.n	8017400 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017406:	f7ea fd91 	bl	8001f2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801740a:	4620      	mov	r0, r4
 801740c:	2100      	movs	r1, #0
 801740e:	f7ff ffd7 	bl	80173c0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017412:	4620      	mov	r0, r4
 8017414:	f7ff fd74 	bl	8016f00 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017418:	bd10      	pop	{r4, pc}
 801741a:	bf00      	nop
 801741c:	20015036 	.word	0x20015036

08017420 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017420:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017424:	1a13      	subs	r3, r2, r0
 8017426:	4258      	negs	r0, r3
 8017428:	4158      	adcs	r0, r3
 801742a:	4770      	bx	lr

0801742c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801742c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017430:	1a9b      	subs	r3, r3, r2
 8017432:	2b00      	cmp	r3, #0
 8017434:	bfdc      	itt	le
 8017436:	6882      	ldrle	r2, [r0, #8]
 8017438:	189b      	addle	r3, r3, r2
 801743a:	2b01      	cmp	r3, #1
 801743c:	bfcc      	ite	gt
 801743e:	2000      	movgt	r0, #0
 8017440:	2001      	movle	r0, #1
 8017442:	4770      	bx	lr

08017444 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017444:	6902      	ldr	r2, [r0, #16]
 8017446:	6843      	ldr	r3, [r0, #4]
 8017448:	2024      	movs	r0, #36	; 0x24
 801744a:	fb00 3002 	mla	r0, r0, r2, r3
 801744e:	4770      	bx	lr

08017450 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017450:	6803      	ldr	r3, [r0, #0]
 8017452:	691b      	ldr	r3, [r3, #16]
 8017454:	4718      	bx	r3

08017456 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017456:	2301      	movs	r3, #1
 8017458:	b570      	push	{r4, r5, r6, lr}
 801745a:	7203      	strb	r3, [r0, #8]
 801745c:	4604      	mov	r4, r0
 801745e:	6840      	ldr	r0, [r0, #4]
 8017460:	6803      	ldr	r3, [r0, #0]
 8017462:	699b      	ldr	r3, [r3, #24]
 8017464:	4798      	blx	r3
 8017466:	6803      	ldr	r3, [r0, #0]
 8017468:	4605      	mov	r5, r0
 801746a:	2b40      	cmp	r3, #64	; 0x40
 801746c:	d00c      	beq.n	8017488 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801746e:	d810      	bhi.n	8017492 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017470:	2b04      	cmp	r3, #4
 8017472:	d01d      	beq.n	80174b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017474:	d804      	bhi.n	8017480 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8017476:	2b01      	cmp	r3, #1
 8017478:	d006      	beq.n	8017488 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801747a:	2b02      	cmp	r3, #2
 801747c:	d02c      	beq.n	80174d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801747e:	bd70      	pop	{r4, r5, r6, pc}
 8017480:	2b08      	cmp	r3, #8
 8017482:	d01d      	beq.n	80174c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017484:	2b20      	cmp	r3, #32
 8017486:	d1fa      	bne.n	801747e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8017488:	6823      	ldr	r3, [r4, #0]
 801748a:	4620      	mov	r0, r4
 801748c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801748e:	4798      	blx	r3
 8017490:	e013      	b.n	80174ba <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017496:	d0f7      	beq.n	8017488 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017498:	d804      	bhi.n	80174a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801749a:	2b80      	cmp	r3, #128	; 0x80
 801749c:	d0f4      	beq.n	8017488 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801749e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80174a2:	e7f0      	b.n	8017486 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80174a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80174a8:	d0ee      	beq.n	8017488 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80174aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80174ae:	e7e5      	b.n	801747c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80174b0:	6823      	ldr	r3, [r4, #0]
 80174b2:	7f01      	ldrb	r1, [r0, #28]
 80174b4:	4620      	mov	r0, r4
 80174b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174b8:	4798      	blx	r3
 80174ba:	6823      	ldr	r3, [r4, #0]
 80174bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174be:	e006      	b.n	80174ce <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80174c0:	6823      	ldr	r3, [r4, #0]
 80174c2:	7f01      	ldrb	r1, [r0, #28]
 80174c4:	4620      	mov	r0, r4
 80174c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174c8:	4798      	blx	r3
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174ce:	4629      	mov	r1, r5
 80174d0:	4620      	mov	r0, r4
 80174d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174d6:	4718      	bx	r3
 80174d8:	6823      	ldr	r3, [r4, #0]
 80174da:	4620      	mov	r0, r4
 80174dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174de:	4798      	blx	r3
 80174e0:	e7f3      	b.n	80174ca <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080174e2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80174e2:	4770      	bx	lr

080174e4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80174e4:	4770      	bx	lr

080174e6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80174e6:	4770      	bx	lr

080174e8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80174e8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80174ec:	b510      	push	{r4, lr}
 80174ee:	1ad2      	subs	r2, r2, r3
 80174f0:	2a00      	cmp	r2, #0
 80174f2:	bfdc      	itt	le
 80174f4:	6884      	ldrle	r4, [r0, #8]
 80174f6:	1912      	addle	r2, r2, r4
 80174f8:	2a01      	cmp	r2, #1
 80174fa:	dd16      	ble.n	801752a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80174fc:	6842      	ldr	r2, [r0, #4]
 80174fe:	2424      	movs	r4, #36	; 0x24
 8017500:	fb04 2303 	mla	r3, r4, r3, r2
 8017504:	f101 0220 	add.w	r2, r1, #32
 8017508:	f851 4b04 	ldr.w	r4, [r1], #4
 801750c:	4291      	cmp	r1, r2
 801750e:	f843 4b04 	str.w	r4, [r3], #4
 8017512:	d1f9      	bne.n	8017508 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017514:	780a      	ldrb	r2, [r1, #0]
 8017516:	701a      	strb	r2, [r3, #0]
 8017518:	68c3      	ldr	r3, [r0, #12]
 801751a:	6882      	ldr	r2, [r0, #8]
 801751c:	f3bf 8f5b 	dmb	ish
 8017520:	3301      	adds	r3, #1
 8017522:	429a      	cmp	r2, r3
 8017524:	bfd8      	it	le
 8017526:	1a9b      	suble	r3, r3, r2
 8017528:	60c3      	str	r3, [r0, #12]
 801752a:	bd10      	pop	{r4, pc}

0801752c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801752c:	6903      	ldr	r3, [r0, #16]
 801752e:	6882      	ldr	r2, [r0, #8]
 8017530:	f3bf 8f5b 	dmb	ish
 8017534:	3301      	adds	r3, #1
 8017536:	429a      	cmp	r2, r3
 8017538:	bfd8      	it	le
 801753a:	1a9b      	suble	r3, r3, r2
 801753c:	6103      	str	r3, [r0, #16]
 801753e:	4770      	bx	lr

08017540 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017540:	b570      	push	{r4, r5, r6, lr}
 8017542:	4604      	mov	r4, r0
 8017544:	460e      	mov	r6, r1
 8017546:	6860      	ldr	r0, [r4, #4]
 8017548:	6803      	ldr	r3, [r0, #0]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	4798      	blx	r3
 801754e:	2800      	cmp	r0, #0
 8017550:	d1f9      	bne.n	8017546 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017552:	4d0d      	ldr	r5, [pc, #52]	; (8017588 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017554:	6828      	ldr	r0, [r5, #0]
 8017556:	6803      	ldr	r3, [r0, #0]
 8017558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801755a:	4798      	blx	r3
 801755c:	f7ea fcf4 	bl	8001f48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017560:	6828      	ldr	r0, [r5, #0]
 8017562:	2101      	movs	r1, #1
 8017564:	f7ff ff2c 	bl	80173c0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017568:	6860      	ldr	r0, [r4, #4]
 801756a:	4631      	mov	r1, r6
 801756c:	6803      	ldr	r3, [r0, #0]
 801756e:	689b      	ldr	r3, [r3, #8]
 8017570:	4798      	blx	r3
 8017572:	6823      	ldr	r3, [r4, #0]
 8017574:	4620      	mov	r0, r4
 8017576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017578:	4798      	blx	r3
 801757a:	6828      	ldr	r0, [r5, #0]
 801757c:	6803      	ldr	r3, [r0, #0]
 801757e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017584:	4718      	bx	r3
 8017586:	bf00      	nop
 8017588:	20015038 	.word	0x20015038

0801758c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801758c:	b508      	push	{r3, lr}
 801758e:	f7ea fccd 	bl	8001f2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017596:	f7ea bcd1 	b.w	8001f3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801759a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801759a:	b510      	push	{r4, lr}
 801759c:	4604      	mov	r4, r0
 801759e:	2114      	movs	r1, #20
 80175a0:	f012 f812 	bl	80295c8 <_ZdlPvj>
 80175a4:	4620      	mov	r0, r4
 80175a6:	bd10      	pop	{r4, pc}

080175a8 <_ZN8touchgfx13DMA_Interface5startEv>:
 80175a8:	b510      	push	{r4, lr}
 80175aa:	4604      	mov	r4, r0
 80175ac:	6840      	ldr	r0, [r0, #4]
 80175ae:	6803      	ldr	r3, [r0, #0]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	4798      	blx	r3
 80175b4:	b948      	cbnz	r0, 80175ca <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80175b6:	7a63      	ldrb	r3, [r4, #9]
 80175b8:	b13b      	cbz	r3, 80175ca <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80175ba:	7a23      	ldrb	r3, [r4, #8]
 80175bc:	b92b      	cbnz	r3, 80175ca <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80175be:	6823      	ldr	r3, [r4, #0]
 80175c0:	4620      	mov	r0, r4
 80175c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175c8:	4718      	bx	r3
 80175ca:	bd10      	pop	{r4, pc}

080175cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80175cc:	b570      	push	{r4, r5, r6, lr}
 80175ce:	4604      	mov	r4, r0
 80175d0:	6840      	ldr	r0, [r0, #4]
 80175d2:	6803      	ldr	r3, [r0, #0]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	4798      	blx	r3
 80175d8:	4605      	mov	r5, r0
 80175da:	b930      	cbnz	r0, 80175ea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80175dc:	7a23      	ldrb	r3, [r4, #8]
 80175de:	b123      	cbz	r3, 80175ea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80175e0:	6860      	ldr	r0, [r4, #4]
 80175e2:	6803      	ldr	r3, [r0, #0]
 80175e4:	695b      	ldr	r3, [r3, #20]
 80175e6:	4798      	blx	r3
 80175e8:	7225      	strb	r5, [r4, #8]
 80175ea:	6860      	ldr	r0, [r4, #4]
 80175ec:	6803      	ldr	r3, [r0, #0]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	4798      	blx	r3
 80175f2:	b928      	cbnz	r0, 8017600 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80175f4:	6823      	ldr	r3, [r4, #0]
 80175f6:	4620      	mov	r0, r4
 80175f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175fe:	4718      	bx	r3
 8017600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017604:	f7ea bca8 	b.w	8001f58 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017608 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017608:	b510      	push	{r4, lr}
 801760a:	6082      	str	r2, [r0, #8]
 801760c:	2200      	movs	r2, #0
 801760e:	4c03      	ldr	r4, [pc, #12]	; (801761c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017610:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017614:	e9c0 4100 	strd	r4, r1, [r0]
 8017618:	bd10      	pop	{r4, pc}
 801761a:	bf00      	nop
 801761c:	0802ec4c 	.word	0x0802ec4c

08017620 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017620:	6840      	ldr	r0, [r0, #4]
 8017622:	6803      	ldr	r3, [r0, #0]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	4718      	bx	r3

08017628 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017628:	2300      	movs	r3, #0
 801762a:	8083      	strh	r3, [r0, #4]
 801762c:	80c3      	strh	r3, [r0, #6]
 801762e:	8003      	strh	r3, [r0, #0]
 8017630:	8043      	strh	r3, [r0, #2]
 8017632:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017636:	2bff      	cmp	r3, #255	; 0xff
 8017638:	bf01      	itttt	eq
 801763a:	890b      	ldrheq	r3, [r1, #8]
 801763c:	8083      	strheq	r3, [r0, #4]
 801763e:	894b      	ldrheq	r3, [r1, #10]
 8017640:	80c3      	strheq	r3, [r0, #6]
 8017642:	4770      	bx	lr

08017644 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017646:	4604      	mov	r4, r0
 8017648:	466b      	mov	r3, sp
 801764a:	6808      	ldr	r0, [r1, #0]
 801764c:	6849      	ldr	r1, [r1, #4]
 801764e:	c303      	stmia	r3!, {r0, r1}
 8017650:	6823      	ldr	r3, [r4, #0]
 8017652:	4669      	mov	r1, sp
 8017654:	4620      	mov	r0, r4
 8017656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017658:	4798      	blx	r3
 801765a:	4b08      	ldr	r3, [pc, #32]	; (801767c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8017662:	b10a      	cbz	r2, 8017668 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017664:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017666:	b900      	cbnz	r0, 801766a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017668:	6898      	ldr	r0, [r3, #8]
 801766a:	6803      	ldr	r3, [r0, #0]
 801766c:	4669      	mov	r1, sp
 801766e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017670:	6a1d      	ldr	r5, [r3, #32]
 8017672:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017676:	47a8      	blx	r5
 8017678:	b003      	add	sp, #12
 801767a:	bd30      	pop	{r4, r5, pc}
 801767c:	20015038 	.word	0x20015038

08017680 <_ZN8touchgfx3BoxD1Ev>:
 8017680:	4770      	bx	lr

08017682 <_ZN8touchgfx3BoxD0Ev>:
 8017682:	b510      	push	{r4, lr}
 8017684:	4604      	mov	r4, r0
 8017686:	212c      	movs	r1, #44	; 0x2c
 8017688:	f011 ff9e 	bl	80295c8 <_ZdlPvj>
 801768c:	4620      	mov	r0, r4
 801768e:	bd10      	pop	{r4, pc}

08017690 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017690:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8017694:	b12a      	cbz	r2, 80176a2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017696:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801769a:	b112      	cbz	r2, 80176a2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801769c:	6803      	ldr	r3, [r0, #0]
 801769e:	695b      	ldr	r3, [r3, #20]
 80176a0:	4718      	bx	r3
 80176a2:	4770      	bx	lr

080176a4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80176a4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80176a8:	4770      	bx	lr

080176aa <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80176aa:	b570      	push	{r4, r5, r6, lr}
 80176ac:	880b      	ldrh	r3, [r1, #0]
 80176ae:	4605      	mov	r5, r0
 80176b0:	4604      	mov	r4, r0
 80176b2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80176b4:	8813      	ldrh	r3, [r2, #0]
 80176b6:	f825 3f30 	strh.w	r3, [r5, #48]!
 80176ba:	4628      	mov	r0, r5
 80176bc:	f004 fb16 	bl	801bcec <_ZNK8touchgfx6Bitmap8getWidthEv>
 80176c0:	4606      	mov	r6, r0
 80176c2:	4628      	mov	r0, r5
 80176c4:	f004 fb46 	bl	801bd54 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176c8:	6823      	ldr	r3, [r4, #0]
 80176ca:	4605      	mov	r5, r0
 80176cc:	4631      	mov	r1, r6
 80176ce:	4620      	mov	r0, r4
 80176d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176d2:	4798      	blx	r3
 80176d4:	6823      	ldr	r3, [r4, #0]
 80176d6:	4629      	mov	r1, r5
 80176d8:	4620      	mov	r0, r4
 80176da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176e0:	4718      	bx	r3

080176e2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80176e2:	b510      	push	{r4, lr}
 80176e4:	4604      	mov	r4, r0
 80176e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80176e8:	b150      	cbz	r0, 8017700 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80176ea:	6803      	ldr	r3, [r0, #0]
 80176ec:	68db      	ldr	r3, [r3, #12]
 80176ee:	4798      	blx	r3
 80176f0:	b130      	cbz	r0, 8017700 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80176f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80176f4:	4621      	mov	r1, r4
 80176f6:	6803      	ldr	r3, [r0, #0]
 80176f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176fc:	689b      	ldr	r3, [r3, #8]
 80176fe:	4718      	bx	r3
 8017700:	bd10      	pop	{r4, pc}

08017702 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017702:	b510      	push	{r4, lr}
 8017704:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8017708:	4604      	mov	r4, r0
 801770a:	2bff      	cmp	r3, #255	; 0xff
 801770c:	d006      	beq.n	801771c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801770e:	2300      	movs	r3, #0
 8017710:	8003      	strh	r3, [r0, #0]
 8017712:	8043      	strh	r3, [r0, #2]
 8017714:	8083      	strh	r3, [r0, #4]
 8017716:	80c3      	strh	r3, [r0, #6]
 8017718:	4620      	mov	r0, r4
 801771a:	bd10      	pop	{r4, pc}
 801771c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017720:	b11b      	cbz	r3, 801772a <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017722:	3130      	adds	r1, #48	; 0x30
 8017724:	f004 fb4a 	bl	801bdbc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017728:	e7f6      	b.n	8017718 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801772a:	312e      	adds	r1, #46	; 0x2e
 801772c:	e7fa      	b.n	8017724 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08017730 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8017730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017734:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017738:	b08a      	sub	sp, #40	; 0x28
 801773a:	4604      	mov	r4, r0
 801773c:	4688      	mov	r8, r1
 801773e:	2b00      	cmp	r3, #0
 8017740:	d066      	beq.n	8017810 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8017742:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017744:	a805      	add	r0, sp, #20
 8017746:	f8ad 3014 	strh.w	r3, [sp, #20]
 801774a:	f004 facf 	bl	801bcec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801774e:	4607      	mov	r7, r0
 8017750:	a805      	add	r0, sp, #20
 8017752:	f004 faff 	bl	801bd54 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017756:	f9b8 6000 	ldrsh.w	r6, [r8]
 801775a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801775e:	2300      	movs	r3, #0
 8017760:	4432      	add	r2, r6
 8017762:	9306      	str	r3, [sp, #24]
 8017764:	b292      	uxth	r2, r2
 8017766:	fa0f fc82 	sxth.w	ip, r2
 801776a:	459c      	cmp	ip, r3
 801776c:	dd52      	ble.n	8017814 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801776e:	42b7      	cmp	r7, r6
 8017770:	dd50      	ble.n	8017814 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8017772:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8017776:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801777a:	442b      	add	r3, r5
 801777c:	b29b      	uxth	r3, r3
 801777e:	b219      	sxth	r1, r3
 8017780:	2900      	cmp	r1, #0
 8017782:	dd47      	ble.n	8017814 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8017784:	42a8      	cmp	r0, r5
 8017786:	dd45      	ble.n	8017814 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8017788:	4567      	cmp	r7, ip
 801778a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801778e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8017792:	bfb8      	it	lt
 8017794:	b2ba      	uxthlt	r2, r7
 8017796:	4288      	cmp	r0, r1
 8017798:	f8ad 6018 	strh.w	r6, [sp, #24]
 801779c:	bfb8      	it	lt
 801779e:	b283      	uxthlt	r3, r0
 80177a0:	1b92      	subs	r2, r2, r6
 80177a2:	f8ad 501a 	strh.w	r5, [sp, #26]
 80177a6:	1b5b      	subs	r3, r3, r5
 80177a8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80177ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80177b0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80177b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177b8:	429a      	cmp	r2, r3
 80177ba:	d026      	beq.n	801780a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80177bc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	dd22      	ble.n	801780a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80177c4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	dd1e      	ble.n	801780a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80177cc:	2300      	movs	r3, #0
 80177ce:	a908      	add	r1, sp, #32
 80177d0:	4620      	mov	r0, r4
 80177d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80177d6:	6823      	ldr	r3, [r4, #0]
 80177d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177da:	4798      	blx	r3
 80177dc:	4b0f      	ldr	r3, [pc, #60]	; (801781c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80177e4:	b10a      	cbz	r2, 80177ea <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80177e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80177e8:	b900      	cbnz	r0, 80177ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80177ea:	6898      	ldr	r0, [r3, #8]
 80177ec:	2501      	movs	r5, #1
 80177ee:	6801      	ldr	r1, [r0, #0]
 80177f0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80177f4:	9502      	str	r5, [sp, #8]
 80177f6:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80177fa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80177fe:	9401      	str	r4, [sp, #4]
 8017800:	ac06      	add	r4, sp, #24
 8017802:	9400      	str	r4, [sp, #0]
 8017804:	688c      	ldr	r4, [r1, #8]
 8017806:	a905      	add	r1, sp, #20
 8017808:	47a0      	blx	r4
 801780a:	b00a      	add	sp, #40	; 0x28
 801780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017810:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8017812:	e797      	b.n	8017744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8017814:	2300      	movs	r3, #0
 8017816:	9307      	str	r3, [sp, #28]
 8017818:	e7ca      	b.n	80177b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801781a:	bf00      	nop
 801781c:	20015038 	.word	0x20015038

08017820 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8017820:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8017824:	b12a      	cbz	r2, 8017832 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8017826:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801782a:	b112      	cbz	r2, 8017832 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801782c:	6803      	ldr	r3, [r0, #0]
 801782e:	695b      	ldr	r3, [r3, #20]
 8017830:	4718      	bx	r3
 8017832:	4770      	bx	lr

08017834 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8017834:	4770      	bx	lr

08017836 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8017836:	b510      	push	{r4, lr}
 8017838:	4604      	mov	r4, r0
 801783a:	2148      	movs	r1, #72	; 0x48
 801783c:	f011 fec4 	bl	80295c8 <_ZdlPvj>
 8017840:	4620      	mov	r0, r4
 8017842:	bd10      	pop	{r4, pc}

08017844 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8017844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017848:	b08d      	sub	sp, #52	; 0x34
 801784a:	4604      	mov	r4, r0
 801784c:	460f      	mov	r7, r1
 801784e:	f7ff ff6f 	bl	8017730 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8017852:	4a55      	ldr	r2, [pc, #340]	; (80179a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8017854:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017856:	8812      	ldrh	r2, [r2, #0]
 8017858:	429a      	cmp	r2, r3
 801785a:	f240 8082 	bls.w	8017962 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801785e:	4d53      	ldr	r5, [pc, #332]	; (80179ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8017860:	682a      	ldr	r2, [r5, #0]
 8017862:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017866:	4b52      	ldr	r3, [pc, #328]	; (80179b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801786e:	2200      	movs	r2, #0
 8017870:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 8017874:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8017878:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 801787c:	2a03      	cmp	r2, #3
 801787e:	d811      	bhi.n	80178a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8017880:	e8df f002 	tbb	[pc, r2]
 8017884:	89727902 	.word	0x89727902
 8017888:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801788c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017890:	1ad2      	subs	r2, r2, r3
 8017892:	2002      	movs	r0, #2
 8017894:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017898:	f8ad 3012 	strh.w	r3, [sp, #18]
 801789c:	fb92 f2f0 	sdiv	r2, r2, r0
 80178a0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80178a4:	f10d 080c 	add.w	r8, sp, #12
 80178a8:	f10d 0914 	add.w	r9, sp, #20
 80178ac:	e898 0003 	ldmia.w	r8, {r0, r1}
 80178b0:	e889 0003 	stmia.w	r9, {r0, r1}
 80178b4:	4639      	mov	r1, r7
 80178b6:	4648      	mov	r0, r9
 80178b8:	f7fe fe9e 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 80178bc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	dd4e      	ble.n	8017962 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80178c4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	dd4a      	ble.n	8017962 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80178cc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80178d0:	4641      	mov	r1, r8
 80178d2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80178d6:	4620      	mov	r0, r4
 80178d8:	1a9b      	subs	r3, r3, r2
 80178da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80178de:	f8ad 3014 	strh.w	r3, [sp, #20]
 80178e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80178e6:	1a9b      	subs	r3, r3, r2
 80178e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178ec:	6823      	ldr	r3, [r4, #0]
 80178ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178f0:	4798      	blx	r3
 80178f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d053      	beq.n	80179a2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 80178fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80178fc:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80178fe:	682b      	ldr	r3, [r5, #0]
 8017900:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8017904:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017908:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 801790c:	785b      	ldrb	r3, [r3, #1]
 801790e:	9209      	str	r2, [sp, #36]	; 0x24
 8017910:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8017914:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017918:	9607      	str	r6, [sp, #28]
 801791a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801791e:	2300      	movs	r3, #0
 8017920:	f88d 5020 	strb.w	r5, [sp, #32]
 8017924:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8017928:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801792c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017930:	4b20      	ldr	r3, [pc, #128]	; (80179b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8017932:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801793c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8017940:	b10a      	cbz	r2, 8017946 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8017942:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017944:	b904      	cbnz	r4, 8017948 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8017946:	689c      	ldr	r4, [r3, #8]
 8017948:	4b1b      	ldr	r3, [pc, #108]	; (80179b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801794a:	6818      	ldr	r0, [r3, #0]
 801794c:	f7ec f94c 	bl	8003be8 <_ZNK8touchgfx5Texts7getTextEt>
 8017950:	ab07      	add	r3, sp, #28
 8017952:	9001      	str	r0, [sp, #4]
 8017954:	4620      	mov	r0, r4
 8017956:	9300      	str	r3, [sp, #0]
 8017958:	464b      	mov	r3, r9
 801795a:	e898 0006 	ldmia.w	r8, {r1, r2}
 801795e:	f7ec f8f5 	bl	8003b4c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017962:	b00d      	add	sp, #52	; 0x34
 8017964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017968:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801796c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017970:	1ad2      	subs	r2, r2, r3
 8017972:	3201      	adds	r2, #1
 8017974:	e78d      	b.n	8017892 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8017976:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801797a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801797e:	1ad2      	subs	r2, r2, r3
 8017980:	3201      	adds	r2, #1
 8017982:	2002      	movs	r0, #2
 8017984:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017988:	f8ad 1012 	strh.w	r1, [sp, #18]
 801798c:	fb92 f2f0 	sdiv	r2, r2, r0
 8017990:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017994:	e786      	b.n	80178a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8017996:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801799a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801799e:	1ad2      	subs	r2, r2, r3
 80179a0:	e7ef      	b.n	8017982 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80179a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80179a4:	e7aa      	b.n	80178fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80179a6:	bf00      	nop
 80179a8:	2001508c 	.word	0x2001508c
 80179ac:	20015088 	.word	0x20015088
 80179b0:	20015090 	.word	0x20015090
 80179b4:	20015038 	.word	0x20015038
 80179b8:	20015094 	.word	0x20015094

080179bc <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80179bc:	2101      	movs	r1, #1
 80179be:	2200      	movs	r2, #0
 80179c0:	b510      	push	{r4, lr}
 80179c2:	4c13      	ldr	r4, [pc, #76]	; (8017a10 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80179c4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80179c8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80179cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80179d0:	6004      	str	r4, [r0, #0]
 80179d2:	4c10      	ldr	r4, [pc, #64]	; (8017a14 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80179d4:	8082      	strh	r2, [r0, #4]
 80179d6:	80c2      	strh	r2, [r0, #6]
 80179d8:	8102      	strh	r2, [r0, #8]
 80179da:	8142      	strh	r2, [r0, #10]
 80179dc:	8182      	strh	r2, [r0, #12]
 80179de:	81c2      	strh	r2, [r0, #14]
 80179e0:	8202      	strh	r2, [r0, #16]
 80179e2:	8242      	strh	r2, [r0, #18]
 80179e4:	61c2      	str	r2, [r0, #28]
 80179e6:	8402      	strh	r2, [r0, #32]
 80179e8:	8442      	strh	r2, [r0, #34]	; 0x22
 80179ea:	6282      	str	r2, [r0, #40]	; 0x28
 80179ec:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80179f0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80179f2:	8601      	strh	r1, [r0, #48]	; 0x30
 80179f4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80179f8:	6344      	str	r4, [r0, #52]	; 0x34
 80179fa:	8701      	strh	r1, [r0, #56]	; 0x38
 80179fc:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8017a00:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8017a04:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017a08:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8017a0c:	bd10      	pop	{r4, pc}
 8017a0e:	bf00      	nop
 8017a10:	0802ecd8 	.word	0x0802ecd8
 8017a14:	0802c340 	.word	0x0802c340

08017a18 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8017a18:	b510      	push	{r4, lr}
 8017a1a:	6803      	ldr	r3, [r0, #0]
 8017a1c:	460c      	mov	r4, r1
 8017a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a20:	4798      	blx	r3
 8017a22:	1b03      	subs	r3, r0, r4
 8017a24:	4258      	negs	r0, r3
 8017a26:	4158      	adcs	r0, r3
 8017a28:	bd10      	pop	{r4, pc}
	...

08017a2c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017a2c:	4b01      	ldr	r3, [pc, #4]	; (8017a34 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017a2e:	6019      	str	r1, [r3, #0]
 8017a30:	4770      	bx	lr
 8017a32:	bf00      	nop
 8017a34:	20015040 	.word	0x20015040

08017a38 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a3c:	4696      	mov	lr, r2
 8017a3e:	b097      	sub	sp, #92	; 0x5c
 8017a40:	4605      	mov	r5, r0
 8017a42:	4614      	mov	r4, r2
 8017a44:	460e      	mov	r6, r1
 8017a46:	461f      	mov	r7, r3
 8017a48:	f10d 0c1c 	add.w	ip, sp, #28
 8017a4c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017a50:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017a54:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017a58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a60:	f8de 3000 	ldr.w	r3, [lr]
 8017a64:	f104 0e14 	add.w	lr, r4, #20
 8017a68:	f8cc 3000 	str.w	r3, [ip]
 8017a6c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017a70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a78:	f8de 3000 	ldr.w	r3, [lr]
 8017a7c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017a80:	f8cc 3000 	str.w	r3, [ip]
 8017a84:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017a88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a90:	f8de 3000 	ldr.w	r3, [lr]
 8017a94:	4631      	mov	r1, r6
 8017a96:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017a98:	4628      	mov	r0, r5
 8017a9a:	f8cc 3000 	str.w	r3, [ip]
 8017a9e:	682b      	ldr	r3, [r5, #0]
 8017aa0:	9201      	str	r2, [sp, #4]
 8017aa2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017aa4:	f8cd 8008 	str.w	r8, [sp, #8]
 8017aa8:	9200      	str	r2, [sp, #0]
 8017aaa:	aa07      	add	r2, sp, #28
 8017aac:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017ab0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8017ab4:	463b      	mov	r3, r7
 8017ab6:	47d8      	blx	fp
 8017ab8:	46a6      	mov	lr, r4
 8017aba:	f10d 0c1c 	add.w	ip, sp, #28
 8017abe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017ac2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ac6:	f8de 3000 	ldr.w	r3, [lr]
 8017aca:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017ace:	343c      	adds	r4, #60	; 0x3c
 8017ad0:	f8cc 3000 	str.w	r3, [ip]
 8017ad4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017ad8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017adc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ae0:	f8de 3000 	ldr.w	r3, [lr]
 8017ae4:	f8cc 3000 	str.w	r3, [ip]
 8017ae8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017aee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017af2:	6823      	ldr	r3, [r4, #0]
 8017af4:	4631      	mov	r1, r6
 8017af6:	4628      	mov	r0, r5
 8017af8:	f8cc 3000 	str.w	r3, [ip]
 8017afc:	682b      	ldr	r3, [r5, #0]
 8017afe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017b02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017b04:	f8cd 8008 	str.w	r8, [sp, #8]
 8017b08:	9201      	str	r2, [sp, #4]
 8017b0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b0c:	9200      	str	r2, [sp, #0]
 8017b0e:	aa07      	add	r2, sp, #28
 8017b10:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8017b12:	463b      	mov	r3, r7
 8017b14:	47a0      	blx	r4
 8017b16:	b017      	add	sp, #92	; 0x5c
 8017b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b1c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b20:	b08d      	sub	sp, #52	; 0x34
 8017b22:	4688      	mov	r8, r1
 8017b24:	f8d3 c000 	ldr.w	ip, [r3]
 8017b28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017b2a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017b2e:	680f      	ldr	r7, [r1, #0]
 8017b30:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017b34:	eba7 070c 	sub.w	r7, r7, ip
 8017b38:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017b3c:	edd3 6a07 	vldr	s13, [r3, #28]
 8017b40:	42bc      	cmp	r4, r7
 8017b42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017b44:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017b48:	bfa8      	it	ge
 8017b4a:	463c      	movge	r4, r7
 8017b4c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017b50:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017b54:	ee07 4a90 	vmov	s15, r4
 8017b58:	eb09 0e0c 	add.w	lr, r9, ip
 8017b5c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017b60:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017b64:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017b68:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017b6c:	4571      	cmp	r1, lr
 8017b6e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017b72:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017b76:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017b7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017b7e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017b82:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017b86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017b8a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017b8e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017b92:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017b96:	f340 808c 	ble.w	8017cb2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8017b9a:	eba1 060e 	sub.w	r6, r1, lr
 8017b9e:	fb96 f5f4 	sdiv	r5, r6, r4
 8017ba2:	ee07 5a10 	vmov	s14, r5
 8017ba6:	2d00      	cmp	r5, #0
 8017ba8:	fb04 6615 	mls	r6, r4, r5, r6
 8017bac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017bb0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017bb4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017bb8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017bbc:	dd12      	ble.n	8017be4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017bbe:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017bc2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017bc6:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017bca:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bd2:	bf14      	ite	ne
 8017bd4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017bd8:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017bdc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017be0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017be4:	fb05 f204 	mul.w	r2, r5, r4
 8017be8:	1abf      	subs	r7, r7, r2
 8017bea:	4494      	add	ip, r2
 8017bec:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017bf0:	4411      	add	r1, r2
 8017bf2:	eb09 020c 	add.w	r2, r9, ip
 8017bf6:	b209      	sxth	r1, r1
 8017bf8:	443a      	add	r2, r7
 8017bfa:	428a      	cmp	r2, r1
 8017bfc:	bfc4      	itt	gt
 8017bfe:	eba1 0209 	subgt.w	r2, r1, r9
 8017c02:	eba2 070c 	subgt.w	r7, r2, ip
 8017c06:	2f00      	cmp	r7, #0
 8017c08:	dd50      	ble.n	8017cac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017c0a:	fb97 f1f4 	sdiv	r1, r7, r4
 8017c0e:	fb04 7211 	mls	r2, r4, r1, r7
 8017c12:	b90a      	cbnz	r2, 8017c18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017c14:	3901      	subs	r1, #1
 8017c16:	4622      	mov	r2, r4
 8017c18:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017c1c:	6840      	ldr	r0, [r0, #4]
 8017c1e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8017c22:	44b6      	add	lr, r6
 8017c24:	f8d0 a000 	ldr.w	sl, [r0]
 8017c28:	2900      	cmp	r1, #0
 8017c2a:	bfcc      	ite	gt
 8017c2c:	46a1      	movgt	r9, r4
 8017c2e:	4691      	movle	r9, r2
 8017c30:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c32:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017c34:	fb04 e505 	mla	r5, r4, r5, lr
 8017c38:	eef0 6a42 	vmov.f32	s13, s4
 8017c3c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017c40:	9008      	str	r0, [sp, #32]
 8017c42:	eeb0 7a61 	vmov.f32	s14, s3
 8017c46:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017c48:	695b      	ldr	r3, [r3, #20]
 8017c4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c4e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017c52:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017c56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017c58:	445b      	add	r3, fp
 8017c5a:	9307      	str	r3, [sp, #28]
 8017c5c:	ee16 3a90 	vmov	r3, s13
 8017c60:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017c64:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017c68:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017c6c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017c70:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c74:	ee17 7a90 	vmov	r7, s15
 8017c78:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017c7c:	fb97 f7f4 	sdiv	r7, r7, r4
 8017c80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c84:	ee17 ca90 	vmov	ip, s15
 8017c88:	fb9c fcf4 	sdiv	ip, ip, r4
 8017c8c:	fb0c 3306 	mla	r3, ip, r6, r3
 8017c90:	9302      	str	r3, [sp, #8]
 8017c92:	ee17 3a10 	vmov	r3, s14
 8017c96:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017c9a:	fb07 3706 	mla	r7, r7, r6, r3
 8017c9e:	eba9 0306 	sub.w	r3, r9, r6
 8017ca2:	e9cd 4700 	strd	r4, r7, [sp]
 8017ca6:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017caa:	47a0      	blx	r4
 8017cac:	b00d      	add	sp, #52	; 0x34
 8017cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cb2:	2500      	movs	r5, #0
 8017cb4:	462e      	mov	r6, r5
 8017cb6:	e799      	b.n	8017bec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017cb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cbc:	b0db      	sub	sp, #364	; 0x16c
 8017cbe:	461d      	mov	r5, r3
 8017cc0:	4614      	mov	r4, r2
 8017cc2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017cc6:	910f      	str	r1, [sp, #60]	; 0x3c
 8017cc8:	4629      	mov	r1, r5
 8017cca:	930a      	str	r3, [sp, #40]	; 0x28
 8017ccc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017cd0:	9009      	str	r0, [sp, #36]	; 0x24
 8017cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cd4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017cd8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8017cde:	6803      	ldr	r3, [r0, #0]
 8017ce0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8017ce2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017ce6:	47b8      	blx	r7
 8017ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cea:	6058      	str	r0, [r3, #4]
 8017cec:	2800      	cmp	r0, #0
 8017cee:	f000 83a1 	beq.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017cf2:	682b      	ldr	r3, [r5, #0]
 8017cf4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017cf8:	ed94 7a02 	vldr	s14, [r4, #8]
 8017cfc:	9314      	str	r3, [sp, #80]	; 0x50
 8017cfe:	686b      	ldr	r3, [r5, #4]
 8017d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d04:	9315      	str	r3, [sp, #84]	; 0x54
 8017d06:	4bc1      	ldr	r3, [pc, #772]	; (801800c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017d08:	7819      	ldrb	r1, [r3, #0]
 8017d0a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017d0e:	2900      	cmp	r1, #0
 8017d10:	bf16      	itet	ne
 8017d12:	4619      	movne	r1, r3
 8017d14:	4611      	moveq	r1, r2
 8017d16:	4613      	movne	r3, r2
 8017d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d1c:	9116      	str	r1, [sp, #88]	; 0x58
 8017d1e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017d22:	f240 8387 	bls.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d26:	ed94 7a07 	vldr	s14, [r4, #28]
 8017d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d32:	f240 837f 	bls.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d36:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d42:	f240 8377 	bls.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d46:	6822      	ldr	r2, [r4, #0]
 8017d48:	4bb1      	ldr	r3, [pc, #708]	; (8018010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	f2c0 8372 	blt.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d50:	49b0      	ldr	r1, [pc, #704]	; (8018014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017d52:	6963      	ldr	r3, [r4, #20]
 8017d54:	428a      	cmp	r2, r1
 8017d56:	f300 836d 	bgt.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d5a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d5e:	48ae      	ldr	r0, [pc, #696]	; (8018018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017d60:	33ff      	adds	r3, #255	; 0xff
 8017d62:	4283      	cmp	r3, r0
 8017d64:	f200 8366 	bhi.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017d6a:	4dac      	ldr	r5, [pc, #688]	; (801801c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017d6c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d70:	33ff      	adds	r3, #255	; 0xff
 8017d72:	42ab      	cmp	r3, r5
 8017d74:	f200 835e 	bhi.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d78:	6862      	ldr	r2, [r4, #4]
 8017d7a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017d7e:	33ff      	adds	r3, #255	; 0xff
 8017d80:	4283      	cmp	r3, r0
 8017d82:	f200 8357 	bhi.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d86:	69a1      	ldr	r1, [r4, #24]
 8017d88:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017d8c:	33ff      	adds	r3, #255	; 0xff
 8017d8e:	4283      	cmp	r3, r0
 8017d90:	f200 8350 	bhi.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017d96:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8017d9a:	30ff      	adds	r0, #255	; 0xff
 8017d9c:	42a8      	cmp	r0, r5
 8017d9e:	f200 8349 	bhi.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017da2:	428a      	cmp	r2, r1
 8017da4:	f280 8110 	bge.w	8017fc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017da8:	429a      	cmp	r2, r3
 8017daa:	f300 8119 	bgt.w	8017fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017dae:	4299      	cmp	r1, r3
 8017db0:	f280 811d 	bge.w	8017fee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017db4:	2502      	movs	r5, #2
 8017db6:	2701      	movs	r7, #1
 8017db8:	46a9      	mov	r9, r5
 8017dba:	46b8      	mov	r8, r7
 8017dbc:	f04f 0a00 	mov.w	sl, #0
 8017dc0:	4621      	mov	r1, r4
 8017dc2:	a849      	add	r0, sp, #292	; 0x124
 8017dc4:	f003 fcca 	bl	801b75c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017dc8:	4622      	mov	r2, r4
 8017dca:	4653      	mov	r3, sl
 8017dcc:	a949      	add	r1, sp, #292	; 0x124
 8017dce:	f8cd 9000 	str.w	r9, [sp]
 8017dd2:	a819      	add	r0, sp, #100	; 0x64
 8017dd4:	f003 fdf2 	bl	801b9bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017dd8:	4622      	mov	r2, r4
 8017dda:	4653      	mov	r3, sl
 8017ddc:	a949      	add	r1, sp, #292	; 0x124
 8017dde:	f8cd 8000 	str.w	r8, [sp]
 8017de2:	a829      	add	r0, sp, #164	; 0xa4
 8017de4:	f003 fdea 	bl	801b9bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017de8:	4643      	mov	r3, r8
 8017dea:	4622      	mov	r2, r4
 8017dec:	a949      	add	r1, sp, #292	; 0x124
 8017dee:	f8cd 9000 	str.w	r9, [sp]
 8017df2:	a839      	add	r0, sp, #228	; 0xe4
 8017df4:	f003 fde2 	bl	801b9bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017df8:	42af      	cmp	r7, r5
 8017dfa:	af12      	add	r7, sp, #72	; 0x48
 8017dfc:	bfb7      	itett	lt
 8017dfe:	2300      	movlt	r3, #0
 8017e00:	2301      	movge	r3, #1
 8017e02:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017e04:	ac19      	addlt	r4, sp, #100	; 0x64
 8017e06:	bfb1      	iteee	lt
 8017e08:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e0a:	ad19      	addge	r5, sp, #100	; 0x64
 8017e0c:	930e      	strge	r3, [sp, #56]	; 0x38
 8017e0e:	ac29      	addge	r4, sp, #164	; 0xa4
 8017e10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017e16:	e887 0003 	stmia.w	r7, {r0, r1}
 8017e1a:	b928      	cbnz	r0, 8017e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017e1c:	4b80      	ldr	r3, [pc, #512]	; (8018020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017e1e:	6818      	ldr	r0, [r3, #0]
 8017e20:	6803      	ldr	r3, [r0, #0]
 8017e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e24:	4798      	blx	r3
 8017e26:	6038      	str	r0, [r7, #0]
 8017e28:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017e2a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017e2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017e32:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017e34:	930c      	str	r3, [sp, #48]	; 0x30
 8017e36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017e38:	6963      	ldr	r3, [r4, #20]
 8017e3a:	440b      	add	r3, r1
 8017e3c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017e40:	4408      	add	r0, r1
 8017e42:	b200      	sxth	r0, r0
 8017e44:	4283      	cmp	r3, r0
 8017e46:	900d      	str	r0, [sp, #52]	; 0x34
 8017e48:	f280 80dd 	bge.w	8018006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017e4c:	428b      	cmp	r3, r1
 8017e4e:	da08      	bge.n	8017e62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e50:	2a00      	cmp	r2, #0
 8017e52:	dd06      	ble.n	8017e62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e54:	1acb      	subs	r3, r1, r3
 8017e56:	429a      	cmp	r2, r3
 8017e58:	f2c0 80e4 	blt.w	8018024 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	f300 80e2 	bgt.w	8018026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017e62:	6967      	ldr	r7, [r4, #20]
 8017e64:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e6a:	443b      	add	r3, r7
 8017e6c:	461f      	mov	r7, r3
 8017e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e70:	1bdf      	subs	r7, r3, r7
 8017e72:	4297      	cmp	r7, r2
 8017e74:	bfa8      	it	ge
 8017e76:	4617      	movge	r7, r2
 8017e78:	2f00      	cmp	r7, #0
 8017e7a:	f340 8166 	ble.w	801814a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017e7e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017e80:	6829      	ldr	r1, [r5, #0]
 8017e82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e86:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017e8a:	4411      	add	r1, r2
 8017e8c:	6820      	ldr	r0, [r4, #0]
 8017e8e:	4299      	cmp	r1, r3
 8017e90:	dd1a      	ble.n	8017ec8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017e92:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017e96:	4402      	add	r2, r0
 8017e98:	440b      	add	r3, r1
 8017e9a:	b21b      	sxth	r3, r3
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	dc13      	bgt.n	8017ec8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017ea0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017ea2:	a912      	add	r1, sp, #72	; 0x48
 8017ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	9206      	str	r2, [sp, #24]
 8017eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017eae:	9500      	str	r5, [sp, #0]
 8017eb0:	9205      	str	r2, [sp, #20]
 8017eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017eb4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017eb8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017eba:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017ebe:	aa49      	add	r2, sp, #292	; 0x124
 8017ec0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017ec4:	4623      	mov	r3, r4
 8017ec6:	47c8      	blx	r9
 8017ec8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017ecc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017ed0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ed8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017edc:	68a1      	ldr	r1, [r4, #8]
 8017ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ee2:	ed94 6a08 	vldr	s12, [r4, #32]
 8017ee6:	edd4 6a07 	vldr	s13, [r4, #28]
 8017eea:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017eee:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ef2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017efa:	edc4 6a07 	vstr	s13, [r4, #28]
 8017efe:	441a      	add	r2, r3
 8017f00:	6963      	ldr	r3, [r4, #20]
 8017f02:	3301      	adds	r3, #1
 8017f04:	6022      	str	r2, [r4, #0]
 8017f06:	6163      	str	r3, [r4, #20]
 8017f08:	69a3      	ldr	r3, [r4, #24]
 8017f0a:	3b01      	subs	r3, #1
 8017f0c:	61a3      	str	r3, [r4, #24]
 8017f0e:	6923      	ldr	r3, [r4, #16]
 8017f10:	440b      	add	r3, r1
 8017f12:	68e1      	ldr	r1, [r4, #12]
 8017f14:	428b      	cmp	r3, r1
 8017f16:	6123      	str	r3, [r4, #16]
 8017f18:	db15      	blt.n	8017f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017f1a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017f1e:	3201      	adds	r2, #1
 8017f20:	1a5b      	subs	r3, r3, r1
 8017f22:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017f26:	6022      	str	r2, [r4, #0]
 8017f28:	6123      	str	r3, [r4, #16]
 8017f2a:	edc4 6a07 	vstr	s13, [r4, #28]
 8017f2e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017f32:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017f36:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017f3a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f42:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017f46:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017f4a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017f4e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f56:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017f5a:	68a9      	ldr	r1, [r5, #8]
 8017f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017f60:	ed95 6a08 	vldr	s12, [r5, #32]
 8017f64:	edd5 6a07 	vldr	s13, [r5, #28]
 8017f68:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017f6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017f70:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017f74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017f78:	edc5 6a07 	vstr	s13, [r5, #28]
 8017f7c:	441a      	add	r2, r3
 8017f7e:	696b      	ldr	r3, [r5, #20]
 8017f80:	3301      	adds	r3, #1
 8017f82:	602a      	str	r2, [r5, #0]
 8017f84:	616b      	str	r3, [r5, #20]
 8017f86:	69ab      	ldr	r3, [r5, #24]
 8017f88:	3b01      	subs	r3, #1
 8017f8a:	61ab      	str	r3, [r5, #24]
 8017f8c:	692b      	ldr	r3, [r5, #16]
 8017f8e:	440b      	add	r3, r1
 8017f90:	68e9      	ldr	r1, [r5, #12]
 8017f92:	428b      	cmp	r3, r1
 8017f94:	612b      	str	r3, [r5, #16]
 8017f96:	db15      	blt.n	8017fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017f98:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017f9c:	3201      	adds	r2, #1
 8017f9e:	1a5b      	subs	r3, r3, r1
 8017fa0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017fa4:	602a      	str	r2, [r5, #0]
 8017fa6:	612b      	str	r3, [r5, #16]
 8017fa8:	edc5 6a07 	vstr	s13, [r5, #28]
 8017fac:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017fb0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017fb4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017fb8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017fc0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017fc4:	3f01      	subs	r7, #1
 8017fc6:	e757      	b.n	8017e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017fc8:	4299      	cmp	r1, r3
 8017fca:	dc13      	bgt.n	8017ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	da14      	bge.n	8017ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017fd0:	2502      	movs	r5, #2
 8017fd2:	2703      	movs	r7, #3
 8017fd4:	f04f 0800 	mov.w	r8, #0
 8017fd8:	46a9      	mov	r9, r5
 8017fda:	f04f 0a01 	mov.w	sl, #1
 8017fde:	e6ef      	b.n	8017dc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017fe0:	2501      	movs	r5, #1
 8017fe2:	2700      	movs	r7, #0
 8017fe4:	46a9      	mov	r9, r5
 8017fe6:	46b8      	mov	r8, r7
 8017fe8:	f04f 0a02 	mov.w	sl, #2
 8017fec:	e6e8      	b.n	8017dc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017fee:	2501      	movs	r5, #1
 8017ff0:	2702      	movs	r7, #2
 8017ff2:	e6e1      	b.n	8017db8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017ff4:	2500      	movs	r5, #0
 8017ff6:	2701      	movs	r7, #1
 8017ff8:	e7f4      	b.n	8017fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017ffa:	2702      	movs	r7, #2
 8017ffc:	2503      	movs	r5, #3
 8017ffe:	f04f 0900 	mov.w	r9, #0
 8018002:	46b8      	mov	r8, r7
 8018004:	e7e9      	b.n	8017fda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018006:	4613      	mov	r3, r2
 8018008:	e728      	b.n	8017e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801800a:	bf00      	nop
 801800c:	20015030 	.word	0x20015030
 8018010:	fffd8f01 	.word	0xfffd8f01
 8018014:	00027100 	.word	0x00027100
 8018018:	0004e1ff 	.word	0x0004e1ff
 801801c:	0004e1fe 	.word	0x0004e1fe
 8018020:	20015038 	.word	0x20015038
 8018024:	4613      	mov	r3, r2
 8018026:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018028:	469e      	mov	lr, r3
 801802a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801802c:	469c      	mov	ip, r3
 801802e:	9111      	str	r1, [sp, #68]	; 0x44
 8018030:	f04f 0900 	mov.w	r9, #0
 8018034:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018038:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801803c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018040:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018044:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018048:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801804c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018050:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018054:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018058:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801805c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018060:	f1bc 0f00 	cmp.w	ip, #0
 8018064:	d147      	bne.n	80180f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018066:	eb03 0c07 	add.w	ip, r3, r7
 801806a:	1ad7      	subs	r7, r2, r3
 801806c:	f1b9 0f00 	cmp.w	r9, #0
 8018070:	d009      	beq.n	8018086 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018072:	9029      	str	r0, [sp, #164]	; 0xa4
 8018074:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018078:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801807c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018080:	912d      	str	r1, [sp, #180]	; 0xb4
 8018082:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018086:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018088:	f04f 0800 	mov.w	r8, #0
 801808c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018090:	9111      	str	r1, [sp, #68]	; 0x44
 8018092:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018096:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801809a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801809e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80180a2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80180a6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80180aa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80180ae:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80180b2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80180b6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80180ba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80180be:	f1be 0f00 	cmp.w	lr, #0
 80180c2:	d031      	beq.n	8018128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80180c4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80180c6:	4450      	add	r0, sl
 80180c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80180cc:	4431      	add	r1, r6
 80180ce:	ee37 7a04 	vadd.f32	s14, s14, s8
 80180d2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80180d6:	4549      	cmp	r1, r9
 80180d8:	db08      	blt.n	80180ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80180da:	ee77 7a85 	vadd.f32	s15, s15, s10
 80180de:	3001      	adds	r0, #1
 80180e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80180e4:	eba1 0109 	sub.w	r1, r1, r9
 80180e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80180ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80180f0:	f04f 0801 	mov.w	r8, #1
 80180f4:	e7e3      	b.n	80180be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80180f6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80180f8:	4450      	add	r0, sl
 80180fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80180fe:	4431      	add	r1, r6
 8018100:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018104:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018108:	4541      	cmp	r1, r8
 801810a:	db08      	blt.n	801811e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801810c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018110:	3001      	adds	r0, #1
 8018112:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018116:	eba1 0108 	sub.w	r1, r1, r8
 801811a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801811e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018122:	f04f 0901 	mov.w	r9, #1
 8018126:	e79b      	b.n	8018060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018128:	449c      	add	ip, r3
 801812a:	1aff      	subs	r7, r7, r3
 801812c:	f1b8 0f00 	cmp.w	r8, #0
 8018130:	d009      	beq.n	8018146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018132:	9019      	str	r0, [sp, #100]	; 0x64
 8018134:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018138:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801813c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018140:	911d      	str	r1, [sp, #116]	; 0x74
 8018142:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018146:	1ad2      	subs	r2, r2, r3
 8018148:	e68b      	b.n	8017e62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801814a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801814c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801814e:	2b00      	cmp	r3, #0
 8018150:	f000 80d1 	beq.w	80182f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018154:	ad19      	add	r5, sp, #100	; 0x64
 8018156:	ac39      	add	r4, sp, #228	; 0xe4
 8018158:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801815a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801815e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018162:	930c      	str	r3, [sp, #48]	; 0x30
 8018164:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018166:	6963      	ldr	r3, [r4, #20]
 8018168:	440b      	add	r3, r1
 801816a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801816e:	4408      	add	r0, r1
 8018170:	b200      	sxth	r0, r0
 8018172:	4283      	cmp	r3, r0
 8018174:	900d      	str	r0, [sp, #52]	; 0x34
 8018176:	f280 80c1 	bge.w	80182fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801817a:	428b      	cmp	r3, r1
 801817c:	da08      	bge.n	8018190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801817e:	2a00      	cmp	r2, #0
 8018180:	dd06      	ble.n	8018190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018182:	1acb      	subs	r3, r1, r3
 8018184:	429a      	cmp	r2, r3
 8018186:	f2c0 80bb 	blt.w	8018300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801818a:	2b00      	cmp	r3, #0
 801818c:	f300 80b9 	bgt.w	8018302 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018190:	6967      	ldr	r7, [r4, #20]
 8018192:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018198:	443b      	add	r3, r7
 801819a:	461f      	mov	r7, r3
 801819c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801819e:	1bdf      	subs	r7, r3, r7
 80181a0:	4297      	cmp	r7, r2
 80181a2:	bfa8      	it	ge
 80181a4:	4617      	movge	r7, r2
 80181a6:	2f00      	cmp	r7, #0
 80181a8:	f340 813c 	ble.w	8018424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80181ac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80181ae:	6829      	ldr	r1, [r5, #0]
 80181b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80181b4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80181b8:	4411      	add	r1, r2
 80181ba:	6820      	ldr	r0, [r4, #0]
 80181bc:	4299      	cmp	r1, r3
 80181be:	dd1a      	ble.n	80181f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80181c0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80181c4:	4402      	add	r2, r0
 80181c6:	440b      	add	r3, r1
 80181c8:	b21b      	sxth	r3, r3
 80181ca:	429a      	cmp	r2, r3
 80181cc:	dc13      	bgt.n	80181f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80181ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181d0:	a912      	add	r1, sp, #72	; 0x48
 80181d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	9206      	str	r2, [sp, #24]
 80181da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80181dc:	9500      	str	r5, [sp, #0]
 80181de:	9205      	str	r2, [sp, #20]
 80181e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181e2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80181e6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80181e8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80181ec:	aa49      	add	r2, sp, #292	; 0x124
 80181ee:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80181f2:	4623      	mov	r3, r4
 80181f4:	47c8      	blx	r9
 80181f6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80181fa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80181fe:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018206:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801820a:	68a1      	ldr	r1, [r4, #8]
 801820c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018210:	ed94 6a08 	vldr	s12, [r4, #32]
 8018214:	edd4 6a07 	vldr	s13, [r4, #28]
 8018218:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801821c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018220:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018224:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018228:	edc4 6a07 	vstr	s13, [r4, #28]
 801822c:	441a      	add	r2, r3
 801822e:	6963      	ldr	r3, [r4, #20]
 8018230:	3301      	adds	r3, #1
 8018232:	6022      	str	r2, [r4, #0]
 8018234:	6163      	str	r3, [r4, #20]
 8018236:	69a3      	ldr	r3, [r4, #24]
 8018238:	3b01      	subs	r3, #1
 801823a:	61a3      	str	r3, [r4, #24]
 801823c:	6923      	ldr	r3, [r4, #16]
 801823e:	440b      	add	r3, r1
 8018240:	68e1      	ldr	r1, [r4, #12]
 8018242:	428b      	cmp	r3, r1
 8018244:	6123      	str	r3, [r4, #16]
 8018246:	db15      	blt.n	8018274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018248:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801824c:	3201      	adds	r2, #1
 801824e:	1a5b      	subs	r3, r3, r1
 8018250:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018254:	6022      	str	r2, [r4, #0]
 8018256:	6123      	str	r3, [r4, #16]
 8018258:	edc4 6a07 	vstr	s13, [r4, #28]
 801825c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018260:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018264:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018268:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801826c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018270:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018274:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018278:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801827c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018284:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018288:	68a9      	ldr	r1, [r5, #8]
 801828a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801828e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018292:	edd5 6a07 	vldr	s13, [r5, #28]
 8018296:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801829a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801829e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80182a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80182a6:	edc5 6a07 	vstr	s13, [r5, #28]
 80182aa:	441a      	add	r2, r3
 80182ac:	696b      	ldr	r3, [r5, #20]
 80182ae:	3301      	adds	r3, #1
 80182b0:	602a      	str	r2, [r5, #0]
 80182b2:	616b      	str	r3, [r5, #20]
 80182b4:	69ab      	ldr	r3, [r5, #24]
 80182b6:	3b01      	subs	r3, #1
 80182b8:	61ab      	str	r3, [r5, #24]
 80182ba:	692b      	ldr	r3, [r5, #16]
 80182bc:	440b      	add	r3, r1
 80182be:	68e9      	ldr	r1, [r5, #12]
 80182c0:	428b      	cmp	r3, r1
 80182c2:	612b      	str	r3, [r5, #16]
 80182c4:	db15      	blt.n	80182f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80182c6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80182ca:	3201      	adds	r2, #1
 80182cc:	1a5b      	subs	r3, r3, r1
 80182ce:	ee76 6a26 	vadd.f32	s13, s12, s13
 80182d2:	602a      	str	r2, [r5, #0]
 80182d4:	612b      	str	r3, [r5, #16]
 80182d6:	edc5 6a07 	vstr	s13, [r5, #28]
 80182da:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80182de:	ee36 7a87 	vadd.f32	s14, s13, s14
 80182e2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80182e6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80182ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80182ee:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80182f2:	3f01      	subs	r7, #1
 80182f4:	e757      	b.n	80181a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80182f6:	ad39      	add	r5, sp, #228	; 0xe4
 80182f8:	ac19      	add	r4, sp, #100	; 0x64
 80182fa:	e72d      	b.n	8018158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80182fc:	4613      	mov	r3, r2
 80182fe:	e744      	b.n	801818a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018300:	4613      	mov	r3, r2
 8018302:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018304:	469e      	mov	lr, r3
 8018306:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801830a:	461f      	mov	r7, r3
 801830c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018310:	f04f 0900 	mov.w	r9, #0
 8018314:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018318:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801831c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018320:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018324:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018328:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801832a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801832e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018332:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018336:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801833a:	960e      	str	r6, [sp, #56]	; 0x38
 801833c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018340:	2f00      	cmp	r7, #0
 8018342:	d146      	bne.n	80183d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018344:	449c      	add	ip, r3
 8018346:	1ad7      	subs	r7, r2, r3
 8018348:	f1b9 0f00 	cmp.w	r9, #0
 801834c:	d009      	beq.n	8018362 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801834e:	9039      	str	r0, [sp, #228]	; 0xe4
 8018350:	913d      	str	r1, [sp, #244]	; 0xf4
 8018352:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018356:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801835a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801835e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018362:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018364:	f04f 0800 	mov.w	r8, #0
 8018368:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801836c:	910e      	str	r1, [sp, #56]	; 0x38
 801836e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018372:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018376:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801837a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801837e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018382:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018386:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801838a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801838e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018392:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018396:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801839a:	f1be 0f00 	cmp.w	lr, #0
 801839e:	d030      	beq.n	8018402 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80183a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80183a2:	4450      	add	r0, sl
 80183a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80183a8:	4431      	add	r1, r6
 80183aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80183ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80183b2:	4549      	cmp	r1, r9
 80183b4:	db08      	blt.n	80183c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80183b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80183ba:	3001      	adds	r0, #1
 80183bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80183c0:	eba1 0109 	sub.w	r1, r1, r9
 80183c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80183c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80183cc:	f04f 0801 	mov.w	r8, #1
 80183d0:	e7e3      	b.n	801839a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80183d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80183d4:	4450      	add	r0, sl
 80183d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80183da:	4431      	add	r1, r6
 80183dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80183e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80183e4:	4541      	cmp	r1, r8
 80183e6:	db08      	blt.n	80183fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80183e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80183ec:	3001      	adds	r0, #1
 80183ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80183f2:	eba1 0108 	sub.w	r1, r1, r8
 80183f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80183fa:	3f01      	subs	r7, #1
 80183fc:	f04f 0901 	mov.w	r9, #1
 8018400:	e79e      	b.n	8018340 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018402:	449c      	add	ip, r3
 8018404:	1aff      	subs	r7, r7, r3
 8018406:	f1b8 0f00 	cmp.w	r8, #0
 801840a:	d009      	beq.n	8018420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801840c:	9019      	str	r0, [sp, #100]	; 0x64
 801840e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018412:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018416:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801841a:	911d      	str	r1, [sp, #116]	; 0x74
 801841c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018420:	1ad2      	subs	r2, r2, r3
 8018422:	e6b5      	b.n	8018190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	b923      	cbnz	r3, 8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801842a:	4b04      	ldr	r3, [pc, #16]	; (801843c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801842c:	6818      	ldr	r0, [r3, #0]
 801842e:	6803      	ldr	r3, [r0, #0]
 8018430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018432:	4798      	blx	r3
 8018434:	b05b      	add	sp, #364	; 0x16c
 8018436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801843a:	bf00      	nop
 801843c:	20015038 	.word	0x20015038

08018440 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8018440:	b570      	push	{r4, r5, r6, lr}
 8018442:	4604      	mov	r4, r0
 8018444:	2500      	movs	r5, #0
 8018446:	9805      	ldr	r0, [sp, #20]
 8018448:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801844c:	6061      	str	r1, [r4, #4]
 801844e:	8263      	strh	r3, [r4, #18]
 8018450:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8018454:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018458:	8025      	strh	r5, [r4, #0]
 801845a:	7221      	strb	r1, [r4, #8]
 801845c:	7266      	strb	r6, [r4, #9]
 801845e:	60e0      	str	r0, [r4, #12]
 8018460:	8222      	strh	r2, [r4, #16]
 8018462:	82a3      	strh	r3, [r4, #20]
 8018464:	82e5      	strh	r5, [r4, #22]
 8018466:	8325      	strh	r5, [r4, #24]
 8018468:	8365      	strh	r5, [r4, #26]
 801846a:	83a5      	strh	r5, [r4, #28]
 801846c:	83e5      	strh	r5, [r4, #30]
 801846e:	8425      	strh	r5, [r4, #32]
 8018470:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8018474:	b32e      	cbz	r6, 80184c2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018476:	6803      	ldr	r3, [r0, #0]
 8018478:	695b      	ldr	r3, [r3, #20]
 801847a:	4798      	blx	r3
 801847c:	4606      	mov	r6, r0
 801847e:	b300      	cbz	r0, 80184c2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018480:	68e0      	ldr	r0, [r4, #12]
 8018482:	4631      	mov	r1, r6
 8018484:	6803      	ldr	r3, [r0, #0]
 8018486:	68db      	ldr	r3, [r3, #12]
 8018488:	4798      	blx	r3
 801848a:	4605      	mov	r5, r0
 801848c:	b1c8      	cbz	r0, 80184c2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801848e:	7b43      	ldrb	r3, [r0, #13]
 8018490:	7a82      	ldrb	r2, [r0, #10]
 8018492:	005b      	lsls	r3, r3, #1
 8018494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018498:	4313      	orrs	r3, r2
 801849a:	8423      	strh	r3, [r4, #32]
 801849c:	7a63      	ldrb	r3, [r4, #9]
 801849e:	2b06      	cmp	r3, #6
 80184a0:	d10f      	bne.n	80184c2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80184a2:	68e0      	ldr	r0, [r4, #12]
 80184a4:	462a      	mov	r2, r5
 80184a6:	4631      	mov	r1, r6
 80184a8:	6803      	ldr	r3, [r0, #0]
 80184aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184ac:	4798      	blx	r3
 80184ae:	7b6b      	ldrb	r3, [r5, #13]
 80184b0:	005b      	lsls	r3, r3, #1
 80184b2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80184b6:	7aab      	ldrb	r3, [r5, #10]
 80184b8:	4313      	orrs	r3, r2
 80184ba:	4418      	add	r0, r3
 80184bc:	8c23      	ldrh	r3, [r4, #32]
 80184be:	4418      	add	r0, r3
 80184c0:	8420      	strh	r0, [r4, #32]
 80184c2:	4620      	mov	r0, r4
 80184c4:	bd70      	pop	{r4, r5, r6, pc}

080184c6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80184c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ca:	2400      	movs	r4, #0
 80184cc:	b085      	sub	sp, #20
 80184ce:	4681      	mov	r9, r0
 80184d0:	4688      	mov	r8, r1
 80184d2:	4692      	mov	sl, r2
 80184d4:	469b      	mov	fp, r3
 80184d6:	4627      	mov	r7, r4
 80184d8:	4625      	mov	r5, r4
 80184da:	4626      	mov	r6, r4
 80184dc:	4554      	cmp	r4, sl
 80184de:	da2a      	bge.n	8018536 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80184e0:	2300      	movs	r3, #0
 80184e2:	9303      	str	r3, [sp, #12]
 80184e4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80184e8:	429d      	cmp	r5, r3
 80184ea:	d004      	beq.n	80184f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80184ec:	f242 030b 	movw	r3, #8203	; 0x200b
 80184f0:	429d      	cmp	r5, r3
 80184f2:	bf18      	it	ne
 80184f4:	462f      	movne	r7, r5
 80184f6:	ab03      	add	r3, sp, #12
 80184f8:	4642      	mov	r2, r8
 80184fa:	4659      	mov	r1, fp
 80184fc:	4648      	mov	r0, r9
 80184fe:	f002 ff43 	bl	801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018502:	4605      	mov	r5, r0
 8018504:	b1b8      	cbz	r0, 8018536 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018506:	280a      	cmp	r0, #10
 8018508:	d015      	beq.n	8018536 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801850a:	9a03      	ldr	r2, [sp, #12]
 801850c:	b18a      	cbz	r2, 8018532 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801850e:	7b50      	ldrb	r0, [r2, #13]
 8018510:	4639      	mov	r1, r7
 8018512:	7a93      	ldrb	r3, [r2, #10]
 8018514:	0040      	lsls	r0, r0, #1
 8018516:	8895      	ldrh	r5, [r2, #4]
 8018518:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801851c:	4303      	orrs	r3, r0
 801851e:	4640      	mov	r0, r8
 8018520:	9301      	str	r3, [sp, #4]
 8018522:	f8d8 3000 	ldr.w	r3, [r8]
 8018526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018528:	4798      	blx	r3
 801852a:	9b01      	ldr	r3, [sp, #4]
 801852c:	4418      	add	r0, r3
 801852e:	4406      	add	r6, r0
 8018530:	b2b6      	uxth	r6, r6
 8018532:	3401      	adds	r4, #1
 8018534:	e7d2      	b.n	80184dc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018536:	4630      	mov	r0, r6
 8018538:	b005      	add	sp, #20
 801853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801853e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801853e:	2a02      	cmp	r2, #2
 8018540:	b530      	push	{r4, r5, lr}
 8018542:	d011      	beq.n	8018568 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018544:	2a03      	cmp	r2, #3
 8018546:	d01c      	beq.n	8018582 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018548:	2a01      	cmp	r2, #1
 801854a:	d10c      	bne.n	8018566 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801854c:	888b      	ldrh	r3, [r1, #4]
 801854e:	8801      	ldrh	r1, [r0, #0]
 8018550:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018554:	1a5b      	subs	r3, r3, r1
 8018556:	8844      	ldrh	r4, [r0, #2]
 8018558:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801855c:	1a9b      	subs	r3, r3, r2
 801855e:	8004      	strh	r4, [r0, #0]
 8018560:	8081      	strh	r1, [r0, #4]
 8018562:	8043      	strh	r3, [r0, #2]
 8018564:	80c2      	strh	r2, [r0, #6]
 8018566:	bd30      	pop	{r4, r5, pc}
 8018568:	88cb      	ldrh	r3, [r1, #6]
 801856a:	8842      	ldrh	r2, [r0, #2]
 801856c:	1a9b      	subs	r3, r3, r2
 801856e:	88c2      	ldrh	r2, [r0, #6]
 8018570:	1a9b      	subs	r3, r3, r2
 8018572:	888a      	ldrh	r2, [r1, #4]
 8018574:	8801      	ldrh	r1, [r0, #0]
 8018576:	8043      	strh	r3, [r0, #2]
 8018578:	1a52      	subs	r2, r2, r1
 801857a:	8881      	ldrh	r1, [r0, #4]
 801857c:	1a52      	subs	r2, r2, r1
 801857e:	8002      	strh	r2, [r0, #0]
 8018580:	e7f1      	b.n	8018566 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018582:	88cb      	ldrh	r3, [r1, #6]
 8018584:	8841      	ldrh	r1, [r0, #2]
 8018586:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801858a:	1a5b      	subs	r3, r3, r1
 801858c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018590:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018594:	1a9b      	subs	r3, r3, r2
 8018596:	8045      	strh	r5, [r0, #2]
 8018598:	8082      	strh	r2, [r0, #4]
 801859a:	8003      	strh	r3, [r0, #0]
 801859c:	80c4      	strh	r4, [r0, #6]
 801859e:	e7e2      	b.n	8018566 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080185a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80185a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a4:	b09f      	sub	sp, #124	; 0x7c
 80185a6:	9116      	str	r1, [sp, #88]	; 0x58
 80185a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80185aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80185ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80185ae:	8809      	ldrh	r1, [r1, #0]
 80185b0:	889b      	ldrh	r3, [r3, #4]
 80185b2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80185b6:	440b      	add	r3, r1
 80185b8:	9212      	str	r2, [sp, #72]	; 0x48
 80185ba:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80185be:	b21b      	sxth	r3, r3
 80185c0:	9011      	str	r0, [sp, #68]	; 0x44
 80185c2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80185c6:	9310      	str	r3, [sp, #64]	; 0x40
 80185c8:	f8d8 3000 	ldr.w	r3, [r8]
 80185cc:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 80185d0:	7b19      	ldrb	r1, [r3, #12]
 80185d2:	7adb      	ldrb	r3, [r3, #11]
 80185d4:	9114      	str	r1, [sp, #80]	; 0x50
 80185d6:	9315      	str	r3, [sp, #84]	; 0x54
 80185d8:	2a00      	cmp	r2, #0
 80185da:	d06a      	beq.n	80186b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80185dc:	f898 3010 	ldrb.w	r3, [r8, #16]
 80185e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80185e2:	2b06      	cmp	r3, #6
 80185e4:	bf14      	ite	ne
 80185e6:	2301      	movne	r3, #1
 80185e8:	2302      	moveq	r3, #2
 80185ea:	4413      	add	r3, r2
 80185ec:	f04f 0900 	mov.w	r9, #0
 80185f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80185f2:	464c      	mov	r4, r9
 80185f4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80185f8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80185fc:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8018600:	4293      	cmp	r3, r2
 8018602:	f280 808f 	bge.w	8018724 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8018606:	2300      	movs	r3, #0
 8018608:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801860c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8018610:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018614:	429c      	cmp	r4, r3
 8018616:	d006      	beq.n	8018626 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8018618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801861a:	f242 020b 	movw	r2, #8203	; 0x200b
 801861e:	4294      	cmp	r4, r2
 8018620:	bf18      	it	ne
 8018622:	4623      	movne	r3, r4
 8018624:	930d      	str	r3, [sp, #52]	; 0x34
 8018626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018628:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801862a:	f8d8 2000 	ldr.w	r2, [r8]
 801862e:	428b      	cmp	r3, r1
 8018630:	db41      	blt.n	80186b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8018632:	6813      	ldr	r3, [r2, #0]
 8018634:	4610      	mov	r0, r2
 8018636:	695b      	ldr	r3, [r3, #20]
 8018638:	4798      	blx	r3
 801863a:	4604      	mov	r4, r0
 801863c:	f8d8 0000 	ldr.w	r0, [r8]
 8018640:	aa1d      	add	r2, sp, #116	; 0x74
 8018642:	4621      	mov	r1, r4
 8018644:	6803      	ldr	r3, [r0, #0]
 8018646:	689d      	ldr	r5, [r3, #8]
 8018648:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801864c:	47a8      	blx	r5
 801864e:	901c      	str	r0, [sp, #112]	; 0x70
 8018650:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018654:	429c      	cmp	r4, r3
 8018656:	f000 80ec 	beq.w	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801865a:	f242 030b 	movw	r3, #8203	; 0x200b
 801865e:	429c      	cmp	r4, r3
 8018660:	f000 80e7 	beq.w	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018664:	2c00      	cmp	r4, #0
 8018666:	f000 80f9 	beq.w	801885c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801866a:	2c0a      	cmp	r4, #10
 801866c:	d060      	beq.n	8018730 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801866e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018670:	b36a      	cbz	r2, 80186ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8018672:	8894      	ldrh	r4, [r2, #4]
 8018674:	f1bb 0f00 	cmp.w	fp, #0
 8018678:	d03b      	beq.n	80186f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801867a:	f892 900d 	ldrb.w	r9, [r2, #13]
 801867e:	f1bb 0f01 	cmp.w	fp, #1
 8018682:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018686:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801868a:	f892 900a 	ldrb.w	r9, [r2, #10]
 801868e:	ea49 0903 	orr.w	r9, r9, r3
 8018692:	d134      	bne.n	80186fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8018694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018696:	eba6 0609 	sub.w	r6, r6, r9
 801869a:	2b00      	cmp	r3, #0
 801869c:	d14f      	bne.n	801873e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801869e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186a0:	eb09 0306 	add.w	r3, r9, r6
 80186a4:	4413      	add	r3, r2
 80186a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80186a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80186ac:	4293      	cmp	r3, r2
 80186ae:	da51      	bge.n	8018754 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80186b0:	e038      	b.n	8018724 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80186b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80186b4:	e79a      	b.n	80185ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80186b6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80186ba:	4659      	mov	r1, fp
 80186bc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80186be:	9301      	str	r3, [sp, #4]
 80186c0:	ab1d      	add	r3, sp, #116	; 0x74
 80186c2:	9300      	str	r3, [sp, #0]
 80186c4:	ab1c      	add	r3, sp, #112	; 0x70
 80186c6:	f002 fea8 	bl	801b41a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80186ca:	4604      	mov	r4, r0
 80186cc:	e7c0      	b.n	8018650 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80186ce:	f8d8 0000 	ldr.w	r0, [r8]
 80186d2:	6803      	ldr	r3, [r0, #0]
 80186d4:	691b      	ldr	r3, [r3, #16]
 80186d6:	4798      	blx	r3
 80186d8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80186dc:	4298      	cmp	r0, r3
 80186de:	f000 80a8 	beq.w	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80186e2:	f242 030b 	movw	r3, #8203	; 0x200b
 80186e6:	4298      	cmp	r0, r3
 80186e8:	f000 80a3 	beq.w	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80186ec:	f1bb 0f00 	cmp.w	fp, #0
 80186f0:	d100      	bne.n	80186f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80186f2:	444e      	add	r6, r9
 80186f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80186f6:	2a00      	cmp	r2, #0
 80186f8:	d1bf      	bne.n	801867a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80186fa:	4691      	mov	r9, r2
 80186fc:	e099      	b.n	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80186fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018700:	2b00      	cmp	r3, #0
 8018702:	f000 80ad 	beq.w	8018860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8018706:	f1bb 0f00 	cmp.w	fp, #0
 801870a:	d118      	bne.n	801873e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801870c:	f8d8 0000 	ldr.w	r0, [r8]
 8018710:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018712:	6803      	ldr	r3, [r0, #0]
 8018714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018716:	4798      	blx	r3
 8018718:	4406      	add	r6, r0
 801871a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801871c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801871e:	1af3      	subs	r3, r6, r3
 8018720:	4293      	cmp	r3, r2
 8018722:	dd17      	ble.n	8018754 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8018724:	2c00      	cmp	r4, #0
 8018726:	f000 8099 	beq.w	801885c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801872a:	2c0a      	cmp	r4, #10
 801872c:	f040 8087 	bne.w	801883e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8018730:	240a      	movs	r4, #10
 8018732:	fab4 f084 	clz	r0, r4
 8018736:	0940      	lsrs	r0, r0, #5
 8018738:	b01f      	add	sp, #124	; 0x7c
 801873a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801873e:	f8d8 0000 	ldr.w	r0, [r8]
 8018742:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018744:	6803      	ldr	r3, [r0, #0]
 8018746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018748:	4798      	blx	r3
 801874a:	f1bb 0f01 	cmp.w	fp, #1
 801874e:	eba6 0600 	sub.w	r6, r6, r0
 8018752:	d0a4      	beq.n	801869e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8018754:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018756:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018758:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801875c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8018760:	7b43      	ldrb	r3, [r0, #13]
 8018762:	4431      	add	r1, r6
 8018764:	015b      	lsls	r3, r3, #5
 8018766:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801876a:	7983      	ldrb	r3, [r0, #6]
 801876c:	4313      	orrs	r3, r2
 801876e:	440b      	add	r3, r1
 8018770:	42bb      	cmp	r3, r7
 8018772:	db5e      	blt.n	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018776:	4299      	cmp	r1, r3
 8018778:	da5b      	bge.n	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801877a:	f8d8 0000 	ldr.w	r0, [r8]
 801877e:	42b7      	cmp	r7, r6
 8018780:	6803      	ldr	r3, [r0, #0]
 8018782:	bfcc      	ite	gt
 8018784:	1bbf      	subgt	r7, r7, r6
 8018786:	2700      	movle	r7, #0
 8018788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801878a:	bfc8      	it	gt
 801878c:	b2bf      	uxthgt	r7, r7
 801878e:	4798      	blx	r3
 8018790:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018792:	7b5a      	ldrb	r2, [r3, #13]
 8018794:	00d1      	lsls	r1, r2, #3
 8018796:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801879a:	7a19      	ldrb	r1, [r3, #8]
 801879c:	4329      	orrs	r1, r5
 801879e:	0655      	lsls	r5, r2, #25
 80187a0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80187a2:	bf48      	it	mi
 80187a4:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80187a8:	4405      	add	r5, r0
 80187aa:	bf48      	it	mi
 80187ac:	b209      	sxthmi	r1, r1
 80187ae:	1a6d      	subs	r5, r5, r1
 80187b0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80187b2:	b2ad      	uxth	r5, r5
 80187b4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80187b8:	fa0f fa85 	sxth.w	sl, r5
 80187bc:	4551      	cmp	r1, sl
 80187be:	dd3c      	ble.n	801883a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80187c0:	0112      	lsls	r2, r2, #4
 80187c2:	79d8      	ldrb	r0, [r3, #7]
 80187c4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80187c8:	4302      	orrs	r2, r0
 80187ca:	4492      	add	sl, r2
 80187cc:	4551      	cmp	r1, sl
 80187ce:	dc30      	bgt.n	8018832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80187d0:	1b4d      	subs	r5, r1, r5
 80187d2:	468a      	mov	sl, r1
 80187d4:	b22d      	sxth	r5, r5
 80187d6:	9319      	str	r3, [sp, #100]	; 0x64
 80187d8:	b2ad      	uxth	r5, r5
 80187da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80187dc:	f8d8 0000 	ldr.w	r0, [r8]
 80187e0:	681a      	ldr	r2, [r3, #0]
 80187e2:	6801      	ldr	r1, [r0, #0]
 80187e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80187e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80187e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80187ea:	9218      	str	r2, [sp, #96]	; 0x60
 80187ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80187ee:	4788      	blx	r1
 80187f0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80187f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80187f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80187f8:	f898 100e 	ldrb.w	r1, [r8, #14]
 80187fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80187fe:	910a      	str	r1, [sp, #40]	; 0x28
 8018800:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018804:	9109      	str	r1, [sp, #36]	; 0x24
 8018806:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801880a:	9305      	str	r3, [sp, #20]
 801880c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801880e:	9206      	str	r2, [sp, #24]
 8018810:	9304      	str	r3, [sp, #16]
 8018812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018814:	f8cd a004 	str.w	sl, [sp, #4]
 8018818:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801881c:	4437      	add	r7, r6
 801881e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018820:	b23f      	sxth	r7, r7
 8018822:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018826:	9700      	str	r7, [sp, #0]
 8018828:	9916      	ldr	r1, [sp, #88]	; 0x58
 801882a:	681a      	ldr	r2, [r3, #0]
 801882c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801882e:	685b      	ldr	r3, [r3, #4]
 8018830:	47a8      	blx	r5
 8018832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018834:	3301      	adds	r3, #1
 8018836:	930e      	str	r3, [sp, #56]	; 0x38
 8018838:	e6e0      	b.n	80185fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801883a:	2500      	movs	r5, #0
 801883c:	e7cb      	b.n	80187d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801883e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018840:	3501      	adds	r5, #1
 8018842:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018844:	429d      	cmp	r5, r3
 8018846:	f6bf af74 	bge.w	8018732 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801884a:	4659      	mov	r1, fp
 801884c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801884e:	f7eb f939 	bl	8003ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018852:	4604      	mov	r4, r0
 8018854:	b110      	cbz	r0, 801885c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8018856:	280a      	cmp	r0, #10
 8018858:	d1f2      	bne.n	8018840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801885a:	e769      	b.n	8018730 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801885c:	2400      	movs	r4, #0
 801885e:	e768      	b.n	8018732 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8018860:	f1bb 0f00 	cmp.w	fp, #0
 8018864:	f43f af59 	beq.w	801871a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8018868:	e774      	b.n	8018754 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801886a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801886a:	b530      	push	{r4, r5, lr}
 801886c:	8ac4      	ldrh	r4, [r0, #22]
 801886e:	8b45      	ldrh	r5, [r0, #26]
 8018870:	8343      	strh	r3, [r0, #26]
 8018872:	442c      	add	r4, r5
 8018874:	1ae4      	subs	r4, r4, r3
 8018876:	8b83      	ldrh	r3, [r0, #28]
 8018878:	82c4      	strh	r4, [r0, #22]
 801887a:	8b04      	ldrh	r4, [r0, #24]
 801887c:	4422      	add	r2, r4
 801887e:	440c      	add	r4, r1
 8018880:	1a59      	subs	r1, r3, r1
 8018882:	83c2      	strh	r2, [r0, #30]
 8018884:	8304      	strh	r4, [r0, #24]
 8018886:	8381      	strh	r1, [r0, #28]
 8018888:	bd30      	pop	{r4, r5, pc}

0801888a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801888a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888e:	4604      	mov	r4, r0
 8018890:	8a47      	ldrh	r7, [r0, #18]
 8018892:	68c0      	ldr	r0, [r0, #12]
 8018894:	b085      	sub	sp, #20
 8018896:	6803      	ldr	r3, [r0, #0]
 8018898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801889a:	4798      	blx	r3
 801889c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80188a0:	7a63      	ldrb	r3, [r4, #9]
 80188a2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80188a6:	3b01      	subs	r3, #1
 80188a8:	42b7      	cmp	r7, r6
 80188aa:	bfac      	ite	ge
 80188ac:	f04f 0900 	movge.w	r9, #0
 80188b0:	f04f 0901 	movlt.w	r9, #1
 80188b4:	2b05      	cmp	r3, #5
 80188b6:	d804      	bhi.n	80188c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80188b8:	e8df f003 	tbb	[pc, r3]
 80188bc:	470f0854 	.word	0x470f0854
 80188c0:	4c4c      	.short	0x4c4c
 80188c2:	2500      	movs	r5, #0
 80188c4:	46a9      	mov	r9, r5
 80188c6:	462e      	mov	r6, r5
 80188c8:	462f      	mov	r7, r5
 80188ca:	e00e      	b.n	80188ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80188cc:	42b7      	cmp	r7, r6
 80188ce:	f04f 0500 	mov.w	r5, #0
 80188d2:	bfb4      	ite	lt
 80188d4:	2600      	movlt	r6, #0
 80188d6:	2601      	movge	r6, #1
 80188d8:	e7f6      	b.n	80188c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80188da:	42b7      	cmp	r7, r6
 80188dc:	464d      	mov	r5, r9
 80188de:	f04f 0900 	mov.w	r9, #0
 80188e2:	bfb4      	ite	lt
 80188e4:	2600      	movlt	r6, #0
 80188e6:	2601      	movge	r6, #1
 80188e8:	464f      	mov	r7, r9
 80188ea:	f04f 0800 	mov.w	r8, #0
 80188ee:	f8a4 8016 	strh.w	r8, [r4, #22]
 80188f2:	f8a4 8018 	strh.w	r8, [r4, #24]
 80188f6:	f8cd 8004 	str.w	r8, [sp, #4]
 80188fa:	2300      	movs	r3, #0
 80188fc:	9303      	str	r3, [sp, #12]
 80188fe:	8823      	ldrh	r3, [r4, #0]
 8018900:	2b20      	cmp	r3, #32
 8018902:	d033      	beq.n	801896c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8018904:	f242 010b 	movw	r1, #8203	; 0x200b
 8018908:	1a5a      	subs	r2, r3, r1
 801890a:	f1d2 0a00 	rsbs	sl, r2, #0
 801890e:	eb4a 0a02 	adc.w	sl, sl, r2
 8018912:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018916:	4293      	cmp	r3, r2
 8018918:	d008      	beq.n	801892c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801891a:	428b      	cmp	r3, r1
 801891c:	9a01      	ldr	r2, [sp, #4]
 801891e:	bf0e      	itee	eq
 8018920:	f04f 0a01 	moveq.w	sl, #1
 8018924:	461a      	movne	r2, r3
 8018926:	f04f 0a00 	movne.w	sl, #0
 801892a:	9201      	str	r2, [sp, #4]
 801892c:	ab03      	add	r3, sp, #12
 801892e:	68e2      	ldr	r2, [r4, #12]
 8018930:	7a21      	ldrb	r1, [r4, #8]
 8018932:	6860      	ldr	r0, [r4, #4]
 8018934:	f002 fd28 	bl	801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018938:	8020      	strh	r0, [r4, #0]
 801893a:	b9d8      	cbnz	r0, 8018974 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801893c:	8ba2      	ldrh	r2, [r4, #28]
 801893e:	2300      	movs	r3, #0
 8018940:	4611      	mov	r1, r2
 8018942:	4620      	mov	r0, r4
 8018944:	f7ff ff91 	bl	801886a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018948:	e06e      	b.n	8018a28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801894a:	2500      	movs	r5, #0
 801894c:	2701      	movs	r7, #1
 801894e:	46a9      	mov	r9, r5
 8018950:	462e      	mov	r6, r5
 8018952:	e7ca      	b.n	80188ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018954:	42b7      	cmp	r7, r6
 8018956:	f04f 0500 	mov.w	r5, #0
 801895a:	bfb4      	ite	lt
 801895c:	2700      	movlt	r7, #0
 801895e:	2701      	movge	r7, #1
 8018960:	462e      	mov	r6, r5
 8018962:	e7c2      	b.n	80188ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018964:	2500      	movs	r5, #0
 8018966:	2601      	movs	r6, #1
 8018968:	46a9      	mov	r9, r5
 801896a:	e7ad      	b.n	80188c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801896c:	9301      	str	r3, [sp, #4]
 801896e:	f04f 0a01 	mov.w	sl, #1
 8018972:	e7db      	b.n	801892c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8018974:	8b63      	ldrh	r3, [r4, #26]
 8018976:	280a      	cmp	r0, #10
 8018978:	f103 0301 	add.w	r3, r3, #1
 801897c:	8363      	strh	r3, [r4, #26]
 801897e:	d0dd      	beq.n	801893c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8018980:	9a03      	ldr	r2, [sp, #12]
 8018982:	bb62      	cbnz	r2, 80189de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8018984:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018988:	4298      	cmp	r0, r3
 801898a:	d003      	beq.n	8018994 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801898c:	f242 030b 	movw	r3, #8203	; 0x200b
 8018990:	4298      	cmp	r0, r3
 8018992:	d1b2      	bne.n	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018994:	8823      	ldrh	r3, [r4, #0]
 8018996:	8ba1      	ldrh	r1, [r4, #28]
 8018998:	2b20      	cmp	r3, #32
 801899a:	d003      	beq.n	80189a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801899c:	f242 000b 	movw	r0, #8203	; 0x200b
 80189a0:	4283      	cmp	r3, r0
 80189a2:	d131      	bne.n	8018a08 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80189a4:	f1ba 0f00 	cmp.w	sl, #0
 80189a8:	bf0a      	itet	eq
 80189aa:	4688      	moveq	r8, r1
 80189ac:	4650      	movne	r0, sl
 80189ae:	2001      	moveq	r0, #1
 80189b0:	440a      	add	r2, r1
 80189b2:	8b23      	ldrh	r3, [r4, #24]
 80189b4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80189b8:	b292      	uxth	r2, r2
 80189ba:	83a2      	strh	r2, [r4, #28]
 80189bc:	4413      	add	r3, r2
 80189be:	f1b9 0f00 	cmp.w	r9, #0
 80189c2:	d102      	bne.n	80189ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80189c4:	2d00      	cmp	r5, #0
 80189c6:	d042      	beq.n	8018a4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80189c8:	b300      	cbz	r0, 8018a0c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80189ca:	8c21      	ldrh	r1, [r4, #32]
 80189cc:	4419      	add	r1, r3
 80189ce:	458c      	cmp	ip, r1
 80189d0:	da37      	bge.n	8018a42 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80189d2:	8ae1      	ldrh	r1, [r4, #22]
 80189d4:	2900      	cmp	r1, #0
 80189d6:	d034      	beq.n	8018a42 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80189d8:	4563      	cmp	r3, ip
 80189da:	dd8e      	ble.n	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80189dc:	e01d      	b.n	8018a1a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 80189de:	8893      	ldrh	r3, [r2, #4]
 80189e0:	9901      	ldr	r1, [sp, #4]
 80189e2:	8023      	strh	r3, [r4, #0]
 80189e4:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80189e8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80189ec:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 80189f0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80189f4:	ea4b 0b00 	orr.w	fp, fp, r0
 80189f8:	68e0      	ldr	r0, [r4, #12]
 80189fa:	6803      	ldr	r3, [r0, #0]
 80189fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189fe:	4798      	blx	r3
 8018a00:	eb0b 0200 	add.w	r2, fp, r0
 8018a04:	b292      	uxth	r2, r2
 8018a06:	e7c5      	b.n	8018994 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8018a08:	2000      	movs	r0, #0
 8018a0a:	e7d1      	b.n	80189b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8018a0c:	4563      	cmp	r3, ip
 8018a0e:	f77f af74 	ble.w	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a12:	8ae3      	ldrh	r3, [r4, #22]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	f43f af70 	beq.w	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	8c22      	ldrh	r2, [r4, #32]
 8018a1e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8018a22:	8be3      	ldrh	r3, [r4, #30]
 8018a24:	4413      	add	r3, r2
 8018a26:	83e3      	strh	r3, [r4, #30]
 8018a28:	68e0      	ldr	r0, [r4, #12]
 8018a2a:	6803      	ldr	r3, [r0, #0]
 8018a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a2e:	4798      	blx	r3
 8018a30:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8018a34:	4418      	add	r0, r3
 8018a36:	8a63      	ldrh	r3, [r4, #18]
 8018a38:	1a18      	subs	r0, r3, r0
 8018a3a:	8260      	strh	r0, [r4, #18]
 8018a3c:	b005      	add	sp, #20
 8018a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a42:	2300      	movs	r3, #0
 8018a44:	4611      	mov	r1, r2
 8018a46:	4620      	mov	r0, r4
 8018a48:	f7ff ff0f 	bl	801886a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018a4c:	e755      	b.n	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a4e:	4563      	cmp	r3, ip
 8018a50:	dd14      	ble.n	8018a7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8018a52:	b117      	cbz	r7, 8018a5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8018a54:	2301      	movs	r3, #1
 8018a56:	460a      	mov	r2, r1
 8018a58:	e772      	b.n	8018940 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8018a5a:	2e00      	cmp	r6, #0
 8018a5c:	f43f af4d 	beq.w	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a60:	2800      	cmp	r0, #0
 8018a62:	f47f af4a 	bne.w	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a66:	f1ba 0f00 	cmp.w	sl, #0
 8018a6a:	d002      	beq.n	8018a72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	4642      	mov	r2, r8
 8018a70:	e767      	b.n	8018942 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8018a72:	8ae3      	ldrh	r3, [r4, #22]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	f43f af40 	beq.w	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a7a:	e7d5      	b.n	8018a28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8018a7c:	2800      	cmp	r0, #0
 8018a7e:	f47f af3c 	bne.w	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a82:	f1ba 0f00 	cmp.w	sl, #0
 8018a86:	f43f af38 	beq.w	80188fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	4642      	mov	r2, r8
 8018a8e:	e7da      	b.n	8018a46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08018a90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a94:	b0e3      	sub	sp, #396	; 0x18c
 8018a96:	461c      	mov	r4, r3
 8018a98:	4683      	mov	fp, r0
 8018a9a:	4688      	mov	r8, r1
 8018a9c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	f000 8112 	beq.w	8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018aa4:	6823      	ldr	r3, [r4, #0]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	f000 810e 	beq.w	8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018aac:	7ba3      	ldrb	r3, [r4, #14]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	f000 810a 	beq.w	8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018ab4:	ad0a      	add	r5, sp, #40	; 0x28
 8018ab6:	6810      	ldr	r0, [r2, #0]
 8018ab8:	6851      	ldr	r1, [r2, #4]
 8018aba:	462b      	mov	r3, r5
 8018abc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8018ac0:	c303      	stmia	r3!, {r0, r1}
 8018ac2:	2100      	movs	r1, #0
 8018ac4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018ac8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018acc:	4628      	mov	r0, r5
 8018ace:	910c      	str	r1, [sp, #48]	; 0x30
 8018ad0:	a90c      	add	r1, sp, #48	; 0x30
 8018ad2:	79a2      	ldrb	r2, [r4, #6]
 8018ad4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018ad8:	f7ff fd31 	bl	801853e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018adc:	a90c      	add	r1, sp, #48	; 0x30
 8018ade:	79a2      	ldrb	r2, [r4, #6]
 8018ae0:	4608      	mov	r0, r1
 8018ae2:	f7ff fd2c 	bl	801853e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018ae6:	a817      	add	r0, sp, #92	; 0x5c
 8018ae8:	f002 f906 	bl	801acf8 <_ZN8touchgfx12TextProviderC1Ev>
 8018aec:	6820      	ldr	r0, [r4, #0]
 8018aee:	6803      	ldr	r3, [r0, #0]
 8018af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018af2:	4798      	blx	r3
 8018af4:	4606      	mov	r6, r0
 8018af6:	6820      	ldr	r0, [r4, #0]
 8018af8:	6803      	ldr	r3, [r0, #0]
 8018afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018afc:	4798      	blx	r3
 8018afe:	4633      	mov	r3, r6
 8018b00:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8018b02:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8018b04:	9000      	str	r0, [sp, #0]
 8018b06:	a817      	add	r0, sp, #92	; 0x5c
 8018b08:	f002 f949 	bl	801ad9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018b0c:	6820      	ldr	r0, [r4, #0]
 8018b0e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8018b12:	6803      	ldr	r3, [r0, #0]
 8018b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b16:	4798      	blx	r3
 8018b18:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8018b1c:	6823      	ldr	r3, [r4, #0]
 8018b1e:	4607      	mov	r7, r0
 8018b20:	4406      	add	r6, r0
 8018b22:	a830      	add	r0, sp, #192	; 0xc0
 8018b24:	f893 9009 	ldrb.w	r9, [r3, #9]
 8018b28:	f002 f8e6 	bl	801acf8 <_ZN8touchgfx12TextProviderC1Ev>
 8018b2c:	7c23      	ldrb	r3, [r4, #16]
 8018b2e:	b17b      	cbz	r3, 8018b50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8018b30:	6820      	ldr	r0, [r4, #0]
 8018b32:	6803      	ldr	r3, [r0, #0]
 8018b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b36:	4798      	blx	r3
 8018b38:	9009      	str	r0, [sp, #36]	; 0x24
 8018b3a:	6820      	ldr	r0, [r4, #0]
 8018b3c:	6802      	ldr	r2, [r0, #0]
 8018b3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018b40:	4790      	blx	r2
 8018b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b44:	9000      	str	r0, [sp, #0]
 8018b46:	a830      	add	r0, sp, #192	; 0xc0
 8018b48:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8018b4a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8018b4c:	f002 f927 	bl	801ad9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018b50:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018b54:	a80e      	add	r0, sp, #56	; 0x38
 8018b56:	7be2      	ldrb	r2, [r4, #15]
 8018b58:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018b5c:	1a8a      	subs	r2, r1, r2
 8018b5e:	7c21      	ldrb	r1, [r4, #16]
 8018b60:	9103      	str	r1, [sp, #12]
 8018b62:	b292      	uxth	r2, r2
 8018b64:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8018b68:	9102      	str	r1, [sp, #8]
 8018b6a:	6821      	ldr	r1, [r4, #0]
 8018b6c:	9101      	str	r1, [sp, #4]
 8018b6e:	7961      	ldrb	r1, [r4, #5]
 8018b70:	9100      	str	r1, [sp, #0]
 8018b72:	a930      	add	r1, sp, #192	; 0xc0
 8018b74:	f7ff fc64 	bl	8018440 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8018b78:	2e00      	cmp	r6, #0
 8018b7a:	dc5b      	bgt.n	8018c34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8018b7c:	af17      	add	r7, sp, #92	; 0x5c
 8018b7e:	f04f 0900 	mov.w	r9, #0
 8018b82:	7c23      	ldrb	r3, [r4, #16]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	f000 80b1 	beq.w	8018cec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8018b8a:	a80e      	add	r0, sp, #56	; 0x38
 8018b8c:	f7ff fe7d 	bl	801888a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018b90:	f1ba 0f00 	cmp.w	sl, #0
 8018b94:	f000 80a5 	beq.w	8018ce2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8018b98:	7c23      	ldrb	r3, [r4, #16]
 8018b9a:	2264      	movs	r2, #100	; 0x64
 8018b9c:	4639      	mov	r1, r7
 8018b9e:	a849      	add	r0, sp, #292	; 0x124
 8018ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8018ba2:	f011 f8da 	bl	8029d5a <memcpy>
 8018ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	f000 80a7 	beq.w	8018cfc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018bae:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8018bb2:	7922      	ldrb	r2, [r4, #4]
 8018bb4:	2a01      	cmp	r2, #1
 8018bb6:	f040 808a 	bne.w	8018cce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018bba:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8018bbe:	1ac0      	subs	r0, r0, r3
 8018bc0:	2302      	movs	r3, #2
 8018bc2:	fb90 f0f3 	sdiv	r0, r0, r3
 8018bc6:	b200      	sxth	r0, r0
 8018bc8:	7c23      	ldrb	r3, [r4, #16]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	f000 808b 	beq.w	8018ce6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8018bd0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8018bd4:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8018bd8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018bdc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018be0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8018be4:	2100      	movs	r1, #0
 8018be6:	4410      	add	r0, r2
 8018be8:	4642      	mov	r2, r8
 8018bea:	b200      	sxth	r0, r0
 8018bec:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8018bf0:	9000      	str	r0, [sp, #0]
 8018bf2:	4658      	mov	r0, fp
 8018bf4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8018bf8:	f7ff fcd2 	bl	80185a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	d163      	bne.n	8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018c00:	b2b2      	uxth	r2, r6
 8018c02:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018c06:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018c0a:	4413      	add	r3, r2
 8018c0c:	1a8a      	subs	r2, r1, r2
 8018c0e:	b21b      	sxth	r3, r3
 8018c10:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8018c14:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8018c18:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018c1c:	2a00      	cmp	r2, #0
 8018c1e:	d153      	bne.n	8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018c20:	6822      	ldr	r2, [r4, #0]
 8018c22:	8869      	ldrh	r1, [r5, #2]
 8018c24:	7a12      	ldrb	r2, [r2, #8]
 8018c26:	1a9b      	subs	r3, r3, r2
 8018c28:	88ea      	ldrh	r2, [r5, #6]
 8018c2a:	440a      	add	r2, r1
 8018c2c:	b212      	sxth	r2, r2
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	dda7      	ble.n	8018b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8018c32:	e049      	b.n	8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018c34:	7c23      	ldrb	r3, [r4, #16]
 8018c36:	444f      	add	r7, r9
 8018c38:	b1c3      	cbz	r3, 8018c6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8018c3a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8018c3e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018c42:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018c46:	443b      	add	r3, r7
 8018c48:	4293      	cmp	r3, r2
 8018c4a:	da97      	bge.n	8018b7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8018c4c:	a80e      	add	r0, sp, #56	; 0x38
 8018c4e:	f7ff fe1c 	bl	801888a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018c52:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8018c56:	3b01      	subs	r3, #1
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	454b      	cmp	r3, r9
 8018c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8018c5e:	d021      	beq.n	8018ca4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8018c60:	7961      	ldrb	r1, [r4, #5]
 8018c62:	a817      	add	r0, sp, #92	; 0x5c
 8018c64:	f7ea ff2e 	bl	8003ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c6a:	e7f4      	b.n	8018c56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8018c6c:	fa1f f986 	uxth.w	r9, r6
 8018c70:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018c74:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018c78:	443b      	add	r3, r7
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	f6bf af7e 	bge.w	8018b7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8018c80:	a817      	add	r0, sp, #92	; 0x5c
 8018c82:	f002 fc4d 	bl	801b520 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c86:	b1f8      	cbz	r0, 8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018c88:	280a      	cmp	r0, #10
 8018c8a:	d1f1      	bne.n	8018c70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8018c8c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018c90:	444b      	add	r3, r9
 8018c92:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018c96:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018c9a:	eba3 0309 	sub.w	r3, r3, r9
 8018c9e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018ca2:	e7e5      	b.n	8018c70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8018ca4:	b2b3      	uxth	r3, r6
 8018ca6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018caa:	441a      	add	r2, r3
 8018cac:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8018cb0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8018cb4:	1ad3      	subs	r3, r2, r3
 8018cb6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018cba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018cbe:	b11b      	cbz	r3, 8018cc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018cc0:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d0ba      	beq.n	8018c3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8018cc8:	b063      	add	sp, #396	; 0x18c
 8018cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cce:	2a02      	cmp	r2, #2
 8018cd0:	d105      	bne.n	8018cde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8018cd2:	7be2      	ldrb	r2, [r4, #15]
 8018cd4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018cd8:	1a80      	subs	r0, r0, r2
 8018cda:	1ac0      	subs	r0, r0, r3
 8018cdc:	e773      	b.n	8018bc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8018cde:	2000      	movs	r0, #0
 8018ce0:	e772      	b.n	8018bc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018ce2:	7be0      	ldrb	r0, [r4, #15]
 8018ce4:	e770      	b.n	8018bc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018ce6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018cea:	e773      	b.n	8018bd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8018cec:	f1ba 0f00 	cmp.w	sl, #0
 8018cf0:	d0f7      	beq.n	8018ce2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8018cf2:	2264      	movs	r2, #100	; 0x64
 8018cf4:	4639      	mov	r1, r7
 8018cf6:	a849      	add	r0, sp, #292	; 0x124
 8018cf8:	f011 f82f 	bl	8029d5a <memcpy>
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018d02:	6821      	ldr	r1, [r4, #0]
 8018d04:	a849      	add	r0, sp, #292	; 0x124
 8018d06:	f7ff fbde 	bl	80184c6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018d0a:	b203      	sxth	r3, r0
 8018d0c:	e751      	b.n	8018bb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08018d0e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018d0e:	2b03      	cmp	r3, #3
 8018d10:	d818      	bhi.n	8018d44 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018d12:	e8df f003 	tbb	[pc, r3]
 8018d16:	0602      	.short	0x0602
 8018d18:	130d      	.short	0x130d
 8018d1a:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018d1e:	1850      	adds	r0, r2, r1
 8018d20:	4770      	bx	lr
 8018d22:	8803      	ldrh	r3, [r0, #0]
 8018d24:	8880      	ldrh	r0, [r0, #4]
 8018d26:	4418      	add	r0, r3
 8018d28:	b200      	sxth	r0, r0
 8018d2a:	1a80      	subs	r0, r0, r2
 8018d2c:	3801      	subs	r0, #1
 8018d2e:	4770      	bx	lr
 8018d30:	8803      	ldrh	r3, [r0, #0]
 8018d32:	8880      	ldrh	r0, [r0, #4]
 8018d34:	4418      	add	r0, r3
 8018d36:	b200      	sxth	r0, r0
 8018d38:	1a40      	subs	r0, r0, r1
 8018d3a:	e7f7      	b.n	8018d2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018d3c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018d40:	4410      	add	r0, r2
 8018d42:	4770      	bx	lr
 8018d44:	2000      	movs	r0, #0
 8018d46:	4770      	bx	lr

08018d48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018d48:	2b03      	cmp	r3, #3
 8018d4a:	d817      	bhi.n	8018d7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8018d4c:	e8df f003 	tbb	[pc, r3]
 8018d50:	10090602 	.word	0x10090602
 8018d54:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018d58:	1850      	adds	r0, r2, r1
 8018d5a:	4770      	bx	lr
 8018d5c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018d60:	e7fa      	b.n	8018d58 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8018d62:	8843      	ldrh	r3, [r0, #2]
 8018d64:	88c0      	ldrh	r0, [r0, #6]
 8018d66:	4418      	add	r0, r3
 8018d68:	b200      	sxth	r0, r0
 8018d6a:	1a80      	subs	r0, r0, r2
 8018d6c:	3801      	subs	r0, #1
 8018d6e:	4770      	bx	lr
 8018d70:	8843      	ldrh	r3, [r0, #2]
 8018d72:	88c0      	ldrh	r0, [r0, #6]
 8018d74:	4418      	add	r0, r3
 8018d76:	b200      	sxth	r0, r0
 8018d78:	1a40      	subs	r0, r0, r1
 8018d7a:	e7f7      	b.n	8018d6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	4770      	bx	lr

08018d80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018d80:	4b01      	ldr	r3, [pc, #4]	; (8018d88 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018d82:	2200      	movs	r2, #0
 8018d84:	601a      	str	r2, [r3, #0]
 8018d86:	4770      	bx	lr
 8018d88:	20015040 	.word	0x20015040

08018d8c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	b1c8      	cbz	r0, 8018dc4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018d90:	0c02      	lsrs	r2, r0, #16
 8018d92:	0412      	lsls	r2, r2, #16
 8018d94:	b9a2      	cbnz	r2, 8018dc0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8018d96:	0403      	lsls	r3, r0, #16
 8018d98:	2010      	movs	r0, #16
 8018d9a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018d9e:	bf04      	itt	eq
 8018da0:	021b      	lsleq	r3, r3, #8
 8018da2:	3008      	addeq	r0, #8
 8018da4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018da8:	bf04      	itt	eq
 8018daa:	011b      	lsleq	r3, r3, #4
 8018dac:	3004      	addeq	r0, #4
 8018dae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018db2:	bf04      	itt	eq
 8018db4:	009b      	lsleq	r3, r3, #2
 8018db6:	3002      	addeq	r0, #2
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	db04      	blt.n	8018dc6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018dbc:	3001      	adds	r0, #1
 8018dbe:	4770      	bx	lr
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	e7ea      	b.n	8018d9a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8018dc4:	2020      	movs	r0, #32
 8018dc6:	4770      	bx	lr

08018dc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dcc:	b087      	sub	sp, #28
 8018dce:	460d      	mov	r5, r1
 8018dd0:	4616      	mov	r6, r2
 8018dd2:	4698      	mov	r8, r3
 8018dd4:	4601      	mov	r1, r0
 8018dd6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8018dda:	b120      	cbz	r0, 8018de6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018ddc:	b11a      	cbz	r2, 8018de6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018dde:	2d1f      	cmp	r5, #31
 8018de0:	d801      	bhi.n	8018de6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018de2:	2b1f      	cmp	r3, #31
 8018de4:	d904      	bls.n	8018df0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8018de6:	2000      	movs	r0, #0
 8018de8:	6038      	str	r0, [r7, #0]
 8018dea:	b007      	add	sp, #28
 8018dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018df0:	b97d      	cbnz	r5, 8018e12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8018df2:	b143      	cbz	r3, 8018e06 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8018df4:	4602      	mov	r2, r0
 8018df6:	462b      	mov	r3, r5
 8018df8:	4641      	mov	r1, r8
 8018dfa:	4630      	mov	r0, r6
 8018dfc:	e9cd 4700 	strd	r4, r7, [sp]
 8018e00:	f7ff ffe2 	bl	8018dc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018e04:	e7f1      	b.n	8018dea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018e06:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018e0e:	603b      	str	r3, [r7, #0]
 8018e10:	e7eb      	b.n	8018dea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018e12:	fa32 fa05 	lsrs.w	sl, r2, r5
 8018e16:	d106      	bne.n	8018e26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8018e18:	4346      	muls	r6, r0
 8018e1a:	fbb6 f0f4 	udiv	r0, r6, r4
 8018e1e:	fb04 6610 	mls	r6, r4, r0, r6
 8018e22:	603e      	str	r6, [r7, #0]
 8018e24:	e7e1      	b.n	8018dea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018e26:	2201      	movs	r2, #1
 8018e28:	fa00 fb05 	lsl.w	fp, r0, r5
 8018e2c:	40aa      	lsls	r2, r5
 8018e2e:	fbbb f9f4 	udiv	r9, fp, r4
 8018e32:	3a01      	subs	r2, #1
 8018e34:	fb0a f309 	mul.w	r3, sl, r9
 8018e38:	fb04 b919 	mls	r9, r4, r9, fp
 8018e3c:	4016      	ands	r6, r2
 8018e3e:	9303      	str	r3, [sp, #12]
 8018e40:	4630      	mov	r0, r6
 8018e42:	f7ff ffa3 	bl	8018d8c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018e46:	462b      	mov	r3, r5
 8018e48:	460a      	mov	r2, r1
 8018e4a:	4601      	mov	r1, r0
 8018e4c:	4630      	mov	r0, r6
 8018e4e:	e9cd 4700 	strd	r4, r7, [sp]
 8018e52:	f7ff ffb9 	bl	8018dc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018e56:	4606      	mov	r6, r0
 8018e58:	4648      	mov	r0, r9
 8018e5a:	eb05 0108 	add.w	r1, r5, r8
 8018e5e:	f7ff ff95 	bl	8018d8c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018e62:	ab05      	add	r3, sp, #20
 8018e64:	464a      	mov	r2, r9
 8018e66:	e9cd 4300 	strd	r4, r3, [sp]
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	4650      	mov	r0, sl
 8018e6e:	f7ff ffab 	bl	8018dc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018e72:	6839      	ldr	r1, [r7, #0]
 8018e74:	9a05      	ldr	r2, [sp, #20]
 8018e76:	9b03      	ldr	r3, [sp, #12]
 8018e78:	4411      	add	r1, r2
 8018e7a:	fbb1 f2f4 	udiv	r2, r1, r4
 8018e7e:	18d3      	adds	r3, r2, r3
 8018e80:	fb04 1412 	mls	r4, r4, r2, r1
 8018e84:	441e      	add	r6, r3
 8018e86:	603c      	str	r4, [r7, #0]
 8018e88:	4430      	add	r0, r6
 8018e8a:	e7ae      	b.n	8018dea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08018e8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e90:	b085      	sub	sp, #20
 8018e92:	f1b0 0900 	subs.w	r9, r0, #0
 8018e96:	461d      	mov	r5, r3
 8018e98:	4617      	mov	r7, r2
 8018e9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018e9c:	bfbb      	ittet	lt
 8018e9e:	f1c9 0900 	rsblt	r9, r9, #0
 8018ea2:	f04f 36ff 	movlt.w	r6, #4294967295
 8018ea6:	2601      	movge	r6, #1
 8018ea8:	6823      	ldrlt	r3, [r4, #0]
 8018eaa:	bfbc      	itt	lt
 8018eac:	425b      	neglt	r3, r3
 8018eae:	6023      	strlt	r3, [r4, #0]
 8018eb0:	2a00      	cmp	r2, #0
 8018eb2:	da04      	bge.n	8018ebe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8018eb4:	6823      	ldr	r3, [r4, #0]
 8018eb6:	4257      	negs	r7, r2
 8018eb8:	4276      	negs	r6, r6
 8018eba:	425b      	negs	r3, r3
 8018ebc:	6023      	str	r3, [r4, #0]
 8018ebe:	2d00      	cmp	r5, #0
 8018ec0:	4638      	mov	r0, r7
 8018ec2:	bfba      	itte	lt
 8018ec4:	426d      	neglt	r5, r5
 8018ec6:	f04f 38ff 	movlt.w	r8, #4294967295
 8018eca:	f04f 0801 	movge.w	r8, #1
 8018ece:	f7ff ff5d 	bl	8018d8c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018ed2:	ab03      	add	r3, sp, #12
 8018ed4:	463a      	mov	r2, r7
 8018ed6:	e9cd 5300 	strd	r5, r3, [sp]
 8018eda:	4603      	mov	r3, r0
 8018edc:	4648      	mov	r0, r9
 8018ede:	f7ff ff73 	bl	8018dc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018ee2:	6823      	ldr	r3, [r4, #0]
 8018ee4:	9a03      	ldr	r2, [sp, #12]
 8018ee6:	4546      	cmp	r6, r8
 8018ee8:	441a      	add	r2, r3
 8018eea:	fb92 f3f5 	sdiv	r3, r2, r5
 8018eee:	4418      	add	r0, r3
 8018ef0:	fb05 2313 	mls	r3, r5, r3, r2
 8018ef4:	bf18      	it	ne
 8018ef6:	4240      	negne	r0, r0
 8018ef8:	1c72      	adds	r2, r6, #1
 8018efa:	6023      	str	r3, [r4, #0]
 8018efc:	d105      	bne.n	8018f0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f1c3 0200 	rsb	r2, r3, #0
 8018f04:	db0b      	blt.n	8018f1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018f06:	6022      	str	r2, [r4, #0]
 8018f08:	e006      	b.n	8018f18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018f0a:	2e01      	cmp	r6, #1
 8018f0c:	d104      	bne.n	8018f18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	da02      	bge.n	8018f18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018f12:	442b      	add	r3, r5
 8018f14:	3801      	subs	r0, #1
 8018f16:	6023      	str	r3, [r4, #0]
 8018f18:	b005      	add	sp, #20
 8018f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f1e:	3801      	subs	r0, #1
 8018f20:	1b52      	subs	r2, r2, r5
 8018f22:	e7f0      	b.n	8018f06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08018f24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018f24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018f28:	4c1c      	ldr	r4, [pc, #112]	; (8018f9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018f2a:	4605      	mov	r5, r0
 8018f2c:	6807      	ldr	r7, [r0, #0]
 8018f2e:	69a3      	ldr	r3, [r4, #24]
 8018f30:	b92b      	cbnz	r3, 8018f3e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018f32:	6840      	ldr	r0, [r0, #4]
 8018f34:	e9c5 7000 	strd	r7, r0, [r5]
 8018f38:	b004      	add	sp, #16
 8018f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f3e:	f04f 0802 	mov.w	r8, #2
 8018f42:	68a2      	ldr	r2, [r4, #8]
 8018f44:	ae04      	add	r6, sp, #16
 8018f46:	6820      	ldr	r0, [r4, #0]
 8018f48:	fb93 f1f8 	sdiv	r1, r3, r8
 8018f4c:	440a      	add	r2, r1
 8018f4e:	69e1      	ldr	r1, [r4, #28]
 8018f50:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018f54:	463a      	mov	r2, r7
 8018f56:	9600      	str	r6, [sp, #0]
 8018f58:	f7ff ff98 	bl	8018e8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018f5c:	69a3      	ldr	r3, [r4, #24]
 8018f5e:	4607      	mov	r7, r0
 8018f60:	686a      	ldr	r2, [r5, #4]
 8018f62:	6a21      	ldr	r1, [r4, #32]
 8018f64:	9600      	str	r6, [sp, #0]
 8018f66:	6860      	ldr	r0, [r4, #4]
 8018f68:	f7ff ff90 	bl	8018e8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018f6c:	69a3      	ldr	r3, [r4, #24]
 8018f6e:	6962      	ldr	r2, [r4, #20]
 8018f70:	4407      	add	r7, r0
 8018f72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018f74:	9600      	str	r6, [sp, #0]
 8018f76:	68e0      	ldr	r0, [r4, #12]
 8018f78:	fb93 f8f8 	sdiv	r8, r3, r8
 8018f7c:	4442      	add	r2, r8
 8018f7e:	9203      	str	r2, [sp, #12]
 8018f80:	682a      	ldr	r2, [r5, #0]
 8018f82:	f7ff ff83 	bl	8018e8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018f86:	4680      	mov	r8, r0
 8018f88:	9600      	str	r6, [sp, #0]
 8018f8a:	69a3      	ldr	r3, [r4, #24]
 8018f8c:	686a      	ldr	r2, [r5, #4]
 8018f8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018f90:	6920      	ldr	r0, [r4, #16]
 8018f92:	f7ff ff7b 	bl	8018e8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018f96:	4440      	add	r0, r8
 8018f98:	e7cc      	b.n	8018f34 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018f9a:	bf00      	nop
 8018f9c:	20015044 	.word	0x20015044

08018fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018fa0:	4b07      	ldr	r3, [pc, #28]	; (8018fc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8018fa2:	781b      	ldrb	r3, [r3, #0]
 8018fa4:	2b01      	cmp	r3, #1
 8018fa6:	d109      	bne.n	8018fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018fa8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018fac:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018fb0:	8003      	strh	r3, [r0, #0]
 8018fb2:	4b04      	ldr	r3, [pc, #16]	; (8018fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018fb4:	881b      	ldrh	r3, [r3, #0]
 8018fb6:	3b01      	subs	r3, #1
 8018fb8:	1a9b      	subs	r3, r3, r2
 8018fba:	800b      	strh	r3, [r1, #0]
 8018fbc:	4770      	bx	lr
 8018fbe:	bf00      	nop
 8018fc0:	20015030 	.word	0x20015030
 8018fc4:	2001502c 	.word	0x2001502c

08018fc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018fc8:	4b07      	ldr	r3, [pc, #28]	; (8018fe8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018fca:	b510      	push	{r4, lr}
 8018fcc:	781b      	ldrb	r3, [r3, #0]
 8018fce:	2b01      	cmp	r3, #1
 8018fd0:	d108      	bne.n	8018fe4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018fd2:	4b06      	ldr	r3, [pc, #24]	; (8018fec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018fd4:	880c      	ldrh	r4, [r1, #0]
 8018fd6:	881b      	ldrh	r3, [r3, #0]
 8018fd8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018fdc:	3b01      	subs	r3, #1
 8018fde:	1b1b      	subs	r3, r3, r4
 8018fe0:	8003      	strh	r3, [r0, #0]
 8018fe2:	800a      	strh	r2, [r1, #0]
 8018fe4:	bd10      	pop	{r4, pc}
 8018fe6:	bf00      	nop
 8018fe8:	20015030 	.word	0x20015030
 8018fec:	2001502c 	.word	0x2001502c

08018ff0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018ff0:	4b0a      	ldr	r3, [pc, #40]	; (801901c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018ff2:	b510      	push	{r4, lr}
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	2b01      	cmp	r3, #1
 8018ff8:	d10e      	bne.n	8019018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018ffa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018ffe:	8843      	ldrh	r3, [r0, #2]
 8019000:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019004:	18ca      	adds	r2, r1, r3
 8019006:	4b06      	ldr	r3, [pc, #24]	; (8019020 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019008:	8044      	strh	r4, [r0, #2]
 801900a:	881b      	ldrh	r3, [r3, #0]
 801900c:	1a9b      	subs	r3, r3, r2
 801900e:	8003      	strh	r3, [r0, #0]
 8019010:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019014:	8081      	strh	r1, [r0, #4]
 8019016:	80c3      	strh	r3, [r0, #6]
 8019018:	bd10      	pop	{r4, pc}
 801901a:	bf00      	nop
 801901c:	20015030 	.word	0x20015030
 8019020:	2001502c 	.word	0x2001502c

08019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019024:	4b08      	ldr	r3, [pc, #32]	; (8019048 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019026:	781b      	ldrb	r3, [r3, #0]
 8019028:	2b01      	cmp	r3, #1
 801902a:	d10c      	bne.n	8019046 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801902c:	8803      	ldrh	r3, [r0, #0]
 801902e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019032:	8842      	ldrh	r2, [r0, #2]
 8019034:	8002      	strh	r2, [r0, #0]
 8019036:	185a      	adds	r2, r3, r1
 8019038:	4b04      	ldr	r3, [pc, #16]	; (801904c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801903a:	881b      	ldrh	r3, [r3, #0]
 801903c:	1a9b      	subs	r3, r3, r2
 801903e:	8043      	strh	r3, [r0, #2]
 8019040:	88c3      	ldrh	r3, [r0, #6]
 8019042:	80c1      	strh	r1, [r0, #6]
 8019044:	8083      	strh	r3, [r0, #4]
 8019046:	4770      	bx	lr
 8019048:	20015030 	.word	0x20015030
 801904c:	2001502c 	.word	0x2001502c

08019050 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019050:	4b07      	ldr	r3, [pc, #28]	; (8019070 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019052:	b510      	push	{r4, lr}
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	2b01      	cmp	r3, #1
 8019058:	d108      	bne.n	801906c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801905a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801905e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019062:	8003      	strh	r3, [r0, #0]
 8019064:	8893      	ldrh	r3, [r2, #4]
 8019066:	3b01      	subs	r3, #1
 8019068:	1b1b      	subs	r3, r3, r4
 801906a:	800b      	strh	r3, [r1, #0]
 801906c:	bd10      	pop	{r4, pc}
 801906e:	bf00      	nop
 8019070:	20015030 	.word	0x20015030

08019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019074:	4b0a      	ldr	r3, [pc, #40]	; (80190a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019076:	460a      	mov	r2, r1
 8019078:	b510      	push	{r4, lr}
 801907a:	781b      	ldrb	r3, [r3, #0]
 801907c:	2b01      	cmp	r3, #1
 801907e:	d10d      	bne.n	801909c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019080:	8881      	ldrh	r1, [r0, #4]
 8019082:	8803      	ldrh	r3, [r0, #0]
 8019084:	440b      	add	r3, r1
 8019086:	4601      	mov	r1, r0
 8019088:	3b01      	subs	r3, #1
 801908a:	f821 3b02 	strh.w	r3, [r1], #2
 801908e:	f7ff ffdf 	bl	8019050 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019092:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019096:	88c2      	ldrh	r2, [r0, #6]
 8019098:	80c3      	strh	r3, [r0, #6]
 801909a:	8082      	strh	r2, [r0, #4]
 801909c:	bd10      	pop	{r4, pc}
 801909e:	bf00      	nop
 80190a0:	20015030 	.word	0x20015030

080190a4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80190a4:	4b06      	ldr	r3, [pc, #24]	; (80190c0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80190a6:	2100      	movs	r1, #0
 80190a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80190ac:	4b05      	ldr	r3, [pc, #20]	; (80190c4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80190ae:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80190b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190b6:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80190ba:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80190be:	4770      	bx	lr
 80190c0:	2001502c 	.word	0x2001502c
 80190c4:	2001502e 	.word	0x2001502e

080190c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80190c8:	4b03      	ldr	r3, [pc, #12]	; (80190d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80190ca:	6818      	ldr	r0, [r3, #0]
 80190cc:	b110      	cbz	r0, 80190d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80190ce:	6803      	ldr	r3, [r0, #0]
 80190d0:	699b      	ldr	r3, [r3, #24]
 80190d2:	4718      	bx	r3
 80190d4:	4770      	bx	lr
 80190d6:	bf00      	nop
 80190d8:	20015074 	.word	0x20015074

080190dc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80190dc:	4770      	bx	lr
	...

080190e0 <_ZN8touchgfx11Application4drawEv>:
 80190e0:	4b09      	ldr	r3, [pc, #36]	; (8019108 <_ZN8touchgfx11Application4drawEv+0x28>)
 80190e2:	b507      	push	{r0, r1, r2, lr}
 80190e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80190e8:	2100      	movs	r1, #0
 80190ea:	4b08      	ldr	r3, [pc, #32]	; (801910c <_ZN8touchgfx11Application4drawEv+0x2c>)
 80190ec:	9100      	str	r1, [sp, #0]
 80190ee:	4669      	mov	r1, sp
 80190f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190f4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80190f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80190fc:	6803      	ldr	r3, [r0, #0]
 80190fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019100:	4798      	blx	r3
 8019102:	b003      	add	sp, #12
 8019104:	f85d fb04 	ldr.w	pc, [sp], #4
 8019108:	2001502c 	.word	0x2001502c
 801910c:	2001502e 	.word	0x2001502e

08019110 <_ZN8touchgfx11Application10invalidateEv>:
 8019110:	4b09      	ldr	r3, [pc, #36]	; (8019138 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019112:	b082      	sub	sp, #8
 8019114:	2100      	movs	r1, #0
 8019116:	f9b3 2000 	ldrsh.w	r2, [r3]
 801911a:	4b08      	ldr	r3, [pc, #32]	; (801913c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801911c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019120:	aa02      	add	r2, sp, #8
 8019122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019126:	9100      	str	r1, [sp, #0]
 8019128:	f8ad 3006 	strh.w	r3, [sp, #6]
 801912c:	6803      	ldr	r3, [r0, #0]
 801912e:	e912 0006 	ldmdb	r2, {r1, r2}
 8019132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019134:	b002      	add	sp, #8
 8019136:	4718      	bx	r3
 8019138:	2001502c 	.word	0x2001502c
 801913c:	2001502e 	.word	0x2001502e

08019140 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019140:	4b03      	ldr	r3, [pc, #12]	; (8019150 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019142:	6818      	ldr	r0, [r3, #0]
 8019144:	b110      	cbz	r0, 801914c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019146:	6803      	ldr	r3, [r0, #0]
 8019148:	69db      	ldr	r3, [r3, #28]
 801914a:	4718      	bx	r3
 801914c:	4770      	bx	lr
 801914e:	bf00      	nop
 8019150:	20015074 	.word	0x20015074

08019154 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019154:	4b03      	ldr	r3, [pc, #12]	; (8019164 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019156:	6818      	ldr	r0, [r3, #0]
 8019158:	b110      	cbz	r0, 8019160 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801915a:	6803      	ldr	r3, [r0, #0]
 801915c:	6a1b      	ldr	r3, [r3, #32]
 801915e:	4718      	bx	r3
 8019160:	4770      	bx	lr
 8019162:	bf00      	nop
 8019164:	20015074 	.word	0x20015074

08019168 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019168:	2300      	movs	r3, #0
 801916a:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801916e:	4770      	bx	lr

08019170 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019170:	4b03      	ldr	r3, [pc, #12]	; (8019180 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019172:	6818      	ldr	r0, [r3, #0]
 8019174:	b110      	cbz	r0, 801917c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019176:	6803      	ldr	r3, [r0, #0]
 8019178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801917a:	4718      	bx	r3
 801917c:	4770      	bx	lr
 801917e:	bf00      	nop
 8019180:	20015074 	.word	0x20015074

08019184 <_ZN8touchgfx11ApplicationD1Ev>:
 8019184:	4770      	bx	lr

08019186 <_ZN8touchgfx11ApplicationD0Ev>:
 8019186:	b510      	push	{r4, lr}
 8019188:	4604      	mov	r4, r0
 801918a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801918e:	f010 fa1b 	bl	80295c8 <_ZdlPvj>
 8019192:	4620      	mov	r0, r4
 8019194:	bd10      	pop	{r4, pc}

08019196 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019196:	b510      	push	{r4, lr}
 8019198:	f9b1 4000 	ldrsh.w	r4, [r1]
 801919c:	888a      	ldrh	r2, [r1, #4]
 801919e:	f9b0 3000 	ldrsh.w	r3, [r0]
 80191a2:	4422      	add	r2, r4
 80191a4:	b212      	sxth	r2, r2
 80191a6:	4293      	cmp	r3, r2
 80191a8:	da15      	bge.n	80191d6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80191aa:	8882      	ldrh	r2, [r0, #4]
 80191ac:	4413      	add	r3, r2
 80191ae:	b21b      	sxth	r3, r3
 80191b0:	429c      	cmp	r4, r3
 80191b2:	da10      	bge.n	80191d6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80191b4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80191b8:	88c9      	ldrh	r1, [r1, #6]
 80191ba:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80191be:	4419      	add	r1, r3
 80191c0:	b209      	sxth	r1, r1
 80191c2:	428a      	cmp	r2, r1
 80191c4:	da07      	bge.n	80191d6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80191c6:	88c0      	ldrh	r0, [r0, #6]
 80191c8:	4410      	add	r0, r2
 80191ca:	b200      	sxth	r0, r0
 80191cc:	4283      	cmp	r3, r0
 80191ce:	bfac      	ite	ge
 80191d0:	2000      	movge	r0, #0
 80191d2:	2001      	movlt	r0, #1
 80191d4:	bd10      	pop	{r4, pc}
 80191d6:	2000      	movs	r0, #0
 80191d8:	e7fc      	b.n	80191d4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080191da <_ZN8touchgfx4Rect10restrictToEss>:
 80191da:	f9b0 3000 	ldrsh.w	r3, [r0]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	b510      	push	{r4, lr}
 80191e2:	da04      	bge.n	80191ee <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80191e4:	8884      	ldrh	r4, [r0, #4]
 80191e6:	4423      	add	r3, r4
 80191e8:	8083      	strh	r3, [r0, #4]
 80191ea:	2300      	movs	r3, #0
 80191ec:	8003      	strh	r3, [r0, #0]
 80191ee:	f9b0 4000 	ldrsh.w	r4, [r0]
 80191f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80191f6:	1b09      	subs	r1, r1, r4
 80191f8:	428b      	cmp	r3, r1
 80191fa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80191fe:	bfc8      	it	gt
 8019200:	8081      	strhgt	r1, [r0, #4]
 8019202:	2b00      	cmp	r3, #0
 8019204:	da04      	bge.n	8019210 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019206:	88c1      	ldrh	r1, [r0, #6]
 8019208:	440b      	add	r3, r1
 801920a:	80c3      	strh	r3, [r0, #6]
 801920c:	2300      	movs	r3, #0
 801920e:	8043      	strh	r3, [r0, #2]
 8019210:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019214:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019218:	1a52      	subs	r2, r2, r1
 801921a:	4293      	cmp	r3, r2
 801921c:	bfc8      	it	gt
 801921e:	80c2      	strhgt	r2, [r0, #6]
 8019220:	bd10      	pop	{r4, pc}
	...

08019224 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019224:	4b10      	ldr	r3, [pc, #64]	; (8019268 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019226:	b510      	push	{r4, lr}
 8019228:	460c      	mov	r4, r1
 801922a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801922e:	4b0f      	ldr	r3, [pc, #60]	; (801926c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019230:	4620      	mov	r0, r4
 8019232:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019236:	f7ff ffd0 	bl	80191da <_ZN8touchgfx4Rect10restrictToEss>
 801923a:	4b0d      	ldr	r3, [pc, #52]	; (8019270 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801923c:	6818      	ldr	r0, [r3, #0]
 801923e:	b190      	cbz	r0, 8019266 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019240:	6803      	ldr	r3, [r0, #0]
 8019242:	4621      	mov	r1, r4
 8019244:	689b      	ldr	r3, [r3, #8]
 8019246:	4798      	blx	r3
 8019248:	4b0a      	ldr	r3, [pc, #40]	; (8019274 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801924a:	6818      	ldr	r0, [r3, #0]
 801924c:	b118      	cbz	r0, 8019256 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801924e:	6803      	ldr	r3, [r0, #0]
 8019250:	4621      	mov	r1, r4
 8019252:	689b      	ldr	r3, [r3, #8]
 8019254:	4798      	blx	r3
 8019256:	4b08      	ldr	r3, [pc, #32]	; (8019278 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019258:	4621      	mov	r1, r4
 801925a:	6818      	ldr	r0, [r3, #0]
 801925c:	6803      	ldr	r3, [r0, #0]
 801925e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019262:	69db      	ldr	r3, [r3, #28]
 8019264:	4718      	bx	r3
 8019266:	bd10      	pop	{r4, pc}
 8019268:	2001502e 	.word	0x2001502e
 801926c:	2001502c 	.word	0x2001502c
 8019270:	20015074 	.word	0x20015074
 8019274:	20015070 	.word	0x20015070
 8019278:	20015038 	.word	0x20015038

0801927c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801927e:	4606      	mov	r6, r0
 8019280:	4608      	mov	r0, r1
 8019282:	460f      	mov	r7, r1
 8019284:	f7fd f9fb 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019288:	b9e8      	cbnz	r0, 80192c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801928a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801928e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019292:	42a5      	cmp	r5, r4
 8019294:	db17      	blt.n	80192c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019296:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801929a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801929e:	429a      	cmp	r2, r3
 80192a0:	db11      	blt.n	80192c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80192a2:	88b9      	ldrh	r1, [r7, #4]
 80192a4:	440d      	add	r5, r1
 80192a6:	88b1      	ldrh	r1, [r6, #4]
 80192a8:	440c      	add	r4, r1
 80192aa:	b22d      	sxth	r5, r5
 80192ac:	b224      	sxth	r4, r4
 80192ae:	42a5      	cmp	r5, r4
 80192b0:	dc09      	bgt.n	80192c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80192b2:	88f8      	ldrh	r0, [r7, #6]
 80192b4:	4410      	add	r0, r2
 80192b6:	88f2      	ldrh	r2, [r6, #6]
 80192b8:	4413      	add	r3, r2
 80192ba:	b200      	sxth	r0, r0
 80192bc:	b21b      	sxth	r3, r3
 80192be:	4298      	cmp	r0, r3
 80192c0:	bfcc      	ite	gt
 80192c2:	2000      	movgt	r0, #0
 80192c4:	2001      	movle	r0, #1
 80192c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80192c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ca:	4604      	mov	r4, r0
 80192cc:	4608      	mov	r0, r1
 80192ce:	460d      	mov	r5, r1
 80192d0:	f7fd f9d5 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80192d4:	b978      	cbnz	r0, 80192f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80192d6:	4620      	mov	r0, r4
 80192d8:	f7fd f9d1 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80192dc:	f9b5 6000 	ldrsh.w	r6, [r5]
 80192e0:	b150      	cbz	r0, 80192f8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80192e2:	8026      	strh	r6, [r4, #0]
 80192e4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80192e8:	8063      	strh	r3, [r4, #2]
 80192ea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80192ee:	80a3      	strh	r3, [r4, #4]
 80192f0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80192f4:	80e3      	strh	r3, [r4, #6]
 80192f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192f8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80192fc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019300:	42b1      	cmp	r1, r6
 8019302:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019306:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801930a:	460f      	mov	r7, r1
 801930c:	88ed      	ldrh	r5, [r5, #6]
 801930e:	bfa8      	it	ge
 8019310:	4637      	movge	r7, r6
 8019312:	4293      	cmp	r3, r2
 8019314:	4618      	mov	r0, r3
 8019316:	4466      	add	r6, ip
 8019318:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801931c:	bfa8      	it	ge
 801931e:	4610      	movge	r0, r2
 8019320:	442a      	add	r2, r5
 8019322:	88e5      	ldrh	r5, [r4, #6]
 8019324:	4461      	add	r1, ip
 8019326:	b236      	sxth	r6, r6
 8019328:	8027      	strh	r7, [r4, #0]
 801932a:	442b      	add	r3, r5
 801932c:	b209      	sxth	r1, r1
 801932e:	b212      	sxth	r2, r2
 8019330:	8060      	strh	r0, [r4, #2]
 8019332:	b21b      	sxth	r3, r3
 8019334:	428e      	cmp	r6, r1
 8019336:	bfac      	ite	ge
 8019338:	ebc7 0106 	rsbge	r1, r7, r6
 801933c:	ebc7 0101 	rsblt	r1, r7, r1
 8019340:	429a      	cmp	r2, r3
 8019342:	bfac      	ite	ge
 8019344:	ebc0 0202 	rsbge	r2, r0, r2
 8019348:	ebc0 0203 	rsblt	r2, r0, r3
 801934c:	80a1      	strh	r1, [r4, #4]
 801934e:	80e2      	strh	r2, [r4, #6]
 8019350:	e7d1      	b.n	80192f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019354 <_ZN8touchgfx11Application11getInstanceEv>:
 8019354:	4b01      	ldr	r3, [pc, #4]	; (801935c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019356:	6818      	ldr	r0, [r3, #0]
 8019358:	4770      	bx	lr
 801935a:	bf00      	nop
 801935c:	20015084 	.word	0x20015084

08019360 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8019360:	2300      	movs	r3, #0
 8019362:	b510      	push	{r4, lr}
 8019364:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8019368:	4604      	mov	r4, r0
 801936a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801936e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8019372:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8019376:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801937a:	429a      	cmp	r2, r3
 801937c:	d90e      	bls.n	801939c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801937e:	18e2      	adds	r2, r4, r3
 8019380:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8019384:	b122      	cbz	r2, 8019390 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8019386:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801938a:	6803      	ldr	r3, [r0, #0]
 801938c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801938e:	4798      	blx	r3
 8019390:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8019394:	3301      	adds	r3, #1
 8019396:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801939a:	e7ea      	b.n	8019372 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801939c:	bd10      	pop	{r4, pc}

0801939e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801939e:	2300      	movs	r3, #0
 80193a0:	f100 0284 	add.w	r2, r0, #132	; 0x84
 80193a4:	30a4      	adds	r0, #164	; 0xa4
 80193a6:	f820 3c24 	strh.w	r3, [r0, #-36]
 80193aa:	f802 3b01 	strb.w	r3, [r2], #1
 80193ae:	4282      	cmp	r2, r0
 80193b0:	d1fb      	bne.n	80193aa <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80193b2:	4770      	bx	lr

080193b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80193b4:	b570      	push	{r4, r5, r6, lr}
 80193b6:	4c0b      	ldr	r4, [pc, #44]	; (80193e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80193b8:	4605      	mov	r5, r0
 80193ba:	460e      	mov	r6, r1
 80193bc:	6820      	ldr	r0, [r4, #0]
 80193be:	b110      	cbz	r0, 80193c6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80193c0:	6803      	ldr	r3, [r0, #0]
 80193c2:	695b      	ldr	r3, [r3, #20]
 80193c4:	4798      	blx	r3
 80193c6:	1d28      	adds	r0, r5, #4
 80193c8:	f7ff ffe9 	bl	801939e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80193cc:	6026      	str	r6, [r4, #0]
 80193ce:	6833      	ldr	r3, [r6, #0]
 80193d0:	4630      	mov	r0, r6
 80193d2:	68db      	ldr	r3, [r3, #12]
 80193d4:	4798      	blx	r3
 80193d6:	682b      	ldr	r3, [r5, #0]
 80193d8:	4628      	mov	r0, r5
 80193da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193e0:	4718      	bx	r3
 80193e2:	bf00      	nop
 80193e4:	20015074 	.word	0x20015074

080193e8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80193e8:	2300      	movs	r3, #0
 80193ea:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80193ee:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80193f2:	461a      	mov	r2, r3
 80193f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193f6:	461c      	mov	r4, r3
 80193f8:	461d      	mov	r5, r3
 80193fa:	459c      	cmp	ip, r3
 80193fc:	dd1a      	ble.n	8019434 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80193fe:	18c6      	adds	r6, r0, r3
 8019400:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8019404:	b16e      	cbz	r6, 8019422 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8019406:	429a      	cmp	r2, r3
 8019408:	d008      	beq.n	801941c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801940a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801940e:	fa1f fe82 	uxth.w	lr, r2
 8019412:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8019416:	1887      	adds	r7, r0, r2
 8019418:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801941c:	3201      	adds	r2, #1
 801941e:	3301      	adds	r3, #1
 8019420:	e7eb      	b.n	80193fa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8019422:	4299      	cmp	r1, r3
 8019424:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8019428:	bfa8      	it	ge
 801942a:	3501      	addge	r5, #1
 801942c:	429e      	cmp	r6, r3
 801942e:	bfc8      	it	gt
 8019430:	3401      	addgt	r4, #1
 8019432:	e7f4      	b.n	801941e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8019434:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8019438:	1b49      	subs	r1, r1, r5
 801943a:	1b1b      	subs	r3, r3, r4
 801943c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8019440:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8019444:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8019448:	4293      	cmp	r3, r2
 801944a:	dd03      	ble.n	8019454 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801944c:	3b01      	subs	r3, #1
 801944e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8019452:	e7f7      	b.n	8019444 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8019454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019458 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019458:	b570      	push	{r4, r5, r6, lr}
 801945a:	4d16      	ldr	r5, [pc, #88]	; (80194b4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801945c:	4604      	mov	r4, r0
 801945e:	6828      	ldr	r0, [r5, #0]
 8019460:	b140      	cbz	r0, 8019474 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019462:	7a03      	ldrb	r3, [r0, #8]
 8019464:	b933      	cbnz	r3, 8019474 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019466:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801946a:	6803      	ldr	r3, [r0, #0]
 801946c:	689b      	ldr	r3, [r3, #8]
 801946e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019472:	4718      	bx	r3
 8019474:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8019478:	4e0f      	ldr	r6, [pc, #60]	; (80194b8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801947a:	b973      	cbnz	r3, 801949a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801947c:	b168      	cbz	r0, 801949a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801947e:	7a03      	ldrb	r3, [r0, #8]
 8019480:	b15b      	cbz	r3, 801949a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019482:	6830      	ldr	r0, [r6, #0]
 8019484:	b110      	cbz	r0, 801948c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019486:	6803      	ldr	r3, [r0, #0]
 8019488:	691b      	ldr	r3, [r3, #16]
 801948a:	4798      	blx	r3
 801948c:	6828      	ldr	r0, [r5, #0]
 801948e:	6803      	ldr	r3, [r0, #0]
 8019490:	68db      	ldr	r3, [r3, #12]
 8019492:	4798      	blx	r3
 8019494:	2301      	movs	r3, #1
 8019496:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801949a:	3404      	adds	r4, #4
 801949c:	4620      	mov	r0, r4
 801949e:	f7ff ff5f 	bl	8019360 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80194a2:	4620      	mov	r0, r4
 80194a4:	f7ff ffa0 	bl	80193e8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80194a8:	6830      	ldr	r0, [r6, #0]
 80194aa:	b110      	cbz	r0, 80194b2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80194ac:	6803      	ldr	r3, [r0, #0]
 80194ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194b0:	e7dd      	b.n	801946e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80194b2:	bd70      	pop	{r4, r5, r6, pc}
 80194b4:	20015078 	.word	0x20015078
 80194b8:	20015074 	.word	0x20015074

080194bc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80194bc:	4603      	mov	r3, r0
 80194be:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80194c2:	2200      	movs	r2, #0
 80194c4:	801a      	strh	r2, [r3, #0]
 80194c6:	3308      	adds	r3, #8
 80194c8:	f823 2c06 	strh.w	r2, [r3, #-6]
 80194cc:	f823 2c04 	strh.w	r2, [r3, #-4]
 80194d0:	f823 2c02 	strh.w	r2, [r3, #-2]
 80194d4:	428b      	cmp	r3, r1
 80194d6:	d1f5      	bne.n	80194c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80194d8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80194dc:	4770      	bx	lr
	...

080194e0 <_ZN8touchgfx11ApplicationC1Ev>:
 80194e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194e2:	4b1d      	ldr	r3, [pc, #116]	; (8019558 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80194e4:	4606      	mov	r6, r0
 80194e6:	4604      	mov	r4, r0
 80194e8:	2500      	movs	r5, #0
 80194ea:	f846 3b04 	str.w	r3, [r6], #4
 80194ee:	22a8      	movs	r2, #168	; 0xa8
 80194f0:	2100      	movs	r1, #0
 80194f2:	4630      	mov	r0, r6
 80194f4:	f010 fb50 	bl	8029b98 <memset>
 80194f8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80194fc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8019500:	4f16      	ldr	r7, [pc, #88]	; (801955c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019502:	f7ff ffdb 	bl	80194bc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019506:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801950a:	f7ff ffd7 	bl	80194bc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801950e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019512:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8019516:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801951a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801951e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8019522:	490f      	ldr	r1, [pc, #60]	; (8019560 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019524:	480f      	ldr	r0, [pc, #60]	; (8019564 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019526:	f00f ff27 	bl	8029378 <CRC_Lock>
 801952a:	4b0f      	ldr	r3, [pc, #60]	; (8019568 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801952c:	b158      	cbz	r0, 8019546 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801952e:	801d      	strh	r5, [r3, #0]
 8019530:	2300      	movs	r3, #0
 8019532:	4a0e      	ldr	r2, [pc, #56]	; (801956c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8019534:	4630      	mov	r0, r6
 8019536:	6013      	str	r3, [r2, #0]
 8019538:	4a0d      	ldr	r2, [pc, #52]	; (8019570 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801953a:	603b      	str	r3, [r7, #0]
 801953c:	6013      	str	r3, [r2, #0]
 801953e:	f7ff ff2e 	bl	801939e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019542:	4620      	mov	r0, r4
 8019544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801954a:	2002      	movs	r0, #2
 801954c:	801a      	strh	r2, [r3, #0]
 801954e:	6038      	str	r0, [r7, #0]
 8019550:	f001 fa58 	bl	801aa04 <_ZN8touchgfx6Screen4drawEv>
 8019554:	e7ec      	b.n	8019530 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8019556:	bf00      	nop
 8019558:	0802ed4c 	.word	0x0802ed4c
 801955c:	20015074 	.word	0x20015074
 8019560:	b5e8b5cd 	.word	0xb5e8b5cd
 8019564:	f407a5c2 	.word	0xf407a5c2
 8019568:	20000044 	.word	0x20000044
 801956c:	20015084 	.word	0x20015084
 8019570:	20015078 	.word	0x20015078

08019574 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019574:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8019578:	3b01      	subs	r3, #1
 801957a:	b29b      	uxth	r3, r3
 801957c:	428b      	cmp	r3, r1
 801957e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8019582:	b510      	push	{r4, lr}
 8019584:	d908      	bls.n	8019598 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8019586:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801958a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801958e:	681a      	ldr	r2, [r3, #0]
 8019590:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019594:	685a      	ldr	r2, [r3, #4]
 8019596:	6062      	str	r2, [r4, #4]
 8019598:	bd10      	pop	{r4, pc}
	...

0801959c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195a0:	b08f      	sub	sp, #60	; 0x3c
 80195a2:	4b8f      	ldr	r3, [pc, #572]	; (80197e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80195a4:	4683      	mov	fp, r0
 80195a6:	ac0a      	add	r4, sp, #40	; 0x28
 80195a8:	e884 0006 	stmia.w	r4, {r1, r2}
 80195ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80195b0:	4620      	mov	r0, r4
 80195b2:	4b8c      	ldr	r3, [pc, #560]	; (80197e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80195b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80195b8:	f7ff fe0f 	bl	80191da <_ZN8touchgfx4Rect10restrictToEss>
 80195bc:	4620      	mov	r0, r4
 80195be:	f7fd f85e 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80195c2:	2800      	cmp	r0, #0
 80195c4:	d16a      	bne.n	801969c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80195c6:	9403      	str	r4, [sp, #12]
 80195c8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80195cc:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80195d0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80195d4:	9301      	str	r3, [sp, #4]
 80195d6:	35a4      	adds	r5, #164	; 0xa4
 80195d8:	b15c      	cbz	r4, 80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80195da:	4629      	mov	r1, r5
 80195dc:	9803      	ldr	r0, [sp, #12]
 80195de:	f7ff fe4d 	bl	801927c <_ZNK8touchgfx4Rect8includesERKS0_>
 80195e2:	3c01      	subs	r4, #1
 80195e4:	b118      	cbz	r0, 80195ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80195e6:	b2a1      	uxth	r1, r4
 80195e8:	9801      	ldr	r0, [sp, #4]
 80195ea:	f7ff ffc3 	bl	8019574 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195ee:	3d08      	subs	r5, #8
 80195f0:	e7f2      	b.n	80195d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80195f2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 80195f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80195fa:	f8cd a010 	str.w	sl, [sp, #16]
 80195fe:	9302      	str	r3, [sp, #8]
 8019600:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019604:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8019608:	9306      	str	r3, [sp, #24]
 801960a:	445c      	add	r4, fp
 801960c:	2500      	movs	r5, #0
 801960e:	4626      	mov	r6, r4
 8019610:	f8cd a014 	str.w	sl, [sp, #20]
 8019614:	462f      	mov	r7, r5
 8019616:	9b05      	ldr	r3, [sp, #20]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d073      	beq.n	8019704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801961c:	9903      	ldr	r1, [sp, #12]
 801961e:	4630      	mov	r0, r6
 8019620:	f7ff fdb9 	bl	8019196 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019624:	b350      	cbz	r0, 801967c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019626:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801962a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801962e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8019632:	45e6      	cmp	lr, ip
 8019634:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019638:	db33      	blt.n	80196a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801963a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801963e:	88b3      	ldrh	r3, [r6, #4]
 8019640:	4472      	add	r2, lr
 8019642:	4463      	add	r3, ip
 8019644:	b212      	sxth	r2, r2
 8019646:	b21b      	sxth	r3, r3
 8019648:	429a      	cmp	r2, r3
 801964a:	dc2a      	bgt.n	80196a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801964c:	fa1f f289 	uxth.w	r2, r9
 8019650:	88f3      	ldrh	r3, [r6, #6]
 8019652:	45c8      	cmp	r8, r9
 8019654:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8019658:	4413      	add	r3, r2
 801965a:	fa1f fc88 	uxth.w	ip, r8
 801965e:	b29b      	uxth	r3, r3
 8019660:	fa0f fe83 	sxth.w	lr, r3
 8019664:	db0f      	blt.n	8019686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019666:	eba3 030c 	sub.w	r3, r3, ip
 801966a:	1ac9      	subs	r1, r1, r3
 801966c:	b209      	sxth	r1, r1
 801966e:	2900      	cmp	r1, #0
 8019670:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019674:	dd12      	ble.n	801969c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019676:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801967a:	4605      	mov	r5, r0
 801967c:	9b05      	ldr	r3, [sp, #20]
 801967e:	3e08      	subs	r6, #8
 8019680:	3b01      	subs	r3, #1
 8019682:	9305      	str	r3, [sp, #20]
 8019684:	e7c7      	b.n	8019616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019686:	4461      	add	r1, ip
 8019688:	b209      	sxth	r1, r1
 801968a:	4571      	cmp	r1, lr
 801968c:	dc38      	bgt.n	8019700 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801968e:	eba2 020c 	sub.w	r2, r2, ip
 8019692:	b212      	sxth	r2, r2
 8019694:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8019698:	2a00      	cmp	r2, #0
 801969a:	dcee      	bgt.n	801967a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801969c:	b00f      	add	sp, #60	; 0x3c
 801969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a2:	45c8      	cmp	r8, r9
 80196a4:	db2c      	blt.n	8019700 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80196a6:	88f3      	ldrh	r3, [r6, #6]
 80196a8:	4499      	add	r9, r3
 80196aa:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80196ae:	4498      	add	r8, r3
 80196b0:	fa0f f989 	sxth.w	r9, r9
 80196b4:	fa0f f888 	sxth.w	r8, r8
 80196b8:	45c1      	cmp	r9, r8
 80196ba:	db21      	blt.n	8019700 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80196bc:	fa1f f28c 	uxth.w	r2, ip
 80196c0:	88b3      	ldrh	r3, [r6, #4]
 80196c2:	45e6      	cmp	lr, ip
 80196c4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80196c8:	4413      	add	r3, r2
 80196ca:	fa1f f88e 	uxth.w	r8, lr
 80196ce:	b29b      	uxth	r3, r3
 80196d0:	fa0f f983 	sxth.w	r9, r3
 80196d4:	db0a      	blt.n	80196ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80196d6:	eba3 0308 	sub.w	r3, r3, r8
 80196da:	1ac9      	subs	r1, r1, r3
 80196dc:	b209      	sxth	r1, r1
 80196de:	2900      	cmp	r1, #0
 80196e0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80196e4:	ddda      	ble.n	801969c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80196e6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80196ea:	e7c6      	b.n	801967a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80196ec:	4441      	add	r1, r8
 80196ee:	b209      	sxth	r1, r1
 80196f0:	4549      	cmp	r1, r9
 80196f2:	dc05      	bgt.n	8019700 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80196f4:	eba2 0208 	sub.w	r2, r2, r8
 80196f8:	b212      	sxth	r2, r2
 80196fa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80196fe:	e7cb      	b.n	8019698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8019700:	4607      	mov	r7, r0
 8019702:	e7bb      	b.n	801967c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019704:	2d00      	cmp	r5, #0
 8019706:	d181      	bne.n	801960c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8019708:	2f00      	cmp	r7, #0
 801970a:	f000 81dd 	beq.w	8019ac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801970e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8019712:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8019716:	b2b3      	uxth	r3, r6
 8019718:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801971c:	9305      	str	r3, [sp, #20]
 801971e:	9a05      	ldr	r2, [sp, #20]
 8019720:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8019724:	4413      	add	r3, r2
 8019726:	b2ba      	uxth	r2, r7
 8019728:	4492      	add	sl, r2
 801972a:	b29b      	uxth	r3, r3
 801972c:	fa1f fa8a 	uxth.w	sl, sl
 8019730:	fa0f f883 	sxth.w	r8, r3
 8019734:	fa0f f98a 	sxth.w	r9, sl
 8019738:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801973c:	9b04      	ldr	r3, [sp, #16]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d052      	beq.n	80197e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019742:	9903      	ldr	r1, [sp, #12]
 8019744:	4620      	mov	r0, r4
 8019746:	f7ff fd26 	bl	8019196 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801974a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801974e:	b1c0      	cbz	r0, 8019782 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019750:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019754:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019758:	4576      	cmp	r6, lr
 801975a:	dc22      	bgt.n	80197a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801975c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019760:	44f4      	add	ip, lr
 8019762:	fa0f fc8c 	sxth.w	ip, ip
 8019766:	45e0      	cmp	r8, ip
 8019768:	db1b      	blt.n	80197a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801976a:	428f      	cmp	r7, r1
 801976c:	fa1f fc81 	uxth.w	ip, r1
 8019770:	88e1      	ldrh	r1, [r4, #6]
 8019772:	dc0d      	bgt.n	8019790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019774:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019778:	f8a4 9002 	strh.w	r9, [r4, #2]
 801977c:	eba1 010c 	sub.w	r1, r1, ip
 8019780:	80e1      	strh	r1, [r4, #6]
 8019782:	4628      	mov	r0, r5
 8019784:	9904      	ldr	r1, [sp, #16]
 8019786:	3c08      	subs	r4, #8
 8019788:	4605      	mov	r5, r0
 801978a:	3901      	subs	r1, #1
 801978c:	9104      	str	r1, [sp, #16]
 801978e:	e7d3      	b.n	8019738 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8019790:	4461      	add	r1, ip
 8019792:	b209      	sxth	r1, r1
 8019794:	4549      	cmp	r1, r9
 8019796:	dcf5      	bgt.n	8019784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019798:	eba2 0c0c 	sub.w	ip, r2, ip
 801979c:	f8a4 c006 	strh.w	ip, [r4, #6]
 80197a0:	e7ef      	b.n	8019782 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80197a2:	428f      	cmp	r7, r1
 80197a4:	dcee      	bgt.n	8019784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80197a6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80197aa:	4461      	add	r1, ip
 80197ac:	b209      	sxth	r1, r1
 80197ae:	4589      	cmp	r9, r1
 80197b0:	dbe8      	blt.n	8019784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80197b2:	4576      	cmp	r6, lr
 80197b4:	fa1f fc8e 	uxth.w	ip, lr
 80197b8:	88a1      	ldrh	r1, [r4, #4]
 80197ba:	dc07      	bgt.n	80197cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80197bc:	eba3 0c0c 	sub.w	ip, r3, ip
 80197c0:	f8a4 8000 	strh.w	r8, [r4]
 80197c4:	eba1 010c 	sub.w	r1, r1, ip
 80197c8:	80a1      	strh	r1, [r4, #4]
 80197ca:	e7da      	b.n	8019782 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80197cc:	4461      	add	r1, ip
 80197ce:	b209      	sxth	r1, r1
 80197d0:	4588      	cmp	r8, r1
 80197d2:	dbd7      	blt.n	8019784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80197d4:	9905      	ldr	r1, [sp, #20]
 80197d6:	eba1 0c0c 	sub.w	ip, r1, ip
 80197da:	f8a4 c004 	strh.w	ip, [r4, #4]
 80197de:	e7d0      	b.n	8019782 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80197e0:	2001502e 	.word	0x2001502e
 80197e4:	2001502c 	.word	0x2001502c
 80197e8:	2d00      	cmp	r5, #0
 80197ea:	f000 816d 	beq.w	8019ac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80197ee:	9b06      	ldr	r3, [sp, #24]
 80197f0:	445b      	add	r3, fp
 80197f2:	461c      	mov	r4, r3
 80197f4:	9b02      	ldr	r3, [sp, #8]
 80197f6:	3301      	adds	r3, #1
 80197f8:	f000 8166 	beq.w	8019ac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80197fc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8019800:	9803      	ldr	r0, [sp, #12]
 8019802:	4629      	mov	r1, r5
 8019804:	f7ff fd3a 	bl	801927c <_ZNK8touchgfx4Rect8includesERKS0_>
 8019808:	b120      	cbz	r0, 8019814 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801980a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801980e:	9801      	ldr	r0, [sp, #4]
 8019810:	f7ff feb0 	bl	8019574 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019814:	9903      	ldr	r1, [sp, #12]
 8019816:	4628      	mov	r0, r5
 8019818:	f7ff fcbd 	bl	8019196 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801981c:	2800      	cmp	r0, #0
 801981e:	f000 809c 	beq.w	801995a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019822:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8019826:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801982a:	fa1f f189 	uxth.w	r1, r9
 801982e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8019832:	9309      	str	r3, [sp, #36]	; 0x24
 8019834:	eb01 0c03 	add.w	ip, r1, r3
 8019838:	b283      	uxth	r3, r0
 801983a:	4548      	cmp	r0, r9
 801983c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8019840:	fa1f fa8c 	uxth.w	sl, ip
 8019844:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8019848:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801984c:	eb03 050c 	add.w	r5, r3, ip
 8019850:	b2ad      	uxth	r5, r5
 8019852:	9505      	str	r5, [sp, #20]
 8019854:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019858:	9504      	str	r5, [sp, #16]
 801985a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801985e:	f340 8099 	ble.w	8019994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8019862:	1a5b      	subs	r3, r3, r1
 8019864:	4596      	cmp	lr, r2
 8019866:	fa0f f08a 	sxth.w	r0, sl
 801986a:	b29b      	uxth	r3, r3
 801986c:	b21e      	sxth	r6, r3
 801986e:	dd2e      	ble.n	80198ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8019870:	9f02      	ldr	r7, [sp, #8]
 8019872:	fa1f fe8e 	uxth.w	lr, lr
 8019876:	b292      	uxth	r2, r2
 8019878:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801987c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8019880:	9f04      	ldr	r7, [sp, #16]
 8019882:	ebae 0102 	sub.w	r1, lr, r2
 8019886:	44a6      	add	lr, r4
 8019888:	1a3f      	subs	r7, r7, r0
 801988a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801988e:	b289      	uxth	r1, r1
 8019890:	4402      	add	r2, r0
 8019892:	fa0f fe8e 	sxth.w	lr, lr
 8019896:	b20d      	sxth	r5, r1
 8019898:	b212      	sxth	r2, r2
 801989a:	436f      	muls	r7, r5
 801989c:	ebae 0202 	sub.w	r2, lr, r2
 80198a0:	4372      	muls	r2, r6
 80198a2:	4297      	cmp	r7, r2
 80198a4:	db09      	blt.n	80198ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80198a6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80198aa:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80198ae:	449c      	add	ip, r3
 80198b0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80198b4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80198b8:	e686      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80198ba:	4421      	add	r1, r4
 80198bc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80198c0:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 80198c4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80198c8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80198cc:	e67c      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80198ce:	9f04      	ldr	r7, [sp, #16]
 80198d0:	42b8      	cmp	r0, r7
 80198d2:	da27      	bge.n	8019924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80198d4:	9902      	ldr	r1, [sp, #8]
 80198d6:	1a3f      	subs	r7, r7, r0
 80198d8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80198dc:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80198e0:	eb05 010e 	add.w	r1, r5, lr
 80198e4:	fa1f f881 	uxth.w	r8, r1
 80198e8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80198ec:	4411      	add	r1, r2
 80198ee:	fa0f f988 	sxth.w	r9, r8
 80198f2:	eba2 020e 	sub.w	r2, r2, lr
 80198f6:	eba1 0108 	sub.w	r1, r1, r8
 80198fa:	4372      	muls	r2, r6
 80198fc:	b289      	uxth	r1, r1
 80198fe:	fa0f f881 	sxth.w	r8, r1
 8019902:	fb08 f707 	mul.w	r7, r8, r7
 8019906:	42ba      	cmp	r2, r7
 8019908:	dc06      	bgt.n	8019918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801990a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801990e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8019912:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8019916:	e7ca      	b.n	80198ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019918:	4429      	add	r1, r5
 801991a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801991e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019922:	e651      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019924:	9805      	ldr	r0, [sp, #20]
 8019926:	2d06      	cmp	r5, #6
 8019928:	ebaa 0000 	sub.w	r0, sl, r0
 801992c:	b280      	uxth	r0, r0
 801992e:	fa0f fe80 	sxth.w	lr, r0
 8019932:	d817      	bhi.n	8019964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8019934:	9b04      	ldr	r3, [sp, #16]
 8019936:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801993a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801993e:	1c6b      	adds	r3, r5, #1
 8019940:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8019944:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019948:	9b01      	ldr	r3, [sp, #4]
 801994a:	9801      	ldr	r0, [sp, #4]
 801994c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019950:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019954:	805a      	strh	r2, [r3, #2]
 8019956:	809e      	strh	r6, [r3, #4]
 8019958:	80d9      	strh	r1, [r3, #6]
 801995a:	9b02      	ldr	r3, [sp, #8]
 801995c:	3c08      	subs	r4, #8
 801995e:	3b01      	subs	r3, #1
 8019960:	9302      	str	r3, [sp, #8]
 8019962:	e747      	b.n	80197f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8019964:	9a02      	ldr	r2, [sp, #8]
 8019966:	45b6      	cmp	lr, r6
 8019968:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801996c:	db0d      	blt.n	801998a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801996e:	449c      	add	ip, r3
 8019970:	445a      	add	r2, fp
 8019972:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8019976:	fa1f fc8c 	uxth.w	ip, ip
 801997a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801997e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8019982:	448c      	add	ip, r1
 8019984:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8019988:	e61e      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801998a:	445a      	add	r2, fp
 801998c:	4484      	add	ip, r0
 801998e:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8019992:	e78f      	b.n	80198b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019994:	fa1f f18e 	uxth.w	r1, lr
 8019998:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801999c:	b293      	uxth	r3, r2
 801999e:	4596      	cmp	lr, r2
 80199a0:	eb01 0806 	add.w	r8, r1, r6
 80199a4:	9306      	str	r3, [sp, #24]
 80199a6:	fa1f f888 	uxth.w	r8, r8
 80199aa:	9f06      	ldr	r7, [sp, #24]
 80199ac:	fa0f f388 	sxth.w	r3, r8
 80199b0:	9307      	str	r3, [sp, #28]
 80199b2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80199b6:	443b      	add	r3, r7
 80199b8:	b29b      	uxth	r3, r3
 80199ba:	9308      	str	r3, [sp, #32]
 80199bc:	da24      	bge.n	8019a08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80199be:	9905      	ldr	r1, [sp, #20]
 80199c0:	eba3 0308 	sub.w	r3, r3, r8
 80199c4:	eba2 020e 	sub.w	r2, r2, lr
 80199c8:	eba9 0000 	sub.w	r0, r9, r0
 80199cc:	ebaa 0401 	sub.w	r4, sl, r1
 80199d0:	b29b      	uxth	r3, r3
 80199d2:	b2a4      	uxth	r4, r4
 80199d4:	b219      	sxth	r1, r3
 80199d6:	b225      	sxth	r5, r4
 80199d8:	4348      	muls	r0, r1
 80199da:	436a      	muls	r2, r5
 80199dc:	4282      	cmp	r2, r0
 80199de:	9a02      	ldr	r2, [sp, #8]
 80199e0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80199e4:	445a      	add	r2, fp
 80199e6:	dc06      	bgt.n	80199f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80199e8:	9b07      	ldr	r3, [sp, #28]
 80199ea:	44a4      	add	ip, r4
 80199ec:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80199f0:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80199f4:	e75e      	b.n	80198b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80199f6:	9904      	ldr	r1, [sp, #16]
 80199f8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80199fc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8019a00:	4433      	add	r3, r6
 8019a02:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019a06:	e5df      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019a08:	9f06      	ldr	r7, [sp, #24]
 8019a0a:	9b04      	ldr	r3, [sp, #16]
 8019a0c:	1bc9      	subs	r1, r1, r7
 8019a0e:	fa0f f78a 	sxth.w	r7, sl
 8019a12:	b289      	uxth	r1, r1
 8019a14:	429f      	cmp	r7, r3
 8019a16:	fa0f fe81 	sxth.w	lr, r1
 8019a1a:	dd23      	ble.n	8019a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8019a1c:	9a05      	ldr	r2, [sp, #20]
 8019a1e:	eba9 0000 	sub.w	r0, r9, r0
 8019a22:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019a26:	ebaa 0202 	sub.w	r2, sl, r2
 8019a2a:	9d07      	ldr	r5, [sp, #28]
 8019a2c:	fb0e f000 	mul.w	r0, lr, r0
 8019a30:	b292      	uxth	r2, r2
 8019a32:	eba5 0a03 	sub.w	sl, r5, r3
 8019a36:	9b02      	ldr	r3, [sp, #8]
 8019a38:	b214      	sxth	r4, r2
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019a40:	445b      	add	r3, fp
 8019a42:	4550      	cmp	r0, sl
 8019a44:	db03      	blt.n	8019a4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8019a46:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8019a4a:	4494      	add	ip, r2
 8019a4c:	e732      	b.n	80198b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019a4e:	9a04      	ldr	r2, [sp, #16]
 8019a50:	4431      	add	r1, r6
 8019a52:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8019a56:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8019a5a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8019a5e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019a62:	e75c      	b.n	801991e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8019a64:	9b08      	ldr	r3, [sp, #32]
 8019a66:	2d06      	cmp	r5, #6
 8019a68:	eba3 0308 	sub.w	r3, r3, r8
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	b218      	sxth	r0, r3
 8019a70:	d813      	bhi.n	8019a9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8019a72:	9b07      	ldr	r3, [sp, #28]
 8019a74:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8019a78:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8019a7c:	1c6b      	adds	r3, r5, #1
 8019a7e:	9901      	ldr	r1, [sp, #4]
 8019a80:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019a84:	9b01      	ldr	r3, [sp, #4]
 8019a86:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8019a8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019a8e:	805a      	strh	r2, [r3, #2]
 8019a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a92:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019a96:	809a      	strh	r2, [r3, #4]
 8019a98:	e75f      	b.n	801995a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019a9a:	9c02      	ldr	r4, [sp, #8]
 8019a9c:	4570      	cmp	r0, lr
 8019a9e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019aa2:	db0d      	blt.n	8019ac0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8019aa4:	4431      	add	r1, r6
 8019aa6:	9b06      	ldr	r3, [sp, #24]
 8019aa8:	445c      	add	r4, fp
 8019aaa:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019aae:	b289      	uxth	r1, r1
 8019ab0:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8019ab4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019ab8:	4419      	add	r1, r3
 8019aba:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8019abe:	e583      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019ac0:	445c      	add	r4, fp
 8019ac2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8019ac6:	e79b      	b.n	8019a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8019ac8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8019acc:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019ad0:	1e65      	subs	r5, r4, #1
 8019ad2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8019ad6:	b2ad      	uxth	r5, r5
 8019ad8:	42b5      	cmp	r5, r6
 8019ada:	d044      	beq.n	8019b66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8019adc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019ae0:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8019ae4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8019ae8:	4282      	cmp	r2, r0
 8019aea:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 8019aee:	d11f      	bne.n	8019b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019af0:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8019af4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8019af8:	459c      	cmp	ip, r3
 8019afa:	d119      	bne.n	8019b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019afc:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8019b00:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8019b04:	19d8      	adds	r0, r3, r7
 8019b06:	b200      	sxth	r0, r0
 8019b08:	4288      	cmp	r0, r1
 8019b0a:	d109      	bne.n	8019b20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8019b0c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8019b10:	4413      	add	r3, r2
 8019b12:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8019b16:	4629      	mov	r1, r5
 8019b18:	9801      	ldr	r0, [sp, #4]
 8019b1a:	f7ff fd2b 	bl	8019574 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019b1e:	e003      	b.n	8019b28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019b20:	4411      	add	r1, r2
 8019b22:	b209      	sxth	r1, r1
 8019b24:	42b9      	cmp	r1, r7
 8019b26:	d0f3      	beq.n	8019b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8019b28:	3d01      	subs	r5, #1
 8019b2a:	3c08      	subs	r4, #8
 8019b2c:	b2ad      	uxth	r5, r5
 8019b2e:	e7d3      	b.n	8019ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8019b30:	42b9      	cmp	r1, r7
 8019b32:	d1f9      	bne.n	8019b28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019b34:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8019b38:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8019b3c:	4299      	cmp	r1, r3
 8019b3e:	d1f3      	bne.n	8019b28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019b40:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8019b44:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8019b48:	181f      	adds	r7, r3, r0
 8019b4a:	b23f      	sxth	r7, r7
 8019b4c:	42ba      	cmp	r2, r7
 8019b4e:	d105      	bne.n	8019b5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8019b50:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8019b54:	440b      	add	r3, r1
 8019b56:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019b5a:	e7dc      	b.n	8019b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8019b5c:	440a      	add	r2, r1
 8019b5e:	b212      	sxth	r2, r2
 8019b60:	4290      	cmp	r0, r2
 8019b62:	d1e1      	bne.n	8019b28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019b64:	e7f6      	b.n	8019b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8019b66:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8019b6a:	2e07      	cmp	r6, #7
 8019b6c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8019b70:	d812      	bhi.n	8019b98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8019b72:	1c75      	adds	r5, r6, #1
 8019b74:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8019b78:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8019b7c:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8019b80:	9d01      	ldr	r5, [sp, #4]
 8019b82:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8019b86:	442c      	add	r4, r5
 8019b88:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8019b8c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8019b90:	8061      	strh	r1, [r4, #2]
 8019b92:	80a2      	strh	r2, [r4, #4]
 8019b94:	80e3      	strh	r3, [r4, #6]
 8019b96:	e581      	b.n	801969c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019b98:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8019b9c:	3e01      	subs	r6, #1
 8019b9e:	445c      	add	r4, fp
 8019ba0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8019ba8:	2500      	movs	r5, #0
 8019baa:	9305      	str	r3, [sp, #20]
 8019bac:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8019bb0:	1e72      	subs	r2, r6, #1
 8019bb2:	9302      	str	r3, [sp, #8]
 8019bb4:	4691      	mov	r9, r2
 8019bb6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8019bba:	9304      	str	r3, [sp, #16]
 8019bbc:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8019bc0:	f1b9 3fff 	cmp.w	r9, #4294967295
 8019bc4:	6818      	ldr	r0, [r3, #0]
 8019bc6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019bca:	9207      	str	r2, [sp, #28]
 8019bcc:	bf16      	itet	ne
 8019bce:	9905      	ldrne	r1, [sp, #20]
 8019bd0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019bd4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8019bd8:	9306      	str	r3, [sp, #24]
 8019bda:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019bde:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8019be2:	fb18 f801 	smulbb	r8, r8, r1
 8019be6:	6859      	ldr	r1, [r3, #4]
 8019be8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019bec:	4671      	mov	r1, lr
 8019bee:	a80c      	add	r0, sp, #48	; 0x30
 8019bf0:	f7ff fb6a 	bl	80192c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019bf4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8019bf8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8019bfc:	f04f 0c08 	mov.w	ip, #8
 8019c00:	9b04      	ldr	r3, [sp, #16]
 8019c02:	9a02      	ldr	r2, [sp, #8]
 8019c04:	fb10 f001 	smulbb	r0, r0, r1
 8019c08:	fb02 8803 	mla	r8, r2, r3, r8
 8019c0c:	eba0 0108 	sub.w	r1, r0, r8
 8019c10:	fb90 f0fc 	sdiv	r0, r0, ip
 8019c14:	4288      	cmp	r0, r1
 8019c16:	dc20      	bgt.n	8019c5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8019c18:	4551      	cmp	r1, sl
 8019c1a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019c1e:	da03      	bge.n	8019c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8019c20:	b1d9      	cbz	r1, 8019c5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8019c22:	468a      	mov	sl, r1
 8019c24:	464f      	mov	r7, r9
 8019c26:	4635      	mov	r5, r6
 8019c28:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c2c:	f119 0f02 	cmn.w	r9, #2
 8019c30:	d1c6      	bne.n	8019bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8019c32:	4616      	mov	r6, r2
 8019c34:	3201      	adds	r2, #1
 8019c36:	f1a4 0408 	sub.w	r4, r4, #8
 8019c3a:	d1b7      	bne.n	8019bac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8019c3c:	9b01      	ldr	r3, [sp, #4]
 8019c3e:	b2ac      	uxth	r4, r5
 8019c40:	00ed      	lsls	r5, r5, #3
 8019c42:	1958      	adds	r0, r3, r5
 8019c44:	1c7b      	adds	r3, r7, #1
 8019c46:	d10b      	bne.n	8019c60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8019c48:	4601      	mov	r1, r0
 8019c4a:	9803      	ldr	r0, [sp, #12]
 8019c4c:	f7ff fb3c 	bl	80192c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019c50:	4621      	mov	r1, r4
 8019c52:	9801      	ldr	r0, [sp, #4]
 8019c54:	f7ff fc8e 	bl	8019574 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019c58:	e4b6      	b.n	80195c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019c5a:	464f      	mov	r7, r9
 8019c5c:	4635      	mov	r5, r6
 8019c5e:	e7ed      	b.n	8019c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8019c60:	9b01      	ldr	r3, [sp, #4]
 8019c62:	00ff      	lsls	r7, r7, #3
 8019c64:	445d      	add	r5, fp
 8019c66:	19d9      	adds	r1, r3, r7
 8019c68:	445f      	add	r7, fp
 8019c6a:	f7ff fb2d 	bl	80192c8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019c6e:	9b03      	ldr	r3, [sp, #12]
 8019c70:	cb03      	ldmia	r3!, {r0, r1}
 8019c72:	9b03      	ldr	r3, [sp, #12]
 8019c74:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8019c78:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8019c7c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8019c80:	6869      	ldr	r1, [r5, #4]
 8019c82:	c303      	stmia	r3!, {r0, r1}
 8019c84:	e7e4      	b.n	8019c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8019c86:	bf00      	nop

08019c88 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8019c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c8c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8019c90:	b09b      	sub	sp, #108	; 0x6c
 8019c92:	4604      	mov	r4, r0
 8019c94:	4630      	mov	r0, r6
 8019c96:	f7fc fcf2 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019c9a:	4605      	mov	r5, r0
 8019c9c:	b948      	cbnz	r0, 8019cb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8019c9e:	6823      	ldr	r3, [r4, #0]
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ca4:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019ca8:	4798      	blx	r3
 8019caa:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019cae:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8019cb2:	4bc5      	ldr	r3, [pc, #788]	; (8019fc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d03f      	beq.n	8019d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8019cba:	4dc4      	ldr	r5, [pc, #784]	; (8019fcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8019cbc:	4628      	mov	r0, r5
 8019cbe:	f7fc fcde 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019cc2:	4606      	mov	r6, r0
 8019cc4:	2800      	cmp	r0, #0
 8019cc6:	d138      	bne.n	8019d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8019cc8:	4628      	mov	r0, r5
 8019cca:	f7ff f991 	bl	8018ff0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019cce:	6823      	ldr	r3, [r4, #0]
 8019cd0:	6829      	ldr	r1, [r5, #0]
 8019cd2:	4620      	mov	r0, r4
 8019cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cd6:	686a      	ldr	r2, [r5, #4]
 8019cd8:	4798      	blx	r3
 8019cda:	802e      	strh	r6, [r5, #0]
 8019cdc:	806e      	strh	r6, [r5, #2]
 8019cde:	80ae      	strh	r6, [r5, #4]
 8019ce0:	80ee      	strh	r6, [r5, #6]
 8019ce2:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8019ce6:	4dba      	ldr	r5, [pc, #744]	; (8019fd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8019ce8:	4640      	mov	r0, r8
 8019cea:	f7ff fbe7 	bl	80194bc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019cee:	882e      	ldrh	r6, [r5, #0]
 8019cf0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019cf4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8019cf8:	4633      	mov	r3, r6
 8019cfa:	42bb      	cmp	r3, r7
 8019cfc:	d224      	bcs.n	8019d48 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8019cfe:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8019d02:	2907      	cmp	r1, #7
 8019d04:	d816      	bhi.n	8019d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8019d06:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8019d0a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8019d0e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8019d12:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8019d16:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8019d1a:	1c4a      	adds	r2, r1, #1
 8019d1c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8019d20:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8019d24:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8019d28:	f8a2 a002 	strh.w	sl, [r2, #2]
 8019d2c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019d30:	f8a2 c006 	strh.w	ip, [r2, #6]
 8019d34:	3301      	adds	r3, #1
 8019d36:	b29b      	uxth	r3, r3
 8019d38:	e7df      	b.n	8019cfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8019d3a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d1cf      	bne.n	8019ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8019d42:	b01b      	add	sp, #108	; 0x6c
 8019d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d48:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8019d4c:	42b3      	cmp	r3, r6
 8019d4e:	d90c      	bls.n	8019d6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8019d50:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019d54:	6822      	ldr	r2, [r4, #0]
 8019d56:	3601      	adds	r6, #1
 8019d58:	4620      	mov	r0, r4
 8019d5a:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8019d5c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8019d60:	b2b6      	uxth	r6, r6
 8019d62:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8019d66:	47b8      	blx	r7
 8019d68:	e7ee      	b.n	8019d48 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8019d6a:	4a9a      	ldr	r2, [pc, #616]	; (8019fd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8019d6c:	6813      	ldr	r3, [r2, #0]
 8019d6e:	4691      	mov	r9, r2
 8019d70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019d74:	2b01      	cmp	r3, #1
 8019d76:	f040 80e0 	bne.w	8019f3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8019d7a:	8829      	ldrh	r1, [r5, #0]
 8019d7c:	2600      	movs	r6, #0
 8019d7e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019d82:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8019d86:	33ae      	adds	r3, #174	; 0xae
 8019d88:	428f      	cmp	r7, r1
 8019d8a:	f103 0308 	add.w	r3, r3, #8
 8019d8e:	dd0a      	ble.n	8019da6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8019d90:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8019d94:	3101      	adds	r1, #1
 8019d96:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8019d9a:	4402      	add	r2, r0
 8019d9c:	b212      	sxth	r2, r2
 8019d9e:	4296      	cmp	r6, r2
 8019da0:	bfb8      	it	lt
 8019da2:	4616      	movlt	r6, r2
 8019da4:	e7f0      	b.n	8019d88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8019da6:	4b8c      	ldr	r3, [pc, #560]	; (8019fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8019da8:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8019fd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8019dac:	881b      	ldrh	r3, [r3, #0]
 8019dae:	2b0f      	cmp	r3, #15
 8019db0:	bf8c      	ite	hi
 8019db2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8019db6:	f04f 0b01 	movls.w	fp, #1
 8019dba:	2300      	movs	r3, #0
 8019dbc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019dc0:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8019dc4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8019dc8:	4b82      	ldr	r3, [pc, #520]	; (8019fd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8019dca:	4438      	add	r0, r7
 8019dcc:	b207      	sxth	r7, r0
 8019dce:	6818      	ldr	r0, [r3, #0]
 8019dd0:	42b7      	cmp	r7, r6
 8019dd2:	6803      	ldr	r3, [r0, #0]
 8019dd4:	f280 8083 	bge.w	8019ede <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8019dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019ddc:	4798      	blx	r3
 8019dde:	eb07 030b 	add.w	r3, r7, fp
 8019de2:	4298      	cmp	r0, r3
 8019de4:	da07      	bge.n	8019df6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8019de6:	42b0      	cmp	r0, r6
 8019de8:	da05      	bge.n	8019df6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8019dea:	4287      	cmp	r7, r0
 8019dec:	dd6c      	ble.n	8019ec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8019dee:	2f00      	cmp	r7, #0
 8019df0:	dd6a      	ble.n	8019ec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8019df2:	4630      	mov	r0, r6
 8019df4:	e004      	b.n	8019e00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8019df6:	4287      	cmp	r7, r0
 8019df8:	dcfb      	bgt.n	8019df2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8019dfa:	42b0      	cmp	r0, r6
 8019dfc:	bfa8      	it	ge
 8019dfe:	4630      	movge	r0, r6
 8019e00:	4b76      	ldr	r3, [pc, #472]	; (8019fdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8019e02:	1bc0      	subs	r0, r0, r7
 8019e04:	2200      	movs	r2, #0
 8019e06:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e0e:	882f      	ldrh	r7, [r5, #0]
 8019e10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019e14:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019e18:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019e1c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019e20:	42bb      	cmp	r3, r7
 8019e22:	d9cd      	bls.n	8019dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8019e24:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019e28:	ab07      	add	r3, sp, #28
 8019e2a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019e2e:	6851      	ldr	r1, [r2, #4]
 8019e30:	c303      	stmia	r3!, {r0, r1}
 8019e32:	a905      	add	r1, sp, #20
 8019e34:	a807      	add	r0, sp, #28
 8019e36:	f7ff f9ae 	bl	8019196 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019e3a:	2800      	cmp	r0, #0
 8019e3c:	d04c      	beq.n	8019ed8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8019e3e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8019e42:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8019e46:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8019e4a:	4686      	mov	lr, r0
 8019e4c:	4290      	cmp	r0, r2
 8019e4e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8019e52:	4450      	add	r0, sl
 8019e54:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8019e58:	bfb8      	it	lt
 8019e5a:	4696      	movlt	lr, r2
 8019e5c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019e60:	4452      	add	r2, sl
 8019e62:	b280      	uxth	r0, r0
 8019e64:	4299      	cmp	r1, r3
 8019e66:	468c      	mov	ip, r1
 8019e68:	b292      	uxth	r2, r2
 8019e6a:	9302      	str	r3, [sp, #8]
 8019e6c:	bfb8      	it	lt
 8019e6e:	469c      	movlt	ip, r3
 8019e70:	b203      	sxth	r3, r0
 8019e72:	fa0f fa82 	sxth.w	sl, r2
 8019e76:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019e7a:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019e7e:	4553      	cmp	r3, sl
 8019e80:	bfb8      	it	lt
 8019e82:	4602      	movlt	r2, r0
 8019e84:	9b02      	ldr	r3, [sp, #8]
 8019e86:	eba2 020e 	sub.w	r2, r2, lr
 8019e8a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019e8e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019e92:	4411      	add	r1, r2
 8019e94:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019e98:	4413      	add	r3, r2
 8019e9a:	b289      	uxth	r1, r1
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	b208      	sxth	r0, r1
 8019ea0:	b21a      	sxth	r2, r3
 8019ea2:	4290      	cmp	r0, r2
 8019ea4:	bfb8      	it	lt
 8019ea6:	460b      	movlt	r3, r1
 8019ea8:	eba3 030c 	sub.w	r3, r3, ip
 8019eac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019eb0:	a807      	add	r0, sp, #28
 8019eb2:	f7fc fbe4 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019eb6:	b920      	cbnz	r0, 8019ec2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8019eb8:	6823      	ldr	r3, [r4, #0]
 8019eba:	a907      	add	r1, sp, #28
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ec0:	4798      	blx	r3
 8019ec2:	3701      	adds	r7, #1
 8019ec4:	b2bf      	uxth	r7, r7
 8019ec6:	e7a9      	b.n	8019e1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8019ec8:	f8d9 0000 	ldr.w	r0, [r9]
 8019ecc:	2101      	movs	r1, #1
 8019ece:	6803      	ldr	r3, [r0, #0]
 8019ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019ed4:	4798      	blx	r3
 8019ed6:	e773      	b.n	8019dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8019ed8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019edc:	e7e8      	b.n	8019eb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8019ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ee0:	4798      	blx	r3
 8019ee2:	4b3f      	ldr	r3, [pc, #252]	; (8019fe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8019ee4:	781b      	ldrb	r3, [r3, #0]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f43f af2b 	beq.w	8019d42 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8019eec:	2300      	movs	r3, #0
 8019eee:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8019ef2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8019ef6:	882b      	ldrh	r3, [r5, #0]
 8019ef8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8019efc:	42ab      	cmp	r3, r5
 8019efe:	f4bf af20 	bcs.w	8019d42 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8019f02:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8019f06:	2907      	cmp	r1, #7
 8019f08:	d814      	bhi.n	8019f34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8019f0a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8019f0e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8019f12:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8019f16:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8019f1a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8019f1e:	1c4a      	adds	r2, r1, #1
 8019f20:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8019f24:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019f28:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8019f2c:	f8a2 c002 	strh.w	ip, [r2, #2]
 8019f30:	8097      	strh	r7, [r2, #4]
 8019f32:	80d6      	strh	r6, [r2, #6]
 8019f34:	3301      	adds	r3, #1
 8019f36:	b29b      	uxth	r3, r3
 8019f38:	e7e0      	b.n	8019efc <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8019f3a:	2b02      	cmp	r3, #2
 8019f3c:	f040 8133 	bne.w	801a1a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8019f40:	4b28      	ldr	r3, [pc, #160]	; (8019fe4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8019f42:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 8019f46:	781b      	ldrb	r3, [r3, #0]
 8019f48:	2b01      	cmp	r3, #1
 8019f4a:	f000 8098 	beq.w	801a07e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8019f4e:	882a      	ldrh	r2, [r5, #0]
 8019f50:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8019f54:	3201      	adds	r2, #1
 8019f56:	b292      	uxth	r2, r2
 8019f58:	2900      	cmp	r1, #0
 8019f5a:	d0c2      	beq.n	8019ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019f5c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 8019f60:	4694      	mov	ip, r2
 8019f62:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8019f66:	f04f 0900 	mov.w	r9, #0
 8019f6a:	441e      	add	r6, r3
 8019f6c:	b236      	sxth	r6, r6
 8019f6e:	fa1f f38c 	uxth.w	r3, ip
 8019f72:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8019f76:	4299      	cmp	r1, r3
 8019f78:	f240 80be 	bls.w	801a0f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8019f7c:	4427      	add	r7, r4
 8019f7e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8019f82:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8019f86:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 8019f8a:	4283      	cmp	r3, r0
 8019f8c:	f340 80a0 	ble.w	801a0d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8019f90:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 8019f94:	46e1      	mov	r9, ip
 8019f96:	4406      	add	r6, r0
 8019f98:	b236      	sxth	r6, r6
 8019f9a:	429e      	cmp	r6, r3
 8019f9c:	bfa8      	it	ge
 8019f9e:	461e      	movge	r6, r3
 8019fa0:	f10c 0c01 	add.w	ip, ip, #1
 8019fa4:	e7e3      	b.n	8019f6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8019fa6:	d10a      	bne.n	8019fbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8019fa8:	4562      	cmp	r2, ip
 8019faa:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8019fae:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 8019fb2:	bfb8      	it	lt
 8019fb4:	4662      	movlt	r2, ip
 8019fb6:	4288      	cmp	r0, r1
 8019fb8:	bfb8      	it	lt
 8019fba:	461f      	movlt	r7, r3
 8019fbc:	e086      	b.n	801a0cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8019fbe:	428a      	cmp	r2, r1
 8019fc0:	bfb8      	it	lt
 8019fc2:	460a      	movlt	r2, r1
 8019fc4:	e082      	b.n	801a0cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8019fc6:	bf00      	nop
 8019fc8:	20015070 	.word	0x20015070
 8019fcc:	2001507c 	.word	0x2001507c
 8019fd0:	20000044 	.word	0x20000044
 8019fd4:	20015038 	.word	0x20015038
 8019fd8:	2001502e 	.word	0x2001502e
 8019fdc:	2001502c 	.word	0x2001502c
 8019fe0:	20015036 	.word	0x20015036
 8019fe4:	20015030 	.word	0x20015030
 8019fe8:	19a1      	adds	r1, r4, r6
 8019fea:	ab07      	add	r3, sp, #28
 8019fec:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8019ff0:	6849      	ldr	r1, [r1, #4]
 8019ff2:	c303      	stmia	r3!, {r0, r1}
 8019ff4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019ff8:	a807      	add	r0, sp, #28
 8019ffa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019ffe:	2b13      	cmp	r3, #19
 801a000:	440b      	add	r3, r1
 801a002:	bfd8      	it	le
 801a004:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801a008:	1a9b      	subs	r3, r3, r2
 801a00a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a00e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a012:	f7ff f807 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a016:	a807      	add	r0, sp, #28
 801a018:	f7fc fb31 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a01c:	bb78      	cbnz	r0, 801a07e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a01e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a022:	4426      	add	r6, r4
 801a024:	f8d9 0000 	ldr.w	r0, [r9]
 801a028:	f1bc 0f14 	cmp.w	ip, #20
 801a02c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a030:	f8d0 e000 	ldr.w	lr, [r0]
 801a034:	bfa8      	it	ge
 801a036:	f04f 0c14 	movge.w	ip, #20
 801a03a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a03e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a042:	fa1f fc8c 	uxth.w	ip, ip
 801a046:	f8cd c000 	str.w	ip, [sp]
 801a04a:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801a04e:	47d8      	blx	fp
 801a050:	4683      	mov	fp, r0
 801a052:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a056:	a807      	add	r0, sp, #28
 801a058:	f7fe ffca 	bl	8018ff0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a05c:	6823      	ldr	r3, [r4, #0]
 801a05e:	4620      	mov	r0, r4
 801a060:	a907      	add	r1, sp, #28
 801a062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a064:	4798      	blx	r3
 801a066:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801a06a:	eba0 000b 	sub.w	r0, r0, fp
 801a06e:	b200      	sxth	r0, r0
 801a070:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801a074:	b918      	cbnz	r0, 801a07e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a076:	b2b9      	uxth	r1, r7
 801a078:	4650      	mov	r0, sl
 801a07a:	f7ff fa7b 	bl	8019574 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a07e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801a082:	f1bb 0f00 	cmp.w	fp, #0
 801a086:	f43f af2c 	beq.w	8019ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a08a:	882b      	ldrh	r3, [r5, #0]
 801a08c:	2700      	movs	r7, #0
 801a08e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801a092:	3301      	adds	r3, #1
 801a094:	b29b      	uxth	r3, r3
 801a096:	b299      	uxth	r1, r3
 801a098:	00fe      	lsls	r6, r7, #3
 801a09a:	458b      	cmp	fp, r1
 801a09c:	d9a4      	bls.n	8019fe8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801a09e:	4426      	add	r6, r4
 801a0a0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801a0a4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801a0a8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801a0ac:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 801a0b0:	4408      	add	r0, r1
 801a0b2:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801a0b6:	4461      	add	r1, ip
 801a0b8:	b200      	sxth	r0, r0
 801a0ba:	b209      	sxth	r1, r1
 801a0bc:	4288      	cmp	r0, r1
 801a0be:	f6bf af72 	bge.w	8019fa6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801a0c2:	4584      	cmp	ip, r0
 801a0c4:	4662      	mov	r2, ip
 801a0c6:	461f      	mov	r7, r3
 801a0c8:	bfb8      	it	lt
 801a0ca:	4602      	movlt	r2, r0
 801a0cc:	3301      	adds	r3, #1
 801a0ce:	e7e2      	b.n	801a096 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801a0d0:	d10e      	bne.n	801a0f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801a0d2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801a0d6:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801a0da:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801a0de:	4473      	add	r3, lr
 801a0e0:	b21b      	sxth	r3, r3
 801a0e2:	429e      	cmp	r6, r3
 801a0e4:	bfa8      	it	ge
 801a0e6:	461e      	movge	r6, r3
 801a0e8:	4287      	cmp	r7, r0
 801a0ea:	bfb8      	it	lt
 801a0ec:	46e1      	movlt	r9, ip
 801a0ee:	e757      	b.n	8019fa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a0f0:	4286      	cmp	r6, r0
 801a0f2:	bfa8      	it	ge
 801a0f4:	4606      	movge	r6, r0
 801a0f6:	e753      	b.n	8019fa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a0f8:	eb0a 0007 	add.w	r0, sl, r7
 801a0fc:	4427      	add	r7, r4
 801a0fe:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801a102:	f1bb 0f13 	cmp.w	fp, #19
 801a106:	bfdc      	itt	le
 801a108:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 801a10c:	445e      	addle	r6, fp
 801a10e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a112:	bfd8      	it	le
 801a114:	b236      	sxthle	r6, r6
 801a116:	f7fc fab2 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a11a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a11e:	2800      	cmp	r0, #0
 801a120:	f47f af1a 	bne.w	8019f58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801a124:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801a128:	fa1f fb8b 	uxth.w	fp, fp
 801a12c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a130:	1ab6      	subs	r6, r6, r2
 801a132:	4829      	ldr	r0, [pc, #164]	; (801a1d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801a134:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801a138:	2e14      	cmp	r6, #20
 801a13a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801a13e:	6800      	ldr	r0, [r0, #0]
 801a140:	bfa8      	it	ge
 801a142:	2614      	movge	r6, #20
 801a144:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a148:	f8ad 201e 	strh.w	r2, [sp, #30]
 801a14c:	b289      	uxth	r1, r1
 801a14e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a152:	b2b6      	uxth	r6, r6
 801a154:	f8d0 c000 	ldr.w	ip, [r0]
 801a158:	b292      	uxth	r2, r2
 801a15a:	455e      	cmp	r6, fp
 801a15c:	bf94      	ite	ls
 801a15e:	9600      	strls	r6, [sp, #0]
 801a160:	f8cd b000 	strhi.w	fp, [sp]
 801a164:	b29b      	uxth	r3, r3
 801a166:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 801a16a:	47b0      	blx	r6
 801a16c:	6823      	ldr	r3, [r4, #0]
 801a16e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a172:	a907      	add	r1, sp, #28
 801a174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a176:	4620      	mov	r0, r4
 801a178:	4798      	blx	r3
 801a17a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801a17e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801a182:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801a186:	1a5b      	subs	r3, r3, r1
 801a188:	440a      	add	r2, r1
 801a18a:	b21b      	sxth	r3, r3
 801a18c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801a190:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801a194:	2b00      	cmp	r3, #0
 801a196:	f47f aeda 	bne.w	8019f4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a19a:	fa1f f189 	uxth.w	r1, r9
 801a19e:	4650      	mov	r0, sl
 801a1a0:	f7ff f9e8 	bl	8019574 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a1a4:	e6d3      	b.n	8019f4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a1a6:	882e      	ldrh	r6, [r5, #0]
 801a1a8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801a1ac:	42b3      	cmp	r3, r6
 801a1ae:	f67f ae98 	bls.w	8019ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a1b2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801a1b6:	ab07      	add	r3, sp, #28
 801a1b8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a1bc:	6851      	ldr	r1, [r2, #4]
 801a1be:	c303      	stmia	r3!, {r0, r1}
 801a1c0:	a807      	add	r0, sp, #28
 801a1c2:	f7fc fa5c 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a1c6:	b920      	cbnz	r0, 801a1d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801a1c8:	6823      	ldr	r3, [r4, #0]
 801a1ca:	a907      	add	r1, sp, #28
 801a1cc:	4620      	mov	r0, r4
 801a1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a1d0:	4798      	blx	r3
 801a1d2:	3601      	adds	r6, #1
 801a1d4:	b2b6      	uxth	r6, r6
 801a1d6:	e7e7      	b.n	801a1a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801a1d8:	20015038 	.word	0x20015038

0801a1dc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a1dc:	4b03      	ldr	r3, [pc, #12]	; (801a1ec <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a1de:	2200      	movs	r2, #0
 801a1e0:	801a      	strh	r2, [r3, #0]
 801a1e2:	805a      	strh	r2, [r3, #2]
 801a1e4:	809a      	strh	r2, [r3, #4]
 801a1e6:	80da      	strh	r2, [r3, #6]
 801a1e8:	4770      	bx	lr
 801a1ea:	bf00      	nop
 801a1ec:	2001507c 	.word	0x2001507c

0801a1f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f4:	b09d      	sub	sp, #116	; 0x74
 801a1f6:	4606      	mov	r6, r0
 801a1f8:	4614      	mov	r4, r2
 801a1fa:	468a      	mov	sl, r1
 801a1fc:	a803      	add	r0, sp, #12
 801a1fe:	461d      	mov	r5, r3
 801a200:	f000 fd7a 	bl	801acf8 <_ZN8touchgfx12TextProviderC1Ev>
 801a204:	6833      	ldr	r3, [r6, #0]
 801a206:	4630      	mov	r0, r6
 801a208:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801a20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a20e:	4798      	blx	r3
 801a210:	6833      	ldr	r3, [r6, #0]
 801a212:	4607      	mov	r7, r0
 801a214:	4630      	mov	r0, r6
 801a216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a218:	4798      	blx	r3
 801a21a:	462a      	mov	r2, r5
 801a21c:	2500      	movs	r5, #0
 801a21e:	4621      	mov	r1, r4
 801a220:	9000      	str	r0, [sp, #0]
 801a222:	463b      	mov	r3, r7
 801a224:	462c      	mov	r4, r5
 801a226:	46a9      	mov	r9, r5
 801a228:	46a8      	mov	r8, r5
 801a22a:	a803      	add	r0, sp, #12
 801a22c:	f000 fdb7 	bl	801ad9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a230:	2300      	movs	r3, #0
 801a232:	9302      	str	r3, [sp, #8]
 801a234:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a238:	429c      	cmp	r4, r3
 801a23a:	d002      	beq.n	801a242 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a23c:	455c      	cmp	r4, fp
 801a23e:	bf18      	it	ne
 801a240:	4625      	movne	r5, r4
 801a242:	ab02      	add	r3, sp, #8
 801a244:	4632      	mov	r2, r6
 801a246:	4651      	mov	r1, sl
 801a248:	a803      	add	r0, sp, #12
 801a24a:	f001 f89d 	bl	801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a24e:	4604      	mov	r4, r0
 801a250:	b108      	cbz	r0, 801a256 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a252:	280a      	cmp	r0, #10
 801a254:	d10a      	bne.n	801a26c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a256:	45c1      	cmp	r9, r8
 801a258:	bf38      	it	cc
 801a25a:	46c1      	movcc	r9, r8
 801a25c:	f04f 0800 	mov.w	r8, #0
 801a260:	2c00      	cmp	r4, #0
 801a262:	d1e5      	bne.n	801a230 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a264:	4648      	mov	r0, r9
 801a266:	b01d      	add	sp, #116	; 0x74
 801a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a26c:	9a02      	ldr	r2, [sp, #8]
 801a26e:	2a00      	cmp	r2, #0
 801a270:	d0de      	beq.n	801a230 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a272:	7b57      	ldrb	r7, [r2, #13]
 801a274:	4629      	mov	r1, r5
 801a276:	6833      	ldr	r3, [r6, #0]
 801a278:	007f      	lsls	r7, r7, #1
 801a27a:	8894      	ldrh	r4, [r2, #4]
 801a27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a27e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a282:	7a97      	ldrb	r7, [r2, #10]
 801a284:	4307      	orrs	r7, r0
 801a286:	4630      	mov	r0, r6
 801a288:	4798      	blx	r3
 801a28a:	4438      	add	r0, r7
 801a28c:	4480      	add	r8, r0
 801a28e:	fa1f f888 	uxth.w	r8, r8
 801a292:	e7e5      	b.n	801a260 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a294 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a294:	b508      	push	{r3, lr}
 801a296:	6803      	ldr	r3, [r0, #0]
 801a298:	68db      	ldr	r3, [r3, #12]
 801a29a:	4798      	blx	r3
 801a29c:	b128      	cbz	r0, 801a2aa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a29e:	7b43      	ldrb	r3, [r0, #13]
 801a2a0:	7a80      	ldrb	r0, [r0, #10]
 801a2a2:	005b      	lsls	r3, r3, #1
 801a2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a2a8:	4318      	orrs	r0, r3
 801a2aa:	bd08      	pop	{r3, pc}

0801a2ac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a2ac:	b40e      	push	{r1, r2, r3}
 801a2ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2b0:	b09e      	sub	sp, #120	; 0x78
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	ab23      	add	r3, sp, #140	; 0x8c
 801a2b6:	a805      	add	r0, sp, #20
 801a2b8:	f853 4b04 	ldr.w	r4, [r3], #4
 801a2bc:	9303      	str	r3, [sp, #12]
 801a2be:	f000 fd1b 	bl	801acf8 <_ZN8touchgfx12TextProviderC1Ev>
 801a2c2:	682b      	ldr	r3, [r5, #0]
 801a2c4:	4628      	mov	r0, r5
 801a2c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2c8:	4798      	blx	r3
 801a2ca:	682b      	ldr	r3, [r5, #0]
 801a2cc:	4606      	mov	r6, r0
 801a2ce:	4628      	mov	r0, r5
 801a2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a2d2:	4798      	blx	r3
 801a2d4:	4633      	mov	r3, r6
 801a2d6:	4621      	mov	r1, r4
 801a2d8:	ae1e      	add	r6, sp, #120	; 0x78
 801a2da:	2400      	movs	r4, #0
 801a2dc:	9000      	str	r0, [sp, #0]
 801a2de:	9a03      	ldr	r2, [sp, #12]
 801a2e0:	a805      	add	r0, sp, #20
 801a2e2:	f000 fd5c 	bl	801ad9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a2e6:	f846 4d68 	str.w	r4, [r6, #-104]!
 801a2ea:	462a      	mov	r2, r5
 801a2ec:	4633      	mov	r3, r6
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	a805      	add	r0, sp, #20
 801a2f2:	f001 f849 	bl	801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a2f6:	b300      	cbz	r0, 801a33a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a2f8:	280a      	cmp	r0, #10
 801a2fa:	d01a      	beq.n	801a332 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a2fc:	9f04      	ldr	r7, [sp, #16]
 801a2fe:	b1c7      	cbz	r7, 801a332 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a300:	7b78      	ldrb	r0, [r7, #13]
 801a302:	7a3b      	ldrb	r3, [r7, #8]
 801a304:	00c1      	lsls	r1, r0, #3
 801a306:	88ea      	ldrh	r2, [r5, #6]
 801a308:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a30c:	4319      	orrs	r1, r3
 801a30e:	0643      	lsls	r3, r0, #25
 801a310:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a314:	bf48      	it	mi
 801a316:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801a31a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a31e:	bf48      	it	mi
 801a320:	b219      	sxthmi	r1, r3
 801a322:	79fb      	ldrb	r3, [r7, #7]
 801a324:	4303      	orrs	r3, r0
 801a326:	4413      	add	r3, r2
 801a328:	1a5b      	subs	r3, r3, r1
 801a32a:	b21b      	sxth	r3, r3
 801a32c:	429c      	cmp	r4, r3
 801a32e:	bfb8      	it	lt
 801a330:	461c      	movlt	r4, r3
 801a332:	4633      	mov	r3, r6
 801a334:	462a      	mov	r2, r5
 801a336:	2100      	movs	r1, #0
 801a338:	e7da      	b.n	801a2f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a33a:	b2a0      	uxth	r0, r4
 801a33c:	b01e      	add	sp, #120	; 0x78
 801a33e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a342:	b003      	add	sp, #12
 801a344:	4770      	bx	lr

0801a346 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801a346:	7a43      	ldrb	r3, [r0, #9]
 801a348:	8880      	ldrh	r0, [r0, #4]
 801a34a:	4418      	add	r0, r3
 801a34c:	b280      	uxth	r0, r0
 801a34e:	4770      	bx	lr

0801a350 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801a350:	6803      	ldr	r3, [r0, #0]
 801a352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a354:	4718      	bx	r3

0801a356 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a356:	b40e      	push	{r1, r2, r3}
 801a358:	b570      	push	{r4, r5, r6, lr}
 801a35a:	b09d      	sub	sp, #116	; 0x74
 801a35c:	4604      	mov	r4, r0
 801a35e:	ab21      	add	r3, sp, #132	; 0x84
 801a360:	a803      	add	r0, sp, #12
 801a362:	f853 5b04 	ldr.w	r5, [r3], #4
 801a366:	9302      	str	r3, [sp, #8]
 801a368:	f000 fcc6 	bl	801acf8 <_ZN8touchgfx12TextProviderC1Ev>
 801a36c:	6823      	ldr	r3, [r4, #0]
 801a36e:	4620      	mov	r0, r4
 801a370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a372:	4798      	blx	r3
 801a374:	6823      	ldr	r3, [r4, #0]
 801a376:	4606      	mov	r6, r0
 801a378:	4620      	mov	r0, r4
 801a37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a37c:	2401      	movs	r4, #1
 801a37e:	4798      	blx	r3
 801a380:	4633      	mov	r3, r6
 801a382:	9000      	str	r0, [sp, #0]
 801a384:	4629      	mov	r1, r5
 801a386:	9a02      	ldr	r2, [sp, #8]
 801a388:	a803      	add	r0, sp, #12
 801a38a:	f000 fd08 	bl	801ad9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a38e:	a803      	add	r0, sp, #12
 801a390:	f001 f8c6 	bl	801b520 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a394:	b2a3      	uxth	r3, r4
 801a396:	b138      	cbz	r0, 801a3a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801a398:	280a      	cmp	r0, #10
 801a39a:	a803      	add	r0, sp, #12
 801a39c:	bf04      	itt	eq
 801a39e:	3301      	addeq	r3, #1
 801a3a0:	b21c      	sxtheq	r4, r3
 801a3a2:	f001 f8bd 	bl	801b520 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a3a6:	e7f5      	b.n	801a394 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	b01d      	add	sp, #116	; 0x74
 801a3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3b0:	b003      	add	sp, #12
 801a3b2:	4770      	bx	lr

0801a3b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a3b4:	b40e      	push	{r1, r2, r3}
 801a3b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3b8:	b09e      	sub	sp, #120	; 0x78
 801a3ba:	4604      	mov	r4, r0
 801a3bc:	ab23      	add	r3, sp, #140	; 0x8c
 801a3be:	a805      	add	r0, sp, #20
 801a3c0:	f853 5b04 	ldr.w	r5, [r3], #4
 801a3c4:	9303      	str	r3, [sp, #12]
 801a3c6:	f000 fc97 	bl	801acf8 <_ZN8touchgfx12TextProviderC1Ev>
 801a3ca:	6823      	ldr	r3, [r4, #0]
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a3d0:	4798      	blx	r3
 801a3d2:	6823      	ldr	r3, [r4, #0]
 801a3d4:	4606      	mov	r6, r0
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a3da:	4798      	blx	r3
 801a3dc:	4633      	mov	r3, r6
 801a3de:	4629      	mov	r1, r5
 801a3e0:	9000      	str	r0, [sp, #0]
 801a3e2:	9a03      	ldr	r2, [sp, #12]
 801a3e4:	a805      	add	r0, sp, #20
 801a3e6:	f000 fcda 	bl	801ad9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a3ea:	ad1e      	add	r5, sp, #120	; 0x78
 801a3ec:	2100      	movs	r1, #0
 801a3ee:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801a3f2:	4622      	mov	r2, r4
 801a3f4:	a805      	add	r0, sp, #20
 801a3f6:	f845 1d68 	str.w	r1, [r5, #-104]!
 801a3fa:	462b      	mov	r3, r5
 801a3fc:	f000 ffc4 	bl	801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a400:	b1d8      	cbz	r0, 801a43a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801a402:	280a      	cmp	r0, #10
 801a404:	d012      	beq.n	801a42c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801a406:	9804      	ldr	r0, [sp, #16]
 801a408:	b180      	cbz	r0, 801a42c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801a40a:	7b47      	ldrb	r7, [r0, #13]
 801a40c:	88e2      	ldrh	r2, [r4, #6]
 801a40e:	00fb      	lsls	r3, r7, #3
 801a410:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a414:	7a03      	ldrb	r3, [r0, #8]
 801a416:	430b      	orrs	r3, r1
 801a418:	0679      	lsls	r1, r7, #25
 801a41a:	bf44      	itt	mi
 801a41c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a420:	b21b      	sxthmi	r3, r3
 801a422:	1ad3      	subs	r3, r2, r3
 801a424:	b21b      	sxth	r3, r3
 801a426:	429e      	cmp	r6, r3
 801a428:	bfa8      	it	ge
 801a42a:	461e      	movge	r6, r3
 801a42c:	462b      	mov	r3, r5
 801a42e:	4622      	mov	r2, r4
 801a430:	2100      	movs	r1, #0
 801a432:	a805      	add	r0, sp, #20
 801a434:	f000 ffa8 	bl	801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a438:	e7e2      	b.n	801a400 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801a43a:	4630      	mov	r0, r6
 801a43c:	b01e      	add	sp, #120	; 0x78
 801a43e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a442:	b003      	add	sp, #12
 801a444:	4770      	bx	lr

0801a446 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a446:	b513      	push	{r0, r1, r4, lr}
 801a448:	6803      	ldr	r3, [r0, #0]
 801a44a:	2400      	movs	r4, #0
 801a44c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a450:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a454:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a458:	4669      	mov	r1, sp
 801a45a:	691b      	ldr	r3, [r3, #16]
 801a45c:	9400      	str	r4, [sp, #0]
 801a45e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a462:	4798      	blx	r3
 801a464:	b002      	add	sp, #8
 801a466:	bd10      	pop	{r4, pc}

0801a468 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a468:	b538      	push	{r3, r4, r5, lr}
 801a46a:	680b      	ldr	r3, [r1, #0]
 801a46c:	460c      	mov	r4, r1
 801a46e:	4605      	mov	r5, r0
 801a470:	68db      	ldr	r3, [r3, #12]
 801a472:	4798      	blx	r3
 801a474:	6823      	ldr	r3, [r4, #0]
 801a476:	4620      	mov	r0, r4
 801a478:	4629      	mov	r1, r5
 801a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a47c:	4798      	blx	r3
 801a47e:	4628      	mov	r0, r5
 801a480:	bd38      	pop	{r3, r4, r5, pc}

0801a482 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a482:	b410      	push	{r4}
 801a484:	880a      	ldrh	r2, [r1, #0]
 801a486:	8884      	ldrh	r4, [r0, #4]
 801a488:	4422      	add	r2, r4
 801a48a:	800a      	strh	r2, [r1, #0]
 801a48c:	884a      	ldrh	r2, [r1, #2]
 801a48e:	88c4      	ldrh	r4, [r0, #6]
 801a490:	4422      	add	r2, r4
 801a492:	804a      	strh	r2, [r1, #2]
 801a494:	6940      	ldr	r0, [r0, #20]
 801a496:	b120      	cbz	r0, 801a4a2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a498:	6803      	ldr	r3, [r0, #0]
 801a49a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a0:	4718      	bx	r3
 801a4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a4a6:	4770      	bx	lr

0801a4a8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a4a8:	b570      	push	{r4, r5, r6, lr}
 801a4aa:	8882      	ldrh	r2, [r0, #4]
 801a4ac:	460c      	mov	r4, r1
 801a4ae:	880b      	ldrh	r3, [r1, #0]
 801a4b0:	4605      	mov	r5, r0
 801a4b2:	4413      	add	r3, r2
 801a4b4:	800b      	strh	r3, [r1, #0]
 801a4b6:	884b      	ldrh	r3, [r1, #2]
 801a4b8:	88c2      	ldrh	r2, [r0, #6]
 801a4ba:	4413      	add	r3, r2
 801a4bc:	804b      	strh	r3, [r1, #2]
 801a4be:	1d01      	adds	r1, r0, #4
 801a4c0:	4620      	mov	r0, r4
 801a4c2:	f7fc f899 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801a4c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	dd0b      	ble.n	801a4e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a4ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	dd07      	ble.n	801a4e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a4d6:	6968      	ldr	r0, [r5, #20]
 801a4d8:	b128      	cbz	r0, 801a4e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a4da:	6803      	ldr	r3, [r0, #0]
 801a4dc:	4621      	mov	r1, r4
 801a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4e4:	4718      	bx	r3
 801a4e6:	bd70      	pop	{r4, r5, r6, pc}

0801a4e8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a4e8:	b570      	push	{r4, r5, r6, lr}
 801a4ea:	8882      	ldrh	r2, [r0, #4]
 801a4ec:	460c      	mov	r4, r1
 801a4ee:	880b      	ldrh	r3, [r1, #0]
 801a4f0:	4605      	mov	r5, r0
 801a4f2:	4413      	add	r3, r2
 801a4f4:	800b      	strh	r3, [r1, #0]
 801a4f6:	884b      	ldrh	r3, [r1, #2]
 801a4f8:	88c2      	ldrh	r2, [r0, #6]
 801a4fa:	4413      	add	r3, r2
 801a4fc:	804b      	strh	r3, [r1, #2]
 801a4fe:	1d01      	adds	r1, r0, #4
 801a500:	4620      	mov	r0, r4
 801a502:	f7fc f879 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801a506:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	dd19      	ble.n	801a542 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a50e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a512:	2b00      	cmp	r3, #0
 801a514:	dd15      	ble.n	801a542 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a516:	6968      	ldr	r0, [r5, #20]
 801a518:	b128      	cbz	r0, 801a526 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801a51a:	6803      	ldr	r3, [r0, #0]
 801a51c:	4621      	mov	r1, r4
 801a51e:	691b      	ldr	r3, [r3, #16]
 801a520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a524:	4718      	bx	r3
 801a526:	4b07      	ldr	r3, [pc, #28]	; (801a544 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	3304      	adds	r3, #4
 801a52c:	429d      	cmp	r5, r3
 801a52e:	d108      	bne.n	801a542 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a530:	f7fe ff10 	bl	8019354 <_ZN8touchgfx11Application11getInstanceEv>
 801a534:	6803      	ldr	r3, [r0, #0]
 801a536:	6821      	ldr	r1, [r4, #0]
 801a538:	6862      	ldr	r2, [r4, #4]
 801a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a53c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a540:	4718      	bx	r3
 801a542:	bd70      	pop	{r4, r5, r6, pc}
 801a544:	20015074 	.word	0x20015074

0801a548 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a548:	b570      	push	{r4, r5, r6, lr}
 801a54a:	4604      	mov	r4, r0
 801a54c:	4616      	mov	r6, r2
 801a54e:	460d      	mov	r5, r1
 801a550:	b901      	cbnz	r1, 801a554 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a552:	b192      	cbz	r2, 801a57a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801a554:	6823      	ldr	r3, [r4, #0]
 801a556:	4620      	mov	r0, r4
 801a558:	699b      	ldr	r3, [r3, #24]
 801a55a:	4798      	blx	r3
 801a55c:	88e2      	ldrh	r2, [r4, #6]
 801a55e:	88a1      	ldrh	r1, [r4, #4]
 801a560:	4620      	mov	r0, r4
 801a562:	4432      	add	r2, r6
 801a564:	4429      	add	r1, r5
 801a566:	b212      	sxth	r2, r2
 801a568:	b209      	sxth	r1, r1
 801a56a:	f7e9 f927 	bl	80037bc <_ZN8touchgfx8Drawable5setXYEss>
 801a56e:	6823      	ldr	r3, [r4, #0]
 801a570:	4620      	mov	r0, r4
 801a572:	699b      	ldr	r3, [r3, #24]
 801a574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a578:	4718      	bx	r3
 801a57a:	bd70      	pop	{r4, r5, r6, pc}

0801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a57c:	b510      	push	{r4, lr}
 801a57e:	2300      	movs	r3, #0
 801a580:	4604      	mov	r4, r0
 801a582:	4608      	mov	r0, r1
 801a584:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a588:	8023      	strh	r3, [r4, #0]
 801a58a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a58e:	8063      	strh	r3, [r4, #2]
 801a590:	6803      	ldr	r3, [r0, #0]
 801a592:	80a1      	strh	r1, [r4, #4]
 801a594:	4621      	mov	r1, r4
 801a596:	80e2      	strh	r2, [r4, #6]
 801a598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a59a:	4798      	blx	r3
 801a59c:	4620      	mov	r0, r4
 801a59e:	bd10      	pop	{r4, pc}

0801a5a0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801a5a0:	b530      	push	{r4, r5, lr}
 801a5a2:	8083      	strh	r3, [r0, #4]
 801a5a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a5a8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801a5ac:	80c3      	strh	r3, [r0, #6]
 801a5ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801a5b2:	6141      	str	r1, [r0, #20]
 801a5b4:	7203      	strb	r3, [r0, #8]
 801a5b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a5ba:	8302      	strh	r2, [r0, #24]
 801a5bc:	7243      	strb	r3, [r0, #9]
 801a5be:	7a83      	ldrb	r3, [r0, #10]
 801a5c0:	f365 0306 	bfi	r3, r5, #0, #7
 801a5c4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801a5c8:	f365 13c7 	bfi	r3, r5, #7, #1
 801a5cc:	7283      	strb	r3, [r0, #10]
 801a5ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801a5d2:	72c3      	strb	r3, [r0, #11]
 801a5d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801a5d8:	7303      	strb	r3, [r0, #12]
 801a5da:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a5de:	81c3      	strh	r3, [r0, #14]
 801a5e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801a5e4:	8203      	strh	r3, [r0, #16]
 801a5e6:	4b01      	ldr	r3, [pc, #4]	; (801a5ec <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801a5e8:	6003      	str	r3, [r0, #0]
 801a5ea:	bd30      	pop	{r4, r5, pc}
 801a5ec:	0802eda0 	.word	0x0802eda0

0801a5f0 <_ZNK8touchgfx9ConstFont4findEt>:
 801a5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5f2:	6944      	ldr	r4, [r0, #20]
 801a5f4:	b3bc      	cbz	r4, 801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a5f6:	88a3      	ldrh	r3, [r4, #4]
 801a5f8:	8b02      	ldrh	r2, [r0, #24]
 801a5fa:	1acb      	subs	r3, r1, r3
 801a5fc:	f102 32ff 	add.w	r2, r2, #4294967295
 801a600:	d431      	bmi.n	801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a602:	4293      	cmp	r3, r2
 801a604:	dd0c      	ble.n	801a620 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a606:	230e      	movs	r3, #14
 801a608:	fb03 4302 	mla	r3, r3, r2, r4
 801a60c:	889b      	ldrh	r3, [r3, #4]
 801a60e:	1a5b      	subs	r3, r3, r1
 801a610:	1ad3      	subs	r3, r2, r3
 801a612:	429a      	cmp	r2, r3
 801a614:	db27      	blt.n	801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a616:	2b00      	cmp	r3, #0
 801a618:	bfbc      	itt	lt
 801a61a:	2302      	movlt	r3, #2
 801a61c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a620:	2500      	movs	r5, #0
 801a622:	260e      	movs	r6, #14
 801a624:	4295      	cmp	r5, r2
 801a626:	dc1e      	bgt.n	801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a628:	fb06 4003 	mla	r0, r6, r3, r4
 801a62c:	8887      	ldrh	r7, [r0, #4]
 801a62e:	42b9      	cmp	r1, r7
 801a630:	d01a      	beq.n	801a668 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a632:	d20d      	bcs.n	801a650 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a634:	1e5a      	subs	r2, r3, #1
 801a636:	4295      	cmp	r5, r2
 801a638:	dc15      	bgt.n	801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a63a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a63e:	1a5b      	subs	r3, r3, r1
 801a640:	1ad3      	subs	r3, r2, r3
 801a642:	429a      	cmp	r2, r3
 801a644:	db0f      	blt.n	801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a646:	429d      	cmp	r5, r3
 801a648:	ddec      	ble.n	801a624 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a64a:	1953      	adds	r3, r2, r5
 801a64c:	105b      	asrs	r3, r3, #1
 801a64e:	e7e9      	b.n	801a624 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a650:	1c5d      	adds	r5, r3, #1
 801a652:	42aa      	cmp	r2, r5
 801a654:	db07      	blt.n	801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a656:	8a43      	ldrh	r3, [r0, #18]
 801a658:	1acb      	subs	r3, r1, r3
 801a65a:	442b      	add	r3, r5
 801a65c:	429d      	cmp	r5, r3
 801a65e:	dc02      	bgt.n	801a666 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a660:	429a      	cmp	r2, r3
 801a662:	dadf      	bge.n	801a624 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a664:	e7f1      	b.n	801a64a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a666:	2000      	movs	r0, #0
 801a668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a66a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a66c:	4604      	mov	r4, r0
 801a66e:	4617      	mov	r7, r2
 801a670:	461e      	mov	r6, r3
 801a672:	b911      	cbnz	r1, 801a67a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a674:	2500      	movs	r5, #0
 801a676:	4628      	mov	r0, r5
 801a678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a67a:	290a      	cmp	r1, #10
 801a67c:	d0fa      	beq.n	801a674 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a67e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a682:	4291      	cmp	r1, r2
 801a684:	d0f6      	beq.n	801a674 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a686:	f242 020b 	movw	r2, #8203	; 0x200b
 801a68a:	4291      	cmp	r1, r2
 801a68c:	d0f2      	beq.n	801a674 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a68e:	f7ff ffaf 	bl	801a5f0 <_ZNK8touchgfx9ConstFont4findEt>
 801a692:	4605      	mov	r5, r0
 801a694:	b950      	cbnz	r0, 801a6ac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a696:	6823      	ldr	r3, [r4, #0]
 801a698:	4620      	mov	r0, r4
 801a69a:	691b      	ldr	r3, [r3, #16]
 801a69c:	4798      	blx	r3
 801a69e:	4601      	mov	r1, r0
 801a6a0:	4620      	mov	r0, r4
 801a6a2:	f7ff ffa5 	bl	801a5f0 <_ZNK8touchgfx9ConstFont4findEt>
 801a6a6:	4605      	mov	r5, r0
 801a6a8:	2800      	cmp	r0, #0
 801a6aa:	d0e3      	beq.n	801a674 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a6ac:	6823      	ldr	r3, [r4, #0]
 801a6ae:	4629      	mov	r1, r5
 801a6b0:	4620      	mov	r0, r4
 801a6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6b4:	4798      	blx	r3
 801a6b6:	6038      	str	r0, [r7, #0]
 801a6b8:	6823      	ldr	r3, [r4, #0]
 801a6ba:	4620      	mov	r0, r4
 801a6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6be:	4798      	blx	r3
 801a6c0:	7030      	strb	r0, [r6, #0]
 801a6c2:	e7d8      	b.n	801a676 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a6c4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801a6c4:	2000      	movs	r0, #0
 801a6c6:	4770      	bx	lr

0801a6c8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801a6c8:	2001      	movs	r0, #1
 801a6ca:	4770      	bx	lr

0801a6cc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801a6cc:	2002      	movs	r0, #2
 801a6ce:	4770      	bx	lr

0801a6d0 <_ZN8touchgfx6ScreenD1Ev>:
 801a6d0:	4770      	bx	lr

0801a6d2 <_ZN8touchgfx12GestureEventD1Ev>:
 801a6d2:	4770      	bx	lr

0801a6d4 <_ZN8touchgfx9DragEventD1Ev>:
 801a6d4:	4770      	bx	lr

0801a6d6 <_ZN8touchgfx10ClickEventD1Ev>:
 801a6d6:	4770      	bx	lr

0801a6d8 <_ZN8touchgfx10ClickEventD0Ev>:
 801a6d8:	b510      	push	{r4, lr}
 801a6da:	4604      	mov	r4, r0
 801a6dc:	210c      	movs	r1, #12
 801a6de:	f00e ff73 	bl	80295c8 <_ZdlPvj>
 801a6e2:	4620      	mov	r0, r4
 801a6e4:	bd10      	pop	{r4, pc}

0801a6e6 <_ZN8touchgfx9DragEventD0Ev>:
 801a6e6:	b510      	push	{r4, lr}
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	2110      	movs	r1, #16
 801a6ec:	f00e ff6c 	bl	80295c8 <_ZdlPvj>
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	bd10      	pop	{r4, pc}

0801a6f4 <_ZN8touchgfx12GestureEventD0Ev>:
 801a6f4:	b510      	push	{r4, lr}
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	210c      	movs	r1, #12
 801a6fa:	f00e ff65 	bl	80295c8 <_ZdlPvj>
 801a6fe:	4620      	mov	r0, r4
 801a700:	bd10      	pop	{r4, pc}

0801a702 <_ZN8touchgfx6ScreenD0Ev>:
 801a702:	b510      	push	{r4, lr}
 801a704:	4604      	mov	r4, r0
 801a706:	213c      	movs	r1, #60	; 0x3c
 801a708:	f00e ff5e 	bl	80295c8 <_ZdlPvj>
 801a70c:	4620      	mov	r0, r4
 801a70e:	bd10      	pop	{r4, pc}

0801a710 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a710:	b530      	push	{r4, r5, lr}
 801a712:	460d      	mov	r5, r1
 801a714:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a716:	b087      	sub	sp, #28
 801a718:	4604      	mov	r4, r0
 801a71a:	b301      	cbz	r1, 801a75e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a71c:	a801      	add	r0, sp, #4
 801a71e:	f7ff ff2d 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a722:	892a      	ldrh	r2, [r5, #8]
 801a724:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a728:	7928      	ldrb	r0, [r5, #4]
 801a72a:	1ad2      	subs	r2, r2, r3
 801a72c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a72e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a732:	441a      	add	r2, r3
 801a734:	896b      	ldrh	r3, [r5, #10]
 801a736:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a73a:	f88d 0010 	strb.w	r0, [sp, #16]
 801a73e:	1b5b      	subs	r3, r3, r5
 801a740:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a742:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a744:	442b      	add	r3, r5
 801a746:	4d07      	ldr	r5, [pc, #28]	; (801a764 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a748:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a74c:	a903      	add	r1, sp, #12
 801a74e:	9503      	str	r5, [sp, #12]
 801a750:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a754:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a758:	6803      	ldr	r3, [r0, #0]
 801a75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a75c:	4798      	blx	r3
 801a75e:	b007      	add	sp, #28
 801a760:	bd30      	pop	{r4, r5, pc}
 801a762:	bf00      	nop
 801a764:	0802ee28 	.word	0x0802ee28

0801a768 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a76c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a76e:	b08a      	sub	sp, #40	; 0x28
 801a770:	4604      	mov	r4, r0
 801a772:	460d      	mov	r5, r1
 801a774:	b113      	cbz	r3, 801a77c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a776:	790b      	ldrb	r3, [r1, #4]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d044      	beq.n	801a806 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a77c:	f104 0804 	add.w	r8, r4, #4
 801a780:	a803      	add	r0, sp, #12
 801a782:	4641      	mov	r1, r8
 801a784:	f7ff fefa 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a788:	792b      	ldrb	r3, [r5, #4]
 801a78a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a78e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a792:	b983      	cbnz	r3, 801a7b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a794:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801a798:	892a      	ldrh	r2, [r5, #8]
 801a79a:	88e9      	ldrh	r1, [r5, #6]
 801a79c:	4640      	mov	r0, r8
 801a79e:	1b92      	subs	r2, r2, r6
 801a7a0:	9301      	str	r3, [sp, #4]
 801a7a2:	1bc9      	subs	r1, r1, r7
 801a7a4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801a7a8:	b212      	sxth	r2, r2
 801a7aa:	9300      	str	r3, [sp, #0]
 801a7ac:	b209      	sxth	r1, r1
 801a7ae:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a7b2:	f7fb fe3f 	bl	8016434 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a7b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a7b8:	b329      	cbz	r1, 801a806 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a7ba:	a805      	add	r0, sp, #20
 801a7bc:	f7ff fede 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a7c0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a7c4:	792b      	ldrb	r3, [r5, #4]
 801a7c6:	a907      	add	r1, sp, #28
 801a7c8:	1abf      	subs	r7, r7, r2
 801a7ca:	88ea      	ldrh	r2, [r5, #6]
 801a7cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a7ce:	4417      	add	r7, r2
 801a7d0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a7d2:	f88d 3020 	strb.w	r3, [sp, #32]
 801a7d6:	4417      	add	r7, r2
 801a7d8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a7dc:	1ab6      	subs	r6, r6, r2
 801a7de:	892a      	ldrh	r2, [r5, #8]
 801a7e0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a7e4:	4416      	add	r6, r2
 801a7e6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a7e8:	4416      	add	r6, r2
 801a7ea:	4a08      	ldr	r2, [pc, #32]	; (801a80c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a7ec:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801a7f0:	2600      	movs	r6, #0
 801a7f2:	9207      	str	r2, [sp, #28]
 801a7f4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801a7f8:	6803      	ldr	r3, [r0, #0]
 801a7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a7fc:	4798      	blx	r3
 801a7fe:	792b      	ldrb	r3, [r5, #4]
 801a800:	b10b      	cbz	r3, 801a806 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a802:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a806:	b00a      	add	sp, #40	; 0x28
 801a808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a80c:	0802ee00 	.word	0x0802ee00

0801a810 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a814:	460c      	mov	r4, r1
 801a816:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a818:	b088      	sub	sp, #32
 801a81a:	4605      	mov	r5, r0
 801a81c:	2900      	cmp	r1, #0
 801a81e:	d06d      	beq.n	801a8fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a820:	4668      	mov	r0, sp
 801a822:	f7ff feab 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a826:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801a828:	88e3      	ldrh	r3, [r4, #6]
 801a82a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a82e:	440b      	add	r3, r1
 801a830:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a834:	b21b      	sxth	r3, r3
 801a836:	4543      	cmp	r3, r8
 801a838:	db31      	blt.n	801a89e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a83a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a83e:	44c4      	add	ip, r8
 801a840:	fa0f fc8c 	sxth.w	ip, ip
 801a844:	4563      	cmp	r3, ip
 801a846:	da2a      	bge.n	801a89e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a848:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801a84a:	8926      	ldrh	r6, [r4, #8]
 801a84c:	4416      	add	r6, r2
 801a84e:	b236      	sxth	r6, r6
 801a850:	42be      	cmp	r6, r7
 801a852:	db24      	blt.n	801a89e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a854:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a858:	4438      	add	r0, r7
 801a85a:	b200      	sxth	r0, r0
 801a85c:	4286      	cmp	r6, r0
 801a85e:	da1e      	bge.n	801a89e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a860:	8963      	ldrh	r3, [r4, #10]
 801a862:	4419      	add	r1, r3
 801a864:	b209      	sxth	r1, r1
 801a866:	4541      	cmp	r1, r8
 801a868:	db08      	blt.n	801a87c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a86a:	4561      	cmp	r1, ip
 801a86c:	da06      	bge.n	801a87c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a86e:	89a3      	ldrh	r3, [r4, #12]
 801a870:	441a      	add	r2, r3
 801a872:	b212      	sxth	r2, r2
 801a874:	42ba      	cmp	r2, r7
 801a876:	db01      	blt.n	801a87c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a878:	4282      	cmp	r2, r0
 801a87a:	db10      	blt.n	801a89e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a87c:	4b21      	ldr	r3, [pc, #132]	; (801a904 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a87e:	a904      	add	r1, sp, #16
 801a880:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a882:	9304      	str	r3, [sp, #16]
 801a884:	2302      	movs	r3, #2
 801a886:	f88d 3014 	strb.w	r3, [sp, #20]
 801a88a:	2300      	movs	r3, #0
 801a88c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a890:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a894:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a898:	6803      	ldr	r3, [r0, #0]
 801a89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a89c:	4798      	blx	r3
 801a89e:	1d29      	adds	r1, r5, #4
 801a8a0:	a802      	add	r0, sp, #8
 801a8a2:	f7ff fe6b 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a8a6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a8aa:	88e0      	ldrh	r0, [r4, #6]
 801a8ac:	eba3 0808 	sub.w	r8, r3, r8
 801a8b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a8b4:	7921      	ldrb	r1, [r4, #4]
 801a8b6:	fa1f f888 	uxth.w	r8, r8
 801a8ba:	1bdf      	subs	r7, r3, r7
 801a8bc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a8c0:	b2bb      	uxth	r3, r7
 801a8c2:	4440      	add	r0, r8
 801a8c4:	8922      	ldrh	r2, [r4, #8]
 801a8c6:	8967      	ldrh	r7, [r4, #10]
 801a8c8:	4460      	add	r0, ip
 801a8ca:	89a4      	ldrh	r4, [r4, #12]
 801a8cc:	441a      	add	r2, r3
 801a8ce:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a8d0:	44b8      	add	r8, r7
 801a8d2:	4423      	add	r3, r4
 801a8d4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a8d8:	4432      	add	r2, r6
 801a8da:	44e0      	add	r8, ip
 801a8dc:	4433      	add	r3, r6
 801a8de:	4c0a      	ldr	r4, [pc, #40]	; (801a908 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a8e0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a8e2:	f88d 1014 	strb.w	r1, [sp, #20]
 801a8e6:	a904      	add	r1, sp, #16
 801a8e8:	9404      	str	r4, [sp, #16]
 801a8ea:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a8ee:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a8f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a8f6:	6803      	ldr	r3, [r0, #0]
 801a8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a8fa:	4798      	blx	r3
 801a8fc:	b008      	add	sp, #32
 801a8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a902:	bf00      	nop
 801a904:	0802ee00 	.word	0x0802ee00
 801a908:	0802ee14 	.word	0x0802ee14

0801a90c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a90e:	4604      	mov	r4, r0
 801a910:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a914:	3201      	adds	r2, #1
 801a916:	d112      	bne.n	801a93e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a918:	2500      	movs	r5, #0
 801a91a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a91e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a922:	6803      	ldr	r3, [r0, #0]
 801a924:	9500      	str	r5, [sp, #0]
 801a926:	466d      	mov	r5, sp
 801a928:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a92c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a930:	4629      	mov	r1, r5
 801a932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a934:	4798      	blx	r3
 801a936:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a93a:	e884 0003 	stmia.w	r4, {r0, r1}
 801a93e:	4620      	mov	r0, r4
 801a940:	b003      	add	sp, #12
 801a942:	bd30      	pop	{r4, r5, pc}

0801a944 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a944:	b513      	push	{r0, r1, r4, lr}
 801a946:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a94a:	4604      	mov	r4, r0
 801a94c:	3301      	adds	r3, #1
 801a94e:	d109      	bne.n	801a964 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a950:	4601      	mov	r1, r0
 801a952:	4668      	mov	r0, sp
 801a954:	f7ff fe12 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a958:	f8bd 3000 	ldrh.w	r3, [sp]
 801a95c:	8423      	strh	r3, [r4, #32]
 801a95e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a962:	8463      	strh	r3, [r4, #34]	; 0x22
 801a964:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a968:	b002      	add	sp, #8
 801a96a:	bd10      	pop	{r4, pc}

0801a96c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a96c:	b513      	push	{r0, r1, r4, lr}
 801a96e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a972:	4604      	mov	r4, r0
 801a974:	3301      	adds	r3, #1
 801a976:	d109      	bne.n	801a98c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a978:	4601      	mov	r1, r0
 801a97a:	4668      	mov	r0, sp
 801a97c:	f7ff fdfe 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a980:	f8bd 3000 	ldrh.w	r3, [sp]
 801a984:	8423      	strh	r3, [r4, #32]
 801a986:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a98a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a98c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a990:	b002      	add	sp, #8
 801a992:	bd10      	pop	{r4, pc}

0801a994 <_ZN8touchgfx6ScreenC1Ev>:
 801a994:	b570      	push	{r4, r5, r6, lr}
 801a996:	4b17      	ldr	r3, [pc, #92]	; (801a9f4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a998:	4605      	mov	r5, r0
 801a99a:	4a17      	ldr	r2, [pc, #92]	; (801a9f8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a99c:	2101      	movs	r1, #1
 801a99e:	f845 3b04 	str.w	r3, [r5], #4
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	6042      	str	r2, [r0, #4]
 801a9a6:	4604      	mov	r4, r0
 801a9a8:	8103      	strh	r3, [r0, #8]
 801a9aa:	8143      	strh	r3, [r0, #10]
 801a9ac:	8183      	strh	r3, [r0, #12]
 801a9ae:	81c3      	strh	r3, [r0, #14]
 801a9b0:	8203      	strh	r3, [r0, #16]
 801a9b2:	8243      	strh	r3, [r0, #18]
 801a9b4:	8283      	strh	r3, [r0, #20]
 801a9b6:	82c3      	strh	r3, [r0, #22]
 801a9b8:	6203      	str	r3, [r0, #32]
 801a9ba:	8483      	strh	r3, [r0, #36]	; 0x24
 801a9bc:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a9be:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a9c2:	6343      	str	r3, [r0, #52]	; 0x34
 801a9c4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a9c8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a9cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a9d0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a9d4:	4b09      	ldr	r3, [pc, #36]	; (801a9fc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a9dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801a9de:	4a08      	ldr	r2, [pc, #32]	; (801aa00 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a9e0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a9e4:	4798      	blx	r3
 801a9e6:	6863      	ldr	r3, [r4, #4]
 801a9e8:	4628      	mov	r0, r5
 801a9ea:	4631      	mov	r1, r6
 801a9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9ee:	4798      	blx	r3
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	bd70      	pop	{r4, r5, r6, pc}
 801a9f4:	0802ee3c 	.word	0x0802ee3c
 801a9f8:	0802ebb0 	.word	0x0802ebb0
 801a9fc:	2001502e 	.word	0x2001502e
 801aa00:	2001502c 	.word	0x2001502c

0801aa04 <_ZN8touchgfx6Screen4drawEv>:
 801aa04:	4b09      	ldr	r3, [pc, #36]	; (801aa2c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801aa06:	b507      	push	{r0, r1, r2, lr}
 801aa08:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa0c:	2100      	movs	r1, #0
 801aa0e:	4b08      	ldr	r3, [pc, #32]	; (801aa30 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801aa10:	9100      	str	r1, [sp, #0]
 801aa12:	4669      	mov	r1, sp
 801aa14:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa18:	f8ad 2004 	strh.w	r2, [sp, #4]
 801aa1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801aa20:	6803      	ldr	r3, [r0, #0]
 801aa22:	689b      	ldr	r3, [r3, #8]
 801aa24:	4798      	blx	r3
 801aa26:	b003      	add	sp, #12
 801aa28:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa2c:	2001502c 	.word	0x2001502c
 801aa30:	2001502e 	.word	0x2001502e

0801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa38:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801aa3c:	b089      	sub	sp, #36	; 0x24
 801aa3e:	4680      	mov	r8, r0
 801aa40:	460c      	mov	r4, r1
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	4615      	mov	r5, r2
 801aa46:	dd0e      	ble.n	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa48:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	dd0a      	ble.n	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa50:	4628      	mov	r0, r5
 801aa52:	f7ff ff5b 	bl	801a90c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aa56:	4621      	mov	r1, r4
 801aa58:	f7fe fb9d 	bl	8019196 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801aa5c:	69eb      	ldr	r3, [r5, #28]
 801aa5e:	b928      	cbnz	r0, 801aa6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801aa60:	461d      	mov	r5, r3
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d1f4      	bne.n	801aa50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801aa66:	b009      	add	sp, #36	; 0x24
 801aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa6c:	ae04      	add	r6, sp, #16
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	f000 80b5 	beq.w	801abde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801aa74:	682b      	ldr	r3, [r5, #0]
 801aa76:	4629      	mov	r1, r5
 801aa78:	a802      	add	r0, sp, #8
 801aa7a:	68db      	ldr	r3, [r3, #12]
 801aa7c:	4798      	blx	r3
 801aa7e:	4628      	mov	r0, r5
 801aa80:	f7ff ff60 	bl	801a944 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801aa84:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801aa88:	4407      	add	r7, r0
 801aa8a:	4628      	mov	r0, r5
 801aa8c:	f7ff ff6e 	bl	801a96c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801aa90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801aa94:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801aa98:	b23f      	sxth	r7, r7
 801aa9a:	4418      	add	r0, r3
 801aa9c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801aaa0:	4621      	mov	r1, r4
 801aaa2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801aaa6:	f8ad 0012 	strh.w	r0, [sp, #18]
 801aaaa:	4630      	mov	r0, r6
 801aaac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aab0:	f8ad 7010 	strh.w	r7, [sp, #16]
 801aab4:	f7fb fda0 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801aab8:	4628      	mov	r0, r5
 801aaba:	f7ff ff27 	bl	801a90c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aabe:	ab06      	add	r3, sp, #24
 801aac0:	4602      	mov	r2, r0
 801aac2:	e896 0003 	ldmia.w	r6, {r0, r1}
 801aac6:	e883 0003 	stmia.w	r3, {r0, r1}
 801aaca:	4611      	mov	r1, r2
 801aacc:	4618      	mov	r0, r3
 801aace:	f7fb fd93 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801aad2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801aad6:	f9b4 1000 	ldrsh.w	r1, [r4]
 801aada:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801aade:	4299      	cmp	r1, r3
 801aae0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801aae4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801aae8:	d10b      	bne.n	801ab02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801aaea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aaee:	4552      	cmp	r2, sl
 801aaf0:	d107      	bne.n	801ab02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801aaf2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801aaf6:	455a      	cmp	r2, fp
 801aaf8:	d103      	bne.n	801ab02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801aafa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801aafe:	454a      	cmp	r2, r9
 801ab00:	d06d      	beq.n	801abde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ab02:	f1bb 0f00 	cmp.w	fp, #0
 801ab06:	dd65      	ble.n	801abd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801ab08:	f1b9 0f00 	cmp.w	r9, #0
 801ab0c:	dd62      	ble.n	801abd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801ab0e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ab12:	fa1f f08a 	uxth.w	r0, sl
 801ab16:	4552      	cmp	r2, sl
 801ab18:	9000      	str	r0, [sp, #0]
 801ab1a:	da12      	bge.n	801ab42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801ab1c:	9301      	str	r3, [sp, #4]
 801ab1e:	9b00      	ldr	r3, [sp, #0]
 801ab20:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ab24:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ab28:	1a9a      	subs	r2, r3, r2
 801ab2a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801ab2e:	4631      	mov	r1, r6
 801ab30:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ab34:	4640      	mov	r0, r8
 801ab36:	f8ad 2016 	strh.w	r2, [sp, #22]
 801ab3a:	69ea      	ldr	r2, [r5, #28]
 801ab3c:	f7ff ff7a 	bl	801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab40:	9b01      	ldr	r3, [sp, #4]
 801ab42:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ab46:	b29f      	uxth	r7, r3
 801ab48:	429a      	cmp	r2, r3
 801ab4a:	da0d      	bge.n	801ab68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801ab4c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ab50:	1aba      	subs	r2, r7, r2
 801ab52:	f8ad a012 	strh.w	sl, [sp, #18]
 801ab56:	4631      	mov	r1, r6
 801ab58:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ab5c:	4640      	mov	r0, r8
 801ab5e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ab62:	69ea      	ldr	r2, [r5, #28]
 801ab64:	f7ff ff66 	bl	801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab68:	8822      	ldrh	r2, [r4, #0]
 801ab6a:	445f      	add	r7, fp
 801ab6c:	88a3      	ldrh	r3, [r4, #4]
 801ab6e:	b2bf      	uxth	r7, r7
 801ab70:	4413      	add	r3, r2
 801ab72:	b23a      	sxth	r2, r7
 801ab74:	b29b      	uxth	r3, r3
 801ab76:	b219      	sxth	r1, r3
 801ab78:	4291      	cmp	r1, r2
 801ab7a:	dd0d      	ble.n	801ab98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ab7c:	1bdb      	subs	r3, r3, r7
 801ab7e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ab82:	f8ad a012 	strh.w	sl, [sp, #18]
 801ab86:	4631      	mov	r1, r6
 801ab88:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ab8c:	4640      	mov	r0, r8
 801ab8e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ab92:	69ea      	ldr	r2, [r5, #28]
 801ab94:	f7ff ff4e 	bl	801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab98:	88e2      	ldrh	r2, [r4, #6]
 801ab9a:	8863      	ldrh	r3, [r4, #2]
 801ab9c:	4413      	add	r3, r2
 801ab9e:	9a00      	ldr	r2, [sp, #0]
 801aba0:	444a      	add	r2, r9
 801aba2:	b29b      	uxth	r3, r3
 801aba4:	fa1f f982 	uxth.w	r9, r2
 801aba8:	b219      	sxth	r1, r3
 801abaa:	fa0f f289 	sxth.w	r2, r9
 801abae:	428a      	cmp	r2, r1
 801abb0:	da15      	bge.n	801abde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801abb2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801abb6:	eba3 0309 	sub.w	r3, r3, r9
 801abba:	f9b4 0000 	ldrsh.w	r0, [r4]
 801abbe:	f8ad 1014 	strh.w	r1, [sp, #20]
 801abc2:	4631      	mov	r1, r6
 801abc4:	f8ad 0010 	strh.w	r0, [sp, #16]
 801abc8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801abcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801abd0:	69ea      	ldr	r2, [r5, #28]
 801abd2:	e001      	b.n	801abd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801abd4:	69ea      	ldr	r2, [r5, #28]
 801abd6:	4621      	mov	r1, r4
 801abd8:	4640      	mov	r0, r8
 801abda:	f7ff ff2b 	bl	801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801abde:	4628      	mov	r0, r5
 801abe0:	f7ff fe94 	bl	801a90c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801abe4:	6861      	ldr	r1, [r4, #4]
 801abe6:	4602      	mov	r2, r0
 801abe8:	4633      	mov	r3, r6
 801abea:	6820      	ldr	r0, [r4, #0]
 801abec:	c303      	stmia	r3!, {r0, r1}
 801abee:	4611      	mov	r1, r2
 801abf0:	4630      	mov	r0, r6
 801abf2:	f7fb fd01 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801abf6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	f77f af33 	ble.w	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ac00:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	f77f af2e 	ble.w	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	f7ff fe9a 	bl	801a944 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ac10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ac14:	1a18      	subs	r0, r3, r0
 801ac16:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ac1a:	4628      	mov	r0, r5
 801ac1c:	f7ff fea6 	bl	801a96c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ac20:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ac24:	4631      	mov	r1, r6
 801ac26:	1a18      	subs	r0, r3, r0
 801ac28:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ac2c:	4628      	mov	r0, r5
 801ac2e:	682b      	ldr	r3, [r5, #0]
 801ac30:	689b      	ldr	r3, [r3, #8]
 801ac32:	4798      	blx	r3
 801ac34:	e717      	b.n	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801ac36 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ac36:	b570      	push	{r4, r5, r6, lr}
 801ac38:	1d06      	adds	r6, r0, #4
 801ac3a:	b086      	sub	sp, #24
 801ac3c:	460c      	mov	r4, r1
 801ac3e:	2300      	movs	r3, #0
 801ac40:	4631      	mov	r1, r6
 801ac42:	4605      	mov	r5, r0
 801ac44:	a802      	add	r0, sp, #8
 801ac46:	9301      	str	r3, [sp, #4]
 801ac48:	f7ff fc98 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ac4c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ac50:	8822      	ldrh	r2, [r4, #0]
 801ac52:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801ac56:	1ad2      	subs	r2, r2, r3
 801ac58:	8863      	ldrh	r3, [r4, #2]
 801ac5a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ac5e:	1a5b      	subs	r3, r3, r1
 801ac60:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801ac64:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ac68:	aa01      	add	r2, sp, #4
 801ac6a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ac6e:	4630      	mov	r0, r6
 801ac70:	f8ad 1016 	strh.w	r1, [sp, #22]
 801ac74:	a904      	add	r1, sp, #16
 801ac76:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ac7a:	f7fb fd95 	bl	80167a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ac7e:	9a01      	ldr	r2, [sp, #4]
 801ac80:	b11a      	cbz	r2, 801ac8a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801ac82:	4621      	mov	r1, r4
 801ac84:	4628      	mov	r0, r5
 801ac86:	f7ff fed5 	bl	801aa34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ac8a:	b006      	add	sp, #24
 801ac8c:	bd70      	pop	{r4, r5, r6, pc}

0801ac8e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ac8e:	4602      	mov	r2, r0
 801ac90:	b530      	push	{r4, r5, lr}
 801ac92:	4604      	mov	r4, r0
 801ac94:	b085      	sub	sp, #20
 801ac96:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ac9a:	460d      	mov	r5, r1
 801ac9c:	466b      	mov	r3, sp
 801ac9e:	6851      	ldr	r1, [r2, #4]
 801aca0:	c303      	stmia	r3!, {r0, r1}
 801aca2:	4629      	mov	r1, r5
 801aca4:	4668      	mov	r0, sp
 801aca6:	f7fb fca7 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801acaa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801acae:	b12b      	cbz	r3, 801acbc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801acb0:	4669      	mov	r1, sp
 801acb2:	4620      	mov	r0, r4
 801acb4:	f7ff ffbf 	bl	801ac36 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801acb8:	b005      	add	sp, #20
 801acba:	bd30      	pop	{r4, r5, pc}
 801acbc:	3404      	adds	r4, #4
 801acbe:	a802      	add	r0, sp, #8
 801acc0:	4621      	mov	r1, r4
 801acc2:	f7ff fc5b 	bl	801a57c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801acc6:	f8bd 3000 	ldrh.w	r3, [sp]
 801acca:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801acce:	4669      	mov	r1, sp
 801acd0:	4620      	mov	r0, r4
 801acd2:	1a9b      	subs	r3, r3, r2
 801acd4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801acd8:	f8ad 3000 	strh.w	r3, [sp]
 801acdc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ace0:	1a9b      	subs	r3, r3, r2
 801ace2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ace6:	f7fb fd26 	bl	8016736 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801acea:	e7e5      	b.n	801acb8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801acec <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801acec:	460b      	mov	r3, r1
 801acee:	680a      	ldr	r2, [r1, #0]
 801acf0:	1d01      	adds	r1, r0, #4
 801acf2:	6992      	ldr	r2, [r2, #24]
 801acf4:	4618      	mov	r0, r3
 801acf6:	4710      	bx	r2

0801acf8 <_ZN8touchgfx12TextProviderC1Ev>:
 801acf8:	b538      	push	{r3, r4, r5, lr}
 801acfa:	2500      	movs	r5, #0
 801acfc:	2302      	movs	r3, #2
 801acfe:	4604      	mov	r4, r0
 801ad00:	220e      	movs	r2, #14
 801ad02:	7403      	strb	r3, [r0, #16]
 801ad04:	4629      	mov	r1, r5
 801ad06:	6145      	str	r5, [r0, #20]
 801ad08:	7605      	strb	r5, [r0, #24]
 801ad0a:	83c5      	strh	r5, [r0, #30]
 801ad0c:	8405      	strh	r5, [r0, #32]
 801ad0e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ad10:	8705      	strh	r5, [r0, #56]	; 0x38
 801ad12:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801ad14:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801ad18:	e9c0 5500 	strd	r5, r5, [r0]
 801ad1c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801ad20:	304c      	adds	r0, #76	; 0x4c
 801ad22:	f00e ff39 	bl	8029b98 <memset>
 801ad26:	2301      	movs	r3, #1
 801ad28:	4620      	mov	r0, r4
 801ad2a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801ad2e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ad32:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801ad36:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801ad3a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801ad3e:	f7e8 ff03 	bl	8003b48 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ad42:	4620      	mov	r0, r4
 801ad44:	bd38      	pop	{r3, r4, r5, pc}

0801ad46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ad46:	b530      	push	{r4, r5, lr}
 801ad48:	2500      	movs	r5, #0
 801ad4a:	2401      	movs	r4, #1
 801ad4c:	6843      	ldr	r3, [r0, #4]
 801ad4e:	b913      	cbnz	r3, 801ad56 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ad50:	6803      	ldr	r3, [r0, #0]
 801ad52:	b313      	cbz	r3, 801ad9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ad54:	6043      	str	r3, [r0, #4]
 801ad56:	7e03      	ldrb	r3, [r0, #24]
 801ad58:	b143      	cbz	r3, 801ad6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ad5a:	6943      	ldr	r3, [r0, #20]
 801ad5c:	b12b      	cbz	r3, 801ad6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ad5e:	881a      	ldrh	r2, [r3, #0]
 801ad60:	b11a      	cbz	r2, 801ad6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ad62:	1c9a      	adds	r2, r3, #2
 801ad64:	6142      	str	r2, [r0, #20]
 801ad66:	8818      	ldrh	r0, [r3, #0]
 801ad68:	bd30      	pop	{r4, r5, pc}
 801ad6a:	7605      	strb	r5, [r0, #24]
 801ad6c:	6843      	ldr	r3, [r0, #4]
 801ad6e:	8819      	ldrh	r1, [r3, #0]
 801ad70:	b199      	cbz	r1, 801ad9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ad72:	1c9a      	adds	r2, r3, #2
 801ad74:	2902      	cmp	r1, #2
 801ad76:	6042      	str	r2, [r0, #4]
 801ad78:	d1f5      	bne.n	801ad66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ad7a:	7c03      	ldrb	r3, [r0, #16]
 801ad7c:	2b01      	cmp	r3, #1
 801ad7e:	d8e5      	bhi.n	801ad4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ad80:	1c5a      	adds	r2, r3, #1
 801ad82:	3302      	adds	r3, #2
 801ad84:	7402      	strb	r2, [r0, #16]
 801ad86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ad8a:	6143      	str	r3, [r0, #20]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d0dd      	beq.n	801ad4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ad90:	881b      	ldrh	r3, [r3, #0]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d0da      	beq.n	801ad4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ad96:	7604      	strb	r4, [r0, #24]
 801ad98:	e7d8      	b.n	801ad4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ad9a:	2000      	movs	r0, #0
 801ad9c:	e7e4      	b.n	801ad68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ad9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ad9e:	6001      	str	r1, [r0, #0]
 801ada0:	2100      	movs	r1, #0
 801ada2:	b430      	push	{r4, r5}
 801ada4:	6041      	str	r1, [r0, #4]
 801ada6:	6815      	ldr	r5, [r2, #0]
 801ada8:	6085      	str	r5, [r0, #8]
 801adaa:	6852      	ldr	r2, [r2, #4]
 801adac:	6443      	str	r3, [r0, #68]	; 0x44
 801adae:	9b02      	ldr	r3, [sp, #8]
 801adb0:	60c2      	str	r2, [r0, #12]
 801adb2:	7401      	strb	r1, [r0, #16]
 801adb4:	6141      	str	r1, [r0, #20]
 801adb6:	7601      	strb	r1, [r0, #24]
 801adb8:	8701      	strh	r1, [r0, #56]	; 0x38
 801adba:	8401      	strh	r1, [r0, #32]
 801adbc:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801adc0:	6483      	str	r3, [r0, #72]	; 0x48
 801adc2:	bc30      	pop	{r4, r5}
 801adc4:	f7e8 bec0 	b.w	8003b48 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801adc8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801adc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adca:	4605      	mov	r5, r0
 801adcc:	4608      	mov	r0, r1
 801adce:	b1f1      	cbz	r1, 801ae0e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801add0:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801add4:	460b      	mov	r3, r1
 801add6:	f101 0708 	add.w	r7, r1, #8
 801adda:	4622      	mov	r2, r4
 801addc:	6818      	ldr	r0, [r3, #0]
 801adde:	3308      	adds	r3, #8
 801ade0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ade4:	4626      	mov	r6, r4
 801ade6:	42bb      	cmp	r3, r7
 801ade8:	c603      	stmia	r6!, {r0, r1}
 801adea:	4634      	mov	r4, r6
 801adec:	d1f6      	bne.n	801addc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801adee:	6818      	ldr	r0, [r3, #0]
 801adf0:	6030      	str	r0, [r6, #0]
 801adf2:	4610      	mov	r0, r2
 801adf4:	889b      	ldrh	r3, [r3, #4]
 801adf6:	80b3      	strh	r3, [r6, #4]
 801adf8:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801adfc:	015b      	lsls	r3, r3, #5
 801adfe:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ae02:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801ae06:	430b      	orrs	r3, r1
 801ae08:	425b      	negs	r3, r3
 801ae0a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ae0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ae10 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ae10:	b538      	push	{r3, r4, r5, lr}
 801ae12:	460c      	mov	r4, r1
 801ae14:	6811      	ldr	r1, [r2, #0]
 801ae16:	4610      	mov	r0, r2
 801ae18:	68cd      	ldr	r5, [r1, #12]
 801ae1a:	4619      	mov	r1, r3
 801ae1c:	47a8      	blx	r5
 801ae1e:	2800      	cmp	r0, #0
 801ae20:	bf08      	it	eq
 801ae22:	4620      	moveq	r0, r4
 801ae24:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ae28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae2a:	4604      	mov	r4, r0
 801ae2c:	4615      	mov	r5, r2
 801ae2e:	4608      	mov	r0, r1
 801ae30:	b93a      	cbnz	r2, 801ae42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ae32:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ae36:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801ae3a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801ae3e:	4628      	mov	r0, r5
 801ae40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae42:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ae46:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801ae4a:	8893      	ldrh	r3, [r2, #4]
 801ae4c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ae50:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ae54:	79ee      	ldrb	r6, [r5, #7]
 801ae56:	4316      	orrs	r6, r2
 801ae58:	19da      	adds	r2, r3, r7
 801ae5a:	b291      	uxth	r1, r2
 801ae5c:	b2b7      	uxth	r7, r6
 801ae5e:	291d      	cmp	r1, #29
 801ae60:	d87b      	bhi.n	801af5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ae62:	2201      	movs	r2, #1
 801ae64:	10f6      	asrs	r6, r6, #3
 801ae66:	408a      	lsls	r2, r1
 801ae68:	4974      	ldr	r1, [pc, #464]	; (801b03c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ae6a:	420a      	tst	r2, r1
 801ae6c:	d12e      	bne.n	801aecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ae6e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801ae72:	d072      	beq.n	801af5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ae74:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801ae78:	462b      	mov	r3, r5
 801ae7a:	f105 0e08 	add.w	lr, r5, #8
 801ae7e:	4615      	mov	r5, r2
 801ae80:	6818      	ldr	r0, [r3, #0]
 801ae82:	3308      	adds	r3, #8
 801ae84:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ae88:	4694      	mov	ip, r2
 801ae8a:	4573      	cmp	r3, lr
 801ae8c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ae90:	4662      	mov	r2, ip
 801ae92:	d1f5      	bne.n	801ae80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ae94:	6818      	ldr	r0, [r3, #0]
 801ae96:	f8cc 0000 	str.w	r0, [ip]
 801ae9a:	889b      	ldrh	r3, [r3, #4]
 801ae9c:	f8ac 3004 	strh.w	r3, [ip, #4]
 801aea0:	b2b3      	uxth	r3, r6
 801aea2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801aea6:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801aeaa:	1aca      	subs	r2, r1, r3
 801aeac:	1bcf      	subs	r7, r1, r7
 801aeae:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801aeb2:	b292      	uxth	r2, r2
 801aeb4:	1afb      	subs	r3, r7, r3
 801aeb6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801aeba:	10d2      	asrs	r2, r2, #3
 801aebc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801aec0:	4302      	orrs	r2, r0
 801aec2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801aec6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801aeca:	e7b8      	b.n	801ae3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801aecc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801aece:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aed2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801aed4:	f640 6333 	movw	r3, #3635	; 0xe33
 801aed8:	4299      	cmp	r1, r3
 801aeda:	d110      	bne.n	801aefe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801aedc:	6803      	ldr	r3, [r0, #0]
 801aede:	68db      	ldr	r3, [r3, #12]
 801aee0:	4798      	blx	r3
 801aee2:	7b41      	ldrb	r1, [r0, #13]
 801aee4:	00cb      	lsls	r3, r1, #3
 801aee6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aeea:	7a03      	ldrb	r3, [r0, #8]
 801aeec:	0648      	lsls	r0, r1, #25
 801aeee:	ea43 0302 	orr.w	r3, r3, r2
 801aef2:	bf44      	itt	mi
 801aef4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aef8:	b21b      	sxthmi	r3, r3
 801aefa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801aefe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801af02:	462a      	mov	r2, r5
 801af04:	f105 0c08 	add.w	ip, r5, #8
 801af08:	443b      	add	r3, r7
 801af0a:	4433      	add	r3, r6
 801af0c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801af10:	b29b      	uxth	r3, r3
 801af12:	4635      	mov	r5, r6
 801af14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801af18:	6810      	ldr	r0, [r2, #0]
 801af1a:	3208      	adds	r2, #8
 801af1c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801af20:	4637      	mov	r7, r6
 801af22:	4562      	cmp	r2, ip
 801af24:	c703      	stmia	r7!, {r0, r1}
 801af26:	463e      	mov	r6, r7
 801af28:	d1f6      	bne.n	801af18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801af2a:	6810      	ldr	r0, [r2, #0]
 801af2c:	6038      	str	r0, [r7, #0]
 801af2e:	8892      	ldrh	r2, [r2, #4]
 801af30:	80ba      	strh	r2, [r7, #4]
 801af32:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801af36:	10db      	asrs	r3, r3, #3
 801af38:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801af3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801af40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801af44:	4313      	orrs	r3, r2
 801af46:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801af4a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801af4e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801af52:	1a9b      	subs	r3, r3, r2
 801af54:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801af58:	e771      	b.n	801ae3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801af5a:	f023 0204 	bic.w	r2, r3, #4
 801af5e:	f640 611b 	movw	r1, #3611	; 0xe1b
 801af62:	428a      	cmp	r2, r1
 801af64:	d003      	beq.n	801af6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801af66:	f640 621d 	movw	r2, #3613	; 0xe1d
 801af6a:	4293      	cmp	r3, r2
 801af6c:	d120      	bne.n	801afb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801af6e:	3b01      	subs	r3, #1
 801af70:	4602      	mov	r2, r0
 801af72:	4629      	mov	r1, r5
 801af74:	4620      	mov	r0, r4
 801af76:	b29b      	uxth	r3, r3
 801af78:	f7ff ff4a 	bl	801ae10 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801af7c:	7b41      	ldrb	r1, [r0, #13]
 801af7e:	00cb      	lsls	r3, r1, #3
 801af80:	0649      	lsls	r1, r1, #25
 801af82:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801af86:	7a03      	ldrb	r3, [r0, #8]
 801af88:	ea43 0302 	orr.w	r3, r3, r2
 801af8c:	bf44      	itt	mi
 801af8e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801af92:	b21b      	sxthmi	r3, r3
 801af94:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801af98:	7b6b      	ldrb	r3, [r5, #13]
 801af9a:	7aaa      	ldrb	r2, [r5, #10]
 801af9c:	005b      	lsls	r3, r3, #1
 801af9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801afa2:	4313      	orrs	r3, r2
 801afa4:	115a      	asrs	r2, r3, #5
 801afa6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801afaa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801afae:	e035      	b.n	801b01c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801afb0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801afb4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801afb8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801afbc:	7a2a      	ldrb	r2, [r5, #8]
 801afbe:	ea42 0201 	orr.w	r2, r2, r1
 801afc2:	f640 6109 	movw	r1, #3593	; 0xe09
 801afc6:	bf1c      	itt	ne
 801afc8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801afcc:	b212      	sxthne	r2, r2
 801afce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801afd2:	f023 0210 	bic.w	r2, r3, #16
 801afd6:	428a      	cmp	r2, r1
 801afd8:	d003      	beq.n	801afe2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801afda:	f640 6213 	movw	r2, #3603	; 0xe13
 801afde:	4293      	cmp	r3, r2
 801afe0:	d129      	bne.n	801b036 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801afe2:	7b6e      	ldrb	r6, [r5, #13]
 801afe4:	4629      	mov	r1, r5
 801afe6:	0076      	lsls	r6, r6, #1
 801afe8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801afec:	7aae      	ldrb	r6, [r5, #10]
 801afee:	4316      	orrs	r6, r2
 801aff0:	f640 6213 	movw	r2, #3603	; 0xe13
 801aff4:	4293      	cmp	r3, r2
 801aff6:	4602      	mov	r2, r0
 801aff8:	4620      	mov	r0, r4
 801affa:	bf16      	itet	ne
 801affc:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b000:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801b004:	b29b      	uxthne	r3, r3
 801b006:	f7ff ff03 	bl	801ae10 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b00a:	7b43      	ldrb	r3, [r0, #13]
 801b00c:	7a82      	ldrb	r2, [r0, #10]
 801b00e:	005b      	lsls	r3, r3, #1
 801b010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b014:	4313      	orrs	r3, r2
 801b016:	1af6      	subs	r6, r6, r3
 801b018:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801b01c:	7b69      	ldrb	r1, [r5, #13]
 801b01e:	00cb      	lsls	r3, r1, #3
 801b020:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b024:	7a2b      	ldrb	r3, [r5, #8]
 801b026:	4313      	orrs	r3, r2
 801b028:	064a      	lsls	r2, r1, #25
 801b02a:	bf44      	itt	mi
 801b02c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b030:	b21b      	sxthmi	r3, r3
 801b032:	1bdb      	subs	r3, r3, r7
 801b034:	e747      	b.n	801aec6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801b036:	2300      	movs	r3, #0
 801b038:	e7b7      	b.n	801afaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801b03a:	bf00      	nop
 801b03c:	3fc00079 	.word	0x3fc00079

0801b040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801b040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b044:	4604      	mov	r4, r0
 801b046:	b942      	cbnz	r2, 801b05a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801b048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b04c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801b050:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801b054:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801b058:	e047      	b.n	801b0ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b05a:	7b51      	ldrb	r1, [r2, #13]
 801b05c:	8893      	ldrh	r3, [r2, #4]
 801b05e:	010d      	lsls	r5, r1, #4
 801b060:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801b064:	79d5      	ldrb	r5, [r2, #7]
 801b066:	4305      	orrs	r5, r0
 801b068:	2d04      	cmp	r5, #4
 801b06a:	bfcc      	ite	gt
 801b06c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801b070:	f04f 0e01 	movle.w	lr, #1
 801b074:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801b078:	f200 80ab 	bhi.w	801b1d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801b07c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801b080:	4283      	cmp	r3, r0
 801b082:	d216      	bcs.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b084:	f240 605b 	movw	r0, #1627	; 0x65b
 801b088:	4283      	cmp	r3, r0
 801b08a:	d859      	bhi.n	801b140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801b08c:	f240 6057 	movw	r0, #1623	; 0x657
 801b090:	4283      	cmp	r3, r0
 801b092:	d20e      	bcs.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b094:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b098:	d24a      	bcs.n	801b130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801b09a:	f240 604e 	movw	r0, #1614	; 0x64e
 801b09e:	4283      	cmp	r3, r0
 801b0a0:	d207      	bcs.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b0a2:	f240 601a 	movw	r0, #1562	; 0x61a
 801b0a6:	4283      	cmp	r3, r0
 801b0a8:	d02a      	beq.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b0aa:	d821      	bhi.n	801b0f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801b0ac:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801b0b0:	d35b      	bcc.n	801b16a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b0b2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801b0b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b0ba:	f040 80d0 	bne.w	801b25e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801b0be:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801b0c2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b0c6:	f040 80ca 	bne.w	801b25e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801b0ca:	00cb      	lsls	r3, r1, #3
 801b0cc:	0649      	lsls	r1, r1, #25
 801b0ce:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b0d2:	7a13      	ldrb	r3, [r2, #8]
 801b0d4:	ea43 0300 	orr.w	r3, r3, r0
 801b0d8:	bf44      	itt	mi
 801b0da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b0de:	b21b      	sxthmi	r3, r3
 801b0e0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b0e4:	1b5d      	subs	r5, r3, r5
 801b0e6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b0ea:	4610      	mov	r0, r2
 801b0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0f0:	f240 604b 	movw	r0, #1611	; 0x64b
 801b0f4:	4283      	cmp	r3, r0
 801b0f6:	d338      	bcc.n	801b16a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b0f8:	f240 604c 	movw	r0, #1612	; 0x64c
 801b0fc:	4283      	cmp	r3, r0
 801b0fe:	d9d8      	bls.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b100:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801b104:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801b108:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b10c:	f040 80f3 	bne.w	801b2f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b110:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b114:	f040 80ef 	bne.w	801b2f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b118:	00cb      	lsls	r3, r1, #3
 801b11a:	064e      	lsls	r6, r1, #25
 801b11c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b120:	7a13      	ldrb	r3, [r2, #8]
 801b122:	ea43 0300 	orr.w	r3, r3, r0
 801b126:	bf44      	itt	mi
 801b128:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b12c:	b21b      	sxthmi	r3, r3
 801b12e:	e7d9      	b.n	801b0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801b130:	f240 6054 	movw	r0, #1620	; 0x654
 801b134:	4283      	cmp	r3, r0
 801b136:	d8e3      	bhi.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b138:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b13c:	d9e0      	bls.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b13e:	e7b8      	b.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b140:	f240 6074 	movw	r0, #1652	; 0x674
 801b144:	4283      	cmp	r3, r0
 801b146:	d0b4      	beq.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b148:	d82d      	bhi.n	801b1a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801b14a:	f240 605e 	movw	r0, #1630	; 0x65e
 801b14e:	4283      	cmp	r3, r0
 801b150:	d804      	bhi.n	801b15c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801b152:	f240 605d 	movw	r0, #1629	; 0x65d
 801b156:	4283      	cmp	r3, r0
 801b158:	d3d2      	bcc.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b15a:	e7aa      	b.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b15c:	f240 605f 	movw	r0, #1631	; 0x65f
 801b160:	4283      	cmp	r3, r0
 801b162:	d0cd      	beq.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b164:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801b168:	d0a3      	beq.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b16a:	00cb      	lsls	r3, r1, #3
 801b16c:	0649      	lsls	r1, r1, #25
 801b16e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b172:	7a13      	ldrb	r3, [r2, #8]
 801b174:	ea43 0300 	orr.w	r3, r3, r0
 801b178:	bf44      	itt	mi
 801b17a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b17e:	b21b      	sxthmi	r3, r3
 801b180:	1b5d      	subs	r5, r3, r5
 801b182:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b186:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b18a:	7b53      	ldrb	r3, [r2, #13]
 801b18c:	015b      	lsls	r3, r3, #5
 801b18e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b192:	7993      	ldrb	r3, [r2, #6]
 801b194:	430b      	orrs	r3, r1
 801b196:	2105      	movs	r1, #5
 801b198:	005b      	lsls	r3, r3, #1
 801b19a:	fb93 f3f1 	sdiv	r3, r3, r1
 801b19e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b1a2:	440b      	add	r3, r1
 801b1a4:	e756      	b.n	801b054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b1a6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801b1aa:	4283      	cmp	r3, r0
 801b1ac:	d809      	bhi.n	801b1c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801b1ae:	f240 60df 	movw	r0, #1759	; 0x6df
 801b1b2:	4283      	cmp	r3, r0
 801b1b4:	f4bf af7d 	bcs.w	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b1b8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801b1bc:	2b05      	cmp	r3, #5
 801b1be:	d8d4      	bhi.n	801b16a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b1c0:	e777      	b.n	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b1c2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801b1c6:	4283      	cmp	r3, r0
 801b1c8:	d09a      	beq.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b1ca:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801b1ce:	4283      	cmp	r3, r0
 801b1d0:	e7ca      	b.n	801b168 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b1d2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801b1d6:	d22b      	bcs.n	801b230 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801b1d8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801b1dc:	4283      	cmp	r3, r0
 801b1de:	d28f      	bcs.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b1e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b1e4:	4283      	cmp	r3, r0
 801b1e6:	d816      	bhi.n	801b216 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801b1e8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801b1ec:	4283      	cmp	r3, r0
 801b1ee:	f4bf af60 	bcs.w	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b1f2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801b1f6:	4283      	cmp	r3, r0
 801b1f8:	d80a      	bhi.n	801b210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801b1fa:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801b1fe:	4283      	cmp	r3, r0
 801b200:	f4bf af57 	bcs.w	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b204:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801b208:	4283      	cmp	r3, r0
 801b20a:	f43f af79 	beq.w	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b20e:	e7ac      	b.n	801b16a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b210:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801b214:	e7f8      	b.n	801b208 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801b216:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801b21a:	4283      	cmp	r3, r0
 801b21c:	d802      	bhi.n	801b224 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801b21e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b222:	e798      	b.n	801b156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801b224:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801b228:	4283      	cmp	r3, r0
 801b22a:	f47f af42 	bne.w	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b22e:	e767      	b.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b230:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801b234:	4283      	cmp	r3, r0
 801b236:	f43f af63 	beq.w	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b23a:	d802      	bhi.n	801b242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801b23c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801b240:	e7f2      	b.n	801b228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801b242:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801b246:	4283      	cmp	r3, r0
 801b248:	d805      	bhi.n	801b256 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801b24a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801b24e:	4283      	cmp	r3, r0
 801b250:	f4ff af2f 	bcc.w	801b0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b254:	e754      	b.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b256:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801b25a:	4283      	cmp	r3, r0
 801b25c:	e7af      	b.n	801b1be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801b25e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801b262:	4617      	mov	r7, r2
 801b264:	f102 0808 	add.w	r8, r2, #8
 801b268:	4666      	mov	r6, ip
 801b26a:	6838      	ldr	r0, [r7, #0]
 801b26c:	3708      	adds	r7, #8
 801b26e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b272:	46e6      	mov	lr, ip
 801b274:	4547      	cmp	r7, r8
 801b276:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b27a:	46f4      	mov	ip, lr
 801b27c:	d1f5      	bne.n	801b26a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801b27e:	6838      	ldr	r0, [r7, #0]
 801b280:	f8ce 0000 	str.w	r0, [lr]
 801b284:	88b9      	ldrh	r1, [r7, #4]
 801b286:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b28a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801b28e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b292:	d009      	beq.n	801b2a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801b294:	7b51      	ldrb	r1, [r2, #13]
 801b296:	7992      	ldrb	r2, [r2, #6]
 801b298:	0149      	lsls	r1, r1, #5
 801b29a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b29e:	4311      	orrs	r1, r2
 801b2a0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b2a4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801b2a8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b2ac:	b2ad      	uxth	r5, r5
 801b2ae:	d00d      	beq.n	801b2cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801b2b0:	442b      	add	r3, r5
 801b2b2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801b2b6:	b29b      	uxth	r3, r3
 801b2b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b2bc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801b2c0:	10db      	asrs	r3, r3, #3
 801b2c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b2c6:	4313      	orrs	r3, r2
 801b2c8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b2cc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801b2d0:	00cb      	lsls	r3, r1, #3
 801b2d2:	064f      	lsls	r7, r1, #25
 801b2d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b2d8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801b2dc:	ea43 0302 	orr.w	r3, r3, r2
 801b2e0:	bf44      	itt	mi
 801b2e2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b2e6:	b21b      	sxthmi	r3, r3
 801b2e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801b2ec:	1b5b      	subs	r3, r3, r5
 801b2ee:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801b2f2:	4632      	mov	r2, r6
 801b2f4:	e6f9      	b.n	801b0ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b2f6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801b2fa:	4617      	mov	r7, r2
 801b2fc:	f102 0908 	add.w	r9, r2, #8
 801b300:	4666      	mov	r6, ip
 801b302:	6838      	ldr	r0, [r7, #0]
 801b304:	3708      	adds	r7, #8
 801b306:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b30a:	46e0      	mov	r8, ip
 801b30c:	454f      	cmp	r7, r9
 801b30e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b312:	46c4      	mov	ip, r8
 801b314:	d1f5      	bne.n	801b302 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801b316:	6838      	ldr	r0, [r7, #0]
 801b318:	f8c8 0000 	str.w	r0, [r8]
 801b31c:	88b9      	ldrh	r1, [r7, #4]
 801b31e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b322:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801b326:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b32a:	d009      	beq.n	801b340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801b32c:	7b51      	ldrb	r1, [r2, #13]
 801b32e:	7992      	ldrb	r2, [r2, #6]
 801b330:	0149      	lsls	r1, r1, #5
 801b332:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b336:	4311      	orrs	r1, r2
 801b338:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b33c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801b340:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b344:	d00e      	beq.n	801b364 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801b346:	eba3 030e 	sub.w	r3, r3, lr
 801b34a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801b34e:	b29b      	uxth	r3, r3
 801b350:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b354:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801b358:	10db      	asrs	r3, r3, #3
 801b35a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b35e:	4313      	orrs	r3, r2
 801b360:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b364:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801b368:	00cb      	lsls	r3, r1, #3
 801b36a:	0648      	lsls	r0, r1, #25
 801b36c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b370:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801b374:	ea43 0302 	orr.w	r3, r3, r2
 801b378:	bf44      	itt	mi
 801b37a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b37e:	b21b      	sxthmi	r3, r3
 801b380:	1b5d      	subs	r5, r3, r5
 801b382:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b386:	e7b4      	b.n	801b2f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801b388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b38c:	461e      	mov	r6, r3
 801b38e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b390:	4604      	mov	r4, r0
 801b392:	4617      	mov	r7, r2
 801b394:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b398:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b39c:	f7e8 fb92 	bl	8003ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b3a0:	4605      	mov	r5, r0
 801b3a2:	b918      	cbnz	r0, 801b3ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801b3a4:	6030      	str	r0, [r6, #0]
 801b3a6:	4628      	mov	r0, r5
 801b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3ac:	683b      	ldr	r3, [r7, #0]
 801b3ae:	4601      	mov	r1, r0
 801b3b0:	4638      	mov	r0, r7
 801b3b2:	68db      	ldr	r3, [r3, #12]
 801b3b4:	4798      	blx	r3
 801b3b6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b3ba:	4602      	mov	r2, r0
 801b3bc:	6030      	str	r0, [r6, #0]
 801b3be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b3c2:	d213      	bcs.n	801b3ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801b3c4:	4643      	mov	r3, r8
 801b3c6:	4639      	mov	r1, r7
 801b3c8:	4620      	mov	r0, r4
 801b3ca:	f7ff fe39 	bl	801b040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b3ce:	6030      	str	r0, [r6, #0]
 801b3d0:	6833      	ldr	r3, [r6, #0]
 801b3d2:	b143      	cbz	r3, 801b3e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801b3d4:	7b5a      	ldrb	r2, [r3, #13]
 801b3d6:	7a9b      	ldrb	r3, [r3, #10]
 801b3d8:	0052      	lsls	r2, r2, #1
 801b3da:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b3de:	4313      	orrs	r3, r2
 801b3e0:	bf0c      	ite	eq
 801b3e2:	2301      	moveq	r3, #1
 801b3e4:	2300      	movne	r3, #0
 801b3e6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801b3ea:	e7dc      	b.n	801b3a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801b3ec:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b3f0:	b29b      	uxth	r3, r3
 801b3f2:	2b7f      	cmp	r3, #127	; 0x7f
 801b3f4:	d804      	bhi.n	801b400 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801b3f6:	4639      	mov	r1, r7
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f7ff fd15 	bl	801ae28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b3fe:	e7e6      	b.n	801b3ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801b400:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801b404:	2b00      	cmp	r3, #0
 801b406:	d0e3      	beq.n	801b3d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b408:	f640 1302 	movw	r3, #2306	; 0x902
 801b40c:	429d      	cmp	r5, r3
 801b40e:	d1df      	bne.n	801b3d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b410:	4601      	mov	r1, r0
 801b412:	4620      	mov	r0, r4
 801b414:	f7ff fcd8 	bl	801adc8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b418:	e7d9      	b.n	801b3ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801b41a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b41a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b41e:	461e      	mov	r6, r3
 801b420:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b422:	4604      	mov	r4, r0
 801b424:	4617      	mov	r7, r2
 801b426:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b42a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b42e:	f7e8 fb49 	bl	8003ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b432:	4605      	mov	r5, r0
 801b434:	b918      	cbnz	r0, 801b43e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801b436:	6030      	str	r0, [r6, #0]
 801b438:	4628      	mov	r0, r5
 801b43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b43e:	683b      	ldr	r3, [r7, #0]
 801b440:	4601      	mov	r1, r0
 801b442:	4638      	mov	r0, r7
 801b444:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b448:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b44c:	47c8      	blx	r9
 801b44e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b452:	4602      	mov	r2, r0
 801b454:	6030      	str	r0, [r6, #0]
 801b456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b45a:	d213      	bcs.n	801b484 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801b45c:	4643      	mov	r3, r8
 801b45e:	4639      	mov	r1, r7
 801b460:	4620      	mov	r0, r4
 801b462:	f7ff fded 	bl	801b040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b466:	6030      	str	r0, [r6, #0]
 801b468:	6833      	ldr	r3, [r6, #0]
 801b46a:	b143      	cbz	r3, 801b47e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801b46c:	7b5a      	ldrb	r2, [r3, #13]
 801b46e:	7a9b      	ldrb	r3, [r3, #10]
 801b470:	0052      	lsls	r2, r2, #1
 801b472:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b476:	4313      	orrs	r3, r2
 801b478:	bf0c      	ite	eq
 801b47a:	2301      	moveq	r3, #1
 801b47c:	2300      	movne	r3, #0
 801b47e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801b482:	e7d9      	b.n	801b438 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801b484:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b488:	b29b      	uxth	r3, r3
 801b48a:	2b7f      	cmp	r3, #127	; 0x7f
 801b48c:	d804      	bhi.n	801b498 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801b48e:	4639      	mov	r1, r7
 801b490:	4620      	mov	r0, r4
 801b492:	f7ff fcc9 	bl	801ae28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b496:	e7e6      	b.n	801b466 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801b498:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d0e3      	beq.n	801b468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b4a0:	f640 1302 	movw	r3, #2306	; 0x902
 801b4a4:	429d      	cmp	r5, r3
 801b4a6:	d1df      	bne.n	801b468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b4a8:	4601      	mov	r1, r0
 801b4aa:	4620      	mov	r0, r4
 801b4ac:	f7ff fc8c 	bl	801adc8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b4b0:	e7d9      	b.n	801b466 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801b4b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b4b2:	b510      	push	{r4, lr}
 801b4b4:	4604      	mov	r4, r0
 801b4b6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801b4ba:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b4bc:	b1e1      	cbz	r1, 801b4f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801b4be:	2b0a      	cmp	r3, #10
 801b4c0:	d02d      	beq.n	801b51e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801b4c2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801b4c4:	3901      	subs	r1, #1
 801b4c6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b4ca:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801b4cc:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801b4d0:	1c51      	adds	r1, r2, #1
 801b4d2:	b289      	uxth	r1, r1
 801b4d4:	2901      	cmp	r1, #1
 801b4d6:	bf8a      	itet	hi
 801b4d8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b4dc:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801b4de:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801b4e0:	1c5a      	adds	r2, r3, #1
 801b4e2:	8722      	strh	r2, [r4, #56]	; 0x38
 801b4e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b4e6:	4413      	add	r3, r2
 801b4e8:	b29b      	uxth	r3, r3
 801b4ea:	2b09      	cmp	r3, #9
 801b4ec:	bf88      	it	hi
 801b4ee:	3b0a      	subhi	r3, #10
 801b4f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b4f4:	8458      	strh	r0, [r3, #34]	; 0x22
 801b4f6:	e7de      	b.n	801b4b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b4f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b4fa:	2b0a      	cmp	r3, #10
 801b4fc:	d00f      	beq.n	801b51e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801b4fe:	4620      	mov	r0, r4
 801b500:	f7ff fc21 	bl	801ad46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b504:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b506:	1c5a      	adds	r2, r3, #1
 801b508:	8722      	strh	r2, [r4, #56]	; 0x38
 801b50a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b50c:	4413      	add	r3, r2
 801b50e:	b29b      	uxth	r3, r3
 801b510:	2b09      	cmp	r3, #9
 801b512:	bf88      	it	hi
 801b514:	3b0a      	subhi	r3, #10
 801b516:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b51a:	8458      	strh	r0, [r3, #34]	; 0x22
 801b51c:	e7ec      	b.n	801b4f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801b51e:	bd10      	pop	{r4, pc}

0801b520 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b520:	b538      	push	{r3, r4, r5, lr}
 801b522:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b524:	4604      	mov	r4, r0
 801b526:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801b52a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801b52c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801b52e:	3a01      	subs	r2, #1
 801b530:	8702      	strh	r2, [r0, #56]	; 0x38
 801b532:	1c5a      	adds	r2, r3, #1
 801b534:	b292      	uxth	r2, r2
 801b536:	2a09      	cmp	r2, #9
 801b538:	bf8a      	itet	hi
 801b53a:	3b09      	subhi	r3, #9
 801b53c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801b53e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801b540:	f7ff ffb7 	bl	801b4b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b544:	8c23      	ldrh	r3, [r4, #32]
 801b546:	2b01      	cmp	r3, #1
 801b548:	bf9c      	itt	ls
 801b54a:	3301      	addls	r3, #1
 801b54c:	8423      	strhls	r3, [r4, #32]
 801b54e:	8be3      	ldrh	r3, [r4, #30]
 801b550:	b90b      	cbnz	r3, 801b556 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801b552:	2302      	movs	r3, #2
 801b554:	83e3      	strh	r3, [r4, #30]
 801b556:	8be3      	ldrh	r3, [r4, #30]
 801b558:	4628      	mov	r0, r5
 801b55a:	3b01      	subs	r3, #1
 801b55c:	b29b      	uxth	r3, r3
 801b55e:	83e3      	strh	r3, [r4, #30]
 801b560:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b564:	8365      	strh	r5, [r4, #26]
 801b566:	bd38      	pop	{r3, r4, r5, pc}

0801b568 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b568:	428a      	cmp	r2, r1
 801b56a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b56e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801b570:	d932      	bls.n	801b5d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801b572:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801b574:	1a54      	subs	r4, r2, r1
 801b576:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801b57a:	19ee      	adds	r6, r5, r7
 801b57c:	fa1f fe84 	uxth.w	lr, r4
 801b580:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801b584:	3e01      	subs	r6, #1
 801b586:	b2b4      	uxth	r4, r6
 801b588:	eba4 090e 	sub.w	r9, r4, lr
 801b58c:	fa1f f989 	uxth.w	r9, r9
 801b590:	2c09      	cmp	r4, #9
 801b592:	4626      	mov	r6, r4
 801b594:	bf88      	it	hi
 801b596:	f1a4 060a 	subhi.w	r6, r4, #10
 801b59a:	f1bc 0f00 	cmp.w	ip, #0
 801b59e:	f104 34ff 	add.w	r4, r4, #4294967295
 801b5a2:	bf08      	it	eq
 801b5a4:	f04f 0c02 	moveq.w	ip, #2
 801b5a8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b5ac:	b2a4      	uxth	r4, r4
 801b5ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b5b2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801b5b6:	454c      	cmp	r4, r9
 801b5b8:	fa1f fc8c 	uxth.w	ip, ip
 801b5bc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801b5c0:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801b5c4:	d1e4      	bne.n	801b590 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801b5c6:	eba5 050e 	sub.w	r5, r5, lr
 801b5ca:	eb0e 0408 	add.w	r4, lr, r8
 801b5ce:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801b5d2:	8705      	strh	r5, [r0, #56]	; 0x38
 801b5d4:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801b5d8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801b5da:	250a      	movs	r5, #10
 801b5dc:	1a64      	subs	r4, r4, r1
 801b5de:	4439      	add	r1, r7
 801b5e0:	b289      	uxth	r1, r1
 801b5e2:	8704      	strh	r4, [r0, #56]	; 0x38
 801b5e4:	2909      	cmp	r1, #9
 801b5e6:	bf88      	it	hi
 801b5e8:	390a      	subhi	r1, #10
 801b5ea:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b5ec:	b18a      	cbz	r2, 801b612 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801b5ee:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801b5f0:	3a01      	subs	r2, #1
 801b5f2:	3101      	adds	r1, #1
 801b5f4:	b292      	uxth	r2, r2
 801b5f6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b5fa:	8701      	strh	r1, [r0, #56]	; 0x38
 801b5fc:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801b5fe:	b901      	cbnz	r1, 801b602 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801b600:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b602:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801b604:	3901      	subs	r1, #1
 801b606:	b289      	uxth	r1, r1
 801b608:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b60a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b60e:	844c      	strh	r4, [r1, #34]	; 0x22
 801b610:	e7ec      	b.n	801b5ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801b612:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b616:	f7ff bf4c 	b.w	801b4b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801b61a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b61a:	b570      	push	{r4, r5, r6, lr}
 801b61c:	2500      	movs	r5, #0
 801b61e:	4295      	cmp	r5, r2
 801b620:	d011      	beq.n	801b646 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801b622:	8bc4      	ldrh	r4, [r0, #30]
 801b624:	f831 6b02 	ldrh.w	r6, [r1], #2
 801b628:	4414      	add	r4, r2
 801b62a:	3c01      	subs	r4, #1
 801b62c:	1b64      	subs	r4, r4, r5
 801b62e:	b2a4      	uxth	r4, r4
 801b630:	2c01      	cmp	r4, #1
 801b632:	bf88      	it	hi
 801b634:	3c02      	subhi	r4, #2
 801b636:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b63a:	8b64      	ldrh	r4, [r4, #26]
 801b63c:	42b4      	cmp	r4, r6
 801b63e:	d117      	bne.n	801b670 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801b640:	3501      	adds	r5, #1
 801b642:	b2ad      	uxth	r5, r5
 801b644:	e7eb      	b.n	801b61e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801b646:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b64a:	2400      	movs	r4, #0
 801b64c:	4413      	add	r3, r2
 801b64e:	b2a2      	uxth	r2, r4
 801b650:	429a      	cmp	r2, r3
 801b652:	da0f      	bge.n	801b674 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801b654:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801b656:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b65a:	3401      	adds	r4, #1
 801b65c:	4432      	add	r2, r6
 801b65e:	b292      	uxth	r2, r2
 801b660:	2a09      	cmp	r2, #9
 801b662:	bf88      	it	hi
 801b664:	3a0a      	subhi	r2, #10
 801b666:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b66a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801b66c:	42aa      	cmp	r2, r5
 801b66e:	d0ee      	beq.n	801b64e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801b670:	2000      	movs	r0, #0
 801b672:	bd70      	pop	{r4, r5, r6, pc}
 801b674:	2001      	movs	r0, #1
 801b676:	e7fc      	b.n	801b672 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801b678 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b67c:	4605      	mov	r5, r0
 801b67e:	4616      	mov	r6, r2
 801b680:	1c8c      	adds	r4, r1, #2
 801b682:	8809      	ldrh	r1, [r1, #0]
 801b684:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b688:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b68c:	42b3      	cmp	r3, r6
 801b68e:	d124      	bne.n	801b6da <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b690:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b694:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b698:	f001 070f 	and.w	r7, r1, #15
 801b69c:	4652      	mov	r2, sl
 801b69e:	f8cd 8000 	str.w	r8, [sp]
 801b6a2:	464b      	mov	r3, r9
 801b6a4:	4621      	mov	r1, r4
 801b6a6:	4628      	mov	r0, r5
 801b6a8:	f7ff ffb7 	bl	801b61a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b6ac:	4683      	mov	fp, r0
 801b6ae:	b168      	cbz	r0, 801b6cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b6b0:	eb0a 0109 	add.w	r1, sl, r9
 801b6b4:	463a      	mov	r2, r7
 801b6b6:	4628      	mov	r0, r5
 801b6b8:	4441      	add	r1, r8
 801b6ba:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b6be:	4649      	mov	r1, r9
 801b6c0:	f7ff ff52 	bl	801b568 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b6c4:	4658      	mov	r0, fp
 801b6c6:	b003      	add	sp, #12
 801b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6cc:	eb07 010a 	add.w	r1, r7, sl
 801b6d0:	4449      	add	r1, r9
 801b6d2:	4441      	add	r1, r8
 801b6d4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b6d8:	e7d2      	b.n	801b680 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b6da:	f04f 0b00 	mov.w	fp, #0
 801b6de:	e7f1      	b.n	801b6c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b6e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b6e0:	b570      	push	{r4, r5, r6, lr}
 801b6e2:	8810      	ldrh	r0, [r2, #0]
 801b6e4:	4298      	cmp	r0, r3
 801b6e6:	d817      	bhi.n	801b718 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b6e8:	1e48      	subs	r0, r1, #1
 801b6ea:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b6ee:	4298      	cmp	r0, r3
 801b6f0:	d312      	bcc.n	801b718 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b6f2:	2400      	movs	r4, #0
 801b6f4:	428c      	cmp	r4, r1
 801b6f6:	d20f      	bcs.n	801b718 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b6f8:	1860      	adds	r0, r4, r1
 801b6fa:	1040      	asrs	r0, r0, #1
 801b6fc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b700:	0085      	lsls	r5, r0, #2
 801b702:	42b3      	cmp	r3, r6
 801b704:	d902      	bls.n	801b70c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b706:	3001      	adds	r0, #1
 801b708:	b284      	uxth	r4, r0
 801b70a:	e7f3      	b.n	801b6f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b70c:	d201      	bcs.n	801b712 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b70e:	b281      	uxth	r1, r0
 801b710:	e7f0      	b.n	801b6f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b712:	442a      	add	r2, r5
 801b714:	8850      	ldrh	r0, [r2, #2]
 801b716:	bd70      	pop	{r4, r5, r6, pc}
 801b718:	2000      	movs	r0, #0
 801b71a:	e7fc      	b.n	801b716 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b71c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b720:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801b722:	4604      	mov	r4, r0
 801b724:	260b      	movs	r6, #11
 801b726:	886f      	ldrh	r7, [r5, #2]
 801b728:	087f      	lsrs	r7, r7, #1
 801b72a:	3e01      	subs	r6, #1
 801b72c:	d013      	beq.n	801b756 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b72e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b730:	462a      	mov	r2, r5
 801b732:	4639      	mov	r1, r7
 801b734:	4620      	mov	r0, r4
 801b736:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b73a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b73e:	4643      	mov	r3, r8
 801b740:	f7ff ffce 	bl	801b6e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b744:	b138      	cbz	r0, 801b756 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b746:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b74a:	4642      	mov	r2, r8
 801b74c:	4620      	mov	r0, r4
 801b74e:	f7ff ff93 	bl	801b678 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b752:	2800      	cmp	r0, #0
 801b754:	d1e9      	bne.n	801b72a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801b75c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b75c:	b570      	push	{r4, r5, r6, lr}
 801b75e:	694a      	ldr	r2, [r1, #20]
 801b760:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b762:	684b      	ldr	r3, [r1, #4]
 801b764:	1b54      	subs	r4, r2, r5
 801b766:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b768:	f000 8106 	beq.w	801b978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b76c:	1b9b      	subs	r3, r3, r6
 801b76e:	d003      	beq.n	801b778 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b770:	4363      	muls	r3, r4
 801b772:	2210      	movs	r2, #16
 801b774:	fb93 f3f2 	sdiv	r3, r3, r2
 801b778:	680c      	ldr	r4, [r1, #0]
 801b77a:	698a      	ldr	r2, [r1, #24]
 801b77c:	1b65      	subs	r5, r4, r5
 801b77e:	f000 80fd 	beq.w	801b97c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b782:	1b92      	subs	r2, r2, r6
 801b784:	d003      	beq.n	801b78e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b786:	436a      	muls	r2, r5
 801b788:	2410      	movs	r4, #16
 801b78a:	fb92 f2f4 	sdiv	r2, r2, r4
 801b78e:	1a9b      	subs	r3, r3, r2
 801b790:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b9b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b798:	460a      	mov	r2, r1
 801b79a:	ee07 3a90 	vmov	s15, r3
 801b79e:	f100 040c 	add.w	r4, r0, #12
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b7ac:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b7b0:	eeb1 6a43 	vneg.f32	s12, s6
 801b7b4:	edd2 7a02 	vldr	s15, [r2, #8]
 801b7b8:	3214      	adds	r2, #20
 801b7ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b7be:	ece3 6a01 	vstmia	r3!, {s13}
 801b7c2:	429c      	cmp	r4, r3
 801b7c4:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b7c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b7cc:	edc3 7a02 	vstr	s15, [r3, #8]
 801b7d0:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b7d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b7d8:	edc3 7a05 	vstr	s15, [r3, #20]
 801b7dc:	d1ea      	bne.n	801b7b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b7de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b7e0:	698b      	ldr	r3, [r1, #24]
 801b7e2:	edd0 4a02 	vldr	s9, [r0, #8]
 801b7e6:	1a9b      	subs	r3, r3, r2
 801b7e8:	edd0 3a00 	vldr	s7, [r0]
 801b7ec:	edd0 6a01 	vldr	s13, [r0, #4]
 801b7f0:	ee07 3a90 	vmov	s15, r3
 801b7f4:	684b      	ldr	r3, [r1, #4]
 801b7f6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b7fa:	ed90 5a05 	vldr	s10, [r0, #20]
 801b7fe:	1a9b      	subs	r3, r3, r2
 801b800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b804:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b808:	ed90 2a03 	vldr	s4, [r0, #12]
 801b80c:	ee07 3a10 	vmov	s14, r3
 801b810:	edd0 5a04 	vldr	s11, [r0, #16]
 801b814:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b818:	ed90 1a07 	vldr	s2, [r0, #28]
 801b81c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b820:	edd0 2a06 	vldr	s5, [r0, #24]
 801b824:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b828:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b82c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b830:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b834:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b838:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b83c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b840:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b842:	694a      	ldr	r2, [r1, #20]
 801b844:	1b13      	subs	r3, r2, r4
 801b846:	ee07 3a10 	vmov	s14, r3
 801b84a:	680b      	ldr	r3, [r1, #0]
 801b84c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b850:	1b1b      	subs	r3, r3, r4
 801b852:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b856:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b85a:	ee07 3a10 	vmov	s14, r3
 801b85e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b862:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b866:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b86a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b86e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b872:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b874:	698b      	ldr	r3, [r1, #24]
 801b876:	1a9b      	subs	r3, r3, r2
 801b878:	ee06 3a90 	vmov	s13, r3
 801b87c:	684b      	ldr	r3, [r1, #4]
 801b87e:	1a9b      	subs	r3, r3, r2
 801b880:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b884:	ee07 3a10 	vmov	s14, r3
 801b888:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b88c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b890:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b894:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b898:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b89c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b8a0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b8a4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b8a6:	694a      	ldr	r2, [r1, #20]
 801b8a8:	1b13      	subs	r3, r2, r4
 801b8aa:	ee07 3a10 	vmov	s14, r3
 801b8ae:	680b      	ldr	r3, [r1, #0]
 801b8b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8b4:	1b1b      	subs	r3, r3, r4
 801b8b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b8ba:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b8be:	ee07 3a10 	vmov	s14, r3
 801b8c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b8ca:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b8ce:	edd0 5a08 	vldr	s11, [r0, #32]
 801b8d2:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b8d6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b8da:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b8de:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b8e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b8e4:	698b      	ldr	r3, [r1, #24]
 801b8e6:	1a9b      	subs	r3, r3, r2
 801b8e8:	ee07 3a10 	vmov	s14, r3
 801b8ec:	684b      	ldr	r3, [r1, #4]
 801b8ee:	1a9b      	subs	r3, r3, r2
 801b8f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8f4:	ee01 3a90 	vmov	s3, r3
 801b8f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b8fc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b900:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b904:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b908:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b90c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b910:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b914:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b916:	694a      	ldr	r2, [r1, #20]
 801b918:	1b13      	subs	r3, r2, r4
 801b91a:	ee03 3a10 	vmov	s6, r3
 801b91e:	680b      	ldr	r3, [r1, #0]
 801b920:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b924:	1b1b      	subs	r3, r3, r4
 801b926:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b92a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b92e:	ee03 3a10 	vmov	s6, r3
 801b932:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b936:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b93a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b93e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b942:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b946:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b94a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b94e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b956:	dd13      	ble.n	801b980 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b95c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b960:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b962:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b96e:	dd15      	ble.n	801b99c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b974:	6403      	str	r3, [r0, #64]	; 0x40
 801b976:	bd70      	pop	{r4, r5, r6, pc}
 801b978:	4623      	mov	r3, r4
 801b97a:	e6fd      	b.n	801b778 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b97c:	462a      	mov	r2, r5
 801b97e:	e706      	b.n	801b78e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b980:	d502      	bpl.n	801b988 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b982:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b986:	e7e9      	b.n	801b95c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b988:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b98c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b990:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b998:	dade      	bge.n	801b958 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b99a:	e7f2      	b.n	801b982 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b99c:	d502      	bpl.n	801b9a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b99e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b9a2:	e7e7      	b.n	801b974 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b9a4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b9a8:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b9ac:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9b4:	dadc      	bge.n	801b970 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b9b6:	e7f2      	b.n	801b99e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b9b8:	3d800000 	.word	0x3d800000

0801b9bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9c0:	2714      	movs	r7, #20
 801b9c2:	435f      	muls	r7, r3
 801b9c4:	eb02 0c07 	add.w	ip, r2, r7
 801b9c8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b9cc:	f115 0e0f 	adds.w	lr, r5, #15
 801b9d0:	f100 80a2 	bmi.w	801bb18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b9d4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b9d8:	9c08      	ldr	r4, [sp, #32]
 801b9da:	2614      	movs	r6, #20
 801b9dc:	f8c0 e014 	str.w	lr, [r0, #20]
 801b9e0:	4366      	muls	r6, r4
 801b9e2:	eb02 0806 	add.w	r8, r2, r6
 801b9e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b9ea:	f115 040f 	adds.w	r4, r5, #15
 801b9ee:	f100 809f 	bmi.w	801bb30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b9f2:	1124      	asrs	r4, r4, #4
 801b9f4:	eba4 040e 	sub.w	r4, r4, lr
 801b9f8:	6184      	str	r4, [r0, #24]
 801b9fa:	2c00      	cmp	r4, #0
 801b9fc:	f000 808a 	beq.w	801bb14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801ba00:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801ba04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801ba08:	5995      	ldr	r5, [r2, r6]
 801ba0a:	eba4 0809 	sub.w	r8, r4, r9
 801ba0e:	59d4      	ldr	r4, [r2, r7]
 801ba10:	eba5 0a04 	sub.w	sl, r5, r4
 801ba14:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801ba18:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801ba1c:	fb0e fe05 	mul.w	lr, lr, r5
 801ba20:	fb0a ee19 	mls	lr, sl, r9, lr
 801ba24:	fb08 e404 	mla	r4, r8, r4, lr
 801ba28:	3c01      	subs	r4, #1
 801ba2a:	19a4      	adds	r4, r4, r6
 801ba2c:	f100 808c 	bmi.w	801bb48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801ba30:	fb94 fef6 	sdiv	lr, r4, r6
 801ba34:	fb06 441e 	mls	r4, r6, lr, r4
 801ba38:	f8c0 e000 	str.w	lr, [r0]
 801ba3c:	6104      	str	r4, [r0, #16]
 801ba3e:	2d00      	cmp	r5, #0
 801ba40:	f2c0 8095 	blt.w	801bb6e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801ba44:	fb95 f4f6 	sdiv	r4, r5, r6
 801ba48:	fb06 5514 	mls	r5, r6, r4, r5
 801ba4c:	6044      	str	r4, [r0, #4]
 801ba4e:	6085      	str	r5, [r0, #8]
 801ba50:	60c6      	str	r6, [r0, #12]
 801ba52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ba56:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801ba5a:	6945      	ldr	r5, [r0, #20]
 801ba5c:	59d2      	ldr	r2, [r2, r7]
 801ba5e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801ba62:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801bb90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801ba66:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801ba6a:	ee07 4a10 	vmov	s14, r4
 801ba6e:	6804      	ldr	r4, [r0, #0]
 801ba70:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801ba74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba78:	ee07 2a90 	vmov	s15, r2
 801ba7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ba80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ba88:	edd3 6a00 	vldr	s13, [r3]
 801ba8c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ba90:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801ba94:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ba98:	edc0 6a07 	vstr	s13, [r0, #28]
 801ba9c:	edd0 6a01 	vldr	s13, [r0, #4]
 801baa0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801baa4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801baa8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801baac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801bab0:	ed80 6a08 	vstr	s12, [r0, #32]
 801bab4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801bab6:	6242      	str	r2, [r0, #36]	; 0x24
 801bab8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801babc:	ed93 6a03 	vldr	s12, [r3, #12]
 801bac0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bac4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801bac8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801bacc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801bad0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801bad4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801bad8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801badc:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801bae0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801bae2:	6302      	str	r2, [r0, #48]	; 0x30
 801bae4:	ed93 6a06 	vldr	s12, [r3, #24]
 801bae8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801baec:	eea5 6a87 	vfma.f32	s12, s11, s14
 801baf0:	eeb0 7a46 	vmov.f32	s14, s12
 801baf4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801baf8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801bafc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801bb00:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801bb04:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801bb08:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bb0c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801bb10:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801bb12:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb18:	2410      	movs	r4, #16
 801bb1a:	f1c5 0501 	rsb	r5, r5, #1
 801bb1e:	fb9e fef4 	sdiv	lr, lr, r4
 801bb22:	f015 050f 	ands.w	r5, r5, #15
 801bb26:	bf18      	it	ne
 801bb28:	2501      	movne	r5, #1
 801bb2a:	ebae 0e05 	sub.w	lr, lr, r5
 801bb2e:	e753      	b.n	801b9d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801bb30:	f04f 0910 	mov.w	r9, #16
 801bb34:	f1c5 0501 	rsb	r5, r5, #1
 801bb38:	fb94 f4f9 	sdiv	r4, r4, r9
 801bb3c:	f015 050f 	ands.w	r5, r5, #15
 801bb40:	bf18      	it	ne
 801bb42:	2501      	movne	r5, #1
 801bb44:	1b64      	subs	r4, r4, r5
 801bb46:	e755      	b.n	801b9f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801bb48:	4264      	negs	r4, r4
 801bb4a:	fb94 fef6 	sdiv	lr, r4, r6
 801bb4e:	f1ce 0800 	rsb	r8, lr, #0
 801bb52:	fb06 441e 	mls	r4, r6, lr, r4
 801bb56:	f8c0 8000 	str.w	r8, [r0]
 801bb5a:	6104      	str	r4, [r0, #16]
 801bb5c:	2c00      	cmp	r4, #0
 801bb5e:	f43f af6e 	beq.w	801ba3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801bb62:	ea6f 0e0e 	mvn.w	lr, lr
 801bb66:	1b34      	subs	r4, r6, r4
 801bb68:	f8c0 e000 	str.w	lr, [r0]
 801bb6c:	e766      	b.n	801ba3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801bb6e:	426d      	negs	r5, r5
 801bb70:	fb95 f4f6 	sdiv	r4, r5, r6
 801bb74:	f1c4 0e00 	rsb	lr, r4, #0
 801bb78:	fb06 5514 	mls	r5, r6, r4, r5
 801bb7c:	f8c0 e004 	str.w	lr, [r0, #4]
 801bb80:	6085      	str	r5, [r0, #8]
 801bb82:	2d00      	cmp	r5, #0
 801bb84:	f43f af64 	beq.w	801ba50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801bb88:	43e4      	mvns	r4, r4
 801bb8a:	1b75      	subs	r5, r6, r5
 801bb8c:	6044      	str	r4, [r0, #4]
 801bb8e:	e75e      	b.n	801ba4e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801bb90:	3d800000 	.word	0x3d800000

0801bb94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bb94:	4b01      	ldr	r3, [pc, #4]	; (801bb9c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bb96:	6018      	str	r0, [r3, #0]
 801bb98:	4770      	bx	lr
 801bb9a:	bf00      	nop
 801bb9c:	20015098 	.word	0x20015098

0801bba0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801bba0:	4b06      	ldr	r3, [pc, #24]	; (801bbbc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801bba2:	881a      	ldrh	r2, [r3, #0]
 801bba4:	4282      	cmp	r2, r0
 801bba6:	d807      	bhi.n	801bbb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801bba8:	4b05      	ldr	r3, [pc, #20]	; (801bbc0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801bbaa:	881b      	ldrh	r3, [r3, #0]
 801bbac:	4413      	add	r3, r2
 801bbae:	4298      	cmp	r0, r3
 801bbb0:	bfac      	ite	ge
 801bbb2:	2000      	movge	r0, #0
 801bbb4:	2001      	movlt	r0, #1
 801bbb6:	4770      	bx	lr
 801bbb8:	2000      	movs	r0, #0
 801bbba:	4770      	bx	lr
 801bbbc:	200150b8 	.word	0x200150b8
 801bbc0:	200150bc 	.word	0x200150bc

0801bbc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bbc4:	b508      	push	{r3, lr}
 801bbc6:	4601      	mov	r1, r0
 801bbc8:	f7ff ffea 	bl	801bba0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bbcc:	b118      	cbz	r0, 801bbd6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801bbce:	4b02      	ldr	r3, [pc, #8]	; (801bbd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801bbd6:	bd08      	pop	{r3, pc}
 801bbd8:	2001509c 	.word	0x2001509c

0801bbdc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbde:	4c24      	ldr	r4, [pc, #144]	; (801bc70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801bbe0:	6823      	ldr	r3, [r4, #0]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d042      	beq.n	801bc6c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801bbe6:	4a23      	ldr	r2, [pc, #140]	; (801bc74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801bbe8:	4d23      	ldr	r5, [pc, #140]	; (801bc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801bbea:	8811      	ldrh	r1, [r2, #0]
 801bbec:	f8b5 c000 	ldrh.w	ip, [r5]
 801bbf0:	4822      	ldr	r0, [pc, #136]	; (801bc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801bbf2:	4461      	add	r1, ip
 801bbf4:	1c4a      	adds	r2, r1, #1
 801bbf6:	008f      	lsls	r7, r1, #2
 801bbf8:	f022 0201 	bic.w	r2, r2, #1
 801bbfc:	19de      	adds	r6, r3, r7
 801bbfe:	0412      	lsls	r2, r2, #16
 801bc00:	6006      	str	r6, [r0, #0]
 801bc02:	4e1f      	ldr	r6, [pc, #124]	; (801bc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801bc04:	0c12      	lsrs	r2, r2, #16
 801bc06:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801bc0a:	19da      	adds	r2, r3, r7
 801bc0c:	6032      	str	r2, [r6, #0]
 801bc0e:	220e      	movs	r2, #14
 801bc10:	fb02 f20c 	mul.w	r2, r2, ip
 801bc14:	3203      	adds	r2, #3
 801bc16:	f022 0203 	bic.w	r2, r2, #3
 801bc1a:	443a      	add	r2, r7
 801bc1c:	4f19      	ldr	r7, [pc, #100]	; (801bc84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bc1e:	4413      	add	r3, r2
 801bc20:	603b      	str	r3, [r7, #0]
 801bc22:	2300      	movs	r3, #0
 801bc24:	4f18      	ldr	r7, [pc, #96]	; (801bc88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bc26:	469c      	mov	ip, r3
 801bc28:	803b      	strh	r3, [r7, #0]
 801bc2a:	4f18      	ldr	r7, [pc, #96]	; (801bc8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bc2c:	683f      	ldr	r7, [r7, #0]
 801bc2e:	1aba      	subs	r2, r7, r2
 801bc30:	4f17      	ldr	r7, [pc, #92]	; (801bc90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bc32:	603a      	str	r2, [r7, #0]
 801bc34:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801bc38:	4a16      	ldr	r2, [pc, #88]	; (801bc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bc3a:	8013      	strh	r3, [r2, #0]
 801bc3c:	428b      	cmp	r3, r1
 801bc3e:	d10d      	bne.n	801bc5c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801bc40:	882d      	ldrh	r5, [r5, #0]
 801bc42:	2300      	movs	r3, #0
 801bc44:	6830      	ldr	r0, [r6, #0]
 801bc46:	240e      	movs	r4, #14
 801bc48:	429d      	cmp	r5, r3
 801bc4a:	d90f      	bls.n	801bc6c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801bc4c:	fb04 0203 	mla	r2, r4, r3, r0
 801bc50:	3301      	adds	r3, #1
 801bc52:	7b11      	ldrb	r1, [r2, #12]
 801bc54:	f36f 1145 	bfc	r1, #5, #1
 801bc58:	7311      	strb	r1, [r2, #12]
 801bc5a:	e7f5      	b.n	801bc48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801bc5c:	6822      	ldr	r2, [r4, #0]
 801bc5e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bc62:	6802      	ldr	r2, [r0, #0]
 801bc64:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801bc68:	3301      	adds	r3, #1
 801bc6a:	e7e7      	b.n	801bc3c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801bc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc6e:	bf00      	nop
 801bc70:	2001509c 	.word	0x2001509c
 801bc74:	200150b8 	.word	0x200150b8
 801bc78:	200150bc 	.word	0x200150bc
 801bc7c:	200150b0 	.word	0x200150b0
 801bc80:	200150a0 	.word	0x200150a0
 801bc84:	200150a8 	.word	0x200150a8
 801bc88:	200150ba 	.word	0x200150ba
 801bc8c:	200150a4 	.word	0x200150a4
 801bc90:	200150b4 	.word	0x200150b4
 801bc94:	200150ac 	.word	0x200150ac

0801bc98 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bc98:	4b06      	ldr	r3, [pc, #24]	; (801bcb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	b943      	cbnz	r3, 801bcb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801bc9e:	b139      	cbz	r1, 801bcb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801bca0:	4b05      	ldr	r3, [pc, #20]	; (801bcb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801bca2:	801a      	strh	r2, [r3, #0]
 801bca4:	4b05      	ldr	r3, [pc, #20]	; (801bcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801bca6:	6019      	str	r1, [r3, #0]
 801bca8:	4b05      	ldr	r3, [pc, #20]	; (801bcc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801bcaa:	6018      	str	r0, [r3, #0]
 801bcac:	f7ff bf96 	b.w	801bbdc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bcb0:	4770      	bx	lr
 801bcb2:	bf00      	nop
 801bcb4:	200150a8 	.word	0x200150a8
 801bcb8:	200150bc 	.word	0x200150bc
 801bcbc:	200150a4 	.word	0x200150a4
 801bcc0:	2001509c 	.word	0x2001509c

0801bcc4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bcc4:	b470      	push	{r4, r5, r6}
 801bcc6:	4c07      	ldr	r4, [pc, #28]	; (801bce4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bcc8:	4605      	mov	r5, r0
 801bcca:	4610      	mov	r0, r2
 801bccc:	9a03      	ldr	r2, [sp, #12]
 801bcce:	6826      	ldr	r6, [r4, #0]
 801bcd0:	b936      	cbnz	r6, 801bce0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bcd2:	6025      	str	r5, [r4, #0]
 801bcd4:	4c04      	ldr	r4, [pc, #16]	; (801bce8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bcd6:	8021      	strh	r1, [r4, #0]
 801bcd8:	4619      	mov	r1, r3
 801bcda:	bc70      	pop	{r4, r5, r6}
 801bcdc:	f7ff bfdc 	b.w	801bc98 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bce0:	bc70      	pop	{r4, r5, r6}
 801bce2:	4770      	bx	lr
 801bce4:	200150c0 	.word	0x200150c0
 801bce8:	200150b8 	.word	0x200150b8

0801bcec <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bcec:	4a12      	ldr	r2, [pc, #72]	; (801bd38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801bcee:	8803      	ldrh	r3, [r0, #0]
 801bcf0:	8812      	ldrh	r2, [r2, #0]
 801bcf2:	4293      	cmp	r3, r2
 801bcf4:	d207      	bcs.n	801bd06 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801bcf6:	4a11      	ldr	r2, [pc, #68]	; (801bd3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801bcf8:	2114      	movs	r1, #20
 801bcfa:	6812      	ldr	r2, [r2, #0]
 801bcfc:	fb01 2303 	mla	r3, r1, r3, r2
 801bd00:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801bd04:	4770      	bx	lr
 801bd06:	490e      	ldr	r1, [pc, #56]	; (801bd40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bd08:	8809      	ldrh	r1, [r1, #0]
 801bd0a:	4411      	add	r1, r2
 801bd0c:	428b      	cmp	r3, r1
 801bd0e:	da04      	bge.n	801bd1a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801bd10:	1a9b      	subs	r3, r3, r2
 801bd12:	4a0c      	ldr	r2, [pc, #48]	; (801bd44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bd14:	210e      	movs	r1, #14
 801bd16:	6812      	ldr	r2, [r2, #0]
 801bd18:	e7f0      	b.n	801bcfc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801bd1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd1e:	4293      	cmp	r3, r2
 801bd20:	d108      	bne.n	801bd34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801bd22:	4b09      	ldr	r3, [pc, #36]	; (801bd48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bd24:	781b      	ldrb	r3, [r3, #0]
 801bd26:	b91b      	cbnz	r3, 801bd30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801bd28:	4b08      	ldr	r3, [pc, #32]	; (801bd4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bd2a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bd2e:	4770      	bx	lr
 801bd30:	4b07      	ldr	r3, [pc, #28]	; (801bd50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bd32:	e7fa      	b.n	801bd2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801bd34:	2000      	movs	r0, #0
 801bd36:	4770      	bx	lr
 801bd38:	200150b8 	.word	0x200150b8
 801bd3c:	200150c0 	.word	0x200150c0
 801bd40:	200150bc 	.word	0x200150bc
 801bd44:	200150a0 	.word	0x200150a0
 801bd48:	20015030 	.word	0x20015030
 801bd4c:	20015032 	.word	0x20015032
 801bd50:	20015034 	.word	0x20015034

0801bd54 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bd54:	4a12      	ldr	r2, [pc, #72]	; (801bda0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801bd56:	8803      	ldrh	r3, [r0, #0]
 801bd58:	8812      	ldrh	r2, [r2, #0]
 801bd5a:	4293      	cmp	r3, r2
 801bd5c:	d207      	bcs.n	801bd6e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801bd5e:	4a11      	ldr	r2, [pc, #68]	; (801bda4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801bd60:	2114      	movs	r1, #20
 801bd62:	6812      	ldr	r2, [r2, #0]
 801bd64:	fb01 2303 	mla	r3, r1, r3, r2
 801bd68:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801bd6c:	4770      	bx	lr
 801bd6e:	490e      	ldr	r1, [pc, #56]	; (801bda8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bd70:	8809      	ldrh	r1, [r1, #0]
 801bd72:	4411      	add	r1, r2
 801bd74:	428b      	cmp	r3, r1
 801bd76:	da04      	bge.n	801bd82 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801bd78:	1a9b      	subs	r3, r3, r2
 801bd7a:	4a0c      	ldr	r2, [pc, #48]	; (801bdac <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bd7c:	210e      	movs	r1, #14
 801bd7e:	6812      	ldr	r2, [r2, #0]
 801bd80:	e7f0      	b.n	801bd64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801bd82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd86:	4293      	cmp	r3, r2
 801bd88:	d108      	bne.n	801bd9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801bd8a:	4b09      	ldr	r3, [pc, #36]	; (801bdb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bd8c:	781b      	ldrb	r3, [r3, #0]
 801bd8e:	b91b      	cbnz	r3, 801bd98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801bd90:	4b08      	ldr	r3, [pc, #32]	; (801bdb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bd92:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bd96:	4770      	bx	lr
 801bd98:	4b07      	ldr	r3, [pc, #28]	; (801bdb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bd9a:	e7fa      	b.n	801bd92 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801bd9c:	2000      	movs	r0, #0
 801bd9e:	4770      	bx	lr
 801bda0:	200150b8 	.word	0x200150b8
 801bda4:	200150c0 	.word	0x200150c0
 801bda8:	200150bc 	.word	0x200150bc
 801bdac:	200150a0 	.word	0x200150a0
 801bdb0:	20015030 	.word	0x20015030
 801bdb4:	20015034 	.word	0x20015034
 801bdb8:	20015032 	.word	0x20015032

0801bdbc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bdbc:	4a1f      	ldr	r2, [pc, #124]	; (801be3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801bdbe:	b510      	push	{r4, lr}
 801bdc0:	880b      	ldrh	r3, [r1, #0]
 801bdc2:	8812      	ldrh	r2, [r2, #0]
 801bdc4:	4293      	cmp	r3, r2
 801bdc6:	d213      	bcs.n	801bdf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801bdc8:	4a1d      	ldr	r2, [pc, #116]	; (801be40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801bdca:	2114      	movs	r1, #20
 801bdcc:	6812      	ldr	r2, [r2, #0]
 801bdce:	fb01 2303 	mla	r3, r1, r3, r2
 801bdd2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bdd6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bdda:	8a1a      	ldrh	r2, [r3, #16]
 801bddc:	8a5b      	ldrh	r3, [r3, #18]
 801bdde:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bde2:	8004      	strh	r4, [r0, #0]
 801bde4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bde8:	8041      	strh	r1, [r0, #2]
 801bdea:	8082      	strh	r2, [r0, #4]
 801bdec:	80c3      	strh	r3, [r0, #6]
 801bdee:	e00e      	b.n	801be0e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801bdf0:	4914      	ldr	r1, [pc, #80]	; (801be44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801bdf2:	8809      	ldrh	r1, [r1, #0]
 801bdf4:	4411      	add	r1, r2
 801bdf6:	428b      	cmp	r3, r1
 801bdf8:	da0a      	bge.n	801be10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801bdfa:	1a9b      	subs	r3, r3, r2
 801bdfc:	4a12      	ldr	r2, [pc, #72]	; (801be48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801bdfe:	210e      	movs	r1, #14
 801be00:	6812      	ldr	r2, [r2, #0]
 801be02:	fb01 2303 	mla	r3, r1, r3, r2
 801be06:	681a      	ldr	r2, [r3, #0]
 801be08:	6002      	str	r2, [r0, #0]
 801be0a:	685a      	ldr	r2, [r3, #4]
 801be0c:	6042      	str	r2, [r0, #4]
 801be0e:	bd10      	pop	{r4, pc}
 801be10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be14:	4293      	cmp	r3, r2
 801be16:	d10b      	bne.n	801be30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801be18:	4b0c      	ldr	r3, [pc, #48]	; (801be4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801be1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801be1e:	4b0c      	ldr	r3, [pc, #48]	; (801be50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801be20:	8081      	strh	r1, [r0, #4]
 801be22:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be26:	2300      	movs	r3, #0
 801be28:	80c2      	strh	r2, [r0, #6]
 801be2a:	8003      	strh	r3, [r0, #0]
 801be2c:	8043      	strh	r3, [r0, #2]
 801be2e:	e7ee      	b.n	801be0e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801be30:	2300      	movs	r3, #0
 801be32:	8003      	strh	r3, [r0, #0]
 801be34:	8043      	strh	r3, [r0, #2]
 801be36:	8083      	strh	r3, [r0, #4]
 801be38:	e7d8      	b.n	801bdec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801be3a:	bf00      	nop
 801be3c:	200150b8 	.word	0x200150b8
 801be40:	200150c0 	.word	0x200150c0
 801be44:	200150bc 	.word	0x200150bc
 801be48:	200150a0 	.word	0x200150a0
 801be4c:	2001502c 	.word	0x2001502c
 801be50:	2001502e 	.word	0x2001502e

0801be54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801be54:	4a17      	ldr	r2, [pc, #92]	; (801beb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801be56:	8803      	ldrh	r3, [r0, #0]
 801be58:	8812      	ldrh	r2, [r2, #0]
 801be5a:	4293      	cmp	r3, r2
 801be5c:	d213      	bcs.n	801be86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801be5e:	4a16      	ldr	r2, [pc, #88]	; (801beb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801be60:	2114      	movs	r1, #20
 801be62:	6812      	ldr	r2, [r2, #0]
 801be64:	fb01 2303 	mla	r3, r1, r3, r2
 801be68:	8a1a      	ldrh	r2, [r3, #16]
 801be6a:	8919      	ldrh	r1, [r3, #8]
 801be6c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801be70:	428a      	cmp	r2, r1
 801be72:	db1d      	blt.n	801beb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801be74:	8a58      	ldrh	r0, [r3, #18]
 801be76:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801be7a:	895b      	ldrh	r3, [r3, #10]
 801be7c:	4298      	cmp	r0, r3
 801be7e:	bfac      	ite	ge
 801be80:	2000      	movge	r0, #0
 801be82:	2001      	movlt	r0, #1
 801be84:	4770      	bx	lr
 801be86:	490d      	ldr	r1, [pc, #52]	; (801bebc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801be88:	8809      	ldrh	r1, [r1, #0]
 801be8a:	4411      	add	r1, r2
 801be8c:	428b      	cmp	r3, r1
 801be8e:	da0d      	bge.n	801beac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801be90:	1a9b      	subs	r3, r3, r2
 801be92:	4a0b      	ldr	r2, [pc, #44]	; (801bec0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801be94:	210e      	movs	r1, #14
 801be96:	6812      	ldr	r2, [r2, #0]
 801be98:	fb01 2303 	mla	r3, r1, r3, r2
 801be9c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bea0:	891a      	ldrh	r2, [r3, #8]
 801bea2:	4291      	cmp	r1, r2
 801bea4:	db04      	blt.n	801beb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801bea6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801beaa:	e7e6      	b.n	801be7a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801beac:	2000      	movs	r0, #0
 801beae:	4770      	bx	lr
 801beb0:	2001      	movs	r0, #1
 801beb2:	4770      	bx	lr
 801beb4:	200150b8 	.word	0x200150b8
 801beb8:	200150c0 	.word	0x200150c0
 801bebc:	200150bc 	.word	0x200150bc
 801bec0:	200150a0 	.word	0x200150a0

0801bec4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bec4:	4a12      	ldr	r2, [pc, #72]	; (801bf10 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bec6:	8803      	ldrh	r3, [r0, #0]
 801bec8:	8811      	ldrh	r1, [r2, #0]
 801beca:	428b      	cmp	r3, r1
 801becc:	d20b      	bcs.n	801bee6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801bece:	4a11      	ldr	r2, [pc, #68]	; (801bf14 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bed0:	6812      	ldr	r2, [r2, #0]
 801bed2:	b112      	cbz	r2, 801beda <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bed4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bed8:	b9c0      	cbnz	r0, 801bf0c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801beda:	4a0f      	ldr	r2, [pc, #60]	; (801bf18 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bedc:	6811      	ldr	r1, [r2, #0]
 801bede:	2214      	movs	r2, #20
 801bee0:	4353      	muls	r3, r2
 801bee2:	58c8      	ldr	r0, [r1, r3]
 801bee4:	4770      	bx	lr
 801bee6:	4a0d      	ldr	r2, [pc, #52]	; (801bf1c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bee8:	8812      	ldrh	r2, [r2, #0]
 801beea:	440a      	add	r2, r1
 801beec:	4293      	cmp	r3, r2
 801beee:	da04      	bge.n	801befa <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801bef0:	4a08      	ldr	r2, [pc, #32]	; (801bf14 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bef2:	6812      	ldr	r2, [r2, #0]
 801bef4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bef8:	4770      	bx	lr
 801befa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801befe:	4293      	cmp	r3, r2
 801bf00:	d103      	bne.n	801bf0a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bf02:	4b07      	ldr	r3, [pc, #28]	; (801bf20 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bf08:	4770      	bx	lr
 801bf0a:	2000      	movs	r0, #0
 801bf0c:	4770      	bx	lr
 801bf0e:	bf00      	nop
 801bf10:	200150b8 	.word	0x200150b8
 801bf14:	2001509c 	.word	0x2001509c
 801bf18:	200150c0 	.word	0x200150c0
 801bf1c:	200150bc 	.word	0x200150bc
 801bf20:	20015038 	.word	0x20015038

0801bf24 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bf24:	4b24      	ldr	r3, [pc, #144]	; (801bfb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bf26:	8802      	ldrh	r2, [r0, #0]
 801bf28:	8818      	ldrh	r0, [r3, #0]
 801bf2a:	4282      	cmp	r2, r0
 801bf2c:	d221      	bcs.n	801bf72 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801bf2e:	4b23      	ldr	r3, [pc, #140]	; (801bfbc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bf30:	6819      	ldr	r1, [r3, #0]
 801bf32:	2314      	movs	r3, #20
 801bf34:	fb03 1302 	mla	r3, r3, r2, r1
 801bf38:	6858      	ldr	r0, [r3, #4]
 801bf3a:	2800      	cmp	r0, #0
 801bf3c:	d03a      	beq.n	801bfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bf3e:	4920      	ldr	r1, [pc, #128]	; (801bfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bf40:	6809      	ldr	r1, [r1, #0]
 801bf42:	2900      	cmp	r1, #0
 801bf44:	d036      	beq.n	801bfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bf46:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bf4a:	2900      	cmp	r1, #0
 801bf4c:	d032      	beq.n	801bfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bf4e:	891a      	ldrh	r2, [r3, #8]
 801bf50:	8958      	ldrh	r0, [r3, #10]
 801bf52:	4350      	muls	r0, r2
 801bf54:	7c5a      	ldrb	r2, [r3, #17]
 801bf56:	7cdb      	ldrb	r3, [r3, #19]
 801bf58:	0952      	lsrs	r2, r2, #5
 801bf5a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bf5e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bf62:	2b0b      	cmp	r3, #11
 801bf64:	bf18      	it	ne
 801bf66:	0040      	lslne	r0, r0, #1
 801bf68:	3003      	adds	r0, #3
 801bf6a:	f020 0003 	bic.w	r0, r0, #3
 801bf6e:	4408      	add	r0, r1
 801bf70:	4770      	bx	lr
 801bf72:	4b14      	ldr	r3, [pc, #80]	; (801bfc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bf74:	881b      	ldrh	r3, [r3, #0]
 801bf76:	4403      	add	r3, r0
 801bf78:	429a      	cmp	r2, r3
 801bf7a:	da1a      	bge.n	801bfb2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf7c:	4b12      	ldr	r3, [pc, #72]	; (801bfc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bf7e:	1a10      	subs	r0, r2, r0
 801bf80:	210e      	movs	r1, #14
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	fb01 3000 	mla	r0, r1, r0, r3
 801bf88:	7b03      	ldrb	r3, [r0, #12]
 801bf8a:	f003 031f 	and.w	r3, r3, #31
 801bf8e:	2b0b      	cmp	r3, #11
 801bf90:	d10b      	bne.n	801bfaa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801bf92:	8903      	ldrh	r3, [r0, #8]
 801bf94:	8940      	ldrh	r0, [r0, #10]
 801bf96:	4358      	muls	r0, r3
 801bf98:	4b09      	ldr	r3, [pc, #36]	; (801bfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bf9a:	3003      	adds	r0, #3
 801bf9c:	6819      	ldr	r1, [r3, #0]
 801bf9e:	f020 0303 	bic.w	r3, r0, #3
 801bfa2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bfa6:	4418      	add	r0, r3
 801bfa8:	4770      	bx	lr
 801bfaa:	2b0d      	cmp	r3, #13
 801bfac:	d101      	bne.n	801bfb2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bfae:	300d      	adds	r0, #13
 801bfb0:	4770      	bx	lr
 801bfb2:	2000      	movs	r0, #0
 801bfb4:	4770      	bx	lr
 801bfb6:	bf00      	nop
 801bfb8:	200150b8 	.word	0x200150b8
 801bfbc:	200150c0 	.word	0x200150c0
 801bfc0:	2001509c 	.word	0x2001509c
 801bfc4:	200150bc 	.word	0x200150bc
 801bfc8:	200150a0 	.word	0x200150a0

0801bfcc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bfcc:	4a17      	ldr	r2, [pc, #92]	; (801c02c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801bfce:	b510      	push	{r4, lr}
 801bfd0:	8803      	ldrh	r3, [r0, #0]
 801bfd2:	8812      	ldrh	r2, [r2, #0]
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	d20c      	bcs.n	801bff2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bfd8:	4a15      	ldr	r2, [pc, #84]	; (801c030 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801bfda:	2114      	movs	r1, #20
 801bfdc:	6812      	ldr	r2, [r2, #0]
 801bfde:	fb01 2303 	mla	r3, r1, r3, r2
 801bfe2:	7c58      	ldrb	r0, [r3, #17]
 801bfe4:	0942      	lsrs	r2, r0, #5
 801bfe6:	7cd8      	ldrb	r0, [r3, #19]
 801bfe8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bfec:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bff0:	bd10      	pop	{r4, pc}
 801bff2:	4910      	ldr	r1, [pc, #64]	; (801c034 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bff4:	8809      	ldrh	r1, [r1, #0]
 801bff6:	4411      	add	r1, r2
 801bff8:	428b      	cmp	r3, r1
 801bffa:	da09      	bge.n	801c010 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bffc:	1a9b      	subs	r3, r3, r2
 801bffe:	4a0e      	ldr	r2, [pc, #56]	; (801c038 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c000:	210e      	movs	r1, #14
 801c002:	6812      	ldr	r2, [r2, #0]
 801c004:	fb01 2303 	mla	r3, r1, r3, r2
 801c008:	7b18      	ldrb	r0, [r3, #12]
 801c00a:	f000 001f 	and.w	r0, r0, #31
 801c00e:	e7ef      	b.n	801bff0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801c010:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c014:	4293      	cmp	r3, r2
 801c016:	d106      	bne.n	801c026 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c018:	f7e7 fb14 	bl	8003644 <_ZN8touchgfx3HAL3lcdEv>
 801c01c:	6803      	ldr	r3, [r0, #0]
 801c01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c024:	4718      	bx	r3
 801c026:	2000      	movs	r0, #0
 801c028:	e7e2      	b.n	801bff0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801c02a:	bf00      	nop
 801c02c:	200150b8 	.word	0x200150b8
 801c030:	200150c0 	.word	0x200150c0
 801c034:	200150bc 	.word	0x200150bc
 801c038:	200150a0 	.word	0x200150a0

0801c03c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801c03c:	2010      	movs	r0, #16
 801c03e:	4770      	bx	lr

0801c040 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801c040:	2000      	movs	r0, #0
 801c042:	4770      	bx	lr

0801c044 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801c044:	4b02      	ldr	r3, [pc, #8]	; (801c050 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801c046:	8818      	ldrh	r0, [r3, #0]
 801c048:	0040      	lsls	r0, r0, #1
 801c04a:	b280      	uxth	r0, r0
 801c04c:	4770      	bx	lr
 801c04e:	bf00      	nop
 801c050:	20015032 	.word	0x20015032

0801c054 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c054:	2bff      	cmp	r3, #255	; 0xff
 801c056:	d050      	beq.n	801c0fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801c058:	2a0b      	cmp	r2, #11
 801c05a:	d04a      	beq.n	801c0f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c05c:	d80e      	bhi.n	801c07c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801c05e:	2a03      	cmp	r2, #3
 801c060:	d03f      	beq.n	801c0e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801c062:	d804      	bhi.n	801c06e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c064:	2a01      	cmp	r2, #1
 801c066:	d03e      	beq.n	801c0e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801c068:	d93f      	bls.n	801c0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801c06a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c06c:	4770      	bx	lr
 801c06e:	2a09      	cmp	r2, #9
 801c070:	d03f      	beq.n	801c0f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c072:	d83c      	bhi.n	801c0ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c074:	2a08      	cmp	r2, #8
 801c076:	d03a      	beq.n	801c0ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c078:	2000      	movs	r0, #0
 801c07a:	4770      	bx	lr
 801c07c:	2a2f      	cmp	r2, #47	; 0x2f
 801c07e:	d024      	beq.n	801c0ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801c080:	d80d      	bhi.n	801c09e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801c082:	2a2d      	cmp	r2, #45	; 0x2d
 801c084:	d014      	beq.n	801c0b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801c086:	d826      	bhi.n	801c0d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801c088:	2a2c      	cmp	r2, #44	; 0x2c
 801c08a:	d1f5      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c08c:	684b      	ldr	r3, [r1, #4]
 801c08e:	781b      	ldrb	r3, [r3, #0]
 801c090:	2b01      	cmp	r3, #1
 801c092:	d018      	beq.n	801c0c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801c094:	d323      	bcc.n	801c0de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801c096:	2b02      	cmp	r3, #2
 801c098:	d1ee      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c09a:	6880      	ldr	r0, [r0, #8]
 801c09c:	4770      	bx	lr
 801c09e:	2a31      	cmp	r2, #49	; 0x31
 801c0a0:	d004      	beq.n	801c0ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801c0a2:	d328      	bcc.n	801c0f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c0a4:	2a32      	cmp	r2, #50	; 0x32
 801c0a6:	d026      	beq.n	801c0f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c0a8:	2a33      	cmp	r2, #51	; 0x33
 801c0aa:	d1e5      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c0ac:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801c0ae:	4770      	bx	lr
 801c0b0:	684b      	ldr	r3, [r1, #4]
 801c0b2:	781b      	ldrb	r3, [r3, #0]
 801c0b4:	2b01      	cmp	r3, #1
 801c0b6:	d004      	beq.n	801c0c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c0b8:	d30b      	bcc.n	801c0d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c0ba:	2b02      	cmp	r3, #2
 801c0bc:	d1dc      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c0be:	6900      	ldr	r0, [r0, #16]
 801c0c0:	4770      	bx	lr
 801c0c2:	6a00      	ldr	r0, [r0, #32]
 801c0c4:	4770      	bx	lr
 801c0c6:	6980      	ldr	r0, [r0, #24]
 801c0c8:	4770      	bx	lr
 801c0ca:	684b      	ldr	r3, [r1, #4]
 801c0cc:	781b      	ldrb	r3, [r3, #0]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d1d2      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c0d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c0d4:	4770      	bx	lr
 801c0d6:	684b      	ldr	r3, [r1, #4]
 801c0d8:	781b      	ldrb	r3, [r3, #0]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d1cc      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c0de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c0e0:	4770      	bx	lr
 801c0e2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c0e4:	4770      	bx	lr
 801c0e6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801c0e8:	4770      	bx	lr
 801c0ea:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801c0ec:	4770      	bx	lr
 801c0ee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801c0f0:	4770      	bx	lr
 801c0f2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801c0f4:	4770      	bx	lr
 801c0f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801c0f8:	4770      	bx	lr
 801c0fa:	2a0b      	cmp	r2, #11
 801c0fc:	d049      	beq.n	801c192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c0fe:	d80e      	bhi.n	801c11e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801c100:	2a03      	cmp	r2, #3
 801c102:	d040      	beq.n	801c186 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801c104:	d804      	bhi.n	801c110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801c106:	2a01      	cmp	r2, #1
 801c108:	d03f      	beq.n	801c18a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801c10a:	d940      	bls.n	801c18e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c10c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c10e:	4770      	bx	lr
 801c110:	2a09      	cmp	r2, #9
 801c112:	d03e      	beq.n	801c192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c114:	d801      	bhi.n	801c11a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801c116:	2a08      	cmp	r2, #8
 801c118:	d1ae      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c11a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801c11c:	4770      	bx	lr
 801c11e:	2a2f      	cmp	r2, #47	; 0x2f
 801c120:	d024      	beq.n	801c16c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801c122:	d80d      	bhi.n	801c140 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801c124:	2a2d      	cmp	r2, #45	; 0x2d
 801c126:	d014      	beq.n	801c152 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801c128:	d826      	bhi.n	801c178 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801c12a:	2a2c      	cmp	r2, #44	; 0x2c
 801c12c:	d1a4      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c12e:	684b      	ldr	r3, [r1, #4]
 801c130:	781b      	ldrb	r3, [r3, #0]
 801c132:	2b01      	cmp	r3, #1
 801c134:	d018      	beq.n	801c168 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801c136:	d324      	bcc.n	801c182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801c138:	2b02      	cmp	r3, #2
 801c13a:	d19d      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c13c:	68c0      	ldr	r0, [r0, #12]
 801c13e:	4770      	bx	lr
 801c140:	2a31      	cmp	r2, #49	; 0x31
 801c142:	d004      	beq.n	801c14e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801c144:	d327      	bcc.n	801c196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801c146:	2a32      	cmp	r2, #50	; 0x32
 801c148:	d025      	beq.n	801c196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801c14a:	2a33      	cmp	r2, #51	; 0x33
 801c14c:	d194      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c14e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801c150:	4770      	bx	lr
 801c152:	684b      	ldr	r3, [r1, #4]
 801c154:	781b      	ldrb	r3, [r3, #0]
 801c156:	2b01      	cmp	r3, #1
 801c158:	d004      	beq.n	801c164 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801c15a:	d30b      	bcc.n	801c174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801c15c:	2b02      	cmp	r3, #2
 801c15e:	d18b      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c160:	6940      	ldr	r0, [r0, #20]
 801c162:	4770      	bx	lr
 801c164:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c166:	4770      	bx	lr
 801c168:	69c0      	ldr	r0, [r0, #28]
 801c16a:	4770      	bx	lr
 801c16c:	684b      	ldr	r3, [r1, #4]
 801c16e:	781b      	ldrb	r3, [r3, #0]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d181      	bne.n	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c174:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c176:	4770      	bx	lr
 801c178:	684b      	ldr	r3, [r1, #4]
 801c17a:	781b      	ldrb	r3, [r3, #0]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	f47f af7b 	bne.w	801c078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c182:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c184:	4770      	bx	lr
 801c186:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c188:	4770      	bx	lr
 801c18a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c18c:	4770      	bx	lr
 801c18e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c190:	4770      	bx	lr
 801c192:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801c194:	4770      	bx	lr
 801c196:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801c198:	4770      	bx	lr

0801c19a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c19a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c19e:	b087      	sub	sp, #28
 801c1a0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c1a2:	9205      	str	r2, [sp, #20]
 801c1a4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c1a8:	9101      	str	r1, [sp, #4]
 801c1aa:	9202      	str	r2, [sp, #8]
 801c1ac:	6841      	ldr	r1, [r0, #4]
 801c1ae:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801c1b2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c1b6:	fb01 2404 	mla	r4, r1, r4, r2
 801c1ba:	6802      	ldr	r2, [r0, #0]
 801c1bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c1c0:	f8de 2000 	ldr.w	r2, [lr]
 801c1c4:	9203      	str	r2, [sp, #12]
 801c1c6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c1ca:	3204      	adds	r2, #4
 801c1cc:	9204      	str	r2, [sp, #16]
 801c1ce:	9a02      	ldr	r2, [sp, #8]
 801c1d0:	43d6      	mvns	r6, r2
 801c1d2:	b2f6      	uxtb	r6, r6
 801c1d4:	9a01      	ldr	r2, [sp, #4]
 801c1d6:	2a00      	cmp	r2, #0
 801c1d8:	dc03      	bgt.n	801c1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c1da:	9a05      	ldr	r2, [sp, #20]
 801c1dc:	2a00      	cmp	r2, #0
 801c1de:	f340 8129 	ble.w	801c434 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c1e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1e4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801c1e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c1ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c1ee:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801c1f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	dd0e      	ble.n	801c218 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c1fa:	1408      	asrs	r0, r1, #16
 801c1fc:	d405      	bmi.n	801c20a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1fe:	4560      	cmp	r0, ip
 801c200:	da03      	bge.n	801c20a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c202:	1410      	asrs	r0, r2, #16
 801c204:	d401      	bmi.n	801c20a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c206:	42b8      	cmp	r0, r7
 801c208:	db07      	blt.n	801c21a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c20a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c20c:	3b01      	subs	r3, #1
 801c20e:	3402      	adds	r4, #2
 801c210:	4401      	add	r1, r0
 801c212:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c214:	4402      	add	r2, r0
 801c216:	e7ee      	b.n	801c1f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c218:	d071      	beq.n	801c2fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c21a:	1e58      	subs	r0, r3, #1
 801c21c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c21e:	fb05 1500 	mla	r5, r5, r0, r1
 801c222:	142d      	asrs	r5, r5, #16
 801c224:	d45f      	bmi.n	801c2e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c226:	4565      	cmp	r5, ip
 801c228:	da5d      	bge.n	801c2e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c22a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c22c:	fb05 2000 	mla	r0, r5, r0, r2
 801c230:	1400      	asrs	r0, r0, #16
 801c232:	d458      	bmi.n	801c2e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c234:	42b8      	cmp	r0, r7
 801c236:	da56      	bge.n	801c2e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c238:	4699      	mov	r9, r3
 801c23a:	46a2      	mov	sl, r4
 801c23c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801c240:	f1b9 0f00 	cmp.w	r9, #0
 801c244:	dd57      	ble.n	801c2f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801c246:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c24a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c24e:	9803      	ldr	r0, [sp, #12]
 801c250:	140d      	asrs	r5, r1, #16
 801c252:	f109 39ff 	add.w	r9, r9, #4294967295
 801c256:	fb07 000c 	mla	r0, r7, ip, r0
 801c25a:	5d40      	ldrb	r0, [r0, r5]
 801c25c:	9d04      	ldr	r5, [sp, #16]
 801c25e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c262:	f8ba 5000 	ldrh.w	r5, [sl]
 801c266:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c26a:	122f      	asrs	r7, r5, #8
 801c26c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801c270:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c274:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c278:	00ed      	lsls	r5, r5, #3
 801c27a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801c27e:	fb17 f706 	smulbb	r7, r7, r6
 801c282:	b2ed      	uxtb	r5, r5
 801c284:	fb18 f806 	smulbb	r8, r8, r6
 801c288:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801c28c:	10c7      	asrs	r7, r0, #3
 801c28e:	fb15 f506 	smulbb	r5, r5, r6
 801c292:	00c0      	lsls	r0, r0, #3
 801c294:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c298:	fa1f fc8c 	uxth.w	ip, ip
 801c29c:	b2c0      	uxtb	r0, r0
 801c29e:	fb07 870b 	mla	r7, r7, fp, r8
 801c2a2:	fb00 500b 	mla	r0, r0, fp, r5
 801c2a6:	f10c 0501 	add.w	r5, ip, #1
 801c2aa:	b2bf      	uxth	r7, r7
 801c2ac:	b280      	uxth	r0, r0
 801c2ae:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c2b2:	f107 0801 	add.w	r8, r7, #1
 801c2b6:	1c45      	adds	r5, r0, #1
 801c2b8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c2bc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c2c0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c2c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c2c6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c2ca:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c2ce:	4401      	add	r1, r0
 801c2d0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c2d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c2d6:	ea45 0c0c 	orr.w	ip, r5, ip
 801c2da:	4402      	add	r2, r0
 801c2dc:	ea4c 0c08 	orr.w	ip, ip, r8
 801c2e0:	f82a cb02 	strh.w	ip, [sl], #2
 801c2e4:	e7ac      	b.n	801c240 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c2e6:	f04f 0800 	mov.w	r8, #0
 801c2ea:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801c2ee:	eb03 0008 	add.w	r0, r3, r8
 801c2f2:	2800      	cmp	r0, #0
 801c2f4:	dc41      	bgt.n	801c37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c2f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c2fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c2fe:	9b01      	ldr	r3, [sp, #4]
 801c300:	2b00      	cmp	r3, #0
 801c302:	f340 8097 	ble.w	801c434 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c30a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c30c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c310:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c314:	eef0 6a62 	vmov.f32	s13, s5
 801c318:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c31c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c320:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c324:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801c328:	eef0 6a43 	vmov.f32	s13, s6
 801c32c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c330:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801c334:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c338:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c33c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c340:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c344:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c348:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c34c:	ee12 2a90 	vmov	r2, s5
 801c350:	eef0 2a47 	vmov.f32	s5, s14
 801c354:	fb92 f3f3 	sdiv	r3, r2, r3
 801c358:	ee13 2a10 	vmov	r2, s6
 801c35c:	9313      	str	r3, [sp, #76]	; 0x4c
 801c35e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c360:	eeb0 3a67 	vmov.f32	s6, s15
 801c364:	fb92 f3f3 	sdiv	r3, r2, r3
 801c368:	9314      	str	r3, [sp, #80]	; 0x50
 801c36a:	9b01      	ldr	r3, [sp, #4]
 801c36c:	9a05      	ldr	r2, [sp, #20]
 801c36e:	3b01      	subs	r3, #1
 801c370:	9301      	str	r3, [sp, #4]
 801c372:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c374:	bf08      	it	eq
 801c376:	4613      	moveq	r3, r2
 801c378:	e72c      	b.n	801c1d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c37a:	140f      	asrs	r7, r1, #16
 801c37c:	d453      	bmi.n	801c426 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c37e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c382:	42bd      	cmp	r5, r7
 801c384:	dd4f      	ble.n	801c426 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c386:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c38a:	d44c      	bmi.n	801c426 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c38c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c390:	4560      	cmp	r0, ip
 801c392:	dd48      	ble.n	801c426 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c394:	9803      	ldr	r0, [sp, #12]
 801c396:	b22d      	sxth	r5, r5
 801c398:	fb0c 0505 	mla	r5, ip, r5, r0
 801c39c:	5de8      	ldrb	r0, [r5, r7]
 801c39e:	9d04      	ldr	r5, [sp, #16]
 801c3a0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c3a4:	f06f 0501 	mvn.w	r5, #1
 801c3a8:	fb05 fb08 	mul.w	fp, r5, r8
 801c3ac:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c3b0:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c3b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c3b8:	122f      	asrs	r7, r5, #8
 801c3ba:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c3be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c3c2:	00ed      	lsls	r5, r5, #3
 801c3c4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801c3c8:	fb17 f706 	smulbb	r7, r7, r6
 801c3cc:	b2ed      	uxtb	r5, r5
 801c3ce:	fb19 f906 	smulbb	r9, r9, r6
 801c3d2:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c3d6:	10c7      	asrs	r7, r0, #3
 801c3d8:	fb15 f506 	smulbb	r5, r5, r6
 801c3dc:	00c0      	lsls	r0, r0, #3
 801c3de:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c3e2:	fa1f fc8c 	uxth.w	ip, ip
 801c3e6:	b2c0      	uxtb	r0, r0
 801c3e8:	fb07 970a 	mla	r7, r7, sl, r9
 801c3ec:	fb00 500a 	mla	r0, r0, sl, r5
 801c3f0:	f10c 0501 	add.w	r5, ip, #1
 801c3f4:	b2bf      	uxth	r7, r7
 801c3f6:	b280      	uxth	r0, r0
 801c3f8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c3fc:	f107 0901 	add.w	r9, r7, #1
 801c400:	1c45      	adds	r5, r0, #1
 801c402:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c406:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c40a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c40e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c412:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c416:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c41a:	ea45 0c0c 	orr.w	ip, r5, ip
 801c41e:	ea4c 0c09 	orr.w	ip, ip, r9
 801c422:	f824 c00b 	strh.w	ip, [r4, fp]
 801c426:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c428:	f108 38ff 	add.w	r8, r8, #4294967295
 801c42c:	4401      	add	r1, r0
 801c42e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c430:	4402      	add	r2, r0
 801c432:	e75c      	b.n	801c2ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c434:	b007      	add	sp, #28
 801c436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c43a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c43a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c43e:	b085      	sub	sp, #20
 801c440:	4693      	mov	fp, r2
 801c442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c446:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c448:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c44a:	6870      	ldr	r0, [r6, #4]
 801c44c:	9100      	str	r1, [sp, #0]
 801c44e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c452:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801c456:	fb00 2404 	mla	r4, r0, r4, r2
 801c45a:	6832      	ldr	r2, [r6, #0]
 801c45c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c460:	682a      	ldr	r2, [r5, #0]
 801c462:	9201      	str	r2, [sp, #4]
 801c464:	686a      	ldr	r2, [r5, #4]
 801c466:	3204      	adds	r2, #4
 801c468:	9202      	str	r2, [sp, #8]
 801c46a:	9a00      	ldr	r2, [sp, #0]
 801c46c:	2a00      	cmp	r2, #0
 801c46e:	dc03      	bgt.n	801c478 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c470:	f1bb 0f00 	cmp.w	fp, #0
 801c474:	f340 80a0 	ble.w	801c5b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c47a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c47e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c482:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c484:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c488:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	dd0c      	ble.n	801c4aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c490:	1406      	asrs	r6, r0, #16
 801c492:	d405      	bmi.n	801c4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c494:	454e      	cmp	r6, r9
 801c496:	da03      	bge.n	801c4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c498:	1416      	asrs	r6, r2, #16
 801c49a:	d401      	bmi.n	801c4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c49c:	4546      	cmp	r6, r8
 801c49e:	db05      	blt.n	801c4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c4a0:	4470      	add	r0, lr
 801c4a2:	4462      	add	r2, ip
 801c4a4:	3b01      	subs	r3, #1
 801c4a6:	3402      	adds	r4, #2
 801c4a8:	e7f0      	b.n	801c48c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c4aa:	d00f      	beq.n	801c4cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c4ac:	1e5e      	subs	r6, r3, #1
 801c4ae:	fb0e 0706 	mla	r7, lr, r6, r0
 801c4b2:	143f      	asrs	r7, r7, #16
 801c4b4:	d541      	bpl.n	801c53a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801c4b6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c4ba:	4698      	mov	r8, r3
 801c4bc:	9603      	str	r6, [sp, #12]
 801c4be:	f1b8 0f00 	cmp.w	r8, #0
 801c4c2:	dc59      	bgt.n	801c578 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c4c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4c8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c4cc:	9b00      	ldr	r3, [sp, #0]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	dd72      	ble.n	801c5b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c4d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4dc:	eeb0 6a62 	vmov.f32	s12, s5
 801c4e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4ec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c4f0:	eeb0 6a43 	vmov.f32	s12, s6
 801c4f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4f8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c4fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c500:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c504:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c508:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c50c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c510:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c514:	ee12 2a90 	vmov	r2, s5
 801c518:	eef0 2a47 	vmov.f32	s5, s14
 801c51c:	fb92 fef3 	sdiv	lr, r2, r3
 801c520:	ee13 2a10 	vmov	r2, s6
 801c524:	eeb0 3a67 	vmov.f32	s6, s15
 801c528:	fb92 fcf3 	sdiv	ip, r2, r3
 801c52c:	9b00      	ldr	r3, [sp, #0]
 801c52e:	3b01      	subs	r3, #1
 801c530:	9300      	str	r3, [sp, #0]
 801c532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c534:	bf08      	it	eq
 801c536:	465b      	moveq	r3, fp
 801c538:	e797      	b.n	801c46a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c53a:	454f      	cmp	r7, r9
 801c53c:	dabb      	bge.n	801c4b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c53e:	fb0c 2606 	mla	r6, ip, r6, r2
 801c542:	1436      	asrs	r6, r6, #16
 801c544:	d4b7      	bmi.n	801c4b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c546:	4546      	cmp	r6, r8
 801c548:	dab5      	bge.n	801c4b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c54a:	461e      	mov	r6, r3
 801c54c:	46a0      	mov	r8, r4
 801c54e:	2e00      	cmp	r6, #0
 801c550:	ddb8      	ble.n	801c4c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c552:	1417      	asrs	r7, r2, #16
 801c554:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c558:	9901      	ldr	r1, [sp, #4]
 801c55a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c55e:	4462      	add	r2, ip
 801c560:	4470      	add	r0, lr
 801c562:	fb0a 1707 	mla	r7, sl, r7, r1
 801c566:	9902      	ldr	r1, [sp, #8]
 801c568:	3e01      	subs	r6, #1
 801c56a:	f817 7009 	ldrb.w	r7, [r7, r9]
 801c56e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c572:	f828 7b02 	strh.w	r7, [r8], #2
 801c576:	e7ea      	b.n	801c54e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c578:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c57c:	d417      	bmi.n	801c5ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c57e:	68ae      	ldr	r6, [r5, #8]
 801c580:	454e      	cmp	r6, r9
 801c582:	dd14      	ble.n	801c5ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c584:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c588:	d411      	bmi.n	801c5ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c58a:	68ef      	ldr	r7, [r5, #12]
 801c58c:	4557      	cmp	r7, sl
 801c58e:	dd0e      	ble.n	801c5ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c590:	9f01      	ldr	r7, [sp, #4]
 801c592:	b236      	sxth	r6, r6
 801c594:	f06f 0101 	mvn.w	r1, #1
 801c598:	fb0a 7606 	mla	r6, sl, r6, r7
 801c59c:	9f02      	ldr	r7, [sp, #8]
 801c59e:	f816 6009 	ldrb.w	r6, [r6, r9]
 801c5a2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c5a6:	fb01 f608 	mul.w	r6, r1, r8
 801c5aa:	9903      	ldr	r1, [sp, #12]
 801c5ac:	538f      	strh	r7, [r1, r6]
 801c5ae:	4470      	add	r0, lr
 801c5b0:	4462      	add	r2, ip
 801c5b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5b6:	e782      	b.n	801c4be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c5b8:	b005      	add	sp, #20
 801c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5c2:	b087      	sub	sp, #28
 801c5c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c5c6:	9205      	str	r2, [sp, #20]
 801c5c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c5cc:	9102      	str	r1, [sp, #8]
 801c5ce:	9203      	str	r2, [sp, #12]
 801c5d0:	6861      	ldr	r1, [r4, #4]
 801c5d2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c5d6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801c5da:	fb01 2000 	mla	r0, r1, r0, r2
 801c5de:	6822      	ldr	r2, [r4, #0]
 801c5e0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801c5e4:	9200      	str	r2, [sp, #0]
 801c5e6:	f8dc 2000 	ldr.w	r2, [ip]
 801c5ea:	9204      	str	r2, [sp, #16]
 801c5ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c5f0:	3204      	adds	r2, #4
 801c5f2:	9201      	str	r2, [sp, #4]
 801c5f4:	9a03      	ldr	r2, [sp, #12]
 801c5f6:	43d5      	mvns	r5, r2
 801c5f8:	b2ed      	uxtb	r5, r5
 801c5fa:	9a02      	ldr	r2, [sp, #8]
 801c5fc:	2a00      	cmp	r2, #0
 801c5fe:	dc03      	bgt.n	801c608 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c600:	9a05      	ldr	r2, [sp, #20]
 801c602:	2a00      	cmp	r2, #0
 801c604:	f340 812c 	ble.w	801c860 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c60a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c60e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c612:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c614:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c618:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	dd10      	ble.n	801c642 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c620:	140c      	asrs	r4, r1, #16
 801c622:	d405      	bmi.n	801c630 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c624:	4574      	cmp	r4, lr
 801c626:	da03      	bge.n	801c630 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c628:	1414      	asrs	r4, r2, #16
 801c62a:	d401      	bmi.n	801c630 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c62c:	42bc      	cmp	r4, r7
 801c62e:	db09      	blt.n	801c644 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c630:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c632:	3b01      	subs	r3, #1
 801c634:	9800      	ldr	r0, [sp, #0]
 801c636:	4421      	add	r1, r4
 801c638:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c63a:	3002      	adds	r0, #2
 801c63c:	4422      	add	r2, r4
 801c63e:	9000      	str	r0, [sp, #0]
 801c640:	e7ec      	b.n	801c61c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c642:	d071      	beq.n	801c728 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c644:	1e5c      	subs	r4, r3, #1
 801c646:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c648:	fb06 1604 	mla	r6, r6, r4, r1
 801c64c:	1436      	asrs	r6, r6, #16
 801c64e:	d45d      	bmi.n	801c70c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c650:	4576      	cmp	r6, lr
 801c652:	da5b      	bge.n	801c70c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c654:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c656:	fb06 2404 	mla	r4, r6, r4, r2
 801c65a:	1424      	asrs	r4, r4, #16
 801c65c:	d456      	bmi.n	801c70c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c65e:	42bc      	cmp	r4, r7
 801c660:	da54      	bge.n	801c70c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c662:	4698      	mov	r8, r3
 801c664:	f8dd 9000 	ldr.w	r9, [sp]
 801c668:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801c66c:	f1b8 0f00 	cmp.w	r8, #0
 801c670:	dd54      	ble.n	801c71c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c672:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c676:	1414      	asrs	r4, r2, #16
 801c678:	9804      	ldr	r0, [sp, #16]
 801c67a:	140e      	asrs	r6, r1, #16
 801c67c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c680:	fb07 0404 	mla	r4, r7, r4, r0
 801c684:	9801      	ldr	r0, [sp, #4]
 801c686:	f814 e006 	ldrb.w	lr, [r4, r6]
 801c68a:	f8b9 4000 	ldrh.w	r4, [r9]
 801c68e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c692:	1227      	asrs	r7, r4, #8
 801c694:	eb00 0b0e 	add.w	fp, r0, lr
 801c698:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801c69c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c6a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c6a2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c6a6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c6aa:	4401      	add	r1, r0
 801c6ac:	fb16 f60a 	smulbb	r6, r6, sl
 801c6b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c6b2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c6b6:	fb07 6705 	mla	r7, r7, r5, r6
 801c6ba:	10e6      	asrs	r6, r4, #3
 801c6bc:	00e4      	lsls	r4, r4, #3
 801c6be:	4402      	add	r2, r0
 801c6c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c6c4:	b2bf      	uxth	r7, r7
 801c6c6:	b2e4      	uxtb	r4, r4
 801c6c8:	fb06 b605 	mla	r6, r6, r5, fp
 801c6cc:	fb14 f405 	smulbb	r4, r4, r5
 801c6d0:	b2b6      	uxth	r6, r6
 801c6d2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801c6d6:	1c7c      	adds	r4, r7, #1
 801c6d8:	f106 0b01 	add.w	fp, r6, #1
 801c6dc:	fa1f fe8e 	uxth.w	lr, lr
 801c6e0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c6e4:	f10e 0401 	add.w	r4, lr, #1
 801c6e8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c6ec:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c6f0:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801c6f4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c6f8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c6fc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c700:	4327      	orrs	r7, r4
 801c702:	ea47 070b 	orr.w	r7, r7, fp
 801c706:	f829 7b02 	strh.w	r7, [r9], #2
 801c70a:	e7af      	b.n	801c66c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801c70c:	f04f 0e00 	mov.w	lr, #0
 801c710:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801c714:	eb03 040e 	add.w	r4, r3, lr
 801c718:	2c00      	cmp	r4, #0
 801c71a:	dc43      	bgt.n	801c7a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c71c:	9a00      	ldr	r2, [sp, #0]
 801c71e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c722:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c726:	9300      	str	r3, [sp, #0]
 801c728:	9b02      	ldr	r3, [sp, #8]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	f340 8098 	ble.w	801c860 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c736:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c73a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c73e:	eef0 6a62 	vmov.f32	s13, s5
 801c742:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c746:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c74a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c74e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801c752:	eef0 6a43 	vmov.f32	s13, s6
 801c756:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c75a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801c75e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c762:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c766:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c76a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c76e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c772:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c776:	ee12 2a90 	vmov	r2, s5
 801c77a:	eef0 2a47 	vmov.f32	s5, s14
 801c77e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c782:	ee13 2a10 	vmov	r2, s6
 801c786:	9313      	str	r3, [sp, #76]	; 0x4c
 801c788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c78a:	eeb0 3a67 	vmov.f32	s6, s15
 801c78e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c792:	9314      	str	r3, [sp, #80]	; 0x50
 801c794:	9b02      	ldr	r3, [sp, #8]
 801c796:	9a05      	ldr	r2, [sp, #20]
 801c798:	3b01      	subs	r3, #1
 801c79a:	9302      	str	r3, [sp, #8]
 801c79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c79e:	bf08      	it	eq
 801c7a0:	4613      	moveq	r3, r2
 801c7a2:	e72a      	b.n	801c5fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c7a4:	140f      	asrs	r7, r1, #16
 801c7a6:	d454      	bmi.n	801c852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c7a8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c7ac:	42be      	cmp	r6, r7
 801c7ae:	dd50      	ble.n	801c852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c7b0:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c7b4:	d44d      	bmi.n	801c852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c7b6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801c7ba:	4544      	cmp	r4, r8
 801c7bc:	dd49      	ble.n	801c852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c7be:	9c04      	ldr	r4, [sp, #16]
 801c7c0:	b236      	sxth	r6, r6
 801c7c2:	f06f 0001 	mvn.w	r0, #1
 801c7c6:	fb08 4606 	mla	r6, r8, r6, r4
 801c7ca:	9c01      	ldr	r4, [sp, #4]
 801c7cc:	fb00 fa0e 	mul.w	sl, r0, lr
 801c7d0:	9800      	ldr	r0, [sp, #0]
 801c7d2:	f816 8007 	ldrb.w	r8, [r6, r7]
 801c7d6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c7da:	eb04 0b08 	add.w	fp, r4, r8
 801c7de:	f830 400a 	ldrh.w	r4, [r0, sl]
 801c7e2:	9801      	ldr	r0, [sp, #4]
 801c7e4:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c7e8:	1227      	asrs	r7, r4, #8
 801c7ea:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c7ee:	fb16 f609 	smulbb	r6, r6, r9
 801c7f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c7f6:	f810 8008 	ldrb.w	r8, [r0, r8]
 801c7fa:	fb1b fb09 	smulbb	fp, fp, r9
 801c7fe:	fb07 6705 	mla	r7, r7, r5, r6
 801c802:	10e6      	asrs	r6, r4, #3
 801c804:	00e4      	lsls	r4, r4, #3
 801c806:	9800      	ldr	r0, [sp, #0]
 801c808:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c80c:	b2bf      	uxth	r7, r7
 801c80e:	b2e4      	uxtb	r4, r4
 801c810:	fb06 b605 	mla	r6, r6, r5, fp
 801c814:	fb14 f405 	smulbb	r4, r4, r5
 801c818:	b2b6      	uxth	r6, r6
 801c81a:	fb08 4809 	mla	r8, r8, r9, r4
 801c81e:	1c7c      	adds	r4, r7, #1
 801c820:	f106 0b01 	add.w	fp, r6, #1
 801c824:	fa1f f888 	uxth.w	r8, r8
 801c828:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c82c:	f108 0401 	add.w	r4, r8, #1
 801c830:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c834:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c838:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801c83c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c840:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c844:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c848:	4327      	orrs	r7, r4
 801c84a:	ea47 070b 	orr.w	r7, r7, fp
 801c84e:	f820 700a 	strh.w	r7, [r0, sl]
 801c852:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c854:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c858:	4401      	add	r1, r0
 801c85a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c85c:	4402      	add	r2, r0
 801c85e:	e759      	b.n	801c714 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c860:	b007      	add	sp, #28
 801c862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c868 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c86c:	b085      	sub	sp, #20
 801c86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c872:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c874:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c876:	9203      	str	r2, [sp, #12]
 801c878:	6870      	ldr	r0, [r6, #4]
 801c87a:	686f      	ldr	r7, [r5, #4]
 801c87c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801c880:	3704      	adds	r7, #4
 801c882:	9101      	str	r1, [sp, #4]
 801c884:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c888:	fb00 2404 	mla	r4, r0, r4, r2
 801c88c:	6832      	ldr	r2, [r6, #0]
 801c88e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c892:	682a      	ldr	r2, [r5, #0]
 801c894:	9202      	str	r2, [sp, #8]
 801c896:	9a01      	ldr	r2, [sp, #4]
 801c898:	2a00      	cmp	r2, #0
 801c89a:	dc03      	bgt.n	801c8a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c89c:	9a03      	ldr	r2, [sp, #12]
 801c89e:	2a00      	cmp	r2, #0
 801c8a0:	f340 80cc 	ble.w	801ca3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c8a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c8a6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c8aa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c8ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c8b0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c8b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	dd0d      	ble.n	801c8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c8bc:	1406      	asrs	r6, r0, #16
 801c8be:	d405      	bmi.n	801c8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c8c0:	454e      	cmp	r6, r9
 801c8c2:	da03      	bge.n	801c8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c8c4:	1416      	asrs	r6, r2, #16
 801c8c6:	d401      	bmi.n	801c8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c8c8:	4546      	cmp	r6, r8
 801c8ca:	db06      	blt.n	801c8da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c8cc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c8ce:	4460      	add	r0, ip
 801c8d0:	3b01      	subs	r3, #1
 801c8d2:	3402      	adds	r4, #2
 801c8d4:	4432      	add	r2, r6
 801c8d6:	e7ef      	b.n	801c8b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c8d8:	d00f      	beq.n	801c8fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c8da:	1e5e      	subs	r6, r3, #1
 801c8dc:	fb0c 0e06 	mla	lr, ip, r6, r0
 801c8e0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c8e4:	d543      	bpl.n	801c96e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c8e6:	4698      	mov	r8, r3
 801c8e8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801c8ec:	f1b8 0f00 	cmp.w	r8, #0
 801c8f0:	dc71      	bgt.n	801c9d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c8f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c8fa:	9b01      	ldr	r3, [sp, #4]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	f340 809d 	ble.w	801ca3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c902:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c908:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c90c:	eeb0 6a62 	vmov.f32	s12, s5
 801c910:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c914:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c918:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c91c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c920:	eeb0 6a43 	vmov.f32	s12, s6
 801c924:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c928:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c92c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c930:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c934:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c938:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c93c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c940:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c944:	ee12 2a90 	vmov	r2, s5
 801c948:	eef0 2a47 	vmov.f32	s5, s14
 801c94c:	fb92 fcf3 	sdiv	ip, r2, r3
 801c950:	ee13 2a10 	vmov	r2, s6
 801c954:	eeb0 3a67 	vmov.f32	s6, s15
 801c958:	fb92 f3f3 	sdiv	r3, r2, r3
 801c95c:	9312      	str	r3, [sp, #72]	; 0x48
 801c95e:	9b01      	ldr	r3, [sp, #4]
 801c960:	9a03      	ldr	r2, [sp, #12]
 801c962:	3b01      	subs	r3, #1
 801c964:	9301      	str	r3, [sp, #4]
 801c966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c968:	bf08      	it	eq
 801c96a:	4613      	moveq	r3, r2
 801c96c:	e793      	b.n	801c896 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c96e:	45ce      	cmp	lr, r9
 801c970:	dab9      	bge.n	801c8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c972:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c974:	fb01 2606 	mla	r6, r1, r6, r2
 801c978:	1436      	asrs	r6, r6, #16
 801c97a:	d4b4      	bmi.n	801c8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c97c:	4546      	cmp	r6, r8
 801c97e:	dab2      	bge.n	801c8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c980:	4698      	mov	r8, r3
 801c982:	46a2      	mov	sl, r4
 801c984:	f1b8 0f00 	cmp.w	r8, #0
 801c988:	ddb3      	ble.n	801c8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c98a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c98e:	1416      	asrs	r6, r2, #16
 801c990:	9902      	ldr	r1, [sp, #8]
 801c992:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801c996:	f108 38ff 	add.w	r8, r8, #4294967295
 801c99a:	4460      	add	r0, ip
 801c99c:	fb09 1606 	mla	r6, r9, r6, r1
 801c9a0:	4928      	ldr	r1, [pc, #160]	; (801ca44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801c9a2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801c9a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c9aa:	eb07 0b0e 	add.w	fp, r7, lr
 801c9ae:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801c9b2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c9b6:	00f6      	lsls	r6, r6, #3
 801c9b8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801c9bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c9be:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c9c2:	440a      	add	r2, r1
 801c9c4:	ea49 0606 	orr.w	r6, r9, r6
 801c9c8:	f817 900e 	ldrb.w	r9, [r7, lr]
 801c9cc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801c9d0:	f82a 6b02 	strh.w	r6, [sl], #2
 801c9d4:	e7d6      	b.n	801c984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c9d6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c9da:	d429      	bmi.n	801ca30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c9dc:	68ae      	ldr	r6, [r5, #8]
 801c9de:	454e      	cmp	r6, r9
 801c9e0:	dd26      	ble.n	801ca30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c9e2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c9e6:	d423      	bmi.n	801ca30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c9e8:	68e9      	ldr	r1, [r5, #12]
 801c9ea:	4559      	cmp	r1, fp
 801c9ec:	dd20      	ble.n	801ca30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c9ee:	fa0f fe86 	sxth.w	lr, r6
 801c9f2:	9902      	ldr	r1, [sp, #8]
 801c9f4:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c9f8:	f06f 0101 	mvn.w	r1, #1
 801c9fc:	f81e e009 	ldrb.w	lr, [lr, r9]
 801ca00:	fb01 f908 	mul.w	r9, r1, r8
 801ca04:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801ca08:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ca0c:	eb07 060e 	add.w	r6, r7, lr
 801ca10:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ca14:	7876      	ldrb	r6, [r6, #1]
 801ca16:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801ca1a:	00f6      	lsls	r6, r6, #3
 801ca1c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ca20:	ea4b 0606 	orr.w	r6, fp, r6
 801ca24:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801ca28:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801ca2c:	f82a 6009 	strh.w	r6, [sl, r9]
 801ca30:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ca32:	4460      	add	r0, ip
 801ca34:	f108 38ff 	add.w	r8, r8, #4294967295
 801ca38:	440a      	add	r2, r1
 801ca3a:	e757      	b.n	801c8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ca3c:	b005      	add	sp, #20
 801ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca42:	bf00      	nop
 801ca44:	fffff800 	.word	0xfffff800

0801ca48 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca4c:	b087      	sub	sp, #28
 801ca4e:	468b      	mov	fp, r1
 801ca50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca54:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ca56:	9204      	str	r2, [sp, #16]
 801ca58:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ca5c:	6841      	ldr	r1, [r0, #4]
 801ca5e:	9205      	str	r2, [sp, #20]
 801ca60:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ca64:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ca68:	fb01 2404 	mla	r4, r1, r4, r2
 801ca6c:	6802      	ldr	r2, [r0, #0]
 801ca6e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ca72:	f8dc 2000 	ldr.w	r2, [ip]
 801ca76:	9201      	str	r2, [sp, #4]
 801ca78:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ca7c:	3204      	adds	r2, #4
 801ca7e:	9202      	str	r2, [sp, #8]
 801ca80:	f1bb 0f00 	cmp.w	fp, #0
 801ca84:	dc03      	bgt.n	801ca8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ca86:	9a04      	ldr	r2, [sp, #16]
 801ca88:	2a00      	cmp	r2, #0
 801ca8a:	f340 8138 	ble.w	801ccfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ca8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ca90:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ca94:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ca98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca9a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801ca9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	dd0e      	ble.n	801cac4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801caa6:	1402      	asrs	r2, r0, #16
 801caa8:	d405      	bmi.n	801cab6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801caaa:	42ba      	cmp	r2, r7
 801caac:	da03      	bge.n	801cab6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801caae:	140a      	asrs	r2, r1, #16
 801cab0:	d401      	bmi.n	801cab6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cab2:	42b2      	cmp	r2, r6
 801cab4:	db07      	blt.n	801cac6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cab6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cab8:	3b01      	subs	r3, #1
 801caba:	3402      	adds	r4, #2
 801cabc:	4410      	add	r0, r2
 801cabe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cac0:	4411      	add	r1, r2
 801cac2:	e7ee      	b.n	801caa2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cac4:	d019      	beq.n	801cafa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801cac6:	1e5a      	subs	r2, r3, #1
 801cac8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801caca:	fb05 0502 	mla	r5, r5, r2, r0
 801cace:	142d      	asrs	r5, r5, #16
 801cad0:	d409      	bmi.n	801cae6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cad2:	42bd      	cmp	r5, r7
 801cad4:	da07      	bge.n	801cae6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cad6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cad8:	fb05 1202 	mla	r2, r5, r2, r1
 801cadc:	1412      	asrs	r2, r2, #16
 801cade:	d402      	bmi.n	801cae6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cae0:	42b2      	cmp	r2, r6
 801cae2:	f2c0 80ac 	blt.w	801cc3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801cae6:	f04f 0e00 	mov.w	lr, #0
 801caea:	eb03 020e 	add.w	r2, r3, lr
 801caee:	2a00      	cmp	r2, #0
 801caf0:	dc3e      	bgt.n	801cb70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801caf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801caf6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cafa:	f1bb 0f00 	cmp.w	fp, #0
 801cafe:	f340 80fe 	ble.w	801ccfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cb02:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cb08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb0c:	f1bb 0b01 	subs.w	fp, fp, #1
 801cb10:	eeb0 6a62 	vmov.f32	s12, s5
 801cb14:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb18:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb20:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cb24:	eeb0 6a43 	vmov.f32	s12, s6
 801cb28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb2c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cb30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb34:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb38:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb48:	ee12 2a90 	vmov	r2, s5
 801cb4c:	eef0 2a47 	vmov.f32	s5, s14
 801cb50:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb54:	ee13 2a10 	vmov	r2, s6
 801cb58:	9313      	str	r3, [sp, #76]	; 0x4c
 801cb5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cb5c:	eeb0 3a67 	vmov.f32	s6, s15
 801cb60:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb64:	9a04      	ldr	r2, [sp, #16]
 801cb66:	9314      	str	r3, [sp, #80]	; 0x50
 801cb68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cb6a:	bf08      	it	eq
 801cb6c:	4613      	moveq	r3, r2
 801cb6e:	e787      	b.n	801ca80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801cb70:	1406      	asrs	r6, r0, #16
 801cb72:	d45d      	bmi.n	801cc30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cb74:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801cb78:	42b5      	cmp	r5, r6
 801cb7a:	dd59      	ble.n	801cc30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cb7c:	140f      	asrs	r7, r1, #16
 801cb7e:	d457      	bmi.n	801cc30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cb80:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cb84:	42ba      	cmp	r2, r7
 801cb86:	dd53      	ble.n	801cc30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cb88:	9a01      	ldr	r2, [sp, #4]
 801cb8a:	b22d      	sxth	r5, r5
 801cb8c:	fb07 2505 	mla	r5, r7, r5, r2
 801cb90:	5daa      	ldrb	r2, [r5, r6]
 801cb92:	9d02      	ldr	r5, [sp, #8]
 801cb94:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801cb98:	0e2e      	lsrs	r6, r5, #24
 801cb9a:	d049      	beq.n	801cc30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cb9c:	f06f 0201 	mvn.w	r2, #1
 801cba0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cba4:	fb02 f20e 	mul.w	r2, r2, lr
 801cba8:	f834 8002 	ldrh.w	r8, [r4, r2]
 801cbac:	9203      	str	r2, [sp, #12]
 801cbae:	9a05      	ldr	r2, [sp, #20]
 801cbb0:	ea4f 2728 	mov.w	r7, r8, asr #8
 801cbb4:	4356      	muls	r6, r2
 801cbb6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cbba:	1c72      	adds	r2, r6, #1
 801cbbc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801cbc0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cbc4:	b2ed      	uxtb	r5, r5
 801cbc6:	1212      	asrs	r2, r2, #8
 801cbc8:	fa1f f982 	uxth.w	r9, r2
 801cbcc:	43d2      	mvns	r2, r2
 801cbce:	fb16 f609 	smulbb	r6, r6, r9
 801cbd2:	b2d2      	uxtb	r2, r2
 801cbd4:	fb15 f509 	smulbb	r5, r5, r9
 801cbd8:	fb07 6702 	mla	r7, r7, r2, r6
 801cbdc:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801cbe0:	fb1a fa09 	smulbb	sl, sl, r9
 801cbe4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cbe8:	b2bf      	uxth	r7, r7
 801cbea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cbee:	fa5f f888 	uxtb.w	r8, r8
 801cbf2:	fb06 a602 	mla	r6, r6, r2, sl
 801cbf6:	fb08 5502 	mla	r5, r8, r2, r5
 801cbfa:	1c7a      	adds	r2, r7, #1
 801cbfc:	b2b6      	uxth	r6, r6
 801cbfe:	b2ad      	uxth	r5, r5
 801cc00:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cc04:	9a03      	ldr	r2, [sp, #12]
 801cc06:	f105 0a01 	add.w	sl, r5, #1
 801cc0a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801cc0e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cc12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cc16:	ea4a 0707 	orr.w	r7, sl, r7
 801cc1a:	f106 0a01 	add.w	sl, r6, #1
 801cc1e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cc22:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cc26:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cc2a:	ea47 070a 	orr.w	r7, r7, sl
 801cc2e:	52a7      	strh	r7, [r4, r2]
 801cc30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc32:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cc36:	4410      	add	r0, r2
 801cc38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cc3a:	4411      	add	r1, r2
 801cc3c:	e755      	b.n	801caea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cc3e:	f04f 0800 	mov.w	r8, #0
 801cc42:	eba3 0208 	sub.w	r2, r3, r8
 801cc46:	2a00      	cmp	r2, #0
 801cc48:	f77f af53 	ble.w	801caf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cc4c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801cc50:	140a      	asrs	r2, r1, #16
 801cc52:	9f01      	ldr	r7, [sp, #4]
 801cc54:	1405      	asrs	r5, r0, #16
 801cc56:	fb06 7202 	mla	r2, r6, r2, r7
 801cc5a:	5d52      	ldrb	r2, [r2, r5]
 801cc5c:	9d02      	ldr	r5, [sp, #8]
 801cc5e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801cc62:	0e2e      	lsrs	r6, r5, #24
 801cc64:	d044      	beq.n	801ccf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801cc66:	9a05      	ldr	r2, [sp, #20]
 801cc68:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cc6c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801cc70:	4356      	muls	r6, r2
 801cc72:	ea4f 272e 	mov.w	r7, lr, asr #8
 801cc76:	1c72      	adds	r2, r6, #1
 801cc78:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cc7c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801cc80:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cc84:	b2ed      	uxtb	r5, r5
 801cc86:	1212      	asrs	r2, r2, #8
 801cc88:	fa1f f982 	uxth.w	r9, r2
 801cc8c:	43d2      	mvns	r2, r2
 801cc8e:	fb16 f609 	smulbb	r6, r6, r9
 801cc92:	b2d2      	uxtb	r2, r2
 801cc94:	fb15 f509 	smulbb	r5, r5, r9
 801cc98:	fb07 6702 	mla	r7, r7, r2, r6
 801cc9c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cca0:	fb1a fa09 	smulbb	sl, sl, r9
 801cca4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cca8:	b2bf      	uxth	r7, r7
 801ccaa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ccae:	fa5f fe8e 	uxtb.w	lr, lr
 801ccb2:	fb06 a602 	mla	r6, r6, r2, sl
 801ccb6:	fb0e 5502 	mla	r5, lr, r2, r5
 801ccba:	1c7a      	adds	r2, r7, #1
 801ccbc:	b2b6      	uxth	r6, r6
 801ccbe:	b2ad      	uxth	r5, r5
 801ccc0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ccc4:	f105 0a01 	add.w	sl, r5, #1
 801ccc8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801cccc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ccd0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ccd4:	ea4a 0707 	orr.w	r7, sl, r7
 801ccd8:	f106 0a01 	add.w	sl, r6, #1
 801ccdc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cce0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cce4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cce8:	ea47 070a 	orr.w	r7, r7, sl
 801ccec:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ccf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ccf2:	f108 0801 	add.w	r8, r8, #1
 801ccf6:	4410      	add	r0, r2
 801ccf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ccfa:	4411      	add	r1, r2
 801ccfc:	e7a1      	b.n	801cc42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ccfe:	b007      	add	sp, #28
 801cd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd08:	b085      	sub	sp, #20
 801cd0a:	468b      	mov	fp, r1
 801cd0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cd12:	9203      	str	r2, [sp, #12]
 801cd14:	6841      	ldr	r1, [r0, #4]
 801cd16:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801cd1a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cd1e:	fb01 2404 	mla	r4, r1, r4, r2
 801cd22:	6802      	ldr	r2, [r0, #0]
 801cd24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cd28:	f8de 2000 	ldr.w	r2, [lr]
 801cd2c:	9200      	str	r2, [sp, #0]
 801cd2e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cd32:	3204      	adds	r2, #4
 801cd34:	9201      	str	r2, [sp, #4]
 801cd36:	f1bb 0f00 	cmp.w	fp, #0
 801cd3a:	dc03      	bgt.n	801cd44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cd3c:	9a03      	ldr	r2, [sp, #12]
 801cd3e:	2a00      	cmp	r2, #0
 801cd40:	f340 8153 	ble.w	801cfea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801cd44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd46:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cd4a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cd4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd50:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801cd54:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	dd0e      	ble.n	801cd7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cd5c:	1408      	asrs	r0, r1, #16
 801cd5e:	d405      	bmi.n	801cd6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd60:	42b8      	cmp	r0, r7
 801cd62:	da03      	bge.n	801cd6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd64:	1410      	asrs	r0, r2, #16
 801cd66:	d401      	bmi.n	801cd6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd68:	42b0      	cmp	r0, r6
 801cd6a:	db07      	blt.n	801cd7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801cd6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cd6e:	3b01      	subs	r3, #1
 801cd70:	3402      	adds	r4, #2
 801cd72:	4401      	add	r1, r0
 801cd74:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cd76:	4402      	add	r2, r0
 801cd78:	e7ee      	b.n	801cd58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cd7a:	d017      	beq.n	801cdac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cd7c:	1e58      	subs	r0, r3, #1
 801cd7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cd80:	fb05 1500 	mla	r5, r5, r0, r1
 801cd84:	142d      	asrs	r5, r5, #16
 801cd86:	d409      	bmi.n	801cd9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cd88:	42bd      	cmp	r5, r7
 801cd8a:	da07      	bge.n	801cd9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cd8c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cd8e:	fb05 2000 	mla	r0, r5, r0, r2
 801cd92:	1400      	asrs	r0, r0, #16
 801cd94:	d402      	bmi.n	801cd9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cd96:	42b0      	cmp	r0, r6
 801cd98:	f2c0 80bc 	blt.w	801cf14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801cd9c:	2600      	movs	r6, #0
 801cd9e:	1998      	adds	r0, r3, r6
 801cda0:	2800      	cmp	r0, #0
 801cda2:	dc3e      	bgt.n	801ce22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cda4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cda8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cdac:	f1bb 0f00 	cmp.w	fp, #0
 801cdb0:	f340 811b 	ble.w	801cfea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801cdb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cdb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cdbe:	f1bb 0b01 	subs.w	fp, fp, #1
 801cdc2:	eeb0 6a62 	vmov.f32	s12, s5
 801cdc6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cdca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdd2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cdd6:	eeb0 6a43 	vmov.f32	s12, s6
 801cdda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdde:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cde2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cde6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdf6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdfa:	ee12 2a90 	vmov	r2, s5
 801cdfe:	eef0 2a47 	vmov.f32	s5, s14
 801ce02:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce06:	ee13 2a10 	vmov	r2, s6
 801ce0a:	9311      	str	r3, [sp, #68]	; 0x44
 801ce0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce0e:	eeb0 3a67 	vmov.f32	s6, s15
 801ce12:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce16:	9a03      	ldr	r2, [sp, #12]
 801ce18:	9312      	str	r3, [sp, #72]	; 0x48
 801ce1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce1c:	bf08      	it	eq
 801ce1e:	4613      	moveq	r3, r2
 801ce20:	e789      	b.n	801cd36 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ce22:	140f      	asrs	r7, r1, #16
 801ce24:	d426      	bmi.n	801ce74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ce26:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ce2a:	42bd      	cmp	r5, r7
 801ce2c:	dd22      	ble.n	801ce74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ce2e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ce32:	d41f      	bmi.n	801ce74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ce34:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ce38:	4560      	cmp	r0, ip
 801ce3a:	dd1b      	ble.n	801ce74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ce3c:	9800      	ldr	r0, [sp, #0]
 801ce3e:	b22d      	sxth	r5, r5
 801ce40:	fb0c 0505 	mla	r5, ip, r5, r0
 801ce44:	5de8      	ldrb	r0, [r5, r7]
 801ce46:	9d01      	ldr	r5, [sp, #4]
 801ce48:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ce4c:	0e07      	lsrs	r7, r0, #24
 801ce4e:	2fff      	cmp	r7, #255	; 0xff
 801ce50:	d116      	bne.n	801ce80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ce52:	f06f 0501 	mvn.w	r5, #1
 801ce56:	fb05 f706 	mul.w	r7, r5, r6
 801ce5a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ce5e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ce62:	0945      	lsrs	r5, r0, #5
 801ce64:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ce68:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ce6c:	ea4c 0505 	orr.w	r5, ip, r5
 801ce70:	4305      	orrs	r5, r0
 801ce72:	53e5      	strh	r5, [r4, r7]
 801ce74:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ce76:	3e01      	subs	r6, #1
 801ce78:	4401      	add	r1, r0
 801ce7a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ce7c:	4402      	add	r2, r0
 801ce7e:	e78e      	b.n	801cd9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ce80:	b2fd      	uxtb	r5, r7
 801ce82:	2f00      	cmp	r7, #0
 801ce84:	d0f6      	beq.n	801ce74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ce86:	f06f 0701 	mvn.w	r7, #1
 801ce8a:	fa1f f985 	uxth.w	r9, r5
 801ce8e:	43ed      	mvns	r5, r5
 801ce90:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ce94:	4377      	muls	r7, r6
 801ce96:	fb1a fa09 	smulbb	sl, sl, r9
 801ce9a:	b2ed      	uxtb	r5, r5
 801ce9c:	f834 8007 	ldrh.w	r8, [r4, r7]
 801cea0:	9702      	str	r7, [sp, #8]
 801cea2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801cea6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ceaa:	fb17 f709 	smulbb	r7, r7, r9
 801ceae:	b2c0      	uxtb	r0, r0
 801ceb0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ceb4:	fb10 f009 	smulbb	r0, r0, r9
 801ceb8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801cebc:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801cec0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cec4:	fa1f fc8c 	uxth.w	ip, ip
 801cec8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cecc:	fa5f f888 	uxtb.w	r8, r8
 801ced0:	fb07 a705 	mla	r7, r7, r5, sl
 801ced4:	fb08 0005 	mla	r0, r8, r5, r0
 801ced8:	f10c 0501 	add.w	r5, ip, #1
 801cedc:	b2bf      	uxth	r7, r7
 801cede:	b280      	uxth	r0, r0
 801cee0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cee4:	f100 0a01 	add.w	sl, r0, #1
 801cee8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ceec:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801cef0:	9802      	ldr	r0, [sp, #8]
 801cef2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cef6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cefa:	f107 0a01 	add.w	sl, r7, #1
 801cefe:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cf02:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cf06:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cf0a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cf0e:	f824 c000 	strh.w	ip, [r4, r0]
 801cf12:	e7af      	b.n	801ce74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cf14:	f04f 0800 	mov.w	r8, #0
 801cf18:	eba3 0008 	sub.w	r0, r3, r8
 801cf1c:	2800      	cmp	r0, #0
 801cf1e:	f77f af41 	ble.w	801cda4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cf22:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801cf26:	1410      	asrs	r0, r2, #16
 801cf28:	9f00      	ldr	r7, [sp, #0]
 801cf2a:	140d      	asrs	r5, r1, #16
 801cf2c:	fb06 7000 	mla	r0, r6, r0, r7
 801cf30:	5d40      	ldrb	r0, [r0, r5]
 801cf32:	9d01      	ldr	r5, [sp, #4]
 801cf34:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801cf38:	0e2e      	lsrs	r6, r5, #24
 801cf3a:	2eff      	cmp	r6, #255	; 0xff
 801cf3c:	d112      	bne.n	801cf64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801cf3e:	482c      	ldr	r0, [pc, #176]	; (801cff0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801cf40:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801cf44:	0968      	lsrs	r0, r5, #5
 801cf46:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801cf4a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cf4e:	4330      	orrs	r0, r6
 801cf50:	4328      	orrs	r0, r5
 801cf52:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801cf56:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cf58:	f108 0801 	add.w	r8, r8, #1
 801cf5c:	4401      	add	r1, r0
 801cf5e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cf60:	4402      	add	r2, r0
 801cf62:	e7d9      	b.n	801cf18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801cf64:	b2f0      	uxtb	r0, r6
 801cf66:	2e00      	cmp	r6, #0
 801cf68:	d0f5      	beq.n	801cf56 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801cf6a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801cf6e:	fa1f f980 	uxth.w	r9, r0
 801cf72:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cf76:	43c0      	mvns	r0, r0
 801cf78:	ea4f 272c 	mov.w	r7, ip, asr #8
 801cf7c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cf80:	fb16 f609 	smulbb	r6, r6, r9
 801cf84:	b2c0      	uxtb	r0, r0
 801cf86:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cf8a:	b2ed      	uxtb	r5, r5
 801cf8c:	fb1a fa09 	smulbb	sl, sl, r9
 801cf90:	fb07 6700 	mla	r7, r7, r0, r6
 801cf94:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801cf98:	fb15 f509 	smulbb	r5, r5, r9
 801cf9c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801cfa0:	b2bf      	uxth	r7, r7
 801cfa2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cfa6:	fa5f fc8c 	uxtb.w	ip, ip
 801cfaa:	fb06 a600 	mla	r6, r6, r0, sl
 801cfae:	fb0c 5500 	mla	r5, ip, r0, r5
 801cfb2:	1c78      	adds	r0, r7, #1
 801cfb4:	b2b6      	uxth	r6, r6
 801cfb6:	b2ad      	uxth	r5, r5
 801cfb8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801cfbc:	f105 0a01 	add.w	sl, r5, #1
 801cfc0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801cfc4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cfc8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cfcc:	ea4a 0707 	orr.w	r7, sl, r7
 801cfd0:	f106 0a01 	add.w	sl, r6, #1
 801cfd4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cfd8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cfdc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cfe0:	ea47 070a 	orr.w	r7, r7, sl
 801cfe4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801cfe8:	e7b5      	b.n	801cf56 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801cfea:	b005      	add	sp, #20
 801cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cff0:	fffff800 	.word	0xfffff800

0801cff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff8:	b087      	sub	sp, #28
 801cffa:	468b      	mov	fp, r1
 801cffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d000:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d002:	9204      	str	r2, [sp, #16]
 801d004:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d008:	6861      	ldr	r1, [r4, #4]
 801d00a:	9205      	str	r2, [sp, #20]
 801d00c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801d010:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801d014:	fb01 2000 	mla	r0, r1, r0, r2
 801d018:	6822      	ldr	r2, [r4, #0]
 801d01a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801d01e:	f8de 2000 	ldr.w	r2, [lr]
 801d022:	9201      	str	r2, [sp, #4]
 801d024:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d028:	9202      	str	r2, [sp, #8]
 801d02a:	f1bb 0f00 	cmp.w	fp, #0
 801d02e:	dc03      	bgt.n	801d038 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d030:	9a04      	ldr	r2, [sp, #16]
 801d032:	2a00      	cmp	r2, #0
 801d034:	f340 8142 	ble.w	801d2bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801d038:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d03a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d03e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d042:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d044:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801d048:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	dd0e      	ble.n	801d06e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d050:	140c      	asrs	r4, r1, #16
 801d052:	d405      	bmi.n	801d060 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d054:	42bc      	cmp	r4, r7
 801d056:	da03      	bge.n	801d060 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d058:	1414      	asrs	r4, r2, #16
 801d05a:	d401      	bmi.n	801d060 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d05c:	42b4      	cmp	r4, r6
 801d05e:	db07      	blt.n	801d070 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d060:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d062:	3b01      	subs	r3, #1
 801d064:	3002      	adds	r0, #2
 801d066:	4421      	add	r1, r4
 801d068:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d06a:	4422      	add	r2, r4
 801d06c:	e7ee      	b.n	801d04c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d06e:	d019      	beq.n	801d0a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801d070:	1e5c      	subs	r4, r3, #1
 801d072:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d074:	fb05 1504 	mla	r5, r5, r4, r1
 801d078:	142d      	asrs	r5, r5, #16
 801d07a:	d409      	bmi.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d07c:	42bd      	cmp	r5, r7
 801d07e:	da07      	bge.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d080:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d082:	fb05 2404 	mla	r4, r5, r4, r2
 801d086:	1424      	asrs	r4, r4, #16
 801d088:	d402      	bmi.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d08a:	42b4      	cmp	r4, r6
 801d08c:	f2c0 80b1 	blt.w	801d1f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801d090:	f04f 0800 	mov.w	r8, #0
 801d094:	eb03 0408 	add.w	r4, r3, r8
 801d098:	2c00      	cmp	r4, #0
 801d09a:	dc3e      	bgt.n	801d11a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d09c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d0a4:	f1bb 0f00 	cmp.w	fp, #0
 801d0a8:	f340 8108 	ble.w	801d2bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801d0ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0b6:	f1bb 0b01 	subs.w	fp, fp, #1
 801d0ba:	eeb0 6a62 	vmov.f32	s12, s5
 801d0be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d0c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0ca:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d0ce:	eeb0 6a43 	vmov.f32	s12, s6
 801d0d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0d6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d0da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0de:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d0f2:	ee12 2a90 	vmov	r2, s5
 801d0f6:	eef0 2a47 	vmov.f32	s5, s14
 801d0fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0fe:	ee13 2a10 	vmov	r2, s6
 801d102:	9313      	str	r3, [sp, #76]	; 0x4c
 801d104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d106:	eeb0 3a67 	vmov.f32	s6, s15
 801d10a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d10e:	9a04      	ldr	r2, [sp, #16]
 801d110:	9314      	str	r3, [sp, #80]	; 0x50
 801d112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d114:	bf08      	it	eq
 801d116:	4613      	moveq	r3, r2
 801d118:	e787      	b.n	801d02a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d11a:	140e      	asrs	r6, r1, #16
 801d11c:	d462      	bmi.n	801d1e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d11e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d122:	42b5      	cmp	r5, r6
 801d124:	dd5e      	ble.n	801d1e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d126:	1417      	asrs	r7, r2, #16
 801d128:	d45c      	bmi.n	801d1e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d12a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801d12e:	42bc      	cmp	r4, r7
 801d130:	dd58      	ble.n	801d1e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d132:	b22d      	sxth	r5, r5
 801d134:	9c02      	ldr	r4, [sp, #8]
 801d136:	fb07 6505 	mla	r5, r7, r5, r6
 801d13a:	5d66      	ldrb	r6, [r4, r5]
 801d13c:	2e00      	cmp	r6, #0
 801d13e:	d051      	beq.n	801d1e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d140:	9c01      	ldr	r4, [sp, #4]
 801d142:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801d146:	f06f 0401 	mvn.w	r4, #1
 801d14a:	fb04 f408 	mul.w	r4, r4, r8
 801d14e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801d152:	5b05      	ldrh	r5, [r0, r4]
 801d154:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d158:	9403      	str	r4, [sp, #12]
 801d15a:	9c05      	ldr	r4, [sp, #20]
 801d15c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d160:	4366      	muls	r6, r4
 801d162:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d166:	1c74      	adds	r4, r6, #1
 801d168:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801d16c:	122e      	asrs	r6, r5, #8
 801d16e:	1224      	asrs	r4, r4, #8
 801d170:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d174:	00ed      	lsls	r5, r5, #3
 801d176:	b2a7      	uxth	r7, r4
 801d178:	43e4      	mvns	r4, r4
 801d17a:	b2ed      	uxtb	r5, r5
 801d17c:	b2e4      	uxtb	r4, r4
 801d17e:	fb16 f604 	smulbb	r6, r6, r4
 801d182:	fb15 f504 	smulbb	r5, r5, r4
 801d186:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d18a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801d18e:	fb1a fa04 	smulbb	sl, sl, r4
 801d192:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801d196:	fa1f fc8c 	uxth.w	ip, ip
 801d19a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d19e:	fa5f f989 	uxtb.w	r9, r9
 801d1a2:	fb06 a607 	mla	r6, r6, r7, sl
 801d1a6:	f10c 0401 	add.w	r4, ip, #1
 801d1aa:	fb09 5507 	mla	r5, r9, r7, r5
 801d1ae:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d1b2:	9c03      	ldr	r4, [sp, #12]
 801d1b4:	b2ad      	uxth	r5, r5
 801d1b6:	b2b6      	uxth	r6, r6
 801d1b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d1bc:	f105 0a01 	add.w	sl, r5, #1
 801d1c0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d1c4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d1c8:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d1cc:	f106 0a01 	add.w	sl, r6, #1
 801d1d0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d1d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d1d8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d1dc:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d1e0:	f820 c004 	strh.w	ip, [r0, r4]
 801d1e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d1e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801d1ea:	4421      	add	r1, r4
 801d1ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d1ee:	4422      	add	r2, r4
 801d1f0:	e750      	b.n	801d094 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d1f2:	f04f 0900 	mov.w	r9, #0
 801d1f6:	eba3 0409 	sub.w	r4, r3, r9
 801d1fa:	2c00      	cmp	r4, #0
 801d1fc:	f77f af4e 	ble.w	801d09c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d200:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801d204:	140d      	asrs	r5, r1, #16
 801d206:	1414      	asrs	r4, r2, #16
 801d208:	fb06 5404 	mla	r4, r6, r4, r5
 801d20c:	9d02      	ldr	r5, [sp, #8]
 801d20e:	5d2e      	ldrb	r6, [r5, r4]
 801d210:	2e00      	cmp	r6, #0
 801d212:	d04c      	beq.n	801d2ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d214:	9d01      	ldr	r5, [sp, #4]
 801d216:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801d21a:	9c05      	ldr	r4, [sp, #20]
 801d21c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801d220:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801d224:	4366      	muls	r6, r4
 801d226:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d22a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d22e:	1c74      	adds	r4, r6, #1
 801d230:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d234:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801d238:	122e      	asrs	r6, r5, #8
 801d23a:	1224      	asrs	r4, r4, #8
 801d23c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d240:	00ed      	lsls	r5, r5, #3
 801d242:	b2a7      	uxth	r7, r4
 801d244:	43e4      	mvns	r4, r4
 801d246:	b2ed      	uxtb	r5, r5
 801d248:	b2e4      	uxtb	r4, r4
 801d24a:	fb16 f604 	smulbb	r6, r6, r4
 801d24e:	fb15 f504 	smulbb	r5, r5, r4
 801d252:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d256:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d25a:	fb1a fa04 	smulbb	sl, sl, r4
 801d25e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d262:	fa1f fc8c 	uxth.w	ip, ip
 801d266:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d26a:	fa5f f888 	uxtb.w	r8, r8
 801d26e:	fb06 a607 	mla	r6, r6, r7, sl
 801d272:	f10c 0401 	add.w	r4, ip, #1
 801d276:	fb08 5507 	mla	r5, r8, r7, r5
 801d27a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d27e:	b2ad      	uxth	r5, r5
 801d280:	b2b6      	uxth	r6, r6
 801d282:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d286:	f105 0a01 	add.w	sl, r5, #1
 801d28a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d28e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d292:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d296:	f106 0a01 	add.w	sl, r6, #1
 801d29a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d29e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d2a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d2a6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d2aa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d2ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d2b0:	f109 0901 	add.w	r9, r9, #1
 801d2b4:	4421      	add	r1, r4
 801d2b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d2b8:	4422      	add	r2, r4
 801d2ba:	e79c      	b.n	801d1f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d2bc:	b007      	add	sp, #28
 801d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2c6:	b085      	sub	sp, #20
 801d2c8:	468b      	mov	fp, r1
 801d2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d2d0:	9203      	str	r2, [sp, #12]
 801d2d2:	6861      	ldr	r1, [r4, #4]
 801d2d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801d2d8:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801d2dc:	fb01 2000 	mla	r0, r1, r0, r2
 801d2e0:	6822      	ldr	r2, [r4, #0]
 801d2e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801d2e6:	f8d8 2000 	ldr.w	r2, [r8]
 801d2ea:	9200      	str	r2, [sp, #0]
 801d2ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d2f0:	9201      	str	r2, [sp, #4]
 801d2f2:	f1bb 0f00 	cmp.w	fp, #0
 801d2f6:	dc03      	bgt.n	801d300 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d2f8:	9a03      	ldr	r2, [sp, #12]
 801d2fa:	2a00      	cmp	r2, #0
 801d2fc:	f340 8146 	ble.w	801d58c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d302:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d306:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d30a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d30c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d310:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d314:	2b00      	cmp	r3, #0
 801d316:	dd0e      	ble.n	801d336 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d318:	140c      	asrs	r4, r1, #16
 801d31a:	d405      	bmi.n	801d328 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d31c:	42bc      	cmp	r4, r7
 801d31e:	da03      	bge.n	801d328 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d320:	1414      	asrs	r4, r2, #16
 801d322:	d401      	bmi.n	801d328 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d324:	42b4      	cmp	r4, r6
 801d326:	db07      	blt.n	801d338 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d328:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d32a:	3b01      	subs	r3, #1
 801d32c:	3002      	adds	r0, #2
 801d32e:	4421      	add	r1, r4
 801d330:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d332:	4422      	add	r2, r4
 801d334:	e7ee      	b.n	801d314 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d336:	d017      	beq.n	801d368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d338:	1e5c      	subs	r4, r3, #1
 801d33a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d33c:	fb05 1504 	mla	r5, r5, r4, r1
 801d340:	142d      	asrs	r5, r5, #16
 801d342:	d409      	bmi.n	801d358 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d344:	42bd      	cmp	r5, r7
 801d346:	da07      	bge.n	801d358 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d348:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d34a:	fb05 2404 	mla	r4, r5, r4, r2
 801d34e:	1424      	asrs	r4, r4, #16
 801d350:	d402      	bmi.n	801d358 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d352:	42b4      	cmp	r4, r6
 801d354:	f2c0 80b3 	blt.w	801d4be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801d358:	2600      	movs	r6, #0
 801d35a:	199c      	adds	r4, r3, r6
 801d35c:	2c00      	cmp	r4, #0
 801d35e:	dc3e      	bgt.n	801d3de <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d360:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d364:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d368:	f1bb 0f00 	cmp.w	fp, #0
 801d36c:	f340 810e 	ble.w	801d58c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d370:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d376:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d37a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d37e:	eeb0 6a62 	vmov.f32	s12, s5
 801d382:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d386:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d38a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d38e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d392:	eeb0 6a43 	vmov.f32	s12, s6
 801d396:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d39a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d39e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3b6:	ee12 2a90 	vmov	r2, s5
 801d3ba:	eef0 2a47 	vmov.f32	s5, s14
 801d3be:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3c2:	ee13 2a10 	vmov	r2, s6
 801d3c6:	9311      	str	r3, [sp, #68]	; 0x44
 801d3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3ca:	eeb0 3a67 	vmov.f32	s6, s15
 801d3ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3d2:	9a03      	ldr	r2, [sp, #12]
 801d3d4:	9312      	str	r3, [sp, #72]	; 0x48
 801d3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3d8:	bf08      	it	eq
 801d3da:	4613      	moveq	r3, r2
 801d3dc:	e789      	b.n	801d2f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d3de:	140f      	asrs	r7, r1, #16
 801d3e0:	d418      	bmi.n	801d414 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d3e6:	42bd      	cmp	r5, r7
 801d3e8:	dd14      	ble.n	801d414 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3ea:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d3ee:	d411      	bmi.n	801d414 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3f0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801d3f4:	4564      	cmp	r4, ip
 801d3f6:	dd0d      	ble.n	801d414 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3f8:	b22d      	sxth	r5, r5
 801d3fa:	9c01      	ldr	r4, [sp, #4]
 801d3fc:	fb0c 7505 	mla	r5, ip, r5, r7
 801d400:	5d64      	ldrb	r4, [r4, r5]
 801d402:	2cff      	cmp	r4, #255	; 0xff
 801d404:	d10c      	bne.n	801d420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d406:	9c00      	ldr	r4, [sp, #0]
 801d408:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801d40c:	f06f 0401 	mvn.w	r4, #1
 801d410:	4374      	muls	r4, r6
 801d412:	5305      	strh	r5, [r0, r4]
 801d414:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d416:	3e01      	subs	r6, #1
 801d418:	4421      	add	r1, r4
 801d41a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d41c:	4422      	add	r2, r4
 801d41e:	e79c      	b.n	801d35a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d420:	2c00      	cmp	r4, #0
 801d422:	d0f7      	beq.n	801d414 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d424:	9f00      	ldr	r7, [sp, #0]
 801d426:	fa1f fc84 	uxth.w	ip, r4
 801d42a:	43e4      	mvns	r4, r4
 801d42c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801d430:	f06f 0501 	mvn.w	r5, #1
 801d434:	b2e4      	uxtb	r4, r4
 801d436:	4375      	muls	r5, r6
 801d438:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801d43c:	9502      	str	r5, [sp, #8]
 801d43e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d442:	5b45      	ldrh	r5, [r0, r5]
 801d444:	122f      	asrs	r7, r5, #8
 801d446:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d44a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d44e:	00ed      	lsls	r5, r5, #3
 801d450:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d454:	fb17 f704 	smulbb	r7, r7, r4
 801d458:	b2ed      	uxtb	r5, r5
 801d45a:	fb1a fa04 	smulbb	sl, sl, r4
 801d45e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801d462:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801d466:	fb15 f504 	smulbb	r5, r5, r4
 801d46a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801d46e:	fa1f fe8e 	uxth.w	lr, lr
 801d472:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d476:	fa5f f989 	uxtb.w	r9, r9
 801d47a:	fb07 a70c 	mla	r7, r7, ip, sl
 801d47e:	f10e 0401 	add.w	r4, lr, #1
 801d482:	fb09 550c 	mla	r5, r9, ip, r5
 801d486:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801d48a:	9c02      	ldr	r4, [sp, #8]
 801d48c:	b2ad      	uxth	r5, r5
 801d48e:	b2bf      	uxth	r7, r7
 801d490:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d494:	f105 0a01 	add.w	sl, r5, #1
 801d498:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d49c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d4a0:	ea4a 0e0e 	orr.w	lr, sl, lr
 801d4a4:	f107 0a01 	add.w	sl, r7, #1
 801d4a8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d4ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d4b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d4b4:	ea4e 0e0a 	orr.w	lr, lr, sl
 801d4b8:	f820 e004 	strh.w	lr, [r0, r4]
 801d4bc:	e7aa      	b.n	801d414 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d4be:	f04f 0900 	mov.w	r9, #0
 801d4c2:	eba3 0409 	sub.w	r4, r3, r9
 801d4c6:	2c00      	cmp	r4, #0
 801d4c8:	f77f af4a 	ble.w	801d360 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d4cc:	1414      	asrs	r4, r2, #16
 801d4ce:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d4d2:	140d      	asrs	r5, r1, #16
 801d4d4:	fb06 5504 	mla	r5, r6, r4, r5
 801d4d8:	9c01      	ldr	r4, [sp, #4]
 801d4da:	5d64      	ldrb	r4, [r4, r5]
 801d4dc:	2cff      	cmp	r4, #255	; 0xff
 801d4de:	d10b      	bne.n	801d4f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d4e0:	9c00      	ldr	r4, [sp, #0]
 801d4e2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801d4e6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801d4ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d4ec:	f109 0901 	add.w	r9, r9, #1
 801d4f0:	4421      	add	r1, r4
 801d4f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d4f4:	4422      	add	r2, r4
 801d4f6:	e7e4      	b.n	801d4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d4f8:	2c00      	cmp	r4, #0
 801d4fa:	d0f6      	beq.n	801d4ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d4fc:	9e00      	ldr	r6, [sp, #0]
 801d4fe:	b2a7      	uxth	r7, r4
 801d500:	43e4      	mvns	r4, r4
 801d502:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801d506:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801d50a:	b2e4      	uxtb	r4, r4
 801d50c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d510:	122e      	asrs	r6, r5, #8
 801d512:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d516:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d51a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d51e:	00ed      	lsls	r5, r5, #3
 801d520:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d524:	fb16 f604 	smulbb	r6, r6, r4
 801d528:	b2ed      	uxtb	r5, r5
 801d52a:	fb1a fa04 	smulbb	sl, sl, r4
 801d52e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d532:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d536:	fb15 f504 	smulbb	r5, r5, r4
 801d53a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d53e:	fa1f fc8c 	uxth.w	ip, ip
 801d542:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d546:	fa5f fe8e 	uxtb.w	lr, lr
 801d54a:	fb06 a607 	mla	r6, r6, r7, sl
 801d54e:	f10c 0401 	add.w	r4, ip, #1
 801d552:	fb0e 5507 	mla	r5, lr, r7, r5
 801d556:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d55a:	b2ad      	uxth	r5, r5
 801d55c:	b2b6      	uxth	r6, r6
 801d55e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d562:	f105 0a01 	add.w	sl, r5, #1
 801d566:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d56a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d56e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d572:	f106 0a01 	add.w	sl, r6, #1
 801d576:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d57a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d57e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d582:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d586:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d58a:	e7ae      	b.n	801d4ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d58c:	b005      	add	sp, #20
 801d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d592 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d596:	b085      	sub	sp, #20
 801d598:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d59a:	9203      	str	r2, [sp, #12]
 801d59c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d5a0:	9100      	str	r1, [sp, #0]
 801d5a2:	9201      	str	r2, [sp, #4]
 801d5a4:	6841      	ldr	r1, [r0, #4]
 801d5a6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801d5aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d5ae:	fb01 2404 	mla	r4, r1, r4, r2
 801d5b2:	6802      	ldr	r2, [r0, #0]
 801d5b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d5b8:	f8de 2000 	ldr.w	r2, [lr]
 801d5bc:	9202      	str	r2, [sp, #8]
 801d5be:	9a01      	ldr	r2, [sp, #4]
 801d5c0:	43d6      	mvns	r6, r2
 801d5c2:	b2f6      	uxtb	r6, r6
 801d5c4:	9a00      	ldr	r2, [sp, #0]
 801d5c6:	2a00      	cmp	r2, #0
 801d5c8:	dc03      	bgt.n	801d5d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d5ca:	9a03      	ldr	r2, [sp, #12]
 801d5cc:	2a00      	cmp	r2, #0
 801d5ce:	f340 8124 	ble.w	801d81a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d5d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d5d4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d5d8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d5dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d5de:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d5e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	dd0e      	ble.n	801d608 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d5ea:	1408      	asrs	r0, r1, #16
 801d5ec:	d405      	bmi.n	801d5fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d5ee:	4560      	cmp	r0, ip
 801d5f0:	da03      	bge.n	801d5fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d5f2:	1410      	asrs	r0, r2, #16
 801d5f4:	d401      	bmi.n	801d5fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d5f6:	42b8      	cmp	r0, r7
 801d5f8:	db07      	blt.n	801d60a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d5fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d5fc:	3b01      	subs	r3, #1
 801d5fe:	3402      	adds	r4, #2
 801d600:	4401      	add	r1, r0
 801d602:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d604:	4402      	add	r2, r0
 801d606:	e7ee      	b.n	801d5e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d608:	d06e      	beq.n	801d6e8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d60a:	1e58      	subs	r0, r3, #1
 801d60c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d60e:	fb05 1500 	mla	r5, r5, r0, r1
 801d612:	142d      	asrs	r5, r5, #16
 801d614:	d45c      	bmi.n	801d6d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d616:	4565      	cmp	r5, ip
 801d618:	da5a      	bge.n	801d6d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d61a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d61c:	fb05 2000 	mla	r0, r5, r0, r2
 801d620:	1400      	asrs	r0, r0, #16
 801d622:	d455      	bmi.n	801d6d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d624:	42b8      	cmp	r0, r7
 801d626:	da53      	bge.n	801d6d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d628:	4699      	mov	r9, r3
 801d62a:	46a2      	mov	sl, r4
 801d62c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801d630:	f1b9 0f00 	cmp.w	r9, #0
 801d634:	dd54      	ble.n	801d6e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d636:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d63a:	140d      	asrs	r5, r1, #16
 801d63c:	1410      	asrs	r0, r2, #16
 801d63e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d642:	fb07 5000 	mla	r0, r7, r0, r5
 801d646:	9d02      	ldr	r5, [sp, #8]
 801d648:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d64c:	f8ba 5000 	ldrh.w	r5, [sl]
 801d650:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d654:	122f      	asrs	r7, r5, #8
 801d656:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d65a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d65e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d662:	00ed      	lsls	r5, r5, #3
 801d664:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d668:	fb17 f706 	smulbb	r7, r7, r6
 801d66c:	b2ed      	uxtb	r5, r5
 801d66e:	fb18 f806 	smulbb	r8, r8, r6
 801d672:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d676:	10c7      	asrs	r7, r0, #3
 801d678:	fb15 f506 	smulbb	r5, r5, r6
 801d67c:	00c0      	lsls	r0, r0, #3
 801d67e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d682:	fa1f fc8c 	uxth.w	ip, ip
 801d686:	b2c0      	uxtb	r0, r0
 801d688:	fb07 870b 	mla	r7, r7, fp, r8
 801d68c:	fb00 500b 	mla	r0, r0, fp, r5
 801d690:	f10c 0501 	add.w	r5, ip, #1
 801d694:	b2bf      	uxth	r7, r7
 801d696:	b280      	uxth	r0, r0
 801d698:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d69c:	f107 0801 	add.w	r8, r7, #1
 801d6a0:	1c45      	adds	r5, r0, #1
 801d6a2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d6a6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d6aa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d6ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d6b0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d6b4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d6b8:	4401      	add	r1, r0
 801d6ba:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d6be:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d6c0:	ea45 0c0c 	orr.w	ip, r5, ip
 801d6c4:	4402      	add	r2, r0
 801d6c6:	ea4c 0c08 	orr.w	ip, ip, r8
 801d6ca:	f82a cb02 	strh.w	ip, [sl], #2
 801d6ce:	e7af      	b.n	801d630 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d6d0:	f04f 0800 	mov.w	r8, #0
 801d6d4:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801d6d8:	eb03 0008 	add.w	r0, r3, r8
 801d6dc:	2800      	cmp	r0, #0
 801d6de:	dc41      	bgt.n	801d764 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d6e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d6e8:	9b00      	ldr	r3, [sp, #0]
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	f340 8095 	ble.w	801d81a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d6f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d6f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6fe:	eef0 6a62 	vmov.f32	s13, s5
 801d702:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d706:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d70a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d70e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801d712:	eef0 6a43 	vmov.f32	s13, s6
 801d716:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d71a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801d71e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d722:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d726:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d72a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d72e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d732:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d736:	ee12 2a90 	vmov	r2, s5
 801d73a:	eef0 2a47 	vmov.f32	s5, s14
 801d73e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d742:	ee13 2a10 	vmov	r2, s6
 801d746:	9311      	str	r3, [sp, #68]	; 0x44
 801d748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d74a:	eeb0 3a67 	vmov.f32	s6, s15
 801d74e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d752:	9312      	str	r3, [sp, #72]	; 0x48
 801d754:	9b00      	ldr	r3, [sp, #0]
 801d756:	9a03      	ldr	r2, [sp, #12]
 801d758:	3b01      	subs	r3, #1
 801d75a:	9300      	str	r3, [sp, #0]
 801d75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d75e:	bf08      	it	eq
 801d760:	4613      	moveq	r3, r2
 801d762:	e72f      	b.n	801d5c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d764:	140f      	asrs	r7, r1, #16
 801d766:	d451      	bmi.n	801d80c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d768:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d76c:	42bd      	cmp	r5, r7
 801d76e:	dd4d      	ble.n	801d80c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d770:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d774:	d44a      	bmi.n	801d80c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d776:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d77a:	4560      	cmp	r0, ip
 801d77c:	dd46      	ble.n	801d80c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d77e:	b22d      	sxth	r5, r5
 801d780:	9802      	ldr	r0, [sp, #8]
 801d782:	fb0c 7505 	mla	r5, ip, r5, r7
 801d786:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801d78a:	f06f 0501 	mvn.w	r5, #1
 801d78e:	fb05 fb08 	mul.w	fp, r5, r8
 801d792:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d796:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d79a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d79e:	122f      	asrs	r7, r5, #8
 801d7a0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d7a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d7a8:	00ed      	lsls	r5, r5, #3
 801d7aa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d7ae:	fb17 f706 	smulbb	r7, r7, r6
 801d7b2:	b2ed      	uxtb	r5, r5
 801d7b4:	fb19 f906 	smulbb	r9, r9, r6
 801d7b8:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d7bc:	10c7      	asrs	r7, r0, #3
 801d7be:	fb15 f506 	smulbb	r5, r5, r6
 801d7c2:	00c0      	lsls	r0, r0, #3
 801d7c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d7c8:	fa1f fc8c 	uxth.w	ip, ip
 801d7cc:	b2c0      	uxtb	r0, r0
 801d7ce:	fb07 970a 	mla	r7, r7, sl, r9
 801d7d2:	fb00 500a 	mla	r0, r0, sl, r5
 801d7d6:	f10c 0501 	add.w	r5, ip, #1
 801d7da:	b2bf      	uxth	r7, r7
 801d7dc:	b280      	uxth	r0, r0
 801d7de:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d7e2:	f107 0901 	add.w	r9, r7, #1
 801d7e6:	1c45      	adds	r5, r0, #1
 801d7e8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d7ec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d7f0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d7f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d7f8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d7fc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d800:	ea45 0c0c 	orr.w	ip, r5, ip
 801d804:	ea4c 0c09 	orr.w	ip, ip, r9
 801d808:	f824 c00b 	strh.w	ip, [r4, fp]
 801d80c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d80e:	f108 38ff 	add.w	r8, r8, #4294967295
 801d812:	4401      	add	r1, r0
 801d814:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d816:	4402      	add	r2, r0
 801d818:	e75e      	b.n	801d6d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d81a:	b005      	add	sp, #20
 801d81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d820 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d824:	b085      	sub	sp, #20
 801d826:	4693      	mov	fp, r2
 801d828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d82c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d82e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d830:	6870      	ldr	r0, [r6, #4]
 801d832:	9101      	str	r1, [sp, #4]
 801d834:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d838:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801d83c:	fb00 2404 	mla	r4, r0, r4, r2
 801d840:	6832      	ldr	r2, [r6, #0]
 801d842:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d846:	682a      	ldr	r2, [r5, #0]
 801d848:	9202      	str	r2, [sp, #8]
 801d84a:	9a01      	ldr	r2, [sp, #4]
 801d84c:	2a00      	cmp	r2, #0
 801d84e:	dc03      	bgt.n	801d858 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d850:	f1bb 0f00 	cmp.w	fp, #0
 801d854:	f340 809a 	ble.w	801d98c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d85a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d85e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d862:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d864:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d868:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	dd0c      	ble.n	801d88a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d870:	1406      	asrs	r6, r0, #16
 801d872:	d405      	bmi.n	801d880 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d874:	454e      	cmp	r6, r9
 801d876:	da03      	bge.n	801d880 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d878:	1416      	asrs	r6, r2, #16
 801d87a:	d401      	bmi.n	801d880 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d87c:	4546      	cmp	r6, r8
 801d87e:	db05      	blt.n	801d88c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d880:	4470      	add	r0, lr
 801d882:	4462      	add	r2, ip
 801d884:	3b01      	subs	r3, #1
 801d886:	3402      	adds	r4, #2
 801d888:	e7f0      	b.n	801d86c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d88a:	d00f      	beq.n	801d8ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d88c:	1e5e      	subs	r6, r3, #1
 801d88e:	fb0e 0706 	mla	r7, lr, r6, r0
 801d892:	143f      	asrs	r7, r7, #16
 801d894:	d541      	bpl.n	801d91a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d896:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d89a:	4698      	mov	r8, r3
 801d89c:	9603      	str	r6, [sp, #12]
 801d89e:	f1b8 0f00 	cmp.w	r8, #0
 801d8a2:	dc56      	bgt.n	801d952 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801d8a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d8ac:	9b01      	ldr	r3, [sp, #4]
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	dd6c      	ble.n	801d98c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d8b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8bc:	eeb0 6a62 	vmov.f32	s12, s5
 801d8c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d8c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8cc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d8d0:	eeb0 6a43 	vmov.f32	s12, s6
 801d8d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8d8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d8dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8f4:	ee12 2a90 	vmov	r2, s5
 801d8f8:	eef0 2a47 	vmov.f32	s5, s14
 801d8fc:	fb92 fef3 	sdiv	lr, r2, r3
 801d900:	ee13 2a10 	vmov	r2, s6
 801d904:	eeb0 3a67 	vmov.f32	s6, s15
 801d908:	fb92 fcf3 	sdiv	ip, r2, r3
 801d90c:	9b01      	ldr	r3, [sp, #4]
 801d90e:	3b01      	subs	r3, #1
 801d910:	9301      	str	r3, [sp, #4]
 801d912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d914:	bf08      	it	eq
 801d916:	465b      	moveq	r3, fp
 801d918:	e797      	b.n	801d84a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d91a:	454f      	cmp	r7, r9
 801d91c:	dabb      	bge.n	801d896 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d91e:	fb0c 2606 	mla	r6, ip, r6, r2
 801d922:	1436      	asrs	r6, r6, #16
 801d924:	d4b7      	bmi.n	801d896 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d926:	4546      	cmp	r6, r8
 801d928:	dab5      	bge.n	801d896 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d92a:	461e      	mov	r6, r3
 801d92c:	46a0      	mov	r8, r4
 801d92e:	2e00      	cmp	r6, #0
 801d930:	ddb8      	ble.n	801d8a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d932:	1417      	asrs	r7, r2, #16
 801d934:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d938:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d93c:	9902      	ldr	r1, [sp, #8]
 801d93e:	4470      	add	r0, lr
 801d940:	4462      	add	r2, ip
 801d942:	fb0a 9707 	mla	r7, sl, r7, r9
 801d946:	3e01      	subs	r6, #1
 801d948:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d94c:	f828 7b02 	strh.w	r7, [r8], #2
 801d950:	e7ed      	b.n	801d92e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d952:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d956:	d414      	bmi.n	801d982 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d958:	68ae      	ldr	r6, [r5, #8]
 801d95a:	454e      	cmp	r6, r9
 801d95c:	dd11      	ble.n	801d982 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d95e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d962:	d40e      	bmi.n	801d982 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d964:	68ef      	ldr	r7, [r5, #12]
 801d966:	4557      	cmp	r7, sl
 801d968:	dd0b      	ble.n	801d982 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d96a:	b236      	sxth	r6, r6
 801d96c:	f06f 0101 	mvn.w	r1, #1
 801d970:	9f02      	ldr	r7, [sp, #8]
 801d972:	fb0a 9606 	mla	r6, sl, r6, r9
 801d976:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d97a:	fb01 f608 	mul.w	r6, r1, r8
 801d97e:	9903      	ldr	r1, [sp, #12]
 801d980:	538f      	strh	r7, [r1, r6]
 801d982:	4470      	add	r0, lr
 801d984:	4462      	add	r2, ip
 801d986:	f108 38ff 	add.w	r8, r8, #4294967295
 801d98a:	e788      	b.n	801d89e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d98c:	b005      	add	sp, #20
 801d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d992 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d996:	b087      	sub	sp, #28
 801d998:	468b      	mov	fp, r1
 801d99a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d99e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d9a0:	9203      	str	r2, [sp, #12]
 801d9a2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d9a6:	6841      	ldr	r1, [r0, #4]
 801d9a8:	9204      	str	r2, [sp, #16]
 801d9aa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d9ae:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d9b2:	fb01 2505 	mla	r5, r1, r5, r2
 801d9b6:	6802      	ldr	r2, [r0, #0]
 801d9b8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d9bc:	f8d9 2000 	ldr.w	r2, [r9]
 801d9c0:	9201      	str	r2, [sp, #4]
 801d9c2:	f1bb 0f00 	cmp.w	fp, #0
 801d9c6:	dc03      	bgt.n	801d9d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d9c8:	9a03      	ldr	r2, [sp, #12]
 801d9ca:	2a00      	cmp	r2, #0
 801d9cc:	f340 8158 	ble.w	801dc80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801d9d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d9d2:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d9d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d9da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d9dc:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d9e0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	dd0e      	ble.n	801da06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d9e8:	1402      	asrs	r2, r0, #16
 801d9ea:	d405      	bmi.n	801d9f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d9ec:	42ba      	cmp	r2, r7
 801d9ee:	da03      	bge.n	801d9f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d9f0:	140a      	asrs	r2, r1, #16
 801d9f2:	d401      	bmi.n	801d9f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d9f4:	42b2      	cmp	r2, r6
 801d9f6:	db07      	blt.n	801da08 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d9f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d9fa:	3b01      	subs	r3, #1
 801d9fc:	3502      	adds	r5, #2
 801d9fe:	4410      	add	r0, r2
 801da00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801da02:	4411      	add	r1, r2
 801da04:	e7ee      	b.n	801d9e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801da06:	d017      	beq.n	801da38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801da08:	1e5a      	subs	r2, r3, #1
 801da0a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801da0c:	fb04 0402 	mla	r4, r4, r2, r0
 801da10:	1424      	asrs	r4, r4, #16
 801da12:	d409      	bmi.n	801da28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801da14:	42bc      	cmp	r4, r7
 801da16:	da07      	bge.n	801da28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801da18:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801da1a:	fb04 1202 	mla	r2, r4, r2, r1
 801da1e:	1412      	asrs	r2, r2, #16
 801da20:	d402      	bmi.n	801da28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801da22:	42b2      	cmp	r2, r6
 801da24:	f2c0 80bf 	blt.w	801dba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801da28:	2700      	movs	r7, #0
 801da2a:	19da      	adds	r2, r3, r7
 801da2c:	2a00      	cmp	r2, #0
 801da2e:	dc3e      	bgt.n	801daae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801da30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da34:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801da38:	f1bb 0f00 	cmp.w	fp, #0
 801da3c:	f340 8120 	ble.w	801dc80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801da40:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da4a:	f1bb 0b01 	subs.w	fp, fp, #1
 801da4e:	eeb0 6a62 	vmov.f32	s12, s5
 801da52:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801da56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801da5e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801da62:	eeb0 6a43 	vmov.f32	s12, s6
 801da66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801da6a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801da6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801da72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da76:	ee77 2a62 	vsub.f32	s5, s14, s5
 801da7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801da7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da86:	ee12 2a90 	vmov	r2, s5
 801da8a:	eef0 2a47 	vmov.f32	s5, s14
 801da8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801da92:	ee13 2a10 	vmov	r2, s6
 801da96:	9313      	str	r3, [sp, #76]	; 0x4c
 801da98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da9a:	eeb0 3a67 	vmov.f32	s6, s15
 801da9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801daa2:	9a03      	ldr	r2, [sp, #12]
 801daa4:	9314      	str	r3, [sp, #80]	; 0x50
 801daa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801daa8:	bf08      	it	eq
 801daaa:	4613      	moveq	r3, r2
 801daac:	e789      	b.n	801d9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801daae:	1406      	asrs	r6, r0, #16
 801dab0:	d42d      	bmi.n	801db0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dab2:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801dab6:	42b4      	cmp	r4, r6
 801dab8:	dd29      	ble.n	801db0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801daba:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801dabe:	d426      	bmi.n	801db0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dac0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801dac4:	4562      	cmp	r2, ip
 801dac6:	dd22      	ble.n	801db0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dac8:	b224      	sxth	r4, r4
 801daca:	9a01      	ldr	r2, [sp, #4]
 801dacc:	fb0c 6404 	mla	r4, ip, r4, r6
 801dad0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801dad4:	0e22      	lsrs	r2, r4, #24
 801dad6:	d01a      	beq.n	801db0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dad8:	9e04      	ldr	r6, [sp, #16]
 801dada:	4372      	muls	r2, r6
 801dadc:	1c56      	adds	r6, r2, #1
 801dade:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801dae2:	0a26      	lsrs	r6, r4, #8
 801dae4:	1212      	asrs	r2, r2, #8
 801dae6:	9605      	str	r6, [sp, #20]
 801dae8:	2aff      	cmp	r2, #255	; 0xff
 801daea:	d116      	bne.n	801db1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801daec:	f06f 0201 	mvn.w	r2, #1
 801daf0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801daf4:	fb02 fc07 	mul.w	ip, r2, r7
 801daf8:	0962      	lsrs	r2, r4, #5
 801dafa:	f026 0607 	bic.w	r6, r6, #7
 801dafe:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801db02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801db06:	4316      	orrs	r6, r2
 801db08:	4326      	orrs	r6, r4
 801db0a:	f825 600c 	strh.w	r6, [r5, ip]
 801db0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801db10:	3f01      	subs	r7, #1
 801db12:	4410      	add	r0, r2
 801db14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801db16:	4411      	add	r1, r2
 801db18:	e787      	b.n	801da2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801db1a:	f06f 0601 	mvn.w	r6, #1
 801db1e:	fa1f fa82 	uxth.w	sl, r2
 801db22:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801db26:	43d2      	mvns	r2, r2
 801db28:	437e      	muls	r6, r7
 801db2a:	b2e4      	uxtb	r4, r4
 801db2c:	fb1c fc0a 	smulbb	ip, ip, sl
 801db30:	b2d2      	uxtb	r2, r2
 801db32:	f835 8006 	ldrh.w	r8, [r5, r6]
 801db36:	fb14 f40a 	smulbb	r4, r4, sl
 801db3a:	9602      	str	r6, [sp, #8]
 801db3c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801db40:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801db44:	fb16 f60a 	smulbb	r6, r6, sl
 801db48:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801db4c:	fb0e ce02 	mla	lr, lr, r2, ip
 801db50:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801db54:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801db58:	fa1f fe8e 	uxth.w	lr, lr
 801db5c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801db60:	fa5f f888 	uxtb.w	r8, r8
 801db64:	fb0c 6c02 	mla	ip, ip, r2, r6
 801db68:	fb08 4402 	mla	r4, r8, r2, r4
 801db6c:	f10e 0201 	add.w	r2, lr, #1
 801db70:	fa1f fc8c 	uxth.w	ip, ip
 801db74:	b2a4      	uxth	r4, r4
 801db76:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801db7a:	9a02      	ldr	r2, [sp, #8]
 801db7c:	1c66      	adds	r6, r4, #1
 801db7e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801db82:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801db86:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801db8a:	ea46 0e0e 	orr.w	lr, r6, lr
 801db8e:	f10c 0601 	add.w	r6, ip, #1
 801db92:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801db96:	0976      	lsrs	r6, r6, #5
 801db98:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801db9c:	ea4e 0e06 	orr.w	lr, lr, r6
 801dba0:	f825 e002 	strh.w	lr, [r5, r2]
 801dba4:	e7b3      	b.n	801db0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dba6:	f04f 0800 	mov.w	r8, #0
 801dbaa:	eba3 0208 	sub.w	r2, r3, r8
 801dbae:	2a00      	cmp	r2, #0
 801dbb0:	f77f af3e 	ble.w	801da30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dbb4:	1404      	asrs	r4, r0, #16
 801dbb6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801dbba:	140a      	asrs	r2, r1, #16
 801dbbc:	fb06 4202 	mla	r2, r6, r2, r4
 801dbc0:	9c01      	ldr	r4, [sp, #4]
 801dbc2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801dbc6:	0e22      	lsrs	r2, r4, #24
 801dbc8:	d015      	beq.n	801dbf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801dbca:	9e04      	ldr	r6, [sp, #16]
 801dbcc:	4372      	muls	r2, r6
 801dbce:	1c56      	adds	r6, r2, #1
 801dbd0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801dbd4:	0a26      	lsrs	r6, r4, #8
 801dbd6:	1212      	asrs	r2, r2, #8
 801dbd8:	2aff      	cmp	r2, #255	; 0xff
 801dbda:	d113      	bne.n	801dc04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801dbdc:	0962      	lsrs	r2, r4, #5
 801dbde:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801dbe2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801dbe6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dbea:	f026 0607 	bic.w	r6, r6, #7
 801dbee:	4316      	orrs	r6, r2
 801dbf0:	4326      	orrs	r6, r4
 801dbf2:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801dbf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dbf8:	f108 0801 	add.w	r8, r8, #1
 801dbfc:	4410      	add	r0, r2
 801dbfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc00:	4411      	add	r1, r2
 801dc02:	e7d2      	b.n	801dbaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801dc04:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801dc08:	fa1f fa82 	uxth.w	sl, r2
 801dc0c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801dc10:	43d2      	mvns	r2, r2
 801dc12:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801dc16:	fb17 f70a 	smulbb	r7, r7, sl
 801dc1a:	b2d2      	uxtb	r2, r2
 801dc1c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dc20:	b2e4      	uxtb	r4, r4
 801dc22:	b2f6      	uxtb	r6, r6
 801dc24:	fb0c 7c02 	mla	ip, ip, r2, r7
 801dc28:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801dc2c:	fb14 f40a 	smulbb	r4, r4, sl
 801dc30:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dc34:	fa1f fc8c 	uxth.w	ip, ip
 801dc38:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dc3c:	fb16 f60a 	smulbb	r6, r6, sl
 801dc40:	fa5f fe8e 	uxtb.w	lr, lr
 801dc44:	fb0e 4402 	mla	r4, lr, r2, r4
 801dc48:	fb07 6702 	mla	r7, r7, r2, r6
 801dc4c:	f10c 0201 	add.w	r2, ip, #1
 801dc50:	b2a4      	uxth	r4, r4
 801dc52:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801dc56:	1c66      	adds	r6, r4, #1
 801dc58:	b2bf      	uxth	r7, r7
 801dc5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dc5e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801dc62:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801dc66:	ea46 0c0c 	orr.w	ip, r6, ip
 801dc6a:	1c7e      	adds	r6, r7, #1
 801dc6c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801dc70:	0976      	lsrs	r6, r6, #5
 801dc72:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801dc76:	ea4c 0c06 	orr.w	ip, ip, r6
 801dc7a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801dc7e:	e7ba      	b.n	801dbf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801dc80:	b007      	add	sp, #28
 801dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801dc88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc8c:	b085      	sub	sp, #20
 801dc8e:	468b      	mov	fp, r1
 801dc90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc94:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dc96:	9203      	str	r2, [sp, #12]
 801dc98:	6841      	ldr	r1, [r0, #4]
 801dc9a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801dc9e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801dca2:	fb01 2404 	mla	r4, r1, r4, r2
 801dca6:	6802      	ldr	r2, [r0, #0]
 801dca8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dcac:	f8d8 2000 	ldr.w	r2, [r8]
 801dcb0:	9201      	str	r2, [sp, #4]
 801dcb2:	f1bb 0f00 	cmp.w	fp, #0
 801dcb6:	dc03      	bgt.n	801dcc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801dcb8:	9a03      	ldr	r2, [sp, #12]
 801dcba:	2a00      	cmp	r2, #0
 801dcbc:	f340 814f 	ble.w	801df5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801dcc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dcc2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801dcc6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dcca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dccc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801dcd0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	dd0e      	ble.n	801dcf6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dcd8:	1408      	asrs	r0, r1, #16
 801dcda:	d405      	bmi.n	801dce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801dcdc:	42b8      	cmp	r0, r7
 801dcde:	da03      	bge.n	801dce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801dce0:	1410      	asrs	r0, r2, #16
 801dce2:	d401      	bmi.n	801dce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801dce4:	42b0      	cmp	r0, r6
 801dce6:	db07      	blt.n	801dcf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dce8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dcea:	3b01      	subs	r3, #1
 801dcec:	3402      	adds	r4, #2
 801dcee:	4401      	add	r1, r0
 801dcf0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dcf2:	4402      	add	r2, r0
 801dcf4:	e7ee      	b.n	801dcd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dcf6:	d017      	beq.n	801dd28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dcf8:	1e58      	subs	r0, r3, #1
 801dcfa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dcfc:	fb05 1500 	mla	r5, r5, r0, r1
 801dd00:	142d      	asrs	r5, r5, #16
 801dd02:	d409      	bmi.n	801dd18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dd04:	42bd      	cmp	r5, r7
 801dd06:	da07      	bge.n	801dd18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dd08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801dd0a:	fb05 2000 	mla	r0, r5, r0, r2
 801dd0e:	1400      	asrs	r0, r0, #16
 801dd10:	d402      	bmi.n	801dd18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dd12:	42b0      	cmp	r0, r6
 801dd14:	f2c0 80ba 	blt.w	801de8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dd18:	2600      	movs	r6, #0
 801dd1a:	1998      	adds	r0, r3, r6
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	dc3e      	bgt.n	801dd9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801dd20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd28:	f1bb 0f00 	cmp.w	fp, #0
 801dd2c:	f340 8117 	ble.w	801df5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801dd30:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd3a:	f1bb 0b01 	subs.w	fp, fp, #1
 801dd3e:	eeb0 6a62 	vmov.f32	s12, s5
 801dd42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd4e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dd52:	eeb0 6a43 	vmov.f32	s12, s6
 801dd56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd5a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dd5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd76:	ee12 2a90 	vmov	r2, s5
 801dd7a:	eef0 2a47 	vmov.f32	s5, s14
 801dd7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd82:	ee13 2a10 	vmov	r2, s6
 801dd86:	9311      	str	r3, [sp, #68]	; 0x44
 801dd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd8a:	eeb0 3a67 	vmov.f32	s6, s15
 801dd8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd92:	9a03      	ldr	r2, [sp, #12]
 801dd94:	9312      	str	r3, [sp, #72]	; 0x48
 801dd96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd98:	bf08      	it	eq
 801dd9a:	4613      	moveq	r3, r2
 801dd9c:	e789      	b.n	801dcb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801dd9e:	140f      	asrs	r7, r1, #16
 801dda0:	d424      	bmi.n	801ddec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dda2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801dda6:	42bd      	cmp	r5, r7
 801dda8:	dd20      	ble.n	801ddec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ddaa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ddae:	d41d      	bmi.n	801ddec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ddb0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801ddb4:	4560      	cmp	r0, ip
 801ddb6:	dd19      	ble.n	801ddec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ddb8:	b22d      	sxth	r5, r5
 801ddba:	9801      	ldr	r0, [sp, #4]
 801ddbc:	fb0c 7505 	mla	r5, ip, r5, r7
 801ddc0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ddc4:	0e07      	lsrs	r7, r0, #24
 801ddc6:	2fff      	cmp	r7, #255	; 0xff
 801ddc8:	d116      	bne.n	801ddf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ddca:	f06f 0501 	mvn.w	r5, #1
 801ddce:	fb05 f706 	mul.w	r7, r5, r6
 801ddd2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ddd6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ddda:	0945      	lsrs	r5, r0, #5
 801dddc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dde0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dde4:	ea4c 0505 	orr.w	r5, ip, r5
 801dde8:	4305      	orrs	r5, r0
 801ddea:	53e5      	strh	r5, [r4, r7]
 801ddec:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ddee:	3e01      	subs	r6, #1
 801ddf0:	4401      	add	r1, r0
 801ddf2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ddf4:	4402      	add	r2, r0
 801ddf6:	e790      	b.n	801dd1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ddf8:	b2fd      	uxtb	r5, r7
 801ddfa:	2f00      	cmp	r7, #0
 801ddfc:	d0f6      	beq.n	801ddec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ddfe:	f06f 0701 	mvn.w	r7, #1
 801de02:	fa1f f985 	uxth.w	r9, r5
 801de06:	43ed      	mvns	r5, r5
 801de08:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801de0c:	4377      	muls	r7, r6
 801de0e:	fb1a fa09 	smulbb	sl, sl, r9
 801de12:	b2ed      	uxtb	r5, r5
 801de14:	f834 e007 	ldrh.w	lr, [r4, r7]
 801de18:	9702      	str	r7, [sp, #8]
 801de1a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801de1e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801de22:	fb17 f709 	smulbb	r7, r7, r9
 801de26:	b2c0      	uxtb	r0, r0
 801de28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801de2c:	fb10 f009 	smulbb	r0, r0, r9
 801de30:	fb0c 7c05 	mla	ip, ip, r5, r7
 801de34:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801de38:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801de3c:	fa1f fc8c 	uxth.w	ip, ip
 801de40:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801de44:	fa5f fe8e 	uxtb.w	lr, lr
 801de48:	fb07 a705 	mla	r7, r7, r5, sl
 801de4c:	fb0e 0005 	mla	r0, lr, r5, r0
 801de50:	f10c 0501 	add.w	r5, ip, #1
 801de54:	b2bf      	uxth	r7, r7
 801de56:	b280      	uxth	r0, r0
 801de58:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801de5c:	f100 0a01 	add.w	sl, r0, #1
 801de60:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801de64:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801de68:	9802      	ldr	r0, [sp, #8]
 801de6a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801de6e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801de72:	f107 0a01 	add.w	sl, r7, #1
 801de76:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801de7a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801de7e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801de82:	ea4c 0c0a 	orr.w	ip, ip, sl
 801de86:	f824 c000 	strh.w	ip, [r4, r0]
 801de8a:	e7af      	b.n	801ddec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801de8c:	f04f 0e00 	mov.w	lr, #0
 801de90:	eba3 000e 	sub.w	r0, r3, lr
 801de94:	2800      	cmp	r0, #0
 801de96:	f77f af43 	ble.w	801dd20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801de9a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801de9e:	140d      	asrs	r5, r1, #16
 801dea0:	1410      	asrs	r0, r2, #16
 801dea2:	fb06 5000 	mla	r0, r6, r0, r5
 801dea6:	9d01      	ldr	r5, [sp, #4]
 801dea8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801deac:	0e2e      	lsrs	r6, r5, #24
 801deae:	2eff      	cmp	r6, #255	; 0xff
 801deb0:	d112      	bne.n	801ded8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801deb2:	482c      	ldr	r0, [pc, #176]	; (801df64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801deb4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801deb8:	0968      	lsrs	r0, r5, #5
 801deba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801debe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dec2:	4330      	orrs	r0, r6
 801dec4:	4328      	orrs	r0, r5
 801dec6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801deca:	9811      	ldr	r0, [sp, #68]	; 0x44
 801decc:	f10e 0e01 	add.w	lr, lr, #1
 801ded0:	4401      	add	r1, r0
 801ded2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ded4:	4402      	add	r2, r0
 801ded6:	e7db      	b.n	801de90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ded8:	b2f0      	uxtb	r0, r6
 801deda:	2e00      	cmp	r6, #0
 801dedc:	d0f5      	beq.n	801deca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801dede:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801dee2:	fa1f f980 	uxth.w	r9, r0
 801dee6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801deea:	43c0      	mvns	r0, r0
 801deec:	ea4f 272c 	mov.w	r7, ip, asr #8
 801def0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801def4:	fb16 f609 	smulbb	r6, r6, r9
 801def8:	b2c0      	uxtb	r0, r0
 801defa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801defe:	b2ed      	uxtb	r5, r5
 801df00:	fb1a fa09 	smulbb	sl, sl, r9
 801df04:	fb07 6700 	mla	r7, r7, r0, r6
 801df08:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801df0c:	fb15 f509 	smulbb	r5, r5, r9
 801df10:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801df14:	b2bf      	uxth	r7, r7
 801df16:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801df1a:	fa5f fc8c 	uxtb.w	ip, ip
 801df1e:	fb06 a600 	mla	r6, r6, r0, sl
 801df22:	fb0c 5500 	mla	r5, ip, r0, r5
 801df26:	1c78      	adds	r0, r7, #1
 801df28:	b2b6      	uxth	r6, r6
 801df2a:	b2ad      	uxth	r5, r5
 801df2c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801df30:	f105 0a01 	add.w	sl, r5, #1
 801df34:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801df38:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801df3c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801df40:	ea4a 0707 	orr.w	r7, sl, r7
 801df44:	f106 0a01 	add.w	sl, r6, #1
 801df48:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801df4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801df50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801df54:	ea47 070a 	orr.w	r7, r7, sl
 801df58:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801df5c:	e7b5      	b.n	801deca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801df5e:	b005      	add	sp, #20
 801df60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df64:	fffff800 	.word	0xfffff800

0801df68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df6c:	b087      	sub	sp, #28
 801df6e:	468b      	mov	fp, r1
 801df70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df74:	9815      	ldr	r0, [sp, #84]	; 0x54
 801df76:	9203      	str	r2, [sp, #12]
 801df78:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801df7c:	6841      	ldr	r1, [r0, #4]
 801df7e:	9204      	str	r2, [sp, #16]
 801df80:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801df84:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801df88:	fb01 2404 	mla	r4, r1, r4, r2
 801df8c:	6802      	ldr	r2, [r0, #0]
 801df8e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801df92:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801df96:	3201      	adds	r2, #1
 801df98:	f022 0201 	bic.w	r2, r2, #1
 801df9c:	9200      	str	r2, [sp, #0]
 801df9e:	f8d9 2000 	ldr.w	r2, [r9]
 801dfa2:	9201      	str	r2, [sp, #4]
 801dfa4:	f1bb 0f00 	cmp.w	fp, #0
 801dfa8:	dc03      	bgt.n	801dfb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dfaa:	9a03      	ldr	r2, [sp, #12]
 801dfac:	2a00      	cmp	r2, #0
 801dfae:	f340 816a 	ble.w	801e286 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801dfb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dfb4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801dfb8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dfbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dfbe:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801dfc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	dd0e      	ble.n	801dfe8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dfca:	1402      	asrs	r2, r0, #16
 801dfcc:	d405      	bmi.n	801dfda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dfce:	42ba      	cmp	r2, r7
 801dfd0:	da03      	bge.n	801dfda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dfd2:	140a      	asrs	r2, r1, #16
 801dfd4:	d401      	bmi.n	801dfda <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dfd6:	42b2      	cmp	r2, r6
 801dfd8:	db07      	blt.n	801dfea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dfda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dfdc:	3b01      	subs	r3, #1
 801dfde:	3402      	adds	r4, #2
 801dfe0:	4410      	add	r0, r2
 801dfe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dfe4:	4411      	add	r1, r2
 801dfe6:	e7ee      	b.n	801dfc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801dfe8:	d017      	beq.n	801e01a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801dfea:	1e5a      	subs	r2, r3, #1
 801dfec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dfee:	fb05 0502 	mla	r5, r5, r2, r0
 801dff2:	142d      	asrs	r5, r5, #16
 801dff4:	d409      	bmi.n	801e00a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dff6:	42bd      	cmp	r5, r7
 801dff8:	da07      	bge.n	801e00a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dffa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dffc:	fb05 1202 	mla	r2, r5, r2, r1
 801e000:	1412      	asrs	r2, r2, #16
 801e002:	d402      	bmi.n	801e00a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e004:	42b2      	cmp	r2, r6
 801e006:	f2c0 80c8 	blt.w	801e19a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801e00a:	2700      	movs	r7, #0
 801e00c:	19da      	adds	r2, r3, r7
 801e00e:	2a00      	cmp	r2, #0
 801e010:	dc3e      	bgt.n	801e090 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e012:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e016:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e01a:	f1bb 0f00 	cmp.w	fp, #0
 801e01e:	f340 8132 	ble.w	801e286 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801e022:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e028:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e02c:	f1bb 0b01 	subs.w	fp, fp, #1
 801e030:	eeb0 6a62 	vmov.f32	s12, s5
 801e034:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e038:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e03c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e040:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e044:	eeb0 6a43 	vmov.f32	s12, s6
 801e048:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e04c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e050:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e054:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e058:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e05c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e060:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e064:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e068:	ee12 2a90 	vmov	r2, s5
 801e06c:	eef0 2a47 	vmov.f32	s5, s14
 801e070:	fb92 f3f3 	sdiv	r3, r2, r3
 801e074:	ee13 2a10 	vmov	r2, s6
 801e078:	9313      	str	r3, [sp, #76]	; 0x4c
 801e07a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e07c:	eeb0 3a67 	vmov.f32	s6, s15
 801e080:	fb92 f3f3 	sdiv	r3, r2, r3
 801e084:	9a03      	ldr	r2, [sp, #12]
 801e086:	9314      	str	r3, [sp, #80]	; 0x50
 801e088:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e08a:	bf08      	it	eq
 801e08c:	4613      	moveq	r3, r2
 801e08e:	e789      	b.n	801dfa4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e090:	1405      	asrs	r5, r0, #16
 801e092:	d436      	bmi.n	801e102 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e094:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801e098:	42aa      	cmp	r2, r5
 801e09a:	dd32      	ble.n	801e102 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e09c:	140e      	asrs	r6, r1, #16
 801e09e:	d430      	bmi.n	801e102 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e0a0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e0a4:	42b2      	cmp	r2, r6
 801e0a6:	dd2c      	ble.n	801e102 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e0a8:	9a00      	ldr	r2, [sp, #0]
 801e0aa:	fb06 5502 	mla	r5, r6, r2, r5
 801e0ae:	9e01      	ldr	r6, [sp, #4]
 801e0b0:	086a      	lsrs	r2, r5, #1
 801e0b2:	5cb2      	ldrb	r2, [r6, r2]
 801e0b4:	07ee      	lsls	r6, r5, #31
 801e0b6:	bf54      	ite	pl
 801e0b8:	f002 020f 	andpl.w	r2, r2, #15
 801e0bc:	1112      	asrmi	r2, r2, #4
 801e0be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e0c2:	b2d2      	uxtb	r2, r2
 801e0c4:	b1ea      	cbz	r2, 801e102 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e0c6:	9d04      	ldr	r5, [sp, #16]
 801e0c8:	436a      	muls	r2, r5
 801e0ca:	1c55      	adds	r5, r2, #1
 801e0cc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801e0d0:	4d6e      	ldr	r5, [pc, #440]	; (801e28c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801e0d2:	1212      	asrs	r2, r2, #8
 801e0d4:	682d      	ldr	r5, [r5, #0]
 801e0d6:	2aff      	cmp	r2, #255	; 0xff
 801e0d8:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801e0dc:	9605      	str	r6, [sp, #20]
 801e0de:	d116      	bne.n	801e10e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e0e0:	f06f 0201 	mvn.w	r2, #1
 801e0e4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e0e8:	fb02 fc07 	mul.w	ip, r2, r7
 801e0ec:	096a      	lsrs	r2, r5, #5
 801e0ee:	f026 0607 	bic.w	r6, r6, #7
 801e0f2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e0f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e0fa:	4316      	orrs	r6, r2
 801e0fc:	432e      	orrs	r6, r5
 801e0fe:	f824 600c 	strh.w	r6, [r4, ip]
 801e102:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e104:	3f01      	subs	r7, #1
 801e106:	4410      	add	r0, r2
 801e108:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e10a:	4411      	add	r1, r2
 801e10c:	e77e      	b.n	801e00c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e10e:	f06f 0601 	mvn.w	r6, #1
 801e112:	fa1f fa82 	uxth.w	sl, r2
 801e116:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801e11a:	43d2      	mvns	r2, r2
 801e11c:	437e      	muls	r6, r7
 801e11e:	b2ed      	uxtb	r5, r5
 801e120:	fb1c fc0a 	smulbb	ip, ip, sl
 801e124:	b2d2      	uxtb	r2, r2
 801e126:	f834 8006 	ldrh.w	r8, [r4, r6]
 801e12a:	fb15 f50a 	smulbb	r5, r5, sl
 801e12e:	9602      	str	r6, [sp, #8]
 801e130:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801e134:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801e138:	fb16 f60a 	smulbb	r6, r6, sl
 801e13c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e140:	fb0e ce02 	mla	lr, lr, r2, ip
 801e144:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801e148:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e14c:	fa1f fe8e 	uxth.w	lr, lr
 801e150:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e154:	fa5f f888 	uxtb.w	r8, r8
 801e158:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e15c:	fb08 5502 	mla	r5, r8, r2, r5
 801e160:	f10e 0201 	add.w	r2, lr, #1
 801e164:	fa1f fc8c 	uxth.w	ip, ip
 801e168:	b2ad      	uxth	r5, r5
 801e16a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e16e:	9a02      	ldr	r2, [sp, #8]
 801e170:	1c6e      	adds	r6, r5, #1
 801e172:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801e176:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801e17a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e17e:	ea46 0e0e 	orr.w	lr, r6, lr
 801e182:	f10c 0601 	add.w	r6, ip, #1
 801e186:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801e18a:	0976      	lsrs	r6, r6, #5
 801e18c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e190:	ea4e 0e06 	orr.w	lr, lr, r6
 801e194:	f824 e002 	strh.w	lr, [r4, r2]
 801e198:	e7b3      	b.n	801e102 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e19a:	f04f 0800 	mov.w	r8, #0
 801e19e:	eba3 0208 	sub.w	r2, r3, r8
 801e1a2:	2a00      	cmp	r2, #0
 801e1a4:	f77f af35 	ble.w	801e012 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e1a8:	1402      	asrs	r2, r0, #16
 801e1aa:	9e00      	ldr	r6, [sp, #0]
 801e1ac:	140d      	asrs	r5, r1, #16
 801e1ae:	fb06 2505 	mla	r5, r6, r5, r2
 801e1b2:	9e01      	ldr	r6, [sp, #4]
 801e1b4:	086a      	lsrs	r2, r5, #1
 801e1b6:	07ed      	lsls	r5, r5, #31
 801e1b8:	5cb2      	ldrb	r2, [r6, r2]
 801e1ba:	bf54      	ite	pl
 801e1bc:	f002 020f 	andpl.w	r2, r2, #15
 801e1c0:	1112      	asrmi	r2, r2, #4
 801e1c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e1c6:	b2d2      	uxtb	r2, r2
 801e1c8:	b1c2      	cbz	r2, 801e1fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e1ca:	9d04      	ldr	r5, [sp, #16]
 801e1cc:	436a      	muls	r2, r5
 801e1ce:	1c55      	adds	r5, r2, #1
 801e1d0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801e1d4:	4d2d      	ldr	r5, [pc, #180]	; (801e28c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801e1d6:	1212      	asrs	r2, r2, #8
 801e1d8:	682e      	ldr	r6, [r5, #0]
 801e1da:	2aff      	cmp	r2, #255	; 0xff
 801e1dc:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801e1e0:	d113      	bne.n	801e20a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e1e2:	0972      	lsrs	r2, r6, #5
 801e1e4:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801e1e8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801e1ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e1f0:	f025 0507 	bic.w	r5, r5, #7
 801e1f4:	4315      	orrs	r5, r2
 801e1f6:	4335      	orrs	r5, r6
 801e1f8:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801e1fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e1fe:	f108 0801 	add.w	r8, r8, #1
 801e202:	4410      	add	r0, r2
 801e204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e206:	4411      	add	r1, r2
 801e208:	e7c9      	b.n	801e19e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e20a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801e20e:	fa1f fa82 	uxth.w	sl, r2
 801e212:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801e216:	43d2      	mvns	r2, r2
 801e218:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e21c:	fb17 f70a 	smulbb	r7, r7, sl
 801e220:	b2d2      	uxtb	r2, r2
 801e222:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e226:	b2f6      	uxtb	r6, r6
 801e228:	b2ed      	uxtb	r5, r5
 801e22a:	fb0c 7c02 	mla	ip, ip, r2, r7
 801e22e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e232:	fb16 f60a 	smulbb	r6, r6, sl
 801e236:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e23a:	fa1f fc8c 	uxth.w	ip, ip
 801e23e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e242:	fb15 f50a 	smulbb	r5, r5, sl
 801e246:	fa5f fe8e 	uxtb.w	lr, lr
 801e24a:	fb0e 6602 	mla	r6, lr, r2, r6
 801e24e:	fb07 5702 	mla	r7, r7, r2, r5
 801e252:	f10c 0201 	add.w	r2, ip, #1
 801e256:	b2b6      	uxth	r6, r6
 801e258:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e25c:	1c75      	adds	r5, r6, #1
 801e25e:	b2bf      	uxth	r7, r7
 801e260:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e264:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801e268:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e26c:	ea45 0c0c 	orr.w	ip, r5, ip
 801e270:	1c7d      	adds	r5, r7, #1
 801e272:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801e276:	096d      	lsrs	r5, r5, #5
 801e278:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e27c:	ea4c 0c05 	orr.w	ip, ip, r5
 801e280:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801e284:	e7ba      	b.n	801e1fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e286:	b007      	add	sp, #28
 801e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e28c:	20015040 	.word	0x20015040

0801e290 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e294:	b087      	sub	sp, #28
 801e296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e29a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801e5a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801e29e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e2a0:	9101      	str	r1, [sp, #4]
 801e2a2:	9205      	str	r2, [sp, #20]
 801e2a4:	6841      	ldr	r1, [r0, #4]
 801e2a6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801e2aa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e2ae:	fb01 2404 	mla	r4, r1, r4, r2
 801e2b2:	6802      	ldr	r2, [r0, #0]
 801e2b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e2b8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e2bc:	3201      	adds	r2, #1
 801e2be:	f022 0201 	bic.w	r2, r2, #1
 801e2c2:	9202      	str	r2, [sp, #8]
 801e2c4:	f8db 2000 	ldr.w	r2, [fp]
 801e2c8:	9203      	str	r2, [sp, #12]
 801e2ca:	9a01      	ldr	r2, [sp, #4]
 801e2cc:	2a00      	cmp	r2, #0
 801e2ce:	dc03      	bgt.n	801e2d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e2d0:	9a05      	ldr	r2, [sp, #20]
 801e2d2:	2a00      	cmp	r2, #0
 801e2d4:	f340 8162 	ble.w	801e59c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e2d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e2da:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e2de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e2e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2e4:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801e2e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	dd0e      	ble.n	801e30e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e2f0:	1402      	asrs	r2, r0, #16
 801e2f2:	d405      	bmi.n	801e300 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e2f4:	42ba      	cmp	r2, r7
 801e2f6:	da03      	bge.n	801e300 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e2f8:	140a      	asrs	r2, r1, #16
 801e2fa:	d401      	bmi.n	801e300 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e2fc:	42b2      	cmp	r2, r6
 801e2fe:	db07      	blt.n	801e310 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e302:	3b01      	subs	r3, #1
 801e304:	3402      	adds	r4, #2
 801e306:	4410      	add	r0, r2
 801e308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e30a:	4411      	add	r1, r2
 801e30c:	e7ee      	b.n	801e2ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e30e:	d017      	beq.n	801e340 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e310:	1e5a      	subs	r2, r3, #1
 801e312:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e314:	fb05 0502 	mla	r5, r5, r2, r0
 801e318:	142d      	asrs	r5, r5, #16
 801e31a:	d409      	bmi.n	801e330 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e31c:	42bd      	cmp	r5, r7
 801e31e:	da07      	bge.n	801e330 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e320:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e322:	fb05 1202 	mla	r2, r5, r2, r1
 801e326:	1412      	asrs	r2, r2, #16
 801e328:	d402      	bmi.n	801e330 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e32a:	42b2      	cmp	r2, r6
 801e32c:	f2c0 80c3 	blt.w	801e4b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801e330:	2500      	movs	r5, #0
 801e332:	195a      	adds	r2, r3, r5
 801e334:	2a00      	cmp	r2, #0
 801e336:	dc3f      	bgt.n	801e3b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e338:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e33c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e340:	9b01      	ldr	r3, [sp, #4]
 801e342:	2b00      	cmp	r3, #0
 801e344:	f340 812a 	ble.w	801e59c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e348:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e34e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e352:	eeb0 6a62 	vmov.f32	s12, s5
 801e356:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e35a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e35e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e362:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e366:	eeb0 6a43 	vmov.f32	s12, s6
 801e36a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e36e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e372:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e376:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e37a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e37e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e382:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e386:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e38a:	ee12 2a90 	vmov	r2, s5
 801e38e:	eef0 2a47 	vmov.f32	s5, s14
 801e392:	fb92 f3f3 	sdiv	r3, r2, r3
 801e396:	ee13 2a10 	vmov	r2, s6
 801e39a:	9313      	str	r3, [sp, #76]	; 0x4c
 801e39c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e39e:	eeb0 3a67 	vmov.f32	s6, s15
 801e3a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3a6:	9314      	str	r3, [sp, #80]	; 0x50
 801e3a8:	9b01      	ldr	r3, [sp, #4]
 801e3aa:	9a05      	ldr	r2, [sp, #20]
 801e3ac:	3b01      	subs	r3, #1
 801e3ae:	9301      	str	r3, [sp, #4]
 801e3b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3b2:	bf08      	it	eq
 801e3b4:	4613      	moveq	r3, r2
 801e3b6:	e788      	b.n	801e2ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e3b8:	1406      	asrs	r6, r0, #16
 801e3ba:	d42c      	bmi.n	801e416 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e3bc:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e3c0:	42b2      	cmp	r2, r6
 801e3c2:	dd28      	ble.n	801e416 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e3c4:	140f      	asrs	r7, r1, #16
 801e3c6:	d426      	bmi.n	801e416 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e3c8:	f8db 200c 	ldr.w	r2, [fp, #12]
 801e3cc:	42ba      	cmp	r2, r7
 801e3ce:	dd22      	ble.n	801e416 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e3d0:	9a02      	ldr	r2, [sp, #8]
 801e3d2:	fb07 6602 	mla	r6, r7, r2, r6
 801e3d6:	9f03      	ldr	r7, [sp, #12]
 801e3d8:	0872      	lsrs	r2, r6, #1
 801e3da:	07f6      	lsls	r6, r6, #31
 801e3dc:	5cba      	ldrb	r2, [r7, r2]
 801e3de:	bf54      	ite	pl
 801e3e0:	f002 020f 	andpl.w	r2, r2, #15
 801e3e4:	1112      	asrmi	r2, r2, #4
 801e3e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e3ea:	b2d2      	uxtb	r2, r2
 801e3ec:	2aff      	cmp	r2, #255	; 0xff
 801e3ee:	d118      	bne.n	801e422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e3f0:	f06f 0601 	mvn.w	r6, #1
 801e3f4:	f8d8 2000 	ldr.w	r2, [r8]
 801e3f8:	fb06 f705 	mul.w	r7, r6, r5
 801e3fc:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801e400:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801e404:	0956      	lsrs	r6, r2, #5
 801e406:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e40a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e40e:	ea4c 0606 	orr.w	r6, ip, r6
 801e412:	4316      	orrs	r6, r2
 801e414:	53e6      	strh	r6, [r4, r7]
 801e416:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e418:	3d01      	subs	r5, #1
 801e41a:	4410      	add	r0, r2
 801e41c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e41e:	4411      	add	r1, r2
 801e420:	e787      	b.n	801e332 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e422:	2a00      	cmp	r2, #0
 801e424:	d0f7      	beq.n	801e416 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e426:	f06f 0601 	mvn.w	r6, #1
 801e42a:	f8d8 c000 	ldr.w	ip, [r8]
 801e42e:	fa1f f982 	uxth.w	r9, r2
 801e432:	43d2      	mvns	r2, r2
 801e434:	436e      	muls	r6, r5
 801e436:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801e43a:	b2d2      	uxtb	r2, r2
 801e43c:	f834 e006 	ldrh.w	lr, [r4, r6]
 801e440:	fb1a fa09 	smulbb	sl, sl, r9
 801e444:	9604      	str	r6, [sp, #16]
 801e446:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801e44a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e44e:	fb16 f609 	smulbb	r6, r6, r9
 801e452:	fa5f fc8c 	uxtb.w	ip, ip
 801e456:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e45a:	fb1c fc09 	smulbb	ip, ip, r9
 801e45e:	fb07 6702 	mla	r7, r7, r2, r6
 801e462:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e466:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e46a:	b2bf      	uxth	r7, r7
 801e46c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e470:	fa5f fe8e 	uxtb.w	lr, lr
 801e474:	fb06 a602 	mla	r6, r6, r2, sl
 801e478:	fb0e cc02 	mla	ip, lr, r2, ip
 801e47c:	1c7a      	adds	r2, r7, #1
 801e47e:	b2b6      	uxth	r6, r6
 801e480:	fa1f fc8c 	uxth.w	ip, ip
 801e484:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e488:	9a04      	ldr	r2, [sp, #16]
 801e48a:	f10c 0a01 	add.w	sl, ip, #1
 801e48e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e492:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e496:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e49a:	ea4a 0707 	orr.w	r7, sl, r7
 801e49e:	f106 0a01 	add.w	sl, r6, #1
 801e4a2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e4a6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e4aa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e4ae:	ea47 070a 	orr.w	r7, r7, sl
 801e4b2:	52a7      	strh	r7, [r4, r2]
 801e4b4:	e7af      	b.n	801e416 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e4b6:	f04f 0e00 	mov.w	lr, #0
 801e4ba:	eba3 020e 	sub.w	r2, r3, lr
 801e4be:	2a00      	cmp	r2, #0
 801e4c0:	f77f af3a 	ble.w	801e338 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e4c4:	1402      	asrs	r2, r0, #16
 801e4c6:	9e02      	ldr	r6, [sp, #8]
 801e4c8:	140d      	asrs	r5, r1, #16
 801e4ca:	fb06 2505 	mla	r5, r6, r5, r2
 801e4ce:	9e03      	ldr	r6, [sp, #12]
 801e4d0:	086a      	lsrs	r2, r5, #1
 801e4d2:	07ed      	lsls	r5, r5, #31
 801e4d4:	5cb2      	ldrb	r2, [r6, r2]
 801e4d6:	bf54      	ite	pl
 801e4d8:	f002 020f 	andpl.w	r2, r2, #15
 801e4dc:	1112      	asrmi	r2, r2, #4
 801e4de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e4e2:	b2d2      	uxtb	r2, r2
 801e4e4:	2aff      	cmp	r2, #255	; 0xff
 801e4e6:	d115      	bne.n	801e514 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e4e8:	f8d8 5000 	ldr.w	r5, [r8]
 801e4ec:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801e4f0:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801e4f4:	096a      	lsrs	r2, r5, #5
 801e4f6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e4fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e4fe:	4332      	orrs	r2, r6
 801e500:	432a      	orrs	r2, r5
 801e502:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801e506:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e508:	f10e 0e01 	add.w	lr, lr, #1
 801e50c:	4410      	add	r0, r2
 801e50e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e510:	4411      	add	r1, r2
 801e512:	e7d2      	b.n	801e4ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e514:	2a00      	cmp	r2, #0
 801e516:	d0f6      	beq.n	801e506 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e518:	f8d8 7000 	ldr.w	r7, [r8]
 801e51c:	fa1f f982 	uxth.w	r9, r2
 801e520:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e524:	43d2      	mvns	r2, r2
 801e526:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801e52a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e52e:	ea4f 262c 	mov.w	r6, ip, asr #8
 801e532:	fb15 f509 	smulbb	r5, r5, r9
 801e536:	b2d2      	uxtb	r2, r2
 801e538:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e53c:	b2ff      	uxtb	r7, r7
 801e53e:	fb1a fa09 	smulbb	sl, sl, r9
 801e542:	fb06 5602 	mla	r6, r6, r2, r5
 801e546:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e54a:	fb17 f709 	smulbb	r7, r7, r9
 801e54e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e552:	b2b6      	uxth	r6, r6
 801e554:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e558:	fa5f fc8c 	uxtb.w	ip, ip
 801e55c:	fb05 a502 	mla	r5, r5, r2, sl
 801e560:	fb0c 7702 	mla	r7, ip, r2, r7
 801e564:	1c72      	adds	r2, r6, #1
 801e566:	b2ad      	uxth	r5, r5
 801e568:	b2bf      	uxth	r7, r7
 801e56a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e56e:	f107 0a01 	add.w	sl, r7, #1
 801e572:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e576:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e57a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e57e:	ea4a 0606 	orr.w	r6, sl, r6
 801e582:	f105 0a01 	add.w	sl, r5, #1
 801e586:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e58a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e58e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e592:	ea46 060a 	orr.w	r6, r6, sl
 801e596:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801e59a:	e7b4      	b.n	801e506 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e59c:	b007      	add	sp, #28
 801e59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5a2:	bf00      	nop
 801e5a4:	20015040 	.word	0x20015040

0801e5a8 <_ZN8touchgfx8LCD16bppD1Ev>:
 801e5a8:	4770      	bx	lr

0801e5aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801e5aa:	4770      	bx	lr

0801e5ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801e5ac:	4770      	bx	lr

0801e5ae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801e5ae:	4770      	bx	lr

0801e5b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e5b0:	4770      	bx	lr

0801e5b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e5b2:	4770      	bx	lr

0801e5b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e5b4:	4770      	bx	lr

0801e5b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e5b6:	4770      	bx	lr

0801e5b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e5b8:	4770      	bx	lr

0801e5ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e5ba:	4770      	bx	lr

0801e5bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e5bc:	4770      	bx	lr

0801e5be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e5be:	4770      	bx	lr

0801e5c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e5c0:	4770      	bx	lr

0801e5c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e5c2:	4770      	bx	lr

0801e5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e5c4:	4770      	bx	lr

0801e5c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e5c6:	4770      	bx	lr

0801e5c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e5c8:	4770      	bx	lr

0801e5ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e5ca:	4770      	bx	lr

0801e5cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e5cc:	4770      	bx	lr

0801e5ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e5ce:	4770      	bx	lr

0801e5d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e5d0:	4770      	bx	lr

0801e5d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e5d2:	4770      	bx	lr

0801e5d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e5d4:	4770      	bx	lr

0801e5d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e5d6:	4770      	bx	lr

0801e5d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e5d8:	4770      	bx	lr

0801e5da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e5da:	4770      	bx	lr

0801e5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e5dc:	4770      	bx	lr

0801e5de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e5de:	4770      	bx	lr

0801e5e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e5e0:	4770      	bx	lr

0801e5e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e5e2:	4770      	bx	lr

0801e5e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e5e4:	4770      	bx	lr

0801e5e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e5e6:	4770      	bx	lr

0801e5e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5ec:	b088      	sub	sp, #32
 801e5ee:	4606      	mov	r6, r0
 801e5f0:	4688      	mov	r8, r1
 801e5f2:	4691      	mov	r9, r2
 801e5f4:	ac08      	add	r4, sp, #32
 801e5f6:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801e5fa:	4620      	mov	r0, r4
 801e5fc:	f7fd fc62 	bl	801bec4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e600:	6833      	ldr	r3, [r6, #0]
 801e602:	4605      	mov	r5, r0
 801e604:	4620      	mov	r0, r4
 801e606:	699f      	ldr	r7, [r3, #24]
 801e608:	f7fd fb70 	bl	801bcec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e60c:	4682      	mov	sl, r0
 801e60e:	4620      	mov	r0, r4
 801e610:	f7fd fba0 	bl	801bd54 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e614:	9500      	str	r5, [sp, #0]
 801e616:	464b      	mov	r3, r9
 801e618:	4642      	mov	r2, r8
 801e61a:	4631      	mov	r1, r6
 801e61c:	e9cd a001 	strd	sl, r0, [sp, #4]
 801e620:	a806      	add	r0, sp, #24
 801e622:	47b8      	blx	r7
 801e624:	4628      	mov	r0, r5
 801e626:	b008      	add	sp, #32
 801e628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e62c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801e62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e630:	2300      	movs	r3, #0
 801e632:	9300      	str	r3, [sp, #0]
 801e634:	4b3d      	ldr	r3, [pc, #244]	; (801e72c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801e636:	781b      	ldrb	r3, [r3, #0]
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d137      	bne.n	801e6ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801e63c:	4a3c      	ldr	r2, [pc, #240]	; (801e730 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e63e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e642:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e646:	2b00      	cmp	r3, #0
 801e648:	d132      	bne.n	801e6b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801e64a:	4b3a      	ldr	r3, [pc, #232]	; (801e734 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e64c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e650:	ac02      	add	r4, sp, #8
 801e652:	6808      	ldr	r0, [r1, #0]
 801e654:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e658:	ab02      	add	r3, sp, #8
 801e65a:	6849      	ldr	r1, [r1, #4]
 801e65c:	4d36      	ldr	r5, [pc, #216]	; (801e738 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801e65e:	c303      	stmia	r3!, {r0, r1}
 801e660:	4669      	mov	r1, sp
 801e662:	4620      	mov	r0, r4
 801e664:	f7fa fd06 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e668:	4668      	mov	r0, sp
 801e66a:	f7fa fcdb 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e66e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e672:	f8bd 2000 	ldrh.w	r2, [sp]
 801e676:	462f      	mov	r7, r5
 801e678:	6828      	ldr	r0, [r5, #0]
 801e67a:	4413      	add	r3, r2
 801e67c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e680:	f8ad 3008 	strh.w	r3, [sp, #8]
 801e684:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e688:	4413      	add	r3, r2
 801e68a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e68e:	6803      	ldr	r3, [r0, #0]
 801e690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e692:	4798      	blx	r3
 801e694:	f010 0f01 	tst.w	r0, #1
 801e698:	d00c      	beq.n	801e6b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801e69a:	6828      	ldr	r0, [r5, #0]
 801e69c:	6803      	ldr	r3, [r0, #0]
 801e69e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e6a4:	4798      	blx	r3
 801e6a6:	b004      	add	sp, #16
 801e6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6ac:	4a21      	ldr	r2, [pc, #132]	; (801e734 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e6ae:	e7c6      	b.n	801e63e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801e6b0:	4b1f      	ldr	r3, [pc, #124]	; (801e730 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e6b2:	e7cb      	b.n	801e64c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801e6b4:	6838      	ldr	r0, [r7, #0]
 801e6b6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801e6ba:	6803      	ldr	r3, [r0, #0]
 801e6bc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801e6c0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801e6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6c6:	4798      	blx	r3
 801e6c8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e6cc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e6d0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801e6d4:	fb16 3602 	smlabb	r6, r6, r2, r3
 801e6d8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e6dc:	6838      	ldr	r0, [r7, #0]
 801e6de:	6803      	ldr	r3, [r0, #0]
 801e6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6e2:	4798      	blx	r3
 801e6e4:	4a12      	ldr	r2, [pc, #72]	; (801e730 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e6e6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801e6ea:	8813      	ldrh	r3, [r2, #0]
 801e6ec:	4691      	mov	r9, r2
 801e6ee:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801e6f2:	435d      	muls	r5, r3
 801e6f4:	fb03 1404 	mla	r4, r3, r4, r1
 801e6f8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e6fc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e700:	6838      	ldr	r0, [r7, #0]
 801e702:	42ac      	cmp	r4, r5
 801e704:	6803      	ldr	r3, [r0, #0]
 801e706:	d20e      	bcs.n	801e726 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801e708:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801e70c:	4632      	mov	r2, r6
 801e70e:	4643      	mov	r3, r8
 801e710:	4621      	mov	r1, r4
 801e712:	47d0      	blx	sl
 801e714:	f8b9 3000 	ldrh.w	r3, [r9]
 801e718:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e71c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801e720:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e724:	e7ec      	b.n	801e700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801e726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e728:	4798      	blx	r3
 801e72a:	e7bc      	b.n	801e6a6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801e72c:	20015030 	.word	0x20015030
 801e730:	20015032 	.word	0x20015032
 801e734:	20015034 	.word	0x20015034
 801e738:	20015038 	.word	0x20015038

0801e73c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e740:	b08b      	sub	sp, #44	; 0x2c
 801e742:	460f      	mov	r7, r1
 801e744:	4616      	mov	r6, r2
 801e746:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801e74a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e74e:	f1bb 0f00 	cmp.w	fp, #0
 801e752:	d04a      	beq.n	801e7ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801e754:	6810      	ldr	r0, [r2, #0]
 801e756:	ad06      	add	r5, sp, #24
 801e758:	6851      	ldr	r1, [r2, #4]
 801e75a:	c503      	stmia	r5!, {r0, r1}
 801e75c:	6818      	ldr	r0, [r3, #0]
 801e75e:	ad08      	add	r5, sp, #32
 801e760:	6859      	ldr	r1, [r3, #4]
 801e762:	c503      	stmia	r5!, {r0, r1}
 801e764:	a806      	add	r0, sp, #24
 801e766:	f7fa fc5d 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e76a:	4631      	mov	r1, r6
 801e76c:	a808      	add	r0, sp, #32
 801e76e:	f7fa fc81 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e772:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e776:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e77a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e77e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801e782:	fb16 2103 	smlabb	r1, r6, r3, r2
 801e786:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e78a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801e78e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e792:	4f5f      	ldr	r7, [pc, #380]	; (801e910 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e794:	440a      	add	r2, r1
 801e796:	6838      	ldr	r0, [r7, #0]
 801e798:	46b9      	mov	r9, r7
 801e79a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e79e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e7a2:	4413      	add	r3, r2
 801e7a4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e7a8:	6803      	ldr	r3, [r0, #0]
 801e7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7ac:	4798      	blx	r3
 801e7ae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e7b2:	d11d      	bne.n	801e7f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801e7b4:	b9fc      	cbnz	r4, 801e7f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e7b6:	f010 0f01 	tst.w	r0, #1
 801e7ba:	d01c      	beq.n	801e7f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e7bc:	f8d9 0000 	ldr.w	r0, [r9]
 801e7c0:	2700      	movs	r7, #0
 801e7c2:	b2ad      	uxth	r5, r5
 801e7c4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e7c8:	6801      	ldr	r1, [r0, #0]
 801e7ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e7ce:	f8cd b00c 	str.w	fp, [sp, #12]
 801e7d2:	9501      	str	r5, [sp, #4]
 801e7d4:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801e7d8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e7dc:	9402      	str	r4, [sp, #8]
 801e7de:	fa1f f488 	uxth.w	r4, r8
 801e7e2:	9400      	str	r4, [sp, #0]
 801e7e4:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801e7e6:	4631      	mov	r1, r6
 801e7e8:	47a0      	blx	r4
 801e7ea:	b00b      	add	sp, #44	; 0x2c
 801e7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7f0:	f010 0f04 	tst.w	r0, #4
 801e7f4:	e7e1      	b.n	801e7ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801e7f6:	f8d9 0000 	ldr.w	r0, [r9]
 801e7fa:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801e7fe:	6803      	ldr	r3, [r0, #0]
 801e800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e802:	4798      	blx	r3
 801e804:	4b43      	ldr	r3, [pc, #268]	; (801e914 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801e806:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e80a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e80e:	881a      	ldrh	r2, [r3, #0]
 801e810:	469a      	mov	sl, r3
 801e812:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e816:	fb05 f502 	mul.w	r5, r5, r2
 801e81a:	fb02 1404 	mla	r4, r2, r4, r1
 801e81e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e822:	d059      	beq.n	801e8d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801e824:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801e828:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e82c:	fa1f f28b 	uxth.w	r2, fp
 801e830:	469e      	mov	lr, r3
 801e832:	fa1f f989 	uxth.w	r9, r9
 801e836:	42ac      	cmp	r4, r5
 801e838:	d264      	bcs.n	801e904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e83a:	eb04 0a07 	add.w	sl, r4, r7
 801e83e:	4554      	cmp	r4, sl
 801e840:	d23d      	bcs.n	801e8be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801e842:	8821      	ldrh	r1, [r4, #0]
 801e844:	f836 3b02 	ldrh.w	r3, [r6], #2
 801e848:	1208      	asrs	r0, r1, #8
 801e84a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e84e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e852:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801e856:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e85a:	00c9      	lsls	r1, r1, #3
 801e85c:	fb10 f009 	smulbb	r0, r0, r9
 801e860:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e864:	b2c9      	uxtb	r1, r1
 801e866:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e86a:	10d8      	asrs	r0, r3, #3
 801e86c:	fb1b fb09 	smulbb	fp, fp, r9
 801e870:	00db      	lsls	r3, r3, #3
 801e872:	fa1f fc8c 	uxth.w	ip, ip
 801e876:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e87a:	fb11 f109 	smulbb	r1, r1, r9
 801e87e:	b2db      	uxtb	r3, r3
 801e880:	fb00 b002 	mla	r0, r0, r2, fp
 801e884:	f10c 0b01 	add.w	fp, ip, #1
 801e888:	fb03 1302 	mla	r3, r3, r2, r1
 801e88c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e890:	b29b      	uxth	r3, r3
 801e892:	b280      	uxth	r0, r0
 801e894:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801e898:	f103 0c01 	add.w	ip, r3, #1
 801e89c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e8a0:	1c43      	adds	r3, r0, #1
 801e8a2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e8a6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e8aa:	0940      	lsrs	r0, r0, #5
 801e8ac:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e8b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e8b4:	ea4c 0c00 	orr.w	ip, ip, r0
 801e8b8:	f824 cb02 	strh.w	ip, [r4], #2
 801e8bc:	e7bf      	b.n	801e83e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801e8be:	f8be 3000 	ldrh.w	r3, [lr]
 801e8c2:	eba3 0308 	sub.w	r3, r3, r8
 801e8c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e8ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e8ce:	eba3 0308 	sub.w	r3, r3, r8
 801e8d2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e8d6:	e7ae      	b.n	801e836 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801e8d8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e8dc:	f8d9 0000 	ldr.w	r0, [r9]
 801e8e0:	42ac      	cmp	r4, r5
 801e8e2:	6803      	ldr	r3, [r0, #0]
 801e8e4:	d20e      	bcs.n	801e904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e8e6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801e8ea:	4632      	mov	r2, r6
 801e8ec:	463b      	mov	r3, r7
 801e8ee:	4621      	mov	r1, r4
 801e8f0:	47c0      	blx	r8
 801e8f2:	f8ba 3000 	ldrh.w	r3, [sl]
 801e8f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e8fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e8fe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e902:	e7eb      	b.n	801e8dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801e904:	4b02      	ldr	r3, [pc, #8]	; (801e910 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e906:	6818      	ldr	r0, [r3, #0]
 801e908:	6803      	ldr	r3, [r0, #0]
 801e90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e90c:	4798      	blx	r3
 801e90e:	e76c      	b.n	801e7ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801e910:	20015038 	.word	0x20015038
 801e914:	20015032 	.word	0x20015032

0801e918 <_ZN8touchgfx8LCD16bppD0Ev>:
 801e918:	b510      	push	{r4, lr}
 801e91a:	4604      	mov	r4, r0
 801e91c:	2184      	movs	r1, #132	; 0x84
 801e91e:	f00a fe53 	bl	80295c8 <_ZdlPvj>
 801e922:	4620      	mov	r0, r4
 801e924:	bd10      	pop	{r4, pc}

0801e926 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801e926:	b510      	push	{r4, lr}
 801e928:	4604      	mov	r4, r0
 801e92a:	2104      	movs	r1, #4
 801e92c:	f00a fe4c 	bl	80295c8 <_ZdlPvj>
 801e930:	4620      	mov	r0, r4
 801e932:	bd10      	pop	{r4, pc}

0801e934 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801e934:	b510      	push	{r4, lr}
 801e936:	4604      	mov	r4, r0
 801e938:	2104      	movs	r1, #4
 801e93a:	f00a fe45 	bl	80295c8 <_ZdlPvj>
 801e93e:	4620      	mov	r0, r4
 801e940:	bd10      	pop	{r4, pc}

0801e942 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801e942:	b510      	push	{r4, lr}
 801e944:	4604      	mov	r4, r0
 801e946:	f640 0144 	movw	r1, #2116	; 0x844
 801e94a:	f00a fe3d 	bl	80295c8 <_ZdlPvj>
 801e94e:	4620      	mov	r0, r4
 801e950:	bd10      	pop	{r4, pc}

0801e952 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e952:	b510      	push	{r4, lr}
 801e954:	4604      	mov	r4, r0
 801e956:	2104      	movs	r1, #4
 801e958:	f00a fe36 	bl	80295c8 <_ZdlPvj>
 801e95c:	4620      	mov	r0, r4
 801e95e:	bd10      	pop	{r4, pc}

0801e960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e960:	b510      	push	{r4, lr}
 801e962:	4604      	mov	r4, r0
 801e964:	2104      	movs	r1, #4
 801e966:	f00a fe2f 	bl	80295c8 <_ZdlPvj>
 801e96a:	4620      	mov	r0, r4
 801e96c:	bd10      	pop	{r4, pc}

0801e96e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e96e:	b510      	push	{r4, lr}
 801e970:	4604      	mov	r4, r0
 801e972:	2104      	movs	r1, #4
 801e974:	f00a fe28 	bl	80295c8 <_ZdlPvj>
 801e978:	4620      	mov	r0, r4
 801e97a:	bd10      	pop	{r4, pc}

0801e97c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e97c:	b510      	push	{r4, lr}
 801e97e:	4604      	mov	r4, r0
 801e980:	2104      	movs	r1, #4
 801e982:	f00a fe21 	bl	80295c8 <_ZdlPvj>
 801e986:	4620      	mov	r0, r4
 801e988:	bd10      	pop	{r4, pc}

0801e98a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e98a:	b510      	push	{r4, lr}
 801e98c:	4604      	mov	r4, r0
 801e98e:	2104      	movs	r1, #4
 801e990:	f00a fe1a 	bl	80295c8 <_ZdlPvj>
 801e994:	4620      	mov	r0, r4
 801e996:	bd10      	pop	{r4, pc}

0801e998 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e998:	b510      	push	{r4, lr}
 801e99a:	4604      	mov	r4, r0
 801e99c:	2104      	movs	r1, #4
 801e99e:	f00a fe13 	bl	80295c8 <_ZdlPvj>
 801e9a2:	4620      	mov	r0, r4
 801e9a4:	bd10      	pop	{r4, pc}

0801e9a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e9a6:	b510      	push	{r4, lr}
 801e9a8:	4604      	mov	r4, r0
 801e9aa:	2104      	movs	r1, #4
 801e9ac:	f00a fe0c 	bl	80295c8 <_ZdlPvj>
 801e9b0:	4620      	mov	r0, r4
 801e9b2:	bd10      	pop	{r4, pc}

0801e9b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e9b4:	b510      	push	{r4, lr}
 801e9b6:	4604      	mov	r4, r0
 801e9b8:	2104      	movs	r1, #4
 801e9ba:	f00a fe05 	bl	80295c8 <_ZdlPvj>
 801e9be:	4620      	mov	r0, r4
 801e9c0:	bd10      	pop	{r4, pc}

0801e9c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e9c2:	b510      	push	{r4, lr}
 801e9c4:	4604      	mov	r4, r0
 801e9c6:	2104      	movs	r1, #4
 801e9c8:	f00a fdfe 	bl	80295c8 <_ZdlPvj>
 801e9cc:	4620      	mov	r0, r4
 801e9ce:	bd10      	pop	{r4, pc}

0801e9d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e9d0:	b510      	push	{r4, lr}
 801e9d2:	4604      	mov	r4, r0
 801e9d4:	2104      	movs	r1, #4
 801e9d6:	f00a fdf7 	bl	80295c8 <_ZdlPvj>
 801e9da:	4620      	mov	r0, r4
 801e9dc:	bd10      	pop	{r4, pc}

0801e9de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e9de:	b510      	push	{r4, lr}
 801e9e0:	4604      	mov	r4, r0
 801e9e2:	2104      	movs	r1, #4
 801e9e4:	f00a fdf0 	bl	80295c8 <_ZdlPvj>
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	bd10      	pop	{r4, pc}

0801e9ec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e9ec:	b510      	push	{r4, lr}
 801e9ee:	4604      	mov	r4, r0
 801e9f0:	2104      	movs	r1, #4
 801e9f2:	f00a fde9 	bl	80295c8 <_ZdlPvj>
 801e9f6:	4620      	mov	r0, r4
 801e9f8:	bd10      	pop	{r4, pc}

0801e9fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e9fa:	b510      	push	{r4, lr}
 801e9fc:	4604      	mov	r4, r0
 801e9fe:	2104      	movs	r1, #4
 801ea00:	f00a fde2 	bl	80295c8 <_ZdlPvj>
 801ea04:	4620      	mov	r0, r4
 801ea06:	bd10      	pop	{r4, pc}

0801ea08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ea08:	b510      	push	{r4, lr}
 801ea0a:	4604      	mov	r4, r0
 801ea0c:	2104      	movs	r1, #4
 801ea0e:	f00a fddb 	bl	80295c8 <_ZdlPvj>
 801ea12:	4620      	mov	r0, r4
 801ea14:	bd10      	pop	{r4, pc}

0801ea16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ea16:	b510      	push	{r4, lr}
 801ea18:	4604      	mov	r4, r0
 801ea1a:	2104      	movs	r1, #4
 801ea1c:	f00a fdd4 	bl	80295c8 <_ZdlPvj>
 801ea20:	4620      	mov	r0, r4
 801ea22:	bd10      	pop	{r4, pc}

0801ea24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ea24:	b510      	push	{r4, lr}
 801ea26:	4604      	mov	r4, r0
 801ea28:	2104      	movs	r1, #4
 801ea2a:	f00a fdcd 	bl	80295c8 <_ZdlPvj>
 801ea2e:	4620      	mov	r0, r4
 801ea30:	bd10      	pop	{r4, pc}

0801ea32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ea32:	b510      	push	{r4, lr}
 801ea34:	4604      	mov	r4, r0
 801ea36:	2104      	movs	r1, #4
 801ea38:	f00a fdc6 	bl	80295c8 <_ZdlPvj>
 801ea3c:	4620      	mov	r0, r4
 801ea3e:	bd10      	pop	{r4, pc}

0801ea40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ea40:	b510      	push	{r4, lr}
 801ea42:	4604      	mov	r4, r0
 801ea44:	2104      	movs	r1, #4
 801ea46:	f00a fdbf 	bl	80295c8 <_ZdlPvj>
 801ea4a:	4620      	mov	r0, r4
 801ea4c:	bd10      	pop	{r4, pc}

0801ea4e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ea4e:	b510      	push	{r4, lr}
 801ea50:	4604      	mov	r4, r0
 801ea52:	2104      	movs	r1, #4
 801ea54:	f00a fdb8 	bl	80295c8 <_ZdlPvj>
 801ea58:	4620      	mov	r0, r4
 801ea5a:	bd10      	pop	{r4, pc}

0801ea5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ea5c:	b510      	push	{r4, lr}
 801ea5e:	4604      	mov	r4, r0
 801ea60:	2104      	movs	r1, #4
 801ea62:	f00a fdb1 	bl	80295c8 <_ZdlPvj>
 801ea66:	4620      	mov	r0, r4
 801ea68:	bd10      	pop	{r4, pc}

0801ea6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ea6a:	b510      	push	{r4, lr}
 801ea6c:	4604      	mov	r4, r0
 801ea6e:	2104      	movs	r1, #4
 801ea70:	f00a fdaa 	bl	80295c8 <_ZdlPvj>
 801ea74:	4620      	mov	r0, r4
 801ea76:	bd10      	pop	{r4, pc}

0801ea78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ea78:	b510      	push	{r4, lr}
 801ea7a:	4604      	mov	r4, r0
 801ea7c:	2104      	movs	r1, #4
 801ea7e:	f00a fda3 	bl	80295c8 <_ZdlPvj>
 801ea82:	4620      	mov	r0, r4
 801ea84:	bd10      	pop	{r4, pc}

0801ea86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ea86:	b510      	push	{r4, lr}
 801ea88:	4604      	mov	r4, r0
 801ea8a:	2104      	movs	r1, #4
 801ea8c:	f00a fd9c 	bl	80295c8 <_ZdlPvj>
 801ea90:	4620      	mov	r0, r4
 801ea92:	bd10      	pop	{r4, pc}

0801ea94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ea94:	b510      	push	{r4, lr}
 801ea96:	4604      	mov	r4, r0
 801ea98:	2104      	movs	r1, #4
 801ea9a:	f00a fd95 	bl	80295c8 <_ZdlPvj>
 801ea9e:	4620      	mov	r0, r4
 801eaa0:	bd10      	pop	{r4, pc}

0801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801eaa2:	b510      	push	{r4, lr}
 801eaa4:	4604      	mov	r4, r0
 801eaa6:	2104      	movs	r1, #4
 801eaa8:	f00a fd8e 	bl	80295c8 <_ZdlPvj>
 801eaac:	4620      	mov	r0, r4
 801eaae:	bd10      	pop	{r4, pc}

0801eab0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801eab0:	b510      	push	{r4, lr}
 801eab2:	4604      	mov	r4, r0
 801eab4:	2104      	movs	r1, #4
 801eab6:	f00a fd87 	bl	80295c8 <_ZdlPvj>
 801eaba:	4620      	mov	r0, r4
 801eabc:	bd10      	pop	{r4, pc}

0801eabe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801eabe:	b510      	push	{r4, lr}
 801eac0:	4604      	mov	r4, r0
 801eac2:	2104      	movs	r1, #4
 801eac4:	f00a fd80 	bl	80295c8 <_ZdlPvj>
 801eac8:	4620      	mov	r0, r4
 801eaca:	bd10      	pop	{r4, pc}

0801eacc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801eacc:	b510      	push	{r4, lr}
 801eace:	4604      	mov	r4, r0
 801ead0:	2104      	movs	r1, #4
 801ead2:	f00a fd79 	bl	80295c8 <_ZdlPvj>
 801ead6:	4620      	mov	r0, r4
 801ead8:	bd10      	pop	{r4, pc}
	...

0801eadc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae0:	b08f      	sub	sp, #60	; 0x3c
 801eae2:	461c      	mov	r4, r3
 801eae4:	9205      	str	r2, [sp, #20]
 801eae6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801eaea:	9100      	str	r1, [sp, #0]
 801eaec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eaee:	9201      	str	r2, [sp, #4]
 801eaf0:	2a00      	cmp	r2, #0
 801eaf2:	f000 8116 	beq.w	801ed22 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801eaf6:	6820      	ldr	r0, [r4, #0]
 801eaf8:	aa0a      	add	r2, sp, #40	; 0x28
 801eafa:	6861      	ldr	r1, [r4, #4]
 801eafc:	c203      	stmia	r2!, {r0, r1}
 801eafe:	6818      	ldr	r0, [r3, #0]
 801eb00:	aa0c      	add	r2, sp, #48	; 0x30
 801eb02:	6859      	ldr	r1, [r3, #4]
 801eb04:	c203      	stmia	r2!, {r0, r1}
 801eb06:	a80a      	add	r0, sp, #40	; 0x28
 801eb08:	f7fa fa8c 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb0c:	4621      	mov	r1, r4
 801eb0e:	a80c      	add	r0, sp, #48	; 0x30
 801eb10:	f7fa fab0 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eb14:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801eb18:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801eb1c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801eb20:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801eb24:	bfdb      	ittet	le
 801eb26:	b2b3      	uxthle	r3, r6
 801eb28:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801eb2c:	2301      	movgt	r3, #1
 801eb2e:	fb92 f3f3 	sdivle	r3, r2, r3
 801eb32:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801eb36:	441d      	add	r5, r3
 801eb38:	fb92 f1f3 	sdiv	r1, r2, r3
 801eb3c:	fa1f fc81 	uxth.w	ip, r1
 801eb40:	3d01      	subs	r5, #1
 801eb42:	fb0c 2413 	mls	r4, ip, r3, r2
 801eb46:	4661      	mov	r1, ip
 801eb48:	fb14 f406 	smulbb	r4, r4, r6
 801eb4c:	4404      	add	r4, r0
 801eb4e:	fb95 f5f3 	sdiv	r5, r5, r3
 801eb52:	b2a4      	uxth	r4, r4
 801eb54:	b131      	cbz	r1, 801eb64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801eb56:	9b05      	ldr	r3, [sp, #20]
 801eb58:	9900      	ldr	r1, [sp, #0]
 801eb5a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801eb5e:	ba1b      	rev	r3, r3
 801eb60:	4419      	add	r1, r3
 801eb62:	9100      	str	r1, [sp, #0]
 801eb64:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801eb68:	b2ad      	uxth	r5, r5
 801eb6a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801eb6e:	4418      	add	r0, r3
 801eb70:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801eb74:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801eb78:	00ad      	lsls	r5, r5, #2
 801eb7a:	441a      	add	r2, r3
 801eb7c:	4b6a      	ldr	r3, [pc, #424]	; (801ed28 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801eb7e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801eb82:	6818      	ldr	r0, [r3, #0]
 801eb84:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801eb88:	6803      	ldr	r3, [r0, #0]
 801eb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb8c:	4798      	blx	r3
 801eb8e:	4967      	ldr	r1, [pc, #412]	; (801ed2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801eb90:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801eb94:	2c00      	cmp	r4, #0
 801eb96:	880b      	ldrh	r3, [r1, #0]
 801eb98:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801eb9c:	bf0c      	ite	eq
 801eb9e:	46c6      	moveq	lr, r8
 801eba0:	f04f 0e00 	movne.w	lr, #0
 801eba4:	9109      	str	r1, [sp, #36]	; 0x24
 801eba6:	fb03 c202 	mla	r2, r3, r2, ip
 801ebaa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801ebae:	4373      	muls	r3, r6
 801ebb0:	fa1f fe8e 	uxth.w	lr, lr
 801ebb4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ebb8:	9103      	str	r1, [sp, #12]
 801ebba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ebbe:	9306      	str	r3, [sp, #24]
 801ebc0:	1d2b      	adds	r3, r5, #4
 801ebc2:	9307      	str	r3, [sp, #28]
 801ebc4:	9b01      	ldr	r3, [sp, #4]
 801ebc6:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801ebca:	2300      	movs	r3, #0
 801ebcc:	b292      	uxth	r2, r2
 801ebce:	9302      	str	r3, [sp, #8]
 801ebd0:	9204      	str	r2, [sp, #16]
 801ebd2:	9a06      	ldr	r2, [sp, #24]
 801ebd4:	4282      	cmp	r2, r0
 801ebd6:	f240 809f 	bls.w	801ed18 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801ebda:	b963      	cbnz	r3, 801ebf6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801ebdc:	9b00      	ldr	r3, [sp, #0]
 801ebde:	781a      	ldrb	r2, [r3, #0]
 801ebe0:	0993      	lsrs	r3, r2, #6
 801ebe2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801ebe6:	9202      	str	r2, [sp, #8]
 801ebe8:	1e5a      	subs	r2, r3, #1
 801ebea:	2a02      	cmp	r2, #2
 801ebec:	d815      	bhi.n	801ec1a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801ebee:	9a00      	ldr	r2, [sp, #0]
 801ebf0:	b29b      	uxth	r3, r3
 801ebf2:	3201      	adds	r2, #1
 801ebf4:	9200      	str	r2, [sp, #0]
 801ebf6:	b1b4      	cbz	r4, 801ec26 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801ebf8:	429c      	cmp	r4, r3
 801ebfa:	bf91      	iteee	ls
 801ebfc:	1b1c      	subls	r4, r3, r4
 801ebfe:	1ae4      	subhi	r4, r4, r3
 801ec00:	4671      	movhi	r1, lr
 801ec02:	f04f 0a00 	movhi.w	sl, #0
 801ec06:	bf9b      	ittet	ls
 801ec08:	fa1f fa84 	uxthls.w	sl, r4
 801ec0c:	2400      	movls	r4, #0
 801ec0e:	b2a4      	uxthhi	r4, r4
 801ec10:	fa1f f188 	uxthls.w	r1, r8
 801ec14:	4653      	mov	r3, sl
 801ec16:	468e      	mov	lr, r1
 801ec18:	e7db      	b.n	801ebd2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801ec1a:	9a00      	ldr	r2, [sp, #0]
 801ec1c:	9b00      	ldr	r3, [sp, #0]
 801ec1e:	3202      	adds	r2, #2
 801ec20:	785b      	ldrb	r3, [r3, #1]
 801ec22:	9200      	str	r2, [sp, #0]
 801ec24:	e7e7      	b.n	801ebf6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801ec26:	2202      	movs	r2, #2
 801ec28:	9907      	ldr	r1, [sp, #28]
 801ec2a:	4573      	cmp	r3, lr
 801ec2c:	4615      	mov	r5, r2
 801ec2e:	9a02      	ldr	r2, [sp, #8]
 801ec30:	bf24      	itt	cs
 801ec32:	eba3 0a0e 	subcs.w	sl, r3, lr
 801ec36:	46f1      	movcs	r9, lr
 801ec38:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ec3c:	9905      	ldr	r1, [sp, #20]
 801ec3e:	bf34      	ite	cc
 801ec40:	4699      	movcc	r9, r3
 801ec42:	fa1f fa8a 	uxthcs.w	sl, sl
 801ec46:	f831 c002 	ldrh.w	ip, [r1, r2]
 801ec4a:	bf38      	it	cc
 801ec4c:	ebae 0103 	subcc.w	r1, lr, r3
 801ec50:	9a01      	ldr	r2, [sp, #4]
 801ec52:	bf2e      	itee	cs
 801ec54:	4621      	movcs	r1, r4
 801ec56:	b289      	uxthcc	r1, r1
 801ec58:	46a2      	movcc	sl, r4
 801ec5a:	2aff      	cmp	r2, #255	; 0xff
 801ec5c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ec60:	d105      	bne.n	801ec6e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801ec62:	4481      	add	r9, r0
 801ec64:	4581      	cmp	r9, r0
 801ec66:	d045      	beq.n	801ecf4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801ec68:	f820 cb02 	strh.w	ip, [r0], #2
 801ec6c:	e7fa      	b.n	801ec64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801ec6e:	ea4f 222c 	mov.w	r2, ip, asr #8
 801ec72:	9d03      	ldr	r5, [sp, #12]
 801ec74:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801ec78:	4481      	add	r9, r0
 801ec7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ec7e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ec82:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ec86:	fa5f fc8c 	uxtb.w	ip, ip
 801ec8a:	436a      	muls	r2, r5
 801ec8c:	fb0b fb05 	mul.w	fp, fp, r5
 801ec90:	fb0c fc05 	mul.w	ip, ip, r5
 801ec94:	9208      	str	r2, [sp, #32]
 801ec96:	4581      	cmp	r9, r0
 801ec98:	d02c      	beq.n	801ecf4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801ec9a:	8802      	ldrh	r2, [r0, #0]
 801ec9c:	9d04      	ldr	r5, [sp, #16]
 801ec9e:	1216      	asrs	r6, r2, #8
 801eca0:	9f04      	ldr	r7, [sp, #16]
 801eca2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801eca6:	fb16 f605 	smulbb	r6, r6, r5
 801ecaa:	9d08      	ldr	r5, [sp, #32]
 801ecac:	442e      	add	r6, r5
 801ecae:	10d5      	asrs	r5, r2, #3
 801ecb0:	00d2      	lsls	r2, r2, #3
 801ecb2:	b2b6      	uxth	r6, r6
 801ecb4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ecb8:	b2d2      	uxtb	r2, r2
 801ecba:	fb15 f507 	smulbb	r5, r5, r7
 801ecbe:	fb12 f207 	smulbb	r2, r2, r7
 801ecc2:	1c77      	adds	r7, r6, #1
 801ecc4:	445d      	add	r5, fp
 801ecc6:	4462      	add	r2, ip
 801ecc8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801eccc:	b2ad      	uxth	r5, r5
 801ecce:	b292      	uxth	r2, r2
 801ecd0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ecd4:	1c57      	adds	r7, r2, #1
 801ecd6:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801ecda:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ecde:	4316      	orrs	r6, r2
 801ece0:	1c6a      	adds	r2, r5, #1
 801ece2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801ece6:	096d      	lsrs	r5, r5, #5
 801ece8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ecec:	432e      	orrs	r6, r5
 801ecee:	f820 6b02 	strh.w	r6, [r0], #2
 801ecf2:	e7d0      	b.n	801ec96 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801ecf4:	4573      	cmp	r3, lr
 801ecf6:	d38d      	bcc.n	801ec14 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801ecf8:	fa1f f188 	uxth.w	r1, r8
 801ecfc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801ed00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed02:	1a64      	subs	r4, r4, r1
 801ed04:	881b      	ldrh	r3, [r3, #0]
 801ed06:	b2a4      	uxth	r4, r4
 801ed08:	eba3 0308 	sub.w	r3, r3, r8
 801ed0c:	2c00      	cmp	r4, #0
 801ed0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ed12:	bf18      	it	ne
 801ed14:	2100      	movne	r1, #0
 801ed16:	e77d      	b.n	801ec14 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801ed18:	4b03      	ldr	r3, [pc, #12]	; (801ed28 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801ed1a:	6818      	ldr	r0, [r3, #0]
 801ed1c:	6803      	ldr	r3, [r0, #0]
 801ed1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed20:	4798      	blx	r3
 801ed22:	b00f      	add	sp, #60	; 0x3c
 801ed24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed28:	20015038 	.word	0x20015038
 801ed2c:	20015032 	.word	0x20015032

0801ed30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801ed30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed34:	b09f      	sub	sp, #124	; 0x7c
 801ed36:	461d      	mov	r5, r3
 801ed38:	4604      	mov	r4, r0
 801ed3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed3c:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801ed40:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801ed44:	9209      	str	r2, [sp, #36]	; 0x24
 801ed46:	2a00      	cmp	r2, #0
 801ed48:	f000 81ed 	beq.w	801f126 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801ed4c:	6828      	ldr	r0, [r5, #0]
 801ed4e:	aa1a      	add	r2, sp, #104	; 0x68
 801ed50:	6869      	ldr	r1, [r5, #4]
 801ed52:	c203      	stmia	r2!, {r0, r1}
 801ed54:	6818      	ldr	r0, [r3, #0]
 801ed56:	aa1c      	add	r2, sp, #112	; 0x70
 801ed58:	6859      	ldr	r1, [r3, #4]
 801ed5a:	c203      	stmia	r2!, {r0, r1}
 801ed5c:	a81a      	add	r0, sp, #104	; 0x68
 801ed5e:	f7fa f961 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed62:	4629      	mov	r1, r5
 801ed64:	a81c      	add	r0, sp, #112	; 0x70
 801ed66:	f7fa f985 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed6a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801ed6e:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 801ed72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ed76:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 801ed7a:	bfdb      	ittet	le
 801ed7c:	b29a      	uxthle	r2, r3
 801ed7e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801ed82:	2201      	movgt	r2, #1
 801ed84:	fb91 f2f2 	sdivle	r2, r1, r2
 801ed88:	9202      	str	r2, [sp, #8]
 801ed8a:	9802      	ldr	r0, [sp, #8]
 801ed8c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801ed90:	9902      	ldr	r1, [sp, #8]
 801ed92:	fb92 f0f0 	sdiv	r0, r2, r0
 801ed96:	b280      	uxth	r0, r0
 801ed98:	4488      	add	r8, r1
 801ed9a:	9010      	str	r0, [sp, #64]	; 0x40
 801ed9c:	f108 38ff 	add.w	r8, r8, #4294967295
 801eda0:	9802      	ldr	r0, [sp, #8]
 801eda2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801eda4:	fb05 2510 	mls	r5, r5, r0, r2
 801eda8:	fb98 f8f1 	sdiv	r8, r8, r1
 801edac:	fb15 f503 	smulbb	r5, r5, r3
 801edb0:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801edb4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801edb8:	f108 0801 	add.w	r8, r8, #1
 801edbc:	440d      	add	r5, r1
 801edbe:	4419      	add	r1, r3
 801edc0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801edc4:	fa1f f888 	uxth.w	r8, r8
 801edc8:	441a      	add	r2, r3
 801edca:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801edce:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801edd2:	b2ad      	uxth	r5, r5
 801edd4:	9304      	str	r3, [sp, #16]
 801edd6:	4b94      	ldr	r3, [pc, #592]	; (801f028 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801edd8:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801eddc:	6818      	ldr	r0, [r3, #0]
 801edde:	6803      	ldr	r3, [r0, #0]
 801ede0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ede2:	4798      	blx	r3
 801ede4:	4b91      	ldr	r3, [pc, #580]	; (801f02c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801ede6:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801edea:	2d00      	cmp	r5, #0
 801edec:	881a      	ldrh	r2, [r3, #0]
 801edee:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801edf2:	fb02 f606 	mul.w	r6, r2, r6
 801edf6:	fb02 7101 	mla	r1, r2, r1, r7
 801edfa:	9318      	str	r3, [sp, #96]	; 0x60
 801edfc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801ee00:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801ee04:	f04f 0100 	mov.w	r1, #0
 801ee08:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801ee0c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee0e:	4b88      	ldr	r3, [pc, #544]	; (801f030 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801ee10:	920a      	str	r2, [sp, #40]	; 0x28
 801ee12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ee14:	eba3 0304 	sub.w	r3, r3, r4
 801ee18:	910d      	str	r1, [sp, #52]	; 0x34
 801ee1a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801ee1e:	9319      	str	r3, [sp, #100]	; 0x64
 801ee20:	f108 0204 	add.w	r2, r8, #4
 801ee24:	9211      	str	r2, [sp, #68]	; 0x44
 801ee26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee28:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801ee2c:	9215      	str	r2, [sp, #84]	; 0x54
 801ee2e:	9a04      	ldr	r2, [sp, #16]
 801ee30:	bf18      	it	ne
 801ee32:	2200      	movne	r2, #0
 801ee34:	b292      	uxth	r2, r2
 801ee36:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ee38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee3a:	fa11 f383 	uxtah	r3, r1, r3
 801ee3e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ee40:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ee44:	3304      	adds	r3, #4
 801ee46:	9306      	str	r3, [sp, #24]
 801ee48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee4a:	4283      	cmp	r3, r0
 801ee4c:	f240 8166 	bls.w	801f11c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801ee50:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801ee54:	f04f 0a01 	mov.w	sl, #1
 801ee58:	9902      	ldr	r1, [sp, #8]
 801ee5a:	9e06      	ldr	r6, [sp, #24]
 801ee5c:	46d3      	mov	fp, sl
 801ee5e:	4657      	mov	r7, sl
 801ee60:	7836      	ldrb	r6, [r6, #0]
 801ee62:	fbb5 f3f3 	udiv	r3, r5, r3
 801ee66:	1acb      	subs	r3, r1, r3
 801ee68:	9612      	str	r6, [sp, #72]	; 0x48
 801ee6a:	3601      	adds	r6, #1
 801ee6c:	b29b      	uxth	r3, r3
 801ee6e:	9605      	str	r6, [sp, #20]
 801ee70:	9316      	str	r3, [sp, #88]	; 0x58
 801ee72:	9b06      	ldr	r3, [sp, #24]
 801ee74:	7859      	ldrb	r1, [r3, #1]
 801ee76:	789b      	ldrb	r3, [r3, #2]
 801ee78:	021b      	lsls	r3, r3, #8
 801ee7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801ee7e:	9906      	ldr	r1, [sp, #24]
 801ee80:	78c9      	ldrb	r1, [r1, #3]
 801ee82:	430b      	orrs	r3, r1
 801ee84:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ee86:	4419      	add	r1, r3
 801ee88:	1c4e      	adds	r6, r1, #1
 801ee8a:	7849      	ldrb	r1, [r1, #1]
 801ee8c:	9603      	str	r6, [sp, #12]
 801ee8e:	0209      	lsls	r1, r1, #8
 801ee90:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ee92:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801ee96:	5cf3      	ldrb	r3, [r6, r3]
 801ee98:	4319      	orrs	r1, r3
 801ee9a:	b28b      	uxth	r3, r1
 801ee9c:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801eea0:	930c      	str	r3, [sp, #48]	; 0x30
 801eea2:	2300      	movs	r3, #0
 801eea4:	9307      	str	r3, [sp, #28]
 801eea6:	469c      	mov	ip, r3
 801eea8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801eeac:	930e      	str	r3, [sp, #56]	; 0x38
 801eeae:	2d00      	cmp	r5, #0
 801eeb0:	d07e      	beq.n	801efb0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801eeb2:	42af      	cmp	r7, r5
 801eeb4:	d26e      	bcs.n	801ef94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801eeb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eeb8:	1bed      	subs	r5, r5, r7
 801eeba:	9201      	str	r2, [sp, #4]
 801eebc:	4283      	cmp	r3, r0
 801eebe:	b2ad      	uxth	r5, r5
 801eec0:	d802      	bhi.n	801eec8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801eec2:	e073      	b.n	801efac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d15f      	bne.n	801ef88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801eec8:	9b03      	ldr	r3, [sp, #12]
 801eeca:	f1cb 0207 	rsb	r2, fp, #7
 801eece:	785b      	ldrb	r3, [r3, #1]
 801eed0:	4093      	lsls	r3, r2
 801eed2:	005b      	lsls	r3, r3, #1
 801eed4:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801eed8:	9b03      	ldr	r3, [sp, #12]
 801eeda:	781b      	ldrb	r3, [r3, #0]
 801eedc:	fa43 f30b 	asr.w	r3, r3, fp
 801eee0:	b2db      	uxtb	r3, r3
 801eee2:	4313      	orrs	r3, r2
 801eee4:	f10b 0201 	add.w	r2, fp, #1
 801eee8:	fa5f fb82 	uxtb.w	fp, r2
 801eeec:	9a03      	ldr	r2, [sp, #12]
 801eeee:	b29f      	uxth	r7, r3
 801eef0:	f1bb 0f08 	cmp.w	fp, #8
 801eef4:	bf13      	iteet	ne
 801eef6:	3201      	addne	r2, #1
 801eef8:	3202      	addeq	r2, #2
 801eefa:	f04f 0b00 	moveq.w	fp, #0
 801eefe:	9203      	strne	r2, [sp, #12]
 801ef00:	bf08      	it	eq
 801ef02:	9203      	streq	r2, [sp, #12]
 801ef04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ef06:	42ba      	cmp	r2, r7
 801ef08:	d309      	bcc.n	801ef1e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801ef0a:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801ef0e:	2301      	movs	r3, #1
 801ef10:	9a05      	ldr	r2, [sp, #20]
 801ef12:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801ef16:	d30e      	bcc.n	801ef36 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801ef18:	469a      	mov	sl, r3
 801ef1a:	2600      	movs	r6, #0
 801ef1c:	e035      	b.n	801ef8a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801ef1e:	9b05      	ldr	r3, [sp, #20]
 801ef20:	429f      	cmp	r7, r3
 801ef22:	d318      	bcc.n	801ef56 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801ef24:	eb04 030a 	add.w	r3, r4, sl
 801ef28:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801ef2c:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801ef30:	f10a 0301 	add.w	r3, sl, #1
 801ef34:	b29b      	uxth	r3, r3
 801ef36:	9a05      	ldr	r2, [sp, #20]
 801ef38:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801ef3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ef40:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ef42:	7116      	strb	r6, [r2, #4]
 801ef44:	f10a 0601 	add.w	r6, sl, #1
 801ef48:	80d1      	strh	r1, [r2, #6]
 801ef4a:	7156      	strb	r6, [r2, #5]
 801ef4c:	9a05      	ldr	r2, [sp, #20]
 801ef4e:	3201      	adds	r2, #1
 801ef50:	b292      	uxth	r2, r2
 801ef52:	9205      	str	r2, [sp, #20]
 801ef54:	e7e0      	b.n	801ef18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801ef56:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801ef5a:	463a      	mov	r2, r7
 801ef5c:	795b      	ldrb	r3, [r3, #5]
 801ef5e:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801ef62:	4426      	add	r6, r4
 801ef64:	9919      	ldr	r1, [sp, #100]	; 0x64
 801ef66:	eb01 0c06 	add.w	ip, r1, r6
 801ef6a:	f1bc 0f00 	cmp.w	ip, #0
 801ef6e:	dd07      	ble.n	801ef80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801ef70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ef74:	f892 c004 	ldrb.w	ip, [r2, #4]
 801ef78:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801ef7c:	88d2      	ldrh	r2, [r2, #6]
 801ef7e:	e7f1      	b.n	801ef64 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801ef80:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801ef84:	b29b      	uxth	r3, r3
 801ef86:	e7c3      	b.n	801ef10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801ef88:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ef8a:	970c      	str	r7, [sp, #48]	; 0x30
 801ef8c:	46b4      	mov	ip, r6
 801ef8e:	9a01      	ldr	r2, [sp, #4]
 801ef90:	461f      	mov	r7, r3
 801ef92:	e78c      	b.n	801eeae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801ef94:	1b7b      	subs	r3, r7, r5
 801ef96:	eb0c 0605 	add.w	r6, ip, r5
 801ef9a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ef9e:	b29b      	uxth	r3, r3
 801efa0:	b2b6      	uxth	r6, r6
 801efa2:	9201      	str	r2, [sp, #4]
 801efa4:	2500      	movs	r5, #0
 801efa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801efa8:	4282      	cmp	r2, r0
 801efaa:	d88b      	bhi.n	801eec4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801efac:	9a01      	ldr	r2, [sp, #4]
 801efae:	e74b      	b.n	801ee48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801efb0:	4297      	cmp	r7, r2
 801efb2:	d332      	bcc.n	801f01a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801efb4:	1abb      	subs	r3, r7, r2
 801efb6:	9208      	str	r2, [sp, #32]
 801efb8:	9501      	str	r5, [sp, #4]
 801efba:	b29b      	uxth	r3, r3
 801efbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801efbe:	29ff      	cmp	r1, #255	; 0xff
 801efc0:	9908      	ldr	r1, [sp, #32]
 801efc2:	eb0c 0601 	add.w	r6, ip, r1
 801efc6:	d135      	bne.n	801f034 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801efc8:	f1a0 0e02 	sub.w	lr, r0, #2
 801efcc:	b2b6      	uxth	r6, r6
 801efce:	45b4      	cmp	ip, r6
 801efd0:	f040 808c 	bne.w	801f0ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801efd4:	9908      	ldr	r1, [sp, #32]
 801efd6:	4297      	cmp	r7, r2
 801efd8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801efdc:	d3e2      	bcc.n	801efa4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801efde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801efe0:	9904      	ldr	r1, [sp, #16]
 801efe2:	8812      	ldrh	r2, [r2, #0]
 801efe4:	1a52      	subs	r2, r2, r1
 801efe6:	9916      	ldr	r1, [sp, #88]	; 0x58
 801efe8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801efec:	9a07      	ldr	r2, [sp, #28]
 801efee:	3201      	adds	r2, #1
 801eff0:	428a      	cmp	r2, r1
 801eff2:	9207      	str	r2, [sp, #28]
 801eff4:	f040 8087 	bne.w	801f106 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801eff8:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801effc:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 801f000:	9b04      	ldr	r3, [sp, #16]
 801f002:	1bed      	subs	r5, r5, r7
 801f004:	b2ad      	uxth	r5, r5
 801f006:	2d00      	cmp	r5, #0
 801f008:	bf08      	it	eq
 801f00a:	461a      	moveq	r2, r3
 801f00c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f00e:	bf18      	it	ne
 801f010:	2200      	movne	r2, #0
 801f012:	3301      	adds	r3, #1
 801f014:	b292      	uxth	r2, r2
 801f016:	930d      	str	r3, [sp, #52]	; 0x34
 801f018:	e70d      	b.n	801ee36 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801f01a:	1bd1      	subs	r1, r2, r7
 801f01c:	9708      	str	r7, [sp, #32]
 801f01e:	b28b      	uxth	r3, r1
 801f020:	9301      	str	r3, [sp, #4]
 801f022:	462b      	mov	r3, r5
 801f024:	e7ca      	b.n	801efbc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801f026:	bf00      	nop
 801f028:	20015038 	.word	0x20015038
 801f02c:	20015032 	.word	0x20015032
 801f030:	fffff7fb 	.word	0xfffff7fb
 801f034:	b2b6      	uxth	r6, r6
 801f036:	900b      	str	r0, [sp, #44]	; 0x2c
 801f038:	45b4      	cmp	ip, r6
 801f03a:	d0cb      	beq.n	801efd4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801f03c:	f10c 0101 	add.w	r1, ip, #1
 801f040:	44a4      	add	ip, r4
 801f042:	9117      	str	r1, [sp, #92]	; 0x5c
 801f044:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801f048:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f04a:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801f04e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f050:	ea4f 2825 	mov.w	r8, r5, asr #8
 801f054:	f8b1 c000 	ldrh.w	ip, [r1]
 801f058:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f05a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801f05e:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801f062:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801f066:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f06a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f06e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f072:	fb1e fe01 	smulbb	lr, lr, r1
 801f076:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f078:	fa5f fc8c 	uxtb.w	ip, ip
 801f07c:	fb08 e801 	mla	r8, r8, r1, lr
 801f080:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801f084:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f086:	00ed      	lsls	r5, r5, #3
 801f088:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f08c:	fa1f f888 	uxth.w	r8, r8
 801f090:	fb19 f901 	smulbb	r9, r9, r1
 801f094:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f096:	b2ed      	uxtb	r5, r5
 801f098:	fb0e 9e01 	mla	lr, lr, r1, r9
 801f09c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f09e:	fb1c fc01 	smulbb	ip, ip, r1
 801f0a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f0a4:	fa1f fe8e 	uxth.w	lr, lr
 801f0a8:	fb05 c501 	mla	r5, r5, r1, ip
 801f0ac:	f108 0c01 	add.w	ip, r8, #1
 801f0b0:	f10e 0901 	add.w	r9, lr, #1
 801f0b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f0b6:	b2ad      	uxth	r5, r5
 801f0b8:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801f0bc:	f105 0c01 	add.w	ip, r5, #1
 801f0c0:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801f0c4:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801f0c8:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801f0cc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f0d0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f0d4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f0d8:	ea4c 0808 	orr.w	r8, ip, r8
 801f0dc:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 801f0e0:	ea48 0809 	orr.w	r8, r8, r9
 801f0e4:	f821 8b02 	strh.w	r8, [r1], #2
 801f0e8:	910b      	str	r1, [sp, #44]	; 0x2c
 801f0ea:	e7a5      	b.n	801f038 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801f0ec:	f10c 0801 	add.w	r8, ip, #1
 801f0f0:	44a4      	add	ip, r4
 801f0f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f0f4:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801f0f8:	fa1f fc88 	uxth.w	ip, r8
 801f0fc:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801f100:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801f104:	e763      	b.n	801efce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801f106:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f10a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801f10e:	1aad      	subs	r5, r5, r2
 801f110:	b2ad      	uxth	r5, r5
 801f112:	2d00      	cmp	r5, #0
 801f114:	bf18      	it	ne
 801f116:	2200      	movne	r2, #0
 801f118:	9201      	str	r2, [sp, #4]
 801f11a:	e744      	b.n	801efa6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801f11c:	4b03      	ldr	r3, [pc, #12]	; (801f12c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801f11e:	6818      	ldr	r0, [r3, #0]
 801f120:	6803      	ldr	r3, [r0, #0]
 801f122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f124:	4798      	blx	r3
 801f126:	b01f      	add	sp, #124	; 0x7c
 801f128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f12c:	20015038 	.word	0x20015038

0801f130 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f134:	b08f      	sub	sp, #60	; 0x3c
 801f136:	461c      	mov	r4, r3
 801f138:	460f      	mov	r7, r1
 801f13a:	9203      	str	r2, [sp, #12]
 801f13c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f140:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f142:	9202      	str	r2, [sp, #8]
 801f144:	2a00      	cmp	r2, #0
 801f146:	f000 8128 	beq.w	801f39a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801f14a:	6820      	ldr	r0, [r4, #0]
 801f14c:	aa0a      	add	r2, sp, #40	; 0x28
 801f14e:	6861      	ldr	r1, [r4, #4]
 801f150:	c203      	stmia	r2!, {r0, r1}
 801f152:	6818      	ldr	r0, [r3, #0]
 801f154:	aa0c      	add	r2, sp, #48	; 0x30
 801f156:	6859      	ldr	r1, [r3, #4]
 801f158:	c203      	stmia	r2!, {r0, r1}
 801f15a:	a80a      	add	r0, sp, #40	; 0x28
 801f15c:	f7f9 ff62 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f160:	4621      	mov	r1, r4
 801f162:	a80c      	add	r0, sp, #48	; 0x30
 801f164:	f7f9 ff86 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f168:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801f16c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801f170:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f174:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801f178:	bfdb      	ittet	le
 801f17a:	b2b3      	uxthle	r3, r6
 801f17c:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801f180:	2301      	movgt	r3, #1
 801f182:	fb92 f3f3 	sdivle	r3, r2, r3
 801f186:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801f18a:	441d      	add	r5, r3
 801f18c:	fb92 f1f3 	sdiv	r1, r2, r3
 801f190:	fa1f fc81 	uxth.w	ip, r1
 801f194:	3d01      	subs	r5, #1
 801f196:	fb0c 2413 	mls	r4, ip, r3, r2
 801f19a:	4661      	mov	r1, ip
 801f19c:	fb14 f406 	smulbb	r4, r4, r6
 801f1a0:	4404      	add	r4, r0
 801f1a2:	fb95 f5f3 	sdiv	r5, r5, r3
 801f1a6:	b2a4      	uxth	r4, r4
 801f1a8:	b121      	cbz	r1, 801f1b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801f1aa:	9b03      	ldr	r3, [sp, #12]
 801f1ac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f1b0:	ba1b      	rev	r3, r3
 801f1b2:	441f      	add	r7, r3
 801f1b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f1b8:	b2ad      	uxth	r5, r5
 801f1ba:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f1be:	4418      	add	r0, r3
 801f1c0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f1c4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801f1c8:	00ad      	lsls	r5, r5, #2
 801f1ca:	441a      	add	r2, r3
 801f1cc:	4b74      	ldr	r3, [pc, #464]	; (801f3a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f1ce:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801f1d2:	6818      	ldr	r0, [r3, #0]
 801f1d4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801f1d8:	6803      	ldr	r3, [r0, #0]
 801f1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1dc:	4798      	blx	r3
 801f1de:	4a71      	ldr	r2, [pc, #452]	; (801f3a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801f1e0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801f1e4:	2c00      	cmp	r4, #0
 801f1e6:	8813      	ldrh	r3, [r2, #0]
 801f1e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f1ec:	bf0c      	ite	eq
 801f1ee:	46c8      	moveq	r8, r9
 801f1f0:	f04f 0800 	movne.w	r8, #0
 801f1f4:	9209      	str	r2, [sp, #36]	; 0x24
 801f1f6:	fb03 c101 	mla	r1, r3, r1, ip
 801f1fa:	4373      	muls	r3, r6
 801f1fc:	fa1f f888 	uxth.w	r8, r8
 801f200:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f204:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f208:	9304      	str	r3, [sp, #16]
 801f20a:	1d2b      	adds	r3, r5, #4
 801f20c:	9305      	str	r3, [sp, #20]
 801f20e:	2300      	movs	r3, #0
 801f210:	9301      	str	r3, [sp, #4]
 801f212:	9a04      	ldr	r2, [sp, #16]
 801f214:	4282      	cmp	r2, r0
 801f216:	f240 80bb 	bls.w	801f390 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801f21a:	b95b      	cbnz	r3, 801f234 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801f21c:	783a      	ldrb	r2, [r7, #0]
 801f21e:	0993      	lsrs	r3, r2, #6
 801f220:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801f224:	9201      	str	r2, [sp, #4]
 801f226:	1e5a      	subs	r2, r3, #1
 801f228:	2a02      	cmp	r2, #2
 801f22a:	bf8d      	iteet	hi
 801f22c:	787b      	ldrbhi	r3, [r7, #1]
 801f22e:	3701      	addls	r7, #1
 801f230:	b29b      	uxthls	r3, r3
 801f232:	3702      	addhi	r7, #2
 801f234:	b184      	cbz	r4, 801f258 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801f236:	429c      	cmp	r4, r3
 801f238:	bf91      	iteee	ls
 801f23a:	1b1c      	subls	r4, r3, r4
 801f23c:	1ae4      	subhi	r4, r4, r3
 801f23e:	46c4      	movhi	ip, r8
 801f240:	f04f 0a00 	movhi.w	sl, #0
 801f244:	bf9b      	ittet	ls
 801f246:	fa1f fa84 	uxthls.w	sl, r4
 801f24a:	2400      	movls	r4, #0
 801f24c:	b2a4      	uxthhi	r4, r4
 801f24e:	fa1f fc89 	uxthls.w	ip, r9
 801f252:	4653      	mov	r3, sl
 801f254:	46e0      	mov	r8, ip
 801f256:	e7dc      	b.n	801f212 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801f258:	2204      	movs	r2, #4
 801f25a:	9905      	ldr	r1, [sp, #20]
 801f25c:	4543      	cmp	r3, r8
 801f25e:	4615      	mov	r5, r2
 801f260:	9a01      	ldr	r2, [sp, #4]
 801f262:	bf24      	itt	cs
 801f264:	eba3 0a08 	subcs.w	sl, r3, r8
 801f268:	46c6      	movcs	lr, r8
 801f26a:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f26e:	9903      	ldr	r1, [sp, #12]
 801f270:	bf3c      	itt	cc
 801f272:	eba8 0c03 	subcc.w	ip, r8, r3
 801f276:	469e      	movcc	lr, r3
 801f278:	588a      	ldr	r2, [r1, r2]
 801f27a:	bf26      	itte	cs
 801f27c:	fa1f fa8a 	uxthcs.w	sl, sl
 801f280:	46a4      	movcs	ip, r4
 801f282:	fa1f fc8c 	uxthcc.w	ip, ip
 801f286:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801f28a:	bf38      	it	cc
 801f28c:	46a2      	movcc	sl, r4
 801f28e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801f292:	2900      	cmp	r1, #0
 801f294:	d066      	beq.n	801f364 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801f296:	29ff      	cmp	r1, #255	; 0xff
 801f298:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801f29c:	d114      	bne.n	801f2c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801f29e:	9d02      	ldr	r5, [sp, #8]
 801f2a0:	2dff      	cmp	r5, #255	; 0xff
 801f2a2:	d111      	bne.n	801f2c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801f2a4:	0951      	lsrs	r1, r2, #5
 801f2a6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801f2aa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f2ae:	4486      	add	lr, r0
 801f2b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f2b4:	f026 0607 	bic.w	r6, r6, #7
 801f2b8:	430e      	orrs	r6, r1
 801f2ba:	4316      	orrs	r6, r2
 801f2bc:	b2b6      	uxth	r6, r6
 801f2be:	4586      	cmp	lr, r0
 801f2c0:	d051      	beq.n	801f366 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f2c2:	f820 6b02 	strh.w	r6, [r0], #2
 801f2c6:	e7fa      	b.n	801f2be <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801f2c8:	9d02      	ldr	r5, [sp, #8]
 801f2ca:	b2f6      	uxtb	r6, r6
 801f2cc:	4486      	add	lr, r0
 801f2ce:	4369      	muls	r1, r5
 801f2d0:	1c4d      	adds	r5, r1, #1
 801f2d2:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801f2d6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801f2da:	b2d2      	uxtb	r2, r2
 801f2dc:	122d      	asrs	r5, r5, #8
 801f2de:	ea6f 0b05 	mvn.w	fp, r5
 801f2e2:	b2ad      	uxth	r5, r5
 801f2e4:	fb11 f105 	smulbb	r1, r1, r5
 801f2e8:	fa5f fb8b 	uxtb.w	fp, fp
 801f2ec:	fb16 f605 	smulbb	r6, r6, r5
 801f2f0:	fb12 f205 	smulbb	r2, r2, r5
 801f2f4:	b289      	uxth	r1, r1
 801f2f6:	b2b6      	uxth	r6, r6
 801f2f8:	b292      	uxth	r2, r2
 801f2fa:	9106      	str	r1, [sp, #24]
 801f2fc:	9607      	str	r6, [sp, #28]
 801f2fe:	9208      	str	r2, [sp, #32]
 801f300:	4586      	cmp	lr, r0
 801f302:	d030      	beq.n	801f366 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f304:	8802      	ldrh	r2, [r0, #0]
 801f306:	9906      	ldr	r1, [sp, #24]
 801f308:	1216      	asrs	r6, r2, #8
 801f30a:	10d5      	asrs	r5, r2, #3
 801f30c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f310:	00d2      	lsls	r2, r2, #3
 801f312:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f316:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f31a:	b2d2      	uxtb	r2, r2
 801f31c:	fb06 160b 	mla	r6, r6, fp, r1
 801f320:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f324:	9907      	ldr	r1, [sp, #28]
 801f326:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f32a:	b2b6      	uxth	r6, r6
 801f32c:	fb05 150b 	mla	r5, r5, fp, r1
 801f330:	9908      	ldr	r1, [sp, #32]
 801f332:	fb02 120b 	mla	r2, r2, fp, r1
 801f336:	1c71      	adds	r1, r6, #1
 801f338:	b2ad      	uxth	r5, r5
 801f33a:	b292      	uxth	r2, r2
 801f33c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801f340:	1c51      	adds	r1, r2, #1
 801f342:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f346:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f34a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f34e:	4316      	orrs	r6, r2
 801f350:	1c6a      	adds	r2, r5, #1
 801f352:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801f356:	096d      	lsrs	r5, r5, #5
 801f358:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f35c:	432e      	orrs	r6, r5
 801f35e:	f820 6b02 	strh.w	r6, [r0], #2
 801f362:	e7cd      	b.n	801f300 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801f364:	4470      	add	r0, lr
 801f366:	4543      	cmp	r3, r8
 801f368:	f4ff af73 	bcc.w	801f252 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801f36c:	fa1f fc89 	uxth.w	ip, r9
 801f370:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801f374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f376:	eba4 040c 	sub.w	r4, r4, ip
 801f37a:	881b      	ldrh	r3, [r3, #0]
 801f37c:	b2a4      	uxth	r4, r4
 801f37e:	eba3 0309 	sub.w	r3, r3, r9
 801f382:	2c00      	cmp	r4, #0
 801f384:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f388:	bf18      	it	ne
 801f38a:	f04f 0c00 	movne.w	ip, #0
 801f38e:	e760      	b.n	801f252 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801f390:	4b03      	ldr	r3, [pc, #12]	; (801f3a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f392:	6818      	ldr	r0, [r3, #0]
 801f394:	6803      	ldr	r3, [r0, #0]
 801f396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f398:	4798      	blx	r3
 801f39a:	b00f      	add	sp, #60	; 0x3c
 801f39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3a0:	20015038 	.word	0x20015038
 801f3a4:	20015032 	.word	0x20015032

0801f3a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3ac:	b093      	sub	sp, #76	; 0x4c
 801f3ae:	461c      	mov	r4, r3
 801f3b0:	9205      	str	r2, [sp, #20]
 801f3b2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801f3b6:	9101      	str	r1, [sp, #4]
 801f3b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f3ba:	9202      	str	r2, [sp, #8]
 801f3bc:	2a00      	cmp	r2, #0
 801f3be:	f000 812e 	beq.w	801f61e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801f3c2:	6820      	ldr	r0, [r4, #0]
 801f3c4:	aa0e      	add	r2, sp, #56	; 0x38
 801f3c6:	6861      	ldr	r1, [r4, #4]
 801f3c8:	c203      	stmia	r2!, {r0, r1}
 801f3ca:	6818      	ldr	r0, [r3, #0]
 801f3cc:	aa10      	add	r2, sp, #64	; 0x40
 801f3ce:	6859      	ldr	r1, [r3, #4]
 801f3d0:	c203      	stmia	r2!, {r0, r1}
 801f3d2:	a80e      	add	r0, sp, #56	; 0x38
 801f3d4:	f7f9 fe26 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3d8:	4621      	mov	r1, r4
 801f3da:	a810      	add	r0, sp, #64	; 0x40
 801f3dc:	f7f9 fe4a 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f3e0:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801f3e4:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801f3e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f3ec:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801f3f0:	bfdb      	ittet	le
 801f3f2:	b2b3      	uxthle	r3, r6
 801f3f4:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801f3f8:	2301      	movgt	r3, #1
 801f3fa:	fb92 f3f3 	sdivle	r3, r2, r3
 801f3fe:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801f402:	441d      	add	r5, r3
 801f404:	fb92 f1f3 	sdiv	r1, r2, r3
 801f408:	fa1f fc81 	uxth.w	ip, r1
 801f40c:	3d01      	subs	r5, #1
 801f40e:	fb0c 2413 	mls	r4, ip, r3, r2
 801f412:	4661      	mov	r1, ip
 801f414:	fb14 f406 	smulbb	r4, r4, r6
 801f418:	4404      	add	r4, r0
 801f41a:	fb95 f5f3 	sdiv	r5, r5, r3
 801f41e:	b2a4      	uxth	r4, r4
 801f420:	b131      	cbz	r1, 801f430 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801f422:	9b05      	ldr	r3, [sp, #20]
 801f424:	9901      	ldr	r1, [sp, #4]
 801f426:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f42a:	ba1b      	rev	r3, r3
 801f42c:	4419      	add	r1, r3
 801f42e:	9101      	str	r1, [sp, #4]
 801f430:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f434:	b2ad      	uxth	r5, r5
 801f436:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f43a:	4418      	add	r0, r3
 801f43c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801f440:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 801f444:	00ad      	lsls	r5, r5, #2
 801f446:	441a      	add	r2, r3
 801f448:	4b76      	ldr	r3, [pc, #472]	; (801f624 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801f44a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801f44e:	6818      	ldr	r0, [r3, #0]
 801f450:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801f454:	6803      	ldr	r3, [r0, #0]
 801f456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f458:	4798      	blx	r3
 801f45a:	4973      	ldr	r1, [pc, #460]	; (801f628 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801f45c:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 801f460:	2c00      	cmp	r4, #0
 801f462:	880b      	ldrh	r3, [r1, #0]
 801f464:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801f468:	910d      	str	r1, [sp, #52]	; 0x34
 801f46a:	fb03 c202 	mla	r2, r3, r2, ip
 801f46e:	bf08      	it	eq
 801f470:	46dc      	moveq	ip, fp
 801f472:	fb03 f306 	mul.w	r3, r3, r6
 801f476:	bf18      	it	ne
 801f478:	f04f 0c00 	movne.w	ip, #0
 801f47c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f480:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f484:	fa1f fc8c 	uxth.w	ip, ip
 801f488:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f48c:	9106      	str	r1, [sp, #24]
 801f48e:	9308      	str	r3, [sp, #32]
 801f490:	1d2b      	adds	r3, r5, #4
 801f492:	9309      	str	r3, [sp, #36]	; 0x24
 801f494:	9b02      	ldr	r3, [sp, #8]
 801f496:	43da      	mvns	r2, r3
 801f498:	2300      	movs	r3, #0
 801f49a:	b2d2      	uxtb	r2, r2
 801f49c:	9303      	str	r3, [sp, #12]
 801f49e:	9207      	str	r2, [sp, #28]
 801f4a0:	9a08      	ldr	r2, [sp, #32]
 801f4a2:	4282      	cmp	r2, r0
 801f4a4:	f240 80b6 	bls.w	801f614 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801f4a8:	b963      	cbnz	r3, 801f4c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801f4aa:	9b01      	ldr	r3, [sp, #4]
 801f4ac:	781a      	ldrb	r2, [r3, #0]
 801f4ae:	0993      	lsrs	r3, r2, #6
 801f4b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801f4b4:	9203      	str	r2, [sp, #12]
 801f4b6:	1e5a      	subs	r2, r3, #1
 801f4b8:	2a02      	cmp	r2, #2
 801f4ba:	d815      	bhi.n	801f4e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 801f4bc:	9a01      	ldr	r2, [sp, #4]
 801f4be:	b29b      	uxth	r3, r3
 801f4c0:	3201      	adds	r2, #1
 801f4c2:	9201      	str	r2, [sp, #4]
 801f4c4:	b1b4      	cbz	r4, 801f4f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 801f4c6:	429c      	cmp	r4, r3
 801f4c8:	bf91      	iteee	ls
 801f4ca:	1b1c      	subls	r4, r3, r4
 801f4cc:	1ae4      	subhi	r4, r4, r3
 801f4ce:	4666      	movhi	r6, ip
 801f4d0:	f04f 0800 	movhi.w	r8, #0
 801f4d4:	bf9b      	ittet	ls
 801f4d6:	fa1f f884 	uxthls.w	r8, r4
 801f4da:	2400      	movls	r4, #0
 801f4dc:	b2a4      	uxthhi	r4, r4
 801f4de:	fa1f f68b 	uxthls.w	r6, fp
 801f4e2:	4643      	mov	r3, r8
 801f4e4:	46b4      	mov	ip, r6
 801f4e6:	e7db      	b.n	801f4a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 801f4e8:	9a01      	ldr	r2, [sp, #4]
 801f4ea:	9b01      	ldr	r3, [sp, #4]
 801f4ec:	3202      	adds	r2, #2
 801f4ee:	785b      	ldrb	r3, [r3, #1]
 801f4f0:	9201      	str	r2, [sp, #4]
 801f4f2:	e7e7      	b.n	801f4c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801f4f4:	2203      	movs	r2, #3
 801f4f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f4f8:	4563      	cmp	r3, ip
 801f4fa:	4615      	mov	r5, r2
 801f4fc:	9a03      	ldr	r2, [sp, #12]
 801f4fe:	bf2c      	ite	cs
 801f500:	eba3 080c 	subcs.w	r8, r3, ip
 801f504:	ebac 0603 	subcc.w	r6, ip, r3
 801f508:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f50c:	9905      	ldr	r1, [sp, #20]
 801f50e:	bf24      	itt	cs
 801f510:	fa1f f888 	uxthcs.w	r8, r8
 801f514:	46e1      	movcs	r9, ip
 801f516:	eb01 0502 	add.w	r5, r1, r2
 801f51a:	9902      	ldr	r1, [sp, #8]
 801f51c:	bf2f      	iteee	cs
 801f51e:	4626      	movcs	r6, r4
 801f520:	b2b6      	uxthcc	r6, r6
 801f522:	4699      	movcc	r9, r3
 801f524:	46a0      	movcc	r8, r4
 801f526:	29ff      	cmp	r1, #255	; 0xff
 801f528:	d04a      	beq.n	801f5c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801f52a:	9f06      	ldr	r7, [sp, #24]
 801f52c:	46ca      	mov	sl, r9
 801f52e:	78a9      	ldrb	r1, [r5, #2]
 801f530:	9004      	str	r0, [sp, #16]
 801f532:	4379      	muls	r1, r7
 801f534:	910a      	str	r1, [sp, #40]	; 0x28
 801f536:	7869      	ldrb	r1, [r5, #1]
 801f538:	4379      	muls	r1, r7
 801f53a:	910b      	str	r1, [sp, #44]	; 0x2c
 801f53c:	9905      	ldr	r1, [sp, #20]
 801f53e:	5c8a      	ldrb	r2, [r1, r2]
 801f540:	437a      	muls	r2, r7
 801f542:	920c      	str	r2, [sp, #48]	; 0x30
 801f544:	f1ba 0f00 	cmp.w	sl, #0
 801f548:	d03d      	beq.n	801f5c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801f54a:	9a04      	ldr	r2, [sp, #16]
 801f54c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f550:	9f07      	ldr	r7, [sp, #28]
 801f552:	8812      	ldrh	r2, [r2, #0]
 801f554:	fa1f fa8a 	uxth.w	sl, sl
 801f558:	46be      	mov	lr, r7
 801f55a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f55c:	1215      	asrs	r5, r2, #8
 801f55e:	10d1      	asrs	r1, r2, #3
 801f560:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f564:	00d2      	lsls	r2, r2, #3
 801f566:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f56a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f56e:	b2d2      	uxtb	r2, r2
 801f570:	fb05 750e 	mla	r5, r5, lr, r7
 801f574:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801f578:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f57a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f57e:	b2ad      	uxth	r5, r5
 801f580:	fb01 710e 	mla	r1, r1, lr, r7
 801f584:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f586:	fb02 720e 	mla	r2, r2, lr, r7
 801f58a:	f105 0e01 	add.w	lr, r5, #1
 801f58e:	b289      	uxth	r1, r1
 801f590:	b292      	uxth	r2, r2
 801f592:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801f596:	f102 0e01 	add.w	lr, r2, #1
 801f59a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f59e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801f5a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f5a6:	4315      	orrs	r5, r2
 801f5a8:	1c4a      	adds	r2, r1, #1
 801f5aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f5ae:	9a04      	ldr	r2, [sp, #16]
 801f5b0:	0949      	lsrs	r1, r1, #5
 801f5b2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f5b6:	430d      	orrs	r5, r1
 801f5b8:	f822 5b02 	strh.w	r5, [r2], #2
 801f5bc:	9204      	str	r2, [sp, #16]
 801f5be:	e7c1      	b.n	801f544 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801f5c0:	4649      	mov	r1, r9
 801f5c2:	4686      	mov	lr, r0
 801f5c4:	b999      	cbnz	r1, 801f5ee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 801f5c6:	4563      	cmp	r3, ip
 801f5c8:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801f5cc:	d389      	bcc.n	801f4e2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801f5ce:	fa1f f68b 	uxth.w	r6, fp
 801f5d2:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 801f5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5d8:	1ba4      	subs	r4, r4, r6
 801f5da:	881b      	ldrh	r3, [r3, #0]
 801f5dc:	b2a4      	uxth	r4, r4
 801f5de:	eba3 030b 	sub.w	r3, r3, fp
 801f5e2:	2c00      	cmp	r4, #0
 801f5e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f5e8:	bf18      	it	ne
 801f5ea:	2600      	movne	r6, #0
 801f5ec:	e779      	b.n	801f4e2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801f5ee:	78aa      	ldrb	r2, [r5, #2]
 801f5f0:	3901      	subs	r1, #1
 801f5f2:	4f0e      	ldr	r7, [pc, #56]	; (801f62c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801f5f4:	b289      	uxth	r1, r1
 801f5f6:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801f5fa:	786a      	ldrb	r2, [r5, #1]
 801f5fc:	00d2      	lsls	r2, r2, #3
 801f5fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f602:	ea4a 0202 	orr.w	r2, sl, r2
 801f606:	f895 a000 	ldrb.w	sl, [r5]
 801f60a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801f60e:	f82e 2b02 	strh.w	r2, [lr], #2
 801f612:	e7d7      	b.n	801f5c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801f614:	4b03      	ldr	r3, [pc, #12]	; (801f624 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801f616:	6818      	ldr	r0, [r3, #0]
 801f618:	6803      	ldr	r3, [r0, #0]
 801f61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f61c:	4798      	blx	r3
 801f61e:	b013      	add	sp, #76	; 0x4c
 801f620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f624:	20015038 	.word	0x20015038
 801f628:	20015032 	.word	0x20015032
 801f62c:	fffff800 	.word	0xfffff800

0801f630 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f634:	b09d      	sub	sp, #116	; 0x74
 801f636:	461c      	mov	r4, r3
 801f638:	4683      	mov	fp, r0
 801f63a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f63c:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 801f640:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801f644:	920e      	str	r2, [sp, #56]	; 0x38
 801f646:	2a00      	cmp	r2, #0
 801f648:	f000 81e4 	beq.w	801fa14 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 801f64c:	6820      	ldr	r0, [r4, #0]
 801f64e:	aa18      	add	r2, sp, #96	; 0x60
 801f650:	6861      	ldr	r1, [r4, #4]
 801f652:	c203      	stmia	r2!, {r0, r1}
 801f654:	6818      	ldr	r0, [r3, #0]
 801f656:	aa1a      	add	r2, sp, #104	; 0x68
 801f658:	6859      	ldr	r1, [r3, #4]
 801f65a:	c203      	stmia	r2!, {r0, r1}
 801f65c:	a818      	add	r0, sp, #96	; 0x60
 801f65e:	f7f9 fce1 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f662:	4621      	mov	r1, r4
 801f664:	a81a      	add	r0, sp, #104	; 0x68
 801f666:	f7f9 fd05 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f66a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801f66e:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 801f672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f676:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801f67a:	bfdb      	ittet	le
 801f67c:	b29a      	uxthle	r2, r3
 801f67e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801f682:	2201      	movgt	r2, #1
 801f684:	fb91 f2f2 	sdivle	r2, r1, r2
 801f688:	9202      	str	r2, [sp, #8]
 801f68a:	9802      	ldr	r0, [sp, #8]
 801f68c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801f690:	9902      	ldr	r1, [sp, #8]
 801f692:	fb92 f0f0 	sdiv	r0, r2, r0
 801f696:	b280      	uxth	r0, r0
 801f698:	440c      	add	r4, r1
 801f69a:	900f      	str	r0, [sp, #60]	; 0x3c
 801f69c:	3c01      	subs	r4, #1
 801f69e:	9802      	ldr	r0, [sp, #8]
 801f6a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f6a2:	fb05 2510 	mls	r5, r5, r0, r2
 801f6a6:	fb94 f4f1 	sdiv	r4, r4, r1
 801f6aa:	fb15 f503 	smulbb	r5, r5, r3
 801f6ae:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801f6b2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801f6b6:	3401      	adds	r4, #1
 801f6b8:	440d      	add	r5, r1
 801f6ba:	4419      	add	r1, r3
 801f6bc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801f6c0:	b2a4      	uxth	r4, r4
 801f6c2:	441a      	add	r2, r3
 801f6c4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801f6c8:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801f6cc:	00a4      	lsls	r4, r4, #2
 801f6ce:	9306      	str	r3, [sp, #24]
 801f6d0:	b2ad      	uxth	r5, r5
 801f6d2:	4bb3      	ldr	r3, [pc, #716]	; (801f9a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801f6d4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801f6d8:	6818      	ldr	r0, [r3, #0]
 801f6da:	6803      	ldr	r3, [r0, #0]
 801f6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f6de:	4798      	blx	r3
 801f6e0:	4bb0      	ldr	r3, [pc, #704]	; (801f9a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801f6e2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801f6e6:	2d00      	cmp	r5, #0
 801f6e8:	881a      	ldrh	r2, [r3, #0]
 801f6ea:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 801f6ee:	fb02 f606 	mul.w	r6, r2, r6
 801f6f2:	fb02 7101 	mla	r1, r2, r1, r7
 801f6f6:	9316      	str	r3, [sp, #88]	; 0x58
 801f6f8:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801f6fc:	4baa      	ldr	r3, [pc, #680]	; (801f9a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801f6fe:	bf18      	it	ne
 801f700:	2100      	movne	r1, #0
 801f702:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801f706:	eba3 030b 	sub.w	r3, r3, fp
 801f70a:	920a      	str	r2, [sp, #40]	; 0x28
 801f70c:	f104 0204 	add.w	r2, r4, #4
 801f710:	9317      	str	r3, [sp, #92]	; 0x5c
 801f712:	9213      	str	r2, [sp, #76]	; 0x4c
 801f714:	9a06      	ldr	r2, [sp, #24]
 801f716:	bf08      	it	eq
 801f718:	4611      	moveq	r1, r2
 801f71a:	2200      	movs	r2, #0
 801f71c:	b289      	uxth	r1, r1
 801f71e:	920d      	str	r2, [sp, #52]	; 0x34
 801f720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f724:	fa12 f383 	uxtah	r3, r2, r3
 801f728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f72a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f72e:	3304      	adds	r3, #4
 801f730:	9308      	str	r3, [sp, #32]
 801f732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f734:	4543      	cmp	r3, r8
 801f736:	f240 8168 	bls.w	801fa0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 801f73a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801f73e:	f04f 0e01 	mov.w	lr, #1
 801f742:	9a02      	ldr	r2, [sp, #8]
 801f744:	9808      	ldr	r0, [sp, #32]
 801f746:	fbb5 f3f3 	udiv	r3, r5, r3
 801f74a:	1ad3      	subs	r3, r2, r3
 801f74c:	7800      	ldrb	r0, [r0, #0]
 801f74e:	b29b      	uxth	r3, r3
 801f750:	9010      	str	r0, [sp, #64]	; 0x40
 801f752:	3001      	adds	r0, #1
 801f754:	9314      	str	r3, [sp, #80]	; 0x50
 801f756:	9b08      	ldr	r3, [sp, #32]
 801f758:	9007      	str	r0, [sp, #28]
 801f75a:	785a      	ldrb	r2, [r3, #1]
 801f75c:	789b      	ldrb	r3, [r3, #2]
 801f75e:	021b      	lsls	r3, r3, #8
 801f760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f764:	9a08      	ldr	r2, [sp, #32]
 801f766:	78d2      	ldrb	r2, [r2, #3]
 801f768:	4313      	orrs	r3, r2
 801f76a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f76c:	441a      	add	r2, r3
 801f76e:	1c50      	adds	r0, r2, #1
 801f770:	7852      	ldrb	r2, [r2, #1]
 801f772:	9005      	str	r0, [sp, #20]
 801f774:	0212      	lsls	r2, r2, #8
 801f776:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f778:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801f77c:	5cc3      	ldrb	r3, [r0, r3]
 801f77e:	431a      	orrs	r2, r3
 801f780:	b293      	uxth	r3, r2
 801f782:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 801f786:	930b      	str	r3, [sp, #44]	; 0x2c
 801f788:	2300      	movs	r3, #0
 801f78a:	9309      	str	r3, [sp, #36]	; 0x24
 801f78c:	2301      	movs	r3, #1
 801f78e:	9301      	str	r3, [sp, #4]
 801f790:	9304      	str	r3, [sp, #16]
 801f792:	2300      	movs	r3, #0
 801f794:	9303      	str	r3, [sp, #12]
 801f796:	2d00      	cmp	r5, #0
 801f798:	d07d      	beq.n	801f896 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801f79a:	45ae      	cmp	lr, r5
 801f79c:	d26c      	bcs.n	801f878 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 801f79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7a0:	eba5 050e 	sub.w	r5, r5, lr
 801f7a4:	460c      	mov	r4, r1
 801f7a6:	4543      	cmp	r3, r8
 801f7a8:	b2ad      	uxth	r5, r5
 801f7aa:	d802      	bhi.n	801f7b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801f7ac:	e071      	b.n	801f892 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d15d      	bne.n	801f86e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 801f7b2:	9b05      	ldr	r3, [sp, #20]
 801f7b4:	9a04      	ldr	r2, [sp, #16]
 801f7b6:	785b      	ldrb	r3, [r3, #1]
 801f7b8:	f1c2 0207 	rsb	r2, r2, #7
 801f7bc:	9904      	ldr	r1, [sp, #16]
 801f7be:	4093      	lsls	r3, r2
 801f7c0:	005b      	lsls	r3, r3, #1
 801f7c2:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801f7c6:	9b05      	ldr	r3, [sp, #20]
 801f7c8:	781b      	ldrb	r3, [r3, #0]
 801f7ca:	410b      	asrs	r3, r1
 801f7cc:	3101      	adds	r1, #1
 801f7ce:	b2c9      	uxtb	r1, r1
 801f7d0:	b2db      	uxtb	r3, r3
 801f7d2:	2908      	cmp	r1, #8
 801f7d4:	9104      	str	r1, [sp, #16]
 801f7d6:	9905      	ldr	r1, [sp, #20]
 801f7d8:	ea43 0302 	orr.w	r3, r3, r2
 801f7dc:	bf0c      	ite	eq
 801f7de:	3102      	addeq	r1, #2
 801f7e0:	3101      	addne	r1, #1
 801f7e2:	b29a      	uxth	r2, r3
 801f7e4:	bf05      	ittet	eq
 801f7e6:	9105      	streq	r1, [sp, #20]
 801f7e8:	2100      	moveq	r1, #0
 801f7ea:	9105      	strne	r1, [sp, #20]
 801f7ec:	9104      	streq	r1, [sp, #16]
 801f7ee:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f7f0:	4291      	cmp	r1, r2
 801f7f2:	d30a      	bcc.n	801f80a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 801f7f4:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 801f7f8:	2301      	movs	r3, #1
 801f7fa:	9907      	ldr	r1, [sp, #28]
 801f7fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f800:	d30f      	bcc.n	801f822 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f802:	2100      	movs	r1, #0
 801f804:	9301      	str	r3, [sp, #4]
 801f806:	9103      	str	r1, [sp, #12]
 801f808:	e032      	b.n	801f870 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801f80a:	9b07      	ldr	r3, [sp, #28]
 801f80c:	429a      	cmp	r2, r3
 801f80e:	d318      	bcc.n	801f842 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801f810:	9b01      	ldr	r3, [sp, #4]
 801f812:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 801f816:	445b      	add	r3, fp
 801f818:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801f81c:	9b01      	ldr	r3, [sp, #4]
 801f81e:	3301      	adds	r3, #1
 801f820:	b29b      	uxth	r3, r3
 801f822:	9907      	ldr	r1, [sp, #28]
 801f824:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 801f828:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f82c:	7108      	strb	r0, [r1, #4]
 801f82e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f830:	80c8      	strh	r0, [r1, #6]
 801f832:	9801      	ldr	r0, [sp, #4]
 801f834:	3001      	adds	r0, #1
 801f836:	7148      	strb	r0, [r1, #5]
 801f838:	9907      	ldr	r1, [sp, #28]
 801f83a:	3101      	adds	r1, #1
 801f83c:	b289      	uxth	r1, r1
 801f83e:	9107      	str	r1, [sp, #28]
 801f840:	e7df      	b.n	801f802 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f842:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801f846:	4611      	mov	r1, r2
 801f848:	795b      	ldrb	r3, [r3, #5]
 801f84a:	f603 0004 	addw	r0, r3, #2052	; 0x804
 801f84e:	4458      	add	r0, fp
 801f850:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801f852:	4406      	add	r6, r0
 801f854:	2e00      	cmp	r6, #0
 801f856:	dd06      	ble.n	801f866 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f858:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f85c:	790e      	ldrb	r6, [r1, #4]
 801f85e:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801f862:	88c9      	ldrh	r1, [r1, #6]
 801f864:	e7f4      	b.n	801f850 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 801f866:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 801f86a:	b29b      	uxth	r3, r3
 801f86c:	e7c5      	b.n	801f7fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801f86e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f870:	4621      	mov	r1, r4
 801f872:	920b      	str	r2, [sp, #44]	; 0x2c
 801f874:	469e      	mov	lr, r3
 801f876:	e78e      	b.n	801f796 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 801f878:	9a03      	ldr	r2, [sp, #12]
 801f87a:	ebae 0305 	sub.w	r3, lr, r5
 801f87e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f882:	442a      	add	r2, r5
 801f884:	b29b      	uxth	r3, r3
 801f886:	b292      	uxth	r2, r2
 801f888:	9203      	str	r2, [sp, #12]
 801f88a:	2500      	movs	r5, #0
 801f88c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f88e:	4542      	cmp	r2, r8
 801f890:	d88d      	bhi.n	801f7ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f892:	4621      	mov	r1, r4
 801f894:	e74d      	b.n	801f732 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 801f896:	458e      	cmp	lr, r1
 801f898:	f04f 0900 	mov.w	r9, #0
 801f89c:	bf2b      	itete	cs
 801f89e:	ebae 0301 	subcs.w	r3, lr, r1
 801f8a2:	eba1 040e 	subcc.w	r4, r1, lr
 801f8a6:	462c      	movcs	r4, r5
 801f8a8:	462b      	movcc	r3, r5
 801f8aa:	bf27      	ittee	cs
 801f8ac:	b29b      	uxthcs	r3, r3
 801f8ae:	910c      	strcs	r1, [sp, #48]	; 0x30
 801f8b0:	b2a4      	uxthcc	r4, r4
 801f8b2:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 801f8b6:	9a03      	ldr	r2, [sp, #12]
 801f8b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f8ba:	444a      	add	r2, r9
 801f8bc:	4548      	cmp	r0, r9
 801f8be:	b292      	uxth	r2, r2
 801f8c0:	d074      	beq.n	801f9ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 801f8c2:	2004      	movs	r0, #4
 801f8c4:	445a      	add	r2, fp
 801f8c6:	4605      	mov	r5, r0
 801f8c8:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801f8cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f8ce:	fb15 0202 	smlabb	r2, r5, r2, r0
 801f8d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f8d4:	5880      	ldr	r0, [r0, r2]
 801f8d6:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801f8da:	d014      	beq.n	801f906 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f8dc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f8e0:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801f8e4:	d112      	bne.n	801f90c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f8e8:	2aff      	cmp	r2, #255	; 0xff
 801f8ea:	d10f      	bne.n	801f90c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f8ec:	0942      	lsrs	r2, r0, #5
 801f8ee:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801f8f2:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f8f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f8fa:	f025 0507 	bic.w	r5, r5, #7
 801f8fe:	4315      	orrs	r5, r2
 801f900:	4305      	orrs	r5, r0
 801f902:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801f906:	f109 0901 	add.w	r9, r9, #1
 801f90a:	e7d4      	b.n	801f8b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 801f90c:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801f910:	b2ed      	uxtb	r5, r5
 801f912:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f916:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f91a:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 801f91e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f922:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801f926:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f92a:	9215      	str	r2, [sp, #84]	; 0x54
 801f92c:	fa5f fc8c 	uxtb.w	ip, ip
 801f930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f932:	b2c0      	uxtb	r0, r0
 801f934:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801f938:	fb02 fa0a 	mul.w	sl, r2, sl
 801f93c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f940:	f10a 0201 	add.w	r2, sl, #1
 801f944:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801f948:	1212      	asrs	r2, r2, #8
 801f94a:	fa1f fa82 	uxth.w	sl, r2
 801f94e:	43d2      	mvns	r2, r2
 801f950:	fb16 f60a 	smulbb	r6, r6, sl
 801f954:	b2d2      	uxtb	r2, r2
 801f956:	fb10 f00a 	smulbb	r0, r0, sl
 801f95a:	fb07 6702 	mla	r7, r7, r2, r6
 801f95e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f960:	fb0c 0002 	mla	r0, ip, r2, r0
 801f964:	fb15 f50a 	smulbb	r5, r5, sl
 801f968:	b2bf      	uxth	r7, r7
 801f96a:	b280      	uxth	r0, r0
 801f96c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f970:	fb06 5602 	mla	r6, r6, r2, r5
 801f974:	1c7a      	adds	r2, r7, #1
 801f976:	1c45      	adds	r5, r0, #1
 801f978:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f97c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f980:	b2b6      	uxth	r6, r6
 801f982:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f986:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f98a:	432f      	orrs	r7, r5
 801f98c:	1c75      	adds	r5, r6, #1
 801f98e:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f992:	096d      	lsrs	r5, r5, #5
 801f994:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f998:	432f      	orrs	r7, r5
 801f99a:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801f99e:	e7b2      	b.n	801f906 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f9a0:	20015038 	.word	0x20015038
 801f9a4:	20015032 	.word	0x20015032
 801f9a8:	fffff7fb 	.word	0xfffff7fb
 801f9ac:	9203      	str	r2, [sp, #12]
 801f9ae:	458e      	cmp	lr, r1
 801f9b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f9b2:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f9b6:	f4ff af68 	bcc.w	801f88a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801f9ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f9bc:	9906      	ldr	r1, [sp, #24]
 801f9be:	8812      	ldrh	r2, [r2, #0]
 801f9c0:	1a52      	subs	r2, r2, r1
 801f9c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f9c4:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f9c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9ca:	3201      	adds	r2, #1
 801f9cc:	428a      	cmp	r2, r1
 801f9ce:	9209      	str	r2, [sp, #36]	; 0x24
 801f9d0:	d111      	bne.n	801f9f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801f9d2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801f9d6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801f9da:	9b06      	ldr	r3, [sp, #24]
 801f9dc:	eba5 0509 	sub.w	r5, r5, r9
 801f9e0:	b2ad      	uxth	r5, r5
 801f9e2:	2d00      	cmp	r5, #0
 801f9e4:	bf08      	it	eq
 801f9e6:	4619      	moveq	r1, r3
 801f9e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9ea:	bf18      	it	ne
 801f9ec:	2100      	movne	r1, #0
 801f9ee:	3301      	adds	r3, #1
 801f9f0:	b289      	uxth	r1, r1
 801f9f2:	930d      	str	r3, [sp, #52]	; 0x34
 801f9f4:	e694      	b.n	801f720 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 801f9f6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f9fa:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801f9fe:	1b2d      	subs	r5, r5, r4
 801fa00:	b2ad      	uxth	r5, r5
 801fa02:	2d00      	cmp	r5, #0
 801fa04:	bf18      	it	ne
 801fa06:	2400      	movne	r4, #0
 801fa08:	e740      	b.n	801f88c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 801fa0a:	4b04      	ldr	r3, [pc, #16]	; (801fa1c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 801fa0c:	6818      	ldr	r0, [r3, #0]
 801fa0e:	6803      	ldr	r3, [r0, #0]
 801fa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa12:	4798      	blx	r3
 801fa14:	b01d      	add	sp, #116	; 0x74
 801fa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa1a:	bf00      	nop
 801fa1c:	20015038 	.word	0x20015038

0801fa20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa24:	b09f      	sub	sp, #124	; 0x7c
 801fa26:	461d      	mov	r5, r3
 801fa28:	4604      	mov	r4, r0
 801fa2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fa2c:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801fa30:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801fa34:	920a      	str	r2, [sp, #40]	; 0x28
 801fa36:	2a00      	cmp	r2, #0
 801fa38:	f000 81fe 	beq.w	801fe38 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 801fa3c:	6828      	ldr	r0, [r5, #0]
 801fa3e:	aa1a      	add	r2, sp, #104	; 0x68
 801fa40:	6869      	ldr	r1, [r5, #4]
 801fa42:	c203      	stmia	r2!, {r0, r1}
 801fa44:	6818      	ldr	r0, [r3, #0]
 801fa46:	aa1c      	add	r2, sp, #112	; 0x70
 801fa48:	6859      	ldr	r1, [r3, #4]
 801fa4a:	c203      	stmia	r2!, {r0, r1}
 801fa4c:	a81a      	add	r0, sp, #104	; 0x68
 801fa4e:	f7f9 fae9 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fa52:	4629      	mov	r1, r5
 801fa54:	a81c      	add	r0, sp, #112	; 0x70
 801fa56:	f7f9 fb0d 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fa5a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801fa5e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801fa62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fa66:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 801fa6a:	bfdb      	ittet	le
 801fa6c:	b29a      	uxthle	r2, r3
 801fa6e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801fa72:	2201      	movgt	r2, #1
 801fa74:	fb91 f2f2 	sdivle	r2, r1, r2
 801fa78:	9201      	str	r2, [sp, #4]
 801fa7a:	9801      	ldr	r0, [sp, #4]
 801fa7c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801fa80:	9901      	ldr	r1, [sp, #4]
 801fa82:	fb92 f0f0 	sdiv	r0, r2, r0
 801fa86:	b280      	uxth	r0, r0
 801fa88:	440e      	add	r6, r1
 801fa8a:	9010      	str	r0, [sp, #64]	; 0x40
 801fa8c:	3e01      	subs	r6, #1
 801fa8e:	9801      	ldr	r0, [sp, #4]
 801fa90:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fa92:	fb05 2510 	mls	r5, r5, r0, r2
 801fa96:	fb96 f6f1 	sdiv	r6, r6, r1
 801fa9a:	fb15 f503 	smulbb	r5, r5, r3
 801fa9e:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801faa2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801faa6:	3601      	adds	r6, #1
 801faa8:	440d      	add	r5, r1
 801faaa:	4419      	add	r1, r3
 801faac:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801fab0:	b2b6      	uxth	r6, r6
 801fab2:	441a      	add	r2, r3
 801fab4:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801fab8:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801fabc:	b2ad      	uxth	r5, r5
 801fabe:	9304      	str	r3, [sp, #16]
 801fac0:	4b96      	ldr	r3, [pc, #600]	; (801fd1c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801fac2:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801fac6:	6818      	ldr	r0, [r3, #0]
 801fac8:	6803      	ldr	r3, [r0, #0]
 801faca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801facc:	4798      	blx	r3
 801face:	4b94      	ldr	r3, [pc, #592]	; (801fd20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801fad0:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801fad4:	2d00      	cmp	r5, #0
 801fad6:	881a      	ldrh	r2, [r3, #0]
 801fad8:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 801fadc:	fb02 f707 	mul.w	r7, r2, r7
 801fae0:	fb02 c101 	mla	r1, r2, r1, ip
 801fae4:	9318      	str	r3, [sp, #96]	; 0x60
 801fae6:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801faea:	4b8e      	ldr	r3, [pc, #568]	; (801fd24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801faec:	bf18      	it	ne
 801faee:	2100      	movne	r1, #0
 801faf0:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801faf4:	eba3 0304 	sub.w	r3, r3, r4
 801faf8:	920b      	str	r2, [sp, #44]	; 0x2c
 801fafa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fafc:	9319      	str	r3, [sp, #100]	; 0x64
 801fafe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fb02:	f106 0204 	add.w	r2, r6, #4
 801fb06:	9206      	str	r2, [sp, #24]
 801fb08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb0a:	ea6f 0202 	mvn.w	r2, r2
 801fb0e:	b2d2      	uxtb	r2, r2
 801fb10:	9215      	str	r2, [sp, #84]	; 0x54
 801fb12:	9a04      	ldr	r2, [sp, #16]
 801fb14:	bf08      	it	eq
 801fb16:	4611      	moveq	r1, r2
 801fb18:	2200      	movs	r2, #0
 801fb1a:	b289      	uxth	r1, r1
 801fb1c:	920d      	str	r2, [sp, #52]	; 0x34
 801fb1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb22:	fa12 f383 	uxtah	r3, r2, r3
 801fb26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fb2c:	3304      	adds	r3, #4
 801fb2e:	9307      	str	r3, [sp, #28]
 801fb30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb32:	455b      	cmp	r3, fp
 801fb34:	f240 817b 	bls.w	801fe2e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 801fb38:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801fb3c:	f04f 0801 	mov.w	r8, #1
 801fb40:	9a01      	ldr	r2, [sp, #4]
 801fb42:	9807      	ldr	r0, [sp, #28]
 801fb44:	46c4      	mov	ip, r8
 801fb46:	f8cd 8008 	str.w	r8, [sp, #8]
 801fb4a:	7800      	ldrb	r0, [r0, #0]
 801fb4c:	fbb5 f3f3 	udiv	r3, r5, r3
 801fb50:	1ad3      	subs	r3, r2, r3
 801fb52:	9011      	str	r0, [sp, #68]	; 0x44
 801fb54:	3001      	adds	r0, #1
 801fb56:	b29b      	uxth	r3, r3
 801fb58:	9005      	str	r0, [sp, #20]
 801fb5a:	9316      	str	r3, [sp, #88]	; 0x58
 801fb5c:	9b07      	ldr	r3, [sp, #28]
 801fb5e:	785a      	ldrb	r2, [r3, #1]
 801fb60:	789b      	ldrb	r3, [r3, #2]
 801fb62:	021b      	lsls	r3, r3, #8
 801fb64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fb68:	9a07      	ldr	r2, [sp, #28]
 801fb6a:	78d2      	ldrb	r2, [r2, #3]
 801fb6c:	4313      	orrs	r3, r2
 801fb6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb70:	441a      	add	r2, r3
 801fb72:	1c50      	adds	r0, r2, #1
 801fb74:	7852      	ldrb	r2, [r2, #1]
 801fb76:	9003      	str	r0, [sp, #12]
 801fb78:	0212      	lsls	r2, r2, #8
 801fb7a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fb7c:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801fb80:	5cc3      	ldrb	r3, [r0, r3]
 801fb82:	431a      	orrs	r2, r3
 801fb84:	b293      	uxth	r3, r2
 801fb86:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801fb8a:	930c      	str	r3, [sp, #48]	; 0x30
 801fb8c:	2300      	movs	r3, #0
 801fb8e:	9308      	str	r3, [sp, #32]
 801fb90:	461a      	mov	r2, r3
 801fb92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801fb96:	930e      	str	r3, [sp, #56]	; 0x38
 801fb98:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801fb9c:	930f      	str	r3, [sp, #60]	; 0x3c
 801fb9e:	2d00      	cmp	r5, #0
 801fba0:	d07d      	beq.n	801fc9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801fba2:	45ac      	cmp	ip, r5
 801fba4:	d26d      	bcs.n	801fc82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801fba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fba8:	eba5 050c 	sub.w	r5, r5, ip
 801fbac:	4608      	mov	r0, r1
 801fbae:	455b      	cmp	r3, fp
 801fbb0:	b2ad      	uxth	r5, r5
 801fbb2:	d802      	bhi.n	801fbba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801fbb4:	e071      	b.n	801fc9a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d15d      	bne.n	801fc76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801fbba:	9b03      	ldr	r3, [sp, #12]
 801fbbc:	9a02      	ldr	r2, [sp, #8]
 801fbbe:	785b      	ldrb	r3, [r3, #1]
 801fbc0:	f1c2 0207 	rsb	r2, r2, #7
 801fbc4:	9902      	ldr	r1, [sp, #8]
 801fbc6:	4093      	lsls	r3, r2
 801fbc8:	005b      	lsls	r3, r3, #1
 801fbca:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801fbce:	9b03      	ldr	r3, [sp, #12]
 801fbd0:	781b      	ldrb	r3, [r3, #0]
 801fbd2:	410b      	asrs	r3, r1
 801fbd4:	3101      	adds	r1, #1
 801fbd6:	b2c9      	uxtb	r1, r1
 801fbd8:	b2db      	uxtb	r3, r3
 801fbda:	2908      	cmp	r1, #8
 801fbdc:	9102      	str	r1, [sp, #8]
 801fbde:	9903      	ldr	r1, [sp, #12]
 801fbe0:	ea43 0302 	orr.w	r3, r3, r2
 801fbe4:	bf0c      	ite	eq
 801fbe6:	3102      	addeq	r1, #2
 801fbe8:	3101      	addne	r1, #1
 801fbea:	b29a      	uxth	r2, r3
 801fbec:	bf05      	ittet	eq
 801fbee:	9103      	streq	r1, [sp, #12]
 801fbf0:	2100      	moveq	r1, #0
 801fbf2:	9103      	strne	r1, [sp, #12]
 801fbf4:	9102      	streq	r1, [sp, #8]
 801fbf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fbf8:	4291      	cmp	r1, r2
 801fbfa:	d30a      	bcc.n	801fc12 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801fbfc:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801fc00:	2301      	movs	r3, #1
 801fc02:	9905      	ldr	r1, [sp, #20]
 801fc04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801fc08:	d30f      	bcc.n	801fc2a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801fc0a:	2100      	movs	r1, #0
 801fc0c:	4698      	mov	r8, r3
 801fc0e:	9100      	str	r1, [sp, #0]
 801fc10:	e032      	b.n	801fc78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 801fc12:	9b05      	ldr	r3, [sp, #20]
 801fc14:	429a      	cmp	r2, r3
 801fc16:	d318      	bcc.n	801fc4a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801fc18:	eb04 0308 	add.w	r3, r4, r8
 801fc1c:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801fc20:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801fc24:	f108 0301 	add.w	r3, r8, #1
 801fc28:	b29b      	uxth	r3, r3
 801fc2a:	9905      	ldr	r1, [sp, #20]
 801fc2c:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801fc30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801fc34:	710e      	strb	r6, [r1, #4]
 801fc36:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fc38:	80ce      	strh	r6, [r1, #6]
 801fc3a:	f108 0601 	add.w	r6, r8, #1
 801fc3e:	714e      	strb	r6, [r1, #5]
 801fc40:	9905      	ldr	r1, [sp, #20]
 801fc42:	3101      	adds	r1, #1
 801fc44:	b289      	uxth	r1, r1
 801fc46:	9105      	str	r1, [sp, #20]
 801fc48:	e7df      	b.n	801fc0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801fc4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fc4e:	4611      	mov	r1, r2
 801fc50:	795b      	ldrb	r3, [r3, #5]
 801fc52:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801fc56:	4426      	add	r6, r4
 801fc58:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801fc5a:	4437      	add	r7, r6
 801fc5c:	2f00      	cmp	r7, #0
 801fc5e:	dd06      	ble.n	801fc6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 801fc60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801fc64:	790f      	ldrb	r7, [r1, #4]
 801fc66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fc6a:	88c9      	ldrh	r1, [r1, #6]
 801fc6c:	e7f4      	b.n	801fc58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801fc6e:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801fc72:	b29b      	uxth	r3, r3
 801fc74:	e7c5      	b.n	801fc02 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801fc76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fc78:	920c      	str	r2, [sp, #48]	; 0x30
 801fc7a:	4601      	mov	r1, r0
 801fc7c:	9a00      	ldr	r2, [sp, #0]
 801fc7e:	469c      	mov	ip, r3
 801fc80:	e78d      	b.n	801fb9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801fc82:	ebac 0305 	sub.w	r3, ip, r5
 801fc86:	1957      	adds	r7, r2, r5
 801fc88:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801fc8c:	b2ba      	uxth	r2, r7
 801fc8e:	b29b      	uxth	r3, r3
 801fc90:	9200      	str	r2, [sp, #0]
 801fc92:	2500      	movs	r5, #0
 801fc94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fc96:	455a      	cmp	r2, fp
 801fc98:	d88d      	bhi.n	801fbb6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801fc9a:	4601      	mov	r1, r0
 801fc9c:	e748      	b.n	801fb30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 801fc9e:	458c      	cmp	ip, r1
 801fca0:	bf27      	ittee	cs
 801fca2:	ebac 0301 	subcs.w	r3, ip, r1
 801fca6:	4628      	movcs	r0, r5
 801fca8:	eba1 000c 	subcc.w	r0, r1, ip
 801fcac:	462b      	movcc	r3, r5
 801fcae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fcb0:	bf27      	ittee	cs
 801fcb2:	b29b      	uxthcs	r3, r3
 801fcb4:	9109      	strcs	r1, [sp, #36]	; 0x24
 801fcb6:	b280      	uxthcc	r0, r0
 801fcb8:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 801fcbc:	2dff      	cmp	r5, #255	; 0xff
 801fcbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fcc0:	eb02 0705 	add.w	r7, r2, r5
 801fcc4:	b2bd      	uxth	r5, r7
 801fcc6:	9500      	str	r5, [sp, #0]
 801fcc8:	d12e      	bne.n	801fd28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 801fcca:	465e      	mov	r6, fp
 801fccc:	9d00      	ldr	r5, [sp, #0]
 801fcce:	42aa      	cmp	r2, r5
 801fcd0:	f040 8083 	bne.w	801fdda <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801fcd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fcd6:	458c      	cmp	ip, r1
 801fcd8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801fcdc:	d3d9      	bcc.n	801fc92 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801fcde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fce0:	9904      	ldr	r1, [sp, #16]
 801fce2:	8812      	ldrh	r2, [r2, #0]
 801fce4:	1a52      	subs	r2, r2, r1
 801fce6:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fce8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801fcec:	9a08      	ldr	r2, [sp, #32]
 801fcee:	3201      	adds	r2, #1
 801fcf0:	428a      	cmp	r2, r1
 801fcf2:	9208      	str	r2, [sp, #32]
 801fcf4:	f040 8091 	bne.w	801fe1a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 801fcf8:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801fcfc:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 801fd00:	9b04      	ldr	r3, [sp, #16]
 801fd02:	eba5 050c 	sub.w	r5, r5, ip
 801fd06:	b2ad      	uxth	r5, r5
 801fd08:	2d00      	cmp	r5, #0
 801fd0a:	bf08      	it	eq
 801fd0c:	4619      	moveq	r1, r3
 801fd0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd10:	bf18      	it	ne
 801fd12:	2100      	movne	r1, #0
 801fd14:	3301      	adds	r3, #1
 801fd16:	b289      	uxth	r1, r1
 801fd18:	930d      	str	r3, [sp, #52]	; 0x34
 801fd1a:	e700      	b.n	801fb1e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 801fd1c:	20015038 	.word	0x20015038
 801fd20:	20015032 	.word	0x20015032
 801fd24:	fffff7fb 	.word	0xfffff7fb
 801fd28:	46d9      	mov	r9, fp
 801fd2a:	9d00      	ldr	r5, [sp, #0]
 801fd2c:	42aa      	cmp	r2, r5
 801fd2e:	d0d1      	beq.n	801fcd4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 801fd30:	1c55      	adds	r5, r2, #1
 801fd32:	4422      	add	r2, r4
 801fd34:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 801fd38:	9a06      	ldr	r2, [sp, #24]
 801fd3a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fd3e:	9517      	str	r5, [sp, #92]	; 0x5c
 801fd40:	4472      	add	r2, lr
 801fd42:	9212      	str	r2, [sp, #72]	; 0x48
 801fd44:	f8b9 2000 	ldrh.w	r2, [r9]
 801fd48:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fd4a:	1216      	asrs	r6, r2, #8
 801fd4c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801fd50:	10d5      	asrs	r5, r2, #3
 801fd52:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fd54:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fd58:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fd5c:	00d2      	lsls	r2, r2, #3
 801fd5e:	fb1a fa07 	smulbb	sl, sl, r7
 801fd62:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fd66:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fd68:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fd6c:	b2d2      	uxtb	r2, r2
 801fd6e:	fb06 a607 	mla	r6, r6, r7, sl
 801fd72:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fd74:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fd78:	f897 a001 	ldrb.w	sl, [r7, #1]
 801fd7c:	b2b6      	uxth	r6, r6
 801fd7e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fd80:	fb1a fa07 	smulbb	sl, sl, r7
 801fd84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fd86:	fb05 a507 	mla	r5, r5, r7, sl
 801fd8a:	9f06      	ldr	r7, [sp, #24]
 801fd8c:	f106 0a01 	add.w	sl, r6, #1
 801fd90:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801fd94:	b2ad      	uxth	r5, r5
 801fd96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fd98:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801fd9c:	f105 0a01 	add.w	sl, r5, #1
 801fda0:	fb1e fe07 	smulbb	lr, lr, r7
 801fda4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fda6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fdaa:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fdae:	fb02 e207 	mla	r2, r2, r7, lr
 801fdb2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdb6:	b292      	uxth	r2, r2
 801fdb8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fdbc:	f102 0e01 	add.w	lr, r2, #1
 801fdc0:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801fdc4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801fdc8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801fdcc:	ea4e 0606 	orr.w	r6, lr, r6
 801fdd0:	ea46 060a 	orr.w	r6, r6, sl
 801fdd4:	f829 6b02 	strh.w	r6, [r9], #2
 801fdd8:	e7a7      	b.n	801fd2a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 801fdda:	f102 0e01 	add.w	lr, r2, #1
 801fdde:	4422      	add	r2, r4
 801fde0:	9f06      	ldr	r7, [sp, #24]
 801fde2:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 801fde6:	9a06      	ldr	r2, [sp, #24]
 801fde8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fdec:	eb02 0a05 	add.w	sl, r2, r5
 801fdf0:	4a13      	ldr	r2, [pc, #76]	; (801fe40 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801fdf2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fdf6:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801fdfa:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801fdfe:	00d2      	lsls	r2, r2, #3
 801fe00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fe04:	ea49 0202 	orr.w	r2, r9, r2
 801fe08:	f817 9005 	ldrb.w	r9, [r7, r5]
 801fe0c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801fe10:	f826 2b02 	strh.w	r2, [r6], #2
 801fe14:	fa1f f28e 	uxth.w	r2, lr
 801fe18:	e758      	b.n	801fccc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 801fe1a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801fe1e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801fe22:	1a2d      	subs	r5, r5, r0
 801fe24:	b2ad      	uxth	r5, r5
 801fe26:	2d00      	cmp	r5, #0
 801fe28:	bf18      	it	ne
 801fe2a:	2000      	movne	r0, #0
 801fe2c:	e732      	b.n	801fc94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801fe2e:	4b05      	ldr	r3, [pc, #20]	; (801fe44 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 801fe30:	6818      	ldr	r0, [r3, #0]
 801fe32:	6803      	ldr	r3, [r0, #0]
 801fe34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe36:	4798      	blx	r3
 801fe38:	b01f      	add	sp, #124	; 0x7c
 801fe3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe3e:	bf00      	nop
 801fe40:	fffff800 	.word	0xfffff800
 801fe44:	20015038 	.word	0x20015038

0801fe48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801fe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe4c:	b091      	sub	sp, #68	; 0x44
 801fe4e:	469b      	mov	fp, r3
 801fe50:	4616      	mov	r6, r2
 801fe52:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fe56:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801fe5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fe5e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801fe62:	4604      	mov	r4, r0
 801fe64:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801fe68:	4640      	mov	r0, r8
 801fe6a:	460d      	mov	r5, r1
 801fe6c:	4659      	mov	r1, fp
 801fe6e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801fe72:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801fe76:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801fe7a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801fe7e:	f7f6 fbbb 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801fe82:	4631      	mov	r1, r6
 801fe84:	4640      	mov	r0, r8
 801fe86:	f7f6 fbb7 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801fe8a:	4b74      	ldr	r3, [pc, #464]	; (802005c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801fe8c:	8818      	ldrh	r0, [r3, #0]
 801fe8e:	4b74      	ldr	r3, [pc, #464]	; (8020060 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801fe90:	b202      	sxth	r2, r0
 801fe92:	8819      	ldrh	r1, [r3, #0]
 801fe94:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801fe98:	b20e      	sxth	r6, r1
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	da07      	bge.n	801feae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801fe9e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801fea2:	4463      	add	r3, ip
 801fea4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801fea8:	2300      	movs	r3, #0
 801feaa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801feae:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801feb2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801feb6:	1ad2      	subs	r2, r2, r3
 801feb8:	4594      	cmp	ip, r2
 801feba:	bfc4      	itt	gt
 801febc:	1ac2      	subgt	r2, r0, r3
 801febe:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801fec2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801fec6:	2a00      	cmp	r2, #0
 801fec8:	da07      	bge.n	801feda <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801feca:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801fece:	4462      	add	r2, ip
 801fed0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801fed4:	2200      	movs	r2, #0
 801fed6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801feda:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801fede:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801fee2:	eba6 060a 	sub.w	r6, r6, sl
 801fee6:	42b2      	cmp	r2, r6
 801fee8:	bfc4      	itt	gt
 801feea:	eba1 020a 	subgt.w	r2, r1, sl
 801feee:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801fef2:	4a5c      	ldr	r2, [pc, #368]	; (8020064 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801fef4:	7812      	ldrb	r2, [r2, #0]
 801fef6:	b9a2      	cbnz	r2, 801ff22 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801fef8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801fefc:	4286      	cmp	r6, r0
 801fefe:	4640      	mov	r0, r8
 801ff00:	9303      	str	r3, [sp, #12]
 801ff02:	bf14      	ite	ne
 801ff04:	2600      	movne	r6, #0
 801ff06:	2601      	moveq	r6, #1
 801ff08:	f7f6 fbb9 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ff0c:	9b03      	ldr	r3, [sp, #12]
 801ff0e:	b160      	cbz	r0, 801ff2a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801ff10:	2300      	movs	r3, #0
 801ff12:	8023      	strh	r3, [r4, #0]
 801ff14:	8063      	strh	r3, [r4, #2]
 801ff16:	80a3      	strh	r3, [r4, #4]
 801ff18:	4620      	mov	r0, r4
 801ff1a:	80e3      	strh	r3, [r4, #6]
 801ff1c:	b011      	add	sp, #68	; 0x44
 801ff1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff22:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ff26:	428e      	cmp	r6, r1
 801ff28:	e7e9      	b.n	801fefe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801ff2a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801ff2e:	a90e      	add	r1, sp, #56	; 0x38
 801ff30:	900e      	str	r0, [sp, #56]	; 0x38
 801ff32:	a80c      	add	r0, sp, #48	; 0x30
 801ff34:	9205      	str	r2, [sp, #20]
 801ff36:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801ff3a:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801ff3e:	9206      	str	r2, [sp, #24]
 801ff40:	f8bb 2000 	ldrh.w	r2, [fp]
 801ff44:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801ff48:	1a9b      	subs	r3, r3, r2
 801ff4a:	b21b      	sxth	r3, r3
 801ff4c:	9303      	str	r3, [sp, #12]
 801ff4e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801ff52:	f8df b118 	ldr.w	fp, [pc, #280]	; 802006c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801ff56:	ebaa 0a03 	sub.w	sl, sl, r3
 801ff5a:	fa0f f38a 	sxth.w	r3, sl
 801ff5e:	9304      	str	r3, [sp, #16]
 801ff60:	9b03      	ldr	r3, [sp, #12]
 801ff62:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801ff66:	9b04      	ldr	r3, [sp, #16]
 801ff68:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ff6c:	9b05      	ldr	r3, [sp, #20]
 801ff6e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ff72:	9b06      	ldr	r3, [sp, #24]
 801ff74:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801ff78:	f7f9 f87c 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff7c:	4640      	mov	r0, r8
 801ff7e:	f7f9 f851 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff82:	a80e      	add	r0, sp, #56	; 0x38
 801ff84:	f7f9 f84e 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff88:	4b37      	ldr	r3, [pc, #220]	; (8020068 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ff8a:	4628      	mov	r0, r5
 801ff8c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801ff90:	881b      	ldrh	r3, [r3, #0]
 801ff92:	9307      	str	r3, [sp, #28]
 801ff94:	682b      	ldr	r3, [r5, #0]
 801ff96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff98:	4798      	blx	r3
 801ff9a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801ff9e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801ffa2:	4681      	mov	r9, r0
 801ffa4:	f8db 0000 	ldr.w	r0, [fp]
 801ffa8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801ffac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801ffae:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801ffb2:	6803      	ldr	r3, [r0, #0]
 801ffb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ffb6:	4798      	blx	r3
 801ffb8:	4607      	mov	r7, r0
 801ffba:	f8db 0000 	ldr.w	r0, [fp]
 801ffbe:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ffc2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ffc6:	6803      	ldr	r3, [r0, #0]
 801ffc8:	9109      	str	r1, [sp, #36]	; 0x24
 801ffca:	9208      	str	r2, [sp, #32]
 801ffcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ffce:	4798      	blx	r3
 801ffd0:	f010 0f01 	tst.w	r0, #1
 801ffd4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ffd8:	d012      	beq.n	8020000 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801ffda:	f8db 0000 	ldr.w	r0, [fp]
 801ffde:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ffe2:	6803      	ldr	r3, [r0, #0]
 801ffe4:	9200      	str	r2, [sp, #0]
 801ffe6:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801ffe8:	462b      	mov	r3, r5
 801ffea:	e898 0006 	ldmia.w	r8, {r1, r2}
 801ffee:	47b0      	blx	r6
 801fff0:	9b03      	ldr	r3, [sp, #12]
 801fff2:	8023      	strh	r3, [r4, #0]
 801fff4:	9b04      	ldr	r3, [sp, #16]
 801fff6:	8063      	strh	r3, [r4, #2]
 801fff8:	9b05      	ldr	r3, [sp, #20]
 801fffa:	80a3      	strh	r3, [r4, #4]
 801fffc:	9b06      	ldr	r3, [sp, #24]
 801fffe:	e78b      	b.n	801ff18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8020000:	fb09 f202 	mul.w	r2, r9, r2
 8020004:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8020008:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802000c:	440f      	add	r7, r1
 802000e:	b166      	cbz	r6, 802002a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020010:	9a07      	ldr	r2, [sp, #28]
 8020012:	4592      	cmp	sl, r2
 8020014:	d109      	bne.n	802002a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020016:	f8db 0000 	ldr.w	r0, [fp]
 802001a:	fb09 f303 	mul.w	r3, r9, r3
 802001e:	4629      	mov	r1, r5
 8020020:	6802      	ldr	r2, [r0, #0]
 8020022:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8020024:	463a      	mov	r2, r7
 8020026:	47b0      	blx	r6
 8020028:	e7e2      	b.n	801fff0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 802002a:	fb0a f303 	mul.w	r3, sl, r3
 802002e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8020032:	f8df b038 	ldr.w	fp, [pc, #56]	; 802006c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020036:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 802003a:	4545      	cmp	r5, r8
 802003c:	d2d8      	bcs.n	801fff0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 802003e:	f8db 0000 	ldr.w	r0, [fp]
 8020042:	4629      	mov	r1, r5
 8020044:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020048:	4435      	add	r5, r6
 802004a:	6802      	ldr	r2, [r0, #0]
 802004c:	005b      	lsls	r3, r3, #1
 802004e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020052:	463a      	mov	r2, r7
 8020054:	47d0      	blx	sl
 8020056:	444f      	add	r7, r9
 8020058:	e7ef      	b.n	802003a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 802005a:	bf00      	nop
 802005c:	2001502c 	.word	0x2001502c
 8020060:	2001502e 	.word	0x2001502e
 8020064:	20015030 	.word	0x20015030
 8020068:	20015032 	.word	0x20015032
 802006c:	20015038 	.word	0x20015038

08020070 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020072:	4606      	mov	r6, r0
 8020074:	b087      	sub	sp, #28
 8020076:	460c      	mov	r4, r1
 8020078:	4617      	mov	r7, r2
 802007a:	461d      	mov	r5, r3
 802007c:	b333      	cbz	r3, 80200cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802007e:	4608      	mov	r0, r1
 8020080:	f7f6 fafd 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8020084:	bb10      	cbnz	r0, 80200cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020086:	6820      	ldr	r0, [r4, #0]
 8020088:	ab04      	add	r3, sp, #16
 802008a:	6861      	ldr	r1, [r4, #4]
 802008c:	4c1b      	ldr	r4, [pc, #108]	; (80200fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 802008e:	c303      	stmia	r3!, {r0, r1}
 8020090:	a804      	add	r0, sp, #16
 8020092:	f7f8 ffc7 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020096:	6820      	ldr	r0, [r4, #0]
 8020098:	6803      	ldr	r3, [r0, #0]
 802009a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802009c:	4798      	blx	r3
 802009e:	2dff      	cmp	r5, #255	; 0xff
 80200a0:	d016      	beq.n	80200d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80200a2:	f010 0f08 	tst.w	r0, #8
 80200a6:	6820      	ldr	r0, [r4, #0]
 80200a8:	d015      	beq.n	80200d6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80200aa:	2400      	movs	r4, #0
 80200ac:	6801      	ldr	r1, [r0, #0]
 80200ae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80200b2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80200b6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80200ba:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80200be:	9401      	str	r4, [sp, #4]
 80200c0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80200c4:	9400      	str	r4, [sp, #0]
 80200c6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80200c8:	4639      	mov	r1, r7
 80200ca:	47a0      	blx	r4
 80200cc:	b007      	add	sp, #28
 80200ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200d0:	f010 0f02 	tst.w	r0, #2
 80200d4:	e7e7      	b.n	80200a6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80200d6:	6803      	ldr	r3, [r0, #0]
 80200d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200da:	4798      	blx	r3
 80200dc:	4b08      	ldr	r3, [pc, #32]	; (8020100 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80200de:	4601      	mov	r1, r0
 80200e0:	4630      	mov	r0, r6
 80200e2:	881a      	ldrh	r2, [r3, #0]
 80200e4:	6833      	ldr	r3, [r6, #0]
 80200e6:	e9cd 7500 	strd	r7, r5, [sp]
 80200ea:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80200ec:	ab04      	add	r3, sp, #16
 80200ee:	47a8      	blx	r5
 80200f0:	6820      	ldr	r0, [r4, #0]
 80200f2:	6803      	ldr	r3, [r0, #0]
 80200f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200f6:	4798      	blx	r3
 80200f8:	e7e8      	b.n	80200cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80200fa:	bf00      	nop
 80200fc:	20015038 	.word	0x20015038
 8020100:	20015032 	.word	0x20015032

08020104 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020108:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 802010c:	4688      	mov	r8, r1
 802010e:	4614      	mov	r4, r2
 8020110:	461d      	mov	r5, r3
 8020112:	9e08      	ldr	r6, [sp, #32]
 8020114:	2f00      	cmp	r7, #0
 8020116:	f000 80ab 	beq.w	8020270 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 802011a:	4618      	mov	r0, r3
 802011c:	f7f6 faaf 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8020120:	2800      	cmp	r0, #0
 8020122:	f040 80a5 	bne.w	8020270 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020126:	f9b5 1000 	ldrsh.w	r1, [r5]
 802012a:	2fff      	cmp	r7, #255	; 0xff
 802012c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020130:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020134:	fb04 1303 	mla	r3, r4, r3, r1
 8020138:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 802013c:	eba4 0200 	sub.w	r2, r4, r0
 8020140:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020144:	fb04 f505 	mul.w	r5, r4, r5
 8020148:	ea4f 2816 	mov.w	r8, r6, lsr #8
 802014c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020150:	d04a      	beq.n	80201e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8020152:	b2bc      	uxth	r4, r7
 8020154:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020158:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 802015c:	fa5f f788 	uxtb.w	r7, r8
 8020160:	b2f3      	uxtb	r3, r6
 8020162:	0040      	lsls	r0, r0, #1
 8020164:	fb0e fe04 	mul.w	lr, lr, r4
 8020168:	4367      	muls	r7, r4
 802016a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802016e:	4363      	muls	r3, r4
 8020170:	fa1f fc8c 	uxth.w	ip, ip
 8020174:	42a9      	cmp	r1, r5
 8020176:	d27b      	bcs.n	8020270 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020178:	eb01 0900 	add.w	r9, r1, r0
 802017c:	4549      	cmp	r1, r9
 802017e:	d231      	bcs.n	80201e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8020180:	880a      	ldrh	r2, [r1, #0]
 8020182:	1214      	asrs	r4, r2, #8
 8020184:	10d6      	asrs	r6, r2, #3
 8020186:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802018a:	00d2      	lsls	r2, r2, #3
 802018c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020190:	b2d2      	uxtb	r2, r2
 8020192:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020196:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802019a:	fb14 f40c 	smulbb	r4, r4, ip
 802019e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80201a2:	fb12 f20c 	smulbb	r2, r2, ip
 80201a6:	fb16 f60c 	smulbb	r6, r6, ip
 80201aa:	4474      	add	r4, lr
 80201ac:	441a      	add	r2, r3
 80201ae:	b2a4      	uxth	r4, r4
 80201b0:	443e      	add	r6, r7
 80201b2:	b292      	uxth	r2, r2
 80201b4:	f104 0a01 	add.w	sl, r4, #1
 80201b8:	b2b6      	uxth	r6, r6
 80201ba:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80201be:	f102 0a01 	add.w	sl, r2, #1
 80201c2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80201c6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80201ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80201ce:	4322      	orrs	r2, r4
 80201d0:	1c74      	adds	r4, r6, #1
 80201d2:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80201d6:	0976      	lsrs	r6, r6, #5
 80201d8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80201dc:	4332      	orrs	r2, r6
 80201de:	f821 2b02 	strh.w	r2, [r1], #2
 80201e2:	e7cb      	b.n	802017c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 80201e4:	4441      	add	r1, r8
 80201e6:	e7c5      	b.n	8020174 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 80201e8:	0973      	lsrs	r3, r6, #5
 80201ea:	4f22      	ldr	r7, [pc, #136]	; (8020274 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 80201ec:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80201f0:	ea08 0707 	and.w	r7, r8, r7
 80201f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80201f8:	433b      	orrs	r3, r7
 80201fa:	07e7      	lsls	r7, r4, #31
 80201fc:	ea43 0306 	orr.w	r3, r3, r6
 8020200:	b29b      	uxth	r3, r3
 8020202:	d50b      	bpl.n	802021c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020204:	0040      	lsls	r0, r0, #1
 8020206:	0052      	lsls	r2, r2, #1
 8020208:	42a9      	cmp	r1, r5
 802020a:	d231      	bcs.n	8020270 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 802020c:	180c      	adds	r4, r1, r0
 802020e:	42a1      	cmp	r1, r4
 8020210:	d202      	bcs.n	8020218 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020212:	f821 3b02 	strh.w	r3, [r1], #2
 8020216:	e7fa      	b.n	802020e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020218:	4411      	add	r1, r2
 802021a:	e7f5      	b.n	8020208 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 802021c:	078e      	lsls	r6, r1, #30
 802021e:	d008      	beq.n	8020232 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020220:	0066      	lsls	r6, r4, #1
 8020222:	460a      	mov	r2, r1
 8020224:	42aa      	cmp	r2, r5
 8020226:	d202      	bcs.n	802022e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020228:	8013      	strh	r3, [r2, #0]
 802022a:	4432      	add	r2, r6
 802022c:	e7fa      	b.n	8020224 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 802022e:	3102      	adds	r1, #2
 8020230:	3801      	subs	r0, #1
 8020232:	07c2      	lsls	r2, r0, #31
 8020234:	d50b      	bpl.n	802024e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8020236:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 802023a:	0066      	lsls	r6, r4, #1
 802023c:	3a01      	subs	r2, #1
 802023e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020242:	42aa      	cmp	r2, r5
 8020244:	d202      	bcs.n	802024c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8020246:	8013      	strh	r3, [r2, #0]
 8020248:	4432      	add	r2, r6
 802024a:	e7fa      	b.n	8020242 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 802024c:	3801      	subs	r0, #1
 802024e:	b178      	cbz	r0, 8020270 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020250:	1040      	asrs	r0, r0, #1
 8020252:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020256:	0080      	lsls	r0, r0, #2
 8020258:	0064      	lsls	r4, r4, #1
 802025a:	42a9      	cmp	r1, r5
 802025c:	d208      	bcs.n	8020270 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 802025e:	180e      	adds	r6, r1, r0
 8020260:	460a      	mov	r2, r1
 8020262:	42b2      	cmp	r2, r6
 8020264:	d202      	bcs.n	802026c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020266:	f842 3b04 	str.w	r3, [r2], #4
 802026a:	e7fa      	b.n	8020262 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 802026c:	4421      	add	r1, r4
 802026e:	e7f4      	b.n	802025a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8020270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020274:	00fff800 	.word	0x00fff800

08020278 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020278:	2200      	movs	r2, #0
 802027a:	4912      	ldr	r1, [pc, #72]	; (80202c4 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 802027c:	6042      	str	r2, [r0, #4]
 802027e:	6001      	str	r1, [r0, #0]
 8020280:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020284:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020288:	e9c0 2206 	strd	r2, r2, [r0, #24]
 802028c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020290:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020294:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020298:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 802029c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80202a0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80202a4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80202a8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80202ac:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80202b0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80202b4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80202b8:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 80202bc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80202c0:	4770      	bx	lr
 80202c2:	bf00      	nop
 80202c4:	0802f0f4 	.word	0x0802f0f4

080202c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80202c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202cc:	b08d      	sub	sp, #52	; 0x34
 80202ce:	460d      	mov	r5, r1
 80202d0:	4604      	mov	r4, r0
 80202d2:	4699      	mov	r9, r3
 80202d4:	6808      	ldr	r0, [r1, #0]
 80202d6:	ab08      	add	r3, sp, #32
 80202d8:	6849      	ldr	r1, [r1, #4]
 80202da:	c303      	stmia	r3!, {r0, r1}
 80202dc:	6810      	ldr	r0, [r2, #0]
 80202de:	ab0a      	add	r3, sp, #40	; 0x28
 80202e0:	6851      	ldr	r1, [r2, #4]
 80202e2:	c303      	stmia	r3!, {r0, r1}
 80202e4:	a808      	add	r0, sp, #32
 80202e6:	f7f8 fe9d 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202ea:	4629      	mov	r1, r5
 80202ec:	a80a      	add	r0, sp, #40	; 0x28
 80202ee:	4d67      	ldr	r5, [pc, #412]	; (802048c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80202f0:	f7f8 fec0 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80202f4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80202f8:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80202fc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020300:	6828      	ldr	r0, [r5, #0]
 8020302:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020306:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 802030a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802030e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020312:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020316:	440a      	add	r2, r1
 8020318:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802031c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020320:	4413      	add	r3, r2
 8020322:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020326:	6803      	ldr	r3, [r0, #0]
 8020328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802032a:	4798      	blx	r3
 802032c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020330:	d119      	bne.n	8020366 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020332:	f010 0f20 	tst.w	r0, #32
 8020336:	6828      	ldr	r0, [r5, #0]
 8020338:	d018      	beq.n	802036c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 802033a:	2500      	movs	r5, #0
 802033c:	6801      	ldr	r1, [r0, #0]
 802033e:	b2b6      	uxth	r6, r6
 8020340:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020344:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020348:	9601      	str	r6, [sp, #4]
 802034a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 802034e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020352:	9502      	str	r5, [sp, #8]
 8020354:	fa1f f588 	uxth.w	r5, r8
 8020358:	9500      	str	r5, [sp, #0]
 802035a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 802035c:	4621      	mov	r1, r4
 802035e:	47a8      	blx	r5
 8020360:	b00d      	add	sp, #52	; 0x34
 8020362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020366:	f010 0f40 	tst.w	r0, #64	; 0x40
 802036a:	e7e4      	b.n	8020336 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802036c:	6803      	ldr	r3, [r0, #0]
 802036e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020370:	4798      	blx	r3
 8020372:	4947      	ldr	r1, [pc, #284]	; (8020490 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020374:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020378:	880b      	ldrh	r3, [r1, #0]
 802037a:	468a      	mov	sl, r1
 802037c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8020380:	fb03 5202 	mla	r2, r3, r2, r5
 8020384:	4373      	muls	r3, r6
 8020386:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802038a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802038e:	9307      	str	r3, [sp, #28]
 8020390:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020394:	9306      	str	r3, [sp, #24]
 8020396:	9b07      	ldr	r3, [sp, #28]
 8020398:	4298      	cmp	r0, r3
 802039a:	d270      	bcs.n	802047e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 802039c:	9b06      	ldr	r3, [sp, #24]
 802039e:	4621      	mov	r1, r4
 80203a0:	eb00 0b03 	add.w	fp, r0, r3
 80203a4:	4558      	cmp	r0, fp
 80203a6:	d25d      	bcs.n	8020464 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 80203a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80203ac:	0e23      	lsrs	r3, r4, #24
 80203ae:	d014      	beq.n	80203da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80203b0:	2bff      	cmp	r3, #255	; 0xff
 80203b2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80203b6:	d112      	bne.n	80203de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80203b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80203bc:	d10f      	bne.n	80203de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80203be:	0963      	lsrs	r3, r4, #5
 80203c0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80203c4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80203c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80203cc:	f02c 0c07 	bic.w	ip, ip, #7
 80203d0:	ea43 0c0c 	orr.w	ip, r3, ip
 80203d4:	ea4c 0404 	orr.w	r4, ip, r4
 80203d8:	8004      	strh	r4, [r0, #0]
 80203da:	3002      	adds	r0, #2
 80203dc:	e7e2      	b.n	80203a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 80203de:	fb09 f303 	mul.w	r3, r9, r3
 80203e2:	8807      	ldrh	r7, [r0, #0]
 80203e4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80203e8:	fa5f fc8c 	uxtb.w	ip, ip
 80203ec:	1c5a      	adds	r2, r3, #1
 80203ee:	123e      	asrs	r6, r7, #8
 80203f0:	10fd      	asrs	r5, r7, #3
 80203f2:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80203f6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80203fa:	00ff      	lsls	r7, r7, #3
 80203fc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020400:	1212      	asrs	r2, r2, #8
 8020402:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020406:	b293      	uxth	r3, r2
 8020408:	43d2      	mvns	r2, r2
 802040a:	b2ff      	uxtb	r7, r7
 802040c:	fb1e fe03 	smulbb	lr, lr, r3
 8020410:	b2d2      	uxtb	r2, r2
 8020412:	fb1c fc03 	smulbb	ip, ip, r3
 8020416:	b2e4      	uxtb	r4, r4
 8020418:	fb06 e602 	mla	r6, r6, r2, lr
 802041c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020420:	fb14 f403 	smulbb	r4, r4, r3
 8020424:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020428:	b2b6      	uxth	r6, r6
 802042a:	fb05 c502 	mla	r5, r5, r2, ip
 802042e:	fb07 4702 	mla	r7, r7, r2, r4
 8020432:	f106 0e01 	add.w	lr, r6, #1
 8020436:	b2ad      	uxth	r5, r5
 8020438:	b2bf      	uxth	r7, r7
 802043a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802043e:	f105 0c01 	add.w	ip, r5, #1
 8020442:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8020446:	1c7e      	adds	r6, r7, #1
 8020448:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802044c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020450:	096d      	lsrs	r5, r5, #5
 8020452:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020456:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802045a:	ea46 060e 	orr.w	r6, r6, lr
 802045e:	432e      	orrs	r6, r5
 8020460:	8006      	strh	r6, [r0, #0]
 8020462:	e7ba      	b.n	80203da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020464:	f8ba 3000 	ldrh.w	r3, [sl]
 8020468:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 802046c:	eba3 0308 	sub.w	r3, r3, r8
 8020470:	eba4 0408 	sub.w	r4, r4, r8
 8020474:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020478:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802047c:	e78b      	b.n	8020396 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 802047e:	4b03      	ldr	r3, [pc, #12]	; (802048c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020480:	6818      	ldr	r0, [r3, #0]
 8020482:	6803      	ldr	r3, [r0, #0]
 8020484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020486:	4798      	blx	r3
 8020488:	e76a      	b.n	8020360 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802048a:	bf00      	nop
 802048c:	20015038 	.word	0x20015038
 8020490:	20015032 	.word	0x20015032

08020494 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8020494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020498:	b085      	sub	sp, #20
 802049a:	6810      	ldr	r0, [r2, #0]
 802049c:	460c      	mov	r4, r1
 802049e:	6851      	ldr	r1, [r2, #4]
 80204a0:	466d      	mov	r5, sp
 80204a2:	4616      	mov	r6, r2
 80204a4:	c503      	stmia	r5!, {r0, r1}
 80204a6:	6818      	ldr	r0, [r3, #0]
 80204a8:	6859      	ldr	r1, [r3, #4]
 80204aa:	c503      	stmia	r5!, {r0, r1}
 80204ac:	4668      	mov	r0, sp
 80204ae:	4d2e      	ldr	r5, [pc, #184]	; (8020568 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 80204b0:	f7f8 fdb8 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204b4:	4631      	mov	r1, r6
 80204b6:	a802      	add	r0, sp, #8
 80204b8:	4e2c      	ldr	r6, [pc, #176]	; (802056c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80204ba:	f7f8 fddb 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80204be:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80204c2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80204c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80204ca:	6828      	ldr	r0, [r5, #0]
 80204cc:	fb11 2103 	smlabb	r1, r1, r3, r2
 80204d0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80204d4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80204d8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80204dc:	f8bd 1000 	ldrh.w	r1, [sp]
 80204e0:	440a      	add	r2, r1
 80204e2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80204e6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80204ea:	4413      	add	r3, r2
 80204ec:	f8ad 300a 	strh.w	r3, [sp, #10]
 80204f0:	6803      	ldr	r3, [r0, #0]
 80204f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80204f4:	4798      	blx	r3
 80204f6:	8833      	ldrh	r3, [r6, #0]
 80204f8:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80204fc:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8020500:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020504:	f8df e068 	ldr.w	lr, [pc, #104]	; 8020570 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8020508:	fb03 1202 	mla	r2, r3, r2, r1
 802050c:	fb08 f303 	mul.w	r3, r8, r3
 8020510:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020514:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020518:	4298      	cmp	r0, r3
 802051a:	d21d      	bcs.n	8020558 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 802051c:	eb00 080c 	add.w	r8, r0, ip
 8020520:	4540      	cmp	r0, r8
 8020522:	d20f      	bcs.n	8020544 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8020524:	f854 1b04 	ldr.w	r1, [r4], #4
 8020528:	ea4f 1951 	mov.w	r9, r1, lsr #5
 802052c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8020530:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020534:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020538:	ea42 0209 	orr.w	r2, r2, r9
 802053c:	430a      	orrs	r2, r1
 802053e:	f820 2b02 	strh.w	r2, [r0], #2
 8020542:	e7ed      	b.n	8020520 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8020544:	8832      	ldrh	r2, [r6, #0]
 8020546:	1bd2      	subs	r2, r2, r7
 8020548:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802054c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8020550:	1bd2      	subs	r2, r2, r7
 8020552:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8020556:	e7df      	b.n	8020518 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8020558:	6828      	ldr	r0, [r5, #0]
 802055a:	6803      	ldr	r3, [r0, #0]
 802055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802055e:	4798      	blx	r3
 8020560:	b005      	add	sp, #20
 8020562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020566:	bf00      	nop
 8020568:	20015038 	.word	0x20015038
 802056c:	20015032 	.word	0x20015032
 8020570:	fffff800 	.word	0xfffff800

08020574 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8020574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020578:	b08e      	sub	sp, #56	; 0x38
 802057a:	460e      	mov	r6, r1
 802057c:	4604      	mov	r4, r0
 802057e:	461d      	mov	r5, r3
 8020580:	6808      	ldr	r0, [r1, #0]
 8020582:	ab0a      	add	r3, sp, #40	; 0x28
 8020584:	6849      	ldr	r1, [r1, #4]
 8020586:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 802075c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802058a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8020760 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 802058e:	c303      	stmia	r3!, {r0, r1}
 8020590:	6810      	ldr	r0, [r2, #0]
 8020592:	ab0c      	add	r3, sp, #48	; 0x30
 8020594:	6851      	ldr	r1, [r2, #4]
 8020596:	c303      	stmia	r3!, {r0, r1}
 8020598:	a80a      	add	r0, sp, #40	; 0x28
 802059a:	f7f8 fd43 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802059e:	4631      	mov	r1, r6
 80205a0:	a80c      	add	r0, sp, #48	; 0x30
 80205a2:	f7f8 fd67 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80205a6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80205aa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80205ae:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80205b2:	f8d8 0000 	ldr.w	r0, [r8]
 80205b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80205ba:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80205be:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80205c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80205c6:	440c      	add	r4, r1
 80205c8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80205cc:	440a      	add	r2, r1
 80205ce:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80205d2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80205d6:	4413      	add	r3, r2
 80205d8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80205dc:	6803      	ldr	r3, [r0, #0]
 80205de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205e0:	4798      	blx	r3
 80205e2:	2dff      	cmp	r5, #255	; 0xff
 80205e4:	d124      	bne.n	8020630 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80205e6:	f010 0f01 	tst.w	r0, #1
 80205ea:	f8d8 0000 	ldr.w	r0, [r8]
 80205ee:	d022      	beq.n	8020636 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80205f0:	2100      	movs	r1, #0
 80205f2:	f04f 0e01 	mov.w	lr, #1
 80205f6:	f8d0 c000 	ldr.w	ip, [r0]
 80205fa:	b2b6      	uxth	r6, r6
 80205fc:	f8cd e018 	str.w	lr, [sp, #24]
 8020600:	b2bf      	uxth	r7, r7
 8020602:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8020606:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802060a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802060e:	f8b9 e000 	ldrh.w	lr, [r9]
 8020612:	9503      	str	r5, [sp, #12]
 8020614:	9601      	str	r6, [sp, #4]
 8020616:	9700      	str	r7, [sp, #0]
 8020618:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802061c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020620:	9102      	str	r1, [sp, #8]
 8020622:	4621      	mov	r1, r4
 8020624:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8020628:	47a8      	blx	r5
 802062a:	b00e      	add	sp, #56	; 0x38
 802062c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020630:	f010 0f04 	tst.w	r0, #4
 8020634:	e7d9      	b.n	80205ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8020636:	6803      	ldr	r3, [r0, #0]
 8020638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802063a:	4798      	blx	r3
 802063c:	f8b9 3000 	ldrh.w	r3, [r9]
 8020640:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020644:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8020648:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802064c:	435e      	muls	r6, r3
 802064e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020652:	2dff      	cmp	r5, #255	; 0xff
 8020654:	fb03 1202 	mla	r2, r3, r2, r1
 8020658:	ebac 0c07 	sub.w	ip, ip, r7
 802065c:	eba3 0707 	sub.w	r7, r3, r7
 8020660:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020664:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020668:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 802066c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8020670:	d049      	beq.n	8020706 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8020672:	43eb      	mvns	r3, r5
 8020674:	fa1f f985 	uxth.w	r9, r5
 8020678:	b2db      	uxtb	r3, r3
 802067a:	42b0      	cmp	r0, r6
 802067c:	d266      	bcs.n	802074c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802067e:	eb00 0a0e 	add.w	sl, r0, lr
 8020682:	4550      	cmp	r0, sl
 8020684:	4621      	mov	r1, r4
 8020686:	f104 0403 	add.w	r4, r4, #3
 802068a:	d25b      	bcs.n	8020744 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 802068c:	8802      	ldrh	r2, [r0, #0]
 802068e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020692:	ea4f 2822 	mov.w	r8, r2, asr #8
 8020696:	fb11 f109 	smulbb	r1, r1, r9
 802069a:	10d5      	asrs	r5, r2, #3
 802069c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80206a0:	00d2      	lsls	r2, r2, #3
 80206a2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80206a6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80206aa:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80206ae:	fb08 1803 	mla	r8, r8, r3, r1
 80206b2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80206b6:	b2d2      	uxtb	r2, r2
 80206b8:	fb11 f109 	smulbb	r1, r1, r9
 80206bc:	fa1f f888 	uxth.w	r8, r8
 80206c0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80206c4:	fb05 1503 	mla	r5, r5, r3, r1
 80206c8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80206cc:	fb11 f109 	smulbb	r1, r1, r9
 80206d0:	b2ad      	uxth	r5, r5
 80206d2:	fb02 1203 	mla	r2, r2, r3, r1
 80206d6:	f108 0101 	add.w	r1, r8, #1
 80206da:	b292      	uxth	r2, r2
 80206dc:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80206e0:	1c51      	adds	r1, r2, #1
 80206e2:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80206e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80206ea:	1c69      	adds	r1, r5, #1
 80206ec:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80206f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80206f4:	096d      	lsrs	r5, r5, #5
 80206f6:	ea42 0208 	orr.w	r2, r2, r8
 80206fa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80206fe:	432a      	orrs	r2, r5
 8020700:	f820 2b02 	strh.w	r2, [r0], #2
 8020704:	e7bd      	b.n	8020682 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8020706:	4a14      	ldr	r2, [pc, #80]	; (8020758 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8020708:	42b0      	cmp	r0, r6
 802070a:	d21f      	bcs.n	802074c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802070c:	eb00 050e 	add.w	r5, r0, lr
 8020710:	42a8      	cmp	r0, r5
 8020712:	4621      	mov	r1, r4
 8020714:	f104 0403 	add.w	r4, r4, #3
 8020718:	d210      	bcs.n	802073c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802071a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802071e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020722:	00db      	lsls	r3, r3, #3
 8020724:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8020728:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802072c:	430b      	orrs	r3, r1
 802072e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020732:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8020736:	f820 3b02 	strh.w	r3, [r0], #2
 802073a:	e7e9      	b.n	8020710 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 802073c:	4438      	add	r0, r7
 802073e:	eb01 040c 	add.w	r4, r1, ip
 8020742:	e7e1      	b.n	8020708 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8020744:	4438      	add	r0, r7
 8020746:	eb01 040c 	add.w	r4, r1, ip
 802074a:	e796      	b.n	802067a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 802074c:	4b03      	ldr	r3, [pc, #12]	; (802075c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802074e:	6818      	ldr	r0, [r3, #0]
 8020750:	6803      	ldr	r3, [r0, #0]
 8020752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020754:	4798      	blx	r3
 8020756:	e768      	b.n	802062a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8020758:	fffff800 	.word	0xfffff800
 802075c:	20015038 	.word	0x20015038
 8020760:	20015032 	.word	0x20015032

08020764 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020764:	b4f0      	push	{r4, r5, r6, r7}
 8020766:	4616      	mov	r6, r2
 8020768:	461c      	mov	r4, r3
 802076a:	460d      	mov	r5, r1
 802076c:	9a04      	ldr	r2, [sp, #16]
 802076e:	2e01      	cmp	r6, #1
 8020770:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020774:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8020778:	d012      	beq.n	80207a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802077a:	d303      	bcc.n	8020784 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802077c:	2e02      	cmp	r6, #2
 802077e:	d00a      	beq.n	8020796 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8020780:	bcf0      	pop	{r4, r5, r6, r7}
 8020782:	4770      	bx	lr
 8020784:	6805      	ldr	r5, [r0, #0]
 8020786:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802078a:	68ed      	ldr	r5, [r5, #12]
 802078c:	4613      	mov	r3, r2
 802078e:	4622      	mov	r2, r4
 8020790:	46ac      	mov	ip, r5
 8020792:	bcf0      	pop	{r4, r5, r6, r7}
 8020794:	4760      	bx	ip
 8020796:	4621      	mov	r1, r4
 8020798:	4628      	mov	r0, r5
 802079a:	bcf0      	pop	{r4, r5, r6, r7}
 802079c:	f7ff bd94 	b.w	80202c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80207a0:	4621      	mov	r1, r4
 80207a2:	4628      	mov	r0, r5
 80207a4:	bcf0      	pop	{r4, r5, r6, r7}
 80207a6:	f7ff bee5 	b.w	8020574 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080207ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80207ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207b0:	b093      	sub	sp, #76	; 0x4c
 80207b2:	4681      	mov	r9, r0
 80207b4:	4688      	mov	r8, r1
 80207b6:	6810      	ldr	r0, [r2, #0]
 80207b8:	6851      	ldr	r1, [r2, #4]
 80207ba:	ac0e      	add	r4, sp, #56	; 0x38
 80207bc:	4616      	mov	r6, r2
 80207be:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80207c2:	4f6b      	ldr	r7, [pc, #428]	; (8020970 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80207c4:	c403      	stmia	r4!, {r0, r1}
 80207c6:	6818      	ldr	r0, [r3, #0]
 80207c8:	ac10      	add	r4, sp, #64	; 0x40
 80207ca:	6859      	ldr	r1, [r3, #4]
 80207cc:	c403      	stmia	r4!, {r0, r1}
 80207ce:	a80e      	add	r0, sp, #56	; 0x38
 80207d0:	f7f8 fc28 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80207d4:	4631      	mov	r1, r6
 80207d6:	a810      	add	r0, sp, #64	; 0x40
 80207d8:	4e66      	ldr	r6, [pc, #408]	; (8020974 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80207da:	f7f8 fc4b 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80207de:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80207e2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80207e6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80207ea:	6830      	ldr	r0, [r6, #0]
 80207ec:	fb11 2103 	smlabb	r1, r1, r3, r2
 80207f0:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80207f4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80207f8:	4489      	add	r9, r1
 80207fa:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80207fe:	440a      	add	r2, r1
 8020800:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020804:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020808:	4413      	add	r3, r2
 802080a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802080e:	6803      	ldr	r3, [r0, #0]
 8020810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020812:	4798      	blx	r3
 8020814:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020818:	6830      	ldr	r0, [r6, #0]
 802081a:	d01d      	beq.n	8020858 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802081c:	2200      	movs	r2, #0
 802081e:	6801      	ldr	r1, [r0, #0]
 8020820:	b2a4      	uxth	r4, r4
 8020822:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020826:	b2ad      	uxth	r5, r5
 8020828:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802082c:	220b      	movs	r2, #11
 802082e:	9207      	str	r2, [sp, #28]
 8020830:	883a      	ldrh	r2, [r7, #0]
 8020832:	9502      	str	r5, [sp, #8]
 8020834:	9206      	str	r2, [sp, #24]
 8020836:	2201      	movs	r2, #1
 8020838:	9401      	str	r4, [sp, #4]
 802083a:	e9cd a204 	strd	sl, r2, [sp, #16]
 802083e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020842:	9203      	str	r2, [sp, #12]
 8020844:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020848:	9200      	str	r2, [sp, #0]
 802084a:	4642      	mov	r2, r8
 802084c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802084e:	4649      	mov	r1, r9
 8020850:	47a0      	blx	r4
 8020852:	b013      	add	sp, #76	; 0x4c
 8020854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020858:	6803      	ldr	r3, [r0, #0]
 802085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802085c:	4798      	blx	r3
 802085e:	883b      	ldrh	r3, [r7, #0]
 8020860:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8020864:	f04f 0e04 	mov.w	lr, #4
 8020868:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802086c:	435d      	muls	r5, r3
 802086e:	fb03 1202 	mla	r2, r3, r2, r1
 8020872:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020876:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802087a:	920c      	str	r2, [sp, #48]	; 0x30
 802087c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8020880:	1b12      	subs	r2, r2, r4
 8020882:	920d      	str	r2, [sp, #52]	; 0x34
 8020884:	0062      	lsls	r2, r4, #1
 8020886:	1b1c      	subs	r4, r3, r4
 8020888:	920a      	str	r2, [sp, #40]	; 0x28
 802088a:	0063      	lsls	r3, r4, #1
 802088c:	930b      	str	r3, [sp, #44]	; 0x2c
 802088e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020890:	4298      	cmp	r0, r3
 8020892:	d266      	bcs.n	8020962 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8020894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020896:	eb00 0b03 	add.w	fp, r0, r3
 802089a:	4558      	cmp	r0, fp
 802089c:	d25c      	bcs.n	8020958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802089e:	f819 3b01 	ldrb.w	r3, [r9], #1
 80208a2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80208a6:	f858 2003 	ldr.w	r2, [r8, r3]
 80208aa:	0e11      	lsrs	r1, r2, #24
 80208ac:	d012      	beq.n	80208d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80208ae:	29ff      	cmp	r1, #255	; 0xff
 80208b0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80208b4:	d110      	bne.n	80208d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80208b6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80208ba:	d10d      	bne.n	80208d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80208bc:	0953      	lsrs	r3, r2, #5
 80208be:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80208c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80208c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80208ca:	f027 0707 	bic.w	r7, r7, #7
 80208ce:	431f      	orrs	r7, r3
 80208d0:	433a      	orrs	r2, r7
 80208d2:	8002      	strh	r2, [r0, #0]
 80208d4:	3002      	adds	r0, #2
 80208d6:	e7e0      	b.n	802089a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80208d8:	fb0a f101 	mul.w	r1, sl, r1
 80208dc:	8806      	ldrh	r6, [r0, #0]
 80208de:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80208e2:	b2d2      	uxtb	r2, r2
 80208e4:	1c4b      	adds	r3, r1, #1
 80208e6:	1235      	asrs	r5, r6, #8
 80208e8:	10f4      	asrs	r4, r6, #3
 80208ea:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80208ee:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80208f2:	00f6      	lsls	r6, r6, #3
 80208f4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80208f8:	121b      	asrs	r3, r3, #8
 80208fa:	b2f6      	uxtb	r6, r6
 80208fc:	b299      	uxth	r1, r3
 80208fe:	43db      	mvns	r3, r3
 8020900:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020904:	fb1c fc01 	smulbb	ip, ip, r1
 8020908:	b2db      	uxtb	r3, r3
 802090a:	fb12 f201 	smulbb	r2, r2, r1
 802090e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020912:	fb05 c503 	mla	r5, r5, r3, ip
 8020916:	b2ff      	uxtb	r7, r7
 8020918:	fb06 2203 	mla	r2, r6, r3, r2
 802091c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8020920:	fb17 f701 	smulbb	r7, r7, r1
 8020924:	b2ad      	uxth	r5, r5
 8020926:	b292      	uxth	r2, r2
 8020928:	fb04 7403 	mla	r4, r4, r3, r7
 802092c:	f105 0c01 	add.w	ip, r5, #1
 8020930:	1c57      	adds	r7, r2, #1
 8020932:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020936:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802093a:	b2a4      	uxth	r4, r4
 802093c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020940:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020944:	433d      	orrs	r5, r7
 8020946:	1c67      	adds	r7, r4, #1
 8020948:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802094c:	0964      	lsrs	r4, r4, #5
 802094e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8020952:	4325      	orrs	r5, r4
 8020954:	8005      	strh	r5, [r0, #0]
 8020956:	e7bd      	b.n	80208d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802095a:	4418      	add	r0, r3
 802095c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802095e:	4499      	add	r9, r3
 8020960:	e795      	b.n	802088e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8020962:	4b04      	ldr	r3, [pc, #16]	; (8020974 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020964:	6818      	ldr	r0, [r3, #0]
 8020966:	6803      	ldr	r3, [r0, #0]
 8020968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802096a:	4798      	blx	r3
 802096c:	e771      	b.n	8020852 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 802096e:	bf00      	nop
 8020970:	20015032 	.word	0x20015032
 8020974:	20015038 	.word	0x20015038

08020978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802097c:	b087      	sub	sp, #28
 802097e:	4680      	mov	r8, r0
 8020980:	460d      	mov	r5, r1
 8020982:	4614      	mov	r4, r2
 8020984:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8020988:	2e00      	cmp	r6, #0
 802098a:	f000 80b9 	beq.w	8020b00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 802098e:	6810      	ldr	r0, [r2, #0]
 8020990:	af02      	add	r7, sp, #8
 8020992:	6851      	ldr	r1, [r2, #4]
 8020994:	c703      	stmia	r7!, {r0, r1}
 8020996:	6818      	ldr	r0, [r3, #0]
 8020998:	af04      	add	r7, sp, #16
 802099a:	6859      	ldr	r1, [r3, #4]
 802099c:	c703      	stmia	r7!, {r0, r1}
 802099e:	a802      	add	r0, sp, #8
 80209a0:	f7f8 fb40 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209a4:	4621      	mov	r1, r4
 80209a6:	a804      	add	r0, sp, #16
 80209a8:	f7f8 fb64 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80209ac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80209b0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80209b4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80209b8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80209bc:	fb14 2103 	smlabb	r1, r4, r3, r2
 80209c0:	eb08 0401 	add.w	r4, r8, r1
 80209c4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80209c8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80209cc:	440a      	add	r2, r1
 80209ce:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80209d2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80209d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80209da:	4413      	add	r3, r2
 80209dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80209e0:	4b49      	ldr	r3, [pc, #292]	; (8020b08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80209e2:	6818      	ldr	r0, [r3, #0]
 80209e4:	6803      	ldr	r3, [r0, #0]
 80209e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209e8:	4798      	blx	r3
 80209ea:	4b48      	ldr	r3, [pc, #288]	; (8020b0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 80209ec:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80209f0:	2eff      	cmp	r6, #255	; 0xff
 80209f2:	881a      	ldrh	r2, [r3, #0]
 80209f4:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80209f8:	fb02 c101 	mla	r1, r2, r1, ip
 80209fc:	fb02 f207 	mul.w	r2, r2, r7
 8020a00:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020a04:	f105 0104 	add.w	r1, r5, #4
 8020a08:	461d      	mov	r5, r3
 8020a0a:	d05a      	beq.n	8020ac2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8020a0c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8020a10:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020a14:	b2b6      	uxth	r6, r6
 8020a16:	9301      	str	r3, [sp, #4]
 8020a18:	fa1f fe8e 	uxth.w	lr, lr
 8020a1c:	4282      	cmp	r2, r0
 8020a1e:	d96a      	bls.n	8020af6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020a20:	eb00 0b0a 	add.w	fp, r0, sl
 8020a24:	4583      	cmp	fp, r0
 8020a26:	d940      	bls.n	8020aaa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020a28:	8805      	ldrh	r5, [r0, #0]
 8020a2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020a2e:	122f      	asrs	r7, r5, #8
 8020a30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020a34:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020a38:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020a3c:	00ed      	lsls	r5, r5, #3
 8020a3e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020a42:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020a46:	fb17 f70e 	smulbb	r7, r7, lr
 8020a4a:	b2ed      	uxtb	r5, r5
 8020a4c:	fb19 f90e 	smulbb	r9, r9, lr
 8020a50:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020a54:	fb15 f50e 	smulbb	r5, r5, lr
 8020a58:	fb0c 7c06 	mla	ip, ip, r6, r7
 8020a5c:	10df      	asrs	r7, r3, #3
 8020a5e:	00db      	lsls	r3, r3, #3
 8020a60:	fa1f fc8c 	uxth.w	ip, ip
 8020a64:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020a68:	b2db      	uxtb	r3, r3
 8020a6a:	fb07 9706 	mla	r7, r7, r6, r9
 8020a6e:	f10c 0901 	add.w	r9, ip, #1
 8020a72:	fb03 5306 	mla	r3, r3, r6, r5
 8020a76:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8020a7a:	b29b      	uxth	r3, r3
 8020a7c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8020a80:	b2bf      	uxth	r7, r7
 8020a82:	f103 0c01 	add.w	ip, r3, #1
 8020a86:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020a8a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020a8e:	ea4c 0c09 	orr.w	ip, ip, r9
 8020a92:	f107 0901 	add.w	r9, r7, #1
 8020a96:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8020a9a:	097f      	lsrs	r7, r7, #5
 8020a9c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020aa0:	ea4c 0c07 	orr.w	ip, ip, r7
 8020aa4:	f820 cb02 	strh.w	ip, [r0], #2
 8020aa8:	e7bc      	b.n	8020a24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8020aaa:	9b01      	ldr	r3, [sp, #4]
 8020aac:	881b      	ldrh	r3, [r3, #0]
 8020aae:	eba3 0308 	sub.w	r3, r3, r8
 8020ab2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020ab6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020aba:	eba3 0308 	sub.w	r3, r3, r8
 8020abe:	441c      	add	r4, r3
 8020ac0:	e7ac      	b.n	8020a1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8020ac2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020ac6:	4282      	cmp	r2, r0
 8020ac8:	d915      	bls.n	8020af6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020aca:	eb00 060a 	add.w	r6, r0, sl
 8020ace:	4286      	cmp	r6, r0
 8020ad0:	d906      	bls.n	8020ae0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8020ad2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020ad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020ada:	f820 3b02 	strh.w	r3, [r0], #2
 8020ade:	e7f6      	b.n	8020ace <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8020ae0:	882b      	ldrh	r3, [r5, #0]
 8020ae2:	eba3 0308 	sub.w	r3, r3, r8
 8020ae6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020aea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020aee:	eba3 0308 	sub.w	r3, r3, r8
 8020af2:	441c      	add	r4, r3
 8020af4:	e7e7      	b.n	8020ac6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8020af6:	4b04      	ldr	r3, [pc, #16]	; (8020b08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020af8:	6818      	ldr	r0, [r3, #0]
 8020afa:	6803      	ldr	r3, [r0, #0]
 8020afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020afe:	4798      	blx	r3
 8020b00:	b007      	add	sp, #28
 8020b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b06:	bf00      	nop
 8020b08:	20015038 	.word	0x20015038
 8020b0c:	20015032 	.word	0x20015032

08020b10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b14:	b091      	sub	sp, #68	; 0x44
 8020b16:	4680      	mov	r8, r0
 8020b18:	460f      	mov	r7, r1
 8020b1a:	4614      	mov	r4, r2
 8020b1c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8020b20:	2d00      	cmp	r5, #0
 8020b22:	d051      	beq.n	8020bc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020b24:	6810      	ldr	r0, [r2, #0]
 8020b26:	ae0c      	add	r6, sp, #48	; 0x30
 8020b28:	6851      	ldr	r1, [r2, #4]
 8020b2a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8020d2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8020b2e:	c603      	stmia	r6!, {r0, r1}
 8020b30:	6818      	ldr	r0, [r3, #0]
 8020b32:	ae0e      	add	r6, sp, #56	; 0x38
 8020b34:	6859      	ldr	r1, [r3, #4]
 8020b36:	c603      	stmia	r6!, {r0, r1}
 8020b38:	a80c      	add	r0, sp, #48	; 0x30
 8020b3a:	f7f8 fa73 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b3e:	4621      	mov	r1, r4
 8020b40:	a80e      	add	r0, sp, #56	; 0x38
 8020b42:	f7f8 fa97 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b46:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020b4a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020b4e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020b52:	f8d9 0000 	ldr.w	r0, [r9]
 8020b56:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020b5a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8020b5e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8020b62:	eb08 0401 	add.w	r4, r8, r1
 8020b66:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020b6a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8020d30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8020b6e:	440a      	add	r2, r1
 8020b70:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020b74:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020b78:	4413      	add	r3, r2
 8020b7a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020b7e:	6803      	ldr	r3, [r0, #0]
 8020b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b82:	4798      	blx	r3
 8020b84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020b88:	f8d9 0000 	ldr.w	r0, [r9]
 8020b8c:	d01f      	beq.n	8020bce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8020b8e:	2200      	movs	r2, #0
 8020b90:	6801      	ldr	r1, [r0, #0]
 8020b92:	b2b6      	uxth	r6, r6
 8020b94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020b98:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020b9c:	220b      	movs	r2, #11
 8020b9e:	9207      	str	r2, [sp, #28]
 8020ba0:	f8b8 2000 	ldrh.w	r2, [r8]
 8020ba4:	9601      	str	r6, [sp, #4]
 8020ba6:	9206      	str	r2, [sp, #24]
 8020ba8:	2201      	movs	r2, #1
 8020baa:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8020bae:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020bb2:	9203      	str	r2, [sp, #12]
 8020bb4:	fa1f f28a 	uxth.w	r2, sl
 8020bb8:	9202      	str	r2, [sp, #8]
 8020bba:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020bbe:	9200      	str	r2, [sp, #0]
 8020bc0:	463a      	mov	r2, r7
 8020bc2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8020bc4:	4621      	mov	r1, r4
 8020bc6:	47a8      	blx	r5
 8020bc8:	b011      	add	sp, #68	; 0x44
 8020bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bce:	6803      	ldr	r3, [r0, #0]
 8020bd0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8020bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020bd6:	4798      	blx	r3
 8020bd8:	f8b8 2000 	ldrh.w	r2, [r8]
 8020bdc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020be0:	2dff      	cmp	r5, #255	; 0xff
 8020be2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8020be6:	fb0a fa02 	mul.w	sl, sl, r2
 8020bea:	fb02 1303 	mla	r3, r2, r3, r1
 8020bee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020bf2:	d062      	beq.n	8020cba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020bf4:	ea6f 0c05 	mvn.w	ip, r5
 8020bf8:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8020bfc:	b2ad      	uxth	r5, r5
 8020bfe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8020c02:	fa5f fc8c 	uxtb.w	ip, ip
 8020c06:	930a      	str	r3, [sp, #40]	; 0x28
 8020c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c0a:	4298      	cmp	r0, r3
 8020c0c:	f080 8085 	bcs.w	8020d1a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020c10:	eb00 0b09 	add.w	fp, r0, r9
 8020c14:	4558      	cmp	r0, fp
 8020c16:	d246      	bcs.n	8020ca6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8020c18:	f814 eb01 	ldrb.w	lr, [r4], #1
 8020c1c:	2303      	movs	r3, #3
 8020c1e:	2204      	movs	r2, #4
 8020c20:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020c24:	8803      	ldrh	r3, [r0, #0]
 8020c26:	eb07 0a0e 	add.w	sl, r7, lr
 8020c2a:	1219      	asrs	r1, r3, #8
 8020c2c:	10da      	asrs	r2, r3, #3
 8020c2e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020c32:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8020c36:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020c3a:	00db      	lsls	r3, r3, #3
 8020c3c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020c40:	fb18 f805 	smulbb	r8, r8, r5
 8020c44:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020c48:	fb1e fe05 	smulbb	lr, lr, r5
 8020c4c:	b2db      	uxtb	r3, r3
 8020c4e:	fb01 810c 	mla	r1, r1, ip, r8
 8020c52:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020c56:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020c5a:	fb18 f805 	smulbb	r8, r8, r5
 8020c5e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8020c62:	b289      	uxth	r1, r1
 8020c64:	fb02 820c 	mla	r2, r2, ip, r8
 8020c68:	fb03 e30c 	mla	r3, r3, ip, lr
 8020c6c:	f101 0801 	add.w	r8, r1, #1
 8020c70:	b292      	uxth	r2, r2
 8020c72:	b29b      	uxth	r3, r3
 8020c74:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020c78:	f102 0801 	add.w	r8, r2, #1
 8020c7c:	f103 0e01 	add.w	lr, r3, #1
 8020c80:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8020c84:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020c88:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020c8c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020c90:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020c94:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020c98:	ea4e 0101 	orr.w	r1, lr, r1
 8020c9c:	ea41 0108 	orr.w	r1, r1, r8
 8020ca0:	f820 1b02 	strh.w	r1, [r0], #2
 8020ca4:	e7b6      	b.n	8020c14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8020ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ca8:	881b      	ldrh	r3, [r3, #0]
 8020caa:	1b9b      	subs	r3, r3, r6
 8020cac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020cb0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020cb4:	1b9b      	subs	r3, r3, r6
 8020cb6:	441c      	add	r4, r3
 8020cb8:	e7a6      	b.n	8020c08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8020cba:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8020cbe:	2203      	movs	r2, #3
 8020cc0:	2504      	movs	r5, #4
 8020cc2:	4919      	ldr	r1, [pc, #100]	; (8020d28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020cc4:	4550      	cmp	r0, sl
 8020cc6:	d228      	bcs.n	8020d1a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020cc8:	eb00 0c09 	add.w	ip, r0, r9
 8020ccc:	4560      	cmp	r0, ip
 8020cce:	4623      	mov	r3, r4
 8020cd0:	d219      	bcs.n	8020d06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8020cd2:	f893 e000 	ldrb.w	lr, [r3]
 8020cd6:	3401      	adds	r4, #1
 8020cd8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8020cdc:	eb07 0b0e 	add.w	fp, r7, lr
 8020ce0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020ce4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020ce8:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020cec:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020cf0:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020cf4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020cf8:	ea43 030b 	orr.w	r3, r3, fp
 8020cfc:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8020d00:	f820 3b02 	strh.w	r3, [r0], #2
 8020d04:	e7e2      	b.n	8020ccc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8020d06:	f8b8 3000 	ldrh.w	r3, [r8]
 8020d0a:	1b9b      	subs	r3, r3, r6
 8020d0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020d10:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020d14:	1b9b      	subs	r3, r3, r6
 8020d16:	441c      	add	r4, r3
 8020d18:	e7d4      	b.n	8020cc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8020d1a:	4b04      	ldr	r3, [pc, #16]	; (8020d2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020d1c:	6818      	ldr	r0, [r3, #0]
 8020d1e:	6803      	ldr	r3, [r0, #0]
 8020d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d22:	4798      	blx	r3
 8020d24:	e750      	b.n	8020bc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020d26:	bf00      	nop
 8020d28:	fffff800 	.word	0xfffff800
 8020d2c:	20015038 	.word	0x20015038
 8020d30:	20015032 	.word	0x20015032

08020d34 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020d34:	b4f0      	push	{r4, r5, r6, r7}
 8020d36:	460c      	mov	r4, r1
 8020d38:	4611      	mov	r1, r2
 8020d3a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8020d3e:	461a      	mov	r2, r3
 8020d40:	780f      	ldrb	r7, [r1, #0]
 8020d42:	9b04      	ldr	r3, [sp, #16]
 8020d44:	2f01      	cmp	r7, #1
 8020d46:	784e      	ldrb	r6, [r1, #1]
 8020d48:	d036      	beq.n	8020db8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 8020d4a:	d31e      	bcc.n	8020d8a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 8020d4c:	2f02      	cmp	r7, #2
 8020d4e:	d14a      	bne.n	8020de6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020d50:	2e03      	cmp	r6, #3
 8020d52:	d848      	bhi.n	8020de6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020d54:	e8df f006 	tbb	[pc, r6]
 8020d58:	16140702 	.word	0x16140702
 8020d5c:	9504      	str	r5, [sp, #16]
 8020d5e:	4620      	mov	r0, r4
 8020d60:	bcf0      	pop	{r4, r5, r6, r7}
 8020d62:	f7ff be09 	b.w	8020978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020d66:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8020d68:	2800      	cmp	r0, #0
 8020d6a:	d03c      	beq.n	8020de6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020d6c:	6806      	ldr	r6, [r0, #0]
 8020d6e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020d72:	68b5      	ldr	r5, [r6, #8]
 8020d74:	4613      	mov	r3, r2
 8020d76:	46ac      	mov	ip, r5
 8020d78:	460a      	mov	r2, r1
 8020d7a:	4621      	mov	r1, r4
 8020d7c:	bcf0      	pop	{r4, r5, r6, r7}
 8020d7e:	4760      	bx	ip
 8020d80:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8020d82:	e7f1      	b.n	8020d68 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8020d84:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8020d88:	e7ee      	b.n	8020d68 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8020d8a:	2e03      	cmp	r6, #3
 8020d8c:	d82b      	bhi.n	8020de6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020d8e:	e8df f006 	tbb	[pc, r6]
 8020d92:	0702      	.short	0x0702
 8020d94:	100e      	.short	0x100e
 8020d96:	9504      	str	r5, [sp, #16]
 8020d98:	4620      	mov	r0, r4
 8020d9a:	bcf0      	pop	{r4, r5, r6, r7}
 8020d9c:	f7ff bd06 	b.w	80207ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020da0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8020da2:	b300      	cbz	r0, 8020de6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020da4:	6806      	ldr	r6, [r0, #0]
 8020da6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020daa:	68f5      	ldr	r5, [r6, #12]
 8020dac:	e7e2      	b.n	8020d74 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8020dae:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8020db0:	e7f7      	b.n	8020da2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8020db2:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8020db6:	e7f4      	b.n	8020da2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8020db8:	2e03      	cmp	r6, #3
 8020dba:	d814      	bhi.n	8020de6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020dbc:	e8df f006 	tbb	[pc, r6]
 8020dc0:	100e0702 	.word	0x100e0702
 8020dc4:	9504      	str	r5, [sp, #16]
 8020dc6:	4620      	mov	r0, r4
 8020dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8020dca:	f7ff bea1 	b.w	8020b10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020dce:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8020dd0:	b148      	cbz	r0, 8020de6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020dd2:	6806      	ldr	r6, [r0, #0]
 8020dd4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020dd8:	6935      	ldr	r5, [r6, #16]
 8020dda:	e7cb      	b.n	8020d74 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8020ddc:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8020dde:	e7f7      	b.n	8020dd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8020de0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8020de4:	e7f4      	b.n	8020dd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8020de6:	bcf0      	pop	{r4, r5, r6, r7}
 8020de8:	4770      	bx	lr
	...

08020dec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8020dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020df0:	b087      	sub	sp, #28
 8020df2:	4604      	mov	r4, r0
 8020df4:	460e      	mov	r6, r1
 8020df6:	6810      	ldr	r0, [r2, #0]
 8020df8:	6851      	ldr	r1, [r2, #4]
 8020dfa:	ad02      	add	r5, sp, #8
 8020dfc:	4617      	mov	r7, r2
 8020dfe:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020e02:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021034 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020e06:	c503      	stmia	r5!, {r0, r1}
 8020e08:	6818      	ldr	r0, [r3, #0]
 8020e0a:	ad04      	add	r5, sp, #16
 8020e0c:	6859      	ldr	r1, [r3, #4]
 8020e0e:	c503      	stmia	r5!, {r0, r1}
 8020e10:	a802      	add	r0, sp, #8
 8020e12:	f7f8 f907 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e16:	4639      	mov	r1, r7
 8020e18:	a804      	add	r0, sp, #16
 8020e1a:	f7f8 f92b 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e1e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020e22:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020e26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020e2a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020e2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020e32:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020e36:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020e3a:	440e      	add	r6, r1
 8020e3c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020e40:	440a      	add	r2, r1
 8020e42:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020e46:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020e4a:	4413      	add	r3, r2
 8020e4c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020e50:	4b77      	ldr	r3, [pc, #476]	; (8021030 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020e52:	6818      	ldr	r0, [r3, #0]
 8020e54:	6803      	ldr	r3, [r0, #0]
 8020e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e58:	4798      	blx	r3
 8020e5a:	f8b9 b000 	ldrh.w	fp, [r9]
 8020e5e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020e62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020e66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020e6a:	fb05 f50b 	mul.w	r5, r5, fp
 8020e6e:	fb0b 2303 	mla	r3, fp, r3, r2
 8020e72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020e76:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020e7a:	9300      	str	r3, [sp, #0]
 8020e7c:	d069      	beq.n	8020f52 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8020e7e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020e82:	4558      	cmp	r0, fp
 8020e84:	f080 80cc 	bcs.w	8021020 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020e88:	9b00      	ldr	r3, [sp, #0]
 8020e8a:	4631      	mov	r1, r6
 8020e8c:	18c3      	adds	r3, r0, r3
 8020e8e:	9301      	str	r3, [sp, #4]
 8020e90:	9b01      	ldr	r3, [sp, #4]
 8020e92:	4298      	cmp	r0, r3
 8020e94:	d24f      	bcs.n	8020f36 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8020e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020e9a:	2a00      	cmp	r2, #0
 8020e9c:	d048      	beq.n	8020f30 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8020e9e:	fb0a f202 	mul.w	r2, sl, r2
 8020ea2:	1c53      	adds	r3, r2, #1
 8020ea4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020ea8:	121b      	asrs	r3, r3, #8
 8020eaa:	d041      	beq.n	8020f30 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8020eac:	8802      	ldrh	r2, [r0, #0]
 8020eae:	b29e      	uxth	r6, r3
 8020eb0:	f8b4 c000 	ldrh.w	ip, [r4]
 8020eb4:	43db      	mvns	r3, r3
 8020eb6:	1215      	asrs	r5, r2, #8
 8020eb8:	b2db      	uxtb	r3, r3
 8020eba:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020ebe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020ec2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020ec6:	fb15 f503 	smulbb	r5, r5, r3
 8020eca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020ece:	00d2      	lsls	r2, r2, #3
 8020ed0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020ed4:	fb07 5706 	mla	r7, r7, r6, r5
 8020ed8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020edc:	b2d2      	uxtb	r2, r2
 8020ede:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020ee2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020ee6:	fb1e fe03 	smulbb	lr, lr, r3
 8020eea:	b2bf      	uxth	r7, r7
 8020eec:	fb12 f203 	smulbb	r2, r2, r3
 8020ef0:	fa5f fc8c 	uxtb.w	ip, ip
 8020ef4:	fb05 e506 	mla	r5, r5, r6, lr
 8020ef8:	f107 0e01 	add.w	lr, r7, #1
 8020efc:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020f00:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020f04:	fa1f fc8c 	uxth.w	ip, ip
 8020f08:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8020f0c:	b2ad      	uxth	r5, r5
 8020f0e:	f10c 0701 	add.w	r7, ip, #1
 8020f12:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020f16:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020f1a:	ea47 070e 	orr.w	r7, r7, lr
 8020f1e:	f105 0e01 	add.w	lr, r5, #1
 8020f22:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8020f26:	096d      	lsrs	r5, r5, #5
 8020f28:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020f2c:	432f      	orrs	r7, r5
 8020f2e:	8007      	strh	r7, [r0, #0]
 8020f30:	3002      	adds	r0, #2
 8020f32:	3402      	adds	r4, #2
 8020f34:	e7ac      	b.n	8020e90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8020f36:	f8b9 3000 	ldrh.w	r3, [r9]
 8020f3a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020f3e:	eba3 0308 	sub.w	r3, r3, r8
 8020f42:	eba6 0608 	sub.w	r6, r6, r8
 8020f46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f4a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020f4e:	440e      	add	r6, r1
 8020f50:	e797      	b.n	8020e82 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8020f52:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020f56:	42a8      	cmp	r0, r5
 8020f58:	d262      	bcs.n	8021020 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020f5a:	9b00      	ldr	r3, [sp, #0]
 8020f5c:	4631      	mov	r1, r6
 8020f5e:	eb00 0b03 	add.w	fp, r0, r3
 8020f62:	4558      	cmp	r0, fp
 8020f64:	d24e      	bcs.n	8021004 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8020f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020f6a:	b12b      	cbz	r3, 8020f78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020f6c:	2bff      	cmp	r3, #255	; 0xff
 8020f6e:	f8b4 e000 	ldrh.w	lr, [r4]
 8020f72:	d104      	bne.n	8020f7e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8020f74:	f8a0 e000 	strh.w	lr, [r0]
 8020f78:	3002      	adds	r0, #2
 8020f7a:	3402      	adds	r4, #2
 8020f7c:	e7f1      	b.n	8020f62 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8020f7e:	8802      	ldrh	r2, [r0, #0]
 8020f80:	b29f      	uxth	r7, r3
 8020f82:	43db      	mvns	r3, r3
 8020f84:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020f88:	1216      	asrs	r6, r2, #8
 8020f8a:	b2db      	uxtb	r3, r3
 8020f8c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020f90:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020f94:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020f98:	00d2      	lsls	r2, r2, #3
 8020f9a:	fb16 f603 	smulbb	r6, r6, r3
 8020f9e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020fa2:	b2d2      	uxtb	r2, r2
 8020fa4:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020fa8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020fac:	fb1a fa03 	smulbb	sl, sl, r3
 8020fb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020fb4:	fa1f fc8c 	uxth.w	ip, ip
 8020fb8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020fbc:	fb12 f303 	smulbb	r3, r2, r3
 8020fc0:	fa5f fe8e 	uxtb.w	lr, lr
 8020fc4:	fb06 a607 	mla	r6, r6, r7, sl
 8020fc8:	f10c 0201 	add.w	r2, ip, #1
 8020fcc:	fb0e 3307 	mla	r3, lr, r7, r3
 8020fd0:	b2b6      	uxth	r6, r6
 8020fd2:	b29b      	uxth	r3, r3
 8020fd4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020fd8:	f106 0a01 	add.w	sl, r6, #1
 8020fdc:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8020fe0:	f103 0c01 	add.w	ip, r3, #1
 8020fe4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020fe8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020fec:	0976      	lsrs	r6, r6, #5
 8020fee:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020ff2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020ff6:	ea4c 0c02 	orr.w	ip, ip, r2
 8020ffa:	ea4c 0c06 	orr.w	ip, ip, r6
 8020ffe:	f8a0 c000 	strh.w	ip, [r0]
 8021002:	e7b9      	b.n	8020f78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021004:	f8b9 3000 	ldrh.w	r3, [r9]
 8021008:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802100c:	eba3 0308 	sub.w	r3, r3, r8
 8021010:	eba6 0608 	sub.w	r6, r6, r8
 8021014:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021018:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802101c:	440e      	add	r6, r1
 802101e:	e79a      	b.n	8020f56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021020:	4b03      	ldr	r3, [pc, #12]	; (8021030 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021022:	6818      	ldr	r0, [r3, #0]
 8021024:	6803      	ldr	r3, [r0, #0]
 8021026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021028:	4798      	blx	r3
 802102a:	b007      	add	sp, #28
 802102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021030:	20015038 	.word	0x20015038
 8021034:	20015032 	.word	0x20015032

08021038 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802103c:	b089      	sub	sp, #36	; 0x24
 802103e:	4682      	mov	sl, r0
 8021040:	460f      	mov	r7, r1
 8021042:	4691      	mov	r9, r2
 8021044:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021048:	4698      	mov	r8, r3
 802104a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802104c:	2e00      	cmp	r6, #0
 802104e:	d03d      	beq.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021050:	4608      	mov	r0, r1
 8021052:	f7fa fe4b 	bl	801bcec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021056:	4605      	mov	r5, r0
 8021058:	4638      	mov	r0, r7
 802105a:	f7fa fe7b 	bl	801bd54 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802105e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021062:	4638      	mov	r0, r7
 8021064:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021068:	f8ad 500c 	strh.w	r5, [sp, #12]
 802106c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021070:	f7fa ff28 	bl	801bec4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021074:	4605      	mov	r5, r0
 8021076:	4638      	mov	r0, r7
 8021078:	f7fa ff54 	bl	801bf24 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802107c:	4681      	mov	r9, r0
 802107e:	4638      	mov	r0, r7
 8021080:	f7fa ffa4 	bl	801bfcc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021084:	280b      	cmp	r0, #11
 8021086:	d821      	bhi.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021088:	e8df f000 	tbb	[pc, r0]
 802108c:	2006aebe 	.word	0x2006aebe
 8021090:	20202020 	.word	0x20202020
 8021094:	b5202020 	.word	0xb5202020
 8021098:	4bb0      	ldr	r3, [pc, #704]	; (802135c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 802109a:	6818      	ldr	r0, [r3, #0]
 802109c:	6803      	ldr	r3, [r0, #0]
 802109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210a0:	4798      	blx	r3
 80210a2:	2eff      	cmp	r6, #255	; 0xff
 80210a4:	d101      	bne.n	80210aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 80210a6:	0683      	lsls	r3, r0, #26
 80210a8:	d506      	bpl.n	80210b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 80210aa:	4633      	mov	r3, r6
 80210ac:	4622      	mov	r2, r4
 80210ae:	a902      	add	r1, sp, #8
 80210b0:	4628      	mov	r0, r5
 80210b2:	f7ff f909 	bl	80202c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80210b6:	e009      	b.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80210b8:	4638      	mov	r0, r7
 80210ba:	f7fa fecb 	bl	801be54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80210be:	b940      	cbnz	r0, 80210d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 80210c0:	4623      	mov	r3, r4
 80210c2:	aa02      	add	r2, sp, #8
 80210c4:	4629      	mov	r1, r5
 80210c6:	4650      	mov	r0, sl
 80210c8:	f7ff f9e4 	bl	8020494 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80210cc:	b009      	add	sp, #36	; 0x24
 80210ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210d2:	f10d 0818 	add.w	r8, sp, #24
 80210d6:	4639      	mov	r1, r7
 80210d8:	af04      	add	r7, sp, #16
 80210da:	4640      	mov	r0, r8
 80210dc:	f7fa fe6e 	bl	801bdbc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80210e0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80210e4:	e887 0003 	stmia.w	r7, {r0, r1}
 80210e8:	4638      	mov	r0, r7
 80210ea:	4621      	mov	r1, r4
 80210ec:	f7f5 fa84 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 80210f0:	4638      	mov	r0, r7
 80210f2:	f7f5 fac4 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80210f6:	2800      	cmp	r0, #0
 80210f8:	d1d7      	bne.n	80210aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 80210fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80210fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021102:	4293      	cmp	r3, r2
 8021104:	dd12      	ble.n	802112c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 8021106:	1a9b      	subs	r3, r3, r2
 8021108:	f9b4 0000 	ldrsh.w	r0, [r4]
 802110c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021110:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021114:	4628      	mov	r0, r5
 8021116:	f8ad 201a 	strh.w	r2, [sp, #26]
 802111a:	4642      	mov	r2, r8
 802111c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021120:	a902      	add	r1, sp, #8
 8021122:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021126:	4633      	mov	r3, r6
 8021128:	f7ff f8ce 	bl	80202c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802112c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021130:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021134:	4293      	cmp	r3, r2
 8021136:	dd12      	ble.n	802115e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 8021138:	1a9b      	subs	r3, r3, r2
 802113a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802113e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021142:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021146:	4642      	mov	r2, r8
 8021148:	f8ad 001a 	strh.w	r0, [sp, #26]
 802114c:	4628      	mov	r0, r5
 802114e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021152:	23ff      	movs	r3, #255	; 0xff
 8021154:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021158:	a902      	add	r1, sp, #8
 802115a:	f7ff f8b5 	bl	80202c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802115e:	463b      	mov	r3, r7
 8021160:	aa02      	add	r2, sp, #8
 8021162:	4629      	mov	r1, r5
 8021164:	4650      	mov	r0, sl
 8021166:	f7ff f995 	bl	8020494 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802116a:	88a2      	ldrh	r2, [r4, #4]
 802116c:	8823      	ldrh	r3, [r4, #0]
 802116e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021172:	4413      	add	r3, r2
 8021174:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021178:	440a      	add	r2, r1
 802117a:	b29b      	uxth	r3, r3
 802117c:	b292      	uxth	r2, r2
 802117e:	b218      	sxth	r0, r3
 8021180:	b211      	sxth	r1, r2
 8021182:	4288      	cmp	r0, r1
 8021184:	dd12      	ble.n	80211ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8021186:	1a9b      	subs	r3, r3, r2
 8021188:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802118c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021190:	4642      	mov	r2, r8
 8021192:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021196:	a902      	add	r1, sp, #8
 8021198:	f8ad 301c 	strh.w	r3, [sp, #28]
 802119c:	23ff      	movs	r3, #255	; 0xff
 802119e:	f8ad 001e 	strh.w	r0, [sp, #30]
 80211a2:	4628      	mov	r0, r5
 80211a4:	f8ad 601a 	strh.w	r6, [sp, #26]
 80211a8:	f7ff f88e 	bl	80202c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80211ac:	88e2      	ldrh	r2, [r4, #6]
 80211ae:	8863      	ldrh	r3, [r4, #2]
 80211b0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80211b4:	4413      	add	r3, r2
 80211b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80211ba:	440a      	add	r2, r1
 80211bc:	b29b      	uxth	r3, r3
 80211be:	b292      	uxth	r2, r2
 80211c0:	b218      	sxth	r0, r3
 80211c2:	b211      	sxth	r1, r2
 80211c4:	4288      	cmp	r0, r1
 80211c6:	dd81      	ble.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80211c8:	1a9b      	subs	r3, r3, r2
 80211ca:	f9b4 6000 	ldrsh.w	r6, [r4]
 80211ce:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80211d2:	4642      	mov	r2, r8
 80211d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80211d8:	23ff      	movs	r3, #255	; 0xff
 80211da:	f8ad 6018 	strh.w	r6, [sp, #24]
 80211de:	f8ad 101a 	strh.w	r1, [sp, #26]
 80211e2:	f8ad 001c 	strh.w	r0, [sp, #28]
 80211e6:	e762      	b.n	80210ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80211e8:	4633      	mov	r3, r6
 80211ea:	4622      	mov	r2, r4
 80211ec:	a902      	add	r1, sp, #8
 80211ee:	4628      	mov	r0, r5
 80211f0:	f7ff f9c0 	bl	8020574 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80211f4:	e76a      	b.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80211f6:	e9cd 4600 	strd	r4, r6, [sp]
 80211fa:	ab02      	add	r3, sp, #8
 80211fc:	464a      	mov	r2, r9
 80211fe:	4629      	mov	r1, r5
 8021200:	4650      	mov	r0, sl
 8021202:	f7ff fd97 	bl	8020d34 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021206:	e761      	b.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021208:	4638      	mov	r0, r7
 802120a:	f7fa fe23 	bl	801be54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802120e:	b950      	cbnz	r0, 8021226 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 8021210:	f8da 3000 	ldr.w	r3, [sl]
 8021214:	aa02      	add	r2, sp, #8
 8021216:	4629      	mov	r1, r5
 8021218:	e9cd 6000 	strd	r6, r0, [sp]
 802121c:	4650      	mov	r0, sl
 802121e:	68de      	ldr	r6, [r3, #12]
 8021220:	4623      	mov	r3, r4
 8021222:	47b0      	blx	r6
 8021224:	e752      	b.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021226:	f10d 0818 	add.w	r8, sp, #24
 802122a:	4639      	mov	r1, r7
 802122c:	af04      	add	r7, sp, #16
 802122e:	4640      	mov	r0, r8
 8021230:	f7fa fdc4 	bl	801bdbc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021234:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021238:	e887 0003 	stmia.w	r7, {r0, r1}
 802123c:	4638      	mov	r0, r7
 802123e:	4621      	mov	r1, r4
 8021240:	f7f5 f9da 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 8021244:	4638      	mov	r0, r7
 8021246:	f7f5 fa1a 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 802124a:	b138      	cbz	r0, 802125c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 802124c:	4623      	mov	r3, r4
 802124e:	9600      	str	r6, [sp, #0]
 8021250:	aa02      	add	r2, sp, #8
 8021252:	4649      	mov	r1, r9
 8021254:	4628      	mov	r0, r5
 8021256:	f7ff fdc9 	bl	8020dec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802125a:	e737      	b.n	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802125c:	f8da 3000 	ldr.w	r3, [sl]
 8021260:	aa02      	add	r2, sp, #8
 8021262:	4629      	mov	r1, r5
 8021264:	e9cd 6000 	strd	r6, r0, [sp]
 8021268:	4650      	mov	r0, sl
 802126a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 802126e:	463b      	mov	r3, r7
 8021270:	47d8      	blx	fp
 8021272:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021276:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802127a:	4293      	cmp	r3, r2
 802127c:	dd13      	ble.n	80212a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 802127e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021282:	1a9b      	subs	r3, r3, r2
 8021284:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021288:	f8ad 0018 	strh.w	r0, [sp, #24]
 802128c:	4628      	mov	r0, r5
 802128e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021292:	aa02      	add	r2, sp, #8
 8021294:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021298:	4649      	mov	r1, r9
 802129a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802129e:	4643      	mov	r3, r8
 80212a0:	9600      	str	r6, [sp, #0]
 80212a2:	f7ff fda3 	bl	8020dec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80212a6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80212aa:	f9b4 2000 	ldrsh.w	r2, [r4]
 80212ae:	4293      	cmp	r3, r2
 80212b0:	dd13      	ble.n	80212da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 80212b2:	1a9b      	subs	r3, r3, r2
 80212b4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80212b8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80212bc:	f8ad 2018 	strh.w	r2, [sp, #24]
 80212c0:	aa02      	add	r2, sp, #8
 80212c2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80212c6:	4628      	mov	r0, r5
 80212c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80212cc:	4643      	mov	r3, r8
 80212ce:	f8ad 101e 	strh.w	r1, [sp, #30]
 80212d2:	4649      	mov	r1, r9
 80212d4:	9600      	str	r6, [sp, #0]
 80212d6:	f7ff fd89 	bl	8020dec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80212da:	88a2      	ldrh	r2, [r4, #4]
 80212dc:	8823      	ldrh	r3, [r4, #0]
 80212de:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80212e2:	4413      	add	r3, r2
 80212e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80212e8:	440a      	add	r2, r1
 80212ea:	b29b      	uxth	r3, r3
 80212ec:	b292      	uxth	r2, r2
 80212ee:	b218      	sxth	r0, r3
 80212f0:	b211      	sxth	r1, r2
 80212f2:	4288      	cmp	r0, r1
 80212f4:	dd13      	ble.n	802131e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 80212f6:	1a9b      	subs	r3, r3, r2
 80212f8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80212fc:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021300:	aa02      	add	r2, sp, #8
 8021302:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021306:	4649      	mov	r1, r9
 8021308:	f8ad 301c 	strh.w	r3, [sp, #28]
 802130c:	4643      	mov	r3, r8
 802130e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021312:	4628      	mov	r0, r5
 8021314:	9600      	str	r6, [sp, #0]
 8021316:	f8ad 701a 	strh.w	r7, [sp, #26]
 802131a:	f7ff fd67 	bl	8020dec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802131e:	88e2      	ldrh	r2, [r4, #6]
 8021320:	8863      	ldrh	r3, [r4, #2]
 8021322:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021326:	4413      	add	r3, r2
 8021328:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802132c:	440a      	add	r2, r1
 802132e:	b29b      	uxth	r3, r3
 8021330:	b292      	uxth	r2, r2
 8021332:	b218      	sxth	r0, r3
 8021334:	b211      	sxth	r1, r2
 8021336:	4288      	cmp	r0, r1
 8021338:	f77f aec8 	ble.w	80210cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802133c:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021340:	1a9b      	subs	r3, r3, r2
 8021342:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021346:	f8ad 301e 	strh.w	r3, [sp, #30]
 802134a:	4643      	mov	r3, r8
 802134c:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021350:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021354:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021358:	9600      	str	r6, [sp, #0]
 802135a:	e779      	b.n	8021250 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 802135c:	20015038 	.word	0x20015038

08021360 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021360:	b180      	cbz	r0, 8021384 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021362:	2903      	cmp	r1, #3
 8021364:	d81c      	bhi.n	80213a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021366:	e8df f001 	tbb	[pc, r1]
 802136a:	1d02      	.short	0x1d02
 802136c:	1f08      	.short	0x1f08
 802136e:	4b10      	ldr	r3, [pc, #64]	; (80213b0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021370:	8818      	ldrh	r0, [r3, #0]
 8021372:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021376:	4240      	negs	r0, r0
 8021378:	4770      	bx	lr
 802137a:	4b0d      	ldr	r3, [pc, #52]	; (80213b0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802137c:	8818      	ldrh	r0, [r3, #0]
 802137e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021382:	4770      	bx	lr
 8021384:	2903      	cmp	r1, #3
 8021386:	d80b      	bhi.n	80213a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021388:	a301      	add	r3, pc, #4	; (adr r3, 8021390 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 802138a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802138e:	bf00      	nop
 8021390:	080213a5 	.word	0x080213a5
 8021394:	0802137b 	.word	0x0802137b
 8021398:	080213a9 	.word	0x080213a9
 802139c:	0802136f 	.word	0x0802136f
 80213a0:	2000      	movs	r0, #0
 80213a2:	4770      	bx	lr
 80213a4:	2001      	movs	r0, #1
 80213a6:	4770      	bx	lr
 80213a8:	f04f 30ff 	mov.w	r0, #4294967295
 80213ac:	4770      	bx	lr
 80213ae:	bf00      	nop
 80213b0:	20015032 	.word	0x20015032

080213b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80213b4:	b180      	cbz	r0, 80213d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 80213b6:	2903      	cmp	r1, #3
 80213b8:	d81c      	bhi.n	80213f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80213ba:	e8df f001 	tbb	[pc, r1]
 80213be:	021d      	.short	0x021d
 80213c0:	071f      	.short	0x071f
 80213c2:	4b10      	ldr	r3, [pc, #64]	; (8021404 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80213c4:	8818      	ldrh	r0, [r3, #0]
 80213c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80213ca:	4770      	bx	lr
 80213cc:	4b0d      	ldr	r3, [pc, #52]	; (8021404 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80213ce:	8818      	ldrh	r0, [r3, #0]
 80213d0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80213d4:	4240      	negs	r0, r0
 80213d6:	4770      	bx	lr
 80213d8:	2903      	cmp	r1, #3
 80213da:	d80b      	bhi.n	80213f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80213dc:	a301      	add	r3, pc, #4	; (adr r3, 80213e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 80213de:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80213e2:	bf00      	nop
 80213e4:	080213c3 	.word	0x080213c3
 80213e8:	080213fd 	.word	0x080213fd
 80213ec:	080213cd 	.word	0x080213cd
 80213f0:	080213f9 	.word	0x080213f9
 80213f4:	2000      	movs	r0, #0
 80213f6:	4770      	bx	lr
 80213f8:	2001      	movs	r0, #1
 80213fa:	4770      	bx	lr
 80213fc:	f04f 30ff 	mov.w	r0, #4294967295
 8021400:	4770      	bx	lr
 8021402:	bf00      	nop
 8021404:	20015032 	.word	0x20015032

08021408 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802140c:	b099      	sub	sp, #100	; 0x64
 802140e:	910b      	str	r1, [sp, #44]	; 0x2c
 8021410:	a914      	add	r1, sp, #80	; 0x50
 8021412:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8021416:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 802141a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 802141e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8021422:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8021426:	e881 000c 	stmia.w	r1, {r2, r3}
 802142a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 802142e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8021432:	9309      	str	r3, [sp, #36]	; 0x24
 8021434:	f891 900d 	ldrb.w	r9, [r1, #13]
 8021438:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802143c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8021440:	9310      	str	r3, [sp, #64]	; 0x40
 8021442:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8021446:	930c      	str	r3, [sp, #48]	; 0x30
 8021448:	f407 7380 	and.w	r3, r7, #256	; 0x100
 802144c:	798f      	ldrb	r7, [r1, #6]
 802144e:	431f      	orrs	r7, r3
 8021450:	f000 8195 	beq.w	802177e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021454:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8021458:	f409 7380 	and.w	r3, r9, #256	; 0x100
 802145c:	f891 9007 	ldrb.w	r9, [r1, #7]
 8021460:	ea59 0903 	orrs.w	r9, r9, r3
 8021464:	f000 818b 	beq.w	802177e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021468:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802146c:	b29b      	uxth	r3, r3
 802146e:	2d00      	cmp	r5, #0
 8021470:	f000 812e 	beq.w	80216d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8021474:	1aed      	subs	r5, r5, r3
 8021476:	b2ad      	uxth	r5, r5
 8021478:	042b      	lsls	r3, r5, #16
 802147a:	d502      	bpl.n	8021482 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802147c:	1b64      	subs	r4, r4, r5
 802147e:	2500      	movs	r5, #0
 8021480:	b224      	sxth	r4, r4
 8021482:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021486:	a814      	add	r0, sp, #80	; 0x50
 8021488:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 802148c:	428c      	cmp	r4, r1
 802148e:	b28b      	uxth	r3, r1
 8021490:	bfbf      	itttt	lt
 8021492:	18ed      	addlt	r5, r5, r3
 8021494:	1b2c      	sublt	r4, r5, r4
 8021496:	b2a5      	uxthlt	r5, r4
 8021498:	460c      	movlt	r4, r1
 802149a:	8891      	ldrh	r1, [r2, #4]
 802149c:	440b      	add	r3, r1
 802149e:	4621      	mov	r1, r4
 80214a0:	b21b      	sxth	r3, r3
 80214a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80214a4:	88d3      	ldrh	r3, [r2, #6]
 80214a6:	8852      	ldrh	r2, [r2, #2]
 80214a8:	4413      	add	r3, r2
 80214aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80214ac:	b21b      	sxth	r3, r3
 80214ae:	930d      	str	r3, [sp, #52]	; 0x34
 80214b0:	4bbd      	ldr	r3, [pc, #756]	; (80217a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80214b2:	f893 b000 	ldrb.w	fp, [r3]
 80214b6:	f10b 3cff 	add.w	ip, fp, #4294967295
 80214ba:	f1dc 0300 	rsbs	r3, ip, #0
 80214be:	eb43 030c 	adc.w	r3, r3, ip
 80214c2:	930e      	str	r3, [sp, #56]	; 0x38
 80214c4:	4653      	mov	r3, sl
 80214c6:	f7f7 fc22 	bl	8018d0e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80214ca:	4621      	mov	r1, r4
 80214cc:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80214d0:	4653      	mov	r3, sl
 80214d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80214d4:	a814      	add	r0, sp, #80	; 0x50
 80214d6:	f7f7 fc37 	bl	8018d48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80214da:	a918      	add	r1, sp, #96	; 0x60
 80214dc:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80214e0:	a817      	add	r0, sp, #92	; 0x5c
 80214e2:	f7f7 fd5d 	bl	8018fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80214e6:	f1ba 0f00 	cmp.w	sl, #0
 80214ea:	f040 80f4 	bne.w	80216d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80214ee:	f1bb 0f01 	cmp.w	fp, #1
 80214f2:	f040 80f8 	bne.w	80216e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80214f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	f040 8145 	bne.w	8021788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80214fe:	b2ba      	uxth	r2, r7
 8021500:	b905      	cbnz	r5, 8021504 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8021502:	b16e      	cbz	r6, 8021520 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8021504:	fb06 5302 	mla	r3, r6, r2, r5
 8021508:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802150a:	4631      	mov	r1, r6
 802150c:	fb08 f303 	mul.w	r3, r8, r3
 8021510:	f003 0607 	and.w	r6, r3, #7
 8021514:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8021518:	9328      	str	r3, [sp, #160]	; 0xa0
 802151a:	eba9 0301 	sub.w	r3, r9, r1
 802151e:	930a      	str	r3, [sp, #40]	; 0x28
 8021520:	4651      	mov	r1, sl
 8021522:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021524:	f7ff ff1c 	bl	8021360 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8021528:	4681      	mov	r9, r0
 802152a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802152c:	f7ff ff42 	bl	80213b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8021530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021534:	4683      	mov	fp, r0
 8021536:	eba3 0a01 	sub.w	sl, r3, r1
 802153a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802153c:	459a      	cmp	sl, r3
 802153e:	bfa8      	it	ge
 8021540:	469a      	movge	sl, r3
 8021542:	f1ba 0f00 	cmp.w	sl, #0
 8021546:	f340 811a 	ble.w	802177e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802154a:	1b64      	subs	r4, r4, r5
 802154c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802154e:	1b1c      	subs	r4, r3, r4
 8021550:	42bc      	cmp	r4, r7
 8021552:	bfd4      	ite	le
 8021554:	ebc5 0504 	rsble	r5, r5, r4
 8021558:	ebc5 0507 	rsbgt	r5, r5, r7
 802155c:	2d00      	cmp	r5, #0
 802155e:	f340 810e 	ble.w	802177e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021562:	1b52      	subs	r2, r2, r5
 8021564:	fb08 f302 	mul.w	r3, r8, r2
 8021568:	930f      	str	r3, [sp, #60]	; 0x3c
 802156a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802156c:	2b00      	cmp	r3, #0
 802156e:	f040 8116 	bne.w	802179e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8021572:	4b8e      	ldr	r3, [pc, #568]	; (80217ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8021574:	6818      	ldr	r0, [r3, #0]
 8021576:	6803      	ldr	r3, [r0, #0]
 8021578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802157a:	4798      	blx	r3
 802157c:	2301      	movs	r3, #1
 802157e:	4a8c      	ldr	r2, [pc, #560]	; (80217b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8021580:	fa03 f308 	lsl.w	r3, r3, r8
 8021584:	8811      	ldrh	r1, [r2, #0]
 8021586:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 802158a:	3b01      	subs	r3, #1
 802158c:	b2db      	uxtb	r3, r3
 802158e:	930e      	str	r3, [sp, #56]	; 0x38
 8021590:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8021594:	fb01 2303 	mla	r3, r1, r3, r2
 8021598:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802159c:	930a      	str	r3, [sp, #40]	; 0x28
 802159e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80215a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80215a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80215a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80215a8:	0a19      	lsrs	r1, r3, #8
 80215aa:	b2cb      	uxtb	r3, r1
 80215ac:	9312      	str	r3, [sp, #72]	; 0x48
 80215ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80215b0:	b2db      	uxtb	r3, r3
 80215b2:	9311      	str	r3, [sp, #68]	; 0x44
 80215b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80215b6:	095a      	lsrs	r2, r3, #5
 80215b8:	4b7e      	ldr	r3, [pc, #504]	; (80217b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80215ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215be:	400b      	ands	r3, r1
 80215c0:	4313      	orrs	r3, r2
 80215c2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80215c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80215c8:	4313      	orrs	r3, r2
 80215ca:	b29b      	uxth	r3, r3
 80215cc:	9310      	str	r3, [sp, #64]	; 0x40
 80215ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80215d0:	781a      	ldrb	r2, [r3, #0]
 80215d2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80215d6:	fb05 b919 	mls	r9, r5, r9, fp
 80215da:	4132      	asrs	r2, r6
 80215dc:	fb03 fb05 	mul.w	fp, r3, r5
 80215e0:	930d      	str	r3, [sp, #52]	; 0x34
 80215e2:	b2d2      	uxtb	r2, r2
 80215e4:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80215e8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80215ec:	f0c0 80f5 	bcc.w	80217da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80215f0:	46ae      	mov	lr, r5
 80215f2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80215f6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80215fa:	f0c0 80dd 	bcc.w	80217b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80215fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021600:	4013      	ands	r3, r2
 8021602:	d055      	beq.n	80216b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8021604:	20ff      	movs	r0, #255	; 0xff
 8021606:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021608:	fb90 f1f1 	sdiv	r1, r0, r1
 802160c:	434b      	muls	r3, r1
 802160e:	2bfe      	cmp	r3, #254	; 0xfe
 8021610:	dd03      	ble.n	802161a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8021612:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021614:	4281      	cmp	r1, r0
 8021616:	f000 80c4 	beq.w	80217a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 802161a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802161c:	f8bc 4000 	ldrh.w	r4, [ip]
 8021620:	fb11 f303 	smulbb	r3, r1, r3
 8021624:	1220      	asrs	r0, r4, #8
 8021626:	b29b      	uxth	r3, r3
 8021628:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802162c:	1c59      	adds	r1, r3, #1
 802162e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8021632:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021636:	10e1      	asrs	r1, r4, #3
 8021638:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802163c:	00e4      	lsls	r4, r4, #3
 802163e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021642:	b29f      	uxth	r7, r3
 8021644:	43db      	mvns	r3, r3
 8021646:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802164a:	b2db      	uxtb	r3, r3
 802164c:	b2e4      	uxtb	r4, r4
 802164e:	9309      	str	r3, [sp, #36]	; 0x24
 8021650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021652:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021656:	fb13 f907 	smulbb	r9, r3, r7
 802165a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802165c:	fb00 9003 	mla	r0, r0, r3, r9
 8021660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021662:	fb13 f907 	smulbb	r9, r3, r7
 8021666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021668:	b280      	uxth	r0, r0
 802166a:	fb01 9103 	mla	r1, r1, r3, r9
 802166e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021670:	fb13 f707 	smulbb	r7, r3, r7
 8021674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021676:	b289      	uxth	r1, r1
 8021678:	fb04 7403 	mla	r4, r4, r3, r7
 802167c:	1c43      	adds	r3, r0, #1
 802167e:	b2a4      	uxth	r4, r4
 8021680:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021684:	f104 0901 	add.w	r9, r4, #1
 8021688:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802168c:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8021690:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8021694:	ea49 0000 	orr.w	r0, r9, r0
 8021698:	f101 0901 	add.w	r9, r1, #1
 802169c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80216a0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80216a4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80216a8:	ea40 0009 	orr.w	r0, r0, r9
 80216ac:	f8ac 0000 	strh.w	r0, [ip]
 80216b0:	4446      	add	r6, r8
 80216b2:	b2b6      	uxth	r6, r6
 80216b4:	2e07      	cmp	r6, #7
 80216b6:	bf89      	itett	hi
 80216b8:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80216ba:	fa42 f208 	asrls.w	r2, r2, r8
 80216be:	2600      	movhi	r6, #0
 80216c0:	785a      	ldrbhi	r2, [r3, #1]
 80216c2:	bf8a      	itet	hi
 80216c4:	3301      	addhi	r3, #1
 80216c6:	b2d2      	uxtbls	r2, r2
 80216c8:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80216ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216cc:	449c      	add	ip, r3
 80216ce:	e792      	b.n	80215f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80216d0:	441c      	add	r4, r3
 80216d2:	b224      	sxth	r4, r4
 80216d4:	e6d5      	b.n	8021482 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80216d6:	f1ba 0f01 	cmp.w	sl, #1
 80216da:	f47f af0c 	bne.w	80214f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80216de:	f1bb 0f01 	cmp.w	fp, #1
 80216e2:	f47f af08 	bne.w	80214f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80216e6:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80217ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 80216ea:	f8db 0000 	ldr.w	r0, [fp]
 80216ee:	6803      	ldr	r3, [r0, #0]
 80216f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216f2:	4798      	blx	r3
 80216f4:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80216f8:	465a      	mov	r2, fp
 80216fa:	d006      	beq.n	802170a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80216fc:	f1b8 0f04 	cmp.w	r8, #4
 8021700:	d140      	bne.n	8021784 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8021702:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021704:	3300      	adds	r3, #0
 8021706:	bf18      	it	ne
 8021708:	2301      	movne	r3, #1
 802170a:	0580      	lsls	r0, r0, #22
 802170c:	d56e      	bpl.n	80217ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 802170e:	f1b8 0f08 	cmp.w	r8, #8
 8021712:	d16b      	bne.n	80217ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8021714:	2b00      	cmp	r3, #0
 8021716:	bf0c      	ite	eq
 8021718:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802171c:	f44f 7180 	movne.w	r1, #256	; 0x100
 8021720:	2d00      	cmp	r5, #0
 8021722:	f47f aee8 	bne.w	80214f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021726:	2e00      	cmp	r6, #0
 8021728:	f47f aee5 	bne.w	80214f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802172c:	19e3      	adds	r3, r4, r7
 802172e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021730:	4283      	cmp	r3, r0
 8021732:	f73f aee0 	bgt.w	80214f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021738:	980d      	ldr	r0, [sp, #52]	; 0x34
 802173a:	444b      	add	r3, r9
 802173c:	4283      	cmp	r3, r0
 802173e:	f73f aeda 	bgt.w	80214f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021742:	b2bf      	uxth	r7, r7
 8021744:	f1b8 0f08 	cmp.w	r8, #8
 8021748:	6810      	ldr	r0, [r2, #0]
 802174a:	f04f 0500 	mov.w	r5, #0
 802174e:	bf18      	it	ne
 8021750:	3701      	addne	r7, #1
 8021752:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8021756:	6804      	ldr	r4, [r0, #0]
 8021758:	bf18      	it	ne
 802175a:	f027 0701 	bicne.w	r7, r7, #1
 802175e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8021762:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021766:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021768:	bf18      	it	ne
 802176a:	b2bf      	uxthne	r7, r7
 802176c:	9104      	str	r1, [sp, #16]
 802176e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021770:	e9cd 7900 	strd	r7, r9, [sp]
 8021774:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8021778:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802177a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802177c:	47a0      	blx	r4
 802177e:	b019      	add	sp, #100	; 0x64
 8021780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021784:	2300      	movs	r3, #0
 8021786:	e7c0      	b.n	802170a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8021788:	2208      	movs	r2, #8
 802178a:	fb92 f3f8 	sdiv	r3, r2, r8
 802178e:	1e5a      	subs	r2, r3, #1
 8021790:	443a      	add	r2, r7
 8021792:	fb92 f2f3 	sdiv	r2, r2, r3
 8021796:	fb12 f203 	smulbb	r2, r2, r3
 802179a:	b292      	uxth	r2, r2
 802179c:	e6b0      	b.n	8021500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 802179e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80217a0:	e6ec      	b.n	802157c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 80217a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80217a4:	e782      	b.n	80216ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 80217a6:	bf00      	nop
 80217a8:	20015030 	.word	0x20015030
 80217ac:	20015038 	.word	0x20015038
 80217b0:	20015032 	.word	0x20015032
 80217b4:	00fff800 	.word	0x00fff800
 80217b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80217ba:	b153      	cbz	r3, 80217d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80217bc:	441e      	add	r6, r3
 80217be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217c0:	b2b6      	uxth	r6, r6
 80217c2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80217c6:	f006 0607 	and.w	r6, r6, #7
 80217ca:	781a      	ldrb	r2, [r3, #0]
 80217cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80217ce:	4132      	asrs	r2, r6
 80217d0:	b2d2      	uxtb	r2, r2
 80217d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217d4:	445b      	add	r3, fp
 80217d6:	930a      	str	r3, [sp, #40]	; 0x28
 80217d8:	e706      	b.n	80215e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80217da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d1ce      	bne.n	802177e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80217e0:	4b05      	ldr	r3, [pc, #20]	; (80217f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80217e2:	6818      	ldr	r0, [r3, #0]
 80217e4:	6803      	ldr	r3, [r0, #0]
 80217e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217e8:	4798      	blx	r3
 80217ea:	e7c8      	b.n	802177e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	f43f ae82 	beq.w	80214f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80217f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80217f6:	e793      	b.n	8021720 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80217f8:	20015038 	.word	0x20015038

080217fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80217fc:	b538      	push	{r3, r4, r5, lr}
 80217fe:	4c15      	ldr	r4, [pc, #84]	; (8021854 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021800:	4605      	mov	r5, r0
 8021802:	7823      	ldrb	r3, [r4, #0]
 8021804:	f3bf 8f5b 	dmb	ish
 8021808:	07da      	lsls	r2, r3, #31
 802180a:	d40b      	bmi.n	8021824 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802180c:	4620      	mov	r0, r4
 802180e:	f007 fedd 	bl	80295cc <__cxa_guard_acquire>
 8021812:	b138      	cbz	r0, 8021824 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021814:	4620      	mov	r0, r4
 8021816:	f007 fee5 	bl	80295e4 <__cxa_guard_release>
 802181a:	4a0f      	ldr	r2, [pc, #60]	; (8021858 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802181c:	490f      	ldr	r1, [pc, #60]	; (802185c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802181e:	4810      	ldr	r0, [pc, #64]	; (8021860 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021820:	f007 fecd 	bl	80295be <__aeabi_atexit>
 8021824:	4c0f      	ldr	r4, [pc, #60]	; (8021864 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8021826:	7823      	ldrb	r3, [r4, #0]
 8021828:	f3bf 8f5b 	dmb	ish
 802182c:	07db      	lsls	r3, r3, #31
 802182e:	d40b      	bmi.n	8021848 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021830:	4620      	mov	r0, r4
 8021832:	f007 fecb 	bl	80295cc <__cxa_guard_acquire>
 8021836:	b138      	cbz	r0, 8021848 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021838:	4620      	mov	r0, r4
 802183a:	f007 fed3 	bl	80295e4 <__cxa_guard_release>
 802183e:	4a06      	ldr	r2, [pc, #24]	; (8021858 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021840:	4909      	ldr	r1, [pc, #36]	; (8021868 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8021842:	480a      	ldr	r0, [pc, #40]	; (802186c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021844:	f007 febb 	bl	80295be <__aeabi_atexit>
 8021848:	4b05      	ldr	r3, [pc, #20]	; (8021860 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802184a:	612b      	str	r3, [r5, #16]
 802184c:	4b07      	ldr	r3, [pc, #28]	; (802186c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802184e:	616b      	str	r3, [r5, #20]
 8021850:	bd38      	pop	{r3, r4, r5, pc}
 8021852:	bf00      	nop
 8021854:	20015110 	.word	0x20015110
 8021858:	20000000 	.word	0x20000000
 802185c:	0801e5e3 	.word	0x0801e5e3
 8021860:	20000090 	.word	0x20000090
 8021864:	20015114 	.word	0x20015114
 8021868:	0801e5e1 	.word	0x0801e5e1
 802186c:	20000094 	.word	0x20000094

08021870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021870:	b538      	push	{r3, r4, r5, lr}
 8021872:	4c15      	ldr	r4, [pc, #84]	; (80218c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8021874:	4605      	mov	r5, r0
 8021876:	7823      	ldrb	r3, [r4, #0]
 8021878:	f3bf 8f5b 	dmb	ish
 802187c:	07da      	lsls	r2, r3, #31
 802187e:	d40b      	bmi.n	8021898 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021880:	4620      	mov	r0, r4
 8021882:	f007 fea3 	bl	80295cc <__cxa_guard_acquire>
 8021886:	b138      	cbz	r0, 8021898 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021888:	4620      	mov	r0, r4
 802188a:	f007 feab 	bl	80295e4 <__cxa_guard_release>
 802188e:	4a0f      	ldr	r2, [pc, #60]	; (80218cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021890:	490f      	ldr	r1, [pc, #60]	; (80218d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8021892:	4810      	ldr	r0, [pc, #64]	; (80218d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021894:	f007 fe93 	bl	80295be <__aeabi_atexit>
 8021898:	4c0f      	ldr	r4, [pc, #60]	; (80218d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802189a:	7823      	ldrb	r3, [r4, #0]
 802189c:	f3bf 8f5b 	dmb	ish
 80218a0:	07db      	lsls	r3, r3, #31
 80218a2:	d40b      	bmi.n	80218bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80218a4:	4620      	mov	r0, r4
 80218a6:	f007 fe91 	bl	80295cc <__cxa_guard_acquire>
 80218aa:	b138      	cbz	r0, 80218bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80218ac:	4620      	mov	r0, r4
 80218ae:	f007 fe99 	bl	80295e4 <__cxa_guard_release>
 80218b2:	4a06      	ldr	r2, [pc, #24]	; (80218cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80218b4:	4909      	ldr	r1, [pc, #36]	; (80218dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80218b6:	480a      	ldr	r0, [pc, #40]	; (80218e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80218b8:	f007 fe81 	bl	80295be <__aeabi_atexit>
 80218bc:	4b05      	ldr	r3, [pc, #20]	; (80218d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80218be:	60ab      	str	r3, [r5, #8]
 80218c0:	4b07      	ldr	r3, [pc, #28]	; (80218e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80218c2:	60eb      	str	r3, [r5, #12]
 80218c4:	bd38      	pop	{r3, r4, r5, pc}
 80218c6:	bf00      	nop
 80218c8:	200150e8 	.word	0x200150e8
 80218cc:	20000000 	.word	0x20000000
 80218d0:	0801e5e7 	.word	0x0801e5e7
 80218d4:	20000068 	.word	0x20000068
 80218d8:	200150ec 	.word	0x200150ec
 80218dc:	0801e5e5 	.word	0x0801e5e5
 80218e0:	2000006c 	.word	0x2000006c

080218e4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80218e4:	b510      	push	{r4, lr}
 80218e6:	4604      	mov	r4, r0
 80218e8:	f7ff ff88 	bl	80217fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80218ec:	4620      	mov	r0, r4
 80218ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218f2:	f7ff bfbd 	b.w	8021870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080218f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80218f8:	b538      	push	{r3, r4, r5, lr}
 80218fa:	4c15      	ldr	r4, [pc, #84]	; (8021950 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80218fc:	4605      	mov	r5, r0
 80218fe:	7823      	ldrb	r3, [r4, #0]
 8021900:	f3bf 8f5b 	dmb	ish
 8021904:	07da      	lsls	r2, r3, #31
 8021906:	d40b      	bmi.n	8021920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021908:	4620      	mov	r0, r4
 802190a:	f007 fe5f 	bl	80295cc <__cxa_guard_acquire>
 802190e:	b138      	cbz	r0, 8021920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021910:	4620      	mov	r0, r4
 8021912:	f007 fe67 	bl	80295e4 <__cxa_guard_release>
 8021916:	4a0f      	ldr	r2, [pc, #60]	; (8021954 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021918:	490f      	ldr	r1, [pc, #60]	; (8021958 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802191a:	4810      	ldr	r0, [pc, #64]	; (802195c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802191c:	f007 fe4f 	bl	80295be <__aeabi_atexit>
 8021920:	4c0f      	ldr	r4, [pc, #60]	; (8021960 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021922:	7823      	ldrb	r3, [r4, #0]
 8021924:	f3bf 8f5b 	dmb	ish
 8021928:	07db      	lsls	r3, r3, #31
 802192a:	d40b      	bmi.n	8021944 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802192c:	4620      	mov	r0, r4
 802192e:	f007 fe4d 	bl	80295cc <__cxa_guard_acquire>
 8021932:	b138      	cbz	r0, 8021944 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021934:	4620      	mov	r0, r4
 8021936:	f007 fe55 	bl	80295e4 <__cxa_guard_release>
 802193a:	4a06      	ldr	r2, [pc, #24]	; (8021954 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802193c:	4909      	ldr	r1, [pc, #36]	; (8021964 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802193e:	480a      	ldr	r0, [pc, #40]	; (8021968 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021940:	f007 fe3d 	bl	80295be <__aeabi_atexit>
 8021944:	4b05      	ldr	r3, [pc, #20]	; (802195c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021946:	622b      	str	r3, [r5, #32]
 8021948:	4b07      	ldr	r3, [pc, #28]	; (8021968 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802194a:	626b      	str	r3, [r5, #36]	; 0x24
 802194c:	bd38      	pop	{r3, r4, r5, pc}
 802194e:	bf00      	nop
 8021950:	20015118 	.word	0x20015118
 8021954:	20000000 	.word	0x20000000
 8021958:	0801e5db 	.word	0x0801e5db
 802195c:	20000098 	.word	0x20000098
 8021960:	2001511c 	.word	0x2001511c
 8021964:	0801e5d9 	.word	0x0801e5d9
 8021968:	2000009c 	.word	0x2000009c

0802196c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 802196c:	b538      	push	{r3, r4, r5, lr}
 802196e:	4c15      	ldr	r4, [pc, #84]	; (80219c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021970:	4605      	mov	r5, r0
 8021972:	7823      	ldrb	r3, [r4, #0]
 8021974:	f3bf 8f5b 	dmb	ish
 8021978:	07da      	lsls	r2, r3, #31
 802197a:	d40b      	bmi.n	8021994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802197c:	4620      	mov	r0, r4
 802197e:	f007 fe25 	bl	80295cc <__cxa_guard_acquire>
 8021982:	b138      	cbz	r0, 8021994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021984:	4620      	mov	r0, r4
 8021986:	f007 fe2d 	bl	80295e4 <__cxa_guard_release>
 802198a:	4a0f      	ldr	r2, [pc, #60]	; (80219c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802198c:	490f      	ldr	r1, [pc, #60]	; (80219cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802198e:	4810      	ldr	r0, [pc, #64]	; (80219d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021990:	f007 fe15 	bl	80295be <__aeabi_atexit>
 8021994:	4c0f      	ldr	r4, [pc, #60]	; (80219d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021996:	7823      	ldrb	r3, [r4, #0]
 8021998:	f3bf 8f5b 	dmb	ish
 802199c:	07db      	lsls	r3, r3, #31
 802199e:	d40b      	bmi.n	80219b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80219a0:	4620      	mov	r0, r4
 80219a2:	f007 fe13 	bl	80295cc <__cxa_guard_acquire>
 80219a6:	b138      	cbz	r0, 80219b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80219a8:	4620      	mov	r0, r4
 80219aa:	f007 fe1b 	bl	80295e4 <__cxa_guard_release>
 80219ae:	4a06      	ldr	r2, [pc, #24]	; (80219c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80219b0:	4909      	ldr	r1, [pc, #36]	; (80219d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80219b2:	480a      	ldr	r0, [pc, #40]	; (80219dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80219b4:	f007 fe03 	bl	80295be <__aeabi_atexit>
 80219b8:	4b05      	ldr	r3, [pc, #20]	; (80219d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80219ba:	61ab      	str	r3, [r5, #24]
 80219bc:	4b07      	ldr	r3, [pc, #28]	; (80219dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80219be:	61eb      	str	r3, [r5, #28]
 80219c0:	bd38      	pop	{r3, r4, r5, pc}
 80219c2:	bf00      	nop
 80219c4:	200150f0 	.word	0x200150f0
 80219c8:	20000000 	.word	0x20000000
 80219cc:	0801e5df 	.word	0x0801e5df
 80219d0:	20000070 	.word	0x20000070
 80219d4:	200150f4 	.word	0x200150f4
 80219d8:	0801e5dd 	.word	0x0801e5dd
 80219dc:	20000074 	.word	0x20000074

080219e0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80219e0:	b510      	push	{r4, lr}
 80219e2:	4604      	mov	r4, r0
 80219e4:	f7ff ff88 	bl	80218f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80219e8:	4620      	mov	r0, r4
 80219ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219ee:	f7ff bfbd 	b.w	802196c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080219f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80219f4:	b538      	push	{r3, r4, r5, lr}
 80219f6:	4c15      	ldr	r4, [pc, #84]	; (8021a4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80219f8:	4605      	mov	r5, r0
 80219fa:	7823      	ldrb	r3, [r4, #0]
 80219fc:	f3bf 8f5b 	dmb	ish
 8021a00:	07da      	lsls	r2, r3, #31
 8021a02:	d40b      	bmi.n	8021a1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021a04:	4620      	mov	r0, r4
 8021a06:	f007 fde1 	bl	80295cc <__cxa_guard_acquire>
 8021a0a:	b138      	cbz	r0, 8021a1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	f007 fde9 	bl	80295e4 <__cxa_guard_release>
 8021a12:	4a0f      	ldr	r2, [pc, #60]	; (8021a50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021a14:	490f      	ldr	r1, [pc, #60]	; (8021a54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021a16:	4810      	ldr	r0, [pc, #64]	; (8021a58 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021a18:	f007 fdd1 	bl	80295be <__aeabi_atexit>
 8021a1c:	4c0f      	ldr	r4, [pc, #60]	; (8021a5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021a1e:	7823      	ldrb	r3, [r4, #0]
 8021a20:	f3bf 8f5b 	dmb	ish
 8021a24:	07db      	lsls	r3, r3, #31
 8021a26:	d40b      	bmi.n	8021a40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021a28:	4620      	mov	r0, r4
 8021a2a:	f007 fdcf 	bl	80295cc <__cxa_guard_acquire>
 8021a2e:	b138      	cbz	r0, 8021a40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021a30:	4620      	mov	r0, r4
 8021a32:	f007 fdd7 	bl	80295e4 <__cxa_guard_release>
 8021a36:	4a06      	ldr	r2, [pc, #24]	; (8021a50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021a38:	4909      	ldr	r1, [pc, #36]	; (8021a60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021a3a:	480a      	ldr	r0, [pc, #40]	; (8021a64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021a3c:	f007 fdbf 	bl	80295be <__aeabi_atexit>
 8021a40:	4b05      	ldr	r3, [pc, #20]	; (8021a58 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021a42:	632b      	str	r3, [r5, #48]	; 0x30
 8021a44:	4b07      	ldr	r3, [pc, #28]	; (8021a64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021a46:	636b      	str	r3, [r5, #52]	; 0x34
 8021a48:	bd38      	pop	{r3, r4, r5, pc}
 8021a4a:	bf00      	nop
 8021a4c:	20015128 	.word	0x20015128
 8021a50:	20000000 	.word	0x20000000
 8021a54:	0801e5d3 	.word	0x0801e5d3
 8021a58:	200000a8 	.word	0x200000a8
 8021a5c:	2001512c 	.word	0x2001512c
 8021a60:	0801e5d1 	.word	0x0801e5d1
 8021a64:	200000ac 	.word	0x200000ac

08021a68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021a68:	b538      	push	{r3, r4, r5, lr}
 8021a6a:	4c15      	ldr	r4, [pc, #84]	; (8021ac0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021a6c:	4605      	mov	r5, r0
 8021a6e:	7823      	ldrb	r3, [r4, #0]
 8021a70:	f3bf 8f5b 	dmb	ish
 8021a74:	07da      	lsls	r2, r3, #31
 8021a76:	d40b      	bmi.n	8021a90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021a78:	4620      	mov	r0, r4
 8021a7a:	f007 fda7 	bl	80295cc <__cxa_guard_acquire>
 8021a7e:	b138      	cbz	r0, 8021a90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021a80:	4620      	mov	r0, r4
 8021a82:	f007 fdaf 	bl	80295e4 <__cxa_guard_release>
 8021a86:	4a0f      	ldr	r2, [pc, #60]	; (8021ac4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021a88:	490f      	ldr	r1, [pc, #60]	; (8021ac8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021a8a:	4810      	ldr	r0, [pc, #64]	; (8021acc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021a8c:	f007 fd97 	bl	80295be <__aeabi_atexit>
 8021a90:	4c0f      	ldr	r4, [pc, #60]	; (8021ad0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021a92:	7823      	ldrb	r3, [r4, #0]
 8021a94:	f3bf 8f5b 	dmb	ish
 8021a98:	07db      	lsls	r3, r3, #31
 8021a9a:	d40b      	bmi.n	8021ab4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021a9c:	4620      	mov	r0, r4
 8021a9e:	f007 fd95 	bl	80295cc <__cxa_guard_acquire>
 8021aa2:	b138      	cbz	r0, 8021ab4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021aa4:	4620      	mov	r0, r4
 8021aa6:	f007 fd9d 	bl	80295e4 <__cxa_guard_release>
 8021aaa:	4a06      	ldr	r2, [pc, #24]	; (8021ac4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021aac:	4909      	ldr	r1, [pc, #36]	; (8021ad4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021aae:	480a      	ldr	r0, [pc, #40]	; (8021ad8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021ab0:	f007 fd85 	bl	80295be <__aeabi_atexit>
 8021ab4:	4b05      	ldr	r3, [pc, #20]	; (8021acc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021ab6:	62ab      	str	r3, [r5, #40]	; 0x28
 8021ab8:	4b07      	ldr	r3, [pc, #28]	; (8021ad8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021aba:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021abc:	bd38      	pop	{r3, r4, r5, pc}
 8021abe:	bf00      	nop
 8021ac0:	200150f8 	.word	0x200150f8
 8021ac4:	20000000 	.word	0x20000000
 8021ac8:	0801e5d7 	.word	0x0801e5d7
 8021acc:	20000078 	.word	0x20000078
 8021ad0:	200150fc 	.word	0x200150fc
 8021ad4:	0801e5d5 	.word	0x0801e5d5
 8021ad8:	2000007c 	.word	0x2000007c

08021adc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021adc:	b510      	push	{r4, lr}
 8021ade:	4604      	mov	r4, r0
 8021ae0:	f7ff ff88 	bl	80219f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021ae4:	4620      	mov	r0, r4
 8021ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021aea:	f7ff bfbd 	b.w	8021a68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021af0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021af0:	b538      	push	{r3, r4, r5, lr}
 8021af2:	4c15      	ldr	r4, [pc, #84]	; (8021b48 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021af4:	4605      	mov	r5, r0
 8021af6:	7823      	ldrb	r3, [r4, #0]
 8021af8:	f3bf 8f5b 	dmb	ish
 8021afc:	07da      	lsls	r2, r3, #31
 8021afe:	d40b      	bmi.n	8021b18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021b00:	4620      	mov	r0, r4
 8021b02:	f007 fd63 	bl	80295cc <__cxa_guard_acquire>
 8021b06:	b138      	cbz	r0, 8021b18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021b08:	4620      	mov	r0, r4
 8021b0a:	f007 fd6b 	bl	80295e4 <__cxa_guard_release>
 8021b0e:	4a0f      	ldr	r2, [pc, #60]	; (8021b4c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021b10:	490f      	ldr	r1, [pc, #60]	; (8021b50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021b12:	4810      	ldr	r0, [pc, #64]	; (8021b54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021b14:	f007 fd53 	bl	80295be <__aeabi_atexit>
 8021b18:	4c0f      	ldr	r4, [pc, #60]	; (8021b58 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8021b1a:	7823      	ldrb	r3, [r4, #0]
 8021b1c:	f3bf 8f5b 	dmb	ish
 8021b20:	07db      	lsls	r3, r3, #31
 8021b22:	d40b      	bmi.n	8021b3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021b24:	4620      	mov	r0, r4
 8021b26:	f007 fd51 	bl	80295cc <__cxa_guard_acquire>
 8021b2a:	b138      	cbz	r0, 8021b3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021b2c:	4620      	mov	r0, r4
 8021b2e:	f007 fd59 	bl	80295e4 <__cxa_guard_release>
 8021b32:	4a06      	ldr	r2, [pc, #24]	; (8021b4c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021b34:	4909      	ldr	r1, [pc, #36]	; (8021b5c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021b36:	480a      	ldr	r0, [pc, #40]	; (8021b60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021b38:	f007 fd41 	bl	80295be <__aeabi_atexit>
 8021b3c:	4b05      	ldr	r3, [pc, #20]	; (8021b54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021b3e:	652b      	str	r3, [r5, #80]	; 0x50
 8021b40:	4b07      	ldr	r3, [pc, #28]	; (8021b60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021b42:	656b      	str	r3, [r5, #84]	; 0x54
 8021b44:	bd38      	pop	{r3, r4, r5, pc}
 8021b46:	bf00      	nop
 8021b48:	20015130 	.word	0x20015130
 8021b4c:	20000000 	.word	0x20000000
 8021b50:	0801e5c3 	.word	0x0801e5c3
 8021b54:	200000b0 	.word	0x200000b0
 8021b58:	20015134 	.word	0x20015134
 8021b5c:	0801e5c1 	.word	0x0801e5c1
 8021b60:	200000b4 	.word	0x200000b4

08021b64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021b64:	b538      	push	{r3, r4, r5, lr}
 8021b66:	4c15      	ldr	r4, [pc, #84]	; (8021bbc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021b68:	4605      	mov	r5, r0
 8021b6a:	7823      	ldrb	r3, [r4, #0]
 8021b6c:	f3bf 8f5b 	dmb	ish
 8021b70:	07da      	lsls	r2, r3, #31
 8021b72:	d40b      	bmi.n	8021b8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021b74:	4620      	mov	r0, r4
 8021b76:	f007 fd29 	bl	80295cc <__cxa_guard_acquire>
 8021b7a:	b138      	cbz	r0, 8021b8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021b7c:	4620      	mov	r0, r4
 8021b7e:	f007 fd31 	bl	80295e4 <__cxa_guard_release>
 8021b82:	4a0f      	ldr	r2, [pc, #60]	; (8021bc0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021b84:	490f      	ldr	r1, [pc, #60]	; (8021bc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8021b86:	4810      	ldr	r0, [pc, #64]	; (8021bc8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021b88:	f007 fd19 	bl	80295be <__aeabi_atexit>
 8021b8c:	4c0f      	ldr	r4, [pc, #60]	; (8021bcc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8021b8e:	7823      	ldrb	r3, [r4, #0]
 8021b90:	f3bf 8f5b 	dmb	ish
 8021b94:	07db      	lsls	r3, r3, #31
 8021b96:	d40b      	bmi.n	8021bb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021b98:	4620      	mov	r0, r4
 8021b9a:	f007 fd17 	bl	80295cc <__cxa_guard_acquire>
 8021b9e:	b138      	cbz	r0, 8021bb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f007 fd1f 	bl	80295e4 <__cxa_guard_release>
 8021ba6:	4a06      	ldr	r2, [pc, #24]	; (8021bc0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021ba8:	4909      	ldr	r1, [pc, #36]	; (8021bd0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8021baa:	480a      	ldr	r0, [pc, #40]	; (8021bd4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021bac:	f007 fd07 	bl	80295be <__aeabi_atexit>
 8021bb0:	4b05      	ldr	r3, [pc, #20]	; (8021bc8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021bb2:	64ab      	str	r3, [r5, #72]	; 0x48
 8021bb4:	4b07      	ldr	r3, [pc, #28]	; (8021bd4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021bb6:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021bb8:	bd38      	pop	{r3, r4, r5, pc}
 8021bba:	bf00      	nop
 8021bbc:	20015138 	.word	0x20015138
 8021bc0:	20000000 	.word	0x20000000
 8021bc4:	0801e5c7 	.word	0x0801e5c7
 8021bc8:	200000b8 	.word	0x200000b8
 8021bcc:	2001513c 	.word	0x2001513c
 8021bd0:	0801e5c5 	.word	0x0801e5c5
 8021bd4:	200000bc 	.word	0x200000bc

08021bd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8021bd8:	b538      	push	{r3, r4, r5, lr}
 8021bda:	4c15      	ldr	r4, [pc, #84]	; (8021c30 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8021bdc:	4605      	mov	r5, r0
 8021bde:	7823      	ldrb	r3, [r4, #0]
 8021be0:	f3bf 8f5b 	dmb	ish
 8021be4:	07da      	lsls	r2, r3, #31
 8021be6:	d40b      	bmi.n	8021c00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021be8:	4620      	mov	r0, r4
 8021bea:	f007 fcef 	bl	80295cc <__cxa_guard_acquire>
 8021bee:	b138      	cbz	r0, 8021c00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021bf0:	4620      	mov	r0, r4
 8021bf2:	f007 fcf7 	bl	80295e4 <__cxa_guard_release>
 8021bf6:	4a0f      	ldr	r2, [pc, #60]	; (8021c34 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021bf8:	490f      	ldr	r1, [pc, #60]	; (8021c38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8021bfa:	4810      	ldr	r0, [pc, #64]	; (8021c3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021bfc:	f007 fcdf 	bl	80295be <__aeabi_atexit>
 8021c00:	4c0f      	ldr	r4, [pc, #60]	; (8021c40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021c02:	7823      	ldrb	r3, [r4, #0]
 8021c04:	f3bf 8f5b 	dmb	ish
 8021c08:	07db      	lsls	r3, r3, #31
 8021c0a:	d40b      	bmi.n	8021c24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021c0c:	4620      	mov	r0, r4
 8021c0e:	f007 fcdd 	bl	80295cc <__cxa_guard_acquire>
 8021c12:	b138      	cbz	r0, 8021c24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021c14:	4620      	mov	r0, r4
 8021c16:	f007 fce5 	bl	80295e4 <__cxa_guard_release>
 8021c1a:	4a06      	ldr	r2, [pc, #24]	; (8021c34 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021c1c:	4909      	ldr	r1, [pc, #36]	; (8021c44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021c1e:	480a      	ldr	r0, [pc, #40]	; (8021c48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021c20:	f007 fccd 	bl	80295be <__aeabi_atexit>
 8021c24:	4b05      	ldr	r3, [pc, #20]	; (8021c3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021c26:	642b      	str	r3, [r5, #64]	; 0x40
 8021c28:	4b07      	ldr	r3, [pc, #28]	; (8021c48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021c2a:	646b      	str	r3, [r5, #68]	; 0x44
 8021c2c:	bd38      	pop	{r3, r4, r5, pc}
 8021c2e:	bf00      	nop
 8021c30:	20015100 	.word	0x20015100
 8021c34:	20000000 	.word	0x20000000
 8021c38:	0801e5cb 	.word	0x0801e5cb
 8021c3c:	20000080 	.word	0x20000080
 8021c40:	20015104 	.word	0x20015104
 8021c44:	0801e5c9 	.word	0x0801e5c9
 8021c48:	20000084 	.word	0x20000084

08021c4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021c4c:	b538      	push	{r3, r4, r5, lr}
 8021c4e:	4c15      	ldr	r4, [pc, #84]	; (8021ca4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021c50:	4605      	mov	r5, r0
 8021c52:	7823      	ldrb	r3, [r4, #0]
 8021c54:	f3bf 8f5b 	dmb	ish
 8021c58:	07da      	lsls	r2, r3, #31
 8021c5a:	d40b      	bmi.n	8021c74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021c5c:	4620      	mov	r0, r4
 8021c5e:	f007 fcb5 	bl	80295cc <__cxa_guard_acquire>
 8021c62:	b138      	cbz	r0, 8021c74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021c64:	4620      	mov	r0, r4
 8021c66:	f007 fcbd 	bl	80295e4 <__cxa_guard_release>
 8021c6a:	4a0f      	ldr	r2, [pc, #60]	; (8021ca8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021c6c:	490f      	ldr	r1, [pc, #60]	; (8021cac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8021c6e:	4810      	ldr	r0, [pc, #64]	; (8021cb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021c70:	f007 fca5 	bl	80295be <__aeabi_atexit>
 8021c74:	4c0f      	ldr	r4, [pc, #60]	; (8021cb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8021c76:	7823      	ldrb	r3, [r4, #0]
 8021c78:	f3bf 8f5b 	dmb	ish
 8021c7c:	07db      	lsls	r3, r3, #31
 8021c7e:	d40b      	bmi.n	8021c98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021c80:	4620      	mov	r0, r4
 8021c82:	f007 fca3 	bl	80295cc <__cxa_guard_acquire>
 8021c86:	b138      	cbz	r0, 8021c98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021c88:	4620      	mov	r0, r4
 8021c8a:	f007 fcab 	bl	80295e4 <__cxa_guard_release>
 8021c8e:	4a06      	ldr	r2, [pc, #24]	; (8021ca8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021c90:	4909      	ldr	r1, [pc, #36]	; (8021cb8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8021c92:	480a      	ldr	r0, [pc, #40]	; (8021cbc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021c94:	f007 fc93 	bl	80295be <__aeabi_atexit>
 8021c98:	4b05      	ldr	r3, [pc, #20]	; (8021cb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021c9a:	63ab      	str	r3, [r5, #56]	; 0x38
 8021c9c:	4b07      	ldr	r3, [pc, #28]	; (8021cbc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021c9e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021ca0:	bd38      	pop	{r3, r4, r5, pc}
 8021ca2:	bf00      	nop
 8021ca4:	20015120 	.word	0x20015120
 8021ca8:	20000000 	.word	0x20000000
 8021cac:	0801e5cf 	.word	0x0801e5cf
 8021cb0:	200000a0 	.word	0x200000a0
 8021cb4:	20015124 	.word	0x20015124
 8021cb8:	0801e5cd 	.word	0x0801e5cd
 8021cbc:	200000a4 	.word	0x200000a4

08021cc0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8021cc0:	b510      	push	{r4, lr}
 8021cc2:	4604      	mov	r4, r0
 8021cc4:	f7ff ff14 	bl	8021af0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8021cc8:	4620      	mov	r0, r4
 8021cca:	f7ff ff85 	bl	8021bd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8021cce:	4620      	mov	r0, r4
 8021cd0:	f7ff ff48 	bl	8021b64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021cd4:	4620      	mov	r0, r4
 8021cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021cda:	f7ff bfb7 	b.w	8021c4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08021ce0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021ce0:	b538      	push	{r3, r4, r5, lr}
 8021ce2:	4c15      	ldr	r4, [pc, #84]	; (8021d38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021ce4:	4605      	mov	r5, r0
 8021ce6:	7823      	ldrb	r3, [r4, #0]
 8021ce8:	f3bf 8f5b 	dmb	ish
 8021cec:	07da      	lsls	r2, r3, #31
 8021cee:	d40b      	bmi.n	8021d08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021cf0:	4620      	mov	r0, r4
 8021cf2:	f007 fc6b 	bl	80295cc <__cxa_guard_acquire>
 8021cf6:	b138      	cbz	r0, 8021d08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021cf8:	4620      	mov	r0, r4
 8021cfa:	f007 fc73 	bl	80295e4 <__cxa_guard_release>
 8021cfe:	4a0f      	ldr	r2, [pc, #60]	; (8021d3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021d00:	490f      	ldr	r1, [pc, #60]	; (8021d40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021d02:	4810      	ldr	r0, [pc, #64]	; (8021d44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021d04:	f007 fc5b 	bl	80295be <__aeabi_atexit>
 8021d08:	4c0f      	ldr	r4, [pc, #60]	; (8021d48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021d0a:	7823      	ldrb	r3, [r4, #0]
 8021d0c:	f3bf 8f5b 	dmb	ish
 8021d10:	07db      	lsls	r3, r3, #31
 8021d12:	d40b      	bmi.n	8021d2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021d14:	4620      	mov	r0, r4
 8021d16:	f007 fc59 	bl	80295cc <__cxa_guard_acquire>
 8021d1a:	b138      	cbz	r0, 8021d2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021d1c:	4620      	mov	r0, r4
 8021d1e:	f007 fc61 	bl	80295e4 <__cxa_guard_release>
 8021d22:	4a06      	ldr	r2, [pc, #24]	; (8021d3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021d24:	4909      	ldr	r1, [pc, #36]	; (8021d4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021d26:	480a      	ldr	r0, [pc, #40]	; (8021d50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021d28:	f007 fc49 	bl	80295be <__aeabi_atexit>
 8021d2c:	4b05      	ldr	r3, [pc, #20]	; (8021d44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021d2e:	662b      	str	r3, [r5, #96]	; 0x60
 8021d30:	4b07      	ldr	r3, [pc, #28]	; (8021d50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021d32:	666b      	str	r3, [r5, #100]	; 0x64
 8021d34:	bd38      	pop	{r3, r4, r5, pc}
 8021d36:	bf00      	nop
 8021d38:	20015108 	.word	0x20015108
 8021d3c:	20000000 	.word	0x20000000
 8021d40:	0801e5bb 	.word	0x0801e5bb
 8021d44:	20000088 	.word	0x20000088
 8021d48:	2001510c 	.word	0x2001510c
 8021d4c:	0801e5b9 	.word	0x0801e5b9
 8021d50:	2000008c 	.word	0x2000008c

08021d54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021d54:	b538      	push	{r3, r4, r5, lr}
 8021d56:	4c15      	ldr	r4, [pc, #84]	; (8021dac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021d58:	4605      	mov	r5, r0
 8021d5a:	7823      	ldrb	r3, [r4, #0]
 8021d5c:	f3bf 8f5b 	dmb	ish
 8021d60:	07da      	lsls	r2, r3, #31
 8021d62:	d40b      	bmi.n	8021d7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021d64:	4620      	mov	r0, r4
 8021d66:	f007 fc31 	bl	80295cc <__cxa_guard_acquire>
 8021d6a:	b138      	cbz	r0, 8021d7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021d6c:	4620      	mov	r0, r4
 8021d6e:	f007 fc39 	bl	80295e4 <__cxa_guard_release>
 8021d72:	4a0f      	ldr	r2, [pc, #60]	; (8021db0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021d74:	490f      	ldr	r1, [pc, #60]	; (8021db4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021d76:	4810      	ldr	r0, [pc, #64]	; (8021db8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021d78:	f007 fc21 	bl	80295be <__aeabi_atexit>
 8021d7c:	4c0f      	ldr	r4, [pc, #60]	; (8021dbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021d7e:	7823      	ldrb	r3, [r4, #0]
 8021d80:	f3bf 8f5b 	dmb	ish
 8021d84:	07db      	lsls	r3, r3, #31
 8021d86:	d40b      	bmi.n	8021da0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021d88:	4620      	mov	r0, r4
 8021d8a:	f007 fc1f 	bl	80295cc <__cxa_guard_acquire>
 8021d8e:	b138      	cbz	r0, 8021da0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021d90:	4620      	mov	r0, r4
 8021d92:	f007 fc27 	bl	80295e4 <__cxa_guard_release>
 8021d96:	4a06      	ldr	r2, [pc, #24]	; (8021db0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021d98:	4909      	ldr	r1, [pc, #36]	; (8021dc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021d9a:	480a      	ldr	r0, [pc, #40]	; (8021dc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021d9c:	f007 fc0f 	bl	80295be <__aeabi_atexit>
 8021da0:	4b05      	ldr	r3, [pc, #20]	; (8021db8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021da2:	65ab      	str	r3, [r5, #88]	; 0x58
 8021da4:	4b07      	ldr	r3, [pc, #28]	; (8021dc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021da6:	65eb      	str	r3, [r5, #92]	; 0x5c
 8021da8:	bd38      	pop	{r3, r4, r5, pc}
 8021daa:	bf00      	nop
 8021dac:	200150e0 	.word	0x200150e0
 8021db0:	20000000 	.word	0x20000000
 8021db4:	0801e5bf 	.word	0x0801e5bf
 8021db8:	20000060 	.word	0x20000060
 8021dbc:	200150e4 	.word	0x200150e4
 8021dc0:	0801e5bd 	.word	0x0801e5bd
 8021dc4:	20000064 	.word	0x20000064

08021dc8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8021dc8:	b510      	push	{r4, lr}
 8021dca:	4604      	mov	r4, r0
 8021dcc:	f7ff ff88 	bl	8021ce0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021dd0:	4620      	mov	r0, r4
 8021dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021dd6:	f7ff bfbd 	b.w	8021d54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021ddc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021ddc:	b538      	push	{r3, r4, r5, lr}
 8021dde:	4c15      	ldr	r4, [pc, #84]	; (8021e34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021de0:	4605      	mov	r5, r0
 8021de2:	7823      	ldrb	r3, [r4, #0]
 8021de4:	f3bf 8f5b 	dmb	ish
 8021de8:	07da      	lsls	r2, r3, #31
 8021dea:	d40b      	bmi.n	8021e04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021dec:	4620      	mov	r0, r4
 8021dee:	f007 fbed 	bl	80295cc <__cxa_guard_acquire>
 8021df2:	b138      	cbz	r0, 8021e04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021df4:	4620      	mov	r0, r4
 8021df6:	f007 fbf5 	bl	80295e4 <__cxa_guard_release>
 8021dfa:	4a0f      	ldr	r2, [pc, #60]	; (8021e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021dfc:	490f      	ldr	r1, [pc, #60]	; (8021e3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021dfe:	4810      	ldr	r0, [pc, #64]	; (8021e40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021e00:	f007 fbdd 	bl	80295be <__aeabi_atexit>
 8021e04:	4c0f      	ldr	r4, [pc, #60]	; (8021e44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021e06:	7823      	ldrb	r3, [r4, #0]
 8021e08:	f3bf 8f5b 	dmb	ish
 8021e0c:	07db      	lsls	r3, r3, #31
 8021e0e:	d40b      	bmi.n	8021e28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021e10:	4620      	mov	r0, r4
 8021e12:	f007 fbdb 	bl	80295cc <__cxa_guard_acquire>
 8021e16:	b138      	cbz	r0, 8021e28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021e18:	4620      	mov	r0, r4
 8021e1a:	f007 fbe3 	bl	80295e4 <__cxa_guard_release>
 8021e1e:	4a06      	ldr	r2, [pc, #24]	; (8021e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021e20:	4909      	ldr	r1, [pc, #36]	; (8021e48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021e22:	480a      	ldr	r0, [pc, #40]	; (8021e4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021e24:	f007 fbcb 	bl	80295be <__aeabi_atexit>
 8021e28:	4b05      	ldr	r3, [pc, #20]	; (8021e40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021e2a:	672b      	str	r3, [r5, #112]	; 0x70
 8021e2c:	4b07      	ldr	r3, [pc, #28]	; (8021e4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021e2e:	676b      	str	r3, [r5, #116]	; 0x74
 8021e30:	bd38      	pop	{r3, r4, r5, pc}
 8021e32:	bf00      	nop
 8021e34:	200150d8 	.word	0x200150d8
 8021e38:	20000000 	.word	0x20000000
 8021e3c:	0801e5b3 	.word	0x0801e5b3
 8021e40:	20000058 	.word	0x20000058
 8021e44:	200150dc 	.word	0x200150dc
 8021e48:	0801e5b1 	.word	0x0801e5b1
 8021e4c:	2000005c 	.word	0x2000005c

08021e50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021e50:	b538      	push	{r3, r4, r5, lr}
 8021e52:	4c15      	ldr	r4, [pc, #84]	; (8021ea8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021e54:	4605      	mov	r5, r0
 8021e56:	7823      	ldrb	r3, [r4, #0]
 8021e58:	f3bf 8f5b 	dmb	ish
 8021e5c:	07da      	lsls	r2, r3, #31
 8021e5e:	d40b      	bmi.n	8021e78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021e60:	4620      	mov	r0, r4
 8021e62:	f007 fbb3 	bl	80295cc <__cxa_guard_acquire>
 8021e66:	b138      	cbz	r0, 8021e78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021e68:	4620      	mov	r0, r4
 8021e6a:	f007 fbbb 	bl	80295e4 <__cxa_guard_release>
 8021e6e:	4a0f      	ldr	r2, [pc, #60]	; (8021eac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021e70:	490f      	ldr	r1, [pc, #60]	; (8021eb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021e72:	4810      	ldr	r0, [pc, #64]	; (8021eb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021e74:	f007 fba3 	bl	80295be <__aeabi_atexit>
 8021e78:	4c0f      	ldr	r4, [pc, #60]	; (8021eb8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021e7a:	7823      	ldrb	r3, [r4, #0]
 8021e7c:	f3bf 8f5b 	dmb	ish
 8021e80:	07db      	lsls	r3, r3, #31
 8021e82:	d40b      	bmi.n	8021e9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021e84:	4620      	mov	r0, r4
 8021e86:	f007 fba1 	bl	80295cc <__cxa_guard_acquire>
 8021e8a:	b138      	cbz	r0, 8021e9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021e8c:	4620      	mov	r0, r4
 8021e8e:	f007 fba9 	bl	80295e4 <__cxa_guard_release>
 8021e92:	4a06      	ldr	r2, [pc, #24]	; (8021eac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021e94:	4909      	ldr	r1, [pc, #36]	; (8021ebc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021e96:	480a      	ldr	r0, [pc, #40]	; (8021ec0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021e98:	f007 fb91 	bl	80295be <__aeabi_atexit>
 8021e9c:	4b05      	ldr	r3, [pc, #20]	; (8021eb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021e9e:	66ab      	str	r3, [r5, #104]	; 0x68
 8021ea0:	4b07      	ldr	r3, [pc, #28]	; (8021ec0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021ea2:	66eb      	str	r3, [r5, #108]	; 0x6c
 8021ea4:	bd38      	pop	{r3, r4, r5, pc}
 8021ea6:	bf00      	nop
 8021ea8:	200150d0 	.word	0x200150d0
 8021eac:	20000000 	.word	0x20000000
 8021eb0:	0801e5b7 	.word	0x0801e5b7
 8021eb4:	20000050 	.word	0x20000050
 8021eb8:	200150d4 	.word	0x200150d4
 8021ebc:	0801e5b5 	.word	0x0801e5b5
 8021ec0:	20000054 	.word	0x20000054

08021ec4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8021ec4:	b510      	push	{r4, lr}
 8021ec6:	4604      	mov	r4, r0
 8021ec8:	f7ff ff88 	bl	8021ddc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021ecc:	4620      	mov	r0, r4
 8021ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ed2:	f7ff bfbd 	b.w	8021e50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08021ed6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8021ed6:	b510      	push	{r4, lr}
 8021ed8:	4604      	mov	r4, r0
 8021eda:	f7ff fff3 	bl	8021ec4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8021ede:	4620      	mov	r0, r4
 8021ee0:	f7ff ff72 	bl	8021dc8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8021ee4:	4620      	mov	r0, r4
 8021ee6:	f7ff fdf9 	bl	8021adc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8021eea:	4620      	mov	r0, r4
 8021eec:	f7ff fcfa 	bl	80218e4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021ef0:	4620      	mov	r0, r4
 8021ef2:	f7ff fd75 	bl	80219e0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8021ef6:	4620      	mov	r0, r4
 8021ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021efc:	f7ff bee0 	b.w	8021cc0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021f00 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8021f00:	b538      	push	{r3, r4, r5, lr}
 8021f02:	4c0b      	ldr	r4, [pc, #44]	; (8021f30 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8021f04:	4605      	mov	r5, r0
 8021f06:	7823      	ldrb	r3, [r4, #0]
 8021f08:	f3bf 8f5b 	dmb	ish
 8021f0c:	07db      	lsls	r3, r3, #31
 8021f0e:	d40b      	bmi.n	8021f28 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021f10:	4620      	mov	r0, r4
 8021f12:	f007 fb5b 	bl	80295cc <__cxa_guard_acquire>
 8021f16:	b138      	cbz	r0, 8021f28 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021f18:	4620      	mov	r0, r4
 8021f1a:	f007 fb63 	bl	80295e4 <__cxa_guard_release>
 8021f1e:	4a05      	ldr	r2, [pc, #20]	; (8021f34 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8021f20:	4905      	ldr	r1, [pc, #20]	; (8021f38 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8021f22:	4806      	ldr	r0, [pc, #24]	; (8021f3c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021f24:	f007 fb4b 	bl	80295be <__aeabi_atexit>
 8021f28:	4b04      	ldr	r3, [pc, #16]	; (8021f3c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021f2a:	67ab      	str	r3, [r5, #120]	; 0x78
 8021f2c:	bd38      	pop	{r3, r4, r5, pc}
 8021f2e:	bf00      	nop
 8021f30:	200150c4 	.word	0x200150c4
 8021f34:	20000000 	.word	0x20000000
 8021f38:	0801e5af 	.word	0x0801e5af
 8021f3c:	20000048 	.word	0x20000048

08021f40 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8021f40:	b538      	push	{r3, r4, r5, lr}
 8021f42:	4c0b      	ldr	r4, [pc, #44]	; (8021f70 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8021f44:	4605      	mov	r5, r0
 8021f46:	7823      	ldrb	r3, [r4, #0]
 8021f48:	f3bf 8f5b 	dmb	ish
 8021f4c:	07db      	lsls	r3, r3, #31
 8021f4e:	d40b      	bmi.n	8021f68 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021f50:	4620      	mov	r0, r4
 8021f52:	f007 fb3b 	bl	80295cc <__cxa_guard_acquire>
 8021f56:	b138      	cbz	r0, 8021f68 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021f58:	4620      	mov	r0, r4
 8021f5a:	f007 fb43 	bl	80295e4 <__cxa_guard_release>
 8021f5e:	4a05      	ldr	r2, [pc, #20]	; (8021f74 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8021f60:	4905      	ldr	r1, [pc, #20]	; (8021f78 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8021f62:	4806      	ldr	r0, [pc, #24]	; (8021f7c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021f64:	f007 fb2b 	bl	80295be <__aeabi_atexit>
 8021f68:	4b04      	ldr	r3, [pc, #16]	; (8021f7c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021f6a:	67eb      	str	r3, [r5, #124]	; 0x7c
 8021f6c:	bd38      	pop	{r3, r4, r5, pc}
 8021f6e:	bf00      	nop
 8021f70:	200150c8 	.word	0x200150c8
 8021f74:	20000000 	.word	0x20000000
 8021f78:	0801e5ad 	.word	0x0801e5ad
 8021f7c:	2000004c 	.word	0x2000004c

08021f80 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8021f80:	b570      	push	{r4, r5, r6, lr}
 8021f82:	4d0d      	ldr	r5, [pc, #52]	; (8021fb8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8021f84:	4606      	mov	r6, r0
 8021f86:	4c0d      	ldr	r4, [pc, #52]	; (8021fbc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8021f88:	782b      	ldrb	r3, [r5, #0]
 8021f8a:	f3bf 8f5b 	dmb	ish
 8021f8e:	f013 0f01 	tst.w	r3, #1
 8021f92:	d10d      	bne.n	8021fb0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8021f94:	4628      	mov	r0, r5
 8021f96:	f007 fb19 	bl	80295cc <__cxa_guard_acquire>
 8021f9a:	b148      	cbz	r0, 8021fb0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8021f9c:	4b08      	ldr	r3, [pc, #32]	; (8021fc0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8021f9e:	4628      	mov	r0, r5
 8021fa0:	6023      	str	r3, [r4, #0]
 8021fa2:	f007 fb1f 	bl	80295e4 <__cxa_guard_release>
 8021fa6:	4a07      	ldr	r2, [pc, #28]	; (8021fc4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8021fa8:	4620      	mov	r0, r4
 8021faa:	4907      	ldr	r1, [pc, #28]	; (8021fc8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8021fac:	f007 fb07 	bl	80295be <__aeabi_atexit>
 8021fb0:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 8021fb4:	bd70      	pop	{r4, r5, r6, pc}
 8021fb6:	bf00      	nop
 8021fb8:	200150cc 	.word	0x200150cc
 8021fbc:	20015140 	.word	0x20015140
 8021fc0:	0802eea8 	.word	0x0802eea8
 8021fc4:	20000000 	.word	0x20000000
 8021fc8:	0801e5ab 	.word	0x0801e5ab

08021fcc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8021fcc:	b510      	push	{r4, lr}
 8021fce:	4604      	mov	r4, r0
 8021fd0:	f7ff ff96 	bl	8021f00 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8021fd4:	4620      	mov	r0, r4
 8021fd6:	f7ff ffb3 	bl	8021f40 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8021fda:	4620      	mov	r0, r4
 8021fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fe0:	f7ff bfce 	b.w	8021f80 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08021fe4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fe8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8021fec:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8021ff0:	2d00      	cmp	r5, #0
 8021ff2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8021ff6:	fb05 4c0e 	mla	ip, r5, lr, r4
 8021ffa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8021ffe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022002:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8022006:	eb02 0a0c 	add.w	sl, r2, ip
 802200a:	8808      	ldrh	r0, [r1, #0]
 802200c:	f2c0 80b0 	blt.w	8022170 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022010:	45ab      	cmp	fp, r5
 8022012:	f340 80ad 	ble.w	8022170 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022016:	2c00      	cmp	r4, #0
 8022018:	f2c0 80a8 	blt.w	802216c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 802201c:	45a6      	cmp	lr, r4
 802201e:	f340 80a5 	ble.w	802216c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022022:	f812 200c 	ldrb.w	r2, [r2, ip]
 8022026:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 802202a:	1c62      	adds	r2, r4, #1
 802202c:	f100 80a3 	bmi.w	8022176 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022030:	4596      	cmp	lr, r2
 8022032:	f340 80a0 	ble.w	8022176 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022036:	f1b9 0f00 	cmp.w	r9, #0
 802203a:	f000 809c 	beq.w	8022176 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 802203e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022042:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022046:	3501      	adds	r5, #1
 8022048:	f100 8099 	bmi.w	802217e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 802204c:	45ab      	cmp	fp, r5
 802204e:	f340 8096 	ble.w	802217e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022052:	2f00      	cmp	r7, #0
 8022054:	f000 8093 	beq.w	802217e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022058:	2c00      	cmp	r4, #0
 802205a:	f2c0 808e 	blt.w	802217a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 802205e:	45a6      	cmp	lr, r4
 8022060:	f340 808b 	ble.w	802217a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022064:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8022068:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 802206c:	3401      	adds	r4, #1
 802206e:	f100 8089 	bmi.w	8022184 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022072:	45a6      	cmp	lr, r4
 8022074:	f340 8086 	ble.w	8022184 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022078:	f1b9 0f00 	cmp.w	r9, #0
 802207c:	f000 8082 	beq.w	8022184 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022080:	44d6      	add	lr, sl
 8022082:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022086:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802208a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802208e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022092:	fb19 fe07 	smulbb	lr, r9, r7
 8022096:	f1c7 0210 	rsb	r2, r7, #16
 802209a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802209e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80220a2:	eba2 0209 	sub.w	r2, r2, r9
 80220a6:	ea44 0808 	orr.w	r8, r4, r8
 80220aa:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80220ae:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80220b2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80220b6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80220ba:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80220be:	ea44 0c0c 	orr.w	ip, r4, ip
 80220c2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80220c6:	fb04 f40c 	mul.w	r4, r4, ip
 80220ca:	fb02 4808 	mla	r8, r2, r8, r4
 80220ce:	041a      	lsls	r2, r3, #16
 80220d0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80220d4:	b2b4      	uxth	r4, r6
 80220d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80220da:	43f6      	mvns	r6, r6
 80220dc:	4313      	orrs	r3, r2
 80220de:	042a      	lsls	r2, r5, #16
 80220e0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80220e4:	b2f6      	uxtb	r6, r6
 80220e6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80220ea:	fb0e 8303 	mla	r3, lr, r3, r8
 80220ee:	432a      	orrs	r2, r5
 80220f0:	fb07 3202 	mla	r2, r7, r2, r3
 80220f4:	10c7      	asrs	r7, r0, #3
 80220f6:	0d53      	lsrs	r3, r2, #21
 80220f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80220fc:	0952      	lsrs	r2, r2, #5
 80220fe:	fb17 f706 	smulbb	r7, r7, r6
 8022102:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022106:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802210a:	431a      	orrs	r2, r3
 802210c:	b293      	uxth	r3, r2
 802210e:	1202      	asrs	r2, r0, #8
 8022110:	121d      	asrs	r5, r3, #8
 8022112:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022116:	00c0      	lsls	r0, r0, #3
 8022118:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802211c:	fb12 f206 	smulbb	r2, r2, r6
 8022120:	b2c0      	uxtb	r0, r0
 8022122:	fb05 2504 	mla	r5, r5, r4, r2
 8022126:	10da      	asrs	r2, r3, #3
 8022128:	fb10 f006 	smulbb	r0, r0, r6
 802212c:	00db      	lsls	r3, r3, #3
 802212e:	b2ad      	uxth	r5, r5
 8022130:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022134:	b2db      	uxtb	r3, r3
 8022136:	fb02 7204 	mla	r2, r2, r4, r7
 802213a:	fb03 0004 	mla	r0, r3, r4, r0
 802213e:	1c6b      	adds	r3, r5, #1
 8022140:	b292      	uxth	r2, r2
 8022142:	b280      	uxth	r0, r0
 8022144:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022148:	1c43      	adds	r3, r0, #1
 802214a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802214e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022152:	1c50      	adds	r0, r2, #1
 8022154:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022158:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802215c:	0952      	lsrs	r2, r2, #5
 802215e:	432b      	orrs	r3, r5
 8022160:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022164:	4313      	orrs	r3, r2
 8022166:	800b      	strh	r3, [r1, #0]
 8022168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802216c:	4680      	mov	r8, r0
 802216e:	e75c      	b.n	802202a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022170:	4684      	mov	ip, r0
 8022172:	4680      	mov	r8, r0
 8022174:	e767      	b.n	8022046 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022176:	4684      	mov	ip, r0
 8022178:	e765      	b.n	8022046 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802217a:	4605      	mov	r5, r0
 802217c:	e776      	b.n	802206c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 802217e:	4603      	mov	r3, r0
 8022180:	4605      	mov	r5, r0
 8022182:	e782      	b.n	802208a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022184:	4603      	mov	r3, r0
 8022186:	e780      	b.n	802208a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08022188 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802218c:	b099      	sub	sp, #100	; 0x64
 802218e:	9215      	str	r2, [sp, #84]	; 0x54
 8022190:	9309      	str	r3, [sp, #36]	; 0x24
 8022192:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022194:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8022198:	9016      	str	r0, [sp, #88]	; 0x58
 802219a:	930d      	str	r3, [sp, #52]	; 0x34
 802219c:	6850      	ldr	r0, [r2, #4]
 802219e:	910c      	str	r1, [sp, #48]	; 0x30
 80221a0:	6812      	ldr	r2, [r2, #0]
 80221a2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80221a6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 80221aa:	fb00 1303 	mla	r3, r0, r3, r1
 80221ae:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80221b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221b4:	681b      	ldr	r3, [r3, #0]
 80221b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80221b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221ba:	685e      	ldr	r6, [r3, #4]
 80221bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80221be:	3604      	adds	r6, #4
 80221c0:	43db      	mvns	r3, r3
 80221c2:	b2db      	uxtb	r3, r3
 80221c4:	930a      	str	r3, [sp, #40]	; 0x28
 80221c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	dc03      	bgt.n	80221d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80221cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	f340 8225 	ble.w	802261e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80221d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221de:	1e48      	subs	r0, r1, #1
 80221e0:	1e57      	subs	r7, r2, #1
 80221e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	f340 80e3 	ble.w	80223b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80221ea:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80221ee:	ea4f 4325 	mov.w	r3, r5, asr #16
 80221f2:	d406      	bmi.n	8022202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80221f4:	4584      	cmp	ip, r0
 80221f6:	da04      	bge.n	8022202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80221f8:	2b00      	cmp	r3, #0
 80221fa:	db02      	blt.n	8022202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80221fc:	42bb      	cmp	r3, r7
 80221fe:	f2c0 80d8 	blt.w	80223b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022202:	f11c 0c01 	adds.w	ip, ip, #1
 8022206:	f100 80c9 	bmi.w	802239c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802220a:	4561      	cmp	r1, ip
 802220c:	f2c0 80c6 	blt.w	802239c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022210:	3301      	adds	r3, #1
 8022212:	f100 80c3 	bmi.w	802239c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022216:	429a      	cmp	r2, r3
 8022218:	f2c0 80c0 	blt.w	802239c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802221c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022220:	4647      	mov	r7, r8
 8022222:	f1bb 0f00 	cmp.w	fp, #0
 8022226:	f340 80e3 	ble.w	80223f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802222a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802222c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022230:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022232:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022236:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802223a:	ea5f 422a 	movs.w	r2, sl, asr #16
 802223e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022242:	689b      	ldr	r3, [r3, #8]
 8022244:	f100 8121 	bmi.w	802248a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022248:	f103 39ff 	add.w	r9, r3, #4294967295
 802224c:	454a      	cmp	r2, r9
 802224e:	f280 811c 	bge.w	802248a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022252:	f1bc 0f00 	cmp.w	ip, #0
 8022256:	f2c0 8118 	blt.w	802248a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802225a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802225e:	45cc      	cmp	ip, r9
 8022260:	f280 8113 	bge.w	802248a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022264:	b21b      	sxth	r3, r3
 8022266:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022268:	fb0c 2203 	mla	r2, ip, r3, r2
 802226c:	eb04 0902 	add.w	r9, r4, r2
 8022270:	5ca2      	ldrb	r2, [r4, r2]
 8022272:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022276:	2800      	cmp	r0, #0
 8022278:	f000 80fe 	beq.w	8022478 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802227c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022280:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022284:	9211      	str	r2, [sp, #68]	; 0x44
 8022286:	b151      	cbz	r1, 802229e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022288:	eb09 0203 	add.w	r2, r9, r3
 802228c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022290:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022294:	930f      	str	r3, [sp, #60]	; 0x3c
 8022296:	7853      	ldrb	r3, [r2, #1]
 8022298:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802229c:	9312      	str	r3, [sp, #72]	; 0x48
 802229e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80222a0:	fb10 f201 	smulbb	r2, r0, r1
 80222a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80222a6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80222aa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80222ae:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80222b2:	10d2      	asrs	r2, r2, #3
 80222b4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80222b8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80222bc:	ea4c 0c03 	orr.w	ip, ip, r3
 80222c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80222c2:	041b      	lsls	r3, r3, #16
 80222c4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80222c8:	4323      	orrs	r3, r4
 80222ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80222cc:	4353      	muls	r3, r2
 80222ce:	fb09 330c 	mla	r3, r9, ip, r3
 80222d2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80222d6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80222da:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80222de:	ea4c 0e0e 	orr.w	lr, ip, lr
 80222e2:	f1c1 0c10 	rsb	ip, r1, #16
 80222e6:	ebac 0c00 	sub.w	ip, ip, r0
 80222ea:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80222ee:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80222f2:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80222f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222f8:	0418      	lsls	r0, r3, #16
 80222fa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80222fe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022302:	4318      	orrs	r0, r3
 8022304:	fb02 c200 	mla	r2, r2, r0, ip
 8022308:	8838      	ldrh	r0, [r7, #0]
 802230a:	0d53      	lsrs	r3, r2, #21
 802230c:	0952      	lsrs	r2, r2, #5
 802230e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022312:	1201      	asrs	r1, r0, #8
 8022314:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022318:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802231c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022320:	00c0      	lsls	r0, r0, #3
 8022322:	431a      	orrs	r2, r3
 8022324:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022328:	fb11 f104 	smulbb	r1, r1, r4
 802232c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022330:	b292      	uxth	r2, r2
 8022332:	fb1e fe04 	smulbb	lr, lr, r4
 8022336:	b2c0      	uxtb	r0, r0
 8022338:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802233c:	fb10 f004 	smulbb	r0, r0, r4
 8022340:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022344:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022348:	10d1      	asrs	r1, r2, #3
 802234a:	00d2      	lsls	r2, r2, #3
 802234c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022350:	fa1f fc8c 	uxth.w	ip, ip
 8022354:	b2d2      	uxtb	r2, r2
 8022356:	fb01 e103 	mla	r1, r1, r3, lr
 802235a:	fb02 0303 	mla	r3, r2, r3, r0
 802235e:	b289      	uxth	r1, r1
 8022360:	b29a      	uxth	r2, r3
 8022362:	f10c 0301 	add.w	r3, ip, #1
 8022366:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802236a:	1c53      	adds	r3, r2, #1
 802236c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022370:	1c4a      	adds	r2, r1, #1
 8022372:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022376:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802237a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802237e:	0949      	lsrs	r1, r1, #5
 8022380:	ea43 030c 	orr.w	r3, r3, ip
 8022384:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022388:	430b      	orrs	r3, r1
 802238a:	803b      	strh	r3, [r7, #0]
 802238c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802238e:	3702      	adds	r7, #2
 8022390:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022394:	449a      	add	sl, r3
 8022396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022398:	441d      	add	r5, r3
 802239a:	e742      	b.n	8022222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802239c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802239e:	f108 0802 	add.w	r8, r8, #2
 80223a2:	449a      	add	sl, r3
 80223a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80223a6:	441d      	add	r5, r3
 80223a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223aa:	3b01      	subs	r3, #1
 80223ac:	9309      	str	r3, [sp, #36]	; 0x24
 80223ae:	e718      	b.n	80221e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80223b0:	d023      	beq.n	80223fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80223b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223b4:	9825      	ldr	r0, [sp, #148]	; 0x94
 80223b6:	3b01      	subs	r3, #1
 80223b8:	fb00 a003 	mla	r0, r0, r3, sl
 80223bc:	1400      	asrs	r0, r0, #16
 80223be:	f53f af2d 	bmi.w	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80223c2:	3901      	subs	r1, #1
 80223c4:	4288      	cmp	r0, r1
 80223c6:	f6bf af29 	bge.w	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80223ca:	9926      	ldr	r1, [sp, #152]	; 0x98
 80223cc:	fb01 5303 	mla	r3, r1, r3, r5
 80223d0:	141b      	asrs	r3, r3, #16
 80223d2:	f53f af23 	bmi.w	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80223d6:	3a01      	subs	r2, #1
 80223d8:	4293      	cmp	r3, r2
 80223da:	f6bf af1f 	bge.w	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80223de:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80223e2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80223e6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80223ea:	f1be 0f00 	cmp.w	lr, #0
 80223ee:	dc6c      	bgt.n	80224ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80223f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223f2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80223f6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80223fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	f340 810e 	ble.w	802261e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022406:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022408:	ee30 0a04 	vadd.f32	s0, s0, s8
 802240c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022410:	eef0 6a62 	vmov.f32	s13, s5
 8022414:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022418:	ee31 1a05 	vadd.f32	s2, s2, s10
 802241c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022420:	ee16 aa90 	vmov	sl, s13
 8022424:	eef0 6a43 	vmov.f32	s13, s6
 8022428:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802242c:	ee16 5a90 	vmov	r5, s13
 8022430:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022434:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022438:	ee77 2a62 	vsub.f32	s5, s14, s5
 802243c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022440:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022444:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022448:	ee12 2a90 	vmov	r2, s5
 802244c:	eef0 2a47 	vmov.f32	s5, s14
 8022450:	fb92 f3f3 	sdiv	r3, r2, r3
 8022454:	ee13 2a10 	vmov	r2, s6
 8022458:	9325      	str	r3, [sp, #148]	; 0x94
 802245a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802245c:	eeb0 3a67 	vmov.f32	s6, s15
 8022460:	fb92 f3f3 	sdiv	r3, r2, r3
 8022464:	9326      	str	r3, [sp, #152]	; 0x98
 8022466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022468:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802246a:	3b01      	subs	r3, #1
 802246c:	930c      	str	r3, [sp, #48]	; 0x30
 802246e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022470:	bf08      	it	eq
 8022472:	4613      	moveq	r3, r2
 8022474:	9309      	str	r3, [sp, #36]	; 0x24
 8022476:	e6a6      	b.n	80221c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022478:	2900      	cmp	r1, #0
 802247a:	f43f af10 	beq.w	802229e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802247e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022482:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022486:	930f      	str	r3, [sp, #60]	; 0x3c
 8022488:	e709      	b.n	802229e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802248a:	f112 0901 	adds.w	r9, r2, #1
 802248e:	f53f af7d 	bmi.w	802238c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022492:	454b      	cmp	r3, r9
 8022494:	f6ff af7a 	blt.w	802238c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022498:	f11c 0901 	adds.w	r9, ip, #1
 802249c:	f53f af76 	bmi.w	802238c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80224a0:	45ce      	cmp	lr, r9
 80224a2:	f6ff af73 	blt.w	802238c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80224a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80224a8:	b21b      	sxth	r3, r3
 80224aa:	9202      	str	r2, [sp, #8]
 80224ac:	fa0f f28e 	sxth.w	r2, lr
 80224b0:	9300      	str	r3, [sp, #0]
 80224b2:	4633      	mov	r3, r6
 80224b4:	9201      	str	r2, [sp, #4]
 80224b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80224b8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80224bc:	e9cd c003 	strd	ip, r0, [sp, #12]
 80224c0:	4639      	mov	r1, r7
 80224c2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80224c4:	f7ff fd8e 	bl	8021fe4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80224c8:	e760      	b.n	802238c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80224ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80224cc:	ea4f 422a 	mov.w	r2, sl, asr #16
 80224d0:	1429      	asrs	r1, r5, #16
 80224d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80224d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80224d8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80224dc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80224e0:	fb03 2101 	mla	r1, r3, r1, r2
 80224e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80224e6:	440a      	add	r2, r1
 80224e8:	5c61      	ldrb	r1, [r4, r1]
 80224ea:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80224ee:	f1bc 0f00 	cmp.w	ip, #0
 80224f2:	f000 808c 	beq.w	802260e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80224f6:	7857      	ldrb	r7, [r2, #1]
 80224f8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80224fc:	9413      	str	r4, [sp, #76]	; 0x4c
 80224fe:	b140      	cbz	r0, 8022512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022500:	18d7      	adds	r7, r2, r3
 8022502:	5cd3      	ldrb	r3, [r2, r3]
 8022504:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022508:	9310      	str	r3, [sp, #64]	; 0x40
 802250a:	787b      	ldrb	r3, [r7, #1]
 802250c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022510:	9314      	str	r3, [sp, #80]	; 0x50
 8022512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022514:	fb1c f200 	smulbb	r2, ip, r0
 8022518:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802251a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802251e:	041f      	lsls	r7, r3, #16
 8022520:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022524:	10d2      	asrs	r2, r2, #3
 8022526:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 802252a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802252e:	431f      	orrs	r7, r3
 8022530:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8022534:	9317      	str	r3, [sp, #92]	; 0x5c
 8022536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022538:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802253a:	041b      	lsls	r3, r3, #16
 802253c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022540:	ea43 030b 	orr.w	r3, r3, fp
 8022544:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022548:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802254c:	4353      	muls	r3, r2
 802254e:	fb04 3707 	mla	r7, r4, r7, r3
 8022552:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022556:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022558:	ea43 0b01 	orr.w	fp, r3, r1
 802255c:	f1c0 0110 	rsb	r1, r0, #16
 8022560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022562:	eba1 0c0c 	sub.w	ip, r1, ip
 8022566:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802256a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802256e:	fb0c 770b 	mla	r7, ip, fp, r7
 8022572:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022576:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802257a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802257e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022582:	fb02 770c 	mla	r7, r2, ip, r7
 8022586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022588:	0d79      	lsrs	r1, r7, #21
 802258a:	8812      	ldrh	r2, [r2, #0]
 802258c:	097f      	lsrs	r7, r7, #5
 802258e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022592:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022596:	430f      	orrs	r7, r1
 8022598:	1211      	asrs	r1, r2, #8
 802259a:	b2bb      	uxth	r3, r7
 802259c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80225a0:	10d7      	asrs	r7, r2, #3
 80225a2:	fb11 f104 	smulbb	r1, r1, r4
 80225a6:	1218      	asrs	r0, r3, #8
 80225a8:	00d2      	lsls	r2, r2, #3
 80225aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80225ae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80225b2:	fb17 f704 	smulbb	r7, r7, r4
 80225b6:	b2d2      	uxtb	r2, r2
 80225b8:	fb00 1009 	mla	r0, r0, r9, r1
 80225bc:	10d9      	asrs	r1, r3, #3
 80225be:	fb12 f204 	smulbb	r2, r2, r4
 80225c2:	00db      	lsls	r3, r3, #3
 80225c4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80225c8:	b280      	uxth	r0, r0
 80225ca:	b2db      	uxtb	r3, r3
 80225cc:	fb01 7109 	mla	r1, r1, r9, r7
 80225d0:	fb03 2309 	mla	r3, r3, r9, r2
 80225d4:	1c42      	adds	r2, r0, #1
 80225d6:	b289      	uxth	r1, r1
 80225d8:	b29b      	uxth	r3, r3
 80225da:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80225de:	1c4f      	adds	r7, r1, #1
 80225e0:	1c5a      	adds	r2, r3, #1
 80225e2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80225e6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80225ea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80225ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225f0:	0949      	lsrs	r1, r1, #5
 80225f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80225f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80225fa:	4310      	orrs	r0, r2
 80225fc:	4308      	orrs	r0, r1
 80225fe:	f823 0b02 	strh.w	r0, [r3], #2
 8022602:	930e      	str	r3, [sp, #56]	; 0x38
 8022604:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022606:	449a      	add	sl, r3
 8022608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802260a:	441d      	add	r5, r3
 802260c:	e6ed      	b.n	80223ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802260e:	2800      	cmp	r0, #0
 8022610:	f43f af7f 	beq.w	8022512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022614:	5cd3      	ldrb	r3, [r2, r3]
 8022616:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802261a:	9310      	str	r3, [sp, #64]	; 0x40
 802261c:	e779      	b.n	8022512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802261e:	b019      	add	sp, #100	; 0x64
 8022620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022624 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022628:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 802262c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8022630:	f1b8 0f00 	cmp.w	r8, #0
 8022634:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8022638:	fb08 470e 	mla	r7, r8, lr, r4
 802263c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022640:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022644:	eb02 0907 	add.w	r9, r2, r7
 8022648:	8808      	ldrh	r0, [r1, #0]
 802264a:	db67      	blt.n	802271c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 802264c:	45c2      	cmp	sl, r8
 802264e:	dd65      	ble.n	802271c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022650:	2c00      	cmp	r4, #0
 8022652:	db61      	blt.n	8022718 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022654:	45a6      	cmp	lr, r4
 8022656:	dd5f      	ble.n	8022718 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022658:	5dd2      	ldrb	r2, [r2, r7]
 802265a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802265e:	1c62      	adds	r2, r4, #1
 8022660:	d45f      	bmi.n	8022722 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022662:	4596      	cmp	lr, r2
 8022664:	dd5d      	ble.n	8022722 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022666:	2d00      	cmp	r5, #0
 8022668:	d05b      	beq.n	8022722 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802266a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802266e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022672:	f118 0801 	adds.w	r8, r8, #1
 8022676:	d458      	bmi.n	802272a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022678:	45c2      	cmp	sl, r8
 802267a:	dd56      	ble.n	802272a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802267c:	2e00      	cmp	r6, #0
 802267e:	d054      	beq.n	802272a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022680:	2c00      	cmp	r4, #0
 8022682:	db50      	blt.n	8022726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022684:	45a6      	cmp	lr, r4
 8022686:	dd4e      	ble.n	8022726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022688:	f819 200e 	ldrb.w	r2, [r9, lr]
 802268c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8022690:	3401      	adds	r4, #1
 8022692:	d407      	bmi.n	80226a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022694:	45a6      	cmp	lr, r4
 8022696:	dd05      	ble.n	80226a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022698:	b125      	cbz	r5, 80226a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802269a:	44ce      	add	lr, r9
 802269c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80226a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80226a4:	fb15 f406 	smulbb	r4, r5, r6
 80226a8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80226ac:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80226b0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80226b4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80226b8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80226bc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80226c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80226c4:	ea43 0c0c 	orr.w	ip, r3, ip
 80226c8:	f1c6 0310 	rsb	r3, r6, #16
 80226cc:	ea4e 0707 	orr.w	r7, lr, r7
 80226d0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80226d4:	1b5b      	subs	r3, r3, r5
 80226d6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80226da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80226de:	437d      	muls	r5, r7
 80226e0:	fb03 5c0c 	mla	ip, r3, ip, r5
 80226e4:	0403      	lsls	r3, r0, #16
 80226e6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80226ea:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80226ee:	4318      	orrs	r0, r3
 80226f0:	0413      	lsls	r3, r2, #16
 80226f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80226f6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80226fa:	fb04 c000 	mla	r0, r4, r0, ip
 80226fe:	4313      	orrs	r3, r2
 8022700:	fb06 0003 	mla	r0, r6, r3, r0
 8022704:	0d43      	lsrs	r3, r0, #21
 8022706:	0940      	lsrs	r0, r0, #5
 8022708:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802270c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022710:	4318      	orrs	r0, r3
 8022712:	8008      	strh	r0, [r1, #0]
 8022714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022718:	4684      	mov	ip, r0
 802271a:	e7a0      	b.n	802265e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 802271c:	4607      	mov	r7, r0
 802271e:	4684      	mov	ip, r0
 8022720:	e7a7      	b.n	8022672 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022722:	4607      	mov	r7, r0
 8022724:	e7a5      	b.n	8022672 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022726:	4602      	mov	r2, r0
 8022728:	e7b2      	b.n	8022690 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802272a:	4602      	mov	r2, r0
 802272c:	e7ba      	b.n	80226a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802272e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802272e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022732:	b093      	sub	sp, #76	; 0x4c
 8022734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022738:	920f      	str	r2, [sp, #60]	; 0x3c
 802273a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802273c:	9010      	str	r0, [sp, #64]	; 0x40
 802273e:	9108      	str	r1, [sp, #32]
 8022740:	6850      	ldr	r0, [r2, #4]
 8022742:	9306      	str	r3, [sp, #24]
 8022744:	6812      	ldr	r2, [r2, #0]
 8022746:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802274a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802274e:	fb00 1303 	mla	r3, r0, r3, r1
 8022752:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022756:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022758:	681b      	ldr	r3, [r3, #0]
 802275a:	9307      	str	r3, [sp, #28]
 802275c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802275e:	685f      	ldr	r7, [r3, #4]
 8022760:	3704      	adds	r7, #4
 8022762:	9b08      	ldr	r3, [sp, #32]
 8022764:	2b00      	cmp	r3, #0
 8022766:	dc03      	bgt.n	8022770 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802276a:	2b00      	cmp	r3, #0
 802276c:	f340 81b2 	ble.w	8022ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022770:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022772:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022776:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802277a:	1e48      	subs	r0, r1, #1
 802277c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022780:	9b06      	ldr	r3, [sp, #24]
 8022782:	2b00      	cmp	r3, #0
 8022784:	f340 80a9 	ble.w	80228da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022788:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802278c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022790:	d406      	bmi.n	80227a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022792:	4586      	cmp	lr, r0
 8022794:	da04      	bge.n	80227a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022796:	2b00      	cmp	r3, #0
 8022798:	db02      	blt.n	80227a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802279a:	4563      	cmp	r3, ip
 802279c:	f2c0 809e 	blt.w	80228dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80227a0:	f11e 0e01 	adds.w	lr, lr, #1
 80227a4:	f100 808f 	bmi.w	80228c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80227a8:	4571      	cmp	r1, lr
 80227aa:	f2c0 808c 	blt.w	80228c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80227ae:	3301      	adds	r3, #1
 80227b0:	f100 8089 	bmi.w	80228c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80227b4:	429a      	cmp	r2, r3
 80227b6:	f2c0 8086 	blt.w	80228c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80227ba:	f8dd b018 	ldr.w	fp, [sp, #24]
 80227be:	46c8      	mov	r8, r9
 80227c0:	f1bb 0f00 	cmp.w	fp, #0
 80227c4:	f340 80a6 	ble.w	8022914 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80227c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80227ca:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80227ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227d0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80227d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80227d8:	1422      	asrs	r2, r4, #16
 80227da:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80227de:	689b      	ldr	r3, [r3, #8]
 80227e0:	f100 80e3 	bmi.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80227e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80227e8:	4552      	cmp	r2, sl
 80227ea:	f280 80de 	bge.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80227ee:	f1bc 0f00 	cmp.w	ip, #0
 80227f2:	f2c0 80da 	blt.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80227f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80227fa:	45d4      	cmp	ip, sl
 80227fc:	f280 80d5 	bge.w	80229aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022800:	b21b      	sxth	r3, r3
 8022802:	9d07      	ldr	r5, [sp, #28]
 8022804:	fb0c 2203 	mla	r2, ip, r3, r2
 8022808:	eb05 0a02 	add.w	sl, r5, r2
 802280c:	5caa      	ldrb	r2, [r5, r2]
 802280e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022812:	2800      	cmp	r0, #0
 8022814:	f000 80c0 	beq.w	8022998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8022818:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802281c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022820:	920b      	str	r2, [sp, #44]	; 0x2c
 8022822:	b151      	cbz	r1, 802283a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022824:	eb0a 0203 	add.w	r2, sl, r3
 8022828:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802282c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022830:	9309      	str	r3, [sp, #36]	; 0x24
 8022832:	7853      	ldrb	r3, [r2, #1]
 8022834:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022838:	930c      	str	r3, [sp, #48]	; 0x30
 802283a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802283c:	fb10 f201 	smulbb	r2, r0, r1
 8022840:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022842:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022846:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802284a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802284e:	10d2      	asrs	r2, r2, #3
 8022850:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022854:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8022858:	ea4c 0c03 	orr.w	ip, ip, r3
 802285c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802285e:	041b      	lsls	r3, r3, #16
 8022860:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022864:	432b      	orrs	r3, r5
 8022866:	4353      	muls	r3, r2
 8022868:	fb0a 330c 	mla	r3, sl, ip, r3
 802286c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022870:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022874:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022878:	ea4c 0e0e 	orr.w	lr, ip, lr
 802287c:	f1c1 0c10 	rsb	ip, r1, #16
 8022880:	ebac 0c00 	sub.w	ip, ip, r0
 8022884:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022888:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802288c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022892:	0418      	lsls	r0, r3, #16
 8022894:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022898:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802289c:	4318      	orrs	r0, r3
 802289e:	fb02 c200 	mla	r2, r2, r0, ip
 80228a2:	0d53      	lsrs	r3, r2, #21
 80228a4:	0952      	lsrs	r2, r2, #5
 80228a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80228aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80228ae:	431a      	orrs	r2, r3
 80228b0:	f8a8 2000 	strh.w	r2, [r8]
 80228b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80228b6:	f108 0802 	add.w	r8, r8, #2
 80228ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80228be:	441c      	add	r4, r3
 80228c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228c2:	441e      	add	r6, r3
 80228c4:	e77c      	b.n	80227c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80228c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80228c8:	f109 0902 	add.w	r9, r9, #2
 80228cc:	441c      	add	r4, r3
 80228ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228d0:	441e      	add	r6, r3
 80228d2:	9b06      	ldr	r3, [sp, #24]
 80228d4:	3b01      	subs	r3, #1
 80228d6:	9306      	str	r3, [sp, #24]
 80228d8:	e752      	b.n	8022780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80228da:	d020      	beq.n	802291e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80228dc:	9b06      	ldr	r3, [sp, #24]
 80228de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80228e0:	3b01      	subs	r3, #1
 80228e2:	fb00 4003 	mla	r0, r0, r3, r4
 80228e6:	1400      	asrs	r0, r0, #16
 80228e8:	f53f af67 	bmi.w	80227ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80228ec:	3901      	subs	r1, #1
 80228ee:	4288      	cmp	r0, r1
 80228f0:	f6bf af63 	bge.w	80227ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80228f4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80228f6:	fb01 6303 	mla	r3, r1, r3, r6
 80228fa:	141b      	asrs	r3, r3, #16
 80228fc:	f53f af5d 	bmi.w	80227ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022900:	3a01      	subs	r2, #1
 8022902:	4293      	cmp	r3, r2
 8022904:	f6bf af59 	bge.w	80227ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022908:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802290c:	46ca      	mov	sl, r9
 802290e:	f1b8 0f00 	cmp.w	r8, #0
 8022912:	dc67      	bgt.n	80229e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022914:	9b06      	ldr	r3, [sp, #24]
 8022916:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802291a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802291e:	9b08      	ldr	r3, [sp, #32]
 8022920:	2b00      	cmp	r3, #0
 8022922:	f340 80d7 	ble.w	8022ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022926:	ee30 0a04 	vadd.f32	s0, s0, s8
 802292a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802292c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022930:	eeb0 6a62 	vmov.f32	s12, s5
 8022934:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022938:	ee31 1a05 	vadd.f32	s2, s2, s10
 802293c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022940:	ee16 4a10 	vmov	r4, s12
 8022944:	eeb0 6a43 	vmov.f32	s12, s6
 8022948:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802294c:	ee16 6a10 	vmov	r6, s12
 8022950:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022954:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022958:	ee77 2a62 	vsub.f32	s5, s14, s5
 802295c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022960:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022964:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022968:	ee12 2a90 	vmov	r2, s5
 802296c:	eef0 2a47 	vmov.f32	s5, s14
 8022970:	fb92 f3f3 	sdiv	r3, r2, r3
 8022974:	ee13 2a10 	vmov	r2, s6
 8022978:	931f      	str	r3, [sp, #124]	; 0x7c
 802297a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802297c:	eeb0 3a67 	vmov.f32	s6, s15
 8022980:	fb92 f3f3 	sdiv	r3, r2, r3
 8022984:	9320      	str	r3, [sp, #128]	; 0x80
 8022986:	9b08      	ldr	r3, [sp, #32]
 8022988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802298a:	3b01      	subs	r3, #1
 802298c:	9308      	str	r3, [sp, #32]
 802298e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022990:	bf08      	it	eq
 8022992:	4613      	moveq	r3, r2
 8022994:	9306      	str	r3, [sp, #24]
 8022996:	e6e4      	b.n	8022762 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022998:	2900      	cmp	r1, #0
 802299a:	f43f af4e 	beq.w	802283a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802299e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80229a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80229a6:	9309      	str	r3, [sp, #36]	; 0x24
 80229a8:	e747      	b.n	802283a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80229aa:	f112 0a01 	adds.w	sl, r2, #1
 80229ae:	d481      	bmi.n	80228b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80229b0:	4553      	cmp	r3, sl
 80229b2:	f6ff af7f 	blt.w	80228b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80229b6:	f11c 0a01 	adds.w	sl, ip, #1
 80229ba:	f53f af7b 	bmi.w	80228b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80229be:	45d6      	cmp	lr, sl
 80229c0:	f6ff af78 	blt.w	80228b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80229c4:	b21b      	sxth	r3, r3
 80229c6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80229ca:	fa0f f28e 	sxth.w	r2, lr
 80229ce:	9300      	str	r3, [sp, #0]
 80229d0:	463b      	mov	r3, r7
 80229d2:	9201      	str	r2, [sp, #4]
 80229d4:	9a07      	ldr	r2, [sp, #28]
 80229d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80229da:	4641      	mov	r1, r8
 80229dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80229de:	f7ff fe21 	bl	8022624 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80229e2:	e767      	b.n	80228b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80229e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229e6:	1422      	asrs	r2, r4, #16
 80229e8:	1431      	asrs	r1, r6, #16
 80229ea:	9d07      	ldr	r5, [sp, #28]
 80229ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80229f0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80229f4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80229f8:	fb03 2101 	mla	r1, r3, r1, r2
 80229fc:	9a07      	ldr	r2, [sp, #28]
 80229fe:	440a      	add	r2, r1
 8022a00:	5c69      	ldrb	r1, [r5, r1]
 8022a02:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022a06:	f1be 0f00 	cmp.w	lr, #0
 8022a0a:	d05c      	beq.n	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8022a0c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022a10:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022a14:	950d      	str	r5, [sp, #52]	; 0x34
 8022a16:	b150      	cbz	r0, 8022a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022a18:	eb02 0c03 	add.w	ip, r2, r3
 8022a1c:	5cd3      	ldrb	r3, [r2, r3]
 8022a1e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022a22:	930a      	str	r3, [sp, #40]	; 0x28
 8022a24:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022a28:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8022a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a30:	fb1e f200 	smulbb	r2, lr, r0
 8022a34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022a36:	f108 38ff 	add.w	r8, r8, #4294967295
 8022a3a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022a3e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022a42:	10d2      	asrs	r2, r2, #3
 8022a44:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022a48:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022a4c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022a50:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022a54:	9311      	str	r3, [sp, #68]	; 0x44
 8022a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a58:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022a5a:	041b      	lsls	r3, r3, #16
 8022a5c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022a60:	ea43 030b 	orr.w	r3, r3, fp
 8022a64:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022a68:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022a6c:	4353      	muls	r3, r2
 8022a6e:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022a72:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022a76:	ea43 0b01 	orr.w	fp, r3, r1
 8022a7a:	f1c0 0110 	rsb	r1, r0, #16
 8022a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a80:	eba1 0e0e 	sub.w	lr, r1, lr
 8022a84:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022a88:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022a8c:	fb0e cc0b 	mla	ip, lr, fp, ip
 8022a90:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022a94:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8022a98:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022a9c:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022aa0:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022aa4:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022aa8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022aac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022ab0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022ab4:	ea43 0c0c 	orr.w	ip, r3, ip
 8022ab8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022aba:	441c      	add	r4, r3
 8022abc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022abe:	f82a cb02 	strh.w	ip, [sl], #2
 8022ac2:	441e      	add	r6, r3
 8022ac4:	e723      	b.n	802290e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8022ac6:	2800      	cmp	r0, #0
 8022ac8:	d0b1      	beq.n	8022a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022aca:	5cd3      	ldrb	r3, [r2, r3]
 8022acc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8022ad2:	e7ac      	b.n	8022a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022ad4:	b013      	add	sp, #76	; 0x4c
 8022ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ada <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8022ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ade:	880d      	ldrh	r5, [r1, #0]
 8022ae0:	b087      	sub	sp, #28
 8022ae2:	10ef      	asrs	r7, r5, #3
 8022ae4:	9103      	str	r1, [sp, #12]
 8022ae6:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8022aea:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8022aee:	00ed      	lsls	r5, r5, #3
 8022af0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022af4:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8022af8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8022afc:	b2ed      	uxtb	r5, r5
 8022afe:	9701      	str	r7, [sp, #4]
 8022b00:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8022b04:	9502      	str	r5, [sp, #8]
 8022b06:	9d01      	ldr	r5, [sp, #4]
 8022b08:	9902      	ldr	r1, [sp, #8]
 8022b0a:	022d      	lsls	r5, r5, #8
 8022b0c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8022b10:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8022b14:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8022b18:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8022b1c:	430d      	orrs	r5, r1
 8022b1e:	fb06 0709 	mla	r7, r6, r9, r0
 8022b22:	2e00      	cmp	r6, #0
 8022b24:	9505      	str	r5, [sp, #20]
 8022b26:	eb02 0c07 	add.w	ip, r2, r7
 8022b2a:	f2c0 80b6 	blt.w	8022c9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022b2e:	45b3      	cmp	fp, r6
 8022b30:	f340 80b3 	ble.w	8022c9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022b34:	2800      	cmp	r0, #0
 8022b36:	f2c0 80ae 	blt.w	8022c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8022b3a:	4581      	cmp	r9, r0
 8022b3c:	f340 80ab 	ble.w	8022c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8022b40:	5dd7      	ldrb	r7, [r2, r7]
 8022b42:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022b46:	441f      	add	r7, r3
 8022b48:	1c42      	adds	r2, r0, #1
 8022b4a:	f100 80a9 	bmi.w	8022ca0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022b4e:	4591      	cmp	r9, r2
 8022b50:	f340 80a6 	ble.w	8022ca0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022b54:	2c00      	cmp	r4, #0
 8022b56:	f000 80a3 	beq.w	8022ca0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022b5a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022b62:	441d      	add	r5, r3
 8022b64:	3601      	adds	r6, #1
 8022b66:	f100 809f 	bmi.w	8022ca8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022b6a:	45b3      	cmp	fp, r6
 8022b6c:	f340 809c 	ble.w	8022ca8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022b70:	f1be 0f00 	cmp.w	lr, #0
 8022b74:	f000 8098 	beq.w	8022ca8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022b78:	2800      	cmp	r0, #0
 8022b7a:	f2c0 8093 	blt.w	8022ca4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8022b7e:	4581      	cmp	r9, r0
 8022b80:	f340 8090 	ble.w	8022ca4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8022b84:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8022b88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022b8c:	441e      	add	r6, r3
 8022b8e:	3001      	adds	r0, #1
 8022b90:	f100 808d 	bmi.w	8022cae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022b94:	4581      	cmp	r9, r0
 8022b96:	f340 808a 	ble.w	8022cae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022b9a:	2c00      	cmp	r4, #0
 8022b9c:	f000 8087 	beq.w	8022cae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022ba0:	44e1      	add	r9, ip
 8022ba2:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022ba6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022baa:	4413      	add	r3, r2
 8022bac:	b2a4      	uxth	r4, r4
 8022bae:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022bb2:	fa1f fe8e 	uxth.w	lr, lr
 8022bb6:	9901      	ldr	r1, [sp, #4]
 8022bb8:	fb04 fb0e 	mul.w	fp, r4, lr
 8022bbc:	0124      	lsls	r4, r4, #4
 8022bbe:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8022bc2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8022bc6:	eba4 040b 	sub.w	r4, r4, fp
 8022bca:	fa1f f08e 	uxth.w	r0, lr
 8022bce:	b2a2      	uxth	r2, r4
 8022bd0:	78ac      	ldrb	r4, [r5, #2]
 8022bd2:	eba9 0900 	sub.w	r9, r9, r0
 8022bd6:	fa1f fe88 	uxth.w	lr, r8
 8022bda:	4354      	muls	r4, r2
 8022bdc:	ea6f 0808 	mvn.w	r8, r8
 8022be0:	fa1f f989 	uxth.w	r9, r9
 8022be4:	fa5f f888 	uxtb.w	r8, r8
 8022be8:	fb09 440c 	mla	r4, r9, ip, r4
 8022bec:	f896 c002 	ldrb.w	ip, [r6, #2]
 8022bf0:	fb1a fa08 	smulbb	sl, sl, r8
 8022bf4:	fb00 440c 	mla	r4, r0, ip, r4
 8022bf8:	f893 c002 	ldrb.w	ip, [r3, #2]
 8022bfc:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022c00:	787c      	ldrb	r4, [r7, #1]
 8022c02:	783f      	ldrb	r7, [r7, #0]
 8022c04:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022c08:	fb0c ac0e 	mla	ip, ip, lr, sl
 8022c0c:	f895 a001 	ldrb.w	sl, [r5, #1]
 8022c10:	782d      	ldrb	r5, [r5, #0]
 8022c12:	fb02 fa0a 	mul.w	sl, r2, sl
 8022c16:	fa1f fc8c 	uxth.w	ip, ip
 8022c1a:	436a      	muls	r2, r5
 8022c1c:	7835      	ldrb	r5, [r6, #0]
 8022c1e:	fb09 aa04 	mla	sl, r9, r4, sl
 8022c22:	7874      	ldrb	r4, [r6, #1]
 8022c24:	fb09 2207 	mla	r2, r9, r7, r2
 8022c28:	fb00 aa04 	mla	sl, r0, r4, sl
 8022c2c:	785c      	ldrb	r4, [r3, #1]
 8022c2e:	fb00 2005 	mla	r0, r0, r5, r2
 8022c32:	781b      	ldrb	r3, [r3, #0]
 8022c34:	fb0b a404 	mla	r4, fp, r4, sl
 8022c38:	fb11 fa08 	smulbb	sl, r1, r8
 8022c3c:	fb0b 0b03 	mla	fp, fp, r3, r0
 8022c40:	9b02      	ldr	r3, [sp, #8]
 8022c42:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022c46:	fb13 f808 	smulbb	r8, r3, r8
 8022c4a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8022c4e:	fb04 a40e 	mla	r4, r4, lr, sl
 8022c52:	f10c 0301 	add.w	r3, ip, #1
 8022c56:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8022c5a:	b2a4      	uxth	r4, r4
 8022c5c:	fa1f fe8e 	uxth.w	lr, lr
 8022c60:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022c64:	f104 0a01 	add.w	sl, r4, #1
 8022c68:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8022c6c:	f10e 0c01 	add.w	ip, lr, #1
 8022c70:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022c74:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022c78:	0964      	lsrs	r4, r4, #5
 8022c7a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022c7e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8022c86:	9b03      	ldr	r3, [sp, #12]
 8022c88:	ea4c 0c04 	orr.w	ip, ip, r4
 8022c8c:	f8a3 c000 	strh.w	ip, [r3]
 8022c90:	b007      	add	sp, #28
 8022c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c96:	af05      	add	r7, sp, #20
 8022c98:	e756      	b.n	8022b48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8022c9a:	ad05      	add	r5, sp, #20
 8022c9c:	462f      	mov	r7, r5
 8022c9e:	e761      	b.n	8022b64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022ca0:	ad05      	add	r5, sp, #20
 8022ca2:	e75f      	b.n	8022b64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022ca4:	ae05      	add	r6, sp, #20
 8022ca6:	e772      	b.n	8022b8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8022ca8:	ab05      	add	r3, sp, #20
 8022caa:	461e      	mov	r6, r3
 8022cac:	e77e      	b.n	8022bac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8022cae:	ab05      	add	r3, sp, #20
 8022cb0:	e77c      	b.n	8022bac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08022cb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cb6:	b095      	sub	sp, #84	; 0x54
 8022cb8:	9212      	str	r2, [sp, #72]	; 0x48
 8022cba:	9309      	str	r3, [sp, #36]	; 0x24
 8022cbc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022cbe:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8022cc2:	9013      	str	r0, [sp, #76]	; 0x4c
 8022cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8022cc6:	6850      	ldr	r0, [r2, #4]
 8022cc8:	910e      	str	r1, [sp, #56]	; 0x38
 8022cca:	6812      	ldr	r2, [r2, #0]
 8022ccc:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8022cd0:	fb00 1303 	mla	r3, r0, r3, r1
 8022cd4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8022cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022cdc:	681b      	ldr	r3, [r3, #0]
 8022cde:	930d      	str	r3, [sp, #52]	; 0x34
 8022ce0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022ce2:	685c      	ldr	r4, [r3, #4]
 8022ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022ce6:	3404      	adds	r4, #4
 8022ce8:	43db      	mvns	r3, r3
 8022cea:	b2db      	uxtb	r3, r3
 8022cec:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	dc03      	bgt.n	8022cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	f340 8255 	ble.w	80231a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8022cfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022cfe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d06:	1e48      	subs	r0, r1, #1
 8022d08:	1e55      	subs	r5, r2, #1
 8022d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d0c:	2b00      	cmp	r3, #0
 8022d0e:	f340 80f9 	ble.w	8022f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022d12:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022d14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d16:	1436      	asrs	r6, r6, #16
 8022d18:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022d1c:	d406      	bmi.n	8022d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d1e:	4286      	cmp	r6, r0
 8022d20:	da04      	bge.n	8022d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	db02      	blt.n	8022d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d26:	42ab      	cmp	r3, r5
 8022d28:	f2c0 80ed 	blt.w	8022f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022d2c:	3601      	adds	r6, #1
 8022d2e:	f100 80da 	bmi.w	8022ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022d32:	42b1      	cmp	r1, r6
 8022d34:	f2c0 80d7 	blt.w	8022ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022d38:	3301      	adds	r3, #1
 8022d3a:	f100 80d4 	bmi.w	8022ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022d3e:	429a      	cmp	r2, r3
 8022d40:	f2c0 80d1 	blt.w	8022ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d46:	9311      	str	r3, [sp, #68]	; 0x44
 8022d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8022d4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d4e:	2b00      	cmp	r3, #0
 8022d50:	f340 80fa 	ble.w	8022f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022d54:	9826      	ldr	r0, [sp, #152]	; 0x98
 8022d56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022d5a:	68c6      	ldr	r6, [r0, #12]
 8022d5c:	141d      	asrs	r5, r3, #16
 8022d5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022d60:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022d64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022d66:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022d68:	1400      	asrs	r0, r0, #16
 8022d6a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022d6e:	6892      	ldr	r2, [r2, #8]
 8022d70:	f100 813e 	bmi.w	8022ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022d74:	1e57      	subs	r7, r2, #1
 8022d76:	42b8      	cmp	r0, r7
 8022d78:	f280 813a 	bge.w	8022ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022d7c:	2d00      	cmp	r5, #0
 8022d7e:	f2c0 8137 	blt.w	8022ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022d82:	1e77      	subs	r7, r6, #1
 8022d84:	42bd      	cmp	r5, r7
 8022d86:	f280 8133 	bge.w	8022ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022d8a:	b212      	sxth	r2, r2
 8022d8c:	fb05 0002 	mla	r0, r5, r2, r0
 8022d90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022d92:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022d96:	182e      	adds	r6, r5, r0
 8022d98:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8022d9c:	eb04 050a 	add.w	r5, r4, sl
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	f000 8117 	beq.w	8022fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022da6:	f896 c001 	ldrb.w	ip, [r6, #1]
 8022daa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022dae:	44a4      	add	ip, r4
 8022db0:	2900      	cmp	r1, #0
 8022db2:	f000 8117 	beq.w	8022fe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022db6:	18b0      	adds	r0, r6, r2
 8022db8:	5cb2      	ldrb	r2, [r6, r2]
 8022dba:	7840      	ldrb	r0, [r0, #1]
 8022dbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022dc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022dc4:	4422      	add	r2, r4
 8022dc6:	4420      	add	r0, r4
 8022dc8:	b29b      	uxth	r3, r3
 8022dca:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8022dce:	b289      	uxth	r1, r1
 8022dd0:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022dd4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022dd6:	fb03 f901 	mul.w	r9, r3, r1
 8022dda:	011b      	lsls	r3, r3, #4
 8022ddc:	f8b6 e000 	ldrh.w	lr, [r6]
 8022de0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022de4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8022de8:	eba3 0309 	sub.w	r3, r3, r9
 8022dec:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8022df0:	b289      	uxth	r1, r1
 8022df2:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8022df6:	b29b      	uxth	r3, r3
 8022df8:	eba8 0801 	sub.w	r8, r8, r1
 8022dfc:	435f      	muls	r7, r3
 8022dfe:	fa1f f888 	uxth.w	r8, r8
 8022e02:	9310      	str	r3, [sp, #64]	; 0x40
 8022e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e06:	fb08 770b 	mla	r7, r8, fp, r7
 8022e0a:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022e0e:	fb01 770b 	mla	r7, r1, fp, r7
 8022e12:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022e16:	fb09 770b 	mla	r7, r9, fp, r7
 8022e1a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8022e1e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022e22:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022e26:	fb1b fb03 	smulbb	fp, fp, r3
 8022e2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e2c:	fb07 b706 	mla	r7, r7, r6, fp
 8022e30:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022e34:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022e38:	f89c c000 	ldrb.w	ip, [ip]
 8022e3c:	b2bf      	uxth	r7, r7
 8022e3e:	435d      	muls	r5, r3
 8022e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e42:	fb08 550b 	mla	r5, r8, fp, r5
 8022e46:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022e4a:	fb01 550b 	mla	r5, r1, fp, r5
 8022e4e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022e52:	fb09 550b 	mla	r5, r9, fp, r5
 8022e56:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8022e5a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022e5e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022e62:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022e66:	fa5f fe8e 	uxtb.w	lr, lr
 8022e6a:	fb1b fb03 	smulbb	fp, fp, r3
 8022e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e70:	fb03 f30c 	mul.w	r3, r3, ip
 8022e74:	f892 c000 	ldrb.w	ip, [r2]
 8022e78:	fb05 b506 	mla	r5, r5, r6, fp
 8022e7c:	fb08 330a 	mla	r3, r8, sl, r3
 8022e80:	b2ad      	uxth	r5, r5
 8022e82:	fb01 330c 	mla	r3, r1, ip, r3
 8022e86:	f890 c000 	ldrb.w	ip, [r0]
 8022e8a:	f105 0b01 	add.w	fp, r5, #1
 8022e8e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e94:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022e98:	fb1e fe03 	smulbb	lr, lr, r3
 8022e9c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022ea0:	1c7b      	adds	r3, r7, #1
 8022ea2:	096d      	lsrs	r5, r5, #5
 8022ea4:	fb0c e606 	mla	r6, ip, r6, lr
 8022ea8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8022eac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022eb0:	b2b6      	uxth	r6, r6
 8022eb2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8022eb6:	1c77      	adds	r7, r6, #1
 8022eb8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022ebc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022ec0:	431f      	orrs	r7, r3
 8022ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ec4:	433d      	orrs	r5, r7
 8022ec6:	801d      	strh	r5, [r3, #0]
 8022ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022eca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022ecc:	3302      	adds	r3, #2
 8022ece:	930c      	str	r3, [sp, #48]	; 0x30
 8022ed0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022ed2:	4413      	add	r3, r2
 8022ed4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022ed6:	931f      	str	r3, [sp, #124]	; 0x7c
 8022ed8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022eda:	4413      	add	r3, r2
 8022edc:	9320      	str	r3, [sp, #128]	; 0x80
 8022ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022ee0:	3b01      	subs	r3, #1
 8022ee2:	9311      	str	r3, [sp, #68]	; 0x44
 8022ee4:	e732      	b.n	8022d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022ee6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022ee8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8022eea:	4433      	add	r3, r6
 8022eec:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8022eee:	931f      	str	r3, [sp, #124]	; 0x7c
 8022ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ef2:	4433      	add	r3, r6
 8022ef4:	9320      	str	r3, [sp, #128]	; 0x80
 8022ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ef8:	3b01      	subs	r3, #1
 8022efa:	9309      	str	r3, [sp, #36]	; 0x24
 8022efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022efe:	3302      	adds	r3, #2
 8022f00:	930a      	str	r3, [sp, #40]	; 0x28
 8022f02:	e702      	b.n	8022d0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022f04:	d027      	beq.n	8022f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f08:	9821      	ldr	r0, [sp, #132]	; 0x84
 8022f0a:	3b01      	subs	r3, #1
 8022f0c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8022f0e:	fb00 5003 	mla	r0, r0, r3, r5
 8022f12:	1400      	asrs	r0, r0, #16
 8022f14:	f53f af16 	bmi.w	8022d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022f18:	3901      	subs	r1, #1
 8022f1a:	4288      	cmp	r0, r1
 8022f1c:	f6bf af12 	bge.w	8022d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022f20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8022f22:	9820      	ldr	r0, [sp, #128]	; 0x80
 8022f24:	fb01 0303 	mla	r3, r1, r3, r0
 8022f28:	141b      	asrs	r3, r3, #16
 8022f2a:	f53f af0b 	bmi.w	8022d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022f2e:	3a01      	subs	r2, #1
 8022f30:	4293      	cmp	r3, r2
 8022f32:	f6bf af07 	bge.w	8022d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f38:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8022f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8022f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f40:	930c      	str	r3, [sp, #48]	; 0x30
 8022f42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	dc70      	bgt.n	802302a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8022f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022f50:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022f54:	930a      	str	r3, [sp, #40]	; 0x28
 8022f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022f58:	2b00      	cmp	r3, #0
 8022f5a:	f340 8124 	ble.w	80231a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8022f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022f62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022f64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022f68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022f6c:	eef0 6a62 	vmov.f32	s13, s5
 8022f70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022f74:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022f78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f7c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8022f80:	eef0 6a43 	vmov.f32	s13, s6
 8022f84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f88:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8022f8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022f90:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022f94:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022f98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022f9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022fa0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022fa4:	ee12 2a90 	vmov	r2, s5
 8022fa8:	eef0 2a47 	vmov.f32	s5, s14
 8022fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fb0:	ee13 2a10 	vmov	r2, s6
 8022fb4:	9321      	str	r3, [sp, #132]	; 0x84
 8022fb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022fb8:	eeb0 3a67 	vmov.f32	s6, s15
 8022fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fc0:	9322      	str	r3, [sp, #136]	; 0x88
 8022fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022fc6:	3b01      	subs	r3, #1
 8022fc8:	930e      	str	r3, [sp, #56]	; 0x38
 8022fca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022fcc:	bf08      	it	eq
 8022fce:	4613      	moveq	r3, r2
 8022fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8022fd2:	e68c      	b.n	8022cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022fd4:	b149      	cbz	r1, 8022fea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8022fd6:	5cb2      	ldrb	r2, [r6, r2]
 8022fd8:	4628      	mov	r0, r5
 8022fda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022fde:	4422      	add	r2, r4
 8022fe0:	46ac      	mov	ip, r5
 8022fe2:	e6f1      	b.n	8022dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022fe4:	4628      	mov	r0, r5
 8022fe6:	462a      	mov	r2, r5
 8022fe8:	e6ee      	b.n	8022dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022fea:	4628      	mov	r0, r5
 8022fec:	462a      	mov	r2, r5
 8022fee:	e7f7      	b.n	8022fe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8022ff0:	1c47      	adds	r7, r0, #1
 8022ff2:	f53f af69 	bmi.w	8022ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022ff6:	42ba      	cmp	r2, r7
 8022ff8:	f6ff af66 	blt.w	8022ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022ffc:	1c6f      	adds	r7, r5, #1
 8022ffe:	f53f af63 	bmi.w	8022ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023002:	42be      	cmp	r6, r7
 8023004:	f6ff af60 	blt.w	8022ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023008:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802300a:	b236      	sxth	r6, r6
 802300c:	b212      	sxth	r2, r2
 802300e:	9002      	str	r0, [sp, #8]
 8023010:	9601      	str	r6, [sp, #4]
 8023012:	9200      	str	r2, [sp, #0]
 8023014:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023016:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802301a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 802301e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023022:	4623      	mov	r3, r4
 8023024:	f7ff fd59 	bl	8022ada <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023028:	e74e      	b.n	8022ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802302a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802302c:	9820      	ldr	r0, [sp, #128]	; 0x80
 802302e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023032:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023034:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023036:	1400      	asrs	r0, r0, #16
 8023038:	142d      	asrs	r5, r5, #16
 802303a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802303c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023040:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023044:	fb02 5000 	mla	r0, r2, r0, r5
 8023048:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802304a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802304e:	182e      	adds	r6, r5, r0
 8023050:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023054:	eb04 0509 	add.w	r5, r4, r9
 8023058:	2b00      	cmp	r3, #0
 802305a:	f000 8096 	beq.w	802318a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802305e:	7877      	ldrb	r7, [r6, #1]
 8023060:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023064:	4427      	add	r7, r4
 8023066:	2900      	cmp	r1, #0
 8023068:	f000 8097 	beq.w	802319a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 802306c:	18b0      	adds	r0, r6, r2
 802306e:	5cb2      	ldrb	r2, [r6, r2]
 8023070:	7840      	ldrb	r0, [r0, #1]
 8023072:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023076:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802307a:	4422      	add	r2, r4
 802307c:	4420      	add	r0, r4
 802307e:	b29b      	uxth	r3, r3
 8023080:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023082:	b289      	uxth	r1, r1
 8023084:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023088:	f8b6 c000 	ldrh.w	ip, [r6]
 802308c:	fb03 f801 	mul.w	r8, r3, r1
 8023090:	011b      	lsls	r3, r3, #4
 8023092:	78be      	ldrb	r6, [r7, #2]
 8023094:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023098:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802309c:	eba3 0308 	sub.w	r3, r3, r8
 80230a0:	f814 9009 	ldrb.w	r9, [r4, r9]
 80230a4:	b289      	uxth	r1, r1
 80230a6:	b29b      	uxth	r3, r3
 80230a8:	ebae 0e01 	sub.w	lr, lr, r1
 80230ac:	435e      	muls	r6, r3
 80230ae:	fa1f fe8e 	uxth.w	lr, lr
 80230b2:	9310      	str	r3, [sp, #64]	; 0x40
 80230b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80230b6:	fb0e 660b 	mla	r6, lr, fp, r6
 80230ba:	f892 b002 	ldrb.w	fp, [r2, #2]
 80230be:	fb01 660b 	mla	r6, r1, fp, r6
 80230c2:	f890 b002 	ldrb.w	fp, [r0, #2]
 80230c6:	fb08 660b 	mla	r6, r8, fp, r6
 80230ca:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80230ce:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80230d2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80230d6:	fb1b fb03 	smulbb	fp, fp, r3
 80230da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80230dc:	fb06 b60a 	mla	r6, r6, sl, fp
 80230e0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80230e4:	787d      	ldrb	r5, [r7, #1]
 80230e6:	783f      	ldrb	r7, [r7, #0]
 80230e8:	b2b6      	uxth	r6, r6
 80230ea:	435d      	muls	r5, r3
 80230ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80230ee:	fb0e 550b 	mla	r5, lr, fp, r5
 80230f2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80230f6:	fb01 550b 	mla	r5, r1, fp, r5
 80230fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 80230fe:	fb08 550b 	mla	r5, r8, fp, r5
 8023102:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023106:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802310a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802310e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023112:	fa5f fc8c 	uxtb.w	ip, ip
 8023116:	fb1b fb03 	smulbb	fp, fp, r3
 802311a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802311c:	437b      	muls	r3, r7
 802311e:	7817      	ldrb	r7, [r2, #0]
 8023120:	fb05 b50a 	mla	r5, r5, sl, fp
 8023124:	fb0e 3309 	mla	r3, lr, r9, r3
 8023128:	b2ad      	uxth	r5, r5
 802312a:	fb01 3307 	mla	r3, r1, r7, r3
 802312e:	7807      	ldrb	r7, [r0, #0]
 8023130:	f105 0b01 	add.w	fp, r5, #1
 8023134:	fb08 3707 	mla	r7, r8, r7, r3
 8023138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802313a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802313e:	fb1c fc03 	smulbb	ip, ip, r3
 8023142:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023146:	1c73      	adds	r3, r6, #1
 8023148:	096d      	lsrs	r5, r5, #5
 802314a:	fb07 c70a 	mla	r7, r7, sl, ip
 802314e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023152:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023156:	b2bf      	uxth	r7, r7
 8023158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802315a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802315e:	1c7a      	adds	r2, r7, #1
 8023160:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023164:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023168:	4316      	orrs	r6, r2
 802316a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802316c:	432e      	orrs	r6, r5
 802316e:	f823 6b02 	strh.w	r6, [r3], #2
 8023172:	930c      	str	r3, [sp, #48]	; 0x30
 8023174:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023176:	4413      	add	r3, r2
 8023178:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802317a:	931f      	str	r3, [sp, #124]	; 0x7c
 802317c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802317e:	4413      	add	r3, r2
 8023180:	9320      	str	r3, [sp, #128]	; 0x80
 8023182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023184:	3b01      	subs	r3, #1
 8023186:	9311      	str	r3, [sp, #68]	; 0x44
 8023188:	e6db      	b.n	8022f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802318a:	b149      	cbz	r1, 80231a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802318c:	5cb2      	ldrb	r2, [r6, r2]
 802318e:	4628      	mov	r0, r5
 8023190:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023194:	4422      	add	r2, r4
 8023196:	462f      	mov	r7, r5
 8023198:	e771      	b.n	802307e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802319a:	4628      	mov	r0, r5
 802319c:	462a      	mov	r2, r5
 802319e:	e76e      	b.n	802307e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80231a0:	4628      	mov	r0, r5
 80231a2:	462a      	mov	r2, r5
 80231a4:	e7f7      	b.n	8023196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80231a6:	b015      	add	sp, #84	; 0x54
 80231a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80231ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b0:	880f      	ldrh	r7, [r1, #0]
 80231b2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80231b6:	023c      	lsls	r4, r7, #8
 80231b8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80231bc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80231c0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 80231c4:	017c      	lsls	r4, r7, #5
 80231c6:	00ff      	lsls	r7, r7, #3
 80231c8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80231cc:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80231d0:	b2ff      	uxtb	r7, r7
 80231d2:	ea4b 0404 	orr.w	r4, fp, r4
 80231d6:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 80231da:	4327      	orrs	r7, r4
 80231dc:	fb05 ca0e 	mla	sl, r5, lr, ip
 80231e0:	2d00      	cmp	r5, #0
 80231e2:	9701      	str	r7, [sp, #4]
 80231e4:	eb02 080a 	add.w	r8, r2, sl
 80231e8:	db7e      	blt.n	80232e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80231ea:	45a9      	cmp	r9, r5
 80231ec:	dd7c      	ble.n	80232e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80231ee:	f1bc 0f00 	cmp.w	ip, #0
 80231f2:	db77      	blt.n	80232e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80231f4:	45e6      	cmp	lr, ip
 80231f6:	dd75      	ble.n	80232e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80231f8:	f812 700a 	ldrb.w	r7, [r2, sl]
 80231fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023200:	441f      	add	r7, r3
 8023202:	f11c 0201 	adds.w	r2, ip, #1
 8023206:	d472      	bmi.n	80232ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023208:	4596      	cmp	lr, r2
 802320a:	dd70      	ble.n	80232ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802320c:	2800      	cmp	r0, #0
 802320e:	d06e      	beq.n	80232ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023210:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023214:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023218:	441c      	add	r4, r3
 802321a:	3501      	adds	r5, #1
 802321c:	d46b      	bmi.n	80232f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802321e:	45a9      	cmp	r9, r5
 8023220:	dd69      	ble.n	80232f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023222:	2e00      	cmp	r6, #0
 8023224:	d067      	beq.n	80232f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023226:	f1bc 0f00 	cmp.w	ip, #0
 802322a:	db62      	blt.n	80232f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 802322c:	45e6      	cmp	lr, ip
 802322e:	dd60      	ble.n	80232f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023230:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023238:	441d      	add	r5, r3
 802323a:	f11c 0201 	adds.w	r2, ip, #1
 802323e:	d45d      	bmi.n	80232fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023240:	4596      	cmp	lr, r2
 8023242:	dd5b      	ble.n	80232fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023244:	2800      	cmp	r0, #0
 8023246:	d059      	beq.n	80232fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023248:	44c6      	add	lr, r8
 802324a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802324e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023252:	4413      	add	r3, r2
 8023254:	b280      	uxth	r0, r0
 8023256:	f897 e002 	ldrb.w	lr, [r7, #2]
 802325a:	b2b2      	uxth	r2, r6
 802325c:	f897 9000 	ldrb.w	r9, [r7]
 8023260:	787f      	ldrb	r7, [r7, #1]
 8023262:	fb00 f602 	mul.w	r6, r0, r2
 8023266:	0100      	lsls	r0, r0, #4
 8023268:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802326c:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8023270:	1b80      	subs	r0, r0, r6
 8023272:	fa1f fc82 	uxth.w	ip, r2
 8023276:	b282      	uxth	r2, r0
 8023278:	78a0      	ldrb	r0, [r4, #2]
 802327a:	eba8 080c 	sub.w	r8, r8, ip
 802327e:	4350      	muls	r0, r2
 8023280:	fa1f f888 	uxth.w	r8, r8
 8023284:	fb08 0e0e 	mla	lr, r8, lr, r0
 8023288:	78a8      	ldrb	r0, [r5, #2]
 802328a:	fb0c e000 	mla	r0, ip, r0, lr
 802328e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023292:	fb06 0e0e 	mla	lr, r6, lr, r0
 8023296:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802329a:	f894 e000 	ldrb.w	lr, [r4]
 802329e:	fb02 fe0e 	mul.w	lr, r2, lr
 80232a2:	fb08 e909 	mla	r9, r8, r9, lr
 80232a6:	f895 e000 	ldrb.w	lr, [r5]
 80232aa:	fb0c 990e 	mla	r9, ip, lr, r9
 80232ae:	f893 e000 	ldrb.w	lr, [r3]
 80232b2:	785b      	ldrb	r3, [r3, #1]
 80232b4:	fb06 9e0e 	mla	lr, r6, lr, r9
 80232b8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80232bc:	ea4e 0e00 	orr.w	lr, lr, r0
 80232c0:	7860      	ldrb	r0, [r4, #1]
 80232c2:	4350      	muls	r0, r2
 80232c4:	786a      	ldrb	r2, [r5, #1]
 80232c6:	fb08 0007 	mla	r0, r8, r7, r0
 80232ca:	fb0c 0202 	mla	r2, ip, r2, r0
 80232ce:	fb06 2303 	mla	r3, r6, r3, r2
 80232d2:	095b      	lsrs	r3, r3, #5
 80232d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232d8:	ea4e 0303 	orr.w	r3, lr, r3
 80232dc:	800b      	strh	r3, [r1, #0]
 80232de:	b003      	add	sp, #12
 80232e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232e4:	af01      	add	r7, sp, #4
 80232e6:	e78c      	b.n	8023202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80232e8:	ac01      	add	r4, sp, #4
 80232ea:	4627      	mov	r7, r4
 80232ec:	e795      	b.n	802321a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80232ee:	ac01      	add	r4, sp, #4
 80232f0:	e793      	b.n	802321a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80232f2:	ad01      	add	r5, sp, #4
 80232f4:	e7a1      	b.n	802323a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80232f6:	ab01      	add	r3, sp, #4
 80232f8:	461d      	mov	r5, r3
 80232fa:	e7ab      	b.n	8023254 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 80232fc:	ab01      	add	r3, sp, #4
 80232fe:	e7a9      	b.n	8023254 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08023300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023304:	b08f      	sub	sp, #60	; 0x3c
 8023306:	920c      	str	r2, [sp, #48]	; 0x30
 8023308:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802330a:	900d      	str	r0, [sp, #52]	; 0x34
 802330c:	910a      	str	r1, [sp, #40]	; 0x28
 802330e:	6850      	ldr	r0, [r2, #4]
 8023310:	9306      	str	r3, [sp, #24]
 8023312:	6812      	ldr	r2, [r2, #0]
 8023314:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8023318:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 802331c:	fb00 1303 	mla	r3, r0, r3, r1
 8023320:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023324:	9307      	str	r3, [sp, #28]
 8023326:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023328:	681b      	ldr	r3, [r3, #0]
 802332a:	9308      	str	r3, [sp, #32]
 802332c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802332e:	685c      	ldr	r4, [r3, #4]
 8023330:	3404      	adds	r4, #4
 8023332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023334:	2b00      	cmp	r3, #0
 8023336:	dc03      	bgt.n	8023340 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8023338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802333a:	2b00      	cmp	r3, #0
 802333c:	f340 81d5 	ble.w	80236ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023340:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023342:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023346:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802334a:	1e48      	subs	r0, r1, #1
 802334c:	1e56      	subs	r6, r2, #1
 802334e:	9b06      	ldr	r3, [sp, #24]
 8023350:	2b00      	cmp	r3, #0
 8023352:	f340 80b6 	ble.w	80234c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023356:	ea5f 472b 	movs.w	r7, fp, asr #16
 802335a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802335e:	d406      	bmi.n	802336e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023360:	4287      	cmp	r7, r0
 8023362:	da04      	bge.n	802336e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023364:	2b00      	cmp	r3, #0
 8023366:	db02      	blt.n	802336e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023368:	42b3      	cmp	r3, r6
 802336a:	f2c0 80ab 	blt.w	80234c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802336e:	3701      	adds	r7, #1
 8023370:	f100 809c 	bmi.w	80234ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023374:	42b9      	cmp	r1, r7
 8023376:	f2c0 8099 	blt.w	80234ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802337a:	3301      	adds	r3, #1
 802337c:	f100 8096 	bmi.w	80234ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023380:	429a      	cmp	r2, r3
 8023382:	f2c0 8093 	blt.w	80234ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023386:	9b06      	ldr	r3, [sp, #24]
 8023388:	930b      	str	r3, [sp, #44]	; 0x2c
 802338a:	9b07      	ldr	r3, [sp, #28]
 802338c:	9309      	str	r3, [sp, #36]	; 0x24
 802338e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023390:	2b00      	cmp	r3, #0
 8023392:	f340 80b4 	ble.w	80234fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8023396:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023398:	142e      	asrs	r6, r5, #16
 802339a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802339c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80233a0:	68c7      	ldr	r7, [r0, #12]
 80233a2:	ea5f 402b 	movs.w	r0, fp, asr #16
 80233a6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80233aa:	6892      	ldr	r2, [r2, #8]
 80233ac:	f100 80fb 	bmi.w	80235a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80233b0:	f102 3cff 	add.w	ip, r2, #4294967295
 80233b4:	4560      	cmp	r0, ip
 80233b6:	f280 80f6 	bge.w	80235a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80233ba:	2e00      	cmp	r6, #0
 80233bc:	f2c0 80f3 	blt.w	80235a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80233c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80233c4:	4566      	cmp	r6, ip
 80233c6:	f280 80ee 	bge.w	80235a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80233ca:	b212      	sxth	r2, r2
 80233cc:	fb06 0002 	mla	r0, r6, r2, r0
 80233d0:	9e08      	ldr	r6, [sp, #32]
 80233d2:	1837      	adds	r7, r6, r0
 80233d4:	5c30      	ldrb	r0, [r6, r0]
 80233d6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80233da:	eb04 0c08 	add.w	ip, r4, r8
 80233de:	2b00      	cmp	r3, #0
 80233e0:	f000 80d3 	beq.w	802358a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80233e4:	787e      	ldrb	r6, [r7, #1]
 80233e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80233ea:	4426      	add	r6, r4
 80233ec:	2900      	cmp	r1, #0
 80233ee:	f000 80d4 	beq.w	802359a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80233f2:	18b8      	adds	r0, r7, r2
 80233f4:	5cba      	ldrb	r2, [r7, r2]
 80233f6:	7840      	ldrb	r0, [r0, #1]
 80233f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80233fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023400:	4422      	add	r2, r4
 8023402:	4420      	add	r0, r4
 8023404:	b29b      	uxth	r3, r3
 8023406:	78b7      	ldrb	r7, [r6, #2]
 8023408:	b289      	uxth	r1, r1
 802340a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802340e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023412:	fb03 f901 	mul.w	r9, r3, r1
 8023416:	011b      	lsls	r3, r3, #4
 8023418:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802341c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023420:	eba3 0309 	sub.w	r3, r3, r9
 8023424:	b289      	uxth	r1, r1
 8023426:	b29b      	uxth	r3, r3
 8023428:	ebae 0e01 	sub.w	lr, lr, r1
 802342c:	435f      	muls	r7, r3
 802342e:	fa1f fe8e 	uxth.w	lr, lr
 8023432:	fb0e 770a 	mla	r7, lr, sl, r7
 8023436:	f892 a002 	ldrb.w	sl, [r2, #2]
 802343a:	fb01 770a 	mla	r7, r1, sl, r7
 802343e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023442:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023446:	f814 7008 	ldrb.w	r7, [r4, r8]
 802344a:	f896 8000 	ldrb.w	r8, [r6]
 802344e:	7876      	ldrb	r6, [r6, #1]
 8023450:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023454:	fb03 f808 	mul.w	r8, r3, r8
 8023458:	4373      	muls	r3, r6
 802345a:	fb0e 8807 	mla	r8, lr, r7, r8
 802345e:	7817      	ldrb	r7, [r2, #0]
 8023460:	fb0e 330c 	mla	r3, lr, ip, r3
 8023464:	fb01 8807 	mla	r8, r1, r7, r8
 8023468:	7807      	ldrb	r7, [r0, #0]
 802346a:	fb09 8707 	mla	r7, r9, r7, r8
 802346e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023472:	ea47 070a 	orr.w	r7, r7, sl
 8023476:	f892 a001 	ldrb.w	sl, [r2, #1]
 802347a:	fb01 310a 	mla	r1, r1, sl, r3
 802347e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023484:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023488:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802348c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023490:	ea47 070a 	orr.w	r7, r7, sl
 8023494:	801f      	strh	r7, [r3, #0]
 8023496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023498:	3302      	adds	r3, #2
 802349a:	9309      	str	r3, [sp, #36]	; 0x24
 802349c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802349e:	449b      	add	fp, r3
 80234a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80234a2:	441d      	add	r5, r3
 80234a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80234a6:	3b01      	subs	r3, #1
 80234a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80234aa:	e770      	b.n	802338e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80234ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80234ae:	449b      	add	fp, r3
 80234b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80234b2:	441d      	add	r5, r3
 80234b4:	9b06      	ldr	r3, [sp, #24]
 80234b6:	3b01      	subs	r3, #1
 80234b8:	9306      	str	r3, [sp, #24]
 80234ba:	9b07      	ldr	r3, [sp, #28]
 80234bc:	3302      	adds	r3, #2
 80234be:	9307      	str	r3, [sp, #28]
 80234c0:	e745      	b.n	802334e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80234c2:	d023      	beq.n	802350c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80234c4:	9b06      	ldr	r3, [sp, #24]
 80234c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80234c8:	3b01      	subs	r3, #1
 80234ca:	fb00 b003 	mla	r0, r0, r3, fp
 80234ce:	1400      	asrs	r0, r0, #16
 80234d0:	f53f af59 	bmi.w	8023386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80234d4:	3901      	subs	r1, #1
 80234d6:	4288      	cmp	r0, r1
 80234d8:	f6bf af55 	bge.w	8023386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80234dc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80234de:	fb01 5303 	mla	r3, r1, r3, r5
 80234e2:	141b      	asrs	r3, r3, #16
 80234e4:	f53f af4f 	bmi.w	8023386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80234e8:	3a01      	subs	r2, #1
 80234ea:	4293      	cmp	r3, r2
 80234ec:	f6bf af4b 	bge.w	8023386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80234f0:	9b06      	ldr	r3, [sp, #24]
 80234f2:	9309      	str	r3, [sp, #36]	; 0x24
 80234f4:	9b07      	ldr	r3, [sp, #28]
 80234f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80234f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	dc70      	bgt.n	80235e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80234fe:	9b06      	ldr	r3, [sp, #24]
 8023500:	9a07      	ldr	r2, [sp, #28]
 8023502:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023506:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802350a:	9307      	str	r3, [sp, #28]
 802350c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802350e:	2b00      	cmp	r3, #0
 8023510:	f340 80eb 	ble.w	80236ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023518:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802351a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802351e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023522:	eef0 6a62 	vmov.f32	s13, s5
 8023526:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802352a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802352e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023532:	ee16 ba90 	vmov	fp, s13
 8023536:	eef0 6a43 	vmov.f32	s13, s6
 802353a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802353e:	ee16 5a90 	vmov	r5, s13
 8023542:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023546:	ee61 7a27 	vmul.f32	s15, s2, s15
 802354a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802354e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023552:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023556:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802355a:	ee12 2a90 	vmov	r2, s5
 802355e:	eef0 2a47 	vmov.f32	s5, s14
 8023562:	fb92 f3f3 	sdiv	r3, r2, r3
 8023566:	ee13 2a10 	vmov	r2, s6
 802356a:	931b      	str	r3, [sp, #108]	; 0x6c
 802356c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802356e:	eeb0 3a67 	vmov.f32	s6, s15
 8023572:	fb92 f3f3 	sdiv	r3, r2, r3
 8023576:	931c      	str	r3, [sp, #112]	; 0x70
 8023578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802357a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802357c:	3b01      	subs	r3, #1
 802357e:	930a      	str	r3, [sp, #40]	; 0x28
 8023580:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023582:	bf08      	it	eq
 8023584:	4613      	moveq	r3, r2
 8023586:	9306      	str	r3, [sp, #24]
 8023588:	e6d3      	b.n	8023332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802358a:	b149      	cbz	r1, 80235a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802358c:	5cba      	ldrb	r2, [r7, r2]
 802358e:	4660      	mov	r0, ip
 8023590:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023594:	4422      	add	r2, r4
 8023596:	4666      	mov	r6, ip
 8023598:	e734      	b.n	8023404 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802359a:	4660      	mov	r0, ip
 802359c:	4662      	mov	r2, ip
 802359e:	e731      	b.n	8023404 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 80235a0:	4660      	mov	r0, ip
 80235a2:	4662      	mov	r2, ip
 80235a4:	e7f7      	b.n	8023596 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80235a6:	f110 0c01 	adds.w	ip, r0, #1
 80235aa:	f53f af74 	bmi.w	8023496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80235ae:	4562      	cmp	r2, ip
 80235b0:	f6ff af71 	blt.w	8023496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80235b4:	f116 0c01 	adds.w	ip, r6, #1
 80235b8:	f53f af6d 	bmi.w	8023496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80235bc:	4567      	cmp	r7, ip
 80235be:	f6ff af6a 	blt.w	8023496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80235c2:	b23f      	sxth	r7, r7
 80235c4:	b212      	sxth	r2, r2
 80235c6:	9701      	str	r7, [sp, #4]
 80235c8:	9200      	str	r2, [sp, #0]
 80235ca:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80235ce:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80235d2:	4623      	mov	r3, r4
 80235d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80235d6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80235da:	f7ff fde7 	bl	80231ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80235de:	e75a      	b.n	8023496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80235e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80235e2:	ea4f 462b 	mov.w	r6, fp, asr #16
 80235e6:	1428      	asrs	r0, r5, #16
 80235e8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80235ec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80235f0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80235f4:	fb02 6000 	mla	r0, r2, r0, r6
 80235f8:	9e08      	ldr	r6, [sp, #32]
 80235fa:	f816 8000 	ldrb.w	r8, [r6, r0]
 80235fe:	1837      	adds	r7, r6, r0
 8023600:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023604:	eb04 0c08 	add.w	ip, r4, r8
 8023608:	2b00      	cmp	r3, #0
 802360a:	d060      	beq.n	80236ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802360c:	787e      	ldrb	r6, [r7, #1]
 802360e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023612:	4426      	add	r6, r4
 8023614:	2900      	cmp	r1, #0
 8023616:	d062      	beq.n	80236de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8023618:	18b8      	adds	r0, r7, r2
 802361a:	5cba      	ldrb	r2, [r7, r2]
 802361c:	7840      	ldrb	r0, [r0, #1]
 802361e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023622:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023626:	4422      	add	r2, r4
 8023628:	4420      	add	r0, r4
 802362a:	b29b      	uxth	r3, r3
 802362c:	78b7      	ldrb	r7, [r6, #2]
 802362e:	b289      	uxth	r1, r1
 8023630:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023634:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023638:	fb03 f901 	mul.w	r9, r3, r1
 802363c:	011b      	lsls	r3, r3, #4
 802363e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023642:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023646:	eba3 0309 	sub.w	r3, r3, r9
 802364a:	b289      	uxth	r1, r1
 802364c:	b29b      	uxth	r3, r3
 802364e:	ebae 0e01 	sub.w	lr, lr, r1
 8023652:	435f      	muls	r7, r3
 8023654:	fa1f fe8e 	uxth.w	lr, lr
 8023658:	fb0e 770a 	mla	r7, lr, sl, r7
 802365c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023660:	fb01 770a 	mla	r7, r1, sl, r7
 8023664:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023668:	fb09 7a0a 	mla	sl, r9, sl, r7
 802366c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023670:	f896 8000 	ldrb.w	r8, [r6]
 8023674:	7876      	ldrb	r6, [r6, #1]
 8023676:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802367a:	fb03 f808 	mul.w	r8, r3, r8
 802367e:	4373      	muls	r3, r6
 8023680:	7856      	ldrb	r6, [r2, #1]
 8023682:	fb0e 8807 	mla	r8, lr, r7, r8
 8023686:	7817      	ldrb	r7, [r2, #0]
 8023688:	fb0e 330c 	mla	r3, lr, ip, r3
 802368c:	fb01 8807 	mla	r8, r1, r7, r8
 8023690:	7807      	ldrb	r7, [r0, #0]
 8023692:	fb01 3306 	mla	r3, r1, r6, r3
 8023696:	fb09 8707 	mla	r7, r9, r7, r8
 802369a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802369e:	ea47 070a 	orr.w	r7, r7, sl
 80236a2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80236a6:	fb09 3a0a 	mla	sl, r9, sl, r3
 80236aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80236ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80236b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80236b4:	ea47 070a 	orr.w	r7, r7, sl
 80236b8:	f823 7b02 	strh.w	r7, [r3], #2
 80236bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80236be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80236c0:	449b      	add	fp, r3
 80236c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80236c4:	441d      	add	r5, r3
 80236c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236c8:	3b01      	subs	r3, #1
 80236ca:	9309      	str	r3, [sp, #36]	; 0x24
 80236cc:	e714      	b.n	80234f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80236ce:	b149      	cbz	r1, 80236e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80236d0:	5cba      	ldrb	r2, [r7, r2]
 80236d2:	4660      	mov	r0, ip
 80236d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80236d8:	4422      	add	r2, r4
 80236da:	4666      	mov	r6, ip
 80236dc:	e7a5      	b.n	802362a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80236de:	4660      	mov	r0, ip
 80236e0:	4662      	mov	r2, ip
 80236e2:	e7a2      	b.n	802362a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80236e4:	4660      	mov	r0, ip
 80236e6:	4662      	mov	r2, ip
 80236e8:	e7f7      	b.n	80236da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80236ea:	b00f      	add	sp, #60	; 0x3c
 80236ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080236f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80236f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236f4:	b085      	sub	sp, #20
 80236f6:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80236fa:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80236fe:	9102      	str	r1, [sp, #8]
 8023700:	2c00      	cmp	r4, #0
 8023702:	fb04 710c 	mla	r1, r4, ip, r7
 8023706:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802370a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802370e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023712:	eb02 0e01 	add.w	lr, r2, r1
 8023716:	f2c0 8122 	blt.w	802395e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802371a:	45a0      	cmp	r8, r4
 802371c:	f340 811f 	ble.w	802395e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8023720:	2f00      	cmp	r7, #0
 8023722:	f2c0 811a 	blt.w	802395a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8023726:	45bc      	cmp	ip, r7
 8023728:	f340 8117 	ble.w	802395a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802372c:	5c52      	ldrb	r2, [r2, r1]
 802372e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023732:	1c7a      	adds	r2, r7, #1
 8023734:	f100 8116 	bmi.w	8023964 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8023738:	4594      	cmp	ip, r2
 802373a:	f340 8113 	ble.w	8023964 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802373e:	2e00      	cmp	r6, #0
 8023740:	f000 8112 	beq.w	8023968 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8023744:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802374c:	3401      	adds	r4, #1
 802374e:	f100 810f 	bmi.w	8023970 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8023752:	45a0      	cmp	r8, r4
 8023754:	f340 810c 	ble.w	8023970 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8023758:	2800      	cmp	r0, #0
 802375a:	f000 810c 	beq.w	8023976 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 802375e:	2f00      	cmp	r7, #0
 8023760:	f2c0 8104 	blt.w	802396c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8023764:	45bc      	cmp	ip, r7
 8023766:	f340 8101 	ble.w	802396c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802376a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802376e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023772:	3701      	adds	r7, #1
 8023774:	f100 8102 	bmi.w	802397c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8023778:	45bc      	cmp	ip, r7
 802377a:	f340 80ff 	ble.w	802397c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802377e:	2e00      	cmp	r6, #0
 8023780:	f000 80fe 	beq.w	8023980 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8023784:	44f4      	add	ip, lr
 8023786:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802378a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802378e:	b2b6      	uxth	r6, r6
 8023790:	b280      	uxth	r0, r0
 8023792:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023796:	fb00 fe06 	mul.w	lr, r0, r6
 802379a:	0136      	lsls	r6, r6, #4
 802379c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80237a0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80237a4:	eba6 070e 	sub.w	r7, r6, lr
 80237a8:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80237ac:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80237b0:	b280      	uxth	r0, r0
 80237b2:	b2bf      	uxth	r7, r7
 80237b4:	1a1b      	subs	r3, r3, r0
 80237b6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80237ba:	fb0a f607 	mul.w	r6, sl, r7
 80237be:	b29b      	uxth	r3, r3
 80237c0:	fb0b 6603 	mla	r6, fp, r3, r6
 80237c4:	fb00 6609 	mla	r6, r0, r9, r6
 80237c8:	fb0e 6608 	mla	r6, lr, r8, r6
 80237cc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80237d0:	9600      	str	r6, [sp, #0]
 80237d2:	2e00      	cmp	r6, #0
 80237d4:	f000 80be 	beq.w	8023954 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80237d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80237dc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80237e0:	9e02      	ldr	r6, [sp, #8]
 80237e2:	fb0b fc0c 	mul.w	ip, fp, ip
 80237e6:	fb0b f505 	mul.w	r5, fp, r5
 80237ea:	8836      	ldrh	r6, [r6, #0]
 80237ec:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80237f0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80237f4:	9501      	str	r5, [sp, #4]
 80237f6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80237fa:	44dc      	add	ip, fp
 80237fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023800:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023804:	9503      	str	r5, [sp, #12]
 8023806:	9d01      	ldr	r5, [sp, #4]
 8023808:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802380c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023810:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023814:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023818:	fb0a fc0c 	mul.w	ip, sl, ip
 802381c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023820:	fb0a fa01 	mul.w	sl, sl, r1
 8023824:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023828:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802382c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023830:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023834:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023838:	4465      	add	r5, ip
 802383a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802383e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023842:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023846:	fb09 fc0c 	mul.w	ip, r9, ip
 802384a:	0a2d      	lsrs	r5, r5, #8
 802384c:	fb09 f904 	mul.w	r9, r9, r4
 8023850:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023854:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023858:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802385c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023860:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023864:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023868:	437d      	muls	r5, r7
 802386a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802386e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023872:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023876:	4461      	add	r1, ip
 8023878:	fb08 f404 	mul.w	r4, r8, r4
 802387c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023880:	fb08 f802 	mul.w	r8, r8, r2
 8023884:	0a09      	lsrs	r1, r1, #8
 8023886:	0a22      	lsrs	r2, r4, #8
 8023888:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802388c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023890:	fb07 f70a 	mul.w	r7, r7, sl
 8023894:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023898:	4414      	add	r4, r2
 802389a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802389e:	0a24      	lsrs	r4, r4, #8
 80238a0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80238a4:	9a03      	ldr	r2, [sp, #12]
 80238a6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80238aa:	fb02 5503 	mla	r5, r2, r3, r5
 80238ae:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80238b2:	9a00      	ldr	r2, [sp, #0]
 80238b4:	fb04 540e 	mla	r4, r4, lr, r5
 80238b8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80238bc:	1235      	asrs	r5, r6, #8
 80238be:	fb01 4100 	mla	r1, r1, r0, r4
 80238c2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80238c6:	0a09      	lsrs	r1, r1, #8
 80238c8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80238cc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80238d0:	fb03 7101 	mla	r1, r3, r1, r7
 80238d4:	fb0e 1e08 	mla	lr, lr, r8, r1
 80238d8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80238dc:	fb00 e101 	mla	r1, r0, r1, lr
 80238e0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80238e4:	b287      	uxth	r7, r0
 80238e6:	0a09      	lsrs	r1, r1, #8
 80238e8:	437a      	muls	r2, r7
 80238ea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80238ee:	1c53      	adds	r3, r2, #1
 80238f0:	4321      	orrs	r1, r4
 80238f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80238f6:	0c0a      	lsrs	r2, r1, #16
 80238f8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80238fc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023900:	b2c8      	uxtb	r0, r1
 8023902:	fb12 f207 	smulbb	r2, r2, r7
 8023906:	fb14 f407 	smulbb	r4, r4, r7
 802390a:	b2db      	uxtb	r3, r3
 802390c:	fb10 f007 	smulbb	r0, r0, r7
 8023910:	fb05 2503 	mla	r5, r5, r3, r2
 8023914:	10f2      	asrs	r2, r6, #3
 8023916:	00f6      	lsls	r6, r6, #3
 8023918:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802391c:	b2ad      	uxth	r5, r5
 802391e:	b2f6      	uxtb	r6, r6
 8023920:	fb02 4203 	mla	r2, r2, r3, r4
 8023924:	fb06 0303 	mla	r3, r6, r3, r0
 8023928:	b294      	uxth	r4, r2
 802392a:	b299      	uxth	r1, r3
 802392c:	1c6b      	adds	r3, r5, #1
 802392e:	1c62      	adds	r2, r4, #1
 8023930:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023934:	1c4b      	adds	r3, r1, #1
 8023936:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802393a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802393e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023942:	0952      	lsrs	r2, r2, #5
 8023944:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023948:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802394c:	432b      	orrs	r3, r5
 802394e:	4313      	orrs	r3, r2
 8023950:	9a02      	ldr	r2, [sp, #8]
 8023952:	8013      	strh	r3, [r2, #0]
 8023954:	b005      	add	sp, #20
 8023956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802395a:	2500      	movs	r5, #0
 802395c:	e6e9      	b.n	8023732 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 802395e:	2100      	movs	r1, #0
 8023960:	460d      	mov	r5, r1
 8023962:	e6f3      	b.n	802374c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023964:	2100      	movs	r1, #0
 8023966:	e6f1      	b.n	802374c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023968:	4631      	mov	r1, r6
 802396a:	e6ef      	b.n	802374c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802396c:	2400      	movs	r4, #0
 802396e:	e700      	b.n	8023772 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8023970:	2200      	movs	r2, #0
 8023972:	4614      	mov	r4, r2
 8023974:	e70b      	b.n	802378e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023976:	4602      	mov	r2, r0
 8023978:	4604      	mov	r4, r0
 802397a:	e708      	b.n	802378e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802397c:	2200      	movs	r2, #0
 802397e:	e706      	b.n	802378e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023980:	4632      	mov	r2, r6
 8023982:	e704      	b.n	802378e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08023984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023988:	b09f      	sub	sp, #124	; 0x7c
 802398a:	921b      	str	r2, [sp, #108]	; 0x6c
 802398c:	9309      	str	r3, [sp, #36]	; 0x24
 802398e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023990:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023994:	901d      	str	r0, [sp, #116]	; 0x74
 8023996:	931c      	str	r3, [sp, #112]	; 0x70
 8023998:	6850      	ldr	r0, [r2, #4]
 802399a:	9119      	str	r1, [sp, #100]	; 0x64
 802399c:	6812      	ldr	r2, [r2, #0]
 802399e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80239a0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80239a4:	fb00 1303 	mla	r3, r0, r3, r1
 80239a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80239ac:	930c      	str	r3, [sp, #48]	; 0x30
 80239ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80239b0:	681b      	ldr	r3, [r3, #0]
 80239b2:	9312      	str	r3, [sp, #72]	; 0x48
 80239b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80239b6:	685e      	ldr	r6, [r3, #4]
 80239b8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80239bc:	3604      	adds	r6, #4
 80239be:	930d      	str	r3, [sp, #52]	; 0x34
 80239c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80239c2:	2b00      	cmp	r3, #0
 80239c4:	dc03      	bgt.n	80239ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80239c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80239c8:	2b00      	cmp	r3, #0
 80239ca:	f340 8387 	ble.w	80240dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80239ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80239d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80239d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80239d8:	1e48      	subs	r0, r1, #1
 80239da:	1e57      	subs	r7, r2, #1
 80239dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239de:	2b00      	cmp	r3, #0
 80239e0:	f340 8194 	ble.w	8023d0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80239e4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80239e6:	142b      	asrs	r3, r5, #16
 80239e8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80239ec:	d406      	bmi.n	80239fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80239ee:	4584      	cmp	ip, r0
 80239f0:	da04      	bge.n	80239fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	db02      	blt.n	80239fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80239f6:	42bb      	cmp	r3, r7
 80239f8:	f2c0 8189 	blt.w	8023d0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80239fc:	f11c 0c01 	adds.w	ip, ip, #1
 8023a00:	f100 8177 	bmi.w	8023cf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023a04:	4561      	cmp	r1, ip
 8023a06:	f2c0 8174 	blt.w	8023cf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023a0a:	3301      	adds	r3, #1
 8023a0c:	f100 8171 	bmi.w	8023cf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023a10:	429a      	cmp	r2, r3
 8023a12:	f2c0 816e 	blt.w	8023cf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a18:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8023a1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023a1e:	2b00      	cmp	r3, #0
 8023a20:	f340 8193 	ble.w	8023d4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023a24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a26:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023a2a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023a2e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023a32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a34:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023a38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a3a:	141b      	asrs	r3, r3, #16
 8023a3c:	f100 81d6 	bmi.w	8023dec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a40:	f100 38ff 	add.w	r8, r0, #4294967295
 8023a44:	4543      	cmp	r3, r8
 8023a46:	f280 81d1 	bge.w	8023dec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a4a:	f1bc 0f00 	cmp.w	ip, #0
 8023a4e:	f2c0 81cd 	blt.w	8023dec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a52:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023a56:	45c4      	cmp	ip, r8
 8023a58:	f280 81c8 	bge.w	8023dec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a5c:	b200      	sxth	r0, r0
 8023a5e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023a60:	fb0c 3300 	mla	r3, ip, r0, r3
 8023a64:	eb04 0803 	add.w	r8, r4, r3
 8023a68:	5ce3      	ldrb	r3, [r4, r3]
 8023a6a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023a6e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023a72:	2a00      	cmp	r2, #0
 8023a74:	f000 81af 	beq.w	8023dd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023a78:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023a7c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023a80:	940e      	str	r4, [sp, #56]	; 0x38
 8023a82:	0e24      	lsrs	r4, r4, #24
 8023a84:	9415      	str	r4, [sp, #84]	; 0x54
 8023a86:	b179      	cbz	r1, 8023aa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023a88:	eb08 0c00 	add.w	ip, r8, r0
 8023a8c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023a90:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023a94:	900a      	str	r0, [sp, #40]	; 0x28
 8023a96:	0e00      	lsrs	r0, r0, #24
 8023a98:	9013      	str	r0, [sp, #76]	; 0x4c
 8023a9a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023a9e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023aa2:	900f      	str	r0, [sp, #60]	; 0x3c
 8023aa4:	0e00      	lsrs	r0, r0, #24
 8023aa6:	9016      	str	r0, [sp, #88]	; 0x58
 8023aa8:	b292      	uxth	r2, r2
 8023aaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023aac:	b289      	uxth	r1, r1
 8023aae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023ab0:	fb02 f901 	mul.w	r9, r2, r1
 8023ab4:	0112      	lsls	r2, r2, #4
 8023ab6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023aba:	eba2 0809 	sub.w	r8, r2, r9
 8023abe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023ac2:	b289      	uxth	r1, r1
 8023ac4:	fa1f f888 	uxth.w	r8, r8
 8023ac8:	1a52      	subs	r2, r2, r1
 8023aca:	fb08 f000 	mul.w	r0, r8, r0
 8023ace:	b292      	uxth	r2, r2
 8023ad0:	fb02 000e 	mla	r0, r2, lr, r0
 8023ad4:	fb01 0004 	mla	r0, r1, r4, r0
 8023ad8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023ada:	fb09 0004 	mla	r0, r9, r4, r0
 8023ade:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	f000 80fa 	beq.w	8023cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023ae8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023aec:	d01b      	beq.n	8023b26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023aee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023af2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023af6:	fb0e fa0a 	mul.w	sl, lr, sl
 8023afa:	fb0e fe03 	mul.w	lr, lr, r3
 8023afe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023b02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023b06:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023b0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b0e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023b12:	4453      	add	r3, sl
 8023b14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b18:	0a1b      	lsrs	r3, r3, #8
 8023b1a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023b1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b22:	ea43 030c 	orr.w	r3, r3, ip
 8023b26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023b28:	2cff      	cmp	r4, #255	; 0xff
 8023b2a:	d021      	beq.n	8023b70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8023b2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023b2e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b32:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023b34:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023b3a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b3e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023b40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b48:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b50:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b54:	44de      	add	lr, fp
 8023b56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b6a:	ea4e 040a 	orr.w	r4, lr, sl
 8023b6e:	940e      	str	r4, [sp, #56]	; 0x38
 8023b70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b72:	2cff      	cmp	r4, #255	; 0xff
 8023b74:	d021      	beq.n	8023bba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023b76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023b78:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b7e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023b84:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b8a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b8e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b92:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b9a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b9e:	44de      	add	lr, fp
 8023ba0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ba4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ba8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023bb4:	ea4e 040a 	orr.w	r4, lr, sl
 8023bb8:	940a      	str	r4, [sp, #40]	; 0x28
 8023bba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023bbc:	2cff      	cmp	r4, #255	; 0xff
 8023bbe:	d021      	beq.n	8023c04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8023bc0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023bc2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023bc6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023bc8:	fb04 fb0b 	mul.w	fp, r4, fp
 8023bcc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023bce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023bd2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023bd4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023bd8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023bdc:	fb04 fa0a 	mul.w	sl, r4, sl
 8023be0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023be4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023be8:	44de      	add	lr, fp
 8023bea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023bee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023bf2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bf6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bfa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023bfe:	ea4e 040a 	orr.w	r4, lr, sl
 8023c02:	940f      	str	r4, [sp, #60]	; 0x3c
 8023c04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023c06:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023c0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023c12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023c14:	fb08 fc0c 	mul.w	ip, r8, ip
 8023c18:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023c1c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023c22:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023c26:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023c2c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023c30:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023c34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023c36:	fb08 f80e 	mul.w	r8, r8, lr
 8023c3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c3e:	fb02 8303 	mla	r3, r2, r3, r8
 8023c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c48:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023c4e:	fb01 330a 	mla	r3, r1, sl, r3
 8023c52:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023c56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023c58:	fb09 3901 	mla	r9, r9, r1, r3
 8023c5c:	883b      	ldrh	r3, [r7, #0]
 8023c5e:	4342      	muls	r2, r0
 8023c60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023c64:	1c50      	adds	r0, r2, #1
 8023c66:	1219      	asrs	r1, r3, #8
 8023c68:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023c6c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023c70:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023c74:	ea4c 0c09 	orr.w	ip, ip, r9
 8023c78:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023c7c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023c80:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023c84:	b2c0      	uxtb	r0, r0
 8023c86:	fb12 f204 	smulbb	r2, r2, r4
 8023c8a:	fa5f fc8c 	uxtb.w	ip, ip
 8023c8e:	fb1e fe04 	smulbb	lr, lr, r4
 8023c92:	fb01 2100 	mla	r1, r1, r0, r2
 8023c96:	10da      	asrs	r2, r3, #3
 8023c98:	fb1c fc04 	smulbb	ip, ip, r4
 8023c9c:	00db      	lsls	r3, r3, #3
 8023c9e:	b289      	uxth	r1, r1
 8023ca0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023ca4:	b2db      	uxtb	r3, r3
 8023ca6:	fb02 e200 	mla	r2, r2, r0, lr
 8023caa:	fb03 c300 	mla	r3, r3, r0, ip
 8023cae:	b292      	uxth	r2, r2
 8023cb0:	fa1f fc83 	uxth.w	ip, r3
 8023cb4:	1c4b      	adds	r3, r1, #1
 8023cb6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023cba:	f10c 0301 	add.w	r3, ip, #1
 8023cbe:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023cc2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023cc6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023cca:	430b      	orrs	r3, r1
 8023ccc:	1c51      	adds	r1, r2, #1
 8023cce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023cd2:	0952      	lsrs	r2, r2, #5
 8023cd4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023cd8:	4313      	orrs	r3, r2
 8023cda:	803b      	strh	r3, [r7, #0]
 8023cdc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023cde:	3702      	adds	r7, #2
 8023ce0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023ce2:	441a      	add	r2, r3
 8023ce4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ce6:	441d      	add	r5, r3
 8023ce8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023cea:	9229      	str	r2, [sp, #164]	; 0xa4
 8023cec:	3b01      	subs	r3, #1
 8023cee:	931a      	str	r3, [sp, #104]	; 0x68
 8023cf0:	e694      	b.n	8023a1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023cf2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023cf4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023cf6:	441c      	add	r4, r3
 8023cf8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cfa:	441d      	add	r5, r3
 8023cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cfe:	9429      	str	r4, [sp, #164]	; 0xa4
 8023d00:	3b01      	subs	r3, #1
 8023d02:	9309      	str	r3, [sp, #36]	; 0x24
 8023d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023d06:	3302      	adds	r3, #2
 8023d08:	930c      	str	r3, [sp, #48]	; 0x30
 8023d0a:	e667      	b.n	80239dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023d0c:	d024      	beq.n	8023d58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8023d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d10:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023d12:	3b01      	subs	r3, #1
 8023d14:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023d16:	fb00 4003 	mla	r0, r0, r3, r4
 8023d1a:	1400      	asrs	r0, r0, #16
 8023d1c:	f53f ae7b 	bmi.w	8023a16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023d20:	3901      	subs	r1, #1
 8023d22:	4288      	cmp	r0, r1
 8023d24:	f6bf ae77 	bge.w	8023a16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023d28:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023d2a:	fb01 5303 	mla	r3, r1, r3, r5
 8023d2e:	141b      	asrs	r3, r3, #16
 8023d30:	f53f ae71 	bmi.w	8023a16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023d34:	3a01      	subs	r2, #1
 8023d36:	4293      	cmp	r3, r2
 8023d38:	f6bf ae6d 	bge.w	8023a16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023d3c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023d40:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8023d44:	f1bb 0f00 	cmp.w	fp, #0
 8023d48:	dc70      	bgt.n	8023e2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8023d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d4c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023d52:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023d56:	930c      	str	r3, [sp, #48]	; 0x30
 8023d58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	f340 81be 	ble.w	80240dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8023d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d6e:	eef0 6a62 	vmov.f32	s13, s5
 8023d72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023d76:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d7e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023d82:	eef0 6a43 	vmov.f32	s13, s6
 8023d86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d8a:	ee16 5a90 	vmov	r5, s13
 8023d8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d92:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023da2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023da6:	ee12 2a90 	vmov	r2, s5
 8023daa:	eef0 2a47 	vmov.f32	s5, s14
 8023dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8023db2:	ee13 2a10 	vmov	r2, s6
 8023db6:	932b      	str	r3, [sp, #172]	; 0xac
 8023db8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023dba:	eeb0 3a67 	vmov.f32	s6, s15
 8023dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8023dc2:	932c      	str	r3, [sp, #176]	; 0xb0
 8023dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023dc6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023dc8:	3b01      	subs	r3, #1
 8023dca:	9319      	str	r3, [sp, #100]	; 0x64
 8023dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023dce:	bf08      	it	eq
 8023dd0:	4613      	moveq	r3, r2
 8023dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8023dd4:	e5f4      	b.n	80239c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023dd6:	2900      	cmp	r1, #0
 8023dd8:	f43f ae66 	beq.w	8023aa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023ddc:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023de0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023de4:	900a      	str	r0, [sp, #40]	; 0x28
 8023de6:	0e00      	lsrs	r0, r0, #24
 8023de8:	9013      	str	r0, [sp, #76]	; 0x4c
 8023dea:	e65d      	b.n	8023aa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023dec:	f113 0801 	adds.w	r8, r3, #1
 8023df0:	f53f af74 	bmi.w	8023cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023df4:	4540      	cmp	r0, r8
 8023df6:	f6ff af71 	blt.w	8023cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023dfa:	f11c 0801 	adds.w	r8, ip, #1
 8023dfe:	f53f af6d 	bmi.w	8023cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023e02:	45c6      	cmp	lr, r8
 8023e04:	f6ff af6a 	blt.w	8023cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023e08:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023e0a:	b200      	sxth	r0, r0
 8023e0c:	9302      	str	r3, [sp, #8]
 8023e0e:	fa0f f38e 	sxth.w	r3, lr
 8023e12:	9000      	str	r0, [sp, #0]
 8023e14:	9301      	str	r3, [sp, #4]
 8023e16:	4633      	mov	r3, r6
 8023e18:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023e1a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023e1e:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023e22:	4639      	mov	r1, r7
 8023e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023e26:	f7ff fc63 	bl	80236f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8023e2a:	e757      	b.n	8023cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023e2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023e2e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023e32:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023e34:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023e38:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023e3a:	1427      	asrs	r7, r4, #16
 8023e3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023e3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e42:	142b      	asrs	r3, r5, #16
 8023e44:	fb01 7303 	mla	r3, r1, r3, r7
 8023e48:	18e7      	adds	r7, r4, r3
 8023e4a:	5ce3      	ldrb	r3, [r4, r3]
 8023e4c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023e50:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023e54:	2a00      	cmp	r2, #0
 8023e56:	f000 8137 	beq.w	80240c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8023e5a:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023e5e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023e62:	9410      	str	r4, [sp, #64]	; 0x40
 8023e64:	0e24      	lsrs	r4, r4, #24
 8023e66:	9417      	str	r4, [sp, #92]	; 0x5c
 8023e68:	b170      	cbz	r0, 8023e88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023e6a:	eb07 0e01 	add.w	lr, r7, r1
 8023e6e:	5c79      	ldrb	r1, [r7, r1]
 8023e70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e74:	910b      	str	r1, [sp, #44]	; 0x2c
 8023e76:	0e09      	lsrs	r1, r1, #24
 8023e78:	9114      	str	r1, [sp, #80]	; 0x50
 8023e7a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023e7e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e82:	9111      	str	r1, [sp, #68]	; 0x44
 8023e84:	0e09      	lsrs	r1, r1, #24
 8023e86:	9118      	str	r1, [sp, #96]	; 0x60
 8023e88:	b292      	uxth	r2, r2
 8023e8a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023e8c:	b280      	uxth	r0, r0
 8023e8e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e90:	fb02 f800 	mul.w	r8, r2, r0
 8023e94:	0112      	lsls	r2, r2, #4
 8023e96:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023e9a:	eba2 0e08 	sub.w	lr, r2, r8
 8023e9e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023ea2:	b280      	uxth	r0, r0
 8023ea4:	fa1f fe8e 	uxth.w	lr, lr
 8023ea8:	1a12      	subs	r2, r2, r0
 8023eaa:	fb0e f101 	mul.w	r1, lr, r1
 8023eae:	b292      	uxth	r2, r2
 8023eb0:	fb02 110c 	mla	r1, r2, ip, r1
 8023eb4:	fb00 1104 	mla	r1, r0, r4, r1
 8023eb8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023eba:	fb08 1104 	mla	r1, r8, r4, r1
 8023ebe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023ec2:	2900      	cmp	r1, #0
 8023ec4:	f000 80f5 	beq.w	80240b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023ec8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023ecc:	d019      	beq.n	8023f02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8023ece:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023ed2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ed6:	fb0c fa0a 	mul.w	sl, ip, sl
 8023eda:	fb0c fc03 	mul.w	ip, ip, r3
 8023ede:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ee2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ee6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023eea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023eee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023ef2:	4453      	add	r3, sl
 8023ef4:	0a3f      	lsrs	r7, r7, #8
 8023ef6:	0a1b      	lsrs	r3, r3, #8
 8023ef8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023efc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f00:	433b      	orrs	r3, r7
 8023f02:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023f04:	2cff      	cmp	r4, #255	; 0xff
 8023f06:	d020      	beq.n	8023f4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023f08:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023f0a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f0e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023f10:	4367      	muls	r7, r4
 8023f12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023f14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f18:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f1c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023f1e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f26:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f2a:	44bc      	add	ip, r7
 8023f2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f44:	ea4c 040a 	orr.w	r4, ip, sl
 8023f48:	9410      	str	r4, [sp, #64]	; 0x40
 8023f4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f4c:	2cff      	cmp	r4, #255	; 0xff
 8023f4e:	d020      	beq.n	8023f92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8023f50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023f52:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f58:	4367      	muls	r7, r4
 8023f5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023f5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f64:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f72:	44bc      	add	ip, r7
 8023f74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f8c:	ea4c 040a 	orr.w	r4, ip, sl
 8023f90:	940b      	str	r4, [sp, #44]	; 0x2c
 8023f92:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023f94:	2cff      	cmp	r4, #255	; 0xff
 8023f96:	d020      	beq.n	8023fda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8023f98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f9e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023fa0:	4367      	muls	r7, r4
 8023fa2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023fa4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023fa8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023fac:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023fae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023fb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fb6:	fb04 fa0a 	mul.w	sl, r4, sl
 8023fba:	44bc      	add	ip, r7
 8023fbc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023fc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fc4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023fc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023fd4:	ea4c 040a 	orr.w	r4, ip, sl
 8023fd8:	9411      	str	r4, [sp, #68]	; 0x44
 8023fda:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023fdc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023fe0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023fe4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023fe8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023fea:	fb0e f707 	mul.w	r7, lr, r7
 8023fee:	fb02 770c 	mla	r7, r2, ip, r7
 8023ff2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023ff6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023ff8:	fb00 770c 	mla	r7, r0, ip, r7
 8023ffc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024000:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024002:	fb08 770c 	mla	r7, r8, ip, r7
 8024006:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802400a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802400c:	fb0e fe0c 	mul.w	lr, lr, ip
 8024010:	0a3f      	lsrs	r7, r7, #8
 8024012:	fb02 e303 	mla	r3, r2, r3, lr
 8024016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024018:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802401c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024020:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024022:	fb00 330a 	mla	r3, r0, sl, r3
 8024026:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802402a:	f8b9 0000 	ldrh.w	r0, [r9]
 802402e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024034:	1202      	asrs	r2, r0, #8
 8024036:	434b      	muls	r3, r1
 8024038:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802403c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024040:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024044:	1c59      	adds	r1, r3, #1
 8024046:	ea47 070c 	orr.w	r7, r7, ip
 802404a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802404e:	0c3b      	lsrs	r3, r7, #16
 8024050:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024054:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024058:	b2ff      	uxtb	r7, r7
 802405a:	fb13 f304 	smulbb	r3, r3, r4
 802405e:	b2c9      	uxtb	r1, r1
 8024060:	fb1c fc04 	smulbb	ip, ip, r4
 8024064:	fb02 3201 	mla	r2, r2, r1, r3
 8024068:	10c3      	asrs	r3, r0, #3
 802406a:	fb17 f704 	smulbb	r7, r7, r4
 802406e:	00c0      	lsls	r0, r0, #3
 8024070:	b292      	uxth	r2, r2
 8024072:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024076:	b2c0      	uxtb	r0, r0
 8024078:	fb03 c301 	mla	r3, r3, r1, ip
 802407c:	f102 0c01 	add.w	ip, r2, #1
 8024080:	fb00 7001 	mla	r0, r0, r1, r7
 8024084:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024088:	b280      	uxth	r0, r0
 802408a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802408e:	b29b      	uxth	r3, r3
 8024090:	1c42      	adds	r2, r0, #1
 8024092:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024096:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802409a:	ea42 020c 	orr.w	r2, r2, ip
 802409e:	f103 0c01 	add.w	ip, r3, #1
 80240a2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80240a6:	095b      	lsrs	r3, r3, #5
 80240a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80240ac:	431a      	orrs	r2, r3
 80240ae:	f8a9 2000 	strh.w	r2, [r9]
 80240b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80240b4:	f109 0902 	add.w	r9, r9, #2
 80240b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80240ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80240be:	441a      	add	r2, r3
 80240c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80240c2:	9229      	str	r2, [sp, #164]	; 0xa4
 80240c4:	441d      	add	r5, r3
 80240c6:	e63d      	b.n	8023d44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80240c8:	2800      	cmp	r0, #0
 80240ca:	f43f aedd 	beq.w	8023e88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80240ce:	5c79      	ldrb	r1, [r7, r1]
 80240d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80240d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80240d6:	0e09      	lsrs	r1, r1, #24
 80240d8:	9114      	str	r1, [sp, #80]	; 0x50
 80240da:	e6d5      	b.n	8023e88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80240dc:	b01f      	add	sp, #124	; 0x7c
 80240de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080240e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80240e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240e6:	b089      	sub	sp, #36	; 0x24
 80240e8:	9101      	str	r1, [sp, #4]
 80240ea:	9801      	ldr	r0, [sp, #4]
 80240ec:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 80240f0:	8800      	ldrh	r0, [r0, #0]
 80240f2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 80240f6:	1206      	asrs	r6, r0, #8
 80240f8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80240fc:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8024100:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024104:	9602      	str	r6, [sp, #8]
 8024106:	10c6      	asrs	r6, r0, #3
 8024108:	00c0      	lsls	r0, r0, #3
 802410a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802410e:	b2c0      	uxtb	r0, r0
 8024110:	9603      	str	r6, [sp, #12]
 8024112:	9004      	str	r0, [sp, #16]
 8024114:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8024118:	fb07 100c 	mla	r0, r7, ip, r1
 802411c:	2f00      	cmp	r7, #0
 802411e:	eb02 0e00 	add.w	lr, r2, r0
 8024122:	f2c0 810a 	blt.w	802433a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024126:	45b8      	cmp	r8, r7
 8024128:	f340 8107 	ble.w	802433a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802412c:	2900      	cmp	r1, #0
 802412e:	f2c0 8102 	blt.w	8024336 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024132:	458c      	cmp	ip, r1
 8024134:	f340 80ff 	ble.w	8024336 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024138:	5c12      	ldrb	r2, [r2, r0]
 802413a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802413e:	1c4a      	adds	r2, r1, #1
 8024140:	f100 80fe 	bmi.w	8024340 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024144:	4594      	cmp	ip, r2
 8024146:	f340 80fb 	ble.w	8024340 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802414a:	2d00      	cmp	r5, #0
 802414c:	f000 80fa 	beq.w	8024344 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024150:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024154:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024158:	3701      	adds	r7, #1
 802415a:	f100 80f7 	bmi.w	802434c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802415e:	45b8      	cmp	r8, r7
 8024160:	f340 80f4 	ble.w	802434c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024164:	2c00      	cmp	r4, #0
 8024166:	f000 80f4 	beq.w	8024352 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802416a:	2900      	cmp	r1, #0
 802416c:	eb0e 020c 	add.w	r2, lr, ip
 8024170:	f2c0 80ea 	blt.w	8024348 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024174:	458c      	cmp	ip, r1
 8024176:	f340 80e7 	ble.w	8024348 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802417a:	f81e 700c 	ldrb.w	r7, [lr, ip]
 802417e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024182:	3101      	adds	r1, #1
 8024184:	f100 80e8 	bmi.w	8024358 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024188:	458c      	cmp	ip, r1
 802418a:	f340 80e5 	ble.w	8024358 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802418e:	2d00      	cmp	r5, #0
 8024190:	f000 80e4 	beq.w	802435c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024194:	7852      	ldrb	r2, [r2, #1]
 8024196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802419a:	0e0b      	lsrs	r3, r1, #24
 802419c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80241a0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80241a4:	9300      	str	r3, [sp, #0]
 80241a6:	b2a4      	uxth	r4, r4
 80241a8:	b2ab      	uxth	r3, r5
 80241aa:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80241ae:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80241b2:	fb03 f904 	mul.w	r9, r3, r4
 80241b6:	011b      	lsls	r3, r3, #4
 80241b8:	fb0a f505 	mul.w	r5, sl, r5
 80241bc:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80241c0:	eba3 0e09 	sub.w	lr, r3, r9
 80241c4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80241c8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80241cc:	0a28      	lsrs	r0, r5, #8
 80241ce:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80241d2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80241d6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80241da:	fb0a f303 	mul.w	r3, sl, r3
 80241de:	fb08 f707 	mul.w	r7, r8, r7
 80241e2:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80241e6:	4405      	add	r5, r0
 80241e8:	fb08 fc0c 	mul.w	ip, r8, ip
 80241ec:	b2a4      	uxth	r4, r4
 80241ee:	0a2d      	lsrs	r5, r5, #8
 80241f0:	fa1f fe8e 	uxth.w	lr, lr
 80241f4:	1b12      	subs	r2, r2, r4
 80241f6:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80241fa:	b292      	uxth	r2, r2
 80241fc:	9005      	str	r0, [sp, #20]
 80241fe:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8024202:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024206:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802420a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802420e:	0a1b      	lsrs	r3, r3, #8
 8024210:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024214:	9306      	str	r3, [sp, #24]
 8024216:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802421a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802421e:	4460      	add	r0, ip
 8024220:	fb0b f303 	mul.w	r3, fp, r3
 8024224:	fb0b f606 	mul.w	r6, fp, r6
 8024228:	0a00      	lsrs	r0, r0, #8
 802422a:	0a1d      	lsrs	r5, r3, #8
 802422c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024230:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024234:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024238:	441d      	add	r5, r3
 802423a:	f506 7380 	add.w	r3, r6, #256	; 0x100
 802423e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024242:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8024246:	0a2d      	lsrs	r5, r5, #8
 8024248:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802424c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8024250:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024254:	0a36      	lsrs	r6, r6, #8
 8024256:	0a1b      	lsrs	r3, r3, #8
 8024258:	fb05 f50e 	mul.w	r5, r5, lr
 802425c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024260:	9307      	str	r3, [sp, #28]
 8024262:	0e0b      	lsrs	r3, r1, #24
 8024264:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024268:	fb0e f606 	mul.w	r6, lr, r6
 802426c:	435f      	muls	r7, r3
 802426e:	4359      	muls	r1, r3
 8024270:	9b05      	ldr	r3, [sp, #20]
 8024272:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024276:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802427a:	fb03 5502 	mla	r5, r3, r2, r5
 802427e:	9b06      	ldr	r3, [sp, #24]
 8024280:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024284:	fb0e fe0b 	mul.w	lr, lr, fp
 8024288:	44bc      	add	ip, r7
 802428a:	f501 7780 	add.w	r7, r1, #256	; 0x100
 802428e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024292:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024296:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802429a:	0a09      	lsrs	r1, r1, #8
 802429c:	fb0c 5509 	mla	r5, ip, r9, r5
 80242a0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80242a4:	fb00 5504 	mla	r5, r0, r4, r5
 80242a8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80242ac:	9b07      	ldr	r3, [sp, #28]
 80242ae:	fb02 6000 	mla	r0, r2, r0, r6
 80242b2:	0a2d      	lsrs	r5, r5, #8
 80242b4:	fb02 e20a 	mla	r2, r2, sl, lr
 80242b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242bc:	fb09 0001 	mla	r0, r9, r1, r0
 80242c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80242c4:	fb04 0003 	mla	r0, r4, r3, r0
 80242c8:	9b00      	ldr	r3, [sp, #0]
 80242ca:	fb04 2408 	mla	r4, r4, r8, r2
 80242ce:	9a04      	ldr	r2, [sp, #16]
 80242d0:	0a00      	lsrs	r0, r0, #8
 80242d2:	fb09 4903 	mla	r9, r9, r3, r4
 80242d6:	9b02      	ldr	r3, [sp, #8]
 80242d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80242dc:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80242e0:	4305      	orrs	r5, r0
 80242e2:	fa5f f989 	uxtb.w	r9, r9
 80242e6:	fb03 f109 	mul.w	r1, r3, r9
 80242ea:	9b03      	ldr	r3, [sp, #12]
 80242ec:	fb03 f309 	mul.w	r3, r3, r9
 80242f0:	fb02 f909 	mul.w	r9, r2, r9
 80242f4:	1c4a      	adds	r2, r1, #1
 80242f6:	1c58      	adds	r0, r3, #1
 80242f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80242fc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024300:	0c2a      	lsrs	r2, r5, #16
 8024302:	0a2b      	lsrs	r3, r5, #8
 8024304:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024308:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802430c:	0212      	lsls	r2, r2, #8
 802430e:	00db      	lsls	r3, r3, #3
 8024310:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024314:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024318:	4313      	orrs	r3, r2
 802431a:	f109 0201 	add.w	r2, r9, #1
 802431e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024322:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8024326:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802432a:	431d      	orrs	r5, r3
 802432c:	9b01      	ldr	r3, [sp, #4]
 802432e:	801d      	strh	r5, [r3, #0]
 8024330:	b009      	add	sp, #36	; 0x24
 8024332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024336:	2000      	movs	r0, #0
 8024338:	e701      	b.n	802413e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802433a:	2600      	movs	r6, #0
 802433c:	4630      	mov	r0, r6
 802433e:	e70b      	b.n	8024158 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024340:	2600      	movs	r6, #0
 8024342:	e709      	b.n	8024158 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024344:	462e      	mov	r6, r5
 8024346:	e707      	b.n	8024158 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024348:	2700      	movs	r7, #0
 802434a:	e71a      	b.n	8024182 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 802434c:	2100      	movs	r1, #0
 802434e:	460f      	mov	r7, r1
 8024350:	e723      	b.n	802419a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024352:	4621      	mov	r1, r4
 8024354:	4627      	mov	r7, r4
 8024356:	e720      	b.n	802419a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024358:	2100      	movs	r1, #0
 802435a:	e71e      	b.n	802419a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802435c:	4629      	mov	r1, r5
 802435e:	e71c      	b.n	802419a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08024360 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024364:	b09b      	sub	sp, #108	; 0x6c
 8024366:	9218      	str	r2, [sp, #96]	; 0x60
 8024368:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802436a:	9019      	str	r0, [sp, #100]	; 0x64
 802436c:	9116      	str	r1, [sp, #88]	; 0x58
 802436e:	6850      	ldr	r0, [r2, #4]
 8024370:	9307      	str	r3, [sp, #28]
 8024372:	6812      	ldr	r2, [r2, #0]
 8024374:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8024376:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802437a:	fb00 1303 	mla	r3, r0, r3, r1
 802437e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024382:	930a      	str	r3, [sp, #40]	; 0x28
 8024384:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024386:	681b      	ldr	r3, [r3, #0]
 8024388:	930f      	str	r3, [sp, #60]	; 0x3c
 802438a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802438c:	685e      	ldr	r6, [r3, #4]
 802438e:	3604      	adds	r6, #4
 8024390:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024392:	2b00      	cmp	r3, #0
 8024394:	dc03      	bgt.n	802439e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024396:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024398:	2b00      	cmp	r3, #0
 802439a:	f340 8373 	ble.w	8024a84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802439e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243a8:	1e48      	subs	r0, r1, #1
 80243aa:	1e57      	subs	r7, r2, #1
 80243ac:	9b07      	ldr	r3, [sp, #28]
 80243ae:	2b00      	cmp	r3, #0
 80243b0:	f340 818f 	ble.w	80246d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80243b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80243b6:	142b      	asrs	r3, r5, #16
 80243b8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80243bc:	d406      	bmi.n	80243cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80243be:	4584      	cmp	ip, r0
 80243c0:	da04      	bge.n	80243cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80243c2:	2b00      	cmp	r3, #0
 80243c4:	db02      	blt.n	80243cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80243c6:	42bb      	cmp	r3, r7
 80243c8:	f2c0 8184 	blt.w	80246d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80243cc:	f11c 0c01 	adds.w	ip, ip, #1
 80243d0:	f100 8172 	bmi.w	80246b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80243d4:	4561      	cmp	r1, ip
 80243d6:	f2c0 816f 	blt.w	80246b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80243da:	3301      	adds	r3, #1
 80243dc:	f100 816c 	bmi.w	80246b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80243e0:	429a      	cmp	r2, r3
 80243e2:	f2c0 8169 	blt.w	80246b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80243e6:	9b07      	ldr	r3, [sp, #28]
 80243e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80243ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80243ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	f340 818e 	ble.w	8024710 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80243f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80243f6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80243fa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80243fe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024402:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024404:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024408:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802440a:	141b      	asrs	r3, r3, #16
 802440c:	f100 81d1 	bmi.w	80247b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024410:	f101 38ff 	add.w	r8, r1, #4294967295
 8024414:	4543      	cmp	r3, r8
 8024416:	f280 81cc 	bge.w	80247b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802441a:	f1bc 0f00 	cmp.w	ip, #0
 802441e:	f2c0 81c8 	blt.w	80247b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024422:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024426:	45c4      	cmp	ip, r8
 8024428:	f280 81c3 	bge.w	80247b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802442c:	b209      	sxth	r1, r1
 802442e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024430:	fb0c 3301 	mla	r3, ip, r1, r3
 8024434:	eb04 0803 	add.w	r8, r4, r3
 8024438:	5ce3      	ldrb	r3, [r4, r3]
 802443a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802443e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024442:	2a00      	cmp	r2, #0
 8024444:	f000 81aa 	beq.w	802479c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8024448:	f898 c001 	ldrb.w	ip, [r8, #1]
 802444c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024450:	940b      	str	r4, [sp, #44]	; 0x2c
 8024452:	0e24      	lsrs	r4, r4, #24
 8024454:	9412      	str	r4, [sp, #72]	; 0x48
 8024456:	b178      	cbz	r0, 8024478 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024458:	eb08 0c01 	add.w	ip, r8, r1
 802445c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024460:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024464:	9108      	str	r1, [sp, #32]
 8024466:	0e09      	lsrs	r1, r1, #24
 8024468:	9110      	str	r1, [sp, #64]	; 0x40
 802446a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802446e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024472:	910c      	str	r1, [sp, #48]	; 0x30
 8024474:	0e09      	lsrs	r1, r1, #24
 8024476:	9113      	str	r1, [sp, #76]	; 0x4c
 8024478:	b292      	uxth	r2, r2
 802447a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802447c:	b280      	uxth	r0, r0
 802447e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024480:	fb02 f900 	mul.w	r9, r2, r0
 8024484:	0112      	lsls	r2, r2, #4
 8024486:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802448a:	eba2 0809 	sub.w	r8, r2, r9
 802448e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024492:	b280      	uxth	r0, r0
 8024494:	fa1f f888 	uxth.w	r8, r8
 8024498:	1a12      	subs	r2, r2, r0
 802449a:	fb08 f101 	mul.w	r1, r8, r1
 802449e:	b292      	uxth	r2, r2
 80244a0:	fb02 110e 	mla	r1, r2, lr, r1
 80244a4:	fb00 1104 	mla	r1, r0, r4, r1
 80244a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244aa:	fb09 1104 	mla	r1, r9, r4, r1
 80244ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80244b2:	2900      	cmp	r1, #0
 80244b4:	f000 80f5 	beq.w	80246a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80244b8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80244bc:	d01b      	beq.n	80244f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80244be:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80244c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80244c6:	fb0e fa0a 	mul.w	sl, lr, sl
 80244ca:	fb0e fe03 	mul.w	lr, lr, r3
 80244ce:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80244d2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80244d6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80244da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244de:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80244e2:	4453      	add	r3, sl
 80244e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244e8:	0a1b      	lsrs	r3, r3, #8
 80244ea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80244ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244f2:	ea43 030c 	orr.w	r3, r3, ip
 80244f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80244f8:	2cff      	cmp	r4, #255	; 0xff
 80244fa:	d021      	beq.n	8024540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80244fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80244fe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024502:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024504:	fb04 fb0b 	mul.w	fp, r4, fp
 8024508:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802450a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802450e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024510:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024514:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024518:	fb04 fa0a 	mul.w	sl, r4, sl
 802451c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024520:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024524:	44de      	add	lr, fp
 8024526:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802452a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802452e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024532:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024536:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802453a:	ea4e 040a 	orr.w	r4, lr, sl
 802453e:	940b      	str	r4, [sp, #44]	; 0x2c
 8024540:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024542:	2cff      	cmp	r4, #255	; 0xff
 8024544:	d021      	beq.n	802458a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024546:	9c08      	ldr	r4, [sp, #32]
 8024548:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802454c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802454e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024552:	9c08      	ldr	r4, [sp, #32]
 8024554:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024558:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802455a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802455e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024562:	fb04 fa0a 	mul.w	sl, r4, sl
 8024566:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802456a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802456e:	44de      	add	lr, fp
 8024570:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024574:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024578:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802457c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024580:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024584:	ea4e 040a 	orr.w	r4, lr, sl
 8024588:	9408      	str	r4, [sp, #32]
 802458a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802458c:	2cff      	cmp	r4, #255	; 0xff
 802458e:	d021      	beq.n	80245d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8024590:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024592:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024596:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024598:	fb04 fb0b 	mul.w	fp, r4, fp
 802459c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802459e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80245a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80245a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80245b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80245b8:	44de      	add	lr, fp
 80245ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80245be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245ce:	ea4e 040a 	orr.w	r4, lr, sl
 80245d2:	940c      	str	r4, [sp, #48]	; 0x30
 80245d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80245d6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80245da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245de:	43c9      	mvns	r1, r1
 80245e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80245e4:	9c08      	ldr	r4, [sp, #32]
 80245e6:	fb08 fc0c 	mul.w	ip, r8, ip
 80245ea:	fb02 cc0e 	mla	ip, r2, lr, ip
 80245ee:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80245f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80245f4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80245f8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80245fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80245fe:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024602:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024606:	fb08 f80e 	mul.w	r8, r8, lr
 802460a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802460e:	fa5f fe81 	uxtb.w	lr, r1
 8024612:	fb02 8303 	mla	r3, r2, r3, r8
 8024616:	9a08      	ldr	r2, [sp, #32]
 8024618:	f8b7 8000 	ldrh.w	r8, [r7]
 802461c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024620:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024626:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802462a:	fb00 330a 	mla	r3, r0, sl, r3
 802462e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8024632:	ea4f 2228 	mov.w	r2, r8, asr #8
 8024636:	fb09 3900 	mla	r9, r9, r0, r3
 802463a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802463e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024642:	b2c9      	uxtb	r1, r1
 8024644:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024648:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802464c:	fb02 f20e 	mul.w	r2, r2, lr
 8024650:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024654:	fb00 f00e 	mul.w	r0, r0, lr
 8024658:	1c53      	adds	r3, r2, #1
 802465a:	fb01 f10e 	mul.w	r1, r1, lr
 802465e:	ea4c 0c09 	orr.w	ip, ip, r9
 8024662:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024666:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802466a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802466e:	4a60      	ldr	r2, [pc, #384]	; (80247f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8024670:	b2db      	uxtb	r3, r3
 8024672:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8024676:	1c43      	adds	r3, r0, #1
 8024678:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802467c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024680:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024684:	00db      	lsls	r3, r3, #3
 8024686:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802468a:	4313      	orrs	r3, r2
 802468c:	1c4a      	adds	r2, r1, #1
 802468e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024692:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024696:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802469a:	ea4c 0c03 	orr.w	ip, ip, r3
 802469e:	f8a7 c000 	strh.w	ip, [r7]
 80246a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80246a4:	3702      	adds	r7, #2
 80246a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80246a8:	441a      	add	r2, r3
 80246aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80246ac:	441d      	add	r5, r3
 80246ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246b0:	9225      	str	r2, [sp, #148]	; 0x94
 80246b2:	3b01      	subs	r3, #1
 80246b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80246b6:	e699      	b.n	80243ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80246b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80246ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80246bc:	441c      	add	r4, r3
 80246be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80246c0:	441d      	add	r5, r3
 80246c2:	9b07      	ldr	r3, [sp, #28]
 80246c4:	9425      	str	r4, [sp, #148]	; 0x94
 80246c6:	3b01      	subs	r3, #1
 80246c8:	9307      	str	r3, [sp, #28]
 80246ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246cc:	3302      	adds	r3, #2
 80246ce:	930a      	str	r3, [sp, #40]	; 0x28
 80246d0:	e66c      	b.n	80243ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80246d2:	d024      	beq.n	802471e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80246d4:	9b07      	ldr	r3, [sp, #28]
 80246d6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80246d8:	3b01      	subs	r3, #1
 80246da:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80246dc:	fb00 4003 	mla	r0, r0, r3, r4
 80246e0:	1400      	asrs	r0, r0, #16
 80246e2:	f53f ae80 	bmi.w	80243e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80246e6:	3901      	subs	r1, #1
 80246e8:	4288      	cmp	r0, r1
 80246ea:	f6bf ae7c 	bge.w	80243e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80246ee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80246f0:	fb01 5303 	mla	r3, r1, r3, r5
 80246f4:	141b      	asrs	r3, r3, #16
 80246f6:	f53f ae76 	bmi.w	80243e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80246fa:	3a01      	subs	r2, #1
 80246fc:	4293      	cmp	r3, r2
 80246fe:	f6bf ae72 	bge.w	80243e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024702:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024706:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802470a:	f1bb 0f00 	cmp.w	fp, #0
 802470e:	dc71      	bgt.n	80247f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024710:	9b07      	ldr	r3, [sp, #28]
 8024712:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024718:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802471c:	930a      	str	r3, [sp, #40]	; 0x28
 802471e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024720:	2b00      	cmp	r3, #0
 8024722:	f340 81af 	ble.w	8024a84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802472a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802472c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024730:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024734:	eef0 6a62 	vmov.f32	s13, s5
 8024738:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802473c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024740:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024744:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8024748:	eef0 6a43 	vmov.f32	s13, s6
 802474c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024750:	ee16 5a90 	vmov	r5, s13
 8024754:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024758:	ee61 7a27 	vmul.f32	s15, s2, s15
 802475c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024760:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024764:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024768:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802476c:	ee12 2a90 	vmov	r2, s5
 8024770:	eef0 2a47 	vmov.f32	s5, s14
 8024774:	fb92 f3f3 	sdiv	r3, r2, r3
 8024778:	ee13 2a10 	vmov	r2, s6
 802477c:	9327      	str	r3, [sp, #156]	; 0x9c
 802477e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024780:	eeb0 3a67 	vmov.f32	s6, s15
 8024784:	fb92 f3f3 	sdiv	r3, r2, r3
 8024788:	9328      	str	r3, [sp, #160]	; 0xa0
 802478a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802478c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802478e:	3b01      	subs	r3, #1
 8024790:	9316      	str	r3, [sp, #88]	; 0x58
 8024792:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024794:	bf08      	it	eq
 8024796:	4613      	moveq	r3, r2
 8024798:	9307      	str	r3, [sp, #28]
 802479a:	e5f9      	b.n	8024390 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802479c:	2800      	cmp	r0, #0
 802479e:	f43f ae6b 	beq.w	8024478 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80247a2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80247a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80247aa:	9108      	str	r1, [sp, #32]
 80247ac:	0e09      	lsrs	r1, r1, #24
 80247ae:	9110      	str	r1, [sp, #64]	; 0x40
 80247b0:	e662      	b.n	8024478 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80247b2:	f113 0801 	adds.w	r8, r3, #1
 80247b6:	f53f af74 	bmi.w	80246a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80247ba:	4541      	cmp	r1, r8
 80247bc:	f6ff af71 	blt.w	80246a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80247c0:	f11c 0801 	adds.w	r8, ip, #1
 80247c4:	f53f af6d 	bmi.w	80246a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80247c8:	45c6      	cmp	lr, r8
 80247ca:	f6ff af6a 	blt.w	80246a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80247ce:	b209      	sxth	r1, r1
 80247d0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80247d4:	fa0f f38e 	sxth.w	r3, lr
 80247d8:	9100      	str	r1, [sp, #0]
 80247da:	4639      	mov	r1, r7
 80247dc:	9301      	str	r3, [sp, #4]
 80247de:	4633      	mov	r3, r6
 80247e0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80247e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80247e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80247e8:	f7ff fc7b 	bl	80240e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80247ec:	e759      	b.n	80246a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80247ee:	bf00      	nop
 80247f0:	fffff800 	.word	0xfffff800
 80247f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80247f6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80247fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80247fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024800:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024802:	1427      	asrs	r7, r4, #16
 8024804:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024806:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802480a:	142b      	asrs	r3, r5, #16
 802480c:	fb01 7303 	mla	r3, r1, r3, r7
 8024810:	18e7      	adds	r7, r4, r3
 8024812:	5ce3      	ldrb	r3, [r4, r3]
 8024814:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024818:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802481c:	2a00      	cmp	r2, #0
 802481e:	f000 8127 	beq.w	8024a70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8024822:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024826:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802482a:	940d      	str	r4, [sp, #52]	; 0x34
 802482c:	0e24      	lsrs	r4, r4, #24
 802482e:	9414      	str	r4, [sp, #80]	; 0x50
 8024830:	b170      	cbz	r0, 8024850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024832:	eb07 0e01 	add.w	lr, r7, r1
 8024836:	5c79      	ldrb	r1, [r7, r1]
 8024838:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802483c:	9109      	str	r1, [sp, #36]	; 0x24
 802483e:	0e09      	lsrs	r1, r1, #24
 8024840:	9111      	str	r1, [sp, #68]	; 0x44
 8024842:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024846:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802484a:	910e      	str	r1, [sp, #56]	; 0x38
 802484c:	0e09      	lsrs	r1, r1, #24
 802484e:	9115      	str	r1, [sp, #84]	; 0x54
 8024850:	b292      	uxth	r2, r2
 8024852:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024854:	b280      	uxth	r0, r0
 8024856:	fb02 f800 	mul.w	r8, r2, r0
 802485a:	0112      	lsls	r2, r2, #4
 802485c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024860:	eba2 0e08 	sub.w	lr, r2, r8
 8024864:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024868:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802486a:	b280      	uxth	r0, r0
 802486c:	fa1f fe8e 	uxth.w	lr, lr
 8024870:	1a09      	subs	r1, r1, r0
 8024872:	fb0e f202 	mul.w	r2, lr, r2
 8024876:	b289      	uxth	r1, r1
 8024878:	fb01 220c 	mla	r2, r1, ip, r2
 802487c:	fb00 2204 	mla	r2, r0, r4, r2
 8024880:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024882:	fb08 2204 	mla	r2, r8, r4, r2
 8024886:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802488a:	2a00      	cmp	r2, #0
 802488c:	f000 80e5 	beq.w	8024a5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8024890:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024894:	d019      	beq.n	80248ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8024896:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802489a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802489e:	fb0c fa0a 	mul.w	sl, ip, sl
 80248a2:	fb0c fc03 	mul.w	ip, ip, r3
 80248a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80248aa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80248ae:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80248b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80248ba:	4453      	add	r3, sl
 80248bc:	0a3f      	lsrs	r7, r7, #8
 80248be:	0a1b      	lsrs	r3, r3, #8
 80248c0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80248c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248c8:	433b      	orrs	r3, r7
 80248ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248cc:	2cff      	cmp	r4, #255	; 0xff
 80248ce:	d020      	beq.n	8024912 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80248d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80248d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80248d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248d8:	4367      	muls	r7, r4
 80248da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80248dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80248e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80248e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80248ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80248ee:	fb04 fa0a 	mul.w	sl, r4, sl
 80248f2:	44bc      	add	ip, r7
 80248f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80248f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024900:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024904:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024908:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802490c:	ea4c 040a 	orr.w	r4, ip, sl
 8024910:	940d      	str	r4, [sp, #52]	; 0x34
 8024912:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024914:	2cff      	cmp	r4, #255	; 0xff
 8024916:	d020      	beq.n	802495a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8024918:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802491a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802491e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024920:	4367      	muls	r7, r4
 8024922:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024924:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024928:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802492c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802492e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024932:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024936:	fb04 fa0a 	mul.w	sl, r4, sl
 802493a:	44bc      	add	ip, r7
 802493c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024940:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024944:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024948:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802494c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024950:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024954:	ea4c 040a 	orr.w	r4, ip, sl
 8024958:	9409      	str	r4, [sp, #36]	; 0x24
 802495a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802495c:	2cff      	cmp	r4, #255	; 0xff
 802495e:	d020      	beq.n	80249a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8024960:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024962:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024966:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024968:	4367      	muls	r7, r4
 802496a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802496c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024970:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024974:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024976:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802497a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802497e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024982:	44bc      	add	ip, r7
 8024984:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802498c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024990:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024994:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024998:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802499c:	ea4c 040a 	orr.w	r4, ip, sl
 80249a0:	940e      	str	r4, [sp, #56]	; 0x38
 80249a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80249a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80249a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249ac:	43d2      	mvns	r2, r2
 80249ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80249b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249b4:	b2d2      	uxtb	r2, r2
 80249b6:	fb0e f707 	mul.w	r7, lr, r7
 80249ba:	fb01 770c 	mla	r7, r1, ip, r7
 80249be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80249c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80249c4:	fb00 770c 	mla	r7, r0, ip, r7
 80249c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80249cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80249ce:	fb08 770c 	mla	r7, r8, ip, r7
 80249d2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80249d6:	fb0e fe0c 	mul.w	lr, lr, ip
 80249da:	0a3f      	lsrs	r7, r7, #8
 80249dc:	fb01 e303 	mla	r3, r1, r3, lr
 80249e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80249e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80249e6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80249ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80249ec:	fb00 330a 	mla	r3, r0, sl, r3
 80249f0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80249f4:	fb08 3c0c 	mla	ip, r8, ip, r3
 80249f8:	f8b9 3000 	ldrh.w	r3, [r9]
 80249fc:	1218      	asrs	r0, r3, #8
 80249fe:	10d9      	asrs	r1, r3, #3
 8024a00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a04:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024a08:	00db      	lsls	r3, r3, #3
 8024a0a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024a0e:	4350      	muls	r0, r2
 8024a10:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024a14:	b2db      	uxtb	r3, r3
 8024a16:	4351      	muls	r1, r2
 8024a18:	ea47 070c 	orr.w	r7, r7, ip
 8024a1c:	4353      	muls	r3, r2
 8024a1e:	1c42      	adds	r2, r0, #1
 8024a20:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a24:	0c3a      	lsrs	r2, r7, #16
 8024a26:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a2a:	4a18      	ldr	r2, [pc, #96]	; (8024a8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8024a2c:	b2c0      	uxtb	r0, r0
 8024a2e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024a32:	1c4a      	adds	r2, r1, #1
 8024a34:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024a38:	0a3a      	lsrs	r2, r7, #8
 8024a3a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024a3e:	00c9      	lsls	r1, r1, #3
 8024a40:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024a44:	4301      	orrs	r1, r0
 8024a46:	1c58      	adds	r0, r3, #1
 8024a48:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024a4c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024a50:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8024a54:	4308      	orrs	r0, r1
 8024a56:	f8a9 0000 	strh.w	r0, [r9]
 8024a5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a5c:	f109 0902 	add.w	r9, r9, #2
 8024a60:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024a62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024a66:	441a      	add	r2, r3
 8024a68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a6a:	9225      	str	r2, [sp, #148]	; 0x94
 8024a6c:	441d      	add	r5, r3
 8024a6e:	e64c      	b.n	802470a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024a70:	2800      	cmp	r0, #0
 8024a72:	f43f aeed 	beq.w	8024850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024a76:	5c79      	ldrb	r1, [r7, r1]
 8024a78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8024a7e:	0e09      	lsrs	r1, r1, #24
 8024a80:	9111      	str	r1, [sp, #68]	; 0x44
 8024a82:	e6e5      	b.n	8024850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024a84:	b01b      	add	sp, #108	; 0x6c
 8024a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a8a:	bf00      	nop
 8024a8c:	fffff800 	.word	0xfffff800

08024a90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a94:	b085      	sub	sp, #20
 8024a96:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8024a9a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024a9e:	2800      	cmp	r0, #0
 8024aa0:	9103      	str	r1, [sp, #12]
 8024aa2:	fb00 7406 	mla	r4, r0, r6, r7
 8024aa6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8024aaa:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8024aae:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8024ab2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024ab6:	eb03 0904 	add.w	r9, r3, r4
 8024aba:	9501      	str	r5, [sp, #4]
 8024abc:	f2c0 8150 	blt.w	8024d60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024ac0:	4583      	cmp	fp, r0
 8024ac2:	f340 814d 	ble.w	8024d60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024ac6:	2f00      	cmp	r7, #0
 8024ac8:	f2c0 8146 	blt.w	8024d58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024acc:	42be      	cmp	r6, r7
 8024ace:	f340 8143 	ble.w	8024d58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024ad2:	f813 c004 	ldrb.w	ip, [r3, r4]
 8024ad6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8024ada:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8024ade:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024ae2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8024ae6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024aea:	4355      	muls	r5, r2
 8024aec:	fb0c f203 	mul.w	r2, ip, r3
 8024af0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024af4:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8024af8:	441d      	add	r5, r3
 8024afa:	f102 0320 	add.w	r3, r2, #32
 8024afe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024b02:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024b06:	0a1b      	lsrs	r3, r3, #8
 8024b08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024b0c:	431c      	orrs	r4, r3
 8024b0e:	1c7b      	adds	r3, r7, #1
 8024b10:	f100 812b 	bmi.w	8024d6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024b14:	429e      	cmp	r6, r3
 8024b16:	f340 8128 	ble.w	8024d6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024b1a:	2900      	cmp	r1, #0
 8024b1c:	f000 8128 	beq.w	8024d70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8024b20:	9a01      	ldr	r2, [sp, #4]
 8024b22:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024b26:	8855      	ldrh	r5, [r2, #2]
 8024b28:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024b2c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8024b30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024b34:	fb08 f802 	mul.w	r8, r8, r2
 8024b38:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024b3c:	435d      	muls	r5, r3
 8024b3e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8024b42:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024b46:	44d0      	add	r8, sl
 8024b48:	f105 0a20 	add.w	sl, r5, #32
 8024b4c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024b50:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024b54:	0a2d      	lsrs	r5, r5, #8
 8024b56:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024b5a:	432a      	orrs	r2, r5
 8024b5c:	3001      	adds	r0, #1
 8024b5e:	f100 810d 	bmi.w	8024d7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024b62:	4583      	cmp	fp, r0
 8024b64:	f340 810a 	ble.w	8024d7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024b68:	f1be 0f00 	cmp.w	lr, #0
 8024b6c:	f000 810b 	beq.w	8024d86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8024b70:	2f00      	cmp	r7, #0
 8024b72:	f2c0 8100 	blt.w	8024d76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8024b76:	42be      	cmp	r6, r7
 8024b78:	f340 80fd 	ble.w	8024d76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8024b7c:	9801      	ldr	r0, [sp, #4]
 8024b7e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024b82:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024b86:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8024b8a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8024b8e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8024b92:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8024b96:	fb0a fa00 	mul.w	sl, sl, r0
 8024b9a:	fb05 f808 	mul.w	r8, r5, r8
 8024b9e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024ba2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8024ba6:	4482      	add	sl, r0
 8024ba8:	f108 0020 	add.w	r0, r8, #32
 8024bac:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024bb0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024bb4:	0a00      	lsrs	r0, r0, #8
 8024bb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024bba:	ea4b 0b00 	orr.w	fp, fp, r0
 8024bbe:	3701      	adds	r7, #1
 8024bc0:	f100 80e6 	bmi.w	8024d90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024bc4:	42be      	cmp	r6, r7
 8024bc6:	f340 80e3 	ble.w	8024d90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024bca:	2900      	cmp	r1, #0
 8024bcc:	f000 80e3 	beq.w	8024d96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8024bd0:	3601      	adds	r6, #1
 8024bd2:	9801      	ldr	r0, [sp, #4]
 8024bd4:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024bd8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8024bdc:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024be0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8024be4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024be8:	fb09 f906 	mul.w	r9, r9, r6
 8024bec:	fb07 f800 	mul.w	r8, r7, r0
 8024bf0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8024bf4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024bf8:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8024bfc:	44d1      	add	r9, sl
 8024bfe:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024c02:	f108 0020 	add.w	r0, r8, #32
 8024c06:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024c0a:	0a00      	lsrs	r0, r0, #8
 8024c0c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024c10:	4330      	orrs	r0, r6
 8024c12:	b28e      	uxth	r6, r1
 8024c14:	fa1f f98e 	uxth.w	r9, lr
 8024c18:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8024c1c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024c20:	fb06 f809 	mul.w	r8, r6, r9
 8024c24:	0136      	lsls	r6, r6, #4
 8024c26:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024c2a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024c2e:	9601      	str	r6, [sp, #4]
 8024c30:	ea4a 0404 	orr.w	r4, sl, r4
 8024c34:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024c38:	fa1f f689 	uxth.w	r6, r9
 8024c3c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024c40:	fb11 f90e 	smulbb	r9, r1, lr
 8024c44:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024c48:	9602      	str	r6, [sp, #8]
 8024c4a:	4626      	mov	r6, r4
 8024c4c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8024c50:	f1ce 0410 	rsb	r4, lr, #16
 8024c54:	ea4a 0202 	orr.w	r2, sl, r2
 8024c58:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024c5c:	1a64      	subs	r4, r4, r1
 8024c5e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8024c62:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024c66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024c6a:	434a      	muls	r2, r1
 8024c6c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024c70:	ea4a 0000 	orr.w	r0, sl, r0
 8024c74:	9903      	ldr	r1, [sp, #12]
 8024c76:	fb04 2406 	mla	r4, r4, r6, r2
 8024c7a:	9e02      	ldr	r6, [sp, #8]
 8024c7c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024c80:	fb09 4200 	mla	r2, r9, r0, r4
 8024c84:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8024c88:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024c8c:	8808      	ldrh	r0, [r1, #0]
 8024c8e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024c92:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8024c96:	ea44 0b0b 	orr.w	fp, r4, fp
 8024c9a:	9c01      	ldr	r4, [sp, #4]
 8024c9c:	b289      	uxth	r1, r1
 8024c9e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8024ca2:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8024ca6:	1ba4      	subs	r4, r4, r6
 8024ca8:	9e01      	ldr	r6, [sp, #4]
 8024caa:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024cae:	eba6 0608 	sub.w	r6, r6, r8
 8024cb2:	b2a4      	uxth	r4, r4
 8024cb4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024cb8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024cbc:	b2b6      	uxth	r6, r6
 8024cbe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024cc2:	4373      	muls	r3, r6
 8024cc4:	ea42 0e0e 	orr.w	lr, r2, lr
 8024cc8:	fb0c 3304 	mla	r3, ip, r4, r3
 8024ccc:	9c02      	ldr	r4, [sp, #8]
 8024cce:	fa1f f28e 	uxth.w	r2, lr
 8024cd2:	fb04 3505 	mla	r5, r4, r5, r3
 8024cd6:	10d4      	asrs	r4, r2, #3
 8024cd8:	fb08 5707 	mla	r7, r8, r7, r5
 8024cdc:	1215      	asrs	r5, r2, #8
 8024cde:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8024ce2:	00d2      	lsls	r2, r2, #3
 8024ce4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024ce8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024cec:	b2d2      	uxtb	r2, r2
 8024cee:	434f      	muls	r7, r1
 8024cf0:	1c7b      	adds	r3, r7, #1
 8024cf2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024cf6:	1203      	asrs	r3, r0, #8
 8024cf8:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8024cfc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024d00:	b2ff      	uxtb	r7, r7
 8024d02:	fb13 f307 	smulbb	r3, r3, r7
 8024d06:	fb05 3501 	mla	r5, r5, r1, r3
 8024d0a:	10c3      	asrs	r3, r0, #3
 8024d0c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024d10:	b2ad      	uxth	r5, r5
 8024d12:	fb13 f307 	smulbb	r3, r3, r7
 8024d16:	fb04 3401 	mla	r4, r4, r1, r3
 8024d1a:	00c3      	lsls	r3, r0, #3
 8024d1c:	b2db      	uxtb	r3, r3
 8024d1e:	b2a4      	uxth	r4, r4
 8024d20:	fb13 f307 	smulbb	r3, r3, r7
 8024d24:	fb02 3101 	mla	r1, r2, r1, r3
 8024d28:	1c6b      	adds	r3, r5, #1
 8024d2a:	1c62      	adds	r2, r4, #1
 8024d2c:	b289      	uxth	r1, r1
 8024d2e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024d32:	1c4b      	adds	r3, r1, #1
 8024d34:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8024d38:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024d3c:	9a03      	ldr	r2, [sp, #12]
 8024d3e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024d42:	0964      	lsrs	r4, r4, #5
 8024d44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024d48:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024d4c:	432b      	orrs	r3, r5
 8024d4e:	4323      	orrs	r3, r4
 8024d50:	8013      	strh	r3, [r2, #0]
 8024d52:	b005      	add	sp, #20
 8024d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d58:	f04f 0c00 	mov.w	ip, #0
 8024d5c:	4664      	mov	r4, ip
 8024d5e:	e6d6      	b.n	8024b0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8024d60:	2300      	movs	r3, #0
 8024d62:	469c      	mov	ip, r3
 8024d64:	461a      	mov	r2, r3
 8024d66:	461c      	mov	r4, r3
 8024d68:	e6f8      	b.n	8024b5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024d6a:	2300      	movs	r3, #0
 8024d6c:	461a      	mov	r2, r3
 8024d6e:	e6f5      	b.n	8024b5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024d70:	460b      	mov	r3, r1
 8024d72:	460a      	mov	r2, r1
 8024d74:	e6f2      	b.n	8024b5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024d76:	2500      	movs	r5, #0
 8024d78:	46ab      	mov	fp, r5
 8024d7a:	e720      	b.n	8024bbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8024d7c:	2700      	movs	r7, #0
 8024d7e:	463d      	mov	r5, r7
 8024d80:	4638      	mov	r0, r7
 8024d82:	46bb      	mov	fp, r7
 8024d84:	e745      	b.n	8024c12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024d86:	4677      	mov	r7, lr
 8024d88:	4675      	mov	r5, lr
 8024d8a:	4670      	mov	r0, lr
 8024d8c:	46f3      	mov	fp, lr
 8024d8e:	e740      	b.n	8024c12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024d90:	2700      	movs	r7, #0
 8024d92:	4638      	mov	r0, r7
 8024d94:	e73d      	b.n	8024c12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024d96:	460f      	mov	r7, r1
 8024d98:	4608      	mov	r0, r1
 8024d9a:	e73a      	b.n	8024c12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08024d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024da0:	b097      	sub	sp, #92	; 0x5c
 8024da2:	9214      	str	r2, [sp, #80]	; 0x50
 8024da4:	9308      	str	r3, [sp, #32]
 8024da6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024da8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024dac:	9015      	str	r0, [sp, #84]	; 0x54
 8024dae:	9312      	str	r3, [sp, #72]	; 0x48
 8024db0:	6850      	ldr	r0, [r2, #4]
 8024db2:	9111      	str	r1, [sp, #68]	; 0x44
 8024db4:	6812      	ldr	r2, [r2, #0]
 8024db6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024dba:	fb00 1303 	mla	r3, r0, r3, r1
 8024dbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8024dc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8024dca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024dcc:	685b      	ldr	r3, [r3, #4]
 8024dce:	930c      	str	r3, [sp, #48]	; 0x30
 8024dd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8024dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8024dd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	dc03      	bgt.n	8024de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024ddc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024dde:	2b00      	cmp	r3, #0
 8024de0:	f340 83cd 	ble.w	802557e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024de4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024de6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024dea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024dee:	1e48      	subs	r0, r1, #1
 8024df0:	1e55      	subs	r5, r2, #1
 8024df2:	9b08      	ldr	r3, [sp, #32]
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	f340 81a5 	ble.w	8025144 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024dfa:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024dfe:	1436      	asrs	r6, r6, #16
 8024e00:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024e04:	d406      	bmi.n	8024e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e06:	4286      	cmp	r6, r0
 8024e08:	da04      	bge.n	8024e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e0a:	2b00      	cmp	r3, #0
 8024e0c:	db02      	blt.n	8024e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e0e:	42ab      	cmp	r3, r5
 8024e10:	f2c0 8199 	blt.w	8025146 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024e14:	3601      	adds	r6, #1
 8024e16:	f100 8186 	bmi.w	8025126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024e1a:	42b1      	cmp	r1, r6
 8024e1c:	f2c0 8183 	blt.w	8025126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024e20:	3301      	adds	r3, #1
 8024e22:	f100 8180 	bmi.w	8025126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024e26:	429a      	cmp	r2, r3
 8024e28:	f2c0 817d 	blt.w	8025126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024e2c:	9b08      	ldr	r3, [sp, #32]
 8024e2e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024e32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024e34:	9313      	str	r3, [sp, #76]	; 0x4c
 8024e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024e38:	2b00      	cmp	r3, #0
 8024e3a:	f340 81a6 	ble.w	802518a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024e3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024e40:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8024e42:	1418      	asrs	r0, r3, #16
 8024e44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024e46:	142d      	asrs	r5, r5, #16
 8024e48:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024e4e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024e52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024e58:	f100 81fa 	bmi.w	8025250 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024e5c:	f102 3eff 	add.w	lr, r2, #4294967295
 8024e60:	4575      	cmp	r5, lr
 8024e62:	f280 81f5 	bge.w	8025250 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024e66:	2800      	cmp	r0, #0
 8024e68:	f2c0 81f2 	blt.w	8025250 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024e6c:	f103 3eff 	add.w	lr, r3, #4294967295
 8024e70:	4570      	cmp	r0, lr
 8024e72:	f280 81ed 	bge.w	8025250 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024e76:	b212      	sxth	r2, r2
 8024e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e7a:	fa1f fe81 	uxth.w	lr, r1
 8024e7e:	fb00 5002 	mla	r0, r0, r2, r5
 8024e82:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024e86:	eb03 0a00 	add.w	sl, r3, r0
 8024e8a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024e8e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8024e92:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024e96:	b29b      	uxth	r3, r3
 8024e98:	f1bc 0f00 	cmp.w	ip, #0
 8024e9c:	f000 81bb 	beq.w	8025216 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024ea0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024ea4:	eb0a 0b02 	add.w	fp, sl, r2
 8024ea8:	fa1f fa8c 	uxth.w	sl, ip
 8024eac:	940d      	str	r4, [sp, #52]	; 0x34
 8024eae:	fb0a fe0e 	mul.w	lr, sl, lr
 8024eb2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024eb6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024eba:	eba5 050e 	sub.w	r5, r5, lr
 8024ebe:	940e      	str	r4, [sp, #56]	; 0x38
 8024ec0:	fa1f fa8a 	uxth.w	sl, sl
 8024ec4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024ec6:	b2ad      	uxth	r5, r5
 8024ec8:	eba3 030a 	sub.w	r3, r3, sl
 8024ecc:	fb08 f505 	mul.w	r5, r8, r5
 8024ed0:	b29b      	uxth	r3, r3
 8024ed2:	fb09 5303 	mla	r3, r9, r3, r5
 8024ed6:	fb0a 3304 	mla	r3, sl, r4, r3
 8024eda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024edc:	fb0e 3304 	mla	r3, lr, r4, r3
 8024ee0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	f000 8111 	beq.w	802510c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024eea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024eec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024ef0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024ef4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024ef8:	f000 8192 	beq.w	8025220 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8024efc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024f00:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024f04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024f08:	fb0a fe0e 	mul.w	lr, sl, lr
 8024f0c:	fb09 f000 	mul.w	r0, r9, r0
 8024f10:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024f14:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024f18:	f100 0b20 	add.w	fp, r0, #32
 8024f1c:	44ce      	add	lr, r9
 8024f1e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024f22:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024f26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f2a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024f2e:	ea4e 0909 	orr.w	r9, lr, r9
 8024f32:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024f36:	8868      	ldrh	r0, [r5, #2]
 8024f38:	d019      	beq.n	8024f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024f3a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024f3e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024f42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024f46:	fb0a fe0e 	mul.w	lr, sl, lr
 8024f4a:	fb08 f800 	mul.w	r8, r8, r0
 8024f4e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8024f52:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024f56:	f108 0b20 	add.w	fp, r8, #32
 8024f5a:	4486      	add	lr, r0
 8024f5c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024f60:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024f64:	0a00      	lsrs	r0, r0, #8
 8024f66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024f6a:	ea4e 0000 	orr.w	r0, lr, r0
 8024f6e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024f72:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024f76:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024f7a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024f7e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024f82:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024f86:	ea4e 0909 	orr.w	r9, lr, r9
 8024f8a:	ea4a 0000 	orr.w	r0, sl, r0
 8024f8e:	f1bc 0f00 	cmp.w	ip, #0
 8024f92:	f000 8147 	beq.w	8025224 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024f96:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8024f9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f9c:	3a01      	subs	r2, #1
 8024f9e:	2cff      	cmp	r4, #255	; 0xff
 8024fa0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024fa4:	f102 0202 	add.w	r2, r2, #2
 8024fa8:	eb05 0e02 	add.w	lr, r5, r2
 8024fac:	5aaa      	ldrh	r2, [r5, r2]
 8024fae:	d018      	beq.n	8024fe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024fb0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8024fb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024fb8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024fbc:	fb04 fa02 	mul.w	sl, r4, r2
 8024fc0:	fb08 f805 	mul.w	r8, r8, r5
 8024fc4:	f10a 0520 	add.w	r5, sl, #32
 8024fc8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024fcc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024fd0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024fd4:	4442      	add	r2, r8
 8024fd6:	0a2d      	lsrs	r5, r5, #8
 8024fd8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024fdc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024fe0:	432a      	orrs	r2, r5
 8024fe2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024fe4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024fe8:	2cff      	cmp	r4, #255	; 0xff
 8024fea:	d01a      	beq.n	8025022 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024fec:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8024ff0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024ff4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024ff8:	fb04 fa05 	mul.w	sl, r4, r5
 8024ffc:	fb08 f80e 	mul.w	r8, r8, lr
 8025000:	f10a 0e20 	add.w	lr, sl, #32
 8025004:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025008:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802500c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025010:	4445      	add	r5, r8
 8025012:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025016:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802501a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802501e:	ea45 050e 	orr.w	r5, r5, lr
 8025022:	fb1c fe01 	smulbb	lr, ip, r1
 8025026:	f1cc 0810 	rsb	r8, ip, #16
 802502a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802502e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025032:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025036:	eba8 0801 	sub.w	r8, r8, r1
 802503a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802503e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025042:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025046:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802504a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802504e:	ea4a 0202 	orr.w	r2, sl, r2
 8025052:	4341      	muls	r1, r0
 8025054:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025058:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802505c:	fb09 1108 	mla	r1, r9, r8, r1
 8025060:	ea4b 0505 	orr.w	r5, fp, r5
 8025064:	fb0c 1102 	mla	r1, ip, r2, r1
 8025068:	fb0e 1e05 	mla	lr, lr, r5, r1
 802506c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025070:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025074:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025078:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802507c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025080:	fa1f f28e 	uxth.w	r2, lr
 8025084:	2bff      	cmp	r3, #255	; 0xff
 8025086:	d103      	bne.n	8025090 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025088:	9912      	ldr	r1, [sp, #72]	; 0x48
 802508a:	29ff      	cmp	r1, #255	; 0xff
 802508c:	f000 80de 	beq.w	802524c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025090:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025092:	1215      	asrs	r5, r2, #8
 8025094:	8838      	ldrh	r0, [r7, #0]
 8025096:	434b      	muls	r3, r1
 8025098:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802509c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802509e:	f103 0c01 	add.w	ip, r3, #1
 80250a2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80250a6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80250aa:	fa5f fc83 	uxtb.w	ip, r3
 80250ae:	1203      	asrs	r3, r0, #8
 80250b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80250b4:	fb13 f30c 	smulbb	r3, r3, ip
 80250b8:	fb05 3501 	mla	r5, r5, r1, r3
 80250bc:	10c3      	asrs	r3, r0, #3
 80250be:	10d1      	asrs	r1, r2, #3
 80250c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80250c4:	00d2      	lsls	r2, r2, #3
 80250c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80250ca:	b2ad      	uxth	r5, r5
 80250cc:	fb13 f30c 	smulbb	r3, r3, ip
 80250d0:	b2d2      	uxtb	r2, r2
 80250d2:	fb01 3104 	mla	r1, r1, r4, r3
 80250d6:	00c3      	lsls	r3, r0, #3
 80250d8:	b2db      	uxtb	r3, r3
 80250da:	b289      	uxth	r1, r1
 80250dc:	fb13 f30c 	smulbb	r3, r3, ip
 80250e0:	fb02 3304 	mla	r3, r2, r4, r3
 80250e4:	b29a      	uxth	r2, r3
 80250e6:	1c6b      	adds	r3, r5, #1
 80250e8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80250ec:	1c53      	adds	r3, r2, #1
 80250ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80250f2:	1c4a      	adds	r2, r1, #1
 80250f4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80250f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80250fc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025100:	0949      	lsrs	r1, r1, #5
 8025102:	432b      	orrs	r3, r5
 8025104:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025108:	430b      	orrs	r3, r1
 802510a:	803b      	strh	r3, [r7, #0]
 802510c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802510e:	3702      	adds	r7, #2
 8025110:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025112:	4413      	add	r3, r2
 8025114:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025116:	9321      	str	r3, [sp, #132]	; 0x84
 8025118:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802511a:	441a      	add	r2, r3
 802511c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802511e:	3b01      	subs	r3, #1
 8025120:	9222      	str	r2, [sp, #136]	; 0x88
 8025122:	9313      	str	r3, [sp, #76]	; 0x4c
 8025124:	e687      	b.n	8024e36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025128:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802512a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 802512c:	4433      	add	r3, r6
 802512e:	9321      	str	r3, [sp, #132]	; 0x84
 8025130:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025132:	441c      	add	r4, r3
 8025134:	9b08      	ldr	r3, [sp, #32]
 8025136:	3b01      	subs	r3, #1
 8025138:	9422      	str	r4, [sp, #136]	; 0x88
 802513a:	9308      	str	r3, [sp, #32]
 802513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802513e:	3302      	adds	r3, #2
 8025140:	9309      	str	r3, [sp, #36]	; 0x24
 8025142:	e656      	b.n	8024df2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025144:	d028      	beq.n	8025198 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025146:	9b08      	ldr	r3, [sp, #32]
 8025148:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802514a:	3b01      	subs	r3, #1
 802514c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802514e:	fb00 5003 	mla	r0, r0, r3, r5
 8025152:	1400      	asrs	r0, r0, #16
 8025154:	f53f ae6a 	bmi.w	8024e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025158:	3901      	subs	r1, #1
 802515a:	4288      	cmp	r0, r1
 802515c:	f6bf ae66 	bge.w	8024e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025160:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025162:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025164:	fb01 0303 	mla	r3, r1, r3, r0
 8025168:	141b      	asrs	r3, r3, #16
 802516a:	f53f ae5f 	bmi.w	8024e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802516e:	3a01      	subs	r2, #1
 8025170:	4293      	cmp	r3, r2
 8025172:	f6bf ae5b 	bge.w	8024e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025176:	9b08      	ldr	r3, [sp, #32]
 8025178:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802517c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025180:	9313      	str	r3, [sp, #76]	; 0x4c
 8025182:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025184:	2b00      	cmp	r3, #0
 8025186:	f300 8082 	bgt.w	802528e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802518a:	9b08      	ldr	r3, [sp, #32]
 802518c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025192:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025196:	9309      	str	r3, [sp, #36]	; 0x24
 8025198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802519a:	2b00      	cmp	r3, #0
 802519c:	f340 81ef 	ble.w	802557e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80251a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80251a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80251a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80251aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80251ae:	eef0 6a62 	vmov.f32	s13, s5
 80251b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80251b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80251ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251be:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80251c2:	eef0 6a43 	vmov.f32	s13, s6
 80251c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251ca:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80251ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80251d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80251d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80251da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80251de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80251e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80251e6:	ee12 2a90 	vmov	r2, s5
 80251ea:	eef0 2a47 	vmov.f32	s5, s14
 80251ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80251f2:	ee13 2a10 	vmov	r2, s6
 80251f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80251f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80251fa:	eeb0 3a67 	vmov.f32	s6, s15
 80251fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8025202:	9324      	str	r3, [sp, #144]	; 0x90
 8025204:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025206:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025208:	3b01      	subs	r3, #1
 802520a:	9311      	str	r3, [sp, #68]	; 0x44
 802520c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802520e:	bf08      	it	eq
 8025210:	4613      	moveq	r3, r2
 8025212:	9308      	str	r3, [sp, #32]
 8025214:	e5df      	b.n	8024dd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025216:	fb08 f505 	mul.w	r5, r8, r5
 802521a:	fb09 5303 	mla	r3, r9, r3, r5
 802521e:	e65f      	b.n	8024ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025220:	4681      	mov	r9, r0
 8025222:	e686      	b.n	8024f32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025224:	f1c1 0210 	rsb	r2, r1, #16
 8025228:	4341      	muls	r1, r0
 802522a:	fb09 1902 	mla	r9, r9, r2, r1
 802522e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025232:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025236:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802523a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802523e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025242:	ea42 0909 	orr.w	r9, r2, r9
 8025246:	fa1f f289 	uxth.w	r2, r9
 802524a:	e71b      	b.n	8025084 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802524c:	803a      	strh	r2, [r7, #0]
 802524e:	e75d      	b.n	802510c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025250:	f115 0e01 	adds.w	lr, r5, #1
 8025254:	f53f af5a 	bmi.w	802510c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025258:	4572      	cmp	r2, lr
 802525a:	f6ff af57 	blt.w	802510c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802525e:	f110 0e01 	adds.w	lr, r0, #1
 8025262:	f53f af53 	bmi.w	802510c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025266:	4573      	cmp	r3, lr
 8025268:	f6ff af50 	blt.w	802510c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802526c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802526e:	b21b      	sxth	r3, r3
 8025270:	b212      	sxth	r2, r2
 8025272:	9502      	str	r5, [sp, #8]
 8025274:	9301      	str	r3, [sp, #4]
 8025276:	9200      	str	r2, [sp, #0]
 8025278:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802527c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025280:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025284:	4639      	mov	r1, r7
 8025286:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025288:	f7ff fc02 	bl	8024a90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802528c:	e73e      	b.n	802510c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802528e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025290:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025296:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802529a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802529c:	fa1f fc82 	uxth.w	ip, r2
 80252a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80252a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80252a6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80252aa:	141f      	asrs	r7, r3, #16
 80252ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80252ae:	141b      	asrs	r3, r3, #16
 80252b0:	fb01 3707 	mla	r7, r1, r7, r3
 80252b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252b6:	eb03 0a07 	add.w	sl, r3, r7
 80252ba:	f813 9007 	ldrb.w	r9, [r3, r7]
 80252be:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80252c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80252c6:	b29b      	uxth	r3, r3
 80252c8:	2d00      	cmp	r5, #0
 80252ca:	f000 813d 	beq.w	8025548 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 80252ce:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80252d2:	eb0a 0b01 	add.w	fp, sl, r1
 80252d6:	fa1f fa85 	uxth.w	sl, r5
 80252da:	940f      	str	r4, [sp, #60]	; 0x3c
 80252dc:	fb0a fc0c 	mul.w	ip, sl, ip
 80252e0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80252e4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80252e8:	eba0 000c 	sub.w	r0, r0, ip
 80252ec:	9410      	str	r4, [sp, #64]	; 0x40
 80252ee:	fa1f fa8a 	uxth.w	sl, sl
 80252f2:	b280      	uxth	r0, r0
 80252f4:	eba3 030a 	sub.w	r3, r3, sl
 80252f8:	fb08 f000 	mul.w	r0, r8, r0
 80252fc:	b29b      	uxth	r3, r3
 80252fe:	fb09 0303 	mla	r3, r9, r3, r0
 8025302:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025304:	fb0a 3300 	mla	r3, sl, r0, r3
 8025308:	fb0c 3304 	mla	r3, ip, r4, r3
 802530c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025310:	2b00      	cmp	r3, #0
 8025312:	f000 810b 	beq.w	802552c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8025316:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025318:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802531c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802531e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025322:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025326:	f000 8114 	beq.w	8025552 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802532a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802532e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025332:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025336:	fb0a fc0c 	mul.w	ip, sl, ip
 802533a:	fb09 f707 	mul.w	r7, r9, r7
 802533e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025342:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025346:	f107 0b20 	add.w	fp, r7, #32
 802534a:	44cc      	add	ip, r9
 802534c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025350:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025354:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025358:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802535c:	ea4c 0909 	orr.w	r9, ip, r9
 8025360:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025364:	8847      	ldrh	r7, [r0, #2]
 8025366:	d019      	beq.n	802539c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8025368:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802536c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025370:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025374:	fb0a fc0c 	mul.w	ip, sl, ip
 8025378:	fb08 f807 	mul.w	r8, r8, r7
 802537c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025380:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025384:	f108 0b20 	add.w	fp, r8, #32
 8025388:	44bc      	add	ip, r7
 802538a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802538e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025392:	0a3f      	lsrs	r7, r7, #8
 8025394:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025398:	ea4c 0707 	orr.w	r7, ip, r7
 802539c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80253a0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80253a4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80253a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80253ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80253b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80253b4:	ea4c 0909 	orr.w	r9, ip, r9
 80253b8:	ea4a 0707 	orr.w	r7, sl, r7
 80253bc:	2d00      	cmp	r5, #0
 80253be:	f000 80ca 	beq.w	8025556 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 80253c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80253c6:	3901      	subs	r1, #1
 80253c8:	0049      	lsls	r1, r1, #1
 80253ca:	3102      	adds	r1, #2
 80253cc:	eb00 0c01 	add.w	ip, r0, r1
 80253d0:	5a41      	ldrh	r1, [r0, r1]
 80253d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80253d4:	28ff      	cmp	r0, #255	; 0xff
 80253d6:	d019      	beq.n	802540c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80253d8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80253dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80253de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80253e2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80253e6:	fb04 fa01 	mul.w	sl, r4, r1
 80253ea:	fb08 f800 	mul.w	r8, r8, r0
 80253ee:	f10a 0020 	add.w	r0, sl, #32
 80253f2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80253f6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80253fa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80253fe:	4441      	add	r1, r8
 8025400:	0a00      	lsrs	r0, r0, #8
 8025402:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025406:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802540a:	4301      	orrs	r1, r0
 802540c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802540e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025412:	2cff      	cmp	r4, #255	; 0xff
 8025414:	d01a      	beq.n	802544c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8025416:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802541a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802541e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025422:	fb04 fa00 	mul.w	sl, r4, r0
 8025426:	fb08 f80c 	mul.w	r8, r8, ip
 802542a:	f10a 0c20 	add.w	ip, sl, #32
 802542e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025432:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025436:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802543a:	4440      	add	r0, r8
 802543c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025440:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025444:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025448:	ea40 000c 	orr.w	r0, r0, ip
 802544c:	fb15 fc02 	smulbb	ip, r5, r2
 8025450:	f1c5 0810 	rsb	r8, r5, #16
 8025454:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025458:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802545c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025460:	eba8 0802 	sub.w	r8, r8, r2
 8025464:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025468:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802546c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025470:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025474:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025478:	ea4a 0101 	orr.w	r1, sl, r1
 802547c:	437a      	muls	r2, r7
 802547e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025482:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025486:	fb09 2208 	mla	r2, r9, r8, r2
 802548a:	ea4b 0000 	orr.w	r0, fp, r0
 802548e:	fb05 2201 	mla	r2, r5, r1, r2
 8025492:	fb0c 2200 	mla	r2, ip, r0, r2
 8025496:	0d57      	lsrs	r7, r2, #21
 8025498:	0952      	lsrs	r2, r2, #5
 802549a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802549e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80254a2:	433a      	orrs	r2, r7
 80254a4:	2bff      	cmp	r3, #255	; 0xff
 80254a6:	b292      	uxth	r2, r2
 80254a8:	d102      	bne.n	80254b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80254aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80254ac:	29ff      	cmp	r1, #255	; 0xff
 80254ae:	d063      	beq.n	8025578 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 80254b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80254b2:	1215      	asrs	r5, r2, #8
 80254b4:	f8be 1000 	ldrh.w	r1, [lr]
 80254b8:	4343      	muls	r3, r0
 80254ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80254bc:	10cf      	asrs	r7, r1, #3
 80254be:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80254c2:	1c58      	adds	r0, r3, #1
 80254c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80254c8:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80254cc:	1208      	asrs	r0, r1, #8
 80254ce:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80254d2:	00c9      	lsls	r1, r1, #3
 80254d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80254d8:	b2db      	uxtb	r3, r3
 80254da:	b2c9      	uxtb	r1, r1
 80254dc:	fb10 f003 	smulbb	r0, r0, r3
 80254e0:	fb11 f103 	smulbb	r1, r1, r3
 80254e4:	fb05 0504 	mla	r5, r5, r4, r0
 80254e8:	10d0      	asrs	r0, r2, #3
 80254ea:	fb17 f703 	smulbb	r7, r7, r3
 80254ee:	00d2      	lsls	r2, r2, #3
 80254f0:	b2ad      	uxth	r5, r5
 80254f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80254f6:	b2d2      	uxtb	r2, r2
 80254f8:	fb00 7004 	mla	r0, r0, r4, r7
 80254fc:	1c6b      	adds	r3, r5, #1
 80254fe:	fb02 1204 	mla	r2, r2, r4, r1
 8025502:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025506:	b292      	uxth	r2, r2
 8025508:	b280      	uxth	r0, r0
 802550a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802550e:	1c57      	adds	r7, r2, #1
 8025510:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025514:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025518:	433d      	orrs	r5, r7
 802551a:	1c47      	adds	r7, r0, #1
 802551c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025520:	097f      	lsrs	r7, r7, #5
 8025522:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025526:	433d      	orrs	r5, r7
 8025528:	f8ae 5000 	strh.w	r5, [lr]
 802552c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802552e:	f10e 0e02 	add.w	lr, lr, #2
 8025532:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025534:	4413      	add	r3, r2
 8025536:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025538:	9321      	str	r3, [sp, #132]	; 0x84
 802553a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802553c:	441a      	add	r2, r3
 802553e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025540:	3b01      	subs	r3, #1
 8025542:	9222      	str	r2, [sp, #136]	; 0x88
 8025544:	9313      	str	r3, [sp, #76]	; 0x4c
 8025546:	e61c      	b.n	8025182 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025548:	fb08 f000 	mul.w	r0, r8, r0
 802554c:	fb09 0303 	mla	r3, r9, r3, r0
 8025550:	e6dc      	b.n	802530c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8025552:	46b9      	mov	r9, r7
 8025554:	e704      	b.n	8025360 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8025556:	f1c2 0110 	rsb	r1, r2, #16
 802555a:	437a      	muls	r2, r7
 802555c:	fb09 2901 	mla	r9, r9, r1, r2
 8025560:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025564:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025568:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802556c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025570:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025574:	4302      	orrs	r2, r0
 8025576:	e795      	b.n	80254a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8025578:	f8ae 2000 	strh.w	r2, [lr]
 802557c:	e7d6      	b.n	802552c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802557e:	b017      	add	sp, #92	; 0x5c
 8025580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025584 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025588:	b085      	sub	sp, #20
 802558a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802558e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025592:	2800      	cmp	r0, #0
 8025594:	9103      	str	r1, [sp, #12]
 8025596:	fb00 7406 	mla	r4, r0, r6, r7
 802559a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802559e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80255a2:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80255a6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80255aa:	eb02 0904 	add.w	r9, r2, r4
 80255ae:	9501      	str	r5, [sp, #4]
 80255b0:	f2c0 8141 	blt.w	8025836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80255b4:	4583      	cmp	fp, r0
 80255b6:	f340 813e 	ble.w	8025836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80255ba:	2f00      	cmp	r7, #0
 80255bc:	f2c0 8137 	blt.w	802582e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80255c0:	42be      	cmp	r6, r7
 80255c2:	f340 8134 	ble.w	802582e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80255c6:	f812 c004 	ldrb.w	ip, [r2, r4]
 80255ca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80255ce:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80255d2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80255d6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80255da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80255de:	4355      	muls	r5, r2
 80255e0:	fb0c f203 	mul.w	r2, ip, r3
 80255e4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80255e8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80255ec:	441d      	add	r5, r3
 80255ee:	f102 0320 	add.w	r3, r2, #32
 80255f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80255f6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80255fa:	0a1b      	lsrs	r3, r3, #8
 80255fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025600:	431c      	orrs	r4, r3
 8025602:	1c7b      	adds	r3, r7, #1
 8025604:	f100 811c 	bmi.w	8025840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8025608:	429e      	cmp	r6, r3
 802560a:	f340 8119 	ble.w	8025840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802560e:	2900      	cmp	r1, #0
 8025610:	f000 8119 	beq.w	8025846 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8025614:	9a01      	ldr	r2, [sp, #4]
 8025616:	f899 3001 	ldrb.w	r3, [r9, #1]
 802561a:	8855      	ldrh	r5, [r2, #2]
 802561c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025620:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8025624:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025628:	fb08 f802 	mul.w	r8, r8, r2
 802562c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025630:	435d      	muls	r5, r3
 8025632:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8025636:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802563a:	44d0      	add	r8, sl
 802563c:	f105 0a20 	add.w	sl, r5, #32
 8025640:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025644:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025648:	0a2d      	lsrs	r5, r5, #8
 802564a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802564e:	432a      	orrs	r2, r5
 8025650:	3001      	adds	r0, #1
 8025652:	f100 80fe 	bmi.w	8025852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8025656:	4583      	cmp	fp, r0
 8025658:	f340 80fb 	ble.w	8025852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802565c:	f1be 0f00 	cmp.w	lr, #0
 8025660:	f000 80fc 	beq.w	802585c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8025664:	2f00      	cmp	r7, #0
 8025666:	f2c0 80f1 	blt.w	802584c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802566a:	42be      	cmp	r6, r7
 802566c:	f340 80ee 	ble.w	802584c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8025670:	9801      	ldr	r0, [sp, #4]
 8025672:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025676:	f819 5006 	ldrb.w	r5, [r9, r6]
 802567a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802567e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8025682:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8025686:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802568a:	fb0a fa00 	mul.w	sl, sl, r0
 802568e:	fb05 f808 	mul.w	r8, r5, r8
 8025692:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8025696:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802569a:	4482      	add	sl, r0
 802569c:	f108 0020 	add.w	r0, r8, #32
 80256a0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80256a4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80256a8:	0a00      	lsrs	r0, r0, #8
 80256aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256ae:	ea4b 0b00 	orr.w	fp, fp, r0
 80256b2:	3701      	adds	r7, #1
 80256b4:	f100 80d7 	bmi.w	8025866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80256b8:	42be      	cmp	r6, r7
 80256ba:	f340 80d4 	ble.w	8025866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80256be:	2900      	cmp	r1, #0
 80256c0:	f000 80d4 	beq.w	802586c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80256c4:	3601      	adds	r6, #1
 80256c6:	9801      	ldr	r0, [sp, #4]
 80256c8:	f819 7006 	ldrb.w	r7, [r9, r6]
 80256cc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80256d0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80256d4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80256d8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256dc:	fb09 f906 	mul.w	r9, r9, r6
 80256e0:	fb07 f800 	mul.w	r8, r7, r0
 80256e4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80256e8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80256ec:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80256f0:	44d1      	add	r9, sl
 80256f2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80256f6:	f108 0020 	add.w	r0, r8, #32
 80256fa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80256fe:	0a00      	lsrs	r0, r0, #8
 8025700:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025704:	4330      	orrs	r0, r6
 8025706:	b28e      	uxth	r6, r1
 8025708:	fa1f f98e 	uxth.w	r9, lr
 802570c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8025710:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8025714:	fb06 f809 	mul.w	r8, r6, r9
 8025718:	0136      	lsls	r6, r6, #4
 802571a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802571e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025722:	9601      	str	r6, [sp, #4]
 8025724:	ea4a 0404 	orr.w	r4, sl, r4
 8025728:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802572c:	fa1f f689 	uxth.w	r6, r9
 8025730:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025734:	fb11 f90e 	smulbb	r9, r1, lr
 8025738:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802573c:	9602      	str	r6, [sp, #8]
 802573e:	4626      	mov	r6, r4
 8025740:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8025744:	f1ce 0410 	rsb	r4, lr, #16
 8025748:	ea4a 0202 	orr.w	r2, sl, r2
 802574c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025750:	1a64      	subs	r4, r4, r1
 8025752:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8025756:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802575a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802575e:	434a      	muls	r2, r1
 8025760:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8025764:	ea4a 0000 	orr.w	r0, sl, r0
 8025768:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802576c:	fb04 2406 	mla	r4, r4, r6, r2
 8025770:	9903      	ldr	r1, [sp, #12]
 8025772:	fb09 4200 	mla	r2, r9, r0, r4
 8025776:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802577a:	9801      	ldr	r0, [sp, #4]
 802577c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025780:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025784:	8809      	ldrh	r1, [r1, #0]
 8025786:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802578a:	ea44 0b0b 	orr.w	fp, r4, fp
 802578e:	9c02      	ldr	r4, [sp, #8]
 8025790:	1b00      	subs	r0, r0, r4
 8025792:	9c01      	ldr	r4, [sp, #4]
 8025794:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8025798:	eba4 0608 	sub.w	r6, r4, r8
 802579c:	b280      	uxth	r0, r0
 802579e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80257a2:	b2b6      	uxth	r6, r6
 80257a4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80257a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80257ac:	4373      	muls	r3, r6
 80257ae:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80257b2:	fb0c 3300 	mla	r3, ip, r0, r3
 80257b6:	9802      	ldr	r0, [sp, #8]
 80257b8:	ea42 0e0e 	orr.w	lr, r2, lr
 80257bc:	fb00 3505 	mla	r5, r0, r5, r3
 80257c0:	120b      	asrs	r3, r1, #8
 80257c2:	10c8      	asrs	r0, r1, #3
 80257c4:	fb08 5707 	mla	r7, r8, r7, r5
 80257c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80257cc:	00c9      	lsls	r1, r1, #3
 80257ce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80257d2:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80257d6:	fa1f f28e 	uxth.w	r2, lr
 80257da:	b2c9      	uxtb	r1, r1
 80257dc:	b2ff      	uxtb	r7, r7
 80257de:	437b      	muls	r3, r7
 80257e0:	4378      	muls	r0, r7
 80257e2:	434f      	muls	r7, r1
 80257e4:	1c59      	adds	r1, r3, #1
 80257e6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80257ea:	1213      	asrs	r3, r2, #8
 80257ec:	f023 0307 	bic.w	r3, r3, #7
 80257f0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80257f4:	1c41      	adds	r1, r0, #1
 80257f6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80257fa:	10d1      	asrs	r1, r2, #3
 80257fc:	021b      	lsls	r3, r3, #8
 80257fe:	f021 0103 	bic.w	r1, r1, #3
 8025802:	00d2      	lsls	r2, r2, #3
 8025804:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025808:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802580c:	00c9      	lsls	r1, r1, #3
 802580e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025812:	430b      	orrs	r3, r1
 8025814:	1c79      	adds	r1, r7, #1
 8025816:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802581a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802581e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025822:	431a      	orrs	r2, r3
 8025824:	9b03      	ldr	r3, [sp, #12]
 8025826:	801a      	strh	r2, [r3, #0]
 8025828:	b005      	add	sp, #20
 802582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802582e:	f04f 0c00 	mov.w	ip, #0
 8025832:	4664      	mov	r4, ip
 8025834:	e6e5      	b.n	8025602 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8025836:	2300      	movs	r3, #0
 8025838:	469c      	mov	ip, r3
 802583a:	461a      	mov	r2, r3
 802583c:	461c      	mov	r4, r3
 802583e:	e707      	b.n	8025650 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8025840:	2300      	movs	r3, #0
 8025842:	461a      	mov	r2, r3
 8025844:	e704      	b.n	8025650 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8025846:	460b      	mov	r3, r1
 8025848:	460a      	mov	r2, r1
 802584a:	e701      	b.n	8025650 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802584c:	2500      	movs	r5, #0
 802584e:	46ab      	mov	fp, r5
 8025850:	e72f      	b.n	80256b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8025852:	2700      	movs	r7, #0
 8025854:	463d      	mov	r5, r7
 8025856:	4638      	mov	r0, r7
 8025858:	46bb      	mov	fp, r7
 802585a:	e754      	b.n	8025706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802585c:	4677      	mov	r7, lr
 802585e:	4675      	mov	r5, lr
 8025860:	4670      	mov	r0, lr
 8025862:	46f3      	mov	fp, lr
 8025864:	e74f      	b.n	8025706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8025866:	2700      	movs	r7, #0
 8025868:	4638      	mov	r0, r7
 802586a:	e74c      	b.n	8025706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802586c:	460f      	mov	r7, r1
 802586e:	4608      	mov	r0, r1
 8025870:	e749      	b.n	8025706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08025874 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025878:	b093      	sub	sp, #76	; 0x4c
 802587a:	9210      	str	r2, [sp, #64]	; 0x40
 802587c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802587e:	9011      	str	r0, [sp, #68]	; 0x44
 8025880:	910e      	str	r1, [sp, #56]	; 0x38
 8025882:	6850      	ldr	r0, [r2, #4]
 8025884:	9306      	str	r3, [sp, #24]
 8025886:	6812      	ldr	r2, [r2, #0]
 8025888:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802588c:	fb00 1303 	mla	r3, r0, r3, r1
 8025890:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025894:	9307      	str	r3, [sp, #28]
 8025896:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025898:	681b      	ldr	r3, [r3, #0]
 802589a:	9308      	str	r3, [sp, #32]
 802589c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802589e:	685b      	ldr	r3, [r3, #4]
 80258a0:	9309      	str	r3, [sp, #36]	; 0x24
 80258a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80258a4:	2b00      	cmp	r3, #0
 80258a6:	dc03      	bgt.n	80258b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80258a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80258aa:	2b00      	cmp	r3, #0
 80258ac:	f340 83b6 	ble.w	802601c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80258b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80258b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80258b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80258ba:	1e48      	subs	r0, r1, #1
 80258bc:	1e55      	subs	r5, r2, #1
 80258be:	9b06      	ldr	r3, [sp, #24]
 80258c0:	2b00      	cmp	r3, #0
 80258c2:	f340 8165 	ble.w	8025b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80258c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80258c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80258ca:	1436      	asrs	r6, r6, #16
 80258cc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80258d0:	d406      	bmi.n	80258e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80258d2:	4286      	cmp	r6, r0
 80258d4:	da04      	bge.n	80258e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	db02      	blt.n	80258e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80258da:	42ab      	cmp	r3, r5
 80258dc:	f2c0 8159 	blt.w	8025b92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80258e0:	3601      	adds	r6, #1
 80258e2:	f100 8146 	bmi.w	8025b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80258e6:	42b1      	cmp	r1, r6
 80258e8:	f2c0 8143 	blt.w	8025b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80258ec:	3301      	adds	r3, #1
 80258ee:	f100 8140 	bmi.w	8025b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80258f2:	429a      	cmp	r2, r3
 80258f4:	f2c0 813d 	blt.w	8025b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80258f8:	9b06      	ldr	r3, [sp, #24]
 80258fa:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80258fe:	9f07      	ldr	r7, [sp, #28]
 8025900:	930f      	str	r3, [sp, #60]	; 0x3c
 8025902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025904:	2b00      	cmp	r3, #0
 8025906:	f340 8166 	ble.w	8025bd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802590a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802590c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802590e:	1418      	asrs	r0, r3, #16
 8025910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025912:	142d      	asrs	r5, r5, #16
 8025914:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025918:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802591a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802591e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025920:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025924:	f100 81f0 	bmi.w	8025d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025928:	f102 3eff 	add.w	lr, r2, #4294967295
 802592c:	4575      	cmp	r5, lr
 802592e:	f280 81eb 	bge.w	8025d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025932:	2800      	cmp	r0, #0
 8025934:	f2c0 81e8 	blt.w	8025d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025938:	f103 3eff 	add.w	lr, r3, #4294967295
 802593c:	4570      	cmp	r0, lr
 802593e:	f280 81e3 	bge.w	8025d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025942:	b212      	sxth	r2, r2
 8025944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025946:	fa1f fe81 	uxth.w	lr, r1
 802594a:	fb00 5002 	mla	r0, r0, r2, r5
 802594e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025952:	eb03 0a00 	add.w	sl, r3, r0
 8025956:	f813 9000 	ldrb.w	r9, [r3, r0]
 802595a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802595e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025962:	b29b      	uxth	r3, r3
 8025964:	f1bc 0f00 	cmp.w	ip, #0
 8025968:	f000 817b 	beq.w	8025c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802596c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025970:	eb0a 0b02 	add.w	fp, sl, r2
 8025974:	fa1f fa8c 	uxth.w	sl, ip
 8025978:	940a      	str	r4, [sp, #40]	; 0x28
 802597a:	fb0a fe0e 	mul.w	lr, sl, lr
 802597e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025982:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025986:	eba5 050e 	sub.w	r5, r5, lr
 802598a:	940b      	str	r4, [sp, #44]	; 0x2c
 802598c:	fa1f fa8a 	uxth.w	sl, sl
 8025990:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025992:	b2ad      	uxth	r5, r5
 8025994:	eba3 030a 	sub.w	r3, r3, sl
 8025998:	fb08 f505 	mul.w	r5, r8, r5
 802599c:	b29b      	uxth	r3, r3
 802599e:	fb09 5303 	mla	r3, r9, r3, r5
 80259a2:	fb0a 3304 	mla	r3, sl, r4, r3
 80259a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80259a8:	fb0e 3304 	mla	r3, lr, r4, r3
 80259ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80259b0:	2b00      	cmp	r3, #0
 80259b2:	f000 80d1 	beq.w	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80259b6:	9c08      	ldr	r4, [sp, #32]
 80259b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80259bc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80259c0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80259c4:	f000 8152 	beq.w	8025c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80259c8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80259cc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80259d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80259d4:	fb0a fe0e 	mul.w	lr, sl, lr
 80259d8:	fb09 f000 	mul.w	r0, r9, r0
 80259dc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80259e0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80259e4:	f100 0b20 	add.w	fp, r0, #32
 80259e8:	44ce      	add	lr, r9
 80259ea:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80259ee:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80259f2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80259f6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80259fa:	ea4e 0909 	orr.w	r9, lr, r9
 80259fe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025a02:	8868      	ldrh	r0, [r5, #2]
 8025a04:	d019      	beq.n	8025a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025a06:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025a0a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025a0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025a12:	fb0a fe0e 	mul.w	lr, sl, lr
 8025a16:	fb08 f800 	mul.w	r8, r8, r0
 8025a1a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025a1e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025a22:	f108 0b20 	add.w	fp, r8, #32
 8025a26:	4486      	add	lr, r0
 8025a28:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025a2c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025a30:	0a00      	lsrs	r0, r0, #8
 8025a32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025a36:	ea4e 0000 	orr.w	r0, lr, r0
 8025a3a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025a3e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025a42:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025a46:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025a4a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025a4e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025a52:	ea4e 0909 	orr.w	r9, lr, r9
 8025a56:	ea4a 0000 	orr.w	r0, sl, r0
 8025a5a:	f1bc 0f00 	cmp.w	ip, #0
 8025a5e:	f000 8107 	beq.w	8025c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025a62:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025a66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025a68:	3a01      	subs	r2, #1
 8025a6a:	2cff      	cmp	r4, #255	; 0xff
 8025a6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025a70:	f102 0202 	add.w	r2, r2, #2
 8025a74:	eb05 0e02 	add.w	lr, r5, r2
 8025a78:	5aaa      	ldrh	r2, [r5, r2]
 8025a7a:	d018      	beq.n	8025aae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025a7c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025a80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a84:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025a88:	fb04 fa02 	mul.w	sl, r4, r2
 8025a8c:	fb08 f805 	mul.w	r8, r8, r5
 8025a90:	f10a 0520 	add.w	r5, sl, #32
 8025a94:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025a98:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025a9c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025aa0:	4442      	add	r2, r8
 8025aa2:	0a2d      	lsrs	r5, r5, #8
 8025aa4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025aa8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025aac:	432a      	orrs	r2, r5
 8025aae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025ab0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025ab4:	2cff      	cmp	r4, #255	; 0xff
 8025ab6:	d01a      	beq.n	8025aee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025ab8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025abc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025ac0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ac4:	fb04 fa05 	mul.w	sl, r4, r5
 8025ac8:	fb08 f80e 	mul.w	r8, r8, lr
 8025acc:	f10a 0e20 	add.w	lr, sl, #32
 8025ad0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025ad4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ad8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025adc:	4445      	add	r5, r8
 8025ade:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ae2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025ae6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025aea:	ea45 050e 	orr.w	r5, r5, lr
 8025aee:	fb1c fe01 	smulbb	lr, ip, r1
 8025af2:	f1cc 0810 	rsb	r8, ip, #16
 8025af6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025afa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025afe:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025b02:	eba8 0801 	sub.w	r8, r8, r1
 8025b06:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025b0a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025b0e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025b12:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025b16:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025b1a:	ea4a 0202 	orr.w	r2, sl, r2
 8025b1e:	4341      	muls	r1, r0
 8025b20:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025b24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b28:	fb09 1108 	mla	r1, r9, r8, r1
 8025b2c:	ea4b 0505 	orr.w	r5, fp, r5
 8025b30:	fb0c 1102 	mla	r1, ip, r2, r1
 8025b34:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025b38:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025b3c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025b40:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b44:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025b48:	ea42 0e0e 	orr.w	lr, r2, lr
 8025b4c:	fa1f f28e 	uxth.w	r2, lr
 8025b50:	2bff      	cmp	r3, #255	; 0xff
 8025b52:	f040 80a1 	bne.w	8025c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025b56:	803a      	strh	r2, [r7, #0]
 8025b58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025b5a:	3702      	adds	r7, #2
 8025b5c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025b5e:	4413      	add	r3, r2
 8025b60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025b62:	931d      	str	r3, [sp, #116]	; 0x74
 8025b64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b66:	441a      	add	r2, r3
 8025b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025b6a:	3b01      	subs	r3, #1
 8025b6c:	921e      	str	r2, [sp, #120]	; 0x78
 8025b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025b70:	e6c7      	b.n	8025902 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025b72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025b74:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8025b76:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8025b78:	4433      	add	r3, r6
 8025b7a:	931d      	str	r3, [sp, #116]	; 0x74
 8025b7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b7e:	441c      	add	r4, r3
 8025b80:	9b06      	ldr	r3, [sp, #24]
 8025b82:	3b01      	subs	r3, #1
 8025b84:	941e      	str	r4, [sp, #120]	; 0x78
 8025b86:	9306      	str	r3, [sp, #24]
 8025b88:	9b07      	ldr	r3, [sp, #28]
 8025b8a:	3302      	adds	r3, #2
 8025b8c:	9307      	str	r3, [sp, #28]
 8025b8e:	e696      	b.n	80258be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025b90:	d028      	beq.n	8025be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025b92:	9b06      	ldr	r3, [sp, #24]
 8025b94:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025b96:	3b01      	subs	r3, #1
 8025b98:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8025b9a:	fb00 5003 	mla	r0, r0, r3, r5
 8025b9e:	1400      	asrs	r0, r0, #16
 8025ba0:	f53f aeaa 	bmi.w	80258f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ba4:	3901      	subs	r1, #1
 8025ba6:	4288      	cmp	r0, r1
 8025ba8:	f6bf aea6 	bge.w	80258f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025bac:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025bae:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025bb0:	fb01 0303 	mla	r3, r1, r3, r0
 8025bb4:	141b      	asrs	r3, r3, #16
 8025bb6:	f53f ae9f 	bmi.w	80258f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025bba:	3a01      	subs	r2, #1
 8025bbc:	4293      	cmp	r3, r2
 8025bbe:	f6bf ae9b 	bge.w	80258f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025bc2:	9b06      	ldr	r3, [sp, #24]
 8025bc4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025bc8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8025bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8025bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025bd0:	2b00      	cmp	r3, #0
 8025bd2:	f300 80b6 	bgt.w	8025d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8025bd6:	9b06      	ldr	r3, [sp, #24]
 8025bd8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025bdc:	9b07      	ldr	r3, [sp, #28]
 8025bde:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025be2:	9307      	str	r3, [sp, #28]
 8025be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025be6:	2b00      	cmp	r3, #0
 8025be8:	f340 8218 	ble.w	802601c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025bf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025bf2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025bf6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025bfa:	eef0 6a62 	vmov.f32	s13, s5
 8025bfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025c02:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025c06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c0a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8025c0e:	eef0 6a43 	vmov.f32	s13, s6
 8025c12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c16:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8025c1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025c1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025c22:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025c26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025c2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025c2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025c32:	ee12 2a90 	vmov	r2, s5
 8025c36:	eef0 2a47 	vmov.f32	s5, s14
 8025c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c3e:	ee13 2a10 	vmov	r2, s6
 8025c42:	931f      	str	r3, [sp, #124]	; 0x7c
 8025c44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025c46:	eeb0 3a67 	vmov.f32	s6, s15
 8025c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c4e:	9320      	str	r3, [sp, #128]	; 0x80
 8025c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025c54:	3b01      	subs	r3, #1
 8025c56:	930e      	str	r3, [sp, #56]	; 0x38
 8025c58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025c5a:	bf08      	it	eq
 8025c5c:	4613      	moveq	r3, r2
 8025c5e:	9306      	str	r3, [sp, #24]
 8025c60:	e61f      	b.n	80258a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025c62:	fb08 f505 	mul.w	r5, r8, r5
 8025c66:	fb09 5303 	mla	r3, r9, r3, r5
 8025c6a:	e69f      	b.n	80259ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8025c6c:	4681      	mov	r9, r0
 8025c6e:	e6c6      	b.n	80259fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8025c70:	f1c1 0210 	rsb	r2, r1, #16
 8025c74:	4341      	muls	r1, r0
 8025c76:	fb09 1902 	mla	r9, r9, r2, r1
 8025c7a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025c7e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025c82:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025c86:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025c8a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025c8e:	ea42 0909 	orr.w	r9, r2, r9
 8025c92:	fa1f f289 	uxth.w	r2, r9
 8025c96:	e75b      	b.n	8025b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8025c98:	f8b7 c000 	ldrh.w	ip, [r7]
 8025c9c:	43db      	mvns	r3, r3
 8025c9e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025ca2:	fa5f fe83 	uxtb.w	lr, r3
 8025ca6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025caa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025cae:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025cb2:	fb00 f00e 	mul.w	r0, r0, lr
 8025cb6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025cba:	b2db      	uxtb	r3, r3
 8025cbc:	1c41      	adds	r1, r0, #1
 8025cbe:	fb05 f50e 	mul.w	r5, r5, lr
 8025cc2:	fb03 f30e 	mul.w	r3, r3, lr
 8025cc6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8025cca:	1211      	asrs	r1, r2, #8
 8025ccc:	f021 0107 	bic.w	r1, r1, #7
 8025cd0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025cd4:	48d3      	ldr	r0, [pc, #844]	; (8026024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025cd6:	b2c9      	uxtb	r1, r1
 8025cd8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8025cdc:	1c69      	adds	r1, r5, #1
 8025cde:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025ce2:	10d1      	asrs	r1, r2, #3
 8025ce4:	00d2      	lsls	r2, r2, #3
 8025ce6:	f021 0103 	bic.w	r1, r1, #3
 8025cea:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025cee:	00c9      	lsls	r1, r1, #3
 8025cf0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025cf4:	4301      	orrs	r1, r0
 8025cf6:	1c58      	adds	r0, r3, #1
 8025cf8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025cfc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025d00:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025d04:	430a      	orrs	r2, r1
 8025d06:	e726      	b.n	8025b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025d08:	f115 0e01 	adds.w	lr, r5, #1
 8025d0c:	f53f af24 	bmi.w	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025d10:	4572      	cmp	r2, lr
 8025d12:	f6ff af21 	blt.w	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025d16:	f110 0e01 	adds.w	lr, r0, #1
 8025d1a:	f53f af1d 	bmi.w	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025d1e:	4573      	cmp	r3, lr
 8025d20:	f6ff af1a 	blt.w	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025d24:	b21b      	sxth	r3, r3
 8025d26:	b212      	sxth	r2, r2
 8025d28:	9301      	str	r3, [sp, #4]
 8025d2a:	9200      	str	r2, [sp, #0]
 8025d2c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025d30:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025d34:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8025d38:	4639      	mov	r1, r7
 8025d3a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025d3c:	f7ff fc22 	bl	8025584 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025d40:	e70a      	b.n	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025d42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025d44:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025d48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025d4a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025d4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025d50:	fa1f fc82 	uxth.w	ip, r2
 8025d54:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025d5a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025d5e:	141f      	asrs	r7, r3, #16
 8025d60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025d62:	141b      	asrs	r3, r3, #16
 8025d64:	fb01 3707 	mla	r7, r1, r7, r3
 8025d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d6a:	eb03 0a07 	add.w	sl, r3, r7
 8025d6e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025d72:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025d76:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025d7a:	b29b      	uxth	r3, r3
 8025d7c:	2d00      	cmp	r5, #0
 8025d7e:	f000 80fe 	beq.w	8025f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8025d82:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025d86:	eb0a 0b01 	add.w	fp, sl, r1
 8025d8a:	fa1f fa85 	uxth.w	sl, r5
 8025d8e:	940c      	str	r4, [sp, #48]	; 0x30
 8025d90:	fb0a fc0c 	mul.w	ip, sl, ip
 8025d94:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025d98:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025d9c:	eba0 000c 	sub.w	r0, r0, ip
 8025da0:	940d      	str	r4, [sp, #52]	; 0x34
 8025da2:	fa1f fa8a 	uxth.w	sl, sl
 8025da6:	b280      	uxth	r0, r0
 8025da8:	eba3 030a 	sub.w	r3, r3, sl
 8025dac:	fb08 f000 	mul.w	r0, r8, r0
 8025db0:	b29b      	uxth	r3, r3
 8025db2:	fb09 0303 	mla	r3, r9, r3, r0
 8025db6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025db8:	fb0a 3300 	mla	r3, sl, r0, r3
 8025dbc:	fb0c 3304 	mla	r3, ip, r4, r3
 8025dc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025dc4:	2b00      	cmp	r3, #0
 8025dc6:	f000 80cc 	beq.w	8025f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8025dca:	9808      	ldr	r0, [sp, #32]
 8025dcc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025dd0:	9c08      	ldr	r4, [sp, #32]
 8025dd2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025dd6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025dda:	f000 80d5 	beq.w	8025f88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8025dde:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025de2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025de6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025dea:	fb0a fc0c 	mul.w	ip, sl, ip
 8025dee:	fb09 f707 	mul.w	r7, r9, r7
 8025df2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025df6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025dfa:	f107 0b20 	add.w	fp, r7, #32
 8025dfe:	44cc      	add	ip, r9
 8025e00:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025e04:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025e08:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e0c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025e10:	ea4c 0909 	orr.w	r9, ip, r9
 8025e14:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025e18:	8847      	ldrh	r7, [r0, #2]
 8025e1a:	d019      	beq.n	8025e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8025e1c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025e20:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025e24:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e28:	fb0a fc0c 	mul.w	ip, sl, ip
 8025e2c:	fb08 f807 	mul.w	r8, r8, r7
 8025e30:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025e34:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025e38:	f108 0b20 	add.w	fp, r8, #32
 8025e3c:	44bc      	add	ip, r7
 8025e3e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025e42:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025e46:	0a3f      	lsrs	r7, r7, #8
 8025e48:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e4c:	ea4c 0707 	orr.w	r7, ip, r7
 8025e50:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025e54:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025e58:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025e5c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025e60:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025e64:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e68:	ea4c 0909 	orr.w	r9, ip, r9
 8025e6c:	ea4a 0707 	orr.w	r7, sl, r7
 8025e70:	2d00      	cmp	r5, #0
 8025e72:	f000 808b 	beq.w	8025f8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025e76:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025e7a:	3901      	subs	r1, #1
 8025e7c:	0049      	lsls	r1, r1, #1
 8025e7e:	3102      	adds	r1, #2
 8025e80:	eb00 0c01 	add.w	ip, r0, r1
 8025e84:	5a41      	ldrh	r1, [r0, r1]
 8025e86:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025e88:	28ff      	cmp	r0, #255	; 0xff
 8025e8a:	d019      	beq.n	8025ec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8025e8c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025e90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025e92:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025e96:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025e9a:	fb04 fa01 	mul.w	sl, r4, r1
 8025e9e:	fb08 f800 	mul.w	r8, r8, r0
 8025ea2:	f10a 0020 	add.w	r0, sl, #32
 8025ea6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025eaa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025eae:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025eb2:	4441      	add	r1, r8
 8025eb4:	0a00      	lsrs	r0, r0, #8
 8025eb6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025eba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ebe:	4301      	orrs	r1, r0
 8025ec0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025ec2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025ec6:	2cff      	cmp	r4, #255	; 0xff
 8025ec8:	d01a      	beq.n	8025f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8025eca:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025ece:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ed2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ed6:	fb04 fa00 	mul.w	sl, r4, r0
 8025eda:	fb08 f80c 	mul.w	r8, r8, ip
 8025ede:	f10a 0c20 	add.w	ip, sl, #32
 8025ee2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025ee6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025eea:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025eee:	4440      	add	r0, r8
 8025ef0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ef4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025ef8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025efc:	ea40 000c 	orr.w	r0, r0, ip
 8025f00:	fb15 fc02 	smulbb	ip, r5, r2
 8025f04:	f1c5 0810 	rsb	r8, r5, #16
 8025f08:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025f0c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025f10:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025f14:	eba8 0802 	sub.w	r8, r8, r2
 8025f18:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025f1c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025f20:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025f24:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025f28:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025f2c:	ea4a 0101 	orr.w	r1, sl, r1
 8025f30:	437a      	muls	r2, r7
 8025f32:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025f36:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025f3a:	fb09 2208 	mla	r2, r9, r8, r2
 8025f3e:	ea4b 0000 	orr.w	r0, fp, r0
 8025f42:	fb05 2201 	mla	r2, r5, r1, r2
 8025f46:	fb0c 2200 	mla	r2, ip, r0, r2
 8025f4a:	0d57      	lsrs	r7, r2, #21
 8025f4c:	0952      	lsrs	r2, r2, #5
 8025f4e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f52:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f56:	433a      	orrs	r2, r7
 8025f58:	2bff      	cmp	r3, #255	; 0xff
 8025f5a:	b292      	uxth	r2, r2
 8025f5c:	d127      	bne.n	8025fae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8025f5e:	f8ae 2000 	strh.w	r2, [lr]
 8025f62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025f64:	f10e 0e02 	add.w	lr, lr, #2
 8025f68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025f6a:	4413      	add	r3, r2
 8025f6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025f6e:	931d      	str	r3, [sp, #116]	; 0x74
 8025f70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025f72:	441a      	add	r2, r3
 8025f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025f76:	3b01      	subs	r3, #1
 8025f78:	921e      	str	r2, [sp, #120]	; 0x78
 8025f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8025f7c:	e627      	b.n	8025bce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8025f7e:	fb08 f000 	mul.w	r0, r8, r0
 8025f82:	fb09 0303 	mla	r3, r9, r3, r0
 8025f86:	e71b      	b.n	8025dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8025f88:	46b9      	mov	r9, r7
 8025f8a:	e743      	b.n	8025e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8025f8c:	f1c2 0110 	rsb	r1, r2, #16
 8025f90:	437a      	muls	r2, r7
 8025f92:	fb09 2901 	mla	r9, r9, r1, r2
 8025f96:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025f9a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025f9e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025fa2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025fa6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025faa:	4302      	orrs	r2, r0
 8025fac:	e7d4      	b.n	8025f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8025fae:	f8be 7000 	ldrh.w	r7, [lr]
 8025fb2:	43db      	mvns	r3, r3
 8025fb4:	4c1b      	ldr	r4, [pc, #108]	; (8026024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025fb6:	1238      	asrs	r0, r7, #8
 8025fb8:	fa5f fc83 	uxtb.w	ip, r3
 8025fbc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025fc0:	10fd      	asrs	r5, r7, #3
 8025fc2:	00fb      	lsls	r3, r7, #3
 8025fc4:	fb00 f00c 	mul.w	r0, r0, ip
 8025fc8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025fcc:	b2db      	uxtb	r3, r3
 8025fce:	fb05 f10c 	mul.w	r1, r5, ip
 8025fd2:	1c45      	adds	r5, r0, #1
 8025fd4:	fb03 f30c 	mul.w	r3, r3, ip
 8025fd8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025fdc:	1215      	asrs	r5, r2, #8
 8025fde:	f025 0507 	bic.w	r5, r5, #7
 8025fe2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025fe6:	1c4d      	adds	r5, r1, #1
 8025fe8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025fec:	10d1      	asrs	r1, r2, #3
 8025fee:	b2c0      	uxtb	r0, r0
 8025ff0:	f021 0103 	bic.w	r1, r1, #3
 8025ff4:	00d2      	lsls	r2, r2, #3
 8025ff6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8025ffa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025ffe:	00c9      	lsls	r1, r1, #3
 8026000:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026004:	4308      	orrs	r0, r1
 8026006:	1c59      	adds	r1, r3, #1
 8026008:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802600c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026010:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026014:	4318      	orrs	r0, r3
 8026016:	f8ae 0000 	strh.w	r0, [lr]
 802601a:	e7a2      	b.n	8025f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802601c:	b013      	add	sp, #76	; 0x4c
 802601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026022:	bf00      	nop
 8026024:	fffff800 	.word	0xfffff800

08026028 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802602c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8026030:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026034:	fb05 4c03 	mla	ip, r5, r3, r4
 8026038:	2d00      	cmp	r5, #0
 802603a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802603e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8026042:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8026046:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802604a:	8808      	ldrh	r0, [r1, #0]
 802604c:	f2c0 80a7 	blt.w	802619e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026050:	45aa      	cmp	sl, r5
 8026052:	f340 80a4 	ble.w	802619e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026056:	2c00      	cmp	r4, #0
 8026058:	f2c0 809f 	blt.w	802619a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802605c:	42a3      	cmp	r3, r4
 802605e:	f340 809c 	ble.w	802619a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026062:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8026066:	1c62      	adds	r2, r4, #1
 8026068:	f100 809c 	bmi.w	80261a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802606c:	4293      	cmp	r3, r2
 802606e:	f340 8099 	ble.w	80261a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026072:	f1b9 0f00 	cmp.w	r9, #0
 8026076:	f000 8095 	beq.w	80261a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802607a:	f8be c002 	ldrh.w	ip, [lr, #2]
 802607e:	3501      	adds	r5, #1
 8026080:	f100 8094 	bmi.w	80261ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026084:	45aa      	cmp	sl, r5
 8026086:	f340 8091 	ble.w	80261ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802608a:	2f00      	cmp	r7, #0
 802608c:	f000 808e 	beq.w	80261ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026090:	2c00      	cmp	r4, #0
 8026092:	f2c0 8089 	blt.w	80261a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026096:	42a3      	cmp	r3, r4
 8026098:	f340 8086 	ble.w	80261a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802609c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80260a0:	3401      	adds	r4, #1
 80260a2:	f100 8086 	bmi.w	80261b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80260a6:	42a3      	cmp	r3, r4
 80260a8:	f340 8083 	ble.w	80261b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80260ac:	f1b9 0f00 	cmp.w	r9, #0
 80260b0:	d07f      	beq.n	80261b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80260b2:	3301      	adds	r3, #1
 80260b4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80260b8:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80260bc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80260c0:	fb19 fe07 	smulbb	lr, r9, r7
 80260c4:	f1c7 0210 	rsb	r2, r7, #16
 80260c8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80260cc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80260d0:	eba2 0209 	sub.w	r2, r2, r9
 80260d4:	ea44 0808 	orr.w	r8, r4, r8
 80260d8:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80260dc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80260e0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80260e4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80260e8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80260ec:	ea44 0c0c 	orr.w	ip, r4, ip
 80260f0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80260f4:	fb04 f40c 	mul.w	r4, r4, ip
 80260f8:	fb02 4808 	mla	r8, r2, r8, r4
 80260fc:	041a      	lsls	r2, r3, #16
 80260fe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026102:	b2b4      	uxth	r4, r6
 8026104:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026108:	43f6      	mvns	r6, r6
 802610a:	4313      	orrs	r3, r2
 802610c:	042a      	lsls	r2, r5, #16
 802610e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026112:	b2f6      	uxtb	r6, r6
 8026114:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026118:	fb0e 8303 	mla	r3, lr, r3, r8
 802611c:	432a      	orrs	r2, r5
 802611e:	fb07 3202 	mla	r2, r7, r2, r3
 8026122:	10c7      	asrs	r7, r0, #3
 8026124:	0d53      	lsrs	r3, r2, #21
 8026126:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802612a:	0952      	lsrs	r2, r2, #5
 802612c:	fb17 f706 	smulbb	r7, r7, r6
 8026130:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026134:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026138:	431a      	orrs	r2, r3
 802613a:	b293      	uxth	r3, r2
 802613c:	1202      	asrs	r2, r0, #8
 802613e:	121d      	asrs	r5, r3, #8
 8026140:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026144:	00c0      	lsls	r0, r0, #3
 8026146:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802614a:	fb12 f206 	smulbb	r2, r2, r6
 802614e:	b2c0      	uxtb	r0, r0
 8026150:	fb05 2504 	mla	r5, r5, r4, r2
 8026154:	10da      	asrs	r2, r3, #3
 8026156:	fb10 f006 	smulbb	r0, r0, r6
 802615a:	00db      	lsls	r3, r3, #3
 802615c:	b2ad      	uxth	r5, r5
 802615e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026162:	b2db      	uxtb	r3, r3
 8026164:	fb02 7204 	mla	r2, r2, r4, r7
 8026168:	fb03 0004 	mla	r0, r3, r4, r0
 802616c:	1c6b      	adds	r3, r5, #1
 802616e:	b292      	uxth	r2, r2
 8026170:	b280      	uxth	r0, r0
 8026172:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026176:	1c43      	adds	r3, r0, #1
 8026178:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802617c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026180:	1c50      	adds	r0, r2, #1
 8026182:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026186:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802618a:	0952      	lsrs	r2, r2, #5
 802618c:	432b      	orrs	r3, r5
 802618e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026192:	4313      	orrs	r3, r2
 8026194:	800b      	strh	r3, [r1, #0]
 8026196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802619a:	4680      	mov	r8, r0
 802619c:	e763      	b.n	8026066 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802619e:	4684      	mov	ip, r0
 80261a0:	4680      	mov	r8, r0
 80261a2:	e76c      	b.n	802607e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80261a4:	4684      	mov	ip, r0
 80261a6:	e76a      	b.n	802607e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80261a8:	4605      	mov	r5, r0
 80261aa:	e779      	b.n	80260a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80261ac:	4603      	mov	r3, r0
 80261ae:	4605      	mov	r5, r0
 80261b0:	e782      	b.n	80260b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80261b2:	4603      	mov	r3, r0
 80261b4:	e780      	b.n	80260b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080261b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261ba:	b093      	sub	sp, #76	; 0x4c
 80261bc:	461d      	mov	r5, r3
 80261be:	9210      	str	r2, [sp, #64]	; 0x40
 80261c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80261c2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80261c6:	910a      	str	r1, [sp, #40]	; 0x28
 80261c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80261ca:	6859      	ldr	r1, [r3, #4]
 80261cc:	681b      	ldr	r3, [r3, #0]
 80261ce:	9011      	str	r0, [sp, #68]	; 0x44
 80261d0:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80261d4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80261d8:	fb01 2707 	mla	r7, r1, r7, r2
 80261dc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80261e0:	9307      	str	r3, [sp, #28]
 80261e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80261e4:	681b      	ldr	r3, [r3, #0]
 80261e6:	9309      	str	r3, [sp, #36]	; 0x24
 80261e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80261ea:	43db      	mvns	r3, r3
 80261ec:	b2db      	uxtb	r3, r3
 80261ee:	9308      	str	r3, [sp, #32]
 80261f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80261f2:	2b00      	cmp	r3, #0
 80261f4:	dc03      	bgt.n	80261fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80261f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80261f8:	2b00      	cmp	r3, #0
 80261fa:	f340 8205 	ble.w	8026608 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80261fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026200:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026204:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026208:	1e48      	subs	r0, r1, #1
 802620a:	f102 3cff 	add.w	ip, r2, #4294967295
 802620e:	2d00      	cmp	r5, #0
 8026210:	f340 80da 	ble.w	80263c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026214:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026218:	ea4f 4326 	mov.w	r3, r6, asr #16
 802621c:	d406      	bmi.n	802622c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802621e:	4586      	cmp	lr, r0
 8026220:	da04      	bge.n	802622c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026222:	2b00      	cmp	r3, #0
 8026224:	db02      	blt.n	802622c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026226:	4563      	cmp	r3, ip
 8026228:	f2c0 80cf 	blt.w	80263ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802622c:	f11e 0e01 	adds.w	lr, lr, #1
 8026230:	f100 80c1 	bmi.w	80263b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026234:	4571      	cmp	r1, lr
 8026236:	f2c0 80be 	blt.w	80263b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802623a:	3301      	adds	r3, #1
 802623c:	f100 80bb 	bmi.w	80263b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026240:	429a      	cmp	r2, r3
 8026242:	f2c0 80b8 	blt.w	80263b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026246:	46a9      	mov	r9, r5
 8026248:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802624c:	f1b9 0f00 	cmp.w	r9, #0
 8026250:	f340 80d8 	ble.w	8026404 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026254:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026256:	1421      	asrs	r1, r4, #16
 8026258:	ea4f 4026 	mov.w	r0, r6, asr #16
 802625c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026260:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026264:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026268:	f100 8112 	bmi.w	8026490 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802626c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026270:	4551      	cmp	r1, sl
 8026272:	f280 810d 	bge.w	8026490 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026276:	2800      	cmp	r0, #0
 8026278:	f2c0 810a 	blt.w	8026490 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802627c:	f103 3aff 	add.w	sl, r3, #4294967295
 8026280:	4550      	cmp	r0, sl
 8026282:	f280 8105 	bge.w	8026490 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026286:	fa0f f38e 	sxth.w	r3, lr
 802628a:	fb00 1103 	mla	r1, r0, r3, r1
 802628e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026290:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026294:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026298:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802629c:	f1bc 0f00 	cmp.w	ip, #0
 80262a0:	d007      	beq.n	80262b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80262a2:	005b      	lsls	r3, r3, #1
 80262a4:	eb0a 0003 	add.w	r0, sl, r3
 80262a8:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80262ac:	930c      	str	r3, [sp, #48]	; 0x30
 80262ae:	8843      	ldrh	r3, [r0, #2]
 80262b0:	930d      	str	r3, [sp, #52]	; 0x34
 80262b2:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80262b6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80262ba:	fb12 f30c 	smulbb	r3, r2, ip
 80262be:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80262c2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80262c6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80262ca:	10db      	asrs	r3, r3, #3
 80262cc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80262d0:	ea40 000e 	orr.w	r0, r0, lr
 80262d4:	f1cc 0e10 	rsb	lr, ip, #16
 80262d8:	ea4a 0101 	orr.w	r1, sl, r1
 80262dc:	9f08      	ldr	r7, [sp, #32]
 80262de:	ebae 0e02 	sub.w	lr, lr, r2
 80262e2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80262e6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80262ea:	4351      	muls	r1, r2
 80262ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80262ee:	fb0e 1e00 	mla	lr, lr, r0, r1
 80262f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80262f4:	0410      	lsls	r0, r2, #16
 80262f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80262fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80262fe:	4310      	orrs	r0, r2
 8026300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026302:	0412      	lsls	r2, r2, #16
 8026304:	fb03 e000 	mla	r0, r3, r0, lr
 8026308:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802630c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026310:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026314:	ea42 020e 	orr.w	r2, r2, lr
 8026318:	fb03 0302 	mla	r3, r3, r2, r0
 802631c:	f8b8 0000 	ldrh.w	r0, [r8]
 8026320:	0d5a      	lsrs	r2, r3, #21
 8026322:	095b      	lsrs	r3, r3, #5
 8026324:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026328:	1201      	asrs	r1, r0, #8
 802632a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802632e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026332:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026336:	00c0      	lsls	r0, r0, #3
 8026338:	4313      	orrs	r3, r2
 802633a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802633e:	fb11 f107 	smulbb	r1, r1, r7
 8026342:	b2c0      	uxtb	r0, r0
 8026344:	b29b      	uxth	r3, r3
 8026346:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802634a:	fb10 f007 	smulbb	r0, r0, r7
 802634e:	fb1e fe07 	smulbb	lr, lr, r7
 8026352:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026356:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802635a:	fb0c 1c02 	mla	ip, ip, r2, r1
 802635e:	10d9      	asrs	r1, r3, #3
 8026360:	00db      	lsls	r3, r3, #3
 8026362:	fa1f fc8c 	uxth.w	ip, ip
 8026366:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802636a:	b2db      	uxtb	r3, r3
 802636c:	fb01 e102 	mla	r1, r1, r2, lr
 8026370:	fb03 0302 	mla	r3, r3, r2, r0
 8026374:	b289      	uxth	r1, r1
 8026376:	b29a      	uxth	r2, r3
 8026378:	f10c 0301 	add.w	r3, ip, #1
 802637c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026380:	1c53      	adds	r3, r2, #1
 8026382:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026386:	1c4a      	adds	r2, r1, #1
 8026388:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802638c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026390:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026394:	0949      	lsrs	r1, r1, #5
 8026396:	ea43 030c 	orr.w	r3, r3, ip
 802639a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802639e:	430b      	orrs	r3, r1
 80263a0:	f8a8 3000 	strh.w	r3, [r8]
 80263a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80263a6:	f108 0802 	add.w	r8, r8, #2
 80263aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80263ae:	441c      	add	r4, r3
 80263b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80263b2:	441e      	add	r6, r3
 80263b4:	e74a      	b.n	802624c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80263b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80263b8:	3d01      	subs	r5, #1
 80263ba:	441c      	add	r4, r3
 80263bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80263be:	441e      	add	r6, r3
 80263c0:	9b07      	ldr	r3, [sp, #28]
 80263c2:	3302      	adds	r3, #2
 80263c4:	9307      	str	r3, [sp, #28]
 80263c6:	e722      	b.n	802620e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80263c8:	d022      	beq.n	8026410 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80263ca:	1e6b      	subs	r3, r5, #1
 80263cc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80263ce:	fb00 4003 	mla	r0, r0, r3, r4
 80263d2:	1400      	asrs	r0, r0, #16
 80263d4:	f53f af37 	bmi.w	8026246 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80263d8:	3901      	subs	r1, #1
 80263da:	4288      	cmp	r0, r1
 80263dc:	f6bf af33 	bge.w	8026246 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80263e0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80263e2:	fb01 6303 	mla	r3, r1, r3, r6
 80263e6:	141b      	asrs	r3, r3, #16
 80263e8:	f53f af2d 	bmi.w	8026246 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80263ec:	3a01      	subs	r2, #1
 80263ee:	4293      	cmp	r3, r2
 80263f0:	f6bf af29 	bge.w	8026246 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80263f4:	46a8      	mov	r8, r5
 80263f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80263fa:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80263fe:	f1b8 0f00 	cmp.w	r8, #0
 8026402:	dc60      	bgt.n	80264c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8026404:	9b07      	ldr	r3, [sp, #28]
 8026406:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802640a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802640e:	9307      	str	r3, [sp, #28]
 8026410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026412:	2b00      	cmp	r3, #0
 8026414:	f340 80f8 	ble.w	8026608 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802641c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802641e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026422:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026426:	eef0 6a62 	vmov.f32	s13, s5
 802642a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802642e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026432:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026436:	ee16 4a90 	vmov	r4, s13
 802643a:	eef0 6a43 	vmov.f32	s13, s6
 802643e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026442:	ee16 6a90 	vmov	r6, s13
 8026446:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802644a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802644e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026452:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026456:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802645a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802645e:	ee12 2a90 	vmov	r2, s5
 8026462:	eef0 2a47 	vmov.f32	s5, s14
 8026466:	fb92 f3f3 	sdiv	r3, r2, r3
 802646a:	ee13 2a10 	vmov	r2, s6
 802646e:	931f      	str	r3, [sp, #124]	; 0x7c
 8026470:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026472:	eeb0 3a67 	vmov.f32	s6, s15
 8026476:	fb92 f3f3 	sdiv	r3, r2, r3
 802647a:	9320      	str	r3, [sp, #128]	; 0x80
 802647c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802647e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026480:	3b01      	subs	r3, #1
 8026482:	930a      	str	r3, [sp, #40]	; 0x28
 8026484:	bf08      	it	eq
 8026486:	4615      	moveq	r5, r2
 8026488:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802648a:	bf18      	it	ne
 802648c:	461d      	movne	r5, r3
 802648e:	e6af      	b.n	80261f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026490:	f111 0a01 	adds.w	sl, r1, #1
 8026494:	d486      	bmi.n	80263a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026496:	45d6      	cmp	lr, sl
 8026498:	db84      	blt.n	80263a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802649a:	f110 0a01 	adds.w	sl, r0, #1
 802649e:	d481      	bmi.n	80263a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80264a0:	4553      	cmp	r3, sl
 80264a2:	f6ff af7f 	blt.w	80263a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80264a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80264a8:	b21b      	sxth	r3, r3
 80264aa:	9101      	str	r1, [sp, #4]
 80264ac:	4641      	mov	r1, r8
 80264ae:	9300      	str	r3, [sp, #0]
 80264b0:	fa0f f38e 	sxth.w	r3, lr
 80264b4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80264b8:	e9cd c704 	strd	ip, r7, [sp, #16]
 80264bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80264be:	9811      	ldr	r0, [sp, #68]	; 0x44
 80264c0:	f7ff fdb2 	bl	8026028 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80264c4:	e76e      	b.n	80263a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80264c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80264c8:	1430      	asrs	r0, r6, #16
 80264ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80264cc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80264d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264d4:	1423      	asrs	r3, r4, #16
 80264d6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80264da:	fb01 3000 	mla	r0, r1, r0, r3
 80264de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80264e4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80264e8:	8858      	ldrh	r0, [r3, #2]
 80264ea:	f1be 0f00 	cmp.w	lr, #0
 80264ee:	d00b      	beq.n	8026508 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80264f0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80264f4:	3901      	subs	r1, #1
 80264f6:	0049      	lsls	r1, r1, #1
 80264f8:	3102      	adds	r1, #2
 80264fa:	eb03 0b01 	add.w	fp, r3, r1
 80264fe:	5a5b      	ldrh	r3, [r3, r1]
 8026500:	930e      	str	r3, [sp, #56]	; 0x38
 8026502:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026506:	930f      	str	r3, [sp, #60]	; 0x3c
 8026508:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802650c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026510:	fb12 f30e 	smulbb	r3, r2, lr
 8026514:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026518:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802651c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026520:	10db      	asrs	r3, r3, #3
 8026522:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026526:	ea41 010c 	orr.w	r1, r1, ip
 802652a:	f1ce 0c10 	rsb	ip, lr, #16
 802652e:	ea4b 0000 	orr.w	r0, fp, r0
 8026532:	9f08      	ldr	r7, [sp, #32]
 8026534:	ebac 0c02 	sub.w	ip, ip, r2
 8026538:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802653c:	f108 38ff 	add.w	r8, r8, #4294967295
 8026540:	4350      	muls	r0, r2
 8026542:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026548:	fb0c 0c01 	mla	ip, ip, r1, r0
 802654c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802654e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026552:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8026556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026558:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802655c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026560:	0412      	lsls	r2, r2, #16
 8026562:	ea4b 0101 	orr.w	r1, fp, r1
 8026566:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802656a:	fb03 c101 	mla	r1, r3, r1, ip
 802656e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026572:	4302      	orrs	r2, r0
 8026574:	fb03 1202 	mla	r2, r3, r2, r1
 8026578:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802657c:	0952      	lsrs	r2, r2, #5
 802657e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026582:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8026586:	f8b9 2000 	ldrh.w	r2, [r9]
 802658a:	ea4b 0303 	orr.w	r3, fp, r3
 802658e:	1211      	asrs	r1, r2, #8
 8026590:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8026594:	b29b      	uxth	r3, r3
 8026596:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802659a:	00d2      	lsls	r2, r2, #3
 802659c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80265a0:	fb11 f107 	smulbb	r1, r1, r7
 80265a4:	1218      	asrs	r0, r3, #8
 80265a6:	fb1c fc07 	smulbb	ip, ip, r7
 80265aa:	b2d2      	uxtb	r2, r2
 80265ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80265b0:	fb12 f207 	smulbb	r2, r2, r7
 80265b4:	fb00 100a 	mla	r0, r0, sl, r1
 80265b8:	10d9      	asrs	r1, r3, #3
 80265ba:	00db      	lsls	r3, r3, #3
 80265bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80265c0:	b280      	uxth	r0, r0
 80265c2:	b2db      	uxtb	r3, r3
 80265c4:	fb01 c10a 	mla	r1, r1, sl, ip
 80265c8:	fb03 230a 	mla	r3, r3, sl, r2
 80265cc:	1c42      	adds	r2, r0, #1
 80265ce:	b289      	uxth	r1, r1
 80265d0:	b29b      	uxth	r3, r3
 80265d2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80265d6:	f101 0c01 	add.w	ip, r1, #1
 80265da:	1c5a      	adds	r2, r3, #1
 80265dc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80265e0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80265e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80265e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80265ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80265ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80265f2:	441c      	add	r4, r3
 80265f4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80265f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80265fa:	4310      	orrs	r0, r2
 80265fc:	441e      	add	r6, r3
 80265fe:	ea40 000c 	orr.w	r0, r0, ip
 8026602:	f829 0b02 	strh.w	r0, [r9], #2
 8026606:	e6fa      	b.n	80263fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026608:	b013      	add	sp, #76	; 0x4c
 802660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802660e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802660e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026612:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8026616:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802661a:	fb0e 4703 	mla	r7, lr, r3, r4
 802661e:	f1be 0f00 	cmp.w	lr, #0
 8026622:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8026626:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802662a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802662e:	8808      	ldrh	r0, [r1, #0]
 8026630:	db60      	blt.n	80266f4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026632:	45f1      	cmp	r9, lr
 8026634:	dd5e      	ble.n	80266f4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026636:	2c00      	cmp	r4, #0
 8026638:	db5a      	blt.n	80266f0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802663a:	42a3      	cmp	r3, r4
 802663c:	dd58      	ble.n	80266f0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802663e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8026642:	1c62      	adds	r2, r4, #1
 8026644:	d459      	bmi.n	80266fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026646:	4293      	cmp	r3, r2
 8026648:	dd57      	ble.n	80266fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802664a:	2d00      	cmp	r5, #0
 802664c:	d055      	beq.n	80266fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802664e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8026652:	f11e 0e01 	adds.w	lr, lr, #1
 8026656:	d454      	bmi.n	8026702 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026658:	45f1      	cmp	r9, lr
 802665a:	dd52      	ble.n	8026702 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802665c:	2e00      	cmp	r6, #0
 802665e:	d050      	beq.n	8026702 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026660:	2c00      	cmp	r4, #0
 8026662:	db4c      	blt.n	80266fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026664:	42a3      	cmp	r3, r4
 8026666:	dd4a      	ble.n	80266fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026668:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 802666c:	3401      	adds	r4, #1
 802666e:	d405      	bmi.n	802667c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026670:	42a3      	cmp	r3, r4
 8026672:	dd03      	ble.n	802667c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026674:	b115      	cbz	r5, 802667c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026676:	3301      	adds	r3, #1
 8026678:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 802667c:	fb15 f406 	smulbb	r4, r5, r6
 8026680:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8026684:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8026688:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802668c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026690:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8026694:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026698:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802669c:	ea43 0c0c 	orr.w	ip, r3, ip
 80266a0:	f1c6 0310 	rsb	r3, r6, #16
 80266a4:	ea4e 0707 	orr.w	r7, lr, r7
 80266a8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80266ac:	1b5b      	subs	r3, r3, r5
 80266ae:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80266b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80266b6:	437d      	muls	r5, r7
 80266b8:	fb03 5c0c 	mla	ip, r3, ip, r5
 80266bc:	0403      	lsls	r3, r0, #16
 80266be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80266c2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80266c6:	4318      	orrs	r0, r3
 80266c8:	0413      	lsls	r3, r2, #16
 80266ca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80266ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80266d2:	fb04 c000 	mla	r0, r4, r0, ip
 80266d6:	4313      	orrs	r3, r2
 80266d8:	fb06 0003 	mla	r0, r6, r3, r0
 80266dc:	0d43      	lsrs	r3, r0, #21
 80266de:	0940      	lsrs	r0, r0, #5
 80266e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80266e4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80266e8:	4318      	orrs	r0, r3
 80266ea:	8008      	strh	r0, [r1, #0]
 80266ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80266f0:	4684      	mov	ip, r0
 80266f2:	e7a6      	b.n	8026642 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80266f4:	4607      	mov	r7, r0
 80266f6:	4684      	mov	ip, r0
 80266f8:	e7ab      	b.n	8026652 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80266fa:	4607      	mov	r7, r0
 80266fc:	e7a9      	b.n	8026652 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80266fe:	4602      	mov	r2, r0
 8026700:	e7b4      	b.n	802666c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8026702:	4602      	mov	r2, r0
 8026704:	e7ba      	b.n	802667c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08026706 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802670a:	b08f      	sub	sp, #60	; 0x3c
 802670c:	461d      	mov	r5, r3
 802670e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026710:	9107      	str	r1, [sp, #28]
 8026712:	920c      	str	r2, [sp, #48]	; 0x30
 8026714:	6859      	ldr	r1, [r3, #4]
 8026716:	681b      	ldr	r3, [r3, #0]
 8026718:	900d      	str	r0, [sp, #52]	; 0x34
 802671a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802671e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8026722:	fb01 2707 	mla	r7, r1, r7, r2
 8026726:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802672a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802672c:	f8d3 8000 	ldr.w	r8, [r3]
 8026730:	9b07      	ldr	r3, [sp, #28]
 8026732:	2b00      	cmp	r3, #0
 8026734:	dc03      	bgt.n	802673e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026738:	2b00      	cmp	r3, #0
 802673a:	f340 8182 	ble.w	8026a42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802673e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026740:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026744:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026748:	1e48      	subs	r0, r1, #1
 802674a:	f102 3cff 	add.w	ip, r2, #4294967295
 802674e:	2d00      	cmp	r5, #0
 8026750:	f340 809b 	ble.w	802688a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8026754:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026758:	ea4f 4326 	mov.w	r3, r6, asr #16
 802675c:	d406      	bmi.n	802676c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802675e:	4586      	cmp	lr, r0
 8026760:	da04      	bge.n	802676c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026762:	2b00      	cmp	r3, #0
 8026764:	db02      	blt.n	802676c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026766:	4563      	cmp	r3, ip
 8026768:	f2c0 8090 	blt.w	802688c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802676c:	f11e 0e01 	adds.w	lr, lr, #1
 8026770:	f100 8084 	bmi.w	802687c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026774:	4571      	cmp	r1, lr
 8026776:	f2c0 8081 	blt.w	802687c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802677a:	3301      	adds	r3, #1
 802677c:	d47e      	bmi.n	802687c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802677e:	429a      	cmp	r2, r3
 8026780:	db7c      	blt.n	802687c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026782:	46aa      	mov	sl, r5
 8026784:	46b9      	mov	r9, r7
 8026786:	f1ba 0f00 	cmp.w	sl, #0
 802678a:	f340 8099 	ble.w	80268c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802678e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026790:	1421      	asrs	r1, r4, #16
 8026792:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026796:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802679a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802679e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80267a2:	f100 80d1 	bmi.w	8026948 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80267a6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80267aa:	4559      	cmp	r1, fp
 80267ac:	f280 80cc 	bge.w	8026948 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80267b0:	2800      	cmp	r0, #0
 80267b2:	f2c0 80c9 	blt.w	8026948 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80267b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80267ba:	4558      	cmp	r0, fp
 80267bc:	f280 80c4 	bge.w	8026948 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80267c0:	fa0f fe8e 	sxth.w	lr, lr
 80267c4:	fb00 110e 	mla	r1, r0, lr, r1
 80267c8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80267cc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80267d0:	8841      	ldrh	r1, [r0, #2]
 80267d2:	f1bc 0f00 	cmp.w	ip, #0
 80267d6:	d00b      	beq.n	80267f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80267d8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80267dc:	3b01      	subs	r3, #1
 80267de:	005b      	lsls	r3, r3, #1
 80267e0:	3302      	adds	r3, #2
 80267e2:	eb00 0e03 	add.w	lr, r0, r3
 80267e6:	5ac3      	ldrh	r3, [r0, r3]
 80267e8:	9308      	str	r3, [sp, #32]
 80267ea:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80267ee:	9309      	str	r3, [sp, #36]	; 0x24
 80267f0:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80267f4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80267f8:	fb12 f30c 	smulbb	r3, r2, ip
 80267fc:	f1cc 0e10 	rsb	lr, ip, #16
 8026800:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026804:	10db      	asrs	r3, r3, #3
 8026806:	ebae 0e02 	sub.w	lr, lr, r2
 802680a:	ea40 000b 	orr.w	r0, r0, fp
 802680e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026812:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026816:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802681a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802681e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026822:	ea4b 0101 	orr.w	r1, fp, r1
 8026826:	4351      	muls	r1, r2
 8026828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802682a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802682e:	0410      	lsls	r0, r2, #16
 8026830:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026834:	9908      	ldr	r1, [sp, #32]
 8026836:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802683a:	4310      	orrs	r0, r2
 802683c:	9a08      	ldr	r2, [sp, #32]
 802683e:	0412      	lsls	r2, r2, #16
 8026840:	fb03 e000 	mla	r0, r3, r0, lr
 8026844:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026848:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802684c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026850:	ea42 020e 	orr.w	r2, r2, lr
 8026854:	fb03 0302 	mla	r3, r3, r2, r0
 8026858:	0d5a      	lsrs	r2, r3, #21
 802685a:	095b      	lsrs	r3, r3, #5
 802685c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026860:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026864:	4313      	orrs	r3, r2
 8026866:	f8a9 3000 	strh.w	r3, [r9]
 802686a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802686c:	f109 0902 	add.w	r9, r9, #2
 8026870:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026874:	441c      	add	r4, r3
 8026876:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026878:	441e      	add	r6, r3
 802687a:	e784      	b.n	8026786 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802687c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802687e:	3d01      	subs	r5, #1
 8026880:	3702      	adds	r7, #2
 8026882:	441c      	add	r4, r3
 8026884:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026886:	441e      	add	r6, r3
 8026888:	e761      	b.n	802674e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802688a:	d01d      	beq.n	80268c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802688c:	1e6b      	subs	r3, r5, #1
 802688e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026890:	fb00 4003 	mla	r0, r0, r3, r4
 8026894:	1400      	asrs	r0, r0, #16
 8026896:	f53f af74 	bmi.w	8026782 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802689a:	3901      	subs	r1, #1
 802689c:	4288      	cmp	r0, r1
 802689e:	f6bf af70 	bge.w	8026782 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80268a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80268a4:	fb01 6303 	mla	r3, r1, r3, r6
 80268a8:	141b      	asrs	r3, r3, #16
 80268aa:	f53f af6a 	bmi.w	8026782 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80268ae:	3a01      	subs	r2, #1
 80268b0:	4293      	cmp	r3, r2
 80268b2:	f6bf af66 	bge.w	8026782 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80268b6:	46a9      	mov	r9, r5
 80268b8:	46ba      	mov	sl, r7
 80268ba:	f1b9 0f00 	cmp.w	r9, #0
 80268be:	dc5b      	bgt.n	8026978 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80268c0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80268c4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80268c8:	9b07      	ldr	r3, [sp, #28]
 80268ca:	2b00      	cmp	r3, #0
 80268cc:	f340 80b9 	ble.w	8026a42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80268d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80268d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80268d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80268da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80268de:	eef0 6a62 	vmov.f32	s13, s5
 80268e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80268e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80268ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268ee:	ee16 4a90 	vmov	r4, s13
 80268f2:	eef0 6a43 	vmov.f32	s13, s6
 80268f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268fa:	ee16 6a90 	vmov	r6, s13
 80268fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026902:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026906:	ee77 2a62 	vsub.f32	s5, s14, s5
 802690a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802690e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026912:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026916:	ee12 2a90 	vmov	r2, s5
 802691a:	eef0 2a47 	vmov.f32	s5, s14
 802691e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026922:	ee13 2a10 	vmov	r2, s6
 8026926:	931b      	str	r3, [sp, #108]	; 0x6c
 8026928:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802692a:	eeb0 3a67 	vmov.f32	s6, s15
 802692e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026932:	931c      	str	r3, [sp, #112]	; 0x70
 8026934:	9b07      	ldr	r3, [sp, #28]
 8026936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026938:	3b01      	subs	r3, #1
 802693a:	9307      	str	r3, [sp, #28]
 802693c:	bf08      	it	eq
 802693e:	4615      	moveq	r5, r2
 8026940:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026942:	bf18      	it	ne
 8026944:	461d      	movne	r5, r3
 8026946:	e6f3      	b.n	8026730 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8026948:	f111 0b01 	adds.w	fp, r1, #1
 802694c:	d48d      	bmi.n	802686a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802694e:	45de      	cmp	lr, fp
 8026950:	db8b      	blt.n	802686a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026952:	f110 0b01 	adds.w	fp, r0, #1
 8026956:	d488      	bmi.n	802686a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026958:	455b      	cmp	r3, fp
 802695a:	db86      	blt.n	802686a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802695c:	b21b      	sxth	r3, r3
 802695e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026962:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026966:	9300      	str	r3, [sp, #0]
 8026968:	4642      	mov	r2, r8
 802696a:	fa0f f38e 	sxth.w	r3, lr
 802696e:	4649      	mov	r1, r9
 8026970:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026972:	f7ff fe4c 	bl	802660e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8026976:	e778      	b.n	802686a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026978:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802697a:	1420      	asrs	r0, r4, #16
 802697c:	1431      	asrs	r1, r6, #16
 802697e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026986:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802698a:	fb03 0101 	mla	r1, r3, r1, r0
 802698e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026992:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026996:	8841      	ldrh	r1, [r0, #2]
 8026998:	f1be 0f00 	cmp.w	lr, #0
 802699c:	d00b      	beq.n	80269b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802699e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80269a2:	3b01      	subs	r3, #1
 80269a4:	005b      	lsls	r3, r3, #1
 80269a6:	3302      	adds	r3, #2
 80269a8:	eb00 0b03 	add.w	fp, r0, r3
 80269ac:	5ac3      	ldrh	r3, [r0, r3]
 80269ae:	930a      	str	r3, [sp, #40]	; 0x28
 80269b0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80269b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80269b6:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80269ba:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80269be:	fb12 f30e 	smulbb	r3, r2, lr
 80269c2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80269c6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80269ca:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80269ce:	10db      	asrs	r3, r3, #3
 80269d0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80269d4:	ea40 000c 	orr.w	r0, r0, ip
 80269d8:	f1ce 0c10 	rsb	ip, lr, #16
 80269dc:	ea4b 0101 	orr.w	r1, fp, r1
 80269e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80269e4:	ebac 0c02 	sub.w	ip, ip, r2
 80269e8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80269ec:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80269f0:	4351      	muls	r1, r2
 80269f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80269f4:	fb0c 1c00 	mla	ip, ip, r0, r1
 80269f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80269fa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80269fe:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026a04:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026a08:	0412      	lsls	r2, r2, #16
 8026a0a:	ea4b 0000 	orr.w	r0, fp, r0
 8026a0e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026a12:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026a16:	fb03 c000 	mla	r0, r3, r0, ip
 8026a1a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026a1e:	ea42 0b0b 	orr.w	fp, r2, fp
 8026a22:	fb03 000b 	mla	r0, r3, fp, r0
 8026a26:	0d43      	lsrs	r3, r0, #21
 8026a28:	0940      	lsrs	r0, r0, #5
 8026a2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026a32:	4318      	orrs	r0, r3
 8026a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026a36:	441c      	add	r4, r3
 8026a38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026a3a:	f82a 0b02 	strh.w	r0, [sl], #2
 8026a3e:	441e      	add	r6, r3
 8026a40:	e73b      	b.n	80268ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026a42:	b00f      	add	sp, #60	; 0x3c
 8026a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026a48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8026a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a4c:	b085      	sub	sp, #20
 8026a4e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8026a52:	9102      	str	r1, [sp, #8]
 8026a54:	2c00      	cmp	r4, #0
 8026a56:	fb04 7103 	mla	r1, r4, r3, r7
 8026a5a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026a5e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8026a62:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026a66:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026a6a:	f2c0 811b 	blt.w	8026ca4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026a6e:	45a6      	cmp	lr, r4
 8026a70:	f340 8118 	ble.w	8026ca4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026a74:	2f00      	cmp	r7, #0
 8026a76:	f2c0 8113 	blt.w	8026ca0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026a7a:	42bb      	cmp	r3, r7
 8026a7c:	f340 8110 	ble.w	8026ca0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026a80:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026a84:	1c7a      	adds	r2, r7, #1
 8026a86:	f100 8110 	bmi.w	8026caa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026a8a:	4293      	cmp	r3, r2
 8026a8c:	f340 810d 	ble.w	8026caa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026a90:	2e00      	cmp	r6, #0
 8026a92:	f000 810c 	beq.w	8026cae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8026a96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026a9a:	3401      	adds	r4, #1
 8026a9c:	f100 810b 	bmi.w	8026cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026aa0:	45a6      	cmp	lr, r4
 8026aa2:	f340 8108 	ble.w	8026cb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026aa6:	2800      	cmp	r0, #0
 8026aa8:	f000 8108 	beq.w	8026cbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8026aac:	2f00      	cmp	r7, #0
 8026aae:	f2c0 8100 	blt.w	8026cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026ab2:	42bb      	cmp	r3, r7
 8026ab4:	f340 80fd 	ble.w	8026cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026ab8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026abc:	3701      	adds	r7, #1
 8026abe:	f100 8100 	bmi.w	8026cc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026ac2:	42bb      	cmp	r3, r7
 8026ac4:	f340 80fd 	ble.w	8026cc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026ac8:	2e00      	cmp	r6, #0
 8026aca:	f000 80fc 	beq.w	8026cc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8026ace:	3301      	adds	r3, #1
 8026ad0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026ad4:	b2b6      	uxth	r6, r6
 8026ad6:	b280      	uxth	r0, r0
 8026ad8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026adc:	fb00 fe06 	mul.w	lr, r0, r6
 8026ae0:	0136      	lsls	r6, r6, #4
 8026ae2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026ae6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026aea:	eba6 070e 	sub.w	r7, r6, lr
 8026aee:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8026af2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026af6:	b280      	uxth	r0, r0
 8026af8:	b2bf      	uxth	r7, r7
 8026afa:	1a1b      	subs	r3, r3, r0
 8026afc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026b00:	fb0a f607 	mul.w	r6, sl, r7
 8026b04:	b29b      	uxth	r3, r3
 8026b06:	fb0b 6603 	mla	r6, fp, r3, r6
 8026b0a:	fb00 6609 	mla	r6, r0, r9, r6
 8026b0e:	fb0e 6608 	mla	r6, lr, r8, r6
 8026b12:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026b16:	9600      	str	r6, [sp, #0]
 8026b18:	2e00      	cmp	r6, #0
 8026b1a:	f000 80be 	beq.w	8026c9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8026b1e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026b22:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026b26:	9e02      	ldr	r6, [sp, #8]
 8026b28:	fb0b fc0c 	mul.w	ip, fp, ip
 8026b2c:	fb0b f505 	mul.w	r5, fp, r5
 8026b30:	8836      	ldrh	r6, [r6, #0]
 8026b32:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026b36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026b3a:	9501      	str	r5, [sp, #4]
 8026b3c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026b40:	44dc      	add	ip, fp
 8026b42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b46:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8026b4a:	9503      	str	r5, [sp, #12]
 8026b4c:	9d01      	ldr	r5, [sp, #4]
 8026b4e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026b52:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026b56:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8026b5a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026b5e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026b62:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026b66:	fb0a fa01 	mul.w	sl, sl, r1
 8026b6a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026b6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026b72:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8026b76:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026b7a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026b7e:	4465      	add	r5, ip
 8026b80:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026b84:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026b88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b8c:	fb09 fc0c 	mul.w	ip, r9, ip
 8026b90:	0a2d      	lsrs	r5, r5, #8
 8026b92:	fb09 f904 	mul.w	r9, r9, r4
 8026b96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026b9a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8026b9e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026ba2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8026ba6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026baa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026bae:	437d      	muls	r5, r7
 8026bb0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026bb4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8026bb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026bbc:	4461      	add	r1, ip
 8026bbe:	fb08 f404 	mul.w	r4, r8, r4
 8026bc2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026bc6:	fb08 f802 	mul.w	r8, r8, r2
 8026bca:	0a09      	lsrs	r1, r1, #8
 8026bcc:	0a22      	lsrs	r2, r4, #8
 8026bce:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8026bd2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026bd6:	fb07 f70a 	mul.w	r7, r7, sl
 8026bda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026bde:	4414      	add	r4, r2
 8026be0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8026be4:	0a24      	lsrs	r4, r4, #8
 8026be6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026bea:	9a03      	ldr	r2, [sp, #12]
 8026bec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026bf0:	fb02 5503 	mla	r5, r2, r3, r5
 8026bf4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026bf8:	9a00      	ldr	r2, [sp, #0]
 8026bfa:	fb04 540e 	mla	r4, r4, lr, r5
 8026bfe:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026c02:	1235      	asrs	r5, r6, #8
 8026c04:	fb01 4100 	mla	r1, r1, r0, r4
 8026c08:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026c0c:	0a09      	lsrs	r1, r1, #8
 8026c0e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8026c12:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8026c16:	fb03 7101 	mla	r1, r3, r1, r7
 8026c1a:	fb0e 1e08 	mla	lr, lr, r8, r1
 8026c1e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8026c22:	fb00 e101 	mla	r1, r0, r1, lr
 8026c26:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8026c2a:	b287      	uxth	r7, r0
 8026c2c:	0a09      	lsrs	r1, r1, #8
 8026c2e:	437a      	muls	r2, r7
 8026c30:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026c34:	1c53      	adds	r3, r2, #1
 8026c36:	4321      	orrs	r1, r4
 8026c38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026c3c:	0c0a      	lsrs	r2, r1, #16
 8026c3e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8026c42:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026c46:	b2c8      	uxtb	r0, r1
 8026c48:	fb12 f207 	smulbb	r2, r2, r7
 8026c4c:	fb14 f407 	smulbb	r4, r4, r7
 8026c50:	b2db      	uxtb	r3, r3
 8026c52:	fb10 f007 	smulbb	r0, r0, r7
 8026c56:	fb05 2503 	mla	r5, r5, r3, r2
 8026c5a:	10f2      	asrs	r2, r6, #3
 8026c5c:	00f6      	lsls	r6, r6, #3
 8026c5e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026c62:	b2ad      	uxth	r5, r5
 8026c64:	b2f6      	uxtb	r6, r6
 8026c66:	fb02 4203 	mla	r2, r2, r3, r4
 8026c6a:	fb06 0303 	mla	r3, r6, r3, r0
 8026c6e:	b294      	uxth	r4, r2
 8026c70:	b299      	uxth	r1, r3
 8026c72:	1c6b      	adds	r3, r5, #1
 8026c74:	1c62      	adds	r2, r4, #1
 8026c76:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026c7a:	1c4b      	adds	r3, r1, #1
 8026c7c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026c80:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026c84:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026c88:	0952      	lsrs	r2, r2, #5
 8026c8a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c8e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c92:	432b      	orrs	r3, r5
 8026c94:	4313      	orrs	r3, r2
 8026c96:	9a02      	ldr	r2, [sp, #8]
 8026c98:	8013      	strh	r3, [r2, #0]
 8026c9a:	b005      	add	sp, #20
 8026c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ca0:	2500      	movs	r5, #0
 8026ca2:	e6ef      	b.n	8026a84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8026ca4:	2100      	movs	r1, #0
 8026ca6:	460d      	mov	r5, r1
 8026ca8:	e6f7      	b.n	8026a9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026caa:	2100      	movs	r1, #0
 8026cac:	e6f5      	b.n	8026a9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026cae:	4631      	mov	r1, r6
 8026cb0:	e6f3      	b.n	8026a9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026cb2:	2400      	movs	r4, #0
 8026cb4:	e702      	b.n	8026abc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026cb6:	2200      	movs	r2, #0
 8026cb8:	4614      	mov	r4, r2
 8026cba:	e70b      	b.n	8026ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026cbc:	4602      	mov	r2, r0
 8026cbe:	4604      	mov	r4, r0
 8026cc0:	e708      	b.n	8026ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026cc2:	2200      	movs	r2, #0
 8026cc4:	e706      	b.n	8026ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026cc6:	4632      	mov	r2, r6
 8026cc8:	e704      	b.n	8026ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08026cca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026cca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cce:	b09d      	sub	sp, #116	; 0x74
 8026cd0:	9219      	str	r2, [sp, #100]	; 0x64
 8026cd2:	9307      	str	r3, [sp, #28]
 8026cd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026cd6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8026cda:	901b      	str	r0, [sp, #108]	; 0x6c
 8026cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8026cde:	6850      	ldr	r0, [r2, #4]
 8026ce0:	9117      	str	r1, [sp, #92]	; 0x5c
 8026ce2:	6812      	ldr	r2, [r2, #0]
 8026ce4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8026ce8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8026cec:	fb00 1303 	mla	r3, r0, r3, r1
 8026cf0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8026cf6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026cf8:	681b      	ldr	r3, [r3, #0]
 8026cfa:	9310      	str	r3, [sp, #64]	; 0x40
 8026cfc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8026d00:	930b      	str	r3, [sp, #44]	; 0x2c
 8026d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026d04:	2b00      	cmp	r3, #0
 8026d06:	dc03      	bgt.n	8026d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8026d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026d0a:	2b00      	cmp	r3, #0
 8026d0c:	f340 8375 	ble.w	80273fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026d10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026d12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d16:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d1a:	1e48      	subs	r0, r1, #1
 8026d1c:	1e57      	subs	r7, r2, #1
 8026d1e:	9b07      	ldr	r3, [sp, #28]
 8026d20:	2b00      	cmp	r3, #0
 8026d22:	f340 818e 	ble.w	8027042 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8026d26:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026d2a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026d2e:	d406      	bmi.n	8026d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026d30:	4584      	cmp	ip, r0
 8026d32:	da04      	bge.n	8026d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026d34:	2b00      	cmp	r3, #0
 8026d36:	db02      	blt.n	8026d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026d38:	42bb      	cmp	r3, r7
 8026d3a:	f2c0 8183 	blt.w	8027044 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8026d3e:	f11c 0c01 	adds.w	ip, ip, #1
 8026d42:	f100 8173 	bmi.w	802702c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026d46:	4561      	cmp	r1, ip
 8026d48:	f2c0 8170 	blt.w	802702c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026d4c:	3301      	adds	r3, #1
 8026d4e:	f100 816d 	bmi.w	802702c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026d52:	429a      	cmp	r2, r3
 8026d54:	f2c0 816a 	blt.w	802702c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026d58:	9b07      	ldr	r3, [sp, #28]
 8026d5a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026d5c:	9318      	str	r3, [sp, #96]	; 0x60
 8026d5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026d60:	2b00      	cmp	r3, #0
 8026d62:	f340 818c 	ble.w	802707e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8026d66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026d68:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026d6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026d6e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026d72:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026d76:	1422      	asrs	r2, r4, #16
 8026d78:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026d7c:	689b      	ldr	r3, [r3, #8]
 8026d7e:	f100 81cd 	bmi.w	802711c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026d82:	f103 38ff 	add.w	r8, r3, #4294967295
 8026d86:	4542      	cmp	r2, r8
 8026d88:	f280 81c8 	bge.w	802711c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026d8c:	f1bc 0f00 	cmp.w	ip, #0
 8026d90:	f2c0 81c4 	blt.w	802711c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026d94:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026d98:	45c4      	cmp	ip, r8
 8026d9a:	f280 81bf 	bge.w	802711c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026d9e:	b21b      	sxth	r3, r3
 8026da0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026da2:	fb0c 2203 	mla	r2, ip, r3, r2
 8026da6:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026daa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026dae:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026db2:	2800      	cmp	r0, #0
 8026db4:	f000 81a9 	beq.w	802710a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8026db8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026dbc:	950c      	str	r5, [sp, #48]	; 0x30
 8026dbe:	0e2d      	lsrs	r5, r5, #24
 8026dc0:	9513      	str	r5, [sp, #76]	; 0x4c
 8026dc2:	b181      	cbz	r1, 8026de6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026dc8:	3b01      	subs	r3, #1
 8026dca:	009b      	lsls	r3, r3, #2
 8026dcc:	3304      	adds	r3, #4
 8026dce:	eb08 0c03 	add.w	ip, r8, r3
 8026dd2:	f858 3003 	ldr.w	r3, [r8, r3]
 8026dd6:	9308      	str	r3, [sp, #32]
 8026dd8:	0e1b      	lsrs	r3, r3, #24
 8026dda:	9311      	str	r3, [sp, #68]	; 0x44
 8026ddc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026de0:	930d      	str	r3, [sp, #52]	; 0x34
 8026de2:	0e1b      	lsrs	r3, r3, #24
 8026de4:	9314      	str	r3, [sp, #80]	; 0x50
 8026de6:	b280      	uxth	r0, r0
 8026de8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026dea:	b289      	uxth	r1, r1
 8026dec:	fb00 f901 	mul.w	r9, r0, r1
 8026df0:	0100      	lsls	r0, r0, #4
 8026df2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026df6:	eba0 0809 	sub.w	r8, r0, r9
 8026dfa:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026dfe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026e00:	b289      	uxth	r1, r1
 8026e02:	fa1f f888 	uxth.w	r8, r8
 8026e06:	1a5b      	subs	r3, r3, r1
 8026e08:	fb08 f000 	mul.w	r0, r8, r0
 8026e0c:	b29b      	uxth	r3, r3
 8026e0e:	fb03 000e 	mla	r0, r3, lr, r0
 8026e12:	fb01 0005 	mla	r0, r1, r5, r0
 8026e16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026e18:	fb09 0005 	mla	r0, r9, r5, r0
 8026e1c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026e20:	2800      	cmp	r0, #0
 8026e22:	f000 80fa 	beq.w	802701a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026e26:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026e2a:	d01b      	beq.n	8026e64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026e2c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026e30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026e34:	fb0e fa0a 	mul.w	sl, lr, sl
 8026e38:	fb0e fe02 	mul.w	lr, lr, r2
 8026e3c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026e40:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026e44:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026e48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026e4c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026e50:	4452      	add	r2, sl
 8026e52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e56:	0a12      	lsrs	r2, r2, #8
 8026e58:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026e5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026e60:	ea42 020c 	orr.w	r2, r2, ip
 8026e64:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026e66:	2dff      	cmp	r5, #255	; 0xff
 8026e68:	d021      	beq.n	8026eae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8026e6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026e6c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026e70:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026e72:	fb05 fb0b 	mul.w	fp, r5, fp
 8026e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026e78:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026e7c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026e7e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026e82:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e86:	fb05 fa0a 	mul.w	sl, r5, sl
 8026e8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e8e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026e92:	44de      	add	lr, fp
 8026e94:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026e98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ea0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ea4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026ea8:	ea4e 050a 	orr.w	r5, lr, sl
 8026eac:	950c      	str	r5, [sp, #48]	; 0x30
 8026eae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026eb0:	2dff      	cmp	r5, #255	; 0xff
 8026eb2:	d021      	beq.n	8026ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026eb4:	9d08      	ldr	r5, [sp, #32]
 8026eb6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026eba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026ebc:	fb05 fb0b 	mul.w	fp, r5, fp
 8026ec0:	9d08      	ldr	r5, [sp, #32]
 8026ec2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026ec6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026ec8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ecc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026ed0:	fb05 fa0a 	mul.w	sl, r5, sl
 8026ed4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ed8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026edc:	44de      	add	lr, fp
 8026ede:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026ee2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ee6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026eea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026eee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026ef2:	ea4e 050a 	orr.w	r5, lr, sl
 8026ef6:	9508      	str	r5, [sp, #32]
 8026ef8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026efa:	2dff      	cmp	r5, #255	; 0xff
 8026efc:	d021      	beq.n	8026f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8026efe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026f00:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026f04:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026f06:	fb05 fb0b 	mul.w	fp, r5, fp
 8026f0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026f0c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026f10:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026f12:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026f16:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026f1a:	fb05 fa0a 	mul.w	sl, r5, sl
 8026f1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f22:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026f26:	44de      	add	lr, fp
 8026f28:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026f3c:	ea4e 050a 	orr.w	r5, lr, sl
 8026f40:	950d      	str	r5, [sp, #52]	; 0x34
 8026f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f44:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026f48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026f4c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026f50:	9d08      	ldr	r5, [sp, #32]
 8026f52:	fb08 fc0c 	mul.w	ip, r8, ip
 8026f56:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026f5a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026f5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026f60:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026f64:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f6a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026f6e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026f72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026f74:	fb08 f80e 	mul.w	r8, r8, lr
 8026f78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f7c:	fb03 8202 	mla	r2, r3, r2, r8
 8026f80:	9b08      	ldr	r3, [sp, #32]
 8026f82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026f86:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8026f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026f8c:	fb01 220a 	mla	r2, r1, sl, r2
 8026f90:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8026f94:	883b      	ldrh	r3, [r7, #0]
 8026f96:	fb09 2901 	mla	r9, r9, r1, r2
 8026f9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026f9c:	1219      	asrs	r1, r3, #8
 8026f9e:	4342      	muls	r2, r0
 8026fa0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026fa4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026fa8:	1c50      	adds	r0, r2, #1
 8026faa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026fae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026fb2:	ea4c 0c09 	orr.w	ip, ip, r9
 8026fb6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026fba:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8026fbe:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026fc2:	fa5f fc8c 	uxtb.w	ip, ip
 8026fc6:	fb12 f205 	smulbb	r2, r2, r5
 8026fca:	b2c0      	uxtb	r0, r0
 8026fcc:	fb1c fc05 	smulbb	ip, ip, r5
 8026fd0:	fb01 2100 	mla	r1, r1, r0, r2
 8026fd4:	10da      	asrs	r2, r3, #3
 8026fd6:	fb1e fe05 	smulbb	lr, lr, r5
 8026fda:	00db      	lsls	r3, r3, #3
 8026fdc:	b289      	uxth	r1, r1
 8026fde:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026fe2:	b2db      	uxtb	r3, r3
 8026fe4:	fb02 e200 	mla	r2, r2, r0, lr
 8026fe8:	fb03 c300 	mla	r3, r3, r0, ip
 8026fec:	b292      	uxth	r2, r2
 8026fee:	fa1f fc83 	uxth.w	ip, r3
 8026ff2:	1c4b      	adds	r3, r1, #1
 8026ff4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026ff8:	f10c 0301 	add.w	r3, ip, #1
 8026ffc:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027000:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8027004:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027008:	430b      	orrs	r3, r1
 802700a:	1c51      	adds	r1, r2, #1
 802700c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027010:	0952      	lsrs	r2, r2, #5
 8027012:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027016:	4313      	orrs	r3, r2
 8027018:	803b      	strh	r3, [r7, #0]
 802701a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802701c:	3702      	adds	r7, #2
 802701e:	441c      	add	r4, r3
 8027020:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027022:	441e      	add	r6, r3
 8027024:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027026:	3b01      	subs	r3, #1
 8027028:	9318      	str	r3, [sp, #96]	; 0x60
 802702a:	e698      	b.n	8026d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802702c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802702e:	441c      	add	r4, r3
 8027030:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027032:	441e      	add	r6, r3
 8027034:	9b07      	ldr	r3, [sp, #28]
 8027036:	3b01      	subs	r3, #1
 8027038:	9307      	str	r3, [sp, #28]
 802703a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802703c:	3302      	adds	r3, #2
 802703e:	930a      	str	r3, [sp, #40]	; 0x28
 8027040:	e66d      	b.n	8026d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8027042:	d023      	beq.n	802708c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027044:	9b07      	ldr	r3, [sp, #28]
 8027046:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8027048:	3b01      	subs	r3, #1
 802704a:	fb00 4003 	mla	r0, r0, r3, r4
 802704e:	1400      	asrs	r0, r0, #16
 8027050:	f53f ae82 	bmi.w	8026d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027054:	3901      	subs	r1, #1
 8027056:	4288      	cmp	r0, r1
 8027058:	f6bf ae7e 	bge.w	8026d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802705c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802705e:	fb01 6303 	mla	r3, r1, r3, r6
 8027062:	141b      	asrs	r3, r3, #16
 8027064:	f53f ae78 	bmi.w	8026d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027068:	3a01      	subs	r2, #1
 802706a:	4293      	cmp	r3, r2
 802706c:	f6bf ae74 	bge.w	8026d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027070:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027074:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8027078:	f1bb 0f00 	cmp.w	fp, #0
 802707c:	dc6c      	bgt.n	8027158 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802707e:	9b07      	ldr	r3, [sp, #28]
 8027080:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027086:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802708a:	930a      	str	r3, [sp, #40]	; 0x28
 802708c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802708e:	2b00      	cmp	r3, #0
 8027090:	f340 81b3 	ble.w	80273fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027098:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802709a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802709e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80270a2:	eef0 6a62 	vmov.f32	s13, s5
 80270a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80270aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80270ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270b2:	ee16 4a90 	vmov	r4, s13
 80270b6:	eef0 6a43 	vmov.f32	s13, s6
 80270ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270be:	ee16 6a90 	vmov	r6, s13
 80270c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80270c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80270ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80270ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80270d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80270d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80270da:	ee12 2a90 	vmov	r2, s5
 80270de:	eef0 2a47 	vmov.f32	s5, s14
 80270e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80270e6:	ee13 2a10 	vmov	r2, s6
 80270ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80270ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80270ee:	eeb0 3a67 	vmov.f32	s6, s15
 80270f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80270f6:	932a      	str	r3, [sp, #168]	; 0xa8
 80270f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80270fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80270fc:	3b01      	subs	r3, #1
 80270fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8027100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027102:	bf08      	it	eq
 8027104:	4613      	moveq	r3, r2
 8027106:	9307      	str	r3, [sp, #28]
 8027108:	e5fb      	b.n	8026d02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802710a:	2900      	cmp	r1, #0
 802710c:	f43f ae6b 	beq.w	8026de6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027110:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027114:	9308      	str	r3, [sp, #32]
 8027116:	0e1b      	lsrs	r3, r3, #24
 8027118:	9311      	str	r3, [sp, #68]	; 0x44
 802711a:	e664      	b.n	8026de6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802711c:	f112 0801 	adds.w	r8, r2, #1
 8027120:	f53f af7b 	bmi.w	802701a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027124:	4543      	cmp	r3, r8
 8027126:	f6ff af78 	blt.w	802701a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802712a:	f11c 0801 	adds.w	r8, ip, #1
 802712e:	f53f af74 	bmi.w	802701a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027132:	45c6      	cmp	lr, r8
 8027134:	f6ff af71 	blt.w	802701a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027138:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802713a:	b21b      	sxth	r3, r3
 802713c:	9201      	str	r2, [sp, #4]
 802713e:	fa0f f28e 	sxth.w	r2, lr
 8027142:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027146:	e9cd c002 	strd	ip, r0, [sp, #8]
 802714a:	9200      	str	r2, [sp, #0]
 802714c:	4639      	mov	r1, r7
 802714e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027150:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027152:	f7ff fc79 	bl	8026a48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027156:	e760      	b.n	802701a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027158:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802715a:	1427      	asrs	r7, r4, #16
 802715c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802715e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027162:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027166:	1433      	asrs	r3, r6, #16
 8027168:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802716c:	fb01 7303 	mla	r3, r1, r3, r7
 8027170:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027174:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027178:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802717c:	2a00      	cmp	r2, #0
 802717e:	f000 8133 	beq.w	80273e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027182:	687d      	ldr	r5, [r7, #4]
 8027184:	950e      	str	r5, [sp, #56]	; 0x38
 8027186:	0e2d      	lsrs	r5, r5, #24
 8027188:	9515      	str	r5, [sp, #84]	; 0x54
 802718a:	b178      	cbz	r0, 80271ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802718c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027190:	3901      	subs	r1, #1
 8027192:	0089      	lsls	r1, r1, #2
 8027194:	3104      	adds	r1, #4
 8027196:	eb07 0e01 	add.w	lr, r7, r1
 802719a:	5879      	ldr	r1, [r7, r1]
 802719c:	9109      	str	r1, [sp, #36]	; 0x24
 802719e:	0e09      	lsrs	r1, r1, #24
 80271a0:	9112      	str	r1, [sp, #72]	; 0x48
 80271a2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80271a6:	910f      	str	r1, [sp, #60]	; 0x3c
 80271a8:	0e09      	lsrs	r1, r1, #24
 80271aa:	9116      	str	r1, [sp, #88]	; 0x58
 80271ac:	b292      	uxth	r2, r2
 80271ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80271b0:	b280      	uxth	r0, r0
 80271b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80271b4:	fb02 f800 	mul.w	r8, r2, r0
 80271b8:	0112      	lsls	r2, r2, #4
 80271ba:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80271be:	eba2 0e08 	sub.w	lr, r2, r8
 80271c2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80271c6:	b280      	uxth	r0, r0
 80271c8:	fa1f fe8e 	uxth.w	lr, lr
 80271cc:	1a12      	subs	r2, r2, r0
 80271ce:	fb0e f101 	mul.w	r1, lr, r1
 80271d2:	b292      	uxth	r2, r2
 80271d4:	fb02 110c 	mla	r1, r2, ip, r1
 80271d8:	fb00 1105 	mla	r1, r0, r5, r1
 80271dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80271de:	fb08 1105 	mla	r1, r8, r5, r1
 80271e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80271e6:	2900      	cmp	r1, #0
 80271e8:	f000 80f5 	beq.w	80273d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80271ec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80271f0:	d019      	beq.n	8027226 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80271f2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80271f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80271fa:	fb0c fa0a 	mul.w	sl, ip, sl
 80271fe:	fb0c fc03 	mul.w	ip, ip, r3
 8027202:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027206:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802720a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802720e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027212:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027216:	4453      	add	r3, sl
 8027218:	0a3f      	lsrs	r7, r7, #8
 802721a:	0a1b      	lsrs	r3, r3, #8
 802721c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027220:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027224:	433b      	orrs	r3, r7
 8027226:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027228:	2dff      	cmp	r5, #255	; 0xff
 802722a:	d020      	beq.n	802726e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802722c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802722e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027232:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027234:	436f      	muls	r7, r5
 8027236:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027238:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802723c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027240:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027242:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027246:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802724a:	fb05 fa0a 	mul.w	sl, r5, sl
 802724e:	44bc      	add	ip, r7
 8027250:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027254:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027258:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802725c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027260:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027264:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027268:	ea4c 050a 	orr.w	r5, ip, sl
 802726c:	950e      	str	r5, [sp, #56]	; 0x38
 802726e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027270:	2dff      	cmp	r5, #255	; 0xff
 8027272:	d020      	beq.n	80272b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027276:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802727a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802727c:	436f      	muls	r7, r5
 802727e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027280:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027284:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027288:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802728a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802728e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027292:	fb05 fa0a 	mul.w	sl, r5, sl
 8027296:	44bc      	add	ip, r7
 8027298:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802729c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80272a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80272a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80272b0:	ea4c 050a 	orr.w	r5, ip, sl
 80272b4:	9509      	str	r5, [sp, #36]	; 0x24
 80272b6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80272b8:	2dff      	cmp	r5, #255	; 0xff
 80272ba:	d020      	beq.n	80272fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80272bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80272be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80272c2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80272c4:	436f      	muls	r7, r5
 80272c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80272c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80272cc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80272d0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80272d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80272d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80272da:	fb05 fa0a 	mul.w	sl, r5, sl
 80272de:	44bc      	add	ip, r7
 80272e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80272e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80272ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80272f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80272f8:	ea4c 050a 	orr.w	r5, ip, sl
 80272fc:	950f      	str	r5, [sp, #60]	; 0x3c
 80272fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027300:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027304:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027308:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802730c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802730e:	fb0e f707 	mul.w	r7, lr, r7
 8027312:	fb02 770c 	mla	r7, r2, ip, r7
 8027316:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802731a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802731c:	fb00 770c 	mla	r7, r0, ip, r7
 8027320:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027324:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027326:	fb08 770c 	mla	r7, r8, ip, r7
 802732a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802732e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027330:	fb0e fe0c 	mul.w	lr, lr, ip
 8027334:	0a3f      	lsrs	r7, r7, #8
 8027336:	fb02 e303 	mla	r3, r2, r3, lr
 802733a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802733c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027340:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027346:	fb00 330a 	mla	r3, r0, sl, r3
 802734a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802734e:	f8b9 0000 	ldrh.w	r0, [r9]
 8027352:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027358:	1202      	asrs	r2, r0, #8
 802735a:	4359      	muls	r1, r3
 802735c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027360:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027364:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027368:	1c4b      	adds	r3, r1, #1
 802736a:	ea47 070c 	orr.w	r7, r7, ip
 802736e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027372:	0c3b      	lsrs	r3, r7, #16
 8027374:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027378:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802737c:	b2ff      	uxtb	r7, r7
 802737e:	fb13 f305 	smulbb	r3, r3, r5
 8027382:	b2c9      	uxtb	r1, r1
 8027384:	fb17 f705 	smulbb	r7, r7, r5
 8027388:	fb02 3201 	mla	r2, r2, r1, r3
 802738c:	10c3      	asrs	r3, r0, #3
 802738e:	fb1c fc05 	smulbb	ip, ip, r5
 8027392:	00c0      	lsls	r0, r0, #3
 8027394:	b292      	uxth	r2, r2
 8027396:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802739a:	b2c0      	uxtb	r0, r0
 802739c:	fb03 c301 	mla	r3, r3, r1, ip
 80273a0:	fb00 7001 	mla	r0, r0, r1, r7
 80273a4:	1c51      	adds	r1, r2, #1
 80273a6:	b29b      	uxth	r3, r3
 80273a8:	b280      	uxth	r0, r0
 80273aa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80273ae:	f100 0c01 	add.w	ip, r0, #1
 80273b2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80273b6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80273ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80273be:	ea4c 0202 	orr.w	r2, ip, r2
 80273c2:	f103 0c01 	add.w	ip, r3, #1
 80273c6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80273ca:	095b      	lsrs	r3, r3, #5
 80273cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80273d0:	431a      	orrs	r2, r3
 80273d2:	f8a9 2000 	strh.w	r2, [r9]
 80273d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80273d8:	f109 0902 	add.w	r9, r9, #2
 80273dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80273e0:	441c      	add	r4, r3
 80273e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80273e4:	441e      	add	r6, r3
 80273e6:	e647      	b.n	8027078 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80273e8:	2800      	cmp	r0, #0
 80273ea:	f43f aedf 	beq.w	80271ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80273ee:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80273f2:	9109      	str	r1, [sp, #36]	; 0x24
 80273f4:	0e09      	lsrs	r1, r1, #24
 80273f6:	9112      	str	r1, [sp, #72]	; 0x48
 80273f8:	e6d8      	b.n	80271ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80273fa:	b01d      	add	sp, #116	; 0x74
 80273fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027400 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027404:	b085      	sub	sp, #20
 8027406:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802740a:	9102      	str	r1, [sp, #8]
 802740c:	2c00      	cmp	r4, #0
 802740e:	fb04 7103 	mla	r1, r4, r3, r7
 8027412:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027416:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802741a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802741e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027422:	f2c0 810c 	blt.w	802763e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027426:	45a6      	cmp	lr, r4
 8027428:	f340 8109 	ble.w	802763e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802742c:	2f00      	cmp	r7, #0
 802742e:	f2c0 8104 	blt.w	802763a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027432:	42bb      	cmp	r3, r7
 8027434:	f340 8101 	ble.w	802763a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027438:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802743c:	1c7a      	adds	r2, r7, #1
 802743e:	f100 8101 	bmi.w	8027644 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027442:	4293      	cmp	r3, r2
 8027444:	f340 80fe 	ble.w	8027644 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027448:	2e00      	cmp	r6, #0
 802744a:	f000 80fd 	beq.w	8027648 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802744e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027452:	3401      	adds	r4, #1
 8027454:	f100 80fc 	bmi.w	8027650 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027458:	45a6      	cmp	lr, r4
 802745a:	f340 80f9 	ble.w	8027650 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802745e:	2800      	cmp	r0, #0
 8027460:	f000 80f9 	beq.w	8027656 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8027464:	2f00      	cmp	r7, #0
 8027466:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802746a:	f2c0 80ef 	blt.w	802764c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802746e:	42bb      	cmp	r3, r7
 8027470:	f340 80ec 	ble.w	802764c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027474:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027478:	3701      	adds	r7, #1
 802747a:	f100 80ef 	bmi.w	802765c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802747e:	42bb      	cmp	r3, r7
 8027480:	f340 80ec 	ble.w	802765c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027484:	2e00      	cmp	r6, #0
 8027486:	f000 80eb 	beq.w	8027660 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802748a:	6852      	ldr	r2, [r2, #4]
 802748c:	b2b6      	uxth	r6, r6
 802748e:	b280      	uxth	r0, r0
 8027490:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027494:	fb00 fe06 	mul.w	lr, r0, r6
 8027498:	0136      	lsls	r6, r6, #4
 802749a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802749e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80274a2:	eba6 070e 	sub.w	r7, r6, lr
 80274a6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80274aa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80274ae:	b280      	uxth	r0, r0
 80274b0:	b2bf      	uxth	r7, r7
 80274b2:	1a1b      	subs	r3, r3, r0
 80274b4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80274b8:	fb07 f60a 	mul.w	r6, r7, sl
 80274bc:	b29b      	uxth	r3, r3
 80274be:	fb0b 6603 	mla	r6, fp, r3, r6
 80274c2:	fb00 6609 	mla	r6, r0, r9, r6
 80274c6:	fb0e 6608 	mla	r6, lr, r8, r6
 80274ca:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80274ce:	9600      	str	r6, [sp, #0]
 80274d0:	2e00      	cmp	r6, #0
 80274d2:	f000 80af 	beq.w	8027634 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80274d6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80274da:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80274de:	9e02      	ldr	r6, [sp, #8]
 80274e0:	fb0b fc0c 	mul.w	ip, fp, ip
 80274e4:	fb0b f505 	mul.w	r5, fp, r5
 80274e8:	8836      	ldrh	r6, [r6, #0]
 80274ea:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80274ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80274f2:	9501      	str	r5, [sp, #4]
 80274f4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80274f8:	44dc      	add	ip, fp
 80274fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274fe:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8027502:	9503      	str	r5, [sp, #12]
 8027504:	9d01      	ldr	r5, [sp, #4]
 8027506:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802750a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802750e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027512:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027516:	fb0a fc0c 	mul.w	ip, sl, ip
 802751a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802751e:	fb0a fa01 	mul.w	sl, sl, r1
 8027522:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027526:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802752a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802752e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027532:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027536:	4465      	add	r5, ip
 8027538:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802753c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027540:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027544:	fb09 fc0c 	mul.w	ip, r9, ip
 8027548:	0a2d      	lsrs	r5, r5, #8
 802754a:	fb09 f904 	mul.w	r9, r9, r4
 802754e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027552:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8027556:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802755a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802755e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027562:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027566:	437d      	muls	r5, r7
 8027568:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802756c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027570:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027574:	4461      	add	r1, ip
 8027576:	fb08 f404 	mul.w	r4, r8, r4
 802757a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802757e:	fb08 f802 	mul.w	r8, r8, r2
 8027582:	0a09      	lsrs	r1, r1, #8
 8027584:	0a22      	lsrs	r2, r4, #8
 8027586:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802758a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802758e:	fb07 f70a 	mul.w	r7, r7, sl
 8027592:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027596:	4414      	add	r4, r2
 8027598:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802759c:	0a24      	lsrs	r4, r4, #8
 802759e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80275a2:	9a03      	ldr	r2, [sp, #12]
 80275a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80275a8:	fb02 5503 	mla	r5, r2, r3, r5
 80275ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80275b0:	fb04 540e 	mla	r4, r4, lr, r5
 80275b4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80275b8:	fb01 4100 	mla	r1, r1, r0, r4
 80275bc:	0a09      	lsrs	r1, r1, #8
 80275be:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80275c2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80275c6:	fb03 7101 	mla	r1, r3, r1, r7
 80275ca:	9b00      	ldr	r3, [sp, #0]
 80275cc:	fb0e 1e08 	mla	lr, lr, r8, r1
 80275d0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80275d4:	43da      	mvns	r2, r3
 80275d6:	1233      	asrs	r3, r6, #8
 80275d8:	fb00 e101 	mla	r1, r0, r1, lr
 80275dc:	10f0      	asrs	r0, r6, #3
 80275de:	b2d2      	uxtb	r2, r2
 80275e0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80275e4:	0a09      	lsrs	r1, r1, #8
 80275e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80275ea:	00f6      	lsls	r6, r6, #3
 80275ec:	4353      	muls	r3, r2
 80275ee:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80275f2:	4350      	muls	r0, r2
 80275f4:	b2f6      	uxtb	r6, r6
 80275f6:	4321      	orrs	r1, r4
 80275f8:	4356      	muls	r6, r2
 80275fa:	1c5a      	adds	r2, r3, #1
 80275fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027600:	0c0b      	lsrs	r3, r1, #16
 8027602:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027606:	1c42      	adds	r2, r0, #1
 8027608:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802760c:	0a0a      	lsrs	r2, r1, #8
 802760e:	021b      	lsls	r3, r3, #8
 8027610:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027614:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8027618:	00d2      	lsls	r2, r2, #3
 802761a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802761e:	4313      	orrs	r3, r2
 8027620:	1c72      	adds	r2, r6, #1
 8027622:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8027626:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802762a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802762e:	4319      	orrs	r1, r3
 8027630:	9b02      	ldr	r3, [sp, #8]
 8027632:	8019      	strh	r1, [r3, #0]
 8027634:	b005      	add	sp, #20
 8027636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802763a:	2500      	movs	r5, #0
 802763c:	e6fe      	b.n	802743c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802763e:	2100      	movs	r1, #0
 8027640:	460d      	mov	r5, r1
 8027642:	e706      	b.n	8027452 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027644:	2100      	movs	r1, #0
 8027646:	e704      	b.n	8027452 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027648:	4631      	mov	r1, r6
 802764a:	e702      	b.n	8027452 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802764c:	2400      	movs	r4, #0
 802764e:	e713      	b.n	8027478 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8027650:	2200      	movs	r2, #0
 8027652:	4614      	mov	r4, r2
 8027654:	e71a      	b.n	802748c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027656:	4602      	mov	r2, r0
 8027658:	4604      	mov	r4, r0
 802765a:	e717      	b.n	802748c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802765c:	2200      	movs	r2, #0
 802765e:	e715      	b.n	802748c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027660:	4632      	mov	r2, r6
 8027662:	e713      	b.n	802748c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08027664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027668:	b09b      	sub	sp, #108	; 0x6c
 802766a:	9218      	str	r2, [sp, #96]	; 0x60
 802766c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802766e:	9019      	str	r0, [sp, #100]	; 0x64
 8027670:	9116      	str	r1, [sp, #88]	; 0x58
 8027672:	6850      	ldr	r0, [r2, #4]
 8027674:	9307      	str	r3, [sp, #28]
 8027676:	6812      	ldr	r2, [r2, #0]
 8027678:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802767c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027680:	fb00 1303 	mla	r3, r0, r3, r1
 8027684:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027688:	930a      	str	r3, [sp, #40]	; 0x28
 802768a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802768c:	681b      	ldr	r3, [r3, #0]
 802768e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027690:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027692:	2b00      	cmp	r3, #0
 8027694:	dc03      	bgt.n	802769e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027696:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027698:	2b00      	cmp	r3, #0
 802769a:	f340 8387 	ble.w	8027dac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802769e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80276a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80276a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80276a8:	1e48      	subs	r0, r1, #1
 80276aa:	1e57      	subs	r7, r2, #1
 80276ac:	9b07      	ldr	r3, [sp, #28]
 80276ae:	2b00      	cmp	r3, #0
 80276b0:	f340 8166 	ble.w	8027980 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80276b4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80276b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80276bc:	d406      	bmi.n	80276cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80276be:	4584      	cmp	ip, r0
 80276c0:	da04      	bge.n	80276cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80276c2:	2b00      	cmp	r3, #0
 80276c4:	db02      	blt.n	80276cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80276c6:	42bb      	cmp	r3, r7
 80276c8:	f2c0 815b 	blt.w	8027982 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80276cc:	f11c 0c01 	adds.w	ip, ip, #1
 80276d0:	f100 814b 	bmi.w	802796a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80276d4:	4561      	cmp	r1, ip
 80276d6:	f2c0 8148 	blt.w	802796a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80276da:	3301      	adds	r3, #1
 80276dc:	f100 8145 	bmi.w	802796a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80276e0:	429a      	cmp	r2, r3
 80276e2:	f2c0 8142 	blt.w	802796a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80276e6:	9b07      	ldr	r3, [sp, #28]
 80276e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80276ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80276ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80276ee:	2b00      	cmp	r3, #0
 80276f0:	f340 8165 	ble.w	80279be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80276f4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80276f6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80276fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80276fc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027700:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027704:	1422      	asrs	r2, r4, #16
 8027706:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802770a:	689b      	ldr	r3, [r3, #8]
 802770c:	f100 81d5 	bmi.w	8027aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027710:	f103 38ff 	add.w	r8, r3, #4294967295
 8027714:	4542      	cmp	r2, r8
 8027716:	f280 81d0 	bge.w	8027aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802771a:	f1bc 0f00 	cmp.w	ip, #0
 802771e:	f2c0 81cc 	blt.w	8027aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027722:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027726:	45c4      	cmp	ip, r8
 8027728:	f280 81c7 	bge.w	8027aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802772c:	b21b      	sxth	r3, r3
 802772e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027730:	fb0c 2203 	mla	r2, ip, r3, r2
 8027734:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027738:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802773c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027740:	2900      	cmp	r1, #0
 8027742:	f000 8182 	beq.w	8027a4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8027746:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802774a:	950b      	str	r5, [sp, #44]	; 0x2c
 802774c:	0e2d      	lsrs	r5, r5, #24
 802774e:	9512      	str	r5, [sp, #72]	; 0x48
 8027750:	b180      	cbz	r0, 8027774 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027752:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027756:	3b01      	subs	r3, #1
 8027758:	009b      	lsls	r3, r3, #2
 802775a:	3304      	adds	r3, #4
 802775c:	eb08 0c03 	add.w	ip, r8, r3
 8027760:	f858 3003 	ldr.w	r3, [r8, r3]
 8027764:	9308      	str	r3, [sp, #32]
 8027766:	0e1b      	lsrs	r3, r3, #24
 8027768:	9310      	str	r3, [sp, #64]	; 0x40
 802776a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802776e:	930c      	str	r3, [sp, #48]	; 0x30
 8027770:	0e1b      	lsrs	r3, r3, #24
 8027772:	9313      	str	r3, [sp, #76]	; 0x4c
 8027774:	b289      	uxth	r1, r1
 8027776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027778:	b280      	uxth	r0, r0
 802777a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802777c:	fb01 f900 	mul.w	r9, r1, r0
 8027780:	0109      	lsls	r1, r1, #4
 8027782:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027786:	eba1 0809 	sub.w	r8, r1, r9
 802778a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802778e:	b280      	uxth	r0, r0
 8027790:	fa1f f888 	uxth.w	r8, r8
 8027794:	1a09      	subs	r1, r1, r0
 8027796:	fb08 f303 	mul.w	r3, r8, r3
 802779a:	b289      	uxth	r1, r1
 802779c:	fb01 330e 	mla	r3, r1, lr, r3
 80277a0:	fb00 3305 	mla	r3, r0, r5, r3
 80277a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80277a6:	fb09 3305 	mla	r3, r9, r5, r3
 80277aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80277ae:	2b00      	cmp	r3, #0
 80277b0:	f000 80d2 	beq.w	8027958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80277b4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80277b8:	d01b      	beq.n	80277f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80277ba:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80277be:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80277c2:	fb0e fa0a 	mul.w	sl, lr, sl
 80277c6:	fb0e fe02 	mul.w	lr, lr, r2
 80277ca:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80277ce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80277d2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80277d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80277da:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80277de:	4452      	add	r2, sl
 80277e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80277e4:	0a12      	lsrs	r2, r2, #8
 80277e6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80277ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80277ee:	ea42 020c 	orr.w	r2, r2, ip
 80277f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80277f4:	2dff      	cmp	r5, #255	; 0xff
 80277f6:	d021      	beq.n	802783c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80277f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80277fa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80277fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027800:	fb05 fb0b 	mul.w	fp, r5, fp
 8027804:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027806:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802780a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802780c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027810:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027814:	fb05 fa0a 	mul.w	sl, r5, sl
 8027818:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802781c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027820:	44de      	add	lr, fp
 8027822:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027826:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802782a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802782e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027832:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027836:	ea4e 050a 	orr.w	r5, lr, sl
 802783a:	950b      	str	r5, [sp, #44]	; 0x2c
 802783c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802783e:	2dff      	cmp	r5, #255	; 0xff
 8027840:	d021      	beq.n	8027886 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8027842:	9d08      	ldr	r5, [sp, #32]
 8027844:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027848:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802784a:	fb05 fb0b 	mul.w	fp, r5, fp
 802784e:	9d08      	ldr	r5, [sp, #32]
 8027850:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027854:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027856:	fb05 fa0e 	mul.w	sl, r5, lr
 802785a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802785e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027862:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027866:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802786a:	44de      	add	lr, fp
 802786c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027870:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027874:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027878:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802787c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027880:	ea4e 050a 	orr.w	r5, lr, sl
 8027884:	9508      	str	r5, [sp, #32]
 8027886:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027888:	2dff      	cmp	r5, #255	; 0xff
 802788a:	d021      	beq.n	80278d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802788c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802788e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027892:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027894:	fb05 fb0b 	mul.w	fp, r5, fp
 8027898:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802789a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802789e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80278a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80278a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80278a8:	fb05 fa0a 	mul.w	sl, r5, sl
 80278ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80278b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80278b4:	44de      	add	lr, fp
 80278b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80278ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80278be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80278c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80278c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80278ca:	ea4e 050a 	orr.w	r5, lr, sl
 80278ce:	950c      	str	r5, [sp, #48]	; 0x30
 80278d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80278d2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80278d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80278da:	2bff      	cmp	r3, #255	; 0xff
 80278dc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80278e0:	9d08      	ldr	r5, [sp, #32]
 80278e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80278e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80278ea:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80278ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80278f0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80278f4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80278f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80278fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80278fe:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027902:	fb08 f80e 	mul.w	r8, r8, lr
 8027906:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802790a:	fb01 8202 	mla	r2, r1, r2, r8
 802790e:	9908      	ldr	r1, [sp, #32]
 8027910:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027914:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027918:	990c      	ldr	r1, [sp, #48]	; 0x30
 802791a:	fb00 220a 	mla	r2, r0, sl, r2
 802791e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027922:	fb09 2900 	mla	r9, r9, r0, r2
 8027926:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802792a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802792e:	ea4c 0c09 	orr.w	ip, ip, r9
 8027932:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8027936:	f040 8091 	bne.w	8027a5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802793a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802793e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8027942:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027946:	f022 0207 	bic.w	r2, r2, #7
 802794a:	431a      	orrs	r2, r3
 802794c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027950:	ea4c 0c02 	orr.w	ip, ip, r2
 8027954:	f8a7 c000 	strh.w	ip, [r7]
 8027958:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802795a:	3702      	adds	r7, #2
 802795c:	441c      	add	r4, r3
 802795e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027960:	441e      	add	r6, r3
 8027962:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027964:	3b01      	subs	r3, #1
 8027966:	9317      	str	r3, [sp, #92]	; 0x5c
 8027968:	e6c0      	b.n	80276ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802796a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802796c:	441c      	add	r4, r3
 802796e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027970:	441e      	add	r6, r3
 8027972:	9b07      	ldr	r3, [sp, #28]
 8027974:	3b01      	subs	r3, #1
 8027976:	9307      	str	r3, [sp, #28]
 8027978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802797a:	3302      	adds	r3, #2
 802797c:	930a      	str	r3, [sp, #40]	; 0x28
 802797e:	e695      	b.n	80276ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027980:	d024      	beq.n	80279cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027982:	9b07      	ldr	r3, [sp, #28]
 8027984:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027986:	3b01      	subs	r3, #1
 8027988:	fb00 4003 	mla	r0, r0, r3, r4
 802798c:	1400      	asrs	r0, r0, #16
 802798e:	f53f aeaa 	bmi.w	80276e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027992:	3901      	subs	r1, #1
 8027994:	4288      	cmp	r0, r1
 8027996:	f6bf aea6 	bge.w	80276e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802799a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802799c:	fb01 6303 	mla	r3, r1, r3, r6
 80279a0:	141b      	asrs	r3, r3, #16
 80279a2:	f53f aea0 	bmi.w	80276e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80279a6:	3a01      	subs	r2, #1
 80279a8:	4293      	cmp	r3, r2
 80279aa:	f6bf ae9c 	bge.w	80276e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80279ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80279b2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80279b6:	f1bb 0f00 	cmp.w	fp, #0
 80279ba:	f300 809a 	bgt.w	8027af2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80279be:	9b07      	ldr	r3, [sp, #28]
 80279c0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80279c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80279c6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80279ca:	930a      	str	r3, [sp, #40]	; 0x28
 80279cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80279ce:	2b00      	cmp	r3, #0
 80279d0:	f340 81ec 	ble.w	8027dac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80279d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80279d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80279da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80279de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80279e2:	eef0 6a62 	vmov.f32	s13, s5
 80279e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80279ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80279ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279f2:	ee16 4a90 	vmov	r4, s13
 80279f6:	eef0 6a43 	vmov.f32	s13, s6
 80279fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279fe:	ee16 6a90 	vmov	r6, s13
 8027a02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027a06:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027a0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027a0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027a12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027a16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027a1a:	ee12 2a90 	vmov	r2, s5
 8027a1e:	eef0 2a47 	vmov.f32	s5, s14
 8027a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a26:	ee13 2a10 	vmov	r2, s6
 8027a2a:	9327      	str	r3, [sp, #156]	; 0x9c
 8027a2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027a2e:	eeb0 3a67 	vmov.f32	s6, s15
 8027a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a36:	9328      	str	r3, [sp, #160]	; 0xa0
 8027a38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027a3c:	3b01      	subs	r3, #1
 8027a3e:	9316      	str	r3, [sp, #88]	; 0x58
 8027a40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027a42:	bf08      	it	eq
 8027a44:	4613      	moveq	r3, r2
 8027a46:	9307      	str	r3, [sp, #28]
 8027a48:	e622      	b.n	8027690 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8027a4a:	2800      	cmp	r0, #0
 8027a4c:	f43f ae92 	beq.w	8027774 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027a50:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027a54:	9308      	str	r3, [sp, #32]
 8027a56:	0e1b      	lsrs	r3, r3, #24
 8027a58:	9310      	str	r3, [sp, #64]	; 0x40
 8027a5a:	e68b      	b.n	8027774 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027a5c:	8839      	ldrh	r1, [r7, #0]
 8027a5e:	43db      	mvns	r3, r3
 8027a60:	4dd4      	ldr	r5, [pc, #848]	; (8027db4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027a62:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027a66:	fa5f f883 	uxtb.w	r8, r3
 8027a6a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8027a6e:	10c8      	asrs	r0, r1, #3
 8027a70:	00cb      	lsls	r3, r1, #3
 8027a72:	fb0e fe08 	mul.w	lr, lr, r8
 8027a76:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027a7a:	b2db      	uxtb	r3, r3
 8027a7c:	f10e 0101 	add.w	r1, lr, #1
 8027a80:	fb00 f008 	mul.w	r0, r0, r8
 8027a84:	fb03 f308 	mul.w	r3, r3, r8
 8027a88:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8027a8c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8027a90:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8027a94:	f100 0e01 	add.w	lr, r0, #1
 8027a98:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8027a9c:	b2c9      	uxtb	r1, r1
 8027a9e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027aa2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8027aa6:	00d2      	lsls	r2, r2, #3
 8027aa8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027aac:	430a      	orrs	r2, r1
 8027aae:	1c59      	adds	r1, r3, #1
 8027ab0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027ab4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027ab8:	e748      	b.n	802794c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8027aba:	f112 0801 	adds.w	r8, r2, #1
 8027abe:	f53f af4b 	bmi.w	8027958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027ac2:	4543      	cmp	r3, r8
 8027ac4:	f6ff af48 	blt.w	8027958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027ac8:	f11c 0801 	adds.w	r8, ip, #1
 8027acc:	f53f af44 	bmi.w	8027958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027ad0:	45c6      	cmp	lr, r8
 8027ad2:	f6ff af41 	blt.w	8027958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027ad6:	b21b      	sxth	r3, r3
 8027ad8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027adc:	fa0f f28e 	sxth.w	r2, lr
 8027ae0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027ae4:	9200      	str	r2, [sp, #0]
 8027ae6:	4639      	mov	r1, r7
 8027ae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027aea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027aec:	f7ff fc88 	bl	8027400 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027af0:	e732      	b.n	8027958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027af2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027af4:	1421      	asrs	r1, r4, #16
 8027af6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027af8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027afc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027b00:	1433      	asrs	r3, r6, #16
 8027b02:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027b06:	fb07 1303 	mla	r3, r7, r3, r1
 8027b0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027b0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027b10:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027b14:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027b18:	2a00      	cmp	r2, #0
 8027b1a:	f000 8108 	beq.w	8027d2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8027b1e:	684d      	ldr	r5, [r1, #4]
 8027b20:	950d      	str	r5, [sp, #52]	; 0x34
 8027b22:	0e2d      	lsrs	r5, r5, #24
 8027b24:	9514      	str	r5, [sp, #80]	; 0x50
 8027b26:	b178      	cbz	r0, 8027b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027b28:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8027b2c:	3f01      	subs	r7, #1
 8027b2e:	00bf      	lsls	r7, r7, #2
 8027b30:	3704      	adds	r7, #4
 8027b32:	eb01 0e07 	add.w	lr, r1, r7
 8027b36:	59c9      	ldr	r1, [r1, r7]
 8027b38:	9109      	str	r1, [sp, #36]	; 0x24
 8027b3a:	0e09      	lsrs	r1, r1, #24
 8027b3c:	9111      	str	r1, [sp, #68]	; 0x44
 8027b3e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027b42:	910e      	str	r1, [sp, #56]	; 0x38
 8027b44:	0e09      	lsrs	r1, r1, #24
 8027b46:	9115      	str	r1, [sp, #84]	; 0x54
 8027b48:	b292      	uxth	r2, r2
 8027b4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027b4c:	b280      	uxth	r0, r0
 8027b4e:	fb02 f900 	mul.w	r9, r2, r0
 8027b52:	0112      	lsls	r2, r2, #4
 8027b54:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027b58:	eba2 0e09 	sub.w	lr, r2, r9
 8027b5c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027b60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027b62:	b280      	uxth	r0, r0
 8027b64:	fa1f fe8e 	uxth.w	lr, lr
 8027b68:	1a09      	subs	r1, r1, r0
 8027b6a:	fb0e f202 	mul.w	r2, lr, r2
 8027b6e:	b289      	uxth	r1, r1
 8027b70:	fb01 220c 	mla	r2, r1, ip, r2
 8027b74:	fb00 2205 	mla	r2, r0, r5, r2
 8027b78:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027b7a:	fb09 2205 	mla	r2, r9, r5, r2
 8027b7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027b82:	2a00      	cmp	r2, #0
 8027b84:	f000 80ca 	beq.w	8027d1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027b88:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027b8c:	d019      	beq.n	8027bc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8027b8e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027b92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b96:	fb0c fa0a 	mul.w	sl, ip, sl
 8027b9a:	fb0c fc03 	mul.w	ip, ip, r3
 8027b9e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027ba2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027ba6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027baa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027bae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027bb2:	4453      	add	r3, sl
 8027bb4:	0a3f      	lsrs	r7, r7, #8
 8027bb6:	0a1b      	lsrs	r3, r3, #8
 8027bb8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027bbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027bc0:	433b      	orrs	r3, r7
 8027bc2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027bc4:	2dff      	cmp	r5, #255	; 0xff
 8027bc6:	d020      	beq.n	8027c0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8027bc8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027bca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027bce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027bd0:	436f      	muls	r7, r5
 8027bd2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027bd4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027bd8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027bdc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027bde:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027be2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027be6:	fb05 fa0a 	mul.w	sl, r5, sl
 8027bea:	44bc      	add	ip, r7
 8027bec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027bf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027bf4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027bf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027bfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c04:	ea4c 050a 	orr.w	r5, ip, sl
 8027c08:	950d      	str	r5, [sp, #52]	; 0x34
 8027c0a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027c0c:	2dff      	cmp	r5, #255	; 0xff
 8027c0e:	d020      	beq.n	8027c52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8027c10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027c12:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027c16:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027c18:	436f      	muls	r7, r5
 8027c1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027c1c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027c20:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027c22:	fb05 fa0c 	mul.w	sl, r5, ip
 8027c26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027c2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027c2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c32:	44bc      	add	ip, r7
 8027c34:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027c38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027c3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c48:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c4c:	ea4c 050a 	orr.w	r5, ip, sl
 8027c50:	9509      	str	r5, [sp, #36]	; 0x24
 8027c52:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c54:	2dff      	cmp	r5, #255	; 0xff
 8027c56:	d020      	beq.n	8027c9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8027c58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027c5a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027c5e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c60:	436f      	muls	r7, r5
 8027c62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027c64:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027c68:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027c6c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c6e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027c72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c76:	fb05 fa0a 	mul.w	sl, r5, sl
 8027c7a:	44bc      	add	ip, r7
 8027c7c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027c80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c84:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027c88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c94:	ea4c 050a 	orr.w	r5, ip, sl
 8027c98:	950e      	str	r5, [sp, #56]	; 0x38
 8027c9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027c9c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027ca0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027ca4:	2aff      	cmp	r2, #255	; 0xff
 8027ca6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027caa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027cac:	fb0e f707 	mul.w	r7, lr, r7
 8027cb0:	fb01 770c 	mla	r7, r1, ip, r7
 8027cb4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027cb8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027cba:	fb00 770c 	mla	r7, r0, ip, r7
 8027cbe:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027cc2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027cc4:	fb09 770c 	mla	r7, r9, ip, r7
 8027cc8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027ccc:	fb0e fe0c 	mul.w	lr, lr, ip
 8027cd0:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027cd4:	fb01 e303 	mla	r3, r1, r3, lr
 8027cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027cda:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027cde:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027ce2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027ce4:	fb00 330a 	mla	r3, r0, sl, r3
 8027ce8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8027cec:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027cf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027cf4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027cf8:	ea47 070c 	orr.w	r7, r7, ip
 8027cfc:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8027d00:	d11e      	bne.n	8027d40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8027d02:	097a      	lsrs	r2, r7, #5
 8027d04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027d08:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027d0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027d10:	f023 0307 	bic.w	r3, r3, #7
 8027d14:	4313      	orrs	r3, r2
 8027d16:	431f      	orrs	r7, r3
 8027d18:	f8a8 7000 	strh.w	r7, [r8]
 8027d1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027d1e:	f108 0802 	add.w	r8, r8, #2
 8027d22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027d26:	441c      	add	r4, r3
 8027d28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027d2a:	441e      	add	r6, r3
 8027d2c:	e643      	b.n	80279b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8027d2e:	2800      	cmp	r0, #0
 8027d30:	f43f af0a 	beq.w	8027b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027d34:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027d38:	9109      	str	r1, [sp, #36]	; 0x24
 8027d3a:	0e09      	lsrs	r1, r1, #24
 8027d3c:	9111      	str	r1, [sp, #68]	; 0x44
 8027d3e:	e703      	b.n	8027b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027d40:	f8b8 1000 	ldrh.w	r1, [r8]
 8027d44:	43d2      	mvns	r2, r2
 8027d46:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8027d4a:	fa5f fe82 	uxtb.w	lr, r2
 8027d4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027d52:	10c8      	asrs	r0, r1, #3
 8027d54:	00ca      	lsls	r2, r1, #3
 8027d56:	fb0c fc0e 	mul.w	ip, ip, lr
 8027d5a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027d5e:	b2d2      	uxtb	r2, r2
 8027d60:	f10c 0101 	add.w	r1, ip, #1
 8027d64:	fb00 f00e 	mul.w	r0, r0, lr
 8027d68:	fb02 f20e 	mul.w	r2, r2, lr
 8027d6c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027d70:	0c39      	lsrs	r1, r7, #16
 8027d72:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027d76:	490f      	ldr	r1, [pc, #60]	; (8027db4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027d78:	fa5f fc8c 	uxtb.w	ip, ip
 8027d7c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027d80:	1c41      	adds	r1, r0, #1
 8027d82:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027d86:	1c51      	adds	r1, r2, #1
 8027d88:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027d8c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027d90:	00c0      	lsls	r0, r0, #3
 8027d92:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027d96:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027d9a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027d9e:	ea4c 0c00 	orr.w	ip, ip, r0
 8027da2:	ea47 0c0c 	orr.w	ip, r7, ip
 8027da6:	f8a8 c000 	strh.w	ip, [r8]
 8027daa:	e7b7      	b.n	8027d1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027dac:	b01b      	add	sp, #108	; 0x6c
 8027dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027db2:	bf00      	nop
 8027db4:	fffff800 	.word	0xfffff800

08027db8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8027db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027dbc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8027dc0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027dc4:	2d00      	cmp	r5, #0
 8027dc6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027dca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027dce:	fb05 0e03 	mla	lr, r5, r3, r0
 8027dd2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8027dd6:	f2c0 808c 	blt.w	8027ef2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027dda:	45a9      	cmp	r9, r5
 8027ddc:	f340 8089 	ble.w	8027ef2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027de0:	2800      	cmp	r0, #0
 8027de2:	f2c0 8084 	blt.w	8027eee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027de6:	4580      	cmp	r8, r0
 8027de8:	f340 8081 	ble.w	8027eee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027dec:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027df0:	f01e 0f01 	tst.w	lr, #1
 8027df4:	5d16      	ldrb	r6, [r2, r4]
 8027df6:	bf0c      	ite	eq
 8027df8:	f006 060f 	andeq.w	r6, r6, #15
 8027dfc:	1136      	asrne	r6, r6, #4
 8027dfe:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027e02:	b2f6      	uxtb	r6, r6
 8027e04:	1c44      	adds	r4, r0, #1
 8027e06:	d477      	bmi.n	8027ef8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027e08:	45a0      	cmp	r8, r4
 8027e0a:	dd75      	ble.n	8027ef8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027e0c:	2f00      	cmp	r7, #0
 8027e0e:	d075      	beq.n	8027efc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8027e10:	f10e 0a01 	add.w	sl, lr, #1
 8027e14:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027e18:	f01a 0f01 	tst.w	sl, #1
 8027e1c:	5d14      	ldrb	r4, [r2, r4]
 8027e1e:	bf0c      	ite	eq
 8027e20:	f004 040f 	andeq.w	r4, r4, #15
 8027e24:	1124      	asrne	r4, r4, #4
 8027e26:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027e2a:	b2e4      	uxtb	r4, r4
 8027e2c:	3501      	adds	r5, #1
 8027e2e:	d469      	bmi.n	8027f04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027e30:	45a9      	cmp	r9, r5
 8027e32:	dd67      	ble.n	8027f04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027e34:	f1bc 0f00 	cmp.w	ip, #0
 8027e38:	d067      	beq.n	8027f0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8027e3a:	2800      	cmp	r0, #0
 8027e3c:	db60      	blt.n	8027f00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8027e3e:	4580      	cmp	r8, r0
 8027e40:	dd5e      	ble.n	8027f00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8027e42:	eb03 090e 	add.w	r9, r3, lr
 8027e46:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8027e4a:	f019 0f01 	tst.w	r9, #1
 8027e4e:	5d55      	ldrb	r5, [r2, r5]
 8027e50:	bf0c      	ite	eq
 8027e52:	f005 050f 	andeq.w	r5, r5, #15
 8027e56:	112d      	asrne	r5, r5, #4
 8027e58:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027e5c:	b2ed      	uxtb	r5, r5
 8027e5e:	3001      	adds	r0, #1
 8027e60:	d456      	bmi.n	8027f10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027e62:	4580      	cmp	r8, r0
 8027e64:	dd54      	ble.n	8027f10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027e66:	2f00      	cmp	r7, #0
 8027e68:	d054      	beq.n	8027f14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8027e6a:	3301      	adds	r3, #1
 8027e6c:	449e      	add	lr, r3
 8027e6e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027e72:	f01e 0f01 	tst.w	lr, #1
 8027e76:	5cd0      	ldrb	r0, [r2, r3]
 8027e78:	bf0c      	ite	eq
 8027e7a:	f000 000f 	andeq.w	r0, r0, #15
 8027e7e:	1100      	asrne	r0, r0, #4
 8027e80:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027e84:	b2c3      	uxtb	r3, r0
 8027e86:	b2ba      	uxth	r2, r7
 8027e88:	fa1f fc8c 	uxth.w	ip, ip
 8027e8c:	fb02 f00c 	mul.w	r0, r2, ip
 8027e90:	0112      	lsls	r2, r2, #4
 8027e92:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027e96:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027e9a:	1a12      	subs	r2, r2, r0
 8027e9c:	fa1f fc8c 	uxth.w	ip, ip
 8027ea0:	b292      	uxth	r2, r2
 8027ea2:	eba7 070c 	sub.w	r7, r7, ip
 8027ea6:	4362      	muls	r2, r4
 8027ea8:	b2bf      	uxth	r7, r7
 8027eaa:	fb06 2207 	mla	r2, r6, r7, r2
 8027eae:	fb0c 2505 	mla	r5, ip, r5, r2
 8027eb2:	fb00 5303 	mla	r3, r0, r3, r5
 8027eb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027eba:	b1b3      	cbz	r3, 8027eea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8027ebc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8027ec0:	435a      	muls	r2, r3
 8027ec2:	1c53      	adds	r3, r2, #1
 8027ec4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027ec8:	4a2d      	ldr	r2, [pc, #180]	; (8027f80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8027eca:	121b      	asrs	r3, r3, #8
 8027ecc:	6812      	ldr	r2, [r2, #0]
 8027ece:	2bff      	cmp	r3, #255	; 0xff
 8027ed0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8027ed4:	d120      	bne.n	8027f18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8027ed6:	0950      	lsrs	r0, r2, #5
 8027ed8:	4b2a      	ldr	r3, [pc, #168]	; (8027f84 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8027eda:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027ede:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027ee2:	4033      	ands	r3, r6
 8027ee4:	4318      	orrs	r0, r3
 8027ee6:	4302      	orrs	r2, r0
 8027ee8:	800a      	strh	r2, [r1, #0]
 8027eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027eee:	2600      	movs	r6, #0
 8027ef0:	e788      	b.n	8027e04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8027ef2:	2400      	movs	r4, #0
 8027ef4:	4626      	mov	r6, r4
 8027ef6:	e799      	b.n	8027e2c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027ef8:	2400      	movs	r4, #0
 8027efa:	e797      	b.n	8027e2c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027efc:	463c      	mov	r4, r7
 8027efe:	e795      	b.n	8027e2c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027f00:	2500      	movs	r5, #0
 8027f02:	e7ac      	b.n	8027e5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8027f04:	2300      	movs	r3, #0
 8027f06:	461d      	mov	r5, r3
 8027f08:	e7bd      	b.n	8027e86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027f0a:	4663      	mov	r3, ip
 8027f0c:	4665      	mov	r5, ip
 8027f0e:	e7ba      	b.n	8027e86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027f10:	2300      	movs	r3, #0
 8027f12:	e7b8      	b.n	8027e86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027f14:	463b      	mov	r3, r7
 8027f16:	e7b6      	b.n	8027e86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027f18:	880d      	ldrh	r5, [r1, #0]
 8027f1a:	b29f      	uxth	r7, r3
 8027f1c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8027f20:	43db      	mvns	r3, r3
 8027f22:	122c      	asrs	r4, r5, #8
 8027f24:	fb10 f007 	smulbb	r0, r0, r7
 8027f28:	b2db      	uxtb	r3, r3
 8027f2a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027f2e:	b2f6      	uxtb	r6, r6
 8027f30:	b2d2      	uxtb	r2, r2
 8027f32:	fb04 0403 	mla	r4, r4, r3, r0
 8027f36:	10e8      	asrs	r0, r5, #3
 8027f38:	fb12 f207 	smulbb	r2, r2, r7
 8027f3c:	00ed      	lsls	r5, r5, #3
 8027f3e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027f42:	b2a4      	uxth	r4, r4
 8027f44:	fb16 f607 	smulbb	r6, r6, r7
 8027f48:	b2ed      	uxtb	r5, r5
 8027f4a:	fb00 6603 	mla	r6, r0, r3, r6
 8027f4e:	fb05 2303 	mla	r3, r5, r3, r2
 8027f52:	b2b0      	uxth	r0, r6
 8027f54:	b29a      	uxth	r2, r3
 8027f56:	1c63      	adds	r3, r4, #1
 8027f58:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027f5c:	1c53      	adds	r3, r2, #1
 8027f5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027f62:	1c42      	adds	r2, r0, #1
 8027f64:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8027f68:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027f6c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027f70:	0940      	lsrs	r0, r0, #5
 8027f72:	4323      	orrs	r3, r4
 8027f74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027f78:	4303      	orrs	r3, r0
 8027f7a:	800b      	strh	r3, [r1, #0]
 8027f7c:	e7b5      	b.n	8027eea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8027f7e:	bf00      	nop
 8027f80:	20015040 	.word	0x20015040
 8027f84:	00fff800 	.word	0x00fff800

08027f88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f8c:	b097      	sub	sp, #92	; 0x5c
 8027f8e:	9214      	str	r2, [sp, #80]	; 0x50
 8027f90:	9309      	str	r3, [sp, #36]	; 0x24
 8027f92:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027f94:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027f98:	9015      	str	r0, [sp, #84]	; 0x54
 8027f9a:	910d      	str	r1, [sp, #52]	; 0x34
 8027f9c:	6850      	ldr	r0, [r2, #4]
 8027f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027fa0:	6812      	ldr	r2, [r2, #0]
 8027fa2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027fa6:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8027faa:	fb00 1303 	mla	r3, r0, r3, r1
 8027fae:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027fb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027fb4:	689b      	ldr	r3, [r3, #8]
 8027fb6:	3301      	adds	r3, #1
 8027fb8:	f023 0301 	bic.w	r3, r3, #1
 8027fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8027fbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027fc0:	681f      	ldr	r7, [r3, #0]
 8027fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027fc4:	2b00      	cmp	r3, #0
 8027fc6:	dc03      	bgt.n	8027fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027fc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027fca:	2b00      	cmp	r3, #0
 8027fcc:	f340 8289 	ble.w	80284e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027fd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027fd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027fd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027fda:	1e48      	subs	r0, r1, #1
 8027fdc:	f102 3cff 	add.w	ip, r2, #4294967295
 8027fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fe2:	2b00      	cmp	r3, #0
 8027fe4:	f340 80c5 	ble.w	8028172 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027fe8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027fec:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027ff0:	d406      	bmi.n	8028000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027ff2:	4586      	cmp	lr, r0
 8027ff4:	da04      	bge.n	8028000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027ff6:	2b00      	cmp	r3, #0
 8027ff8:	db02      	blt.n	8028000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027ffa:	4563      	cmp	r3, ip
 8027ffc:	f2c0 80ba 	blt.w	8028174 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8028000:	f11e 0e01 	adds.w	lr, lr, #1
 8028004:	f100 80ab 	bmi.w	802815e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028008:	4571      	cmp	r1, lr
 802800a:	f2c0 80a8 	blt.w	802815e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802800e:	3301      	adds	r3, #1
 8028010:	f100 80a5 	bmi.w	802815e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028014:	429a      	cmp	r2, r3
 8028016:	f2c0 80a2 	blt.w	802815e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802801a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802801c:	46c8      	mov	r8, r9
 802801e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8028022:	930e      	str	r3, [sp, #56]	; 0x38
 8028024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028026:	2b00      	cmp	r3, #0
 8028028:	f340 80c4 	ble.w	80281b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802802c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802802e:	1430      	asrs	r0, r6, #16
 8028030:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028034:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028038:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802803c:	1423      	asrs	r3, r4, #16
 802803e:	f100 814f 	bmi.w	80282e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028042:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028046:	455b      	cmp	r3, fp
 8028048:	f280 814a 	bge.w	80282e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802804c:	2800      	cmp	r0, #0
 802804e:	f2c0 8147 	blt.w	80282e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028052:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028056:	4558      	cmp	r0, fp
 8028058:	f280 8142 	bge.w	80282e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802805c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802805e:	fb00 3305 	mla	r3, r0, r5, r3
 8028062:	0858      	lsrs	r0, r3, #1
 8028064:	07dd      	lsls	r5, r3, #31
 8028066:	f817 c000 	ldrb.w	ip, [r7, r0]
 802806a:	bf54      	ite	pl
 802806c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028070:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028074:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028078:	fa5f fc8c 	uxtb.w	ip, ip
 802807c:	2a00      	cmp	r2, #0
 802807e:	f000 80dd 	beq.w	802823c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8028082:	1c58      	adds	r0, r3, #1
 8028084:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028088:	07c0      	lsls	r0, r0, #31
 802808a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802808e:	bf54      	ite	pl
 8028090:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028094:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028098:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802809c:	fa5f f08e 	uxtb.w	r0, lr
 80280a0:	9010      	str	r0, [sp, #64]	; 0x40
 80280a2:	b1d9      	cbz	r1, 80280dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80280a4:	4453      	add	r3, sl
 80280a6:	0858      	lsrs	r0, r3, #1
 80280a8:	07dd      	lsls	r5, r3, #31
 80280aa:	f103 0301 	add.w	r3, r3, #1
 80280ae:	5c38      	ldrb	r0, [r7, r0]
 80280b0:	bf54      	ite	pl
 80280b2:	f000 000f 	andpl.w	r0, r0, #15
 80280b6:	1100      	asrmi	r0, r0, #4
 80280b8:	07dd      	lsls	r5, r3, #31
 80280ba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80280be:	b2c0      	uxtb	r0, r0
 80280c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80280c2:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80280c6:	f817 e000 	ldrb.w	lr, [r7, r0]
 80280ca:	bf54      	ite	pl
 80280cc:	f00e 030f 	andpl.w	r3, lr, #15
 80280d0:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80280d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80280d8:	b2db      	uxtb	r3, r3
 80280da:	9311      	str	r3, [sp, #68]	; 0x44
 80280dc:	b292      	uxth	r2, r2
 80280de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280e0:	b289      	uxth	r1, r1
 80280e2:	fb02 f301 	mul.w	r3, r2, r1
 80280e6:	0112      	lsls	r2, r2, #4
 80280e8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80280ec:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80280f0:	1ad2      	subs	r2, r2, r3
 80280f2:	b289      	uxth	r1, r1
 80280f4:	b292      	uxth	r2, r2
 80280f6:	1a40      	subs	r0, r0, r1
 80280f8:	436a      	muls	r2, r5
 80280fa:	b280      	uxth	r0, r0
 80280fc:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028102:	fb01 c102 	mla	r1, r1, r2, ip
 8028106:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028108:	fb03 1302 	mla	r3, r3, r2, r1
 802810c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028110:	b1db      	cbz	r3, 802814a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028112:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028114:	4353      	muls	r3, r2
 8028116:	1c5a      	adds	r2, r3, #1
 8028118:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802811c:	4ac6      	ldr	r2, [pc, #792]	; (8028438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802811e:	121b      	asrs	r3, r3, #8
 8028120:	6812      	ldr	r2, [r2, #0]
 8028122:	2bff      	cmp	r3, #255	; 0xff
 8028124:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028128:	f040 8099 	bne.w	802825e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802812c:	0953      	lsrs	r3, r2, #5
 802812e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028132:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028136:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802813a:	f02c 0c07 	bic.w	ip, ip, #7
 802813e:	ea43 0c0c 	orr.w	ip, r3, ip
 8028142:	ea4c 0202 	orr.w	r2, ip, r2
 8028146:	f8a8 2000 	strh.w	r2, [r8]
 802814a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802814c:	f108 0802 	add.w	r8, r8, #2
 8028150:	441c      	add	r4, r3
 8028152:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028154:	441e      	add	r6, r3
 8028156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028158:	3b01      	subs	r3, #1
 802815a:	930e      	str	r3, [sp, #56]	; 0x38
 802815c:	e762      	b.n	8028024 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802815e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028160:	f109 0902 	add.w	r9, r9, #2
 8028164:	441c      	add	r4, r3
 8028166:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028168:	441e      	add	r6, r3
 802816a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802816c:	3b01      	subs	r3, #1
 802816e:	9309      	str	r3, [sp, #36]	; 0x24
 8028170:	e736      	b.n	8027fe0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028172:	d024      	beq.n	80281be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028176:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028178:	3b01      	subs	r3, #1
 802817a:	fb00 4003 	mla	r0, r0, r3, r4
 802817e:	1400      	asrs	r0, r0, #16
 8028180:	f53f af4b 	bmi.w	802801a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028184:	3901      	subs	r1, #1
 8028186:	4288      	cmp	r0, r1
 8028188:	f6bf af47 	bge.w	802801a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802818c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802818e:	fb01 6303 	mla	r3, r1, r3, r6
 8028192:	141b      	asrs	r3, r3, #16
 8028194:	f53f af41 	bmi.w	802801a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028198:	3a01      	subs	r2, #1
 802819a:	4293      	cmp	r3, r2
 802819c:	f6bf af3d 	bge.w	802801a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80281a0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80281a4:	46c8      	mov	r8, r9
 80281a6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80281aa:	930e      	str	r3, [sp, #56]	; 0x38
 80281ac:	f1bb 0f00 	cmp.w	fp, #0
 80281b0:	f300 80b7 	bgt.w	8028322 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80281b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80281b6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80281ba:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80281be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80281c0:	2b00      	cmp	r3, #0
 80281c2:	f340 818e 	ble.w	80284e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80281c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80281ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80281cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80281d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80281d4:	eef0 6a62 	vmov.f32	s13, s5
 80281d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80281dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80281e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281e4:	ee16 4a90 	vmov	r4, s13
 80281e8:	eef0 6a43 	vmov.f32	s13, s6
 80281ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281f0:	ee16 6a90 	vmov	r6, s13
 80281f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80281f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80281fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028200:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028204:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028208:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802820c:	ee12 2a90 	vmov	r2, s5
 8028210:	eef0 2a47 	vmov.f32	s5, s14
 8028214:	fb92 f3f3 	sdiv	r3, r2, r3
 8028218:	ee13 2a10 	vmov	r2, s6
 802821c:	9323      	str	r3, [sp, #140]	; 0x8c
 802821e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028220:	eeb0 3a67 	vmov.f32	s6, s15
 8028224:	fb92 f3f3 	sdiv	r3, r2, r3
 8028228:	9324      	str	r3, [sp, #144]	; 0x90
 802822a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802822c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802822e:	3b01      	subs	r3, #1
 8028230:	930d      	str	r3, [sp, #52]	; 0x34
 8028232:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028234:	bf08      	it	eq
 8028236:	4613      	moveq	r3, r2
 8028238:	9309      	str	r3, [sp, #36]	; 0x24
 802823a:	e6c2      	b.n	8027fc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802823c:	2900      	cmp	r1, #0
 802823e:	f43f af4d 	beq.w	80280dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028242:	eb0a 0003 	add.w	r0, sl, r3
 8028246:	0843      	lsrs	r3, r0, #1
 8028248:	07c0      	lsls	r0, r0, #31
 802824a:	5cfb      	ldrb	r3, [r7, r3]
 802824c:	bf54      	ite	pl
 802824e:	f003 030f 	andpl.w	r3, r3, #15
 8028252:	111b      	asrmi	r3, r3, #4
 8028254:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028258:	b2db      	uxtb	r3, r3
 802825a:	930b      	str	r3, [sp, #44]	; 0x2c
 802825c:	e73e      	b.n	80280dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802825e:	f8b8 e000 	ldrh.w	lr, [r8]
 8028262:	fa1f fb83 	uxth.w	fp, r3
 8028266:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802826a:	43db      	mvns	r3, r3
 802826c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028270:	fb11 f10b 	smulbb	r1, r1, fp
 8028274:	b2db      	uxtb	r3, r3
 8028276:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802827a:	fa5f fc8c 	uxtb.w	ip, ip
 802827e:	b2d2      	uxtb	r2, r2
 8028280:	fb00 1003 	mla	r0, r0, r3, r1
 8028284:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028288:	fb1c fc0b 	smulbb	ip, ip, fp
 802828c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028290:	b280      	uxth	r0, r0
 8028292:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028296:	fb12 fb0b 	smulbb	fp, r2, fp
 802829a:	fa5f fe8e 	uxtb.w	lr, lr
 802829e:	fb01 cc03 	mla	ip, r1, r3, ip
 80282a2:	fb0e bb03 	mla	fp, lr, r3, fp
 80282a6:	1c43      	adds	r3, r0, #1
 80282a8:	fa1f fc8c 	uxth.w	ip, ip
 80282ac:	fa1f fb8b 	uxth.w	fp, fp
 80282b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80282b4:	f10c 0101 	add.w	r1, ip, #1
 80282b8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80282bc:	f10b 0001 	add.w	r0, fp, #1
 80282c0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80282c4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80282c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80282cc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80282d0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80282d4:	4318      	orrs	r0, r3
 80282d6:	ea40 000c 	orr.w	r0, r0, ip
 80282da:	f8a8 0000 	strh.w	r0, [r8]
 80282de:	e734      	b.n	802814a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80282e0:	f113 0b01 	adds.w	fp, r3, #1
 80282e4:	f53f af31 	bmi.w	802814a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80282e8:	45dc      	cmp	ip, fp
 80282ea:	f6ff af2e 	blt.w	802814a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80282ee:	f110 0b01 	adds.w	fp, r0, #1
 80282f2:	f53f af2a 	bmi.w	802814a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80282f6:	45de      	cmp	lr, fp
 80282f8:	f6ff af27 	blt.w	802814a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80282fc:	9302      	str	r3, [sp, #8]
 80282fe:	fa0f f38e 	sxth.w	r3, lr
 8028302:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028304:	9301      	str	r3, [sp, #4]
 8028306:	fa0f f38c 	sxth.w	r3, ip
 802830a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802830e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028312:	9300      	str	r3, [sp, #0]
 8028314:	463a      	mov	r2, r7
 8028316:	4653      	mov	r3, sl
 8028318:	4641      	mov	r1, r8
 802831a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802831c:	f7ff fd4c 	bl	8027db8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028320:	e713      	b.n	802814a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028322:	1422      	asrs	r2, r4, #16
 8028324:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028326:	1433      	asrs	r3, r6, #16
 8028328:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802832c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028330:	fb05 2303 	mla	r3, r5, r3, r2
 8028334:	085a      	lsrs	r2, r3, #1
 8028336:	07dd      	lsls	r5, r3, #31
 8028338:	5cba      	ldrb	r2, [r7, r2]
 802833a:	bf54      	ite	pl
 802833c:	f002 020f 	andpl.w	r2, r2, #15
 8028340:	1112      	asrmi	r2, r2, #4
 8028342:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028346:	b2d2      	uxtb	r2, r2
 8028348:	2900      	cmp	r1, #0
 802834a:	d077      	beq.n	802843c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802834c:	f103 0e01 	add.w	lr, r3, #1
 8028350:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028354:	f01e 0f01 	tst.w	lr, #1
 8028358:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802835c:	bf0c      	ite	eq
 802835e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028362:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028366:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802836a:	fa5f f58c 	uxtb.w	r5, ip
 802836e:	9512      	str	r5, [sp, #72]	; 0x48
 8028370:	b308      	cbz	r0, 80283b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028372:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028374:	442b      	add	r3, r5
 8028376:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802837a:	07dd      	lsls	r5, r3, #31
 802837c:	f103 0301 	add.w	r3, r3, #1
 8028380:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028384:	bf54      	ite	pl
 8028386:	f00c 0c0f 	andpl.w	ip, ip, #15
 802838a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802838e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028392:	fa5f f58c 	uxtb.w	r5, ip
 8028396:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802839a:	950c      	str	r5, [sp, #48]	; 0x30
 802839c:	07dd      	lsls	r5, r3, #31
 802839e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80283a2:	bf54      	ite	pl
 80283a4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80283a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80283ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80283b0:	fa5f f38c 	uxtb.w	r3, ip
 80283b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80283b6:	b289      	uxth	r1, r1
 80283b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80283ba:	b280      	uxth	r0, r0
 80283bc:	fb01 f300 	mul.w	r3, r1, r0
 80283c0:	0109      	lsls	r1, r1, #4
 80283c2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80283c6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80283ca:	1ac9      	subs	r1, r1, r3
 80283cc:	b280      	uxth	r0, r0
 80283ce:	b289      	uxth	r1, r1
 80283d0:	ebac 0c00 	sub.w	ip, ip, r0
 80283d4:	4369      	muls	r1, r5
 80283d6:	fa1f fc8c 	uxth.w	ip, ip
 80283da:	fb02 120c 	mla	r2, r2, ip, r1
 80283de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80283e0:	fb00 2001 	mla	r0, r0, r1, r2
 80283e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80283e6:	fb03 0302 	mla	r3, r3, r2, r0
 80283ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80283ee:	b1d3      	cbz	r3, 8028426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80283f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80283f2:	4353      	muls	r3, r2
 80283f4:	1c5a      	adds	r2, r3, #1
 80283f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80283fa:	4a0f      	ldr	r2, [pc, #60]	; (8028438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80283fc:	121b      	asrs	r3, r3, #8
 80283fe:	6812      	ldr	r2, [r2, #0]
 8028400:	2bff      	cmp	r3, #255	; 0xff
 8028402:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028406:	d12d      	bne.n	8028464 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8028408:	0953      	lsrs	r3, r2, #5
 802840a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802840e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028412:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028416:	f02c 0c07 	bic.w	ip, ip, #7
 802841a:	ea43 0c0c 	orr.w	ip, r3, ip
 802841e:	ea4c 0202 	orr.w	r2, ip, r2
 8028422:	f8a8 2000 	strh.w	r2, [r8]
 8028426:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028428:	f108 0802 	add.w	r8, r8, #2
 802842c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028430:	441c      	add	r4, r3
 8028432:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028434:	441e      	add	r6, r3
 8028436:	e6b9      	b.n	80281ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028438:	20015040 	.word	0x20015040
 802843c:	2800      	cmp	r0, #0
 802843e:	d0ba      	beq.n	80283b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028440:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028442:	442b      	add	r3, r5
 8028444:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028448:	07db      	lsls	r3, r3, #31
 802844a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802844e:	bf54      	ite	pl
 8028450:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028454:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028458:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802845c:	fa5f f38c 	uxtb.w	r3, ip
 8028460:	930c      	str	r3, [sp, #48]	; 0x30
 8028462:	e7a8      	b.n	80283b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028464:	f8b8 e000 	ldrh.w	lr, [r8]
 8028468:	fa1f fa83 	uxth.w	sl, r3
 802846c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028470:	43db      	mvns	r3, r3
 8028472:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028476:	fb11 f10a 	smulbb	r1, r1, sl
 802847a:	b2db      	uxtb	r3, r3
 802847c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028480:	b2d2      	uxtb	r2, r2
 8028482:	fa5f fc8c 	uxtb.w	ip, ip
 8028486:	fb00 1003 	mla	r0, r0, r3, r1
 802848a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802848e:	fb12 f20a 	smulbb	r2, r2, sl
 8028492:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028496:	b280      	uxth	r0, r0
 8028498:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802849c:	fb1c fc0a 	smulbb	ip, ip, sl
 80284a0:	fa5f fe8e 	uxtb.w	lr, lr
 80284a4:	fb0e 2203 	mla	r2, lr, r3, r2
 80284a8:	fb01 cc03 	mla	ip, r1, r3, ip
 80284ac:	1c43      	adds	r3, r0, #1
 80284ae:	b292      	uxth	r2, r2
 80284b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80284b4:	1c51      	adds	r1, r2, #1
 80284b6:	fa1f fc8c 	uxth.w	ip, ip
 80284ba:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80284be:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80284c2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80284c6:	4308      	orrs	r0, r1
 80284c8:	f10c 0101 	add.w	r1, ip, #1
 80284cc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80284d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80284d4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80284d8:	ea40 000c 	orr.w	r0, r0, ip
 80284dc:	f8a8 0000 	strh.w	r0, [r8]
 80284e0:	e7a1      	b.n	8028426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80284e2:	b017      	add	sp, #92	; 0x5c
 80284e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080284e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80284e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80284ec:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80284f0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80284f4:	2d00      	cmp	r5, #0
 80284f6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80284fa:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80284fe:	fb05 0e03 	mla	lr, r5, r3, r0
 8028502:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8028506:	f2c0 80b0 	blt.w	802866a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802850a:	45a9      	cmp	r9, r5
 802850c:	f340 80ad 	ble.w	802866a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8028510:	2800      	cmp	r0, #0
 8028512:	f2c0 80a8 	blt.w	8028666 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8028516:	4580      	cmp	r8, r0
 8028518:	f340 80a5 	ble.w	8028666 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802851c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028520:	f01e 0f01 	tst.w	lr, #1
 8028524:	5d16      	ldrb	r6, [r2, r4]
 8028526:	bf0c      	ite	eq
 8028528:	f006 060f 	andeq.w	r6, r6, #15
 802852c:	1136      	asrne	r6, r6, #4
 802852e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028532:	b2f6      	uxtb	r6, r6
 8028534:	1c44      	adds	r4, r0, #1
 8028536:	f100 809b 	bmi.w	8028670 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802853a:	45a0      	cmp	r8, r4
 802853c:	f340 8098 	ble.w	8028670 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8028540:	2f00      	cmp	r7, #0
 8028542:	f000 8097 	beq.w	8028674 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8028546:	f10e 0a01 	add.w	sl, lr, #1
 802854a:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802854e:	f01a 0f01 	tst.w	sl, #1
 8028552:	5d14      	ldrb	r4, [r2, r4]
 8028554:	bf0c      	ite	eq
 8028556:	f004 040f 	andeq.w	r4, r4, #15
 802855a:	1124      	asrne	r4, r4, #4
 802855c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028560:	b2e4      	uxtb	r4, r4
 8028562:	3501      	adds	r5, #1
 8028564:	f100 808a 	bmi.w	802867c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028568:	45a9      	cmp	r9, r5
 802856a:	f340 8087 	ble.w	802867c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802856e:	f1bc 0f00 	cmp.w	ip, #0
 8028572:	f000 8086 	beq.w	8028682 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8028576:	2800      	cmp	r0, #0
 8028578:	db7e      	blt.n	8028678 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802857a:	4580      	cmp	r8, r0
 802857c:	dd7c      	ble.n	8028678 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802857e:	eb03 090e 	add.w	r9, r3, lr
 8028582:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8028586:	f019 0f01 	tst.w	r9, #1
 802858a:	5d55      	ldrb	r5, [r2, r5]
 802858c:	bf0c      	ite	eq
 802858e:	f005 050f 	andeq.w	r5, r5, #15
 8028592:	112d      	asrne	r5, r5, #4
 8028594:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028598:	b2ed      	uxtb	r5, r5
 802859a:	3001      	adds	r0, #1
 802859c:	d474      	bmi.n	8028688 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802859e:	4580      	cmp	r8, r0
 80285a0:	dd72      	ble.n	8028688 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80285a2:	2f00      	cmp	r7, #0
 80285a4:	d072      	beq.n	802868c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80285a6:	3301      	adds	r3, #1
 80285a8:	449e      	add	lr, r3
 80285aa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80285ae:	f01e 0f01 	tst.w	lr, #1
 80285b2:	5cd0      	ldrb	r0, [r2, r3]
 80285b4:	bf0c      	ite	eq
 80285b6:	f000 000f 	andeq.w	r0, r0, #15
 80285ba:	1100      	asrne	r0, r0, #4
 80285bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80285c0:	b2c3      	uxtb	r3, r0
 80285c2:	b2ba      	uxth	r2, r7
 80285c4:	fa1f fc8c 	uxth.w	ip, ip
 80285c8:	fb02 f00c 	mul.w	r0, r2, ip
 80285cc:	0112      	lsls	r2, r2, #4
 80285ce:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80285d2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80285d6:	1a12      	subs	r2, r2, r0
 80285d8:	fa1f fc8c 	uxth.w	ip, ip
 80285dc:	b292      	uxth	r2, r2
 80285de:	eba7 070c 	sub.w	r7, r7, ip
 80285e2:	4362      	muls	r2, r4
 80285e4:	b2bf      	uxth	r7, r7
 80285e6:	fb06 2207 	mla	r2, r6, r7, r2
 80285ea:	fb0c 2505 	mla	r5, ip, r5, r2
 80285ee:	fb00 5303 	mla	r3, r0, r3, r5
 80285f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80285f6:	b3a3      	cbz	r3, 8028662 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80285f8:	4a25      	ldr	r2, [pc, #148]	; (8028690 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80285fa:	880e      	ldrh	r6, [r1, #0]
 80285fc:	6815      	ldr	r5, [r2, #0]
 80285fe:	b29a      	uxth	r2, r3
 8028600:	1234      	asrs	r4, r6, #8
 8028602:	43db      	mvns	r3, r3
 8028604:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8028608:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802860c:	b2db      	uxtb	r3, r3
 802860e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028612:	fb10 f002 	smulbb	r0, r0, r2
 8028616:	b2ed      	uxtb	r5, r5
 8028618:	fb17 f702 	smulbb	r7, r7, r2
 802861c:	fb04 0403 	mla	r4, r4, r3, r0
 8028620:	10f0      	asrs	r0, r6, #3
 8028622:	fb15 f202 	smulbb	r2, r5, r2
 8028626:	00f6      	lsls	r6, r6, #3
 8028628:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802862c:	b2a4      	uxth	r4, r4
 802862e:	b2f6      	uxtb	r6, r6
 8028630:	fb00 7003 	mla	r0, r0, r3, r7
 8028634:	fb06 2303 	mla	r3, r6, r3, r2
 8028638:	b280      	uxth	r0, r0
 802863a:	b29a      	uxth	r2, r3
 802863c:	1c63      	adds	r3, r4, #1
 802863e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028642:	1c53      	adds	r3, r2, #1
 8028644:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028648:	1c42      	adds	r2, r0, #1
 802864a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802864e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028652:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028656:	0940      	lsrs	r0, r0, #5
 8028658:	4323      	orrs	r3, r4
 802865a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802865e:	4303      	orrs	r3, r0
 8028660:	800b      	strh	r3, [r1, #0]
 8028662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028666:	2600      	movs	r6, #0
 8028668:	e764      	b.n	8028534 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802866a:	2400      	movs	r4, #0
 802866c:	4626      	mov	r6, r4
 802866e:	e778      	b.n	8028562 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028670:	2400      	movs	r4, #0
 8028672:	e776      	b.n	8028562 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028674:	463c      	mov	r4, r7
 8028676:	e774      	b.n	8028562 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028678:	2500      	movs	r5, #0
 802867a:	e78e      	b.n	802859a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802867c:	2300      	movs	r3, #0
 802867e:	461d      	mov	r5, r3
 8028680:	e79f      	b.n	80285c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028682:	4663      	mov	r3, ip
 8028684:	4665      	mov	r5, ip
 8028686:	e79c      	b.n	80285c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028688:	2300      	movs	r3, #0
 802868a:	e79a      	b.n	80285c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802868c:	463b      	mov	r3, r7
 802868e:	e798      	b.n	80285c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028690:	20015040 	.word	0x20015040

08028694 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028698:	b093      	sub	sp, #76	; 0x4c
 802869a:	461d      	mov	r5, r3
 802869c:	920c      	str	r2, [sp, #48]	; 0x30
 802869e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80286a0:	9011      	str	r0, [sp, #68]	; 0x44
 80286a2:	9107      	str	r1, [sp, #28]
 80286a4:	6850      	ldr	r0, [r2, #4]
 80286a6:	6812      	ldr	r2, [r2, #0]
 80286a8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80286ac:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80286b0:	fb00 1303 	mla	r3, r0, r3, r1
 80286b4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80286b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80286ba:	689b      	ldr	r3, [r3, #8]
 80286bc:	3301      	adds	r3, #1
 80286be:	f023 0301 	bic.w	r3, r3, #1
 80286c2:	9306      	str	r3, [sp, #24]
 80286c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80286c6:	681f      	ldr	r7, [r3, #0]
 80286c8:	9b07      	ldr	r3, [sp, #28]
 80286ca:	2b00      	cmp	r3, #0
 80286cc:	dc03      	bgt.n	80286d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80286ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80286d0:	2b00      	cmp	r3, #0
 80286d2:	f340 8267 	ble.w	8028ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80286d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80286d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80286e0:	1e48      	subs	r0, r1, #1
 80286e2:	f102 3cff 	add.w	ip, r2, #4294967295
 80286e6:	2d00      	cmp	r5, #0
 80286e8:	f340 80b7 	ble.w	802885a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80286ec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80286f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80286f4:	d406      	bmi.n	8028704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80286f6:	4586      	cmp	lr, r0
 80286f8:	da04      	bge.n	8028704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80286fa:	2b00      	cmp	r3, #0
 80286fc:	db02      	blt.n	8028704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80286fe:	4563      	cmp	r3, ip
 8028700:	f2c0 80ac 	blt.w	802885c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8028704:	f11e 0e01 	adds.w	lr, lr, #1
 8028708:	f100 809f 	bmi.w	802884a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802870c:	4571      	cmp	r1, lr
 802870e:	f2c0 809c 	blt.w	802884a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028712:	3301      	adds	r3, #1
 8028714:	f100 8099 	bmi.w	802884a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028718:	429a      	cmp	r2, r3
 802871a:	f2c0 8096 	blt.w	802884a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802871e:	46c8      	mov	r8, r9
 8028720:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8028724:	9509      	str	r5, [sp, #36]	; 0x24
 8028726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028728:	2b00      	cmp	r3, #0
 802872a:	f340 80b5 	ble.w	8028898 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802872e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8028732:	1430      	asrs	r0, r6, #16
 8028734:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028738:	9308      	str	r3, [sp, #32]
 802873a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802873c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028740:	1423      	asrs	r3, r4, #16
 8028742:	f100 813f 	bmi.w	80289c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028746:	f10c 3bff 	add.w	fp, ip, #4294967295
 802874a:	455b      	cmp	r3, fp
 802874c:	f280 813a 	bge.w	80289c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028750:	2800      	cmp	r0, #0
 8028752:	f2c0 8137 	blt.w	80289c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028756:	f10e 3bff 	add.w	fp, lr, #4294967295
 802875a:	4558      	cmp	r0, fp
 802875c:	f280 8132 	bge.w	80289c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028760:	9a06      	ldr	r2, [sp, #24]
 8028762:	fb00 3302 	mla	r3, r0, r2, r3
 8028766:	0858      	lsrs	r0, r3, #1
 8028768:	07da      	lsls	r2, r3, #31
 802876a:	9a08      	ldr	r2, [sp, #32]
 802876c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028770:	bf54      	ite	pl
 8028772:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028776:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802877a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802877e:	fa5f fc8c 	uxtb.w	ip, ip
 8028782:	2a00      	cmp	r2, #0
 8028784:	f000 80cc 	beq.w	8028920 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8028788:	1c58      	adds	r0, r3, #1
 802878a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802878e:	07c0      	lsls	r0, r0, #31
 8028790:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028794:	bf54      	ite	pl
 8028796:	f00e 0e0f 	andpl.w	lr, lr, #15
 802879a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802879e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80287a2:	fa5f fe8e 	uxtb.w	lr, lr
 80287a6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80287aa:	b1b9      	cbz	r1, 80287dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80287ac:	4453      	add	r3, sl
 80287ae:	0858      	lsrs	r0, r3, #1
 80287b0:	07da      	lsls	r2, r3, #31
 80287b2:	5c38      	ldrb	r0, [r7, r0]
 80287b4:	bf54      	ite	pl
 80287b6:	f000 000f 	andpl.w	r0, r0, #15
 80287ba:	1100      	asrmi	r0, r0, #4
 80287bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80287c0:	b2c0      	uxtb	r0, r0
 80287c2:	900a      	str	r0, [sp, #40]	; 0x28
 80287c4:	1c58      	adds	r0, r3, #1
 80287c6:	0843      	lsrs	r3, r0, #1
 80287c8:	07c2      	lsls	r2, r0, #31
 80287ca:	5cfb      	ldrb	r3, [r7, r3]
 80287cc:	bf54      	ite	pl
 80287ce:	f003 030f 	andpl.w	r3, r3, #15
 80287d2:	111b      	asrmi	r3, r3, #4
 80287d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80287d8:	b2db      	uxtb	r3, r3
 80287da:	930e      	str	r3, [sp, #56]	; 0x38
 80287dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80287e0:	b289      	uxth	r1, r1
 80287e2:	fb02 f301 	mul.w	r3, r2, r1
 80287e6:	0112      	lsls	r2, r2, #4
 80287e8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80287ec:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80287f0:	1ad2      	subs	r2, r2, r3
 80287f2:	b289      	uxth	r1, r1
 80287f4:	b292      	uxth	r2, r2
 80287f6:	1a40      	subs	r0, r0, r1
 80287f8:	fa1f fe80 	uxth.w	lr, r0
 80287fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80287fe:	4342      	muls	r2, r0
 8028800:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028806:	fb01 c102 	mla	r1, r1, r2, ip
 802880a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802880c:	fb03 1302 	mla	r3, r3, r2, r1
 8028810:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028814:	2bff      	cmp	r3, #255	; 0xff
 8028816:	f040 8094 	bne.w	8028942 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802881a:	4bbf      	ldr	r3, [pc, #764]	; (8028b18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802881c:	681a      	ldr	r2, [r3, #0]
 802881e:	4bbf      	ldr	r3, [pc, #764]	; (8028b1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028820:	0951      	lsrs	r1, r2, #5
 8028822:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028826:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802882a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802882e:	430b      	orrs	r3, r1
 8028830:	4313      	orrs	r3, r2
 8028832:	f8a8 3000 	strh.w	r3, [r8]
 8028836:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028838:	f108 0802 	add.w	r8, r8, #2
 802883c:	441c      	add	r4, r3
 802883e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028840:	441e      	add	r6, r3
 8028842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028844:	3b01      	subs	r3, #1
 8028846:	9309      	str	r3, [sp, #36]	; 0x24
 8028848:	e76d      	b.n	8028726 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802884a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802884c:	3d01      	subs	r5, #1
 802884e:	f109 0902 	add.w	r9, r9, #2
 8028852:	441c      	add	r4, r3
 8028854:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028856:	441e      	add	r6, r3
 8028858:	e745      	b.n	80286e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802885a:	d021      	beq.n	80288a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802885c:	1e6b      	subs	r3, r5, #1
 802885e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028860:	fb00 4003 	mla	r0, r0, r3, r4
 8028864:	1400      	asrs	r0, r0, #16
 8028866:	f53f af5a 	bmi.w	802871e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802886a:	3901      	subs	r1, #1
 802886c:	4288      	cmp	r0, r1
 802886e:	f6bf af56 	bge.w	802871e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028872:	9920      	ldr	r1, [sp, #128]	; 0x80
 8028874:	fb01 6303 	mla	r3, r1, r3, r6
 8028878:	141b      	asrs	r3, r3, #16
 802887a:	f53f af50 	bmi.w	802871e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802887e:	3a01      	subs	r2, #1
 8028880:	4293      	cmp	r3, r2
 8028882:	f6bf af4c 	bge.w	802871e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028886:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802888a:	46a8      	mov	r8, r5
 802888c:	46ce      	mov	lr, r9
 802888e:	9308      	str	r3, [sp, #32]
 8028890:	f1b8 0f00 	cmp.w	r8, #0
 8028894:	f300 80b6 	bgt.w	8028a04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8028898:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802889c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80288a0:	9b07      	ldr	r3, [sp, #28]
 80288a2:	2b00      	cmp	r3, #0
 80288a4:	f340 817e 	ble.w	8028ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80288a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80288ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80288ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80288b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80288b6:	eef0 6a62 	vmov.f32	s13, s5
 80288ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80288be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80288c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288c6:	ee16 4a90 	vmov	r4, s13
 80288ca:	eef0 6a43 	vmov.f32	s13, s6
 80288ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288d2:	ee16 6a90 	vmov	r6, s13
 80288d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80288da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80288de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80288e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80288e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80288ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80288ee:	ee12 2a90 	vmov	r2, s5
 80288f2:	eef0 2a47 	vmov.f32	s5, s14
 80288f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80288fa:	ee13 2a10 	vmov	r2, s6
 80288fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8028900:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028902:	eeb0 3a67 	vmov.f32	s6, s15
 8028906:	fb92 f3f3 	sdiv	r3, r2, r3
 802890a:	9320      	str	r3, [sp, #128]	; 0x80
 802890c:	9b07      	ldr	r3, [sp, #28]
 802890e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028910:	3b01      	subs	r3, #1
 8028912:	9307      	str	r3, [sp, #28]
 8028914:	bf08      	it	eq
 8028916:	4615      	moveq	r5, r2
 8028918:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802891a:	bf18      	it	ne
 802891c:	461d      	movne	r5, r3
 802891e:	e6d3      	b.n	80286c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028920:	2900      	cmp	r1, #0
 8028922:	f43f af5b 	beq.w	80287dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028926:	eb0a 0003 	add.w	r0, sl, r3
 802892a:	0843      	lsrs	r3, r0, #1
 802892c:	07c0      	lsls	r0, r0, #31
 802892e:	5cfb      	ldrb	r3, [r7, r3]
 8028930:	bf54      	ite	pl
 8028932:	f003 030f 	andpl.w	r3, r3, #15
 8028936:	111b      	asrmi	r3, r3, #4
 8028938:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802893c:	b2db      	uxtb	r3, r3
 802893e:	930a      	str	r3, [sp, #40]	; 0x28
 8028940:	e74c      	b.n	80287dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028942:	2b00      	cmp	r3, #0
 8028944:	f43f af77 	beq.w	8028836 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028948:	4a73      	ldr	r2, [pc, #460]	; (8028b18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802894a:	fa1f fe83 	uxth.w	lr, r3
 802894e:	f8b8 c000 	ldrh.w	ip, [r8]
 8028952:	43db      	mvns	r3, r3
 8028954:	6810      	ldr	r0, [r2, #0]
 8028956:	ea4f 212c 	mov.w	r1, ip, asr #8
 802895a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802895e:	b2db      	uxtb	r3, r3
 8028960:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028964:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028968:	fb12 f20e 	smulbb	r2, r2, lr
 802896c:	b2c0      	uxtb	r0, r0
 802896e:	fb1b fb0e 	smulbb	fp, fp, lr
 8028972:	fb01 2103 	mla	r1, r1, r3, r2
 8028976:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802897a:	fb10 fe0e 	smulbb	lr, r0, lr
 802897e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028982:	b289      	uxth	r1, r1
 8028984:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028988:	fa5f fc8c 	uxtb.w	ip, ip
 802898c:	fb02 b203 	mla	r2, r2, r3, fp
 8028990:	1c48      	adds	r0, r1, #1
 8028992:	fb0c e303 	mla	r3, ip, r3, lr
 8028996:	b292      	uxth	r2, r2
 8028998:	b29b      	uxth	r3, r3
 802899a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802899e:	f102 0b01 	add.w	fp, r2, #1
 80289a2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80289a6:	1c59      	adds	r1, r3, #1
 80289a8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80289ac:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80289b0:	0952      	lsrs	r2, r2, #5
 80289b2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80289b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80289ba:	4301      	orrs	r1, r0
 80289bc:	4311      	orrs	r1, r2
 80289be:	f8a8 1000 	strh.w	r1, [r8]
 80289c2:	e738      	b.n	8028836 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80289c4:	f113 0b01 	adds.w	fp, r3, #1
 80289c8:	f53f af35 	bmi.w	8028836 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80289cc:	45dc      	cmp	ip, fp
 80289ce:	f6ff af32 	blt.w	8028836 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80289d2:	f110 0b01 	adds.w	fp, r0, #1
 80289d6:	f53f af2e 	bmi.w	8028836 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80289da:	45de      	cmp	lr, fp
 80289dc:	f6ff af2b 	blt.w	8028836 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80289e0:	9302      	str	r3, [sp, #8]
 80289e2:	fa0f f38e 	sxth.w	r3, lr
 80289e6:	9a08      	ldr	r2, [sp, #32]
 80289e8:	9301      	str	r3, [sp, #4]
 80289ea:	fa0f f38c 	sxth.w	r3, ip
 80289ee:	9105      	str	r1, [sp, #20]
 80289f0:	4641      	mov	r1, r8
 80289f2:	9300      	str	r3, [sp, #0]
 80289f4:	4653      	mov	r3, sl
 80289f6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80289fa:	463a      	mov	r2, r7
 80289fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80289fe:	f7ff fd73 	bl	80284e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028a02:	e718      	b.n	8028836 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028a04:	1422      	asrs	r2, r4, #16
 8028a06:	9906      	ldr	r1, [sp, #24]
 8028a08:	1433      	asrs	r3, r6, #16
 8028a0a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028a0e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028a12:	fb01 2303 	mla	r3, r1, r3, r2
 8028a16:	085a      	lsrs	r2, r3, #1
 8028a18:	07d9      	lsls	r1, r3, #31
 8028a1a:	5cba      	ldrb	r2, [r7, r2]
 8028a1c:	bf54      	ite	pl
 8028a1e:	f002 020f 	andpl.w	r2, r2, #15
 8028a22:	1112      	asrmi	r2, r2, #4
 8028a24:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028a28:	b2d2      	uxtb	r2, r2
 8028a2a:	2800      	cmp	r0, #0
 8028a2c:	d063      	beq.n	8028af6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8028a2e:	f103 0a01 	add.w	sl, r3, #1
 8028a32:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8028a36:	f01a 0f01 	tst.w	sl, #1
 8028a3a:	5c79      	ldrb	r1, [r7, r1]
 8028a3c:	bf0c      	ite	eq
 8028a3e:	f001 010f 	andeq.w	r1, r1, #15
 8028a42:	1109      	asrne	r1, r1, #4
 8028a44:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028a48:	b2c9      	uxtb	r1, r1
 8028a4a:	910f      	str	r1, [sp, #60]	; 0x3c
 8028a4c:	f1bc 0f00 	cmp.w	ip, #0
 8028a50:	d01a      	beq.n	8028a88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028a52:	9908      	ldr	r1, [sp, #32]
 8028a54:	440b      	add	r3, r1
 8028a56:	0859      	lsrs	r1, r3, #1
 8028a58:	f013 0f01 	tst.w	r3, #1
 8028a5c:	f103 0301 	add.w	r3, r3, #1
 8028a60:	5c79      	ldrb	r1, [r7, r1]
 8028a62:	bf0c      	ite	eq
 8028a64:	f001 010f 	andeq.w	r1, r1, #15
 8028a68:	1109      	asrne	r1, r1, #4
 8028a6a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028a6e:	b2c9      	uxtb	r1, r1
 8028a70:	910b      	str	r1, [sp, #44]	; 0x2c
 8028a72:	0859      	lsrs	r1, r3, #1
 8028a74:	07db      	lsls	r3, r3, #31
 8028a76:	5c79      	ldrb	r1, [r7, r1]
 8028a78:	bf54      	ite	pl
 8028a7a:	f001 010f 	andpl.w	r1, r1, #15
 8028a7e:	1109      	asrmi	r1, r1, #4
 8028a80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028a84:	b2c9      	uxtb	r1, r1
 8028a86:	9110      	str	r1, [sp, #64]	; 0x40
 8028a88:	b280      	uxth	r0, r0
 8028a8a:	fa1f fc8c 	uxth.w	ip, ip
 8028a8e:	fb00 f30c 	mul.w	r3, r0, ip
 8028a92:	0100      	lsls	r0, r0, #4
 8028a94:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028a98:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8028a9c:	1ac0      	subs	r0, r0, r3
 8028a9e:	fa1f fc8c 	uxth.w	ip, ip
 8028aa2:	b280      	uxth	r0, r0
 8028aa4:	eba1 010c 	sub.w	r1, r1, ip
 8028aa8:	fa1f fa81 	uxth.w	sl, r1
 8028aac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028aae:	4348      	muls	r0, r1
 8028ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028ab2:	fb02 020a 	mla	r2, r2, sl, r0
 8028ab6:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028aba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028abc:	fb03 c302 	mla	r3, r3, r2, ip
 8028ac0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028ac4:	2bff      	cmp	r3, #255	; 0xff
 8028ac6:	d12b      	bne.n	8028b20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8028ac8:	4b13      	ldr	r3, [pc, #76]	; (8028b18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028aca:	681a      	ldr	r2, [r3, #0]
 8028acc:	4b13      	ldr	r3, [pc, #76]	; (8028b1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028ace:	0951      	lsrs	r1, r2, #5
 8028ad0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028ad4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028ad8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028adc:	430b      	orrs	r3, r1
 8028ade:	4313      	orrs	r3, r2
 8028ae0:	f8ae 3000 	strh.w	r3, [lr]
 8028ae4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028ae6:	f10e 0e02 	add.w	lr, lr, #2
 8028aea:	f108 38ff 	add.w	r8, r8, #4294967295
 8028aee:	441c      	add	r4, r3
 8028af0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028af2:	441e      	add	r6, r3
 8028af4:	e6cc      	b.n	8028890 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028af6:	f1bc 0f00 	cmp.w	ip, #0
 8028afa:	d0c5      	beq.n	8028a88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028afc:	9908      	ldr	r1, [sp, #32]
 8028afe:	440b      	add	r3, r1
 8028b00:	0859      	lsrs	r1, r3, #1
 8028b02:	07db      	lsls	r3, r3, #31
 8028b04:	5c79      	ldrb	r1, [r7, r1]
 8028b06:	bf54      	ite	pl
 8028b08:	f001 010f 	andpl.w	r1, r1, #15
 8028b0c:	1109      	asrmi	r1, r1, #4
 8028b0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028b12:	b2c9      	uxtb	r1, r1
 8028b14:	910b      	str	r1, [sp, #44]	; 0x2c
 8028b16:	e7b7      	b.n	8028a88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028b18:	20015040 	.word	0x20015040
 8028b1c:	fffff800 	.word	0xfffff800
 8028b20:	2b00      	cmp	r3, #0
 8028b22:	d0df      	beq.n	8028ae4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028b24:	4a21      	ldr	r2, [pc, #132]	; (8028bac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8028b26:	fa1f fa83 	uxth.w	sl, r3
 8028b2a:	f8be c000 	ldrh.w	ip, [lr]
 8028b2e:	43db      	mvns	r3, r3
 8028b30:	6810      	ldr	r0, [r2, #0]
 8028b32:	ea4f 212c 	mov.w	r1, ip, asr #8
 8028b36:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8028b3a:	b2db      	uxtb	r3, r3
 8028b3c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028b40:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028b44:	fb12 f20a 	smulbb	r2, r2, sl
 8028b48:	b2c0      	uxtb	r0, r0
 8028b4a:	fb1b fb0a 	smulbb	fp, fp, sl
 8028b4e:	fb01 2103 	mla	r1, r1, r3, r2
 8028b52:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028b56:	fb10 f00a 	smulbb	r0, r0, sl
 8028b5a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028b5e:	b289      	uxth	r1, r1
 8028b60:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028b64:	fa5f fc8c 	uxtb.w	ip, ip
 8028b68:	fb02 b203 	mla	r2, r2, r3, fp
 8028b6c:	fb0c 0003 	mla	r0, ip, r3, r0
 8028b70:	1c4b      	adds	r3, r1, #1
 8028b72:	b292      	uxth	r2, r2
 8028b74:	b280      	uxth	r0, r0
 8028b76:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028b7a:	f100 0b01 	add.w	fp, r0, #1
 8028b7e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028b82:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8028b86:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8028b8a:	ea4b 0101 	orr.w	r1, fp, r1
 8028b8e:	f102 0b01 	add.w	fp, r2, #1
 8028b92:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8028b96:	0952      	lsrs	r2, r2, #5
 8028b98:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028b9c:	4311      	orrs	r1, r2
 8028b9e:	f8ae 1000 	strh.w	r1, [lr]
 8028ba2:	e79f      	b.n	8028ae4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028ba4:	b013      	add	sp, #76	; 0x4c
 8028ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028baa:	bf00      	nop
 8028bac:	20015040 	.word	0x20015040

08028bb0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8028bb0:	b570      	push	{r4, r5, r6, lr}
 8028bb2:	1208      	asrs	r0, r1, #8
 8028bb4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8028bb8:	b29e      	uxth	r6, r3
 8028bba:	1213      	asrs	r3, r2, #8
 8028bbc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028bc0:	10cc      	asrs	r4, r1, #3
 8028bc2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8028bc6:	00c9      	lsls	r1, r1, #3
 8028bc8:	fb10 f006 	smulbb	r0, r0, r6
 8028bcc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8028bd0:	fb13 f305 	smulbb	r3, r3, r5
 8028bd4:	fb14 f406 	smulbb	r4, r4, r6
 8028bd8:	4418      	add	r0, r3
 8028bda:	10d3      	asrs	r3, r2, #3
 8028bdc:	00d2      	lsls	r2, r2, #3
 8028bde:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028be2:	b280      	uxth	r0, r0
 8028be4:	b2d2      	uxtb	r2, r2
 8028be6:	fb13 f305 	smulbb	r3, r3, r5
 8028bea:	fb12 f205 	smulbb	r2, r2, r5
 8028bee:	441c      	add	r4, r3
 8028bf0:	b2cb      	uxtb	r3, r1
 8028bf2:	fb13 f306 	smulbb	r3, r3, r6
 8028bf6:	b2a4      	uxth	r4, r4
 8028bf8:	4413      	add	r3, r2
 8028bfa:	1c42      	adds	r2, r0, #1
 8028bfc:	b29b      	uxth	r3, r3
 8028bfe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028c02:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 8028c06:	1c58      	adds	r0, r3, #1
 8028c08:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028c0c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028c10:	4310      	orrs	r0, r2
 8028c12:	1c62      	adds	r2, r4, #1
 8028c14:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028c18:	0964      	lsrs	r4, r4, #5
 8028c1a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8028c1e:	4320      	orrs	r0, r4
 8028c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08028c24 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8028c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c28:	b08f      	sub	sp, #60	; 0x3c
 8028c2a:	461c      	mov	r4, r3
 8028c2c:	460d      	mov	r5, r1
 8028c2e:	4616      	mov	r6, r2
 8028c30:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8028c34:	9004      	str	r0, [sp, #16]
 8028c36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028c38:	2f00      	cmp	r7, #0
 8028c3a:	f000 80f6 	beq.w	8028e2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8028c3e:	6820      	ldr	r0, [r4, #0]
 8028c40:	aa0a      	add	r2, sp, #40	; 0x28
 8028c42:	6861      	ldr	r1, [r4, #4]
 8028c44:	f04f 0802 	mov.w	r8, #2
 8028c48:	3604      	adds	r6, #4
 8028c4a:	c203      	stmia	r2!, {r0, r1}
 8028c4c:	6818      	ldr	r0, [r3, #0]
 8028c4e:	aa0c      	add	r2, sp, #48	; 0x30
 8028c50:	6859      	ldr	r1, [r3, #4]
 8028c52:	c203      	stmia	r2!, {r0, r1}
 8028c54:	a80a      	add	r0, sp, #40	; 0x28
 8028c56:	f7f0 f9e5 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028c5a:	4621      	mov	r1, r4
 8028c5c:	a80c      	add	r0, sp, #48	; 0x30
 8028c5e:	f7f0 fa09 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028c62:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8028c66:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8028c6a:	f002 0301 	and.w	r3, r2, #1
 8028c6e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8028c72:	9306      	str	r3, [sp, #24]
 8028c74:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028c78:	f003 0101 	and.w	r1, r3, #1
 8028c7c:	9105      	str	r1, [sp, #20]
 8028c7e:	9805      	ldr	r0, [sp, #20]
 8028c80:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8028c84:	4403      	add	r3, r0
 8028c86:	fb01 2303 	mla	r3, r1, r3, r2
 8028c8a:	fb93 f3f8 	sdiv	r3, r3, r8
 8028c8e:	441d      	add	r5, r3
 8028c90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8028c94:	441a      	add	r2, r3
 8028c96:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8028c9a:	4419      	add	r1, r3
 8028c9c:	4b64      	ldr	r3, [pc, #400]	; (8028e30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8028c9e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8028ca2:	6818      	ldr	r0, [r3, #0]
 8028ca4:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8028ca8:	6803      	ldr	r3, [r0, #0]
 8028caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028cac:	4798      	blx	r3
 8028cae:	4a61      	ldr	r2, [pc, #388]	; (8028e34 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8028cb0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8028cb4:	2fff      	cmp	r7, #255	; 0xff
 8028cb6:	8813      	ldrh	r3, [r2, #0]
 8028cb8:	4611      	mov	r1, r2
 8028cba:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 8028cbe:	fb03 fb0b 	mul.w	fp, r3, fp
 8028cc2:	fb03 a404 	mla	r4, r3, r4, sl
 8028cc6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028cca:	d06b      	beq.n	8028da4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8028ccc:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8028cd0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8028cd4:	9303      	str	r3, [sp, #12]
 8028cd6:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8028cda:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8028cde:	9b07      	ldr	r3, [sp, #28]
 8028ce0:	42a3      	cmp	r3, r4
 8028ce2:	f240 809d 	bls.w	8028e20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8028ce6:	9b06      	ldr	r3, [sp, #24]
 8028ce8:	2b00      	cmp	r3, #0
 8028cea:	d039      	beq.n	8028d60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8028cec:	782b      	ldrb	r3, [r5, #0]
 8028cee:	f105 0801 	add.w	r8, r5, #1
 8028cf2:	f109 3bff 	add.w	fp, r9, #4294967295
 8028cf6:	8822      	ldrh	r2, [r4, #0]
 8028cf8:	f003 030f 	and.w	r3, r3, #15
 8028cfc:	9804      	ldr	r0, [sp, #16]
 8028cfe:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028d02:	9b03      	ldr	r3, [sp, #12]
 8028d04:	9300      	str	r3, [sp, #0]
 8028d06:	463b      	mov	r3, r7
 8028d08:	f7ff ff52 	bl	8028bb0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028d0c:	f824 0b02 	strh.w	r0, [r4], #2
 8028d10:	f1bb 0f01 	cmp.w	fp, #1
 8028d14:	46a2      	mov	sl, r4
 8028d16:	f104 0404 	add.w	r4, r4, #4
 8028d1a:	dd24      	ble.n	8028d66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8028d1c:	f898 3000 	ldrb.w	r3, [r8]
 8028d20:	f1ab 0b02 	sub.w	fp, fp, #2
 8028d24:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8028d28:	091b      	lsrs	r3, r3, #4
 8028d2a:	9804      	ldr	r0, [sp, #16]
 8028d2c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028d30:	9b03      	ldr	r3, [sp, #12]
 8028d32:	9300      	str	r3, [sp, #0]
 8028d34:	463b      	mov	r3, r7
 8028d36:	f7ff ff3b 	bl	8028bb0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028d3a:	f824 0c04 	strh.w	r0, [r4, #-4]
 8028d3e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028d42:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8028d46:	f003 030f 	and.w	r3, r3, #15
 8028d4a:	9804      	ldr	r0, [sp, #16]
 8028d4c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028d50:	9b03      	ldr	r3, [sp, #12]
 8028d52:	9300      	str	r3, [sp, #0]
 8028d54:	463b      	mov	r3, r7
 8028d56:	f7ff ff2b 	bl	8028bb0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028d5a:	f824 0c02 	strh.w	r0, [r4, #-2]
 8028d5e:	e7d7      	b.n	8028d10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028d60:	46a8      	mov	r8, r5
 8028d62:	46cb      	mov	fp, r9
 8028d64:	e7d4      	b.n	8028d10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028d66:	d10e      	bne.n	8028d86 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8028d68:	f898 3000 	ldrb.w	r3, [r8]
 8028d6c:	f8ba 2000 	ldrh.w	r2, [sl]
 8028d70:	091b      	lsrs	r3, r3, #4
 8028d72:	9804      	ldr	r0, [sp, #16]
 8028d74:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028d78:	9b03      	ldr	r3, [sp, #12]
 8028d7a:	9300      	str	r3, [sp, #0]
 8028d7c:	463b      	mov	r3, r7
 8028d7e:	f7ff ff17 	bl	8028bb0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028d82:	f82a 0b02 	strh.w	r0, [sl], #2
 8028d86:	9b08      	ldr	r3, [sp, #32]
 8028d88:	9a05      	ldr	r2, [sp, #20]
 8028d8a:	881c      	ldrh	r4, [r3, #0]
 8028d8c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028d90:	eba4 0409 	sub.w	r4, r4, r9
 8028d94:	4413      	add	r3, r2
 8028d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028d98:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8028d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8028da0:	441d      	add	r5, r3
 8028da2:	e79c      	b.n	8028cde <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8028da4:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8028da8:	45a3      	cmp	fp, r4
 8028daa:	d939      	bls.n	8028e20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8028dac:	9b06      	ldr	r3, [sp, #24]
 8028dae:	b1fb      	cbz	r3, 8028df0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8028db0:	782b      	ldrb	r3, [r5, #0]
 8028db2:	1c6a      	adds	r2, r5, #1
 8028db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8028db8:	3402      	adds	r4, #2
 8028dba:	f003 030f 	and.w	r3, r3, #15
 8028dbe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028dc2:	f824 3c02 	strh.w	r3, [r4, #-2]
 8028dc6:	2801      	cmp	r0, #1
 8028dc8:	4623      	mov	r3, r4
 8028dca:	f104 0404 	add.w	r4, r4, #4
 8028dce:	dd12      	ble.n	8028df6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8028dd0:	7813      	ldrb	r3, [r2, #0]
 8028dd2:	3802      	subs	r0, #2
 8028dd4:	091b      	lsrs	r3, r3, #4
 8028dd6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028dda:	f824 3c04 	strh.w	r3, [r4, #-4]
 8028dde:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028de2:	f003 030f 	and.w	r3, r3, #15
 8028de6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028dea:	f824 3c02 	strh.w	r3, [r4, #-2]
 8028dee:	e7ea      	b.n	8028dc6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8028df0:	462a      	mov	r2, r5
 8028df2:	4648      	mov	r0, r9
 8028df4:	e7e7      	b.n	8028dc6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8028df6:	d106      	bne.n	8028e06 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8028df8:	7812      	ldrb	r2, [r2, #0]
 8028dfa:	3302      	adds	r3, #2
 8028dfc:	0912      	lsrs	r2, r2, #4
 8028dfe:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8028e02:	f823 2c02 	strh.w	r2, [r3, #-2]
 8028e06:	880c      	ldrh	r4, [r1, #0]
 8028e08:	9a05      	ldr	r2, [sp, #20]
 8028e0a:	eba4 0409 	sub.w	r4, r4, r9
 8028e0e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8028e12:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028e16:	4413      	add	r3, r2
 8028e18:	fb93 f3f8 	sdiv	r3, r3, r8
 8028e1c:	441d      	add	r5, r3
 8028e1e:	e7c3      	b.n	8028da8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8028e20:	4b03      	ldr	r3, [pc, #12]	; (8028e30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8028e22:	6818      	ldr	r0, [r3, #0]
 8028e24:	6803      	ldr	r3, [r0, #0]
 8028e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e28:	4798      	blx	r3
 8028e2a:	b00f      	add	sp, #60	; 0x3c
 8028e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e30:	20015038 	.word	0x20015038
 8028e34:	20015032 	.word	0x20015032

08028e38 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8028e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e3a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8028e3e:	0a0f      	lsrs	r7, r1, #8
 8028e40:	2dff      	cmp	r5, #255	; 0xff
 8028e42:	d10c      	bne.n	8028e5e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8028e44:	2bff      	cmp	r3, #255	; 0xff
 8028e46:	d10a      	bne.n	8028e5e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8028e48:	0948      	lsrs	r0, r1, #5
 8028e4a:	4b25      	ldr	r3, [pc, #148]	; (8028ee0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8028e4c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028e50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028e54:	403b      	ands	r3, r7
 8028e56:	4318      	orrs	r0, r3
 8028e58:	4308      	orrs	r0, r1
 8028e5a:	b280      	uxth	r0, r0
 8028e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028e5e:	fb15 f503 	smulbb	r5, r5, r3
 8028e62:	1214      	asrs	r4, r2, #8
 8028e64:	10d6      	asrs	r6, r2, #3
 8028e66:	b2ab      	uxth	r3, r5
 8028e68:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028e6c:	00d0      	lsls	r0, r2, #3
 8028e6e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8028e72:	1c5d      	adds	r5, r3, #1
 8028e74:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8028e78:	b2c0      	uxtb	r0, r0
 8028e7a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028e7e:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8028e82:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8028e86:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8028e8a:	fa1f fc85 	uxth.w	ip, r5
 8028e8e:	43ed      	mvns	r5, r5
 8028e90:	fb12 f20c 	smulbb	r2, r2, ip
 8028e94:	b2eb      	uxtb	r3, r5
 8028e96:	b2fd      	uxtb	r5, r7
 8028e98:	fb04 2403 	mla	r4, r4, r3, r2
 8028e9c:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8028ea0:	fb15 f50c 	smulbb	r5, r5, ip
 8028ea4:	b2c8      	uxtb	r0, r1
 8028ea6:	b2a4      	uxth	r4, r4
 8028ea8:	fb10 f00c 	smulbb	r0, r0, ip
 8028eac:	fb06 5503 	mla	r5, r6, r3, r5
 8028eb0:	fb02 0003 	mla	r0, r2, r3, r0
 8028eb4:	b2ad      	uxth	r5, r5
 8028eb6:	b283      	uxth	r3, r0
 8028eb8:	1c60      	adds	r0, r4, #1
 8028eba:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028ebe:	1c58      	adds	r0, r3, #1
 8028ec0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028ec4:	1c6b      	adds	r3, r5, #1
 8028ec6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028eca:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028ece:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028ed2:	096d      	lsrs	r5, r5, #5
 8028ed4:	4320      	orrs	r0, r4
 8028ed6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028eda:	4328      	orrs	r0, r5
 8028edc:	e7be      	b.n	8028e5c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 8028ede:	bf00      	nop
 8028ee0:	00fff800 	.word	0x00fff800

08028ee4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8028ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ee8:	461c      	mov	r4, r3
 8028eea:	b08d      	sub	sp, #52	; 0x34
 8028eec:	460d      	mov	r5, r1
 8028eee:	4616      	mov	r6, r2
 8028ef0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028ef2:	4680      	mov	r8, r0
 8028ef4:	6861      	ldr	r1, [r4, #4]
 8028ef6:	aa08      	add	r2, sp, #32
 8028ef8:	6820      	ldr	r0, [r4, #0]
 8028efa:	f04f 0a02 	mov.w	sl, #2
 8028efe:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8028f02:	3604      	adds	r6, #4
 8028f04:	c203      	stmia	r2!, {r0, r1}
 8028f06:	6818      	ldr	r0, [r3, #0]
 8028f08:	aa0a      	add	r2, sp, #40	; 0x28
 8028f0a:	6859      	ldr	r1, [r3, #4]
 8028f0c:	c203      	stmia	r2!, {r0, r1}
 8028f0e:	a808      	add	r0, sp, #32
 8028f10:	f7f0 f888 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028f14:	4621      	mov	r1, r4
 8028f16:	a80a      	add	r0, sp, #40	; 0x28
 8028f18:	f7f0 f8ac 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028f1c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8028f20:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8028f24:	f002 0301 	and.w	r3, r2, #1
 8028f28:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8028f2c:	9303      	str	r3, [sp, #12]
 8028f2e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8028f32:	f003 0101 	and.w	r1, r3, #1
 8028f36:	9102      	str	r1, [sp, #8]
 8028f38:	9802      	ldr	r0, [sp, #8]
 8028f3a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8028f3e:	4403      	add	r3, r0
 8028f40:	fb01 2303 	mla	r3, r1, r3, r2
 8028f44:	fb93 f3fa 	sdiv	r3, r3, sl
 8028f48:	441d      	add	r5, r3
 8028f4a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8028f4e:	441a      	add	r2, r3
 8028f50:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8028f54:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8028f58:	4419      	add	r1, r3
 8028f5a:	4a3e      	ldr	r2, [pc, #248]	; (8029054 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8028f5c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8028f60:	6810      	ldr	r0, [r2, #0]
 8028f62:	9205      	str	r2, [sp, #20]
 8028f64:	6803      	ldr	r3, [r0, #0]
 8028f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028f68:	4798      	blx	r3
 8028f6a:	4b3b      	ldr	r3, [pc, #236]	; (8029058 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8028f6c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8028f70:	8819      	ldrh	r1, [r3, #0]
 8028f72:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8028f76:	434f      	muls	r7, r1
 8028f78:	fb01 c404 	mla	r4, r1, r4, ip
 8028f7c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028f80:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8028f84:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8028f88:	9204      	str	r2, [sp, #16]
 8028f8a:	9b04      	ldr	r3, [sp, #16]
 8028f8c:	429c      	cmp	r4, r3
 8028f8e:	d258      	bcs.n	8029042 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8028f90:	9b03      	ldr	r3, [sp, #12]
 8028f92:	2b00      	cmp	r3, #0
 8028f94:	d034      	beq.n	8029000 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8028f96:	782b      	ldrb	r3, [r5, #0]
 8028f98:	1c6f      	adds	r7, r5, #1
 8028f9a:	f003 030f 	and.w	r3, r3, #15
 8028f9e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028fa2:	0e0b      	lsrs	r3, r1, #24
 8028fa4:	d006      	beq.n	8028fb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8028fa6:	8822      	ldrh	r2, [r4, #0]
 8028fa8:	4640      	mov	r0, r8
 8028faa:	9300      	str	r3, [sp, #0]
 8028fac:	464b      	mov	r3, r9
 8028fae:	f7ff ff43 	bl	8028e38 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028fb2:	8020      	strh	r0, [r4, #0]
 8028fb4:	3402      	adds	r4, #2
 8028fb6:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028fba:	f1ba 0f01 	cmp.w	sl, #1
 8028fbe:	dd22      	ble.n	8029006 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8028fc0:	783b      	ldrb	r3, [r7, #0]
 8028fc2:	091b      	lsrs	r3, r3, #4
 8028fc4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028fc8:	0e0b      	lsrs	r3, r1, #24
 8028fca:	d006      	beq.n	8028fda <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8028fcc:	8822      	ldrh	r2, [r4, #0]
 8028fce:	4640      	mov	r0, r8
 8028fd0:	9300      	str	r3, [sp, #0]
 8028fd2:	464b      	mov	r3, r9
 8028fd4:	f7ff ff30 	bl	8028e38 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028fd8:	8020      	strh	r0, [r4, #0]
 8028fda:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028fde:	f003 030f 	and.w	r3, r3, #15
 8028fe2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028fe6:	0e0b      	lsrs	r3, r1, #24
 8028fe8:	d006      	beq.n	8028ff8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8028fea:	8862      	ldrh	r2, [r4, #2]
 8028fec:	4640      	mov	r0, r8
 8028fee:	9300      	str	r3, [sp, #0]
 8028ff0:	464b      	mov	r3, r9
 8028ff2:	f7ff ff21 	bl	8028e38 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028ff6:	8060      	strh	r0, [r4, #2]
 8028ff8:	3404      	adds	r4, #4
 8028ffa:	f1aa 0a02 	sub.w	sl, sl, #2
 8028ffe:	e7dc      	b.n	8028fba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8029000:	462f      	mov	r7, r5
 8029002:	46da      	mov	sl, fp
 8029004:	e7d9      	b.n	8028fba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8029006:	d10d      	bne.n	8029024 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8029008:	783b      	ldrb	r3, [r7, #0]
 802900a:	091b      	lsrs	r3, r3, #4
 802900c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029010:	0e0b      	lsrs	r3, r1, #24
 8029012:	d006      	beq.n	8029022 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8029014:	8822      	ldrh	r2, [r4, #0]
 8029016:	4640      	mov	r0, r8
 8029018:	9300      	str	r3, [sp, #0]
 802901a:	464b      	mov	r3, r9
 802901c:	f7ff ff0c 	bl	8028e38 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029020:	8020      	strh	r0, [r4, #0]
 8029022:	3402      	adds	r4, #2
 8029024:	9b06      	ldr	r3, [sp, #24]
 8029026:	9a02      	ldr	r2, [sp, #8]
 8029028:	881b      	ldrh	r3, [r3, #0]
 802902a:	eba3 030b 	sub.w	r3, r3, fp
 802902e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8029032:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8029036:	4413      	add	r3, r2
 8029038:	9a07      	ldr	r2, [sp, #28]
 802903a:	fb93 f3f2 	sdiv	r3, r3, r2
 802903e:	441d      	add	r5, r3
 8029040:	e7a3      	b.n	8028f8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8029042:	9b05      	ldr	r3, [sp, #20]
 8029044:	6818      	ldr	r0, [r3, #0]
 8029046:	6803      	ldr	r3, [r0, #0]
 8029048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802904a:	4798      	blx	r3
 802904c:	b00d      	add	sp, #52	; 0x34
 802904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029052:	bf00      	nop
 8029054:	20015038 	.word	0x20015038
 8029058:	20015032 	.word	0x20015032

0802905c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802905c:	b570      	push	{r4, r5, r6, lr}
 802905e:	1214      	asrs	r4, r2, #8
 8029060:	788d      	ldrb	r5, [r1, #2]
 8029062:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8029066:	10d0      	asrs	r0, r2, #3
 8029068:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802906c:	00d2      	lsls	r2, r2, #3
 802906e:	fb15 f503 	smulbb	r5, r5, r3
 8029072:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029076:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802907a:	b2d2      	uxtb	r2, r2
 802907c:	fb04 5506 	mla	r5, r4, r6, r5
 8029080:	784c      	ldrb	r4, [r1, #1]
 8029082:	7809      	ldrb	r1, [r1, #0]
 8029084:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8029088:	fb14 f403 	smulbb	r4, r4, r3
 802908c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029090:	fb11 f303 	smulbb	r3, r1, r3
 8029094:	b2ad      	uxth	r5, r5
 8029096:	fb00 4406 	mla	r4, r0, r6, r4
 802909a:	fb02 3306 	mla	r3, r2, r6, r3
 802909e:	1c68      	adds	r0, r5, #1
 80290a0:	b2a4      	uxth	r4, r4
 80290a2:	b29b      	uxth	r3, r3
 80290a4:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 80290a8:	1c62      	adds	r2, r4, #1
 80290aa:	1c58      	adds	r0, r3, #1
 80290ac:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80290b0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80290b4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80290b8:	0964      	lsrs	r4, r4, #5
 80290ba:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80290be:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80290c2:	4328      	orrs	r0, r5
 80290c4:	4320      	orrs	r0, r4
 80290c6:	bd70      	pop	{r4, r5, r6, pc}

080290c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80290c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290cc:	b08f      	sub	sp, #60	; 0x3c
 80290ce:	461c      	mov	r4, r3
 80290d0:	4682      	mov	sl, r0
 80290d2:	460e      	mov	r6, r1
 80290d4:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 80290d8:	4615      	mov	r5, r2
 80290da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80290dc:	2f00      	cmp	r7, #0
 80290de:	f000 8141 	beq.w	8029364 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 80290e2:	6820      	ldr	r0, [r4, #0]
 80290e4:	aa0a      	add	r2, sp, #40	; 0x28
 80290e6:	6861      	ldr	r1, [r4, #4]
 80290e8:	f04f 0802 	mov.w	r8, #2
 80290ec:	3504      	adds	r5, #4
 80290ee:	c203      	stmia	r2!, {r0, r1}
 80290f0:	6818      	ldr	r0, [r3, #0]
 80290f2:	aa0c      	add	r2, sp, #48	; 0x30
 80290f4:	6859      	ldr	r1, [r3, #4]
 80290f6:	c203      	stmia	r2!, {r0, r1}
 80290f8:	a80a      	add	r0, sp, #40	; 0x28
 80290fa:	f7ef ff93 	bl	8019024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80290fe:	4621      	mov	r1, r4
 8029100:	a80c      	add	r0, sp, #48	; 0x30
 8029102:	f7ef ffb7 	bl	8019074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029106:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802910a:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802910e:	f002 0301 	and.w	r3, r2, #1
 8029112:	9306      	str	r3, [sp, #24]
 8029114:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8029118:	f003 0101 	and.w	r1, r3, #1
 802911c:	9105      	str	r1, [sp, #20]
 802911e:	9805      	ldr	r0, [sp, #20]
 8029120:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8029124:	4403      	add	r3, r0
 8029126:	fb01 2303 	mla	r3, r1, r3, r2
 802912a:	fb93 f3f8 	sdiv	r3, r3, r8
 802912e:	441e      	add	r6, r3
 8029130:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8029134:	441a      	add	r2, r3
 8029136:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802913a:	4419      	add	r1, r3
 802913c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8029140:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8029144:	9303      	str	r3, [sp, #12]
 8029146:	4b89      	ldr	r3, [pc, #548]	; (802936c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8029148:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802914c:	6818      	ldr	r0, [r3, #0]
 802914e:	6803      	ldr	r3, [r0, #0]
 8029150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029152:	4798      	blx	r3
 8029154:	4a86      	ldr	r2, [pc, #536]	; (8029370 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8029156:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802915a:	2fff      	cmp	r7, #255	; 0xff
 802915c:	8813      	ldrh	r3, [r2, #0]
 802915e:	4694      	mov	ip, r2
 8029160:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8029164:	fb03 9404 	mla	r4, r3, r4, r9
 8029168:	fb03 f30b 	mul.w	r3, r3, fp
 802916c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029170:	d071      	beq.n	8029256 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8029172:	43f9      	mvns	r1, r7
 8029174:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8029178:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802917c:	b2c9      	uxtb	r1, r1
 802917e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8029182:	9104      	str	r1, [sp, #16]
 8029184:	9b07      	ldr	r3, [sp, #28]
 8029186:	42a3      	cmp	r3, r4
 8029188:	f240 80e7 	bls.w	802935a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802918c:	9b06      	ldr	r3, [sp, #24]
 802918e:	2b00      	cmp	r3, #0
 8029190:	d03d      	beq.n	802920e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8029192:	7831      	ldrb	r1, [r6, #0]
 8029194:	4650      	mov	r0, sl
 8029196:	9b04      	ldr	r3, [sp, #16]
 8029198:	f106 0801 	add.w	r8, r6, #1
 802919c:	f001 010f 	and.w	r1, r1, #15
 80291a0:	8822      	ldrh	r2, [r4, #0]
 80291a2:	9300      	str	r3, [sp, #0]
 80291a4:	463b      	mov	r3, r7
 80291a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80291aa:	4429      	add	r1, r5
 80291ac:	f7ff ff56 	bl	802905c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80291b0:	9b03      	ldr	r3, [sp, #12]
 80291b2:	f824 0b02 	strh.w	r0, [r4], #2
 80291b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80291ba:	f1bb 0f01 	cmp.w	fp, #1
 80291be:	46a1      	mov	r9, r4
 80291c0:	f104 0404 	add.w	r4, r4, #4
 80291c4:	dd27      	ble.n	8029216 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 80291c6:	f898 1000 	ldrb.w	r1, [r8]
 80291ca:	4650      	mov	r0, sl
 80291cc:	9b04      	ldr	r3, [sp, #16]
 80291ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80291d2:	0909      	lsrs	r1, r1, #4
 80291d4:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80291d8:	9300      	str	r3, [sp, #0]
 80291da:	463b      	mov	r3, r7
 80291dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80291e0:	4429      	add	r1, r5
 80291e2:	f7ff ff3b 	bl	802905c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80291e6:	f824 0c04 	strh.w	r0, [r4, #-4]
 80291ea:	f818 1b01 	ldrb.w	r1, [r8], #1
 80291ee:	4650      	mov	r0, sl
 80291f0:	9b04      	ldr	r3, [sp, #16]
 80291f2:	f001 010f 	and.w	r1, r1, #15
 80291f6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80291fa:	9300      	str	r3, [sp, #0]
 80291fc:	463b      	mov	r3, r7
 80291fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029202:	4429      	add	r1, r5
 8029204:	f7ff ff2a 	bl	802905c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029208:	f824 0c02 	strh.w	r0, [r4, #-2]
 802920c:	e7d5      	b.n	80291ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802920e:	46b0      	mov	r8, r6
 8029210:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8029214:	e7d1      	b.n	80291ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8029216:	d10f      	bne.n	8029238 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8029218:	f898 1000 	ldrb.w	r1, [r8]
 802921c:	4650      	mov	r0, sl
 802921e:	9b04      	ldr	r3, [sp, #16]
 8029220:	0909      	lsrs	r1, r1, #4
 8029222:	f8b9 2000 	ldrh.w	r2, [r9]
 8029226:	9300      	str	r3, [sp, #0]
 8029228:	463b      	mov	r3, r7
 802922a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802922e:	4429      	add	r1, r5
 8029230:	f7ff ff14 	bl	802905c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029234:	f829 0b02 	strh.w	r0, [r9], #2
 8029238:	9b08      	ldr	r3, [sp, #32]
 802923a:	9a05      	ldr	r2, [sp, #20]
 802923c:	881c      	ldrh	r4, [r3, #0]
 802923e:	9b03      	ldr	r3, [sp, #12]
 8029240:	1ae4      	subs	r4, r4, r3
 8029242:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8029246:	4413      	add	r3, r2
 8029248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802924a:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802924e:	fb93 f3f2 	sdiv	r3, r3, r2
 8029252:	441e      	add	r6, r3
 8029254:	e796      	b.n	8029184 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8029256:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802925a:	4f46      	ldr	r7, [pc, #280]	; (8029374 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802925c:	42a3      	cmp	r3, r4
 802925e:	d97c      	bls.n	802935a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8029260:	9a06      	ldr	r2, [sp, #24]
 8029262:	2a00      	cmp	r2, #0
 8029264:	d054      	beq.n	8029310 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8029266:	7830      	ldrb	r0, [r6, #0]
 8029268:	1c71      	adds	r1, r6, #1
 802926a:	f000 000f 	and.w	r0, r0, #15
 802926e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029272:	eb05 0e00 	add.w	lr, r5, r0
 8029276:	5c28      	ldrb	r0, [r5, r0]
 8029278:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802927c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8029280:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8029284:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029288:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802928c:	ea42 020e 	orr.w	r2, r2, lr
 8029290:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8029294:	f824 2b02 	strh.w	r2, [r4], #2
 8029298:	9a03      	ldr	r2, [sp, #12]
 802929a:	f102 3eff 	add.w	lr, r2, #4294967295
 802929e:	f1be 0f01 	cmp.w	lr, #1
 80292a2:	4620      	mov	r0, r4
 80292a4:	f104 0404 	add.w	r4, r4, #4
 80292a8:	dd36      	ble.n	8029318 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 80292aa:	7808      	ldrb	r0, [r1, #0]
 80292ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80292b0:	0900      	lsrs	r0, r0, #4
 80292b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80292b6:	eb05 0a00 	add.w	sl, r5, r0
 80292ba:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80292be:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80292c2:	00d2      	lsls	r2, r2, #3
 80292c4:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80292c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80292cc:	ea49 0202 	orr.w	r2, r9, r2
 80292d0:	f815 9000 	ldrb.w	r9, [r5, r0]
 80292d4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80292d8:	f824 2c04 	strh.w	r2, [r4, #-4]
 80292dc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80292e0:	f000 000f 	and.w	r0, r0, #15
 80292e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80292e8:	eb05 0a00 	add.w	sl, r5, r0
 80292ec:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80292f0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80292f4:	00d2      	lsls	r2, r2, #3
 80292f6:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80292fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80292fe:	ea49 0202 	orr.w	r2, r9, r2
 8029302:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029306:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802930a:	f824 2c02 	strh.w	r2, [r4, #-2]
 802930e:	e7c6      	b.n	802929e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029310:	4631      	mov	r1, r6
 8029312:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8029316:	e7c2      	b.n	802929e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029318:	d111      	bne.n	802933e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802931a:	7809      	ldrb	r1, [r1, #0]
 802931c:	0909      	lsrs	r1, r1, #4
 802931e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029322:	186c      	adds	r4, r5, r1
 8029324:	5c69      	ldrb	r1, [r5, r1]
 8029326:	78a2      	ldrb	r2, [r4, #2]
 8029328:	7864      	ldrb	r4, [r4, #1]
 802932a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802932e:	00e4      	lsls	r4, r4, #3
 8029330:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8029334:	4322      	orrs	r2, r4
 8029336:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802933a:	f820 2b02 	strh.w	r2, [r0], #2
 802933e:	9a03      	ldr	r2, [sp, #12]
 8029340:	f8bc 4000 	ldrh.w	r4, [ip]
 8029344:	9905      	ldr	r1, [sp, #20]
 8029346:	1aa4      	subs	r4, r4, r2
 8029348:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 802934c:	440a      	add	r2, r1
 802934e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029352:	fb92 f2f8 	sdiv	r2, r2, r8
 8029356:	4416      	add	r6, r2
 8029358:	e780      	b.n	802925c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802935a:	4b04      	ldr	r3, [pc, #16]	; (802936c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802935c:	6818      	ldr	r0, [r3, #0]
 802935e:	6803      	ldr	r3, [r0, #0]
 8029360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029362:	4798      	blx	r3
 8029364:	b00f      	add	sp, #60	; 0x3c
 8029366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802936a:	bf00      	nop
 802936c:	20015038 	.word	0x20015038
 8029370:	20015032 	.word	0x20015032
 8029374:	fffff800 	.word	0xfffff800

08029378 <CRC_Lock>:
 8029378:	4a20      	ldr	r2, [pc, #128]	; (80293fc <CRC_Lock+0x84>)
 802937a:	b530      	push	{r4, r5, lr}
 802937c:	6813      	ldr	r3, [r2, #0]
 802937e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029382:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029386:	f023 0301 	bic.w	r3, r3, #1
 802938a:	6013      	str	r3, [r2, #0]
 802938c:	4b1c      	ldr	r3, [pc, #112]	; (8029400 <CRC_Lock+0x88>)
 802938e:	681a      	ldr	r2, [r3, #0]
 8029390:	4022      	ands	r2, r4
 8029392:	42aa      	cmp	r2, r5
 8029394:	d005      	beq.n	80293a2 <CRC_Lock+0x2a>
 8029396:	681b      	ldr	r3, [r3, #0]
 8029398:	f24c 2270 	movw	r2, #49776	; 0xc270
 802939c:	4023      	ands	r3, r4
 802939e:	4293      	cmp	r3, r2
 80293a0:	d124      	bne.n	80293ec <CRC_Lock+0x74>
 80293a2:	4b18      	ldr	r3, [pc, #96]	; (8029404 <CRC_Lock+0x8c>)
 80293a4:	681b      	ldr	r3, [r3, #0]
 80293a6:	bb0b      	cbnz	r3, 80293ec <CRC_Lock+0x74>
 80293a8:	4b17      	ldr	r3, [pc, #92]	; (8029408 <CRC_Lock+0x90>)
 80293aa:	681a      	ldr	r2, [r3, #0]
 80293ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80293b0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80293b4:	d00d      	beq.n	80293d2 <CRC_Lock+0x5a>
 80293b6:	681a      	ldr	r2, [r3, #0]
 80293b8:	f240 4483 	movw	r4, #1155	; 0x483
 80293bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80293c0:	42a2      	cmp	r2, r4
 80293c2:	d006      	beq.n	80293d2 <CRC_Lock+0x5a>
 80293c4:	681b      	ldr	r3, [r3, #0]
 80293c6:	f240 4285 	movw	r2, #1157	; 0x485
 80293ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80293ce:	4293      	cmp	r3, r2
 80293d0:	d10c      	bne.n	80293ec <CRC_Lock+0x74>
 80293d2:	4b0e      	ldr	r3, [pc, #56]	; (802940c <CRC_Lock+0x94>)
 80293d4:	2201      	movs	r2, #1
 80293d6:	601a      	str	r2, [r3, #0]
 80293d8:	681a      	ldr	r2, [r3, #0]
 80293da:	2a00      	cmp	r2, #0
 80293dc:	d1fc      	bne.n	80293d8 <CRC_Lock+0x60>
 80293de:	4b0c      	ldr	r3, [pc, #48]	; (8029410 <CRC_Lock+0x98>)
 80293e0:	6018      	str	r0, [r3, #0]
 80293e2:	6818      	ldr	r0, [r3, #0]
 80293e4:	1a43      	subs	r3, r0, r1
 80293e6:	4258      	negs	r0, r3
 80293e8:	4158      	adcs	r0, r3
 80293ea:	bd30      	pop	{r4, r5, pc}
 80293ec:	4b09      	ldr	r3, [pc, #36]	; (8029414 <CRC_Lock+0x9c>)
 80293ee:	2201      	movs	r2, #1
 80293f0:	601a      	str	r2, [r3, #0]
 80293f2:	681a      	ldr	r2, [r3, #0]
 80293f4:	2a00      	cmp	r2, #0
 80293f6:	d1fc      	bne.n	80293f2 <CRC_Lock+0x7a>
 80293f8:	4b07      	ldr	r3, [pc, #28]	; (8029418 <CRC_Lock+0xa0>)
 80293fa:	e7f1      	b.n	80293e0 <CRC_Lock+0x68>
 80293fc:	e0002000 	.word	0xe0002000
 8029400:	e000ed00 	.word	0xe000ed00
 8029404:	e0042000 	.word	0xe0042000
 8029408:	5c001000 	.word	0x5c001000
 802940c:	58024c08 	.word	0x58024c08
 8029410:	58024c00 	.word	0x58024c00
 8029414:	40023008 	.word	0x40023008
 8029418:	40023000 	.word	0x40023000

0802941c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802941c:	6101      	str	r1, [r0, #16]
 802941e:	4770      	bx	lr

08029420 <_ZN8touchgfx8Gestures4tickEv>:
 8029420:	7b83      	ldrb	r3, [r0, #14]
 8029422:	b14b      	cbz	r3, 8029438 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029424:	8903      	ldrh	r3, [r0, #8]
 8029426:	3301      	adds	r3, #1
 8029428:	b29b      	uxth	r3, r3
 802942a:	2b07      	cmp	r3, #7
 802942c:	8103      	strh	r3, [r0, #8]
 802942e:	bf81      	itttt	hi
 8029430:	2300      	movhi	r3, #0
 8029432:	8143      	strhhi	r3, [r0, #10]
 8029434:	8183      	strhhi	r3, [r0, #12]
 8029436:	7383      	strbhi	r3, [r0, #14]
 8029438:	4770      	bx	lr
	...

0802943c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802943c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029440:	4698      	mov	r8, r3
 8029442:	8883      	ldrh	r3, [r0, #4]
 8029444:	4604      	mov	r4, r0
 8029446:	4617      	mov	r7, r2
 8029448:	f8ad 3006 	strh.w	r3, [sp, #6]
 802944c:	eba8 0303 	sub.w	r3, r8, r3
 8029450:	4a19      	ldr	r2, [pc, #100]	; (80294b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8029452:	460e      	mov	r6, r1
 8029454:	b21b      	sxth	r3, r3
 8029456:	88c1      	ldrh	r1, [r0, #6]
 8029458:	9200      	str	r2, [sp, #0]
 802945a:	2000      	movs	r0, #0
 802945c:	2b00      	cmp	r3, #0
 802945e:	8aa2      	ldrh	r2, [r4, #20]
 8029460:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029464:	bfb8      	it	lt
 8029466:	425b      	neglt	r3, r3
 8029468:	f88d 0004 	strb.w	r0, [sp, #4]
 802946c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029470:	b21b      	sxth	r3, r3
 8029472:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029476:	f8ad 500c 	strh.w	r5, [sp, #12]
 802947a:	4293      	cmp	r3, r2
 802947c:	dc07      	bgt.n	802948e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802947e:	1a69      	subs	r1, r5, r1
 8029480:	b209      	sxth	r1, r1
 8029482:	2900      	cmp	r1, #0
 8029484:	bfb8      	it	lt
 8029486:	4249      	neglt	r1, r1
 8029488:	b209      	sxth	r1, r1
 802948a:	428a      	cmp	r2, r1
 802948c:	da10      	bge.n	80294b0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802948e:	6920      	ldr	r0, [r4, #16]
 8029490:	4669      	mov	r1, sp
 8029492:	eba8 0606 	sub.w	r6, r8, r6
 8029496:	1bef      	subs	r7, r5, r7
 8029498:	6803      	ldr	r3, [r0, #0]
 802949a:	685b      	ldr	r3, [r3, #4]
 802949c:	4798      	blx	r3
 802949e:	2300      	movs	r3, #0
 80294a0:	2001      	movs	r0, #1
 80294a2:	8166      	strh	r6, [r4, #10]
 80294a4:	8123      	strh	r3, [r4, #8]
 80294a6:	81a7      	strh	r7, [r4, #12]
 80294a8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80294ac:	80e5      	strh	r5, [r4, #6]
 80294ae:	73a0      	strb	r0, [r4, #14]
 80294b0:	b004      	add	sp, #16
 80294b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80294b6:	bf00      	nop
 80294b8:	0802ee14 	.word	0x0802ee14

080294bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80294bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80294be:	461e      	mov	r6, r3
 80294c0:	1e4b      	subs	r3, r1, #1
 80294c2:	b085      	sub	sp, #20
 80294c4:	4604      	mov	r4, r0
 80294c6:	2b01      	cmp	r3, #1
 80294c8:	460d      	mov	r5, r1
 80294ca:	4617      	mov	r7, r2
 80294cc:	d84b      	bhi.n	8029566 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80294ce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80294d2:	1cd3      	adds	r3, r2, #3
 80294d4:	b29b      	uxth	r3, r3
 80294d6:	2b06      	cmp	r3, #6
 80294d8:	d916      	bls.n	8029508 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80294da:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802957c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80294de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80294e2:	f8cd c004 	str.w	ip, [sp, #4]
 80294e6:	f04f 0c00 	mov.w	ip, #0
 80294ea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80294ee:	6900      	ldr	r0, [r0, #16]
 80294f0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80294f4:	a901      	add	r1, sp, #4
 80294f6:	f88d c008 	strb.w	ip, [sp, #8]
 80294fa:	f8ad 200a 	strh.w	r2, [sp, #10]
 80294fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029502:	6803      	ldr	r3, [r0, #0]
 8029504:	689b      	ldr	r3, [r3, #8]
 8029506:	4798      	blx	r3
 8029508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802950c:	1cd3      	adds	r3, r2, #3
 802950e:	b29b      	uxth	r3, r3
 8029510:	2b06      	cmp	r3, #6
 8029512:	d916      	bls.n	8029542 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029514:	f8df c064 	ldr.w	ip, [pc, #100]	; 802957c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029518:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802951c:	f8cd c004 	str.w	ip, [sp, #4]
 8029520:	f04f 0c01 	mov.w	ip, #1
 8029524:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029528:	6920      	ldr	r0, [r4, #16]
 802952a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802952e:	a901      	add	r1, sp, #4
 8029530:	f88d c008 	strb.w	ip, [sp, #8]
 8029534:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029538:	f8ad 300e 	strh.w	r3, [sp, #14]
 802953c:	6803      	ldr	r3, [r0, #0]
 802953e:	689b      	ldr	r3, [r3, #8]
 8029540:	4798      	blx	r3
 8029542:	4b0d      	ldr	r3, [pc, #52]	; (8029578 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029544:	a901      	add	r1, sp, #4
 8029546:	6920      	ldr	r0, [r4, #16]
 8029548:	9301      	str	r3, [sp, #4]
 802954a:	2300      	movs	r3, #0
 802954c:	f88d 5008 	strb.w	r5, [sp, #8]
 8029550:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029554:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029558:	f8ad 300e 	strh.w	r3, [sp, #14]
 802955c:	6803      	ldr	r3, [r0, #0]
 802955e:	681b      	ldr	r3, [r3, #0]
 8029560:	4798      	blx	r3
 8029562:	b005      	add	sp, #20
 8029564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029566:	2900      	cmp	r1, #0
 8029568:	d1eb      	bne.n	8029542 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802956a:	80a2      	strh	r2, [r4, #4]
 802956c:	80c6      	strh	r6, [r0, #6]
 802956e:	60a1      	str	r1, [r4, #8]
 8029570:	81a1      	strh	r1, [r4, #12]
 8029572:	73a1      	strb	r1, [r4, #14]
 8029574:	e7e5      	b.n	8029542 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029576:	bf00      	nop
 8029578:	0802ee00 	.word	0x0802ee00
 802957c:	0802ee28 	.word	0x0802ee28

08029580 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8029580:	790b      	ldrb	r3, [r1, #4]
 8029582:	2b00      	cmp	r3, #0
 8029584:	bf0c      	ite	eq
 8029586:	2301      	moveq	r3, #1
 8029588:	2300      	movne	r3, #0
 802958a:	b570      	push	{r4, r5, r6, lr}
 802958c:	4604      	mov	r4, r0
 802958e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8029592:	460e      	mov	r6, r1
 8029594:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8029598:	d109      	bne.n	80295ae <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802959a:	b14d      	cbz	r5, 80295b0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802959c:	7933      	ldrb	r3, [r6, #4]
 802959e:	2b01      	cmp	r3, #1
 80295a0:	d10c      	bne.n	80295bc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80295a2:	6823      	ldr	r3, [r4, #0]
 80295a4:	4620      	mov	r0, r4
 80295a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80295a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80295ac:	4718      	bx	r3
 80295ae:	b12d      	cbz	r5, 80295bc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80295b0:	6823      	ldr	r3, [r4, #0]
 80295b2:	4620      	mov	r0, r4
 80295b4:	695b      	ldr	r3, [r3, #20]
 80295b6:	4798      	blx	r3
 80295b8:	2d00      	cmp	r5, #0
 80295ba:	d1ef      	bne.n	802959c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80295bc:	bd70      	pop	{r4, r5, r6, pc}

080295be <__aeabi_atexit>:
 80295be:	460b      	mov	r3, r1
 80295c0:	4601      	mov	r1, r0
 80295c2:	4618      	mov	r0, r3
 80295c4:	f000 b90e 	b.w	80297e4 <__cxa_atexit>

080295c8 <_ZdlPvj>:
 80295c8:	f000 b812 	b.w	80295f0 <_ZdlPv>

080295cc <__cxa_guard_acquire>:
 80295cc:	6803      	ldr	r3, [r0, #0]
 80295ce:	07db      	lsls	r3, r3, #31
 80295d0:	d406      	bmi.n	80295e0 <__cxa_guard_acquire+0x14>
 80295d2:	7843      	ldrb	r3, [r0, #1]
 80295d4:	b103      	cbz	r3, 80295d8 <__cxa_guard_acquire+0xc>
 80295d6:	deff      	udf	#255	; 0xff
 80295d8:	2301      	movs	r3, #1
 80295da:	7043      	strb	r3, [r0, #1]
 80295dc:	4618      	mov	r0, r3
 80295de:	4770      	bx	lr
 80295e0:	2000      	movs	r0, #0
 80295e2:	4770      	bx	lr

080295e4 <__cxa_guard_release>:
 80295e4:	2301      	movs	r3, #1
 80295e6:	6003      	str	r3, [r0, #0]
 80295e8:	4770      	bx	lr

080295ea <__cxa_pure_virtual>:
 80295ea:	b508      	push	{r3, lr}
 80295ec:	f000 f80e 	bl	802960c <_ZSt9terminatev>

080295f0 <_ZdlPv>:
 80295f0:	f000 b844 	b.w	802967c <free>

080295f4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80295f4:	b508      	push	{r3, lr}
 80295f6:	4780      	blx	r0
 80295f8:	f000 f80d 	bl	8029616 <abort>

080295fc <_ZSt13get_terminatev>:
 80295fc:	4b02      	ldr	r3, [pc, #8]	; (8029608 <_ZSt13get_terminatev+0xc>)
 80295fe:	6818      	ldr	r0, [r3, #0]
 8029600:	f3bf 8f5b 	dmb	ish
 8029604:	4770      	bx	lr
 8029606:	bf00      	nop
 8029608:	200000c0 	.word	0x200000c0

0802960c <_ZSt9terminatev>:
 802960c:	b508      	push	{r3, lr}
 802960e:	f7ff fff5 	bl	80295fc <_ZSt13get_terminatev>
 8029612:	f7ff ffef 	bl	80295f4 <_ZN10__cxxabiv111__terminateEPFvvE>

08029616 <abort>:
 8029616:	b508      	push	{r3, lr}
 8029618:	2006      	movs	r0, #6
 802961a:	f000 faff 	bl	8029c1c <raise>
 802961e:	2001      	movs	r0, #1
 8029620:	f7d8 f976 	bl	8001910 <_exit>

08029624 <__assert_func>:
 8029624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029626:	4614      	mov	r4, r2
 8029628:	461a      	mov	r2, r3
 802962a:	4b09      	ldr	r3, [pc, #36]	; (8029650 <__assert_func+0x2c>)
 802962c:	681b      	ldr	r3, [r3, #0]
 802962e:	4605      	mov	r5, r0
 8029630:	68d8      	ldr	r0, [r3, #12]
 8029632:	b14c      	cbz	r4, 8029648 <__assert_func+0x24>
 8029634:	4b07      	ldr	r3, [pc, #28]	; (8029654 <__assert_func+0x30>)
 8029636:	9100      	str	r1, [sp, #0]
 8029638:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802963c:	4906      	ldr	r1, [pc, #24]	; (8029658 <__assert_func+0x34>)
 802963e:	462b      	mov	r3, r5
 8029640:	f000 f982 	bl	8029948 <fiprintf>
 8029644:	f7ff ffe7 	bl	8029616 <abort>
 8029648:	4b04      	ldr	r3, [pc, #16]	; (802965c <__assert_func+0x38>)
 802964a:	461c      	mov	r4, r3
 802964c:	e7f3      	b.n	8029636 <__assert_func+0x12>
 802964e:	bf00      	nop
 8029650:	2000011c 	.word	0x2000011c
 8029654:	0802f144 	.word	0x0802f144
 8029658:	0802f151 	.word	0x0802f151
 802965c:	0802f17f 	.word	0x0802f17f

08029660 <atexit>:
 8029660:	2300      	movs	r3, #0
 8029662:	4601      	mov	r1, r0
 8029664:	461a      	mov	r2, r3
 8029666:	4618      	mov	r0, r3
 8029668:	f000 bb86 	b.w	8029d78 <__register_exitproc>

0802966c <malloc>:
 802966c:	4b02      	ldr	r3, [pc, #8]	; (8029678 <malloc+0xc>)
 802966e:	4601      	mov	r1, r0
 8029670:	6818      	ldr	r0, [r3, #0]
 8029672:	f000 b82b 	b.w	80296cc <_malloc_r>
 8029676:	bf00      	nop
 8029678:	2000011c 	.word	0x2000011c

0802967c <free>:
 802967c:	4b02      	ldr	r3, [pc, #8]	; (8029688 <free+0xc>)
 802967e:	4601      	mov	r1, r0
 8029680:	6818      	ldr	r0, [r3, #0]
 8029682:	f000 bbd7 	b.w	8029e34 <_free_r>
 8029686:	bf00      	nop
 8029688:	2000011c 	.word	0x2000011c

0802968c <sbrk_aligned>:
 802968c:	b570      	push	{r4, r5, r6, lr}
 802968e:	4e0e      	ldr	r6, [pc, #56]	; (80296c8 <sbrk_aligned+0x3c>)
 8029690:	460c      	mov	r4, r1
 8029692:	6831      	ldr	r1, [r6, #0]
 8029694:	4605      	mov	r5, r0
 8029696:	b911      	cbnz	r1, 802969e <sbrk_aligned+0x12>
 8029698:	f000 fb10 	bl	8029cbc <_sbrk_r>
 802969c:	6030      	str	r0, [r6, #0]
 802969e:	4621      	mov	r1, r4
 80296a0:	4628      	mov	r0, r5
 80296a2:	f000 fb0b 	bl	8029cbc <_sbrk_r>
 80296a6:	1c43      	adds	r3, r0, #1
 80296a8:	d00a      	beq.n	80296c0 <sbrk_aligned+0x34>
 80296aa:	1cc4      	adds	r4, r0, #3
 80296ac:	f024 0403 	bic.w	r4, r4, #3
 80296b0:	42a0      	cmp	r0, r4
 80296b2:	d007      	beq.n	80296c4 <sbrk_aligned+0x38>
 80296b4:	1a21      	subs	r1, r4, r0
 80296b6:	4628      	mov	r0, r5
 80296b8:	f000 fb00 	bl	8029cbc <_sbrk_r>
 80296bc:	3001      	adds	r0, #1
 80296be:	d101      	bne.n	80296c4 <sbrk_aligned+0x38>
 80296c0:	f04f 34ff 	mov.w	r4, #4294967295
 80296c4:	4620      	mov	r0, r4
 80296c6:	bd70      	pop	{r4, r5, r6, pc}
 80296c8:	20015988 	.word	0x20015988

080296cc <_malloc_r>:
 80296cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80296d0:	1ccd      	adds	r5, r1, #3
 80296d2:	f025 0503 	bic.w	r5, r5, #3
 80296d6:	3508      	adds	r5, #8
 80296d8:	2d0c      	cmp	r5, #12
 80296da:	bf38      	it	cc
 80296dc:	250c      	movcc	r5, #12
 80296de:	2d00      	cmp	r5, #0
 80296e0:	4607      	mov	r7, r0
 80296e2:	db01      	blt.n	80296e8 <_malloc_r+0x1c>
 80296e4:	42a9      	cmp	r1, r5
 80296e6:	d905      	bls.n	80296f4 <_malloc_r+0x28>
 80296e8:	230c      	movs	r3, #12
 80296ea:	603b      	str	r3, [r7, #0]
 80296ec:	2600      	movs	r6, #0
 80296ee:	4630      	mov	r0, r6
 80296f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80296f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80297c8 <_malloc_r+0xfc>
 80296f8:	f000 f868 	bl	80297cc <__malloc_lock>
 80296fc:	f8d8 3000 	ldr.w	r3, [r8]
 8029700:	461c      	mov	r4, r3
 8029702:	bb5c      	cbnz	r4, 802975c <_malloc_r+0x90>
 8029704:	4629      	mov	r1, r5
 8029706:	4638      	mov	r0, r7
 8029708:	f7ff ffc0 	bl	802968c <sbrk_aligned>
 802970c:	1c43      	adds	r3, r0, #1
 802970e:	4604      	mov	r4, r0
 8029710:	d155      	bne.n	80297be <_malloc_r+0xf2>
 8029712:	f8d8 4000 	ldr.w	r4, [r8]
 8029716:	4626      	mov	r6, r4
 8029718:	2e00      	cmp	r6, #0
 802971a:	d145      	bne.n	80297a8 <_malloc_r+0xdc>
 802971c:	2c00      	cmp	r4, #0
 802971e:	d048      	beq.n	80297b2 <_malloc_r+0xe6>
 8029720:	6823      	ldr	r3, [r4, #0]
 8029722:	4631      	mov	r1, r6
 8029724:	4638      	mov	r0, r7
 8029726:	eb04 0903 	add.w	r9, r4, r3
 802972a:	f000 fac7 	bl	8029cbc <_sbrk_r>
 802972e:	4581      	cmp	r9, r0
 8029730:	d13f      	bne.n	80297b2 <_malloc_r+0xe6>
 8029732:	6821      	ldr	r1, [r4, #0]
 8029734:	1a6d      	subs	r5, r5, r1
 8029736:	4629      	mov	r1, r5
 8029738:	4638      	mov	r0, r7
 802973a:	f7ff ffa7 	bl	802968c <sbrk_aligned>
 802973e:	3001      	adds	r0, #1
 8029740:	d037      	beq.n	80297b2 <_malloc_r+0xe6>
 8029742:	6823      	ldr	r3, [r4, #0]
 8029744:	442b      	add	r3, r5
 8029746:	6023      	str	r3, [r4, #0]
 8029748:	f8d8 3000 	ldr.w	r3, [r8]
 802974c:	2b00      	cmp	r3, #0
 802974e:	d038      	beq.n	80297c2 <_malloc_r+0xf6>
 8029750:	685a      	ldr	r2, [r3, #4]
 8029752:	42a2      	cmp	r2, r4
 8029754:	d12b      	bne.n	80297ae <_malloc_r+0xe2>
 8029756:	2200      	movs	r2, #0
 8029758:	605a      	str	r2, [r3, #4]
 802975a:	e00f      	b.n	802977c <_malloc_r+0xb0>
 802975c:	6822      	ldr	r2, [r4, #0]
 802975e:	1b52      	subs	r2, r2, r5
 8029760:	d41f      	bmi.n	80297a2 <_malloc_r+0xd6>
 8029762:	2a0b      	cmp	r2, #11
 8029764:	d917      	bls.n	8029796 <_malloc_r+0xca>
 8029766:	1961      	adds	r1, r4, r5
 8029768:	42a3      	cmp	r3, r4
 802976a:	6025      	str	r5, [r4, #0]
 802976c:	bf18      	it	ne
 802976e:	6059      	strne	r1, [r3, #4]
 8029770:	6863      	ldr	r3, [r4, #4]
 8029772:	bf08      	it	eq
 8029774:	f8c8 1000 	streq.w	r1, [r8]
 8029778:	5162      	str	r2, [r4, r5]
 802977a:	604b      	str	r3, [r1, #4]
 802977c:	4638      	mov	r0, r7
 802977e:	f104 060b 	add.w	r6, r4, #11
 8029782:	f000 f829 	bl	80297d8 <__malloc_unlock>
 8029786:	f026 0607 	bic.w	r6, r6, #7
 802978a:	1d23      	adds	r3, r4, #4
 802978c:	1af2      	subs	r2, r6, r3
 802978e:	d0ae      	beq.n	80296ee <_malloc_r+0x22>
 8029790:	1b9b      	subs	r3, r3, r6
 8029792:	50a3      	str	r3, [r4, r2]
 8029794:	e7ab      	b.n	80296ee <_malloc_r+0x22>
 8029796:	42a3      	cmp	r3, r4
 8029798:	6862      	ldr	r2, [r4, #4]
 802979a:	d1dd      	bne.n	8029758 <_malloc_r+0x8c>
 802979c:	f8c8 2000 	str.w	r2, [r8]
 80297a0:	e7ec      	b.n	802977c <_malloc_r+0xb0>
 80297a2:	4623      	mov	r3, r4
 80297a4:	6864      	ldr	r4, [r4, #4]
 80297a6:	e7ac      	b.n	8029702 <_malloc_r+0x36>
 80297a8:	4634      	mov	r4, r6
 80297aa:	6876      	ldr	r6, [r6, #4]
 80297ac:	e7b4      	b.n	8029718 <_malloc_r+0x4c>
 80297ae:	4613      	mov	r3, r2
 80297b0:	e7cc      	b.n	802974c <_malloc_r+0x80>
 80297b2:	230c      	movs	r3, #12
 80297b4:	603b      	str	r3, [r7, #0]
 80297b6:	4638      	mov	r0, r7
 80297b8:	f000 f80e 	bl	80297d8 <__malloc_unlock>
 80297bc:	e797      	b.n	80296ee <_malloc_r+0x22>
 80297be:	6025      	str	r5, [r4, #0]
 80297c0:	e7dc      	b.n	802977c <_malloc_r+0xb0>
 80297c2:	605b      	str	r3, [r3, #4]
 80297c4:	deff      	udf	#255	; 0xff
 80297c6:	bf00      	nop
 80297c8:	20015984 	.word	0x20015984

080297cc <__malloc_lock>:
 80297cc:	4801      	ldr	r0, [pc, #4]	; (80297d4 <__malloc_lock+0x8>)
 80297ce:	f000 bac2 	b.w	8029d56 <__retarget_lock_acquire_recursive>
 80297d2:	bf00      	nop
 80297d4:	20015acd 	.word	0x20015acd

080297d8 <__malloc_unlock>:
 80297d8:	4801      	ldr	r0, [pc, #4]	; (80297e0 <__malloc_unlock+0x8>)
 80297da:	f000 babd 	b.w	8029d58 <__retarget_lock_release_recursive>
 80297de:	bf00      	nop
 80297e0:	20015acd 	.word	0x20015acd

080297e4 <__cxa_atexit>:
 80297e4:	b510      	push	{r4, lr}
 80297e6:	4c05      	ldr	r4, [pc, #20]	; (80297fc <__cxa_atexit+0x18>)
 80297e8:	4613      	mov	r3, r2
 80297ea:	b12c      	cbz	r4, 80297f8 <__cxa_atexit+0x14>
 80297ec:	460a      	mov	r2, r1
 80297ee:	4601      	mov	r1, r0
 80297f0:	2002      	movs	r0, #2
 80297f2:	f000 fac1 	bl	8029d78 <__register_exitproc>
 80297f6:	bd10      	pop	{r4, pc}
 80297f8:	4620      	mov	r0, r4
 80297fa:	e7fc      	b.n	80297f6 <__cxa_atexit+0x12>
 80297fc:	08029d79 	.word	0x08029d79

08029800 <std>:
 8029800:	2300      	movs	r3, #0
 8029802:	b510      	push	{r4, lr}
 8029804:	4604      	mov	r4, r0
 8029806:	e9c0 3300 	strd	r3, r3, [r0]
 802980a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802980e:	6083      	str	r3, [r0, #8]
 8029810:	8181      	strh	r1, [r0, #12]
 8029812:	6643      	str	r3, [r0, #100]	; 0x64
 8029814:	81c2      	strh	r2, [r0, #14]
 8029816:	6183      	str	r3, [r0, #24]
 8029818:	4619      	mov	r1, r3
 802981a:	2208      	movs	r2, #8
 802981c:	305c      	adds	r0, #92	; 0x5c
 802981e:	f000 f9bb 	bl	8029b98 <memset>
 8029822:	4b0d      	ldr	r3, [pc, #52]	; (8029858 <std+0x58>)
 8029824:	6263      	str	r3, [r4, #36]	; 0x24
 8029826:	4b0d      	ldr	r3, [pc, #52]	; (802985c <std+0x5c>)
 8029828:	62a3      	str	r3, [r4, #40]	; 0x28
 802982a:	4b0d      	ldr	r3, [pc, #52]	; (8029860 <std+0x60>)
 802982c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802982e:	4b0d      	ldr	r3, [pc, #52]	; (8029864 <std+0x64>)
 8029830:	6323      	str	r3, [r4, #48]	; 0x30
 8029832:	4b0d      	ldr	r3, [pc, #52]	; (8029868 <std+0x68>)
 8029834:	6224      	str	r4, [r4, #32]
 8029836:	429c      	cmp	r4, r3
 8029838:	d006      	beq.n	8029848 <std+0x48>
 802983a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802983e:	4294      	cmp	r4, r2
 8029840:	d002      	beq.n	8029848 <std+0x48>
 8029842:	33d0      	adds	r3, #208	; 0xd0
 8029844:	429c      	cmp	r4, r3
 8029846:	d105      	bne.n	8029854 <std+0x54>
 8029848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802984c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029850:	f000 ba80 	b.w	8029d54 <__retarget_lock_init_recursive>
 8029854:	bd10      	pop	{r4, pc}
 8029856:	bf00      	nop
 8029858:	080299e9 	.word	0x080299e9
 802985c:	08029a0b 	.word	0x08029a0b
 8029860:	08029a43 	.word	0x08029a43
 8029864:	08029a67 	.word	0x08029a67
 8029868:	2001598c 	.word	0x2001598c

0802986c <stdio_exit_handler>:
 802986c:	4a02      	ldr	r2, [pc, #8]	; (8029878 <stdio_exit_handler+0xc>)
 802986e:	4903      	ldr	r1, [pc, #12]	; (802987c <stdio_exit_handler+0x10>)
 8029870:	4803      	ldr	r0, [pc, #12]	; (8029880 <stdio_exit_handler+0x14>)
 8029872:	f000 b87b 	b.w	802996c <_fwalk_sglue>
 8029876:	bf00      	nop
 8029878:	200000c4 	.word	0x200000c4
 802987c:	0802a831 	.word	0x0802a831
 8029880:	200000d0 	.word	0x200000d0

08029884 <cleanup_stdio>:
 8029884:	6841      	ldr	r1, [r0, #4]
 8029886:	4b0c      	ldr	r3, [pc, #48]	; (80298b8 <cleanup_stdio+0x34>)
 8029888:	4299      	cmp	r1, r3
 802988a:	b510      	push	{r4, lr}
 802988c:	4604      	mov	r4, r0
 802988e:	d001      	beq.n	8029894 <cleanup_stdio+0x10>
 8029890:	f000 ffce 	bl	802a830 <_fflush_r>
 8029894:	68a1      	ldr	r1, [r4, #8]
 8029896:	4b09      	ldr	r3, [pc, #36]	; (80298bc <cleanup_stdio+0x38>)
 8029898:	4299      	cmp	r1, r3
 802989a:	d002      	beq.n	80298a2 <cleanup_stdio+0x1e>
 802989c:	4620      	mov	r0, r4
 802989e:	f000 ffc7 	bl	802a830 <_fflush_r>
 80298a2:	68e1      	ldr	r1, [r4, #12]
 80298a4:	4b06      	ldr	r3, [pc, #24]	; (80298c0 <cleanup_stdio+0x3c>)
 80298a6:	4299      	cmp	r1, r3
 80298a8:	d004      	beq.n	80298b4 <cleanup_stdio+0x30>
 80298aa:	4620      	mov	r0, r4
 80298ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80298b0:	f000 bfbe 	b.w	802a830 <_fflush_r>
 80298b4:	bd10      	pop	{r4, pc}
 80298b6:	bf00      	nop
 80298b8:	2001598c 	.word	0x2001598c
 80298bc:	200159f4 	.word	0x200159f4
 80298c0:	20015a5c 	.word	0x20015a5c

080298c4 <global_stdio_init.part.0>:
 80298c4:	b510      	push	{r4, lr}
 80298c6:	4b0b      	ldr	r3, [pc, #44]	; (80298f4 <global_stdio_init.part.0+0x30>)
 80298c8:	4c0b      	ldr	r4, [pc, #44]	; (80298f8 <global_stdio_init.part.0+0x34>)
 80298ca:	4a0c      	ldr	r2, [pc, #48]	; (80298fc <global_stdio_init.part.0+0x38>)
 80298cc:	601a      	str	r2, [r3, #0]
 80298ce:	4620      	mov	r0, r4
 80298d0:	2200      	movs	r2, #0
 80298d2:	2104      	movs	r1, #4
 80298d4:	f7ff ff94 	bl	8029800 <std>
 80298d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80298dc:	2201      	movs	r2, #1
 80298de:	2109      	movs	r1, #9
 80298e0:	f7ff ff8e 	bl	8029800 <std>
 80298e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80298e8:	2202      	movs	r2, #2
 80298ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80298ee:	2112      	movs	r1, #18
 80298f0:	f7ff bf86 	b.w	8029800 <std>
 80298f4:	20015ac4 	.word	0x20015ac4
 80298f8:	2001598c 	.word	0x2001598c
 80298fc:	0802986d 	.word	0x0802986d

08029900 <__sfp_lock_acquire>:
 8029900:	4801      	ldr	r0, [pc, #4]	; (8029908 <__sfp_lock_acquire+0x8>)
 8029902:	f000 ba28 	b.w	8029d56 <__retarget_lock_acquire_recursive>
 8029906:	bf00      	nop
 8029908:	20015ace 	.word	0x20015ace

0802990c <__sfp_lock_release>:
 802990c:	4801      	ldr	r0, [pc, #4]	; (8029914 <__sfp_lock_release+0x8>)
 802990e:	f000 ba23 	b.w	8029d58 <__retarget_lock_release_recursive>
 8029912:	bf00      	nop
 8029914:	20015ace 	.word	0x20015ace

08029918 <__sinit>:
 8029918:	b510      	push	{r4, lr}
 802991a:	4604      	mov	r4, r0
 802991c:	f7ff fff0 	bl	8029900 <__sfp_lock_acquire>
 8029920:	6a23      	ldr	r3, [r4, #32]
 8029922:	b11b      	cbz	r3, 802992c <__sinit+0x14>
 8029924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029928:	f7ff bff0 	b.w	802990c <__sfp_lock_release>
 802992c:	4b04      	ldr	r3, [pc, #16]	; (8029940 <__sinit+0x28>)
 802992e:	6223      	str	r3, [r4, #32]
 8029930:	4b04      	ldr	r3, [pc, #16]	; (8029944 <__sinit+0x2c>)
 8029932:	681b      	ldr	r3, [r3, #0]
 8029934:	2b00      	cmp	r3, #0
 8029936:	d1f5      	bne.n	8029924 <__sinit+0xc>
 8029938:	f7ff ffc4 	bl	80298c4 <global_stdio_init.part.0>
 802993c:	e7f2      	b.n	8029924 <__sinit+0xc>
 802993e:	bf00      	nop
 8029940:	08029885 	.word	0x08029885
 8029944:	20015ac4 	.word	0x20015ac4

08029948 <fiprintf>:
 8029948:	b40e      	push	{r1, r2, r3}
 802994a:	b503      	push	{r0, r1, lr}
 802994c:	4601      	mov	r1, r0
 802994e:	ab03      	add	r3, sp, #12
 8029950:	4805      	ldr	r0, [pc, #20]	; (8029968 <fiprintf+0x20>)
 8029952:	f853 2b04 	ldr.w	r2, [r3], #4
 8029956:	6800      	ldr	r0, [r0, #0]
 8029958:	9301      	str	r3, [sp, #4]
 802995a:	f000 fc39 	bl	802a1d0 <_vfiprintf_r>
 802995e:	b002      	add	sp, #8
 8029960:	f85d eb04 	ldr.w	lr, [sp], #4
 8029964:	b003      	add	sp, #12
 8029966:	4770      	bx	lr
 8029968:	2000011c 	.word	0x2000011c

0802996c <_fwalk_sglue>:
 802996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029970:	4607      	mov	r7, r0
 8029972:	4688      	mov	r8, r1
 8029974:	4614      	mov	r4, r2
 8029976:	2600      	movs	r6, #0
 8029978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802997c:	f1b9 0901 	subs.w	r9, r9, #1
 8029980:	d505      	bpl.n	802998e <_fwalk_sglue+0x22>
 8029982:	6824      	ldr	r4, [r4, #0]
 8029984:	2c00      	cmp	r4, #0
 8029986:	d1f7      	bne.n	8029978 <_fwalk_sglue+0xc>
 8029988:	4630      	mov	r0, r6
 802998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802998e:	89ab      	ldrh	r3, [r5, #12]
 8029990:	2b01      	cmp	r3, #1
 8029992:	d907      	bls.n	80299a4 <_fwalk_sglue+0x38>
 8029994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029998:	3301      	adds	r3, #1
 802999a:	d003      	beq.n	80299a4 <_fwalk_sglue+0x38>
 802999c:	4629      	mov	r1, r5
 802999e:	4638      	mov	r0, r7
 80299a0:	47c0      	blx	r8
 80299a2:	4306      	orrs	r6, r0
 80299a4:	3568      	adds	r5, #104	; 0x68
 80299a6:	e7e9      	b.n	802997c <_fwalk_sglue+0x10>

080299a8 <siprintf>:
 80299a8:	b40e      	push	{r1, r2, r3}
 80299aa:	b500      	push	{lr}
 80299ac:	b09c      	sub	sp, #112	; 0x70
 80299ae:	ab1d      	add	r3, sp, #116	; 0x74
 80299b0:	9002      	str	r0, [sp, #8]
 80299b2:	9006      	str	r0, [sp, #24]
 80299b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80299b8:	4809      	ldr	r0, [pc, #36]	; (80299e0 <siprintf+0x38>)
 80299ba:	9107      	str	r1, [sp, #28]
 80299bc:	9104      	str	r1, [sp, #16]
 80299be:	4909      	ldr	r1, [pc, #36]	; (80299e4 <siprintf+0x3c>)
 80299c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80299c4:	9105      	str	r1, [sp, #20]
 80299c6:	6800      	ldr	r0, [r0, #0]
 80299c8:	9301      	str	r3, [sp, #4]
 80299ca:	a902      	add	r1, sp, #8
 80299cc:	f000 fad8 	bl	8029f80 <_svfiprintf_r>
 80299d0:	9b02      	ldr	r3, [sp, #8]
 80299d2:	2200      	movs	r2, #0
 80299d4:	701a      	strb	r2, [r3, #0]
 80299d6:	b01c      	add	sp, #112	; 0x70
 80299d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80299dc:	b003      	add	sp, #12
 80299de:	4770      	bx	lr
 80299e0:	2000011c 	.word	0x2000011c
 80299e4:	ffff0208 	.word	0xffff0208

080299e8 <__sread>:
 80299e8:	b510      	push	{r4, lr}
 80299ea:	460c      	mov	r4, r1
 80299ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80299f0:	f000 f93e 	bl	8029c70 <_read_r>
 80299f4:	2800      	cmp	r0, #0
 80299f6:	bfab      	itete	ge
 80299f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80299fa:	89a3      	ldrhlt	r3, [r4, #12]
 80299fc:	181b      	addge	r3, r3, r0
 80299fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029a02:	bfac      	ite	ge
 8029a04:	6563      	strge	r3, [r4, #84]	; 0x54
 8029a06:	81a3      	strhlt	r3, [r4, #12]
 8029a08:	bd10      	pop	{r4, pc}

08029a0a <__swrite>:
 8029a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029a0e:	461f      	mov	r7, r3
 8029a10:	898b      	ldrh	r3, [r1, #12]
 8029a12:	05db      	lsls	r3, r3, #23
 8029a14:	4605      	mov	r5, r0
 8029a16:	460c      	mov	r4, r1
 8029a18:	4616      	mov	r6, r2
 8029a1a:	d505      	bpl.n	8029a28 <__swrite+0x1e>
 8029a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029a20:	2302      	movs	r3, #2
 8029a22:	2200      	movs	r2, #0
 8029a24:	f000 f912 	bl	8029c4c <_lseek_r>
 8029a28:	89a3      	ldrh	r3, [r4, #12]
 8029a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029a32:	81a3      	strh	r3, [r4, #12]
 8029a34:	4632      	mov	r2, r6
 8029a36:	463b      	mov	r3, r7
 8029a38:	4628      	mov	r0, r5
 8029a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029a3e:	f000 b94d 	b.w	8029cdc <_write_r>

08029a42 <__sseek>:
 8029a42:	b510      	push	{r4, lr}
 8029a44:	460c      	mov	r4, r1
 8029a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029a4a:	f000 f8ff 	bl	8029c4c <_lseek_r>
 8029a4e:	1c43      	adds	r3, r0, #1
 8029a50:	89a3      	ldrh	r3, [r4, #12]
 8029a52:	bf15      	itete	ne
 8029a54:	6560      	strne	r0, [r4, #84]	; 0x54
 8029a56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029a5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029a5e:	81a3      	strheq	r3, [r4, #12]
 8029a60:	bf18      	it	ne
 8029a62:	81a3      	strhne	r3, [r4, #12]
 8029a64:	bd10      	pop	{r4, pc}

08029a66 <__sclose>:
 8029a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029a6a:	f000 b8df 	b.w	8029c2c <_close_r>

08029a6e <__swbuf_r>:
 8029a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a70:	460e      	mov	r6, r1
 8029a72:	4614      	mov	r4, r2
 8029a74:	4605      	mov	r5, r0
 8029a76:	b118      	cbz	r0, 8029a80 <__swbuf_r+0x12>
 8029a78:	6a03      	ldr	r3, [r0, #32]
 8029a7a:	b90b      	cbnz	r3, 8029a80 <__swbuf_r+0x12>
 8029a7c:	f7ff ff4c 	bl	8029918 <__sinit>
 8029a80:	69a3      	ldr	r3, [r4, #24]
 8029a82:	60a3      	str	r3, [r4, #8]
 8029a84:	89a3      	ldrh	r3, [r4, #12]
 8029a86:	071a      	lsls	r2, r3, #28
 8029a88:	d525      	bpl.n	8029ad6 <__swbuf_r+0x68>
 8029a8a:	6923      	ldr	r3, [r4, #16]
 8029a8c:	b31b      	cbz	r3, 8029ad6 <__swbuf_r+0x68>
 8029a8e:	6823      	ldr	r3, [r4, #0]
 8029a90:	6922      	ldr	r2, [r4, #16]
 8029a92:	1a98      	subs	r0, r3, r2
 8029a94:	6963      	ldr	r3, [r4, #20]
 8029a96:	b2f6      	uxtb	r6, r6
 8029a98:	4283      	cmp	r3, r0
 8029a9a:	4637      	mov	r7, r6
 8029a9c:	dc04      	bgt.n	8029aa8 <__swbuf_r+0x3a>
 8029a9e:	4621      	mov	r1, r4
 8029aa0:	4628      	mov	r0, r5
 8029aa2:	f000 fec5 	bl	802a830 <_fflush_r>
 8029aa6:	b9e0      	cbnz	r0, 8029ae2 <__swbuf_r+0x74>
 8029aa8:	68a3      	ldr	r3, [r4, #8]
 8029aaa:	3b01      	subs	r3, #1
 8029aac:	60a3      	str	r3, [r4, #8]
 8029aae:	6823      	ldr	r3, [r4, #0]
 8029ab0:	1c5a      	adds	r2, r3, #1
 8029ab2:	6022      	str	r2, [r4, #0]
 8029ab4:	701e      	strb	r6, [r3, #0]
 8029ab6:	6962      	ldr	r2, [r4, #20]
 8029ab8:	1c43      	adds	r3, r0, #1
 8029aba:	429a      	cmp	r2, r3
 8029abc:	d004      	beq.n	8029ac8 <__swbuf_r+0x5a>
 8029abe:	89a3      	ldrh	r3, [r4, #12]
 8029ac0:	07db      	lsls	r3, r3, #31
 8029ac2:	d506      	bpl.n	8029ad2 <__swbuf_r+0x64>
 8029ac4:	2e0a      	cmp	r6, #10
 8029ac6:	d104      	bne.n	8029ad2 <__swbuf_r+0x64>
 8029ac8:	4621      	mov	r1, r4
 8029aca:	4628      	mov	r0, r5
 8029acc:	f000 feb0 	bl	802a830 <_fflush_r>
 8029ad0:	b938      	cbnz	r0, 8029ae2 <__swbuf_r+0x74>
 8029ad2:	4638      	mov	r0, r7
 8029ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029ad6:	4621      	mov	r1, r4
 8029ad8:	4628      	mov	r0, r5
 8029ada:	f000 f805 	bl	8029ae8 <__swsetup_r>
 8029ade:	2800      	cmp	r0, #0
 8029ae0:	d0d5      	beq.n	8029a8e <__swbuf_r+0x20>
 8029ae2:	f04f 37ff 	mov.w	r7, #4294967295
 8029ae6:	e7f4      	b.n	8029ad2 <__swbuf_r+0x64>

08029ae8 <__swsetup_r>:
 8029ae8:	b538      	push	{r3, r4, r5, lr}
 8029aea:	4b2a      	ldr	r3, [pc, #168]	; (8029b94 <__swsetup_r+0xac>)
 8029aec:	4605      	mov	r5, r0
 8029aee:	6818      	ldr	r0, [r3, #0]
 8029af0:	460c      	mov	r4, r1
 8029af2:	b118      	cbz	r0, 8029afc <__swsetup_r+0x14>
 8029af4:	6a03      	ldr	r3, [r0, #32]
 8029af6:	b90b      	cbnz	r3, 8029afc <__swsetup_r+0x14>
 8029af8:	f7ff ff0e 	bl	8029918 <__sinit>
 8029afc:	89a3      	ldrh	r3, [r4, #12]
 8029afe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029b02:	0718      	lsls	r0, r3, #28
 8029b04:	d422      	bmi.n	8029b4c <__swsetup_r+0x64>
 8029b06:	06d9      	lsls	r1, r3, #27
 8029b08:	d407      	bmi.n	8029b1a <__swsetup_r+0x32>
 8029b0a:	2309      	movs	r3, #9
 8029b0c:	602b      	str	r3, [r5, #0]
 8029b0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029b12:	81a3      	strh	r3, [r4, #12]
 8029b14:	f04f 30ff 	mov.w	r0, #4294967295
 8029b18:	e034      	b.n	8029b84 <__swsetup_r+0x9c>
 8029b1a:	0758      	lsls	r0, r3, #29
 8029b1c:	d512      	bpl.n	8029b44 <__swsetup_r+0x5c>
 8029b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029b20:	b141      	cbz	r1, 8029b34 <__swsetup_r+0x4c>
 8029b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029b26:	4299      	cmp	r1, r3
 8029b28:	d002      	beq.n	8029b30 <__swsetup_r+0x48>
 8029b2a:	4628      	mov	r0, r5
 8029b2c:	f000 f982 	bl	8029e34 <_free_r>
 8029b30:	2300      	movs	r3, #0
 8029b32:	6363      	str	r3, [r4, #52]	; 0x34
 8029b34:	89a3      	ldrh	r3, [r4, #12]
 8029b36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029b3a:	81a3      	strh	r3, [r4, #12]
 8029b3c:	2300      	movs	r3, #0
 8029b3e:	6063      	str	r3, [r4, #4]
 8029b40:	6923      	ldr	r3, [r4, #16]
 8029b42:	6023      	str	r3, [r4, #0]
 8029b44:	89a3      	ldrh	r3, [r4, #12]
 8029b46:	f043 0308 	orr.w	r3, r3, #8
 8029b4a:	81a3      	strh	r3, [r4, #12]
 8029b4c:	6923      	ldr	r3, [r4, #16]
 8029b4e:	b94b      	cbnz	r3, 8029b64 <__swsetup_r+0x7c>
 8029b50:	89a3      	ldrh	r3, [r4, #12]
 8029b52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029b5a:	d003      	beq.n	8029b64 <__swsetup_r+0x7c>
 8029b5c:	4621      	mov	r1, r4
 8029b5e:	4628      	mov	r0, r5
 8029b60:	f000 feb4 	bl	802a8cc <__smakebuf_r>
 8029b64:	89a0      	ldrh	r0, [r4, #12]
 8029b66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029b6a:	f010 0301 	ands.w	r3, r0, #1
 8029b6e:	d00a      	beq.n	8029b86 <__swsetup_r+0x9e>
 8029b70:	2300      	movs	r3, #0
 8029b72:	60a3      	str	r3, [r4, #8]
 8029b74:	6963      	ldr	r3, [r4, #20]
 8029b76:	425b      	negs	r3, r3
 8029b78:	61a3      	str	r3, [r4, #24]
 8029b7a:	6923      	ldr	r3, [r4, #16]
 8029b7c:	b943      	cbnz	r3, 8029b90 <__swsetup_r+0xa8>
 8029b7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029b82:	d1c4      	bne.n	8029b0e <__swsetup_r+0x26>
 8029b84:	bd38      	pop	{r3, r4, r5, pc}
 8029b86:	0781      	lsls	r1, r0, #30
 8029b88:	bf58      	it	pl
 8029b8a:	6963      	ldrpl	r3, [r4, #20]
 8029b8c:	60a3      	str	r3, [r4, #8]
 8029b8e:	e7f4      	b.n	8029b7a <__swsetup_r+0x92>
 8029b90:	2000      	movs	r0, #0
 8029b92:	e7f7      	b.n	8029b84 <__swsetup_r+0x9c>
 8029b94:	2000011c 	.word	0x2000011c

08029b98 <memset>:
 8029b98:	4402      	add	r2, r0
 8029b9a:	4603      	mov	r3, r0
 8029b9c:	4293      	cmp	r3, r2
 8029b9e:	d100      	bne.n	8029ba2 <memset+0xa>
 8029ba0:	4770      	bx	lr
 8029ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8029ba6:	e7f9      	b.n	8029b9c <memset+0x4>

08029ba8 <strncmp>:
 8029ba8:	b510      	push	{r4, lr}
 8029baa:	b16a      	cbz	r2, 8029bc8 <strncmp+0x20>
 8029bac:	3901      	subs	r1, #1
 8029bae:	1884      	adds	r4, r0, r2
 8029bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029bb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8029bb8:	429a      	cmp	r2, r3
 8029bba:	d103      	bne.n	8029bc4 <strncmp+0x1c>
 8029bbc:	42a0      	cmp	r0, r4
 8029bbe:	d001      	beq.n	8029bc4 <strncmp+0x1c>
 8029bc0:	2a00      	cmp	r2, #0
 8029bc2:	d1f5      	bne.n	8029bb0 <strncmp+0x8>
 8029bc4:	1ad0      	subs	r0, r2, r3
 8029bc6:	bd10      	pop	{r4, pc}
 8029bc8:	4610      	mov	r0, r2
 8029bca:	e7fc      	b.n	8029bc6 <strncmp+0x1e>

08029bcc <_raise_r>:
 8029bcc:	291f      	cmp	r1, #31
 8029bce:	b538      	push	{r3, r4, r5, lr}
 8029bd0:	4604      	mov	r4, r0
 8029bd2:	460d      	mov	r5, r1
 8029bd4:	d904      	bls.n	8029be0 <_raise_r+0x14>
 8029bd6:	2316      	movs	r3, #22
 8029bd8:	6003      	str	r3, [r0, #0]
 8029bda:	f04f 30ff 	mov.w	r0, #4294967295
 8029bde:	bd38      	pop	{r3, r4, r5, pc}
 8029be0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8029be2:	b112      	cbz	r2, 8029bea <_raise_r+0x1e>
 8029be4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029be8:	b94b      	cbnz	r3, 8029bfe <_raise_r+0x32>
 8029bea:	4620      	mov	r0, r4
 8029bec:	f000 f864 	bl	8029cb8 <_getpid_r>
 8029bf0:	462a      	mov	r2, r5
 8029bf2:	4601      	mov	r1, r0
 8029bf4:	4620      	mov	r0, r4
 8029bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029bfa:	f000 b84b 	b.w	8029c94 <_kill_r>
 8029bfe:	2b01      	cmp	r3, #1
 8029c00:	d00a      	beq.n	8029c18 <_raise_r+0x4c>
 8029c02:	1c59      	adds	r1, r3, #1
 8029c04:	d103      	bne.n	8029c0e <_raise_r+0x42>
 8029c06:	2316      	movs	r3, #22
 8029c08:	6003      	str	r3, [r0, #0]
 8029c0a:	2001      	movs	r0, #1
 8029c0c:	e7e7      	b.n	8029bde <_raise_r+0x12>
 8029c0e:	2400      	movs	r4, #0
 8029c10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029c14:	4628      	mov	r0, r5
 8029c16:	4798      	blx	r3
 8029c18:	2000      	movs	r0, #0
 8029c1a:	e7e0      	b.n	8029bde <_raise_r+0x12>

08029c1c <raise>:
 8029c1c:	4b02      	ldr	r3, [pc, #8]	; (8029c28 <raise+0xc>)
 8029c1e:	4601      	mov	r1, r0
 8029c20:	6818      	ldr	r0, [r3, #0]
 8029c22:	f7ff bfd3 	b.w	8029bcc <_raise_r>
 8029c26:	bf00      	nop
 8029c28:	2000011c 	.word	0x2000011c

08029c2c <_close_r>:
 8029c2c:	b538      	push	{r3, r4, r5, lr}
 8029c2e:	4d06      	ldr	r5, [pc, #24]	; (8029c48 <_close_r+0x1c>)
 8029c30:	2300      	movs	r3, #0
 8029c32:	4604      	mov	r4, r0
 8029c34:	4608      	mov	r0, r1
 8029c36:	602b      	str	r3, [r5, #0]
 8029c38:	f7d7 fe8c 	bl	8001954 <_close>
 8029c3c:	1c43      	adds	r3, r0, #1
 8029c3e:	d102      	bne.n	8029c46 <_close_r+0x1a>
 8029c40:	682b      	ldr	r3, [r5, #0]
 8029c42:	b103      	cbz	r3, 8029c46 <_close_r+0x1a>
 8029c44:	6023      	str	r3, [r4, #0]
 8029c46:	bd38      	pop	{r3, r4, r5, pc}
 8029c48:	20015ac8 	.word	0x20015ac8

08029c4c <_lseek_r>:
 8029c4c:	b538      	push	{r3, r4, r5, lr}
 8029c4e:	4d07      	ldr	r5, [pc, #28]	; (8029c6c <_lseek_r+0x20>)
 8029c50:	4604      	mov	r4, r0
 8029c52:	4608      	mov	r0, r1
 8029c54:	4611      	mov	r1, r2
 8029c56:	2200      	movs	r2, #0
 8029c58:	602a      	str	r2, [r5, #0]
 8029c5a:	461a      	mov	r2, r3
 8029c5c:	f7d7 fe84 	bl	8001968 <_lseek>
 8029c60:	1c43      	adds	r3, r0, #1
 8029c62:	d102      	bne.n	8029c6a <_lseek_r+0x1e>
 8029c64:	682b      	ldr	r3, [r5, #0]
 8029c66:	b103      	cbz	r3, 8029c6a <_lseek_r+0x1e>
 8029c68:	6023      	str	r3, [r4, #0]
 8029c6a:	bd38      	pop	{r3, r4, r5, pc}
 8029c6c:	20015ac8 	.word	0x20015ac8

08029c70 <_read_r>:
 8029c70:	b538      	push	{r3, r4, r5, lr}
 8029c72:	4d07      	ldr	r5, [pc, #28]	; (8029c90 <_read_r+0x20>)
 8029c74:	4604      	mov	r4, r0
 8029c76:	4608      	mov	r0, r1
 8029c78:	4611      	mov	r1, r2
 8029c7a:	2200      	movs	r2, #0
 8029c7c:	602a      	str	r2, [r5, #0]
 8029c7e:	461a      	mov	r2, r3
 8029c80:	f7d7 fe4c 	bl	800191c <_read>
 8029c84:	1c43      	adds	r3, r0, #1
 8029c86:	d102      	bne.n	8029c8e <_read_r+0x1e>
 8029c88:	682b      	ldr	r3, [r5, #0]
 8029c8a:	b103      	cbz	r3, 8029c8e <_read_r+0x1e>
 8029c8c:	6023      	str	r3, [r4, #0]
 8029c8e:	bd38      	pop	{r3, r4, r5, pc}
 8029c90:	20015ac8 	.word	0x20015ac8

08029c94 <_kill_r>:
 8029c94:	b538      	push	{r3, r4, r5, lr}
 8029c96:	4d07      	ldr	r5, [pc, #28]	; (8029cb4 <_kill_r+0x20>)
 8029c98:	2300      	movs	r3, #0
 8029c9a:	4604      	mov	r4, r0
 8029c9c:	4608      	mov	r0, r1
 8029c9e:	4611      	mov	r1, r2
 8029ca0:	602b      	str	r3, [r5, #0]
 8029ca2:	f7d7 fe2d 	bl	8001900 <_kill>
 8029ca6:	1c43      	adds	r3, r0, #1
 8029ca8:	d102      	bne.n	8029cb0 <_kill_r+0x1c>
 8029caa:	682b      	ldr	r3, [r5, #0]
 8029cac:	b103      	cbz	r3, 8029cb0 <_kill_r+0x1c>
 8029cae:	6023      	str	r3, [r4, #0]
 8029cb0:	bd38      	pop	{r3, r4, r5, pc}
 8029cb2:	bf00      	nop
 8029cb4:	20015ac8 	.word	0x20015ac8

08029cb8 <_getpid_r>:
 8029cb8:	f7d7 be20 	b.w	80018fc <_getpid>

08029cbc <_sbrk_r>:
 8029cbc:	b538      	push	{r3, r4, r5, lr}
 8029cbe:	4d06      	ldr	r5, [pc, #24]	; (8029cd8 <_sbrk_r+0x1c>)
 8029cc0:	2300      	movs	r3, #0
 8029cc2:	4604      	mov	r4, r0
 8029cc4:	4608      	mov	r0, r1
 8029cc6:	602b      	str	r3, [r5, #0]
 8029cc8:	f7d7 fe50 	bl	800196c <_sbrk>
 8029ccc:	1c43      	adds	r3, r0, #1
 8029cce:	d102      	bne.n	8029cd6 <_sbrk_r+0x1a>
 8029cd0:	682b      	ldr	r3, [r5, #0]
 8029cd2:	b103      	cbz	r3, 8029cd6 <_sbrk_r+0x1a>
 8029cd4:	6023      	str	r3, [r4, #0]
 8029cd6:	bd38      	pop	{r3, r4, r5, pc}
 8029cd8:	20015ac8 	.word	0x20015ac8

08029cdc <_write_r>:
 8029cdc:	b538      	push	{r3, r4, r5, lr}
 8029cde:	4d07      	ldr	r5, [pc, #28]	; (8029cfc <_write_r+0x20>)
 8029ce0:	4604      	mov	r4, r0
 8029ce2:	4608      	mov	r0, r1
 8029ce4:	4611      	mov	r1, r2
 8029ce6:	2200      	movs	r2, #0
 8029ce8:	602a      	str	r2, [r5, #0]
 8029cea:	461a      	mov	r2, r3
 8029cec:	f7d7 fe24 	bl	8001938 <_write>
 8029cf0:	1c43      	adds	r3, r0, #1
 8029cf2:	d102      	bne.n	8029cfa <_write_r+0x1e>
 8029cf4:	682b      	ldr	r3, [r5, #0]
 8029cf6:	b103      	cbz	r3, 8029cfa <_write_r+0x1e>
 8029cf8:	6023      	str	r3, [r4, #0]
 8029cfa:	bd38      	pop	{r3, r4, r5, pc}
 8029cfc:	20015ac8 	.word	0x20015ac8

08029d00 <__errno>:
 8029d00:	4b01      	ldr	r3, [pc, #4]	; (8029d08 <__errno+0x8>)
 8029d02:	6818      	ldr	r0, [r3, #0]
 8029d04:	4770      	bx	lr
 8029d06:	bf00      	nop
 8029d08:	2000011c 	.word	0x2000011c

08029d0c <__libc_init_array>:
 8029d0c:	b570      	push	{r4, r5, r6, lr}
 8029d0e:	4d0d      	ldr	r5, [pc, #52]	; (8029d44 <__libc_init_array+0x38>)
 8029d10:	4c0d      	ldr	r4, [pc, #52]	; (8029d48 <__libc_init_array+0x3c>)
 8029d12:	1b64      	subs	r4, r4, r5
 8029d14:	10a4      	asrs	r4, r4, #2
 8029d16:	2600      	movs	r6, #0
 8029d18:	42a6      	cmp	r6, r4
 8029d1a:	d109      	bne.n	8029d30 <__libc_init_array+0x24>
 8029d1c:	4d0b      	ldr	r5, [pc, #44]	; (8029d4c <__libc_init_array+0x40>)
 8029d1e:	4c0c      	ldr	r4, [pc, #48]	; (8029d50 <__libc_init_array+0x44>)
 8029d20:	f000 fe84 	bl	802aa2c <_init>
 8029d24:	1b64      	subs	r4, r4, r5
 8029d26:	10a4      	asrs	r4, r4, #2
 8029d28:	2600      	movs	r6, #0
 8029d2a:	42a6      	cmp	r6, r4
 8029d2c:	d105      	bne.n	8029d3a <__libc_init_array+0x2e>
 8029d2e:	bd70      	pop	{r4, r5, r6, pc}
 8029d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8029d34:	4798      	blx	r3
 8029d36:	3601      	adds	r6, #1
 8029d38:	e7ee      	b.n	8029d18 <__libc_init_array+0xc>
 8029d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8029d3e:	4798      	blx	r3
 8029d40:	3601      	adds	r6, #1
 8029d42:	e7f2      	b.n	8029d2a <__libc_init_array+0x1e>
 8029d44:	0802f1dc 	.word	0x0802f1dc
 8029d48:	0802f1dc 	.word	0x0802f1dc
 8029d4c:	0802f1dc 	.word	0x0802f1dc
 8029d50:	0802f1f8 	.word	0x0802f1f8

08029d54 <__retarget_lock_init_recursive>:
 8029d54:	4770      	bx	lr

08029d56 <__retarget_lock_acquire_recursive>:
 8029d56:	4770      	bx	lr

08029d58 <__retarget_lock_release_recursive>:
 8029d58:	4770      	bx	lr

08029d5a <memcpy>:
 8029d5a:	440a      	add	r2, r1
 8029d5c:	4291      	cmp	r1, r2
 8029d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8029d62:	d100      	bne.n	8029d66 <memcpy+0xc>
 8029d64:	4770      	bx	lr
 8029d66:	b510      	push	{r4, lr}
 8029d68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029d70:	4291      	cmp	r1, r2
 8029d72:	d1f9      	bne.n	8029d68 <memcpy+0xe>
 8029d74:	bd10      	pop	{r4, pc}
	...

08029d78 <__register_exitproc>:
 8029d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029d7c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8029e30 <__register_exitproc+0xb8>
 8029d80:	4606      	mov	r6, r0
 8029d82:	f8d8 0000 	ldr.w	r0, [r8]
 8029d86:	461f      	mov	r7, r3
 8029d88:	460d      	mov	r5, r1
 8029d8a:	4691      	mov	r9, r2
 8029d8c:	f7ff ffe3 	bl	8029d56 <__retarget_lock_acquire_recursive>
 8029d90:	4b23      	ldr	r3, [pc, #140]	; (8029e20 <__register_exitproc+0xa8>)
 8029d92:	681c      	ldr	r4, [r3, #0]
 8029d94:	b934      	cbnz	r4, 8029da4 <__register_exitproc+0x2c>
 8029d96:	4c23      	ldr	r4, [pc, #140]	; (8029e24 <__register_exitproc+0xac>)
 8029d98:	601c      	str	r4, [r3, #0]
 8029d9a:	4b23      	ldr	r3, [pc, #140]	; (8029e28 <__register_exitproc+0xb0>)
 8029d9c:	b113      	cbz	r3, 8029da4 <__register_exitproc+0x2c>
 8029d9e:	681b      	ldr	r3, [r3, #0]
 8029da0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029da4:	6863      	ldr	r3, [r4, #4]
 8029da6:	2b1f      	cmp	r3, #31
 8029da8:	dd07      	ble.n	8029dba <__register_exitproc+0x42>
 8029daa:	f8d8 0000 	ldr.w	r0, [r8]
 8029dae:	f7ff ffd3 	bl	8029d58 <__retarget_lock_release_recursive>
 8029db2:	f04f 30ff 	mov.w	r0, #4294967295
 8029db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029dba:	b32e      	cbz	r6, 8029e08 <__register_exitproc+0x90>
 8029dbc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029dc0:	b968      	cbnz	r0, 8029dde <__register_exitproc+0x66>
 8029dc2:	4b1a      	ldr	r3, [pc, #104]	; (8029e2c <__register_exitproc+0xb4>)
 8029dc4:	2b00      	cmp	r3, #0
 8029dc6:	d0f0      	beq.n	8029daa <__register_exitproc+0x32>
 8029dc8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029dcc:	f7ff fc4e 	bl	802966c <malloc>
 8029dd0:	2800      	cmp	r0, #0
 8029dd2:	d0ea      	beq.n	8029daa <__register_exitproc+0x32>
 8029dd4:	2300      	movs	r3, #0
 8029dd6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029dda:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029dde:	6863      	ldr	r3, [r4, #4]
 8029de0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029de4:	2201      	movs	r2, #1
 8029de6:	409a      	lsls	r2, r3
 8029de8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029dec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029df0:	4313      	orrs	r3, r2
 8029df2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8029df6:	2e02      	cmp	r6, #2
 8029df8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029dfc:	bf02      	ittt	eq
 8029dfe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8029e02:	4313      	orreq	r3, r2
 8029e04:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029e08:	6863      	ldr	r3, [r4, #4]
 8029e0a:	f8d8 0000 	ldr.w	r0, [r8]
 8029e0e:	1c5a      	adds	r2, r3, #1
 8029e10:	3302      	adds	r3, #2
 8029e12:	6062      	str	r2, [r4, #4]
 8029e14:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029e18:	f7ff ff9e 	bl	8029d58 <__retarget_lock_release_recursive>
 8029e1c:	2000      	movs	r0, #0
 8029e1e:	e7ca      	b.n	8029db6 <__register_exitproc+0x3e>
 8029e20:	20015b5c 	.word	0x20015b5c
 8029e24:	20015ad0 	.word	0x20015ad0
 8029e28:	0802f180 	.word	0x0802f180
 8029e2c:	0802966d 	.word	0x0802966d
 8029e30:	20000120 	.word	0x20000120

08029e34 <_free_r>:
 8029e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029e36:	2900      	cmp	r1, #0
 8029e38:	d044      	beq.n	8029ec4 <_free_r+0x90>
 8029e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029e3e:	9001      	str	r0, [sp, #4]
 8029e40:	2b00      	cmp	r3, #0
 8029e42:	f1a1 0404 	sub.w	r4, r1, #4
 8029e46:	bfb8      	it	lt
 8029e48:	18e4      	addlt	r4, r4, r3
 8029e4a:	f7ff fcbf 	bl	80297cc <__malloc_lock>
 8029e4e:	4a1e      	ldr	r2, [pc, #120]	; (8029ec8 <_free_r+0x94>)
 8029e50:	9801      	ldr	r0, [sp, #4]
 8029e52:	6813      	ldr	r3, [r2, #0]
 8029e54:	b933      	cbnz	r3, 8029e64 <_free_r+0x30>
 8029e56:	6063      	str	r3, [r4, #4]
 8029e58:	6014      	str	r4, [r2, #0]
 8029e5a:	b003      	add	sp, #12
 8029e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029e60:	f7ff bcba 	b.w	80297d8 <__malloc_unlock>
 8029e64:	42a3      	cmp	r3, r4
 8029e66:	d908      	bls.n	8029e7a <_free_r+0x46>
 8029e68:	6825      	ldr	r5, [r4, #0]
 8029e6a:	1961      	adds	r1, r4, r5
 8029e6c:	428b      	cmp	r3, r1
 8029e6e:	bf01      	itttt	eq
 8029e70:	6819      	ldreq	r1, [r3, #0]
 8029e72:	685b      	ldreq	r3, [r3, #4]
 8029e74:	1949      	addeq	r1, r1, r5
 8029e76:	6021      	streq	r1, [r4, #0]
 8029e78:	e7ed      	b.n	8029e56 <_free_r+0x22>
 8029e7a:	461a      	mov	r2, r3
 8029e7c:	685b      	ldr	r3, [r3, #4]
 8029e7e:	b10b      	cbz	r3, 8029e84 <_free_r+0x50>
 8029e80:	42a3      	cmp	r3, r4
 8029e82:	d9fa      	bls.n	8029e7a <_free_r+0x46>
 8029e84:	6811      	ldr	r1, [r2, #0]
 8029e86:	1855      	adds	r5, r2, r1
 8029e88:	42a5      	cmp	r5, r4
 8029e8a:	d10b      	bne.n	8029ea4 <_free_r+0x70>
 8029e8c:	6824      	ldr	r4, [r4, #0]
 8029e8e:	4421      	add	r1, r4
 8029e90:	1854      	adds	r4, r2, r1
 8029e92:	42a3      	cmp	r3, r4
 8029e94:	6011      	str	r1, [r2, #0]
 8029e96:	d1e0      	bne.n	8029e5a <_free_r+0x26>
 8029e98:	681c      	ldr	r4, [r3, #0]
 8029e9a:	685b      	ldr	r3, [r3, #4]
 8029e9c:	6053      	str	r3, [r2, #4]
 8029e9e:	440c      	add	r4, r1
 8029ea0:	6014      	str	r4, [r2, #0]
 8029ea2:	e7da      	b.n	8029e5a <_free_r+0x26>
 8029ea4:	d902      	bls.n	8029eac <_free_r+0x78>
 8029ea6:	230c      	movs	r3, #12
 8029ea8:	6003      	str	r3, [r0, #0]
 8029eaa:	e7d6      	b.n	8029e5a <_free_r+0x26>
 8029eac:	6825      	ldr	r5, [r4, #0]
 8029eae:	1961      	adds	r1, r4, r5
 8029eb0:	428b      	cmp	r3, r1
 8029eb2:	bf04      	itt	eq
 8029eb4:	6819      	ldreq	r1, [r3, #0]
 8029eb6:	685b      	ldreq	r3, [r3, #4]
 8029eb8:	6063      	str	r3, [r4, #4]
 8029eba:	bf04      	itt	eq
 8029ebc:	1949      	addeq	r1, r1, r5
 8029ebe:	6021      	streq	r1, [r4, #0]
 8029ec0:	6054      	str	r4, [r2, #4]
 8029ec2:	e7ca      	b.n	8029e5a <_free_r+0x26>
 8029ec4:	b003      	add	sp, #12
 8029ec6:	bd30      	pop	{r4, r5, pc}
 8029ec8:	20015984 	.word	0x20015984

08029ecc <__ssputs_r>:
 8029ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029ed0:	688e      	ldr	r6, [r1, #8]
 8029ed2:	461f      	mov	r7, r3
 8029ed4:	42be      	cmp	r6, r7
 8029ed6:	680b      	ldr	r3, [r1, #0]
 8029ed8:	4682      	mov	sl, r0
 8029eda:	460c      	mov	r4, r1
 8029edc:	4690      	mov	r8, r2
 8029ede:	d82c      	bhi.n	8029f3a <__ssputs_r+0x6e>
 8029ee0:	898a      	ldrh	r2, [r1, #12]
 8029ee2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8029ee6:	d026      	beq.n	8029f36 <__ssputs_r+0x6a>
 8029ee8:	6965      	ldr	r5, [r4, #20]
 8029eea:	6909      	ldr	r1, [r1, #16]
 8029eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029ef0:	eba3 0901 	sub.w	r9, r3, r1
 8029ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029ef8:	1c7b      	adds	r3, r7, #1
 8029efa:	444b      	add	r3, r9
 8029efc:	106d      	asrs	r5, r5, #1
 8029efe:	429d      	cmp	r5, r3
 8029f00:	bf38      	it	cc
 8029f02:	461d      	movcc	r5, r3
 8029f04:	0553      	lsls	r3, r2, #21
 8029f06:	d527      	bpl.n	8029f58 <__ssputs_r+0x8c>
 8029f08:	4629      	mov	r1, r5
 8029f0a:	f7ff fbdf 	bl	80296cc <_malloc_r>
 8029f0e:	4606      	mov	r6, r0
 8029f10:	b360      	cbz	r0, 8029f6c <__ssputs_r+0xa0>
 8029f12:	6921      	ldr	r1, [r4, #16]
 8029f14:	464a      	mov	r2, r9
 8029f16:	f7ff ff20 	bl	8029d5a <memcpy>
 8029f1a:	89a3      	ldrh	r3, [r4, #12]
 8029f1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8029f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029f24:	81a3      	strh	r3, [r4, #12]
 8029f26:	6126      	str	r6, [r4, #16]
 8029f28:	6165      	str	r5, [r4, #20]
 8029f2a:	444e      	add	r6, r9
 8029f2c:	eba5 0509 	sub.w	r5, r5, r9
 8029f30:	6026      	str	r6, [r4, #0]
 8029f32:	60a5      	str	r5, [r4, #8]
 8029f34:	463e      	mov	r6, r7
 8029f36:	42be      	cmp	r6, r7
 8029f38:	d900      	bls.n	8029f3c <__ssputs_r+0x70>
 8029f3a:	463e      	mov	r6, r7
 8029f3c:	6820      	ldr	r0, [r4, #0]
 8029f3e:	4632      	mov	r2, r6
 8029f40:	4641      	mov	r1, r8
 8029f42:	f000 fcff 	bl	802a944 <memmove>
 8029f46:	68a3      	ldr	r3, [r4, #8]
 8029f48:	1b9b      	subs	r3, r3, r6
 8029f4a:	60a3      	str	r3, [r4, #8]
 8029f4c:	6823      	ldr	r3, [r4, #0]
 8029f4e:	4433      	add	r3, r6
 8029f50:	6023      	str	r3, [r4, #0]
 8029f52:	2000      	movs	r0, #0
 8029f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f58:	462a      	mov	r2, r5
 8029f5a:	f000 fd2f 	bl	802a9bc <_realloc_r>
 8029f5e:	4606      	mov	r6, r0
 8029f60:	2800      	cmp	r0, #0
 8029f62:	d1e0      	bne.n	8029f26 <__ssputs_r+0x5a>
 8029f64:	6921      	ldr	r1, [r4, #16]
 8029f66:	4650      	mov	r0, sl
 8029f68:	f7ff ff64 	bl	8029e34 <_free_r>
 8029f6c:	230c      	movs	r3, #12
 8029f6e:	f8ca 3000 	str.w	r3, [sl]
 8029f72:	89a3      	ldrh	r3, [r4, #12]
 8029f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029f78:	81a3      	strh	r3, [r4, #12]
 8029f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8029f7e:	e7e9      	b.n	8029f54 <__ssputs_r+0x88>

08029f80 <_svfiprintf_r>:
 8029f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f84:	4698      	mov	r8, r3
 8029f86:	898b      	ldrh	r3, [r1, #12]
 8029f88:	061b      	lsls	r3, r3, #24
 8029f8a:	b09d      	sub	sp, #116	; 0x74
 8029f8c:	4607      	mov	r7, r0
 8029f8e:	460d      	mov	r5, r1
 8029f90:	4614      	mov	r4, r2
 8029f92:	d50e      	bpl.n	8029fb2 <_svfiprintf_r+0x32>
 8029f94:	690b      	ldr	r3, [r1, #16]
 8029f96:	b963      	cbnz	r3, 8029fb2 <_svfiprintf_r+0x32>
 8029f98:	2140      	movs	r1, #64	; 0x40
 8029f9a:	f7ff fb97 	bl	80296cc <_malloc_r>
 8029f9e:	6028      	str	r0, [r5, #0]
 8029fa0:	6128      	str	r0, [r5, #16]
 8029fa2:	b920      	cbnz	r0, 8029fae <_svfiprintf_r+0x2e>
 8029fa4:	230c      	movs	r3, #12
 8029fa6:	603b      	str	r3, [r7, #0]
 8029fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8029fac:	e0d0      	b.n	802a150 <_svfiprintf_r+0x1d0>
 8029fae:	2340      	movs	r3, #64	; 0x40
 8029fb0:	616b      	str	r3, [r5, #20]
 8029fb2:	2300      	movs	r3, #0
 8029fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8029fb6:	2320      	movs	r3, #32
 8029fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8029fc0:	2330      	movs	r3, #48	; 0x30
 8029fc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802a168 <_svfiprintf_r+0x1e8>
 8029fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029fca:	f04f 0901 	mov.w	r9, #1
 8029fce:	4623      	mov	r3, r4
 8029fd0:	469a      	mov	sl, r3
 8029fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029fd6:	b10a      	cbz	r2, 8029fdc <_svfiprintf_r+0x5c>
 8029fd8:	2a25      	cmp	r2, #37	; 0x25
 8029fda:	d1f9      	bne.n	8029fd0 <_svfiprintf_r+0x50>
 8029fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8029fe0:	d00b      	beq.n	8029ffa <_svfiprintf_r+0x7a>
 8029fe2:	465b      	mov	r3, fp
 8029fe4:	4622      	mov	r2, r4
 8029fe6:	4629      	mov	r1, r5
 8029fe8:	4638      	mov	r0, r7
 8029fea:	f7ff ff6f 	bl	8029ecc <__ssputs_r>
 8029fee:	3001      	adds	r0, #1
 8029ff0:	f000 80a9 	beq.w	802a146 <_svfiprintf_r+0x1c6>
 8029ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029ff6:	445a      	add	r2, fp
 8029ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8029ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8029ffe:	2b00      	cmp	r3, #0
 802a000:	f000 80a1 	beq.w	802a146 <_svfiprintf_r+0x1c6>
 802a004:	2300      	movs	r3, #0
 802a006:	f04f 32ff 	mov.w	r2, #4294967295
 802a00a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a00e:	f10a 0a01 	add.w	sl, sl, #1
 802a012:	9304      	str	r3, [sp, #16]
 802a014:	9307      	str	r3, [sp, #28]
 802a016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a01a:	931a      	str	r3, [sp, #104]	; 0x68
 802a01c:	4654      	mov	r4, sl
 802a01e:	2205      	movs	r2, #5
 802a020:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a024:	4850      	ldr	r0, [pc, #320]	; (802a168 <_svfiprintf_r+0x1e8>)
 802a026:	f7d6 f8f3 	bl	8000210 <memchr>
 802a02a:	9a04      	ldr	r2, [sp, #16]
 802a02c:	b9d8      	cbnz	r0, 802a066 <_svfiprintf_r+0xe6>
 802a02e:	06d0      	lsls	r0, r2, #27
 802a030:	bf44      	itt	mi
 802a032:	2320      	movmi	r3, #32
 802a034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a038:	0711      	lsls	r1, r2, #28
 802a03a:	bf44      	itt	mi
 802a03c:	232b      	movmi	r3, #43	; 0x2b
 802a03e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a042:	f89a 3000 	ldrb.w	r3, [sl]
 802a046:	2b2a      	cmp	r3, #42	; 0x2a
 802a048:	d015      	beq.n	802a076 <_svfiprintf_r+0xf6>
 802a04a:	9a07      	ldr	r2, [sp, #28]
 802a04c:	4654      	mov	r4, sl
 802a04e:	2000      	movs	r0, #0
 802a050:	f04f 0c0a 	mov.w	ip, #10
 802a054:	4621      	mov	r1, r4
 802a056:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a05a:	3b30      	subs	r3, #48	; 0x30
 802a05c:	2b09      	cmp	r3, #9
 802a05e:	d94d      	bls.n	802a0fc <_svfiprintf_r+0x17c>
 802a060:	b1b0      	cbz	r0, 802a090 <_svfiprintf_r+0x110>
 802a062:	9207      	str	r2, [sp, #28]
 802a064:	e014      	b.n	802a090 <_svfiprintf_r+0x110>
 802a066:	eba0 0308 	sub.w	r3, r0, r8
 802a06a:	fa09 f303 	lsl.w	r3, r9, r3
 802a06e:	4313      	orrs	r3, r2
 802a070:	9304      	str	r3, [sp, #16]
 802a072:	46a2      	mov	sl, r4
 802a074:	e7d2      	b.n	802a01c <_svfiprintf_r+0x9c>
 802a076:	9b03      	ldr	r3, [sp, #12]
 802a078:	1d19      	adds	r1, r3, #4
 802a07a:	681b      	ldr	r3, [r3, #0]
 802a07c:	9103      	str	r1, [sp, #12]
 802a07e:	2b00      	cmp	r3, #0
 802a080:	bfbb      	ittet	lt
 802a082:	425b      	neglt	r3, r3
 802a084:	f042 0202 	orrlt.w	r2, r2, #2
 802a088:	9307      	strge	r3, [sp, #28]
 802a08a:	9307      	strlt	r3, [sp, #28]
 802a08c:	bfb8      	it	lt
 802a08e:	9204      	strlt	r2, [sp, #16]
 802a090:	7823      	ldrb	r3, [r4, #0]
 802a092:	2b2e      	cmp	r3, #46	; 0x2e
 802a094:	d10c      	bne.n	802a0b0 <_svfiprintf_r+0x130>
 802a096:	7863      	ldrb	r3, [r4, #1]
 802a098:	2b2a      	cmp	r3, #42	; 0x2a
 802a09a:	d134      	bne.n	802a106 <_svfiprintf_r+0x186>
 802a09c:	9b03      	ldr	r3, [sp, #12]
 802a09e:	1d1a      	adds	r2, r3, #4
 802a0a0:	681b      	ldr	r3, [r3, #0]
 802a0a2:	9203      	str	r2, [sp, #12]
 802a0a4:	2b00      	cmp	r3, #0
 802a0a6:	bfb8      	it	lt
 802a0a8:	f04f 33ff 	movlt.w	r3, #4294967295
 802a0ac:	3402      	adds	r4, #2
 802a0ae:	9305      	str	r3, [sp, #20]
 802a0b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802a178 <_svfiprintf_r+0x1f8>
 802a0b4:	7821      	ldrb	r1, [r4, #0]
 802a0b6:	2203      	movs	r2, #3
 802a0b8:	4650      	mov	r0, sl
 802a0ba:	f7d6 f8a9 	bl	8000210 <memchr>
 802a0be:	b138      	cbz	r0, 802a0d0 <_svfiprintf_r+0x150>
 802a0c0:	9b04      	ldr	r3, [sp, #16]
 802a0c2:	eba0 000a 	sub.w	r0, r0, sl
 802a0c6:	2240      	movs	r2, #64	; 0x40
 802a0c8:	4082      	lsls	r2, r0
 802a0ca:	4313      	orrs	r3, r2
 802a0cc:	3401      	adds	r4, #1
 802a0ce:	9304      	str	r3, [sp, #16]
 802a0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a0d4:	4825      	ldr	r0, [pc, #148]	; (802a16c <_svfiprintf_r+0x1ec>)
 802a0d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a0da:	2206      	movs	r2, #6
 802a0dc:	f7d6 f898 	bl	8000210 <memchr>
 802a0e0:	2800      	cmp	r0, #0
 802a0e2:	d038      	beq.n	802a156 <_svfiprintf_r+0x1d6>
 802a0e4:	4b22      	ldr	r3, [pc, #136]	; (802a170 <_svfiprintf_r+0x1f0>)
 802a0e6:	bb1b      	cbnz	r3, 802a130 <_svfiprintf_r+0x1b0>
 802a0e8:	9b03      	ldr	r3, [sp, #12]
 802a0ea:	3307      	adds	r3, #7
 802a0ec:	f023 0307 	bic.w	r3, r3, #7
 802a0f0:	3308      	adds	r3, #8
 802a0f2:	9303      	str	r3, [sp, #12]
 802a0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0f6:	4433      	add	r3, r6
 802a0f8:	9309      	str	r3, [sp, #36]	; 0x24
 802a0fa:	e768      	b.n	8029fce <_svfiprintf_r+0x4e>
 802a0fc:	fb0c 3202 	mla	r2, ip, r2, r3
 802a100:	460c      	mov	r4, r1
 802a102:	2001      	movs	r0, #1
 802a104:	e7a6      	b.n	802a054 <_svfiprintf_r+0xd4>
 802a106:	2300      	movs	r3, #0
 802a108:	3401      	adds	r4, #1
 802a10a:	9305      	str	r3, [sp, #20]
 802a10c:	4619      	mov	r1, r3
 802a10e:	f04f 0c0a 	mov.w	ip, #10
 802a112:	4620      	mov	r0, r4
 802a114:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a118:	3a30      	subs	r2, #48	; 0x30
 802a11a:	2a09      	cmp	r2, #9
 802a11c:	d903      	bls.n	802a126 <_svfiprintf_r+0x1a6>
 802a11e:	2b00      	cmp	r3, #0
 802a120:	d0c6      	beq.n	802a0b0 <_svfiprintf_r+0x130>
 802a122:	9105      	str	r1, [sp, #20]
 802a124:	e7c4      	b.n	802a0b0 <_svfiprintf_r+0x130>
 802a126:	fb0c 2101 	mla	r1, ip, r1, r2
 802a12a:	4604      	mov	r4, r0
 802a12c:	2301      	movs	r3, #1
 802a12e:	e7f0      	b.n	802a112 <_svfiprintf_r+0x192>
 802a130:	ab03      	add	r3, sp, #12
 802a132:	9300      	str	r3, [sp, #0]
 802a134:	462a      	mov	r2, r5
 802a136:	4b0f      	ldr	r3, [pc, #60]	; (802a174 <_svfiprintf_r+0x1f4>)
 802a138:	a904      	add	r1, sp, #16
 802a13a:	4638      	mov	r0, r7
 802a13c:	f3af 8000 	nop.w
 802a140:	1c42      	adds	r2, r0, #1
 802a142:	4606      	mov	r6, r0
 802a144:	d1d6      	bne.n	802a0f4 <_svfiprintf_r+0x174>
 802a146:	89ab      	ldrh	r3, [r5, #12]
 802a148:	065b      	lsls	r3, r3, #25
 802a14a:	f53f af2d 	bmi.w	8029fa8 <_svfiprintf_r+0x28>
 802a14e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a150:	b01d      	add	sp, #116	; 0x74
 802a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a156:	ab03      	add	r3, sp, #12
 802a158:	9300      	str	r3, [sp, #0]
 802a15a:	462a      	mov	r2, r5
 802a15c:	4b05      	ldr	r3, [pc, #20]	; (802a174 <_svfiprintf_r+0x1f4>)
 802a15e:	a904      	add	r1, sp, #16
 802a160:	4638      	mov	r0, r7
 802a162:	f000 f9bd 	bl	802a4e0 <_printf_i>
 802a166:	e7eb      	b.n	802a140 <_svfiprintf_r+0x1c0>
 802a168:	0802f184 	.word	0x0802f184
 802a16c:	0802f18e 	.word	0x0802f18e
 802a170:	00000000 	.word	0x00000000
 802a174:	08029ecd 	.word	0x08029ecd
 802a178:	0802f18a 	.word	0x0802f18a

0802a17c <__sfputc_r>:
 802a17c:	6893      	ldr	r3, [r2, #8]
 802a17e:	3b01      	subs	r3, #1
 802a180:	2b00      	cmp	r3, #0
 802a182:	b410      	push	{r4}
 802a184:	6093      	str	r3, [r2, #8]
 802a186:	da08      	bge.n	802a19a <__sfputc_r+0x1e>
 802a188:	6994      	ldr	r4, [r2, #24]
 802a18a:	42a3      	cmp	r3, r4
 802a18c:	db01      	blt.n	802a192 <__sfputc_r+0x16>
 802a18e:	290a      	cmp	r1, #10
 802a190:	d103      	bne.n	802a19a <__sfputc_r+0x1e>
 802a192:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a196:	f7ff bc6a 	b.w	8029a6e <__swbuf_r>
 802a19a:	6813      	ldr	r3, [r2, #0]
 802a19c:	1c58      	adds	r0, r3, #1
 802a19e:	6010      	str	r0, [r2, #0]
 802a1a0:	7019      	strb	r1, [r3, #0]
 802a1a2:	4608      	mov	r0, r1
 802a1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a1a8:	4770      	bx	lr

0802a1aa <__sfputs_r>:
 802a1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a1ac:	4606      	mov	r6, r0
 802a1ae:	460f      	mov	r7, r1
 802a1b0:	4614      	mov	r4, r2
 802a1b2:	18d5      	adds	r5, r2, r3
 802a1b4:	42ac      	cmp	r4, r5
 802a1b6:	d101      	bne.n	802a1bc <__sfputs_r+0x12>
 802a1b8:	2000      	movs	r0, #0
 802a1ba:	e007      	b.n	802a1cc <__sfputs_r+0x22>
 802a1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a1c0:	463a      	mov	r2, r7
 802a1c2:	4630      	mov	r0, r6
 802a1c4:	f7ff ffda 	bl	802a17c <__sfputc_r>
 802a1c8:	1c43      	adds	r3, r0, #1
 802a1ca:	d1f3      	bne.n	802a1b4 <__sfputs_r+0xa>
 802a1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a1d0 <_vfiprintf_r>:
 802a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a1d4:	460d      	mov	r5, r1
 802a1d6:	b09d      	sub	sp, #116	; 0x74
 802a1d8:	4614      	mov	r4, r2
 802a1da:	4698      	mov	r8, r3
 802a1dc:	4606      	mov	r6, r0
 802a1de:	b118      	cbz	r0, 802a1e8 <_vfiprintf_r+0x18>
 802a1e0:	6a03      	ldr	r3, [r0, #32]
 802a1e2:	b90b      	cbnz	r3, 802a1e8 <_vfiprintf_r+0x18>
 802a1e4:	f7ff fb98 	bl	8029918 <__sinit>
 802a1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a1ea:	07d9      	lsls	r1, r3, #31
 802a1ec:	d405      	bmi.n	802a1fa <_vfiprintf_r+0x2a>
 802a1ee:	89ab      	ldrh	r3, [r5, #12]
 802a1f0:	059a      	lsls	r2, r3, #22
 802a1f2:	d402      	bmi.n	802a1fa <_vfiprintf_r+0x2a>
 802a1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a1f6:	f7ff fdae 	bl	8029d56 <__retarget_lock_acquire_recursive>
 802a1fa:	89ab      	ldrh	r3, [r5, #12]
 802a1fc:	071b      	lsls	r3, r3, #28
 802a1fe:	d501      	bpl.n	802a204 <_vfiprintf_r+0x34>
 802a200:	692b      	ldr	r3, [r5, #16]
 802a202:	b99b      	cbnz	r3, 802a22c <_vfiprintf_r+0x5c>
 802a204:	4629      	mov	r1, r5
 802a206:	4630      	mov	r0, r6
 802a208:	f7ff fc6e 	bl	8029ae8 <__swsetup_r>
 802a20c:	b170      	cbz	r0, 802a22c <_vfiprintf_r+0x5c>
 802a20e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a210:	07dc      	lsls	r4, r3, #31
 802a212:	d504      	bpl.n	802a21e <_vfiprintf_r+0x4e>
 802a214:	f04f 30ff 	mov.w	r0, #4294967295
 802a218:	b01d      	add	sp, #116	; 0x74
 802a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a21e:	89ab      	ldrh	r3, [r5, #12]
 802a220:	0598      	lsls	r0, r3, #22
 802a222:	d4f7      	bmi.n	802a214 <_vfiprintf_r+0x44>
 802a224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a226:	f7ff fd97 	bl	8029d58 <__retarget_lock_release_recursive>
 802a22a:	e7f3      	b.n	802a214 <_vfiprintf_r+0x44>
 802a22c:	2300      	movs	r3, #0
 802a22e:	9309      	str	r3, [sp, #36]	; 0x24
 802a230:	2320      	movs	r3, #32
 802a232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a236:	f8cd 800c 	str.w	r8, [sp, #12]
 802a23a:	2330      	movs	r3, #48	; 0x30
 802a23c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802a3f0 <_vfiprintf_r+0x220>
 802a240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a244:	f04f 0901 	mov.w	r9, #1
 802a248:	4623      	mov	r3, r4
 802a24a:	469a      	mov	sl, r3
 802a24c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a250:	b10a      	cbz	r2, 802a256 <_vfiprintf_r+0x86>
 802a252:	2a25      	cmp	r2, #37	; 0x25
 802a254:	d1f9      	bne.n	802a24a <_vfiprintf_r+0x7a>
 802a256:	ebba 0b04 	subs.w	fp, sl, r4
 802a25a:	d00b      	beq.n	802a274 <_vfiprintf_r+0xa4>
 802a25c:	465b      	mov	r3, fp
 802a25e:	4622      	mov	r2, r4
 802a260:	4629      	mov	r1, r5
 802a262:	4630      	mov	r0, r6
 802a264:	f7ff ffa1 	bl	802a1aa <__sfputs_r>
 802a268:	3001      	adds	r0, #1
 802a26a:	f000 80a9 	beq.w	802a3c0 <_vfiprintf_r+0x1f0>
 802a26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a270:	445a      	add	r2, fp
 802a272:	9209      	str	r2, [sp, #36]	; 0x24
 802a274:	f89a 3000 	ldrb.w	r3, [sl]
 802a278:	2b00      	cmp	r3, #0
 802a27a:	f000 80a1 	beq.w	802a3c0 <_vfiprintf_r+0x1f0>
 802a27e:	2300      	movs	r3, #0
 802a280:	f04f 32ff 	mov.w	r2, #4294967295
 802a284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a288:	f10a 0a01 	add.w	sl, sl, #1
 802a28c:	9304      	str	r3, [sp, #16]
 802a28e:	9307      	str	r3, [sp, #28]
 802a290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a294:	931a      	str	r3, [sp, #104]	; 0x68
 802a296:	4654      	mov	r4, sl
 802a298:	2205      	movs	r2, #5
 802a29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a29e:	4854      	ldr	r0, [pc, #336]	; (802a3f0 <_vfiprintf_r+0x220>)
 802a2a0:	f7d5 ffb6 	bl	8000210 <memchr>
 802a2a4:	9a04      	ldr	r2, [sp, #16]
 802a2a6:	b9d8      	cbnz	r0, 802a2e0 <_vfiprintf_r+0x110>
 802a2a8:	06d1      	lsls	r1, r2, #27
 802a2aa:	bf44      	itt	mi
 802a2ac:	2320      	movmi	r3, #32
 802a2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a2b2:	0713      	lsls	r3, r2, #28
 802a2b4:	bf44      	itt	mi
 802a2b6:	232b      	movmi	r3, #43	; 0x2b
 802a2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a2bc:	f89a 3000 	ldrb.w	r3, [sl]
 802a2c0:	2b2a      	cmp	r3, #42	; 0x2a
 802a2c2:	d015      	beq.n	802a2f0 <_vfiprintf_r+0x120>
 802a2c4:	9a07      	ldr	r2, [sp, #28]
 802a2c6:	4654      	mov	r4, sl
 802a2c8:	2000      	movs	r0, #0
 802a2ca:	f04f 0c0a 	mov.w	ip, #10
 802a2ce:	4621      	mov	r1, r4
 802a2d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a2d4:	3b30      	subs	r3, #48	; 0x30
 802a2d6:	2b09      	cmp	r3, #9
 802a2d8:	d94d      	bls.n	802a376 <_vfiprintf_r+0x1a6>
 802a2da:	b1b0      	cbz	r0, 802a30a <_vfiprintf_r+0x13a>
 802a2dc:	9207      	str	r2, [sp, #28]
 802a2de:	e014      	b.n	802a30a <_vfiprintf_r+0x13a>
 802a2e0:	eba0 0308 	sub.w	r3, r0, r8
 802a2e4:	fa09 f303 	lsl.w	r3, r9, r3
 802a2e8:	4313      	orrs	r3, r2
 802a2ea:	9304      	str	r3, [sp, #16]
 802a2ec:	46a2      	mov	sl, r4
 802a2ee:	e7d2      	b.n	802a296 <_vfiprintf_r+0xc6>
 802a2f0:	9b03      	ldr	r3, [sp, #12]
 802a2f2:	1d19      	adds	r1, r3, #4
 802a2f4:	681b      	ldr	r3, [r3, #0]
 802a2f6:	9103      	str	r1, [sp, #12]
 802a2f8:	2b00      	cmp	r3, #0
 802a2fa:	bfbb      	ittet	lt
 802a2fc:	425b      	neglt	r3, r3
 802a2fe:	f042 0202 	orrlt.w	r2, r2, #2
 802a302:	9307      	strge	r3, [sp, #28]
 802a304:	9307      	strlt	r3, [sp, #28]
 802a306:	bfb8      	it	lt
 802a308:	9204      	strlt	r2, [sp, #16]
 802a30a:	7823      	ldrb	r3, [r4, #0]
 802a30c:	2b2e      	cmp	r3, #46	; 0x2e
 802a30e:	d10c      	bne.n	802a32a <_vfiprintf_r+0x15a>
 802a310:	7863      	ldrb	r3, [r4, #1]
 802a312:	2b2a      	cmp	r3, #42	; 0x2a
 802a314:	d134      	bne.n	802a380 <_vfiprintf_r+0x1b0>
 802a316:	9b03      	ldr	r3, [sp, #12]
 802a318:	1d1a      	adds	r2, r3, #4
 802a31a:	681b      	ldr	r3, [r3, #0]
 802a31c:	9203      	str	r2, [sp, #12]
 802a31e:	2b00      	cmp	r3, #0
 802a320:	bfb8      	it	lt
 802a322:	f04f 33ff 	movlt.w	r3, #4294967295
 802a326:	3402      	adds	r4, #2
 802a328:	9305      	str	r3, [sp, #20]
 802a32a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802a400 <_vfiprintf_r+0x230>
 802a32e:	7821      	ldrb	r1, [r4, #0]
 802a330:	2203      	movs	r2, #3
 802a332:	4650      	mov	r0, sl
 802a334:	f7d5 ff6c 	bl	8000210 <memchr>
 802a338:	b138      	cbz	r0, 802a34a <_vfiprintf_r+0x17a>
 802a33a:	9b04      	ldr	r3, [sp, #16]
 802a33c:	eba0 000a 	sub.w	r0, r0, sl
 802a340:	2240      	movs	r2, #64	; 0x40
 802a342:	4082      	lsls	r2, r0
 802a344:	4313      	orrs	r3, r2
 802a346:	3401      	adds	r4, #1
 802a348:	9304      	str	r3, [sp, #16]
 802a34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a34e:	4829      	ldr	r0, [pc, #164]	; (802a3f4 <_vfiprintf_r+0x224>)
 802a350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a354:	2206      	movs	r2, #6
 802a356:	f7d5 ff5b 	bl	8000210 <memchr>
 802a35a:	2800      	cmp	r0, #0
 802a35c:	d03f      	beq.n	802a3de <_vfiprintf_r+0x20e>
 802a35e:	4b26      	ldr	r3, [pc, #152]	; (802a3f8 <_vfiprintf_r+0x228>)
 802a360:	bb1b      	cbnz	r3, 802a3aa <_vfiprintf_r+0x1da>
 802a362:	9b03      	ldr	r3, [sp, #12]
 802a364:	3307      	adds	r3, #7
 802a366:	f023 0307 	bic.w	r3, r3, #7
 802a36a:	3308      	adds	r3, #8
 802a36c:	9303      	str	r3, [sp, #12]
 802a36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a370:	443b      	add	r3, r7
 802a372:	9309      	str	r3, [sp, #36]	; 0x24
 802a374:	e768      	b.n	802a248 <_vfiprintf_r+0x78>
 802a376:	fb0c 3202 	mla	r2, ip, r2, r3
 802a37a:	460c      	mov	r4, r1
 802a37c:	2001      	movs	r0, #1
 802a37e:	e7a6      	b.n	802a2ce <_vfiprintf_r+0xfe>
 802a380:	2300      	movs	r3, #0
 802a382:	3401      	adds	r4, #1
 802a384:	9305      	str	r3, [sp, #20]
 802a386:	4619      	mov	r1, r3
 802a388:	f04f 0c0a 	mov.w	ip, #10
 802a38c:	4620      	mov	r0, r4
 802a38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a392:	3a30      	subs	r2, #48	; 0x30
 802a394:	2a09      	cmp	r2, #9
 802a396:	d903      	bls.n	802a3a0 <_vfiprintf_r+0x1d0>
 802a398:	2b00      	cmp	r3, #0
 802a39a:	d0c6      	beq.n	802a32a <_vfiprintf_r+0x15a>
 802a39c:	9105      	str	r1, [sp, #20]
 802a39e:	e7c4      	b.n	802a32a <_vfiprintf_r+0x15a>
 802a3a0:	fb0c 2101 	mla	r1, ip, r1, r2
 802a3a4:	4604      	mov	r4, r0
 802a3a6:	2301      	movs	r3, #1
 802a3a8:	e7f0      	b.n	802a38c <_vfiprintf_r+0x1bc>
 802a3aa:	ab03      	add	r3, sp, #12
 802a3ac:	9300      	str	r3, [sp, #0]
 802a3ae:	462a      	mov	r2, r5
 802a3b0:	4b12      	ldr	r3, [pc, #72]	; (802a3fc <_vfiprintf_r+0x22c>)
 802a3b2:	a904      	add	r1, sp, #16
 802a3b4:	4630      	mov	r0, r6
 802a3b6:	f3af 8000 	nop.w
 802a3ba:	4607      	mov	r7, r0
 802a3bc:	1c78      	adds	r0, r7, #1
 802a3be:	d1d6      	bne.n	802a36e <_vfiprintf_r+0x19e>
 802a3c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a3c2:	07d9      	lsls	r1, r3, #31
 802a3c4:	d405      	bmi.n	802a3d2 <_vfiprintf_r+0x202>
 802a3c6:	89ab      	ldrh	r3, [r5, #12]
 802a3c8:	059a      	lsls	r2, r3, #22
 802a3ca:	d402      	bmi.n	802a3d2 <_vfiprintf_r+0x202>
 802a3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a3ce:	f7ff fcc3 	bl	8029d58 <__retarget_lock_release_recursive>
 802a3d2:	89ab      	ldrh	r3, [r5, #12]
 802a3d4:	065b      	lsls	r3, r3, #25
 802a3d6:	f53f af1d 	bmi.w	802a214 <_vfiprintf_r+0x44>
 802a3da:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a3dc:	e71c      	b.n	802a218 <_vfiprintf_r+0x48>
 802a3de:	ab03      	add	r3, sp, #12
 802a3e0:	9300      	str	r3, [sp, #0]
 802a3e2:	462a      	mov	r2, r5
 802a3e4:	4b05      	ldr	r3, [pc, #20]	; (802a3fc <_vfiprintf_r+0x22c>)
 802a3e6:	a904      	add	r1, sp, #16
 802a3e8:	4630      	mov	r0, r6
 802a3ea:	f000 f879 	bl	802a4e0 <_printf_i>
 802a3ee:	e7e4      	b.n	802a3ba <_vfiprintf_r+0x1ea>
 802a3f0:	0802f184 	.word	0x0802f184
 802a3f4:	0802f18e 	.word	0x0802f18e
 802a3f8:	00000000 	.word	0x00000000
 802a3fc:	0802a1ab 	.word	0x0802a1ab
 802a400:	0802f18a 	.word	0x0802f18a

0802a404 <_printf_common>:
 802a404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a408:	4616      	mov	r6, r2
 802a40a:	4699      	mov	r9, r3
 802a40c:	688a      	ldr	r2, [r1, #8]
 802a40e:	690b      	ldr	r3, [r1, #16]
 802a410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a414:	4293      	cmp	r3, r2
 802a416:	bfb8      	it	lt
 802a418:	4613      	movlt	r3, r2
 802a41a:	6033      	str	r3, [r6, #0]
 802a41c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a420:	4607      	mov	r7, r0
 802a422:	460c      	mov	r4, r1
 802a424:	b10a      	cbz	r2, 802a42a <_printf_common+0x26>
 802a426:	3301      	adds	r3, #1
 802a428:	6033      	str	r3, [r6, #0]
 802a42a:	6823      	ldr	r3, [r4, #0]
 802a42c:	0699      	lsls	r1, r3, #26
 802a42e:	bf42      	ittt	mi
 802a430:	6833      	ldrmi	r3, [r6, #0]
 802a432:	3302      	addmi	r3, #2
 802a434:	6033      	strmi	r3, [r6, #0]
 802a436:	6825      	ldr	r5, [r4, #0]
 802a438:	f015 0506 	ands.w	r5, r5, #6
 802a43c:	d106      	bne.n	802a44c <_printf_common+0x48>
 802a43e:	f104 0a19 	add.w	sl, r4, #25
 802a442:	68e3      	ldr	r3, [r4, #12]
 802a444:	6832      	ldr	r2, [r6, #0]
 802a446:	1a9b      	subs	r3, r3, r2
 802a448:	42ab      	cmp	r3, r5
 802a44a:	dc26      	bgt.n	802a49a <_printf_common+0x96>
 802a44c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a450:	1e13      	subs	r3, r2, #0
 802a452:	6822      	ldr	r2, [r4, #0]
 802a454:	bf18      	it	ne
 802a456:	2301      	movne	r3, #1
 802a458:	0692      	lsls	r2, r2, #26
 802a45a:	d42b      	bmi.n	802a4b4 <_printf_common+0xb0>
 802a45c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a460:	4649      	mov	r1, r9
 802a462:	4638      	mov	r0, r7
 802a464:	47c0      	blx	r8
 802a466:	3001      	adds	r0, #1
 802a468:	d01e      	beq.n	802a4a8 <_printf_common+0xa4>
 802a46a:	6823      	ldr	r3, [r4, #0]
 802a46c:	6922      	ldr	r2, [r4, #16]
 802a46e:	f003 0306 	and.w	r3, r3, #6
 802a472:	2b04      	cmp	r3, #4
 802a474:	bf02      	ittt	eq
 802a476:	68e5      	ldreq	r5, [r4, #12]
 802a478:	6833      	ldreq	r3, [r6, #0]
 802a47a:	1aed      	subeq	r5, r5, r3
 802a47c:	68a3      	ldr	r3, [r4, #8]
 802a47e:	bf0c      	ite	eq
 802a480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a484:	2500      	movne	r5, #0
 802a486:	4293      	cmp	r3, r2
 802a488:	bfc4      	itt	gt
 802a48a:	1a9b      	subgt	r3, r3, r2
 802a48c:	18ed      	addgt	r5, r5, r3
 802a48e:	2600      	movs	r6, #0
 802a490:	341a      	adds	r4, #26
 802a492:	42b5      	cmp	r5, r6
 802a494:	d11a      	bne.n	802a4cc <_printf_common+0xc8>
 802a496:	2000      	movs	r0, #0
 802a498:	e008      	b.n	802a4ac <_printf_common+0xa8>
 802a49a:	2301      	movs	r3, #1
 802a49c:	4652      	mov	r2, sl
 802a49e:	4649      	mov	r1, r9
 802a4a0:	4638      	mov	r0, r7
 802a4a2:	47c0      	blx	r8
 802a4a4:	3001      	adds	r0, #1
 802a4a6:	d103      	bne.n	802a4b0 <_printf_common+0xac>
 802a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 802a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a4b0:	3501      	adds	r5, #1
 802a4b2:	e7c6      	b.n	802a442 <_printf_common+0x3e>
 802a4b4:	18e1      	adds	r1, r4, r3
 802a4b6:	1c5a      	adds	r2, r3, #1
 802a4b8:	2030      	movs	r0, #48	; 0x30
 802a4ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a4be:	4422      	add	r2, r4
 802a4c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a4c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a4c8:	3302      	adds	r3, #2
 802a4ca:	e7c7      	b.n	802a45c <_printf_common+0x58>
 802a4cc:	2301      	movs	r3, #1
 802a4ce:	4622      	mov	r2, r4
 802a4d0:	4649      	mov	r1, r9
 802a4d2:	4638      	mov	r0, r7
 802a4d4:	47c0      	blx	r8
 802a4d6:	3001      	adds	r0, #1
 802a4d8:	d0e6      	beq.n	802a4a8 <_printf_common+0xa4>
 802a4da:	3601      	adds	r6, #1
 802a4dc:	e7d9      	b.n	802a492 <_printf_common+0x8e>
	...

0802a4e0 <_printf_i>:
 802a4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a4e4:	7e0f      	ldrb	r7, [r1, #24]
 802a4e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a4e8:	2f78      	cmp	r7, #120	; 0x78
 802a4ea:	4691      	mov	r9, r2
 802a4ec:	4680      	mov	r8, r0
 802a4ee:	460c      	mov	r4, r1
 802a4f0:	469a      	mov	sl, r3
 802a4f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802a4f6:	d807      	bhi.n	802a508 <_printf_i+0x28>
 802a4f8:	2f62      	cmp	r7, #98	; 0x62
 802a4fa:	d80a      	bhi.n	802a512 <_printf_i+0x32>
 802a4fc:	2f00      	cmp	r7, #0
 802a4fe:	f000 80d4 	beq.w	802a6aa <_printf_i+0x1ca>
 802a502:	2f58      	cmp	r7, #88	; 0x58
 802a504:	f000 80c0 	beq.w	802a688 <_printf_i+0x1a8>
 802a508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a50c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a510:	e03a      	b.n	802a588 <_printf_i+0xa8>
 802a512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a516:	2b15      	cmp	r3, #21
 802a518:	d8f6      	bhi.n	802a508 <_printf_i+0x28>
 802a51a:	a101      	add	r1, pc, #4	; (adr r1, 802a520 <_printf_i+0x40>)
 802a51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a520:	0802a579 	.word	0x0802a579
 802a524:	0802a58d 	.word	0x0802a58d
 802a528:	0802a509 	.word	0x0802a509
 802a52c:	0802a509 	.word	0x0802a509
 802a530:	0802a509 	.word	0x0802a509
 802a534:	0802a509 	.word	0x0802a509
 802a538:	0802a58d 	.word	0x0802a58d
 802a53c:	0802a509 	.word	0x0802a509
 802a540:	0802a509 	.word	0x0802a509
 802a544:	0802a509 	.word	0x0802a509
 802a548:	0802a509 	.word	0x0802a509
 802a54c:	0802a691 	.word	0x0802a691
 802a550:	0802a5b9 	.word	0x0802a5b9
 802a554:	0802a64b 	.word	0x0802a64b
 802a558:	0802a509 	.word	0x0802a509
 802a55c:	0802a509 	.word	0x0802a509
 802a560:	0802a6b3 	.word	0x0802a6b3
 802a564:	0802a509 	.word	0x0802a509
 802a568:	0802a5b9 	.word	0x0802a5b9
 802a56c:	0802a509 	.word	0x0802a509
 802a570:	0802a509 	.word	0x0802a509
 802a574:	0802a653 	.word	0x0802a653
 802a578:	682b      	ldr	r3, [r5, #0]
 802a57a:	1d1a      	adds	r2, r3, #4
 802a57c:	681b      	ldr	r3, [r3, #0]
 802a57e:	602a      	str	r2, [r5, #0]
 802a580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a588:	2301      	movs	r3, #1
 802a58a:	e09f      	b.n	802a6cc <_printf_i+0x1ec>
 802a58c:	6820      	ldr	r0, [r4, #0]
 802a58e:	682b      	ldr	r3, [r5, #0]
 802a590:	0607      	lsls	r7, r0, #24
 802a592:	f103 0104 	add.w	r1, r3, #4
 802a596:	6029      	str	r1, [r5, #0]
 802a598:	d501      	bpl.n	802a59e <_printf_i+0xbe>
 802a59a:	681e      	ldr	r6, [r3, #0]
 802a59c:	e003      	b.n	802a5a6 <_printf_i+0xc6>
 802a59e:	0646      	lsls	r6, r0, #25
 802a5a0:	d5fb      	bpl.n	802a59a <_printf_i+0xba>
 802a5a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 802a5a6:	2e00      	cmp	r6, #0
 802a5a8:	da03      	bge.n	802a5b2 <_printf_i+0xd2>
 802a5aa:	232d      	movs	r3, #45	; 0x2d
 802a5ac:	4276      	negs	r6, r6
 802a5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a5b2:	485a      	ldr	r0, [pc, #360]	; (802a71c <_printf_i+0x23c>)
 802a5b4:	230a      	movs	r3, #10
 802a5b6:	e012      	b.n	802a5de <_printf_i+0xfe>
 802a5b8:	682b      	ldr	r3, [r5, #0]
 802a5ba:	6820      	ldr	r0, [r4, #0]
 802a5bc:	1d19      	adds	r1, r3, #4
 802a5be:	6029      	str	r1, [r5, #0]
 802a5c0:	0605      	lsls	r5, r0, #24
 802a5c2:	d501      	bpl.n	802a5c8 <_printf_i+0xe8>
 802a5c4:	681e      	ldr	r6, [r3, #0]
 802a5c6:	e002      	b.n	802a5ce <_printf_i+0xee>
 802a5c8:	0641      	lsls	r1, r0, #25
 802a5ca:	d5fb      	bpl.n	802a5c4 <_printf_i+0xe4>
 802a5cc:	881e      	ldrh	r6, [r3, #0]
 802a5ce:	4853      	ldr	r0, [pc, #332]	; (802a71c <_printf_i+0x23c>)
 802a5d0:	2f6f      	cmp	r7, #111	; 0x6f
 802a5d2:	bf0c      	ite	eq
 802a5d4:	2308      	moveq	r3, #8
 802a5d6:	230a      	movne	r3, #10
 802a5d8:	2100      	movs	r1, #0
 802a5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a5de:	6865      	ldr	r5, [r4, #4]
 802a5e0:	60a5      	str	r5, [r4, #8]
 802a5e2:	2d00      	cmp	r5, #0
 802a5e4:	bfa2      	ittt	ge
 802a5e6:	6821      	ldrge	r1, [r4, #0]
 802a5e8:	f021 0104 	bicge.w	r1, r1, #4
 802a5ec:	6021      	strge	r1, [r4, #0]
 802a5ee:	b90e      	cbnz	r6, 802a5f4 <_printf_i+0x114>
 802a5f0:	2d00      	cmp	r5, #0
 802a5f2:	d04b      	beq.n	802a68c <_printf_i+0x1ac>
 802a5f4:	4615      	mov	r5, r2
 802a5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 802a5fa:	fb03 6711 	mls	r7, r3, r1, r6
 802a5fe:	5dc7      	ldrb	r7, [r0, r7]
 802a600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802a604:	4637      	mov	r7, r6
 802a606:	42bb      	cmp	r3, r7
 802a608:	460e      	mov	r6, r1
 802a60a:	d9f4      	bls.n	802a5f6 <_printf_i+0x116>
 802a60c:	2b08      	cmp	r3, #8
 802a60e:	d10b      	bne.n	802a628 <_printf_i+0x148>
 802a610:	6823      	ldr	r3, [r4, #0]
 802a612:	07de      	lsls	r6, r3, #31
 802a614:	d508      	bpl.n	802a628 <_printf_i+0x148>
 802a616:	6923      	ldr	r3, [r4, #16]
 802a618:	6861      	ldr	r1, [r4, #4]
 802a61a:	4299      	cmp	r1, r3
 802a61c:	bfde      	ittt	le
 802a61e:	2330      	movle	r3, #48	; 0x30
 802a620:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a624:	f105 35ff 	addle.w	r5, r5, #4294967295
 802a628:	1b52      	subs	r2, r2, r5
 802a62a:	6122      	str	r2, [r4, #16]
 802a62c:	f8cd a000 	str.w	sl, [sp]
 802a630:	464b      	mov	r3, r9
 802a632:	aa03      	add	r2, sp, #12
 802a634:	4621      	mov	r1, r4
 802a636:	4640      	mov	r0, r8
 802a638:	f7ff fee4 	bl	802a404 <_printf_common>
 802a63c:	3001      	adds	r0, #1
 802a63e:	d14a      	bne.n	802a6d6 <_printf_i+0x1f6>
 802a640:	f04f 30ff 	mov.w	r0, #4294967295
 802a644:	b004      	add	sp, #16
 802a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a64a:	6823      	ldr	r3, [r4, #0]
 802a64c:	f043 0320 	orr.w	r3, r3, #32
 802a650:	6023      	str	r3, [r4, #0]
 802a652:	4833      	ldr	r0, [pc, #204]	; (802a720 <_printf_i+0x240>)
 802a654:	2778      	movs	r7, #120	; 0x78
 802a656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802a65a:	6823      	ldr	r3, [r4, #0]
 802a65c:	6829      	ldr	r1, [r5, #0]
 802a65e:	061f      	lsls	r7, r3, #24
 802a660:	f851 6b04 	ldr.w	r6, [r1], #4
 802a664:	d402      	bmi.n	802a66c <_printf_i+0x18c>
 802a666:	065f      	lsls	r7, r3, #25
 802a668:	bf48      	it	mi
 802a66a:	b2b6      	uxthmi	r6, r6
 802a66c:	07df      	lsls	r7, r3, #31
 802a66e:	bf48      	it	mi
 802a670:	f043 0320 	orrmi.w	r3, r3, #32
 802a674:	6029      	str	r1, [r5, #0]
 802a676:	bf48      	it	mi
 802a678:	6023      	strmi	r3, [r4, #0]
 802a67a:	b91e      	cbnz	r6, 802a684 <_printf_i+0x1a4>
 802a67c:	6823      	ldr	r3, [r4, #0]
 802a67e:	f023 0320 	bic.w	r3, r3, #32
 802a682:	6023      	str	r3, [r4, #0]
 802a684:	2310      	movs	r3, #16
 802a686:	e7a7      	b.n	802a5d8 <_printf_i+0xf8>
 802a688:	4824      	ldr	r0, [pc, #144]	; (802a71c <_printf_i+0x23c>)
 802a68a:	e7e4      	b.n	802a656 <_printf_i+0x176>
 802a68c:	4615      	mov	r5, r2
 802a68e:	e7bd      	b.n	802a60c <_printf_i+0x12c>
 802a690:	682b      	ldr	r3, [r5, #0]
 802a692:	6826      	ldr	r6, [r4, #0]
 802a694:	6961      	ldr	r1, [r4, #20]
 802a696:	1d18      	adds	r0, r3, #4
 802a698:	6028      	str	r0, [r5, #0]
 802a69a:	0635      	lsls	r5, r6, #24
 802a69c:	681b      	ldr	r3, [r3, #0]
 802a69e:	d501      	bpl.n	802a6a4 <_printf_i+0x1c4>
 802a6a0:	6019      	str	r1, [r3, #0]
 802a6a2:	e002      	b.n	802a6aa <_printf_i+0x1ca>
 802a6a4:	0670      	lsls	r0, r6, #25
 802a6a6:	d5fb      	bpl.n	802a6a0 <_printf_i+0x1c0>
 802a6a8:	8019      	strh	r1, [r3, #0]
 802a6aa:	2300      	movs	r3, #0
 802a6ac:	6123      	str	r3, [r4, #16]
 802a6ae:	4615      	mov	r5, r2
 802a6b0:	e7bc      	b.n	802a62c <_printf_i+0x14c>
 802a6b2:	682b      	ldr	r3, [r5, #0]
 802a6b4:	1d1a      	adds	r2, r3, #4
 802a6b6:	602a      	str	r2, [r5, #0]
 802a6b8:	681d      	ldr	r5, [r3, #0]
 802a6ba:	6862      	ldr	r2, [r4, #4]
 802a6bc:	2100      	movs	r1, #0
 802a6be:	4628      	mov	r0, r5
 802a6c0:	f7d5 fda6 	bl	8000210 <memchr>
 802a6c4:	b108      	cbz	r0, 802a6ca <_printf_i+0x1ea>
 802a6c6:	1b40      	subs	r0, r0, r5
 802a6c8:	6060      	str	r0, [r4, #4]
 802a6ca:	6863      	ldr	r3, [r4, #4]
 802a6cc:	6123      	str	r3, [r4, #16]
 802a6ce:	2300      	movs	r3, #0
 802a6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a6d4:	e7aa      	b.n	802a62c <_printf_i+0x14c>
 802a6d6:	6923      	ldr	r3, [r4, #16]
 802a6d8:	462a      	mov	r2, r5
 802a6da:	4649      	mov	r1, r9
 802a6dc:	4640      	mov	r0, r8
 802a6de:	47d0      	blx	sl
 802a6e0:	3001      	adds	r0, #1
 802a6e2:	d0ad      	beq.n	802a640 <_printf_i+0x160>
 802a6e4:	6823      	ldr	r3, [r4, #0]
 802a6e6:	079b      	lsls	r3, r3, #30
 802a6e8:	d413      	bmi.n	802a712 <_printf_i+0x232>
 802a6ea:	68e0      	ldr	r0, [r4, #12]
 802a6ec:	9b03      	ldr	r3, [sp, #12]
 802a6ee:	4298      	cmp	r0, r3
 802a6f0:	bfb8      	it	lt
 802a6f2:	4618      	movlt	r0, r3
 802a6f4:	e7a6      	b.n	802a644 <_printf_i+0x164>
 802a6f6:	2301      	movs	r3, #1
 802a6f8:	4632      	mov	r2, r6
 802a6fa:	4649      	mov	r1, r9
 802a6fc:	4640      	mov	r0, r8
 802a6fe:	47d0      	blx	sl
 802a700:	3001      	adds	r0, #1
 802a702:	d09d      	beq.n	802a640 <_printf_i+0x160>
 802a704:	3501      	adds	r5, #1
 802a706:	68e3      	ldr	r3, [r4, #12]
 802a708:	9903      	ldr	r1, [sp, #12]
 802a70a:	1a5b      	subs	r3, r3, r1
 802a70c:	42ab      	cmp	r3, r5
 802a70e:	dcf2      	bgt.n	802a6f6 <_printf_i+0x216>
 802a710:	e7eb      	b.n	802a6ea <_printf_i+0x20a>
 802a712:	2500      	movs	r5, #0
 802a714:	f104 0619 	add.w	r6, r4, #25
 802a718:	e7f5      	b.n	802a706 <_printf_i+0x226>
 802a71a:	bf00      	nop
 802a71c:	0802f195 	.word	0x0802f195
 802a720:	0802f1a6 	.word	0x0802f1a6

0802a724 <__sflush_r>:
 802a724:	898a      	ldrh	r2, [r1, #12]
 802a726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a72a:	4605      	mov	r5, r0
 802a72c:	0710      	lsls	r0, r2, #28
 802a72e:	460c      	mov	r4, r1
 802a730:	d458      	bmi.n	802a7e4 <__sflush_r+0xc0>
 802a732:	684b      	ldr	r3, [r1, #4]
 802a734:	2b00      	cmp	r3, #0
 802a736:	dc05      	bgt.n	802a744 <__sflush_r+0x20>
 802a738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a73a:	2b00      	cmp	r3, #0
 802a73c:	dc02      	bgt.n	802a744 <__sflush_r+0x20>
 802a73e:	2000      	movs	r0, #0
 802a740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a746:	2e00      	cmp	r6, #0
 802a748:	d0f9      	beq.n	802a73e <__sflush_r+0x1a>
 802a74a:	2300      	movs	r3, #0
 802a74c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a750:	682f      	ldr	r7, [r5, #0]
 802a752:	6a21      	ldr	r1, [r4, #32]
 802a754:	602b      	str	r3, [r5, #0]
 802a756:	d032      	beq.n	802a7be <__sflush_r+0x9a>
 802a758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a75a:	89a3      	ldrh	r3, [r4, #12]
 802a75c:	075a      	lsls	r2, r3, #29
 802a75e:	d505      	bpl.n	802a76c <__sflush_r+0x48>
 802a760:	6863      	ldr	r3, [r4, #4]
 802a762:	1ac0      	subs	r0, r0, r3
 802a764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a766:	b10b      	cbz	r3, 802a76c <__sflush_r+0x48>
 802a768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a76a:	1ac0      	subs	r0, r0, r3
 802a76c:	2300      	movs	r3, #0
 802a76e:	4602      	mov	r2, r0
 802a770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a772:	6a21      	ldr	r1, [r4, #32]
 802a774:	4628      	mov	r0, r5
 802a776:	47b0      	blx	r6
 802a778:	1c43      	adds	r3, r0, #1
 802a77a:	89a3      	ldrh	r3, [r4, #12]
 802a77c:	d106      	bne.n	802a78c <__sflush_r+0x68>
 802a77e:	6829      	ldr	r1, [r5, #0]
 802a780:	291d      	cmp	r1, #29
 802a782:	d82b      	bhi.n	802a7dc <__sflush_r+0xb8>
 802a784:	4a29      	ldr	r2, [pc, #164]	; (802a82c <__sflush_r+0x108>)
 802a786:	410a      	asrs	r2, r1
 802a788:	07d6      	lsls	r6, r2, #31
 802a78a:	d427      	bmi.n	802a7dc <__sflush_r+0xb8>
 802a78c:	2200      	movs	r2, #0
 802a78e:	6062      	str	r2, [r4, #4]
 802a790:	04d9      	lsls	r1, r3, #19
 802a792:	6922      	ldr	r2, [r4, #16]
 802a794:	6022      	str	r2, [r4, #0]
 802a796:	d504      	bpl.n	802a7a2 <__sflush_r+0x7e>
 802a798:	1c42      	adds	r2, r0, #1
 802a79a:	d101      	bne.n	802a7a0 <__sflush_r+0x7c>
 802a79c:	682b      	ldr	r3, [r5, #0]
 802a79e:	b903      	cbnz	r3, 802a7a2 <__sflush_r+0x7e>
 802a7a0:	6560      	str	r0, [r4, #84]	; 0x54
 802a7a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a7a4:	602f      	str	r7, [r5, #0]
 802a7a6:	2900      	cmp	r1, #0
 802a7a8:	d0c9      	beq.n	802a73e <__sflush_r+0x1a>
 802a7aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a7ae:	4299      	cmp	r1, r3
 802a7b0:	d002      	beq.n	802a7b8 <__sflush_r+0x94>
 802a7b2:	4628      	mov	r0, r5
 802a7b4:	f7ff fb3e 	bl	8029e34 <_free_r>
 802a7b8:	2000      	movs	r0, #0
 802a7ba:	6360      	str	r0, [r4, #52]	; 0x34
 802a7bc:	e7c0      	b.n	802a740 <__sflush_r+0x1c>
 802a7be:	2301      	movs	r3, #1
 802a7c0:	4628      	mov	r0, r5
 802a7c2:	47b0      	blx	r6
 802a7c4:	1c41      	adds	r1, r0, #1
 802a7c6:	d1c8      	bne.n	802a75a <__sflush_r+0x36>
 802a7c8:	682b      	ldr	r3, [r5, #0]
 802a7ca:	2b00      	cmp	r3, #0
 802a7cc:	d0c5      	beq.n	802a75a <__sflush_r+0x36>
 802a7ce:	2b1d      	cmp	r3, #29
 802a7d0:	d001      	beq.n	802a7d6 <__sflush_r+0xb2>
 802a7d2:	2b16      	cmp	r3, #22
 802a7d4:	d101      	bne.n	802a7da <__sflush_r+0xb6>
 802a7d6:	602f      	str	r7, [r5, #0]
 802a7d8:	e7b1      	b.n	802a73e <__sflush_r+0x1a>
 802a7da:	89a3      	ldrh	r3, [r4, #12]
 802a7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a7e0:	81a3      	strh	r3, [r4, #12]
 802a7e2:	e7ad      	b.n	802a740 <__sflush_r+0x1c>
 802a7e4:	690f      	ldr	r7, [r1, #16]
 802a7e6:	2f00      	cmp	r7, #0
 802a7e8:	d0a9      	beq.n	802a73e <__sflush_r+0x1a>
 802a7ea:	0793      	lsls	r3, r2, #30
 802a7ec:	680e      	ldr	r6, [r1, #0]
 802a7ee:	bf08      	it	eq
 802a7f0:	694b      	ldreq	r3, [r1, #20]
 802a7f2:	600f      	str	r7, [r1, #0]
 802a7f4:	bf18      	it	ne
 802a7f6:	2300      	movne	r3, #0
 802a7f8:	eba6 0807 	sub.w	r8, r6, r7
 802a7fc:	608b      	str	r3, [r1, #8]
 802a7fe:	f1b8 0f00 	cmp.w	r8, #0
 802a802:	dd9c      	ble.n	802a73e <__sflush_r+0x1a>
 802a804:	6a21      	ldr	r1, [r4, #32]
 802a806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a808:	4643      	mov	r3, r8
 802a80a:	463a      	mov	r2, r7
 802a80c:	4628      	mov	r0, r5
 802a80e:	47b0      	blx	r6
 802a810:	2800      	cmp	r0, #0
 802a812:	dc06      	bgt.n	802a822 <__sflush_r+0xfe>
 802a814:	89a3      	ldrh	r3, [r4, #12]
 802a816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a81a:	81a3      	strh	r3, [r4, #12]
 802a81c:	f04f 30ff 	mov.w	r0, #4294967295
 802a820:	e78e      	b.n	802a740 <__sflush_r+0x1c>
 802a822:	4407      	add	r7, r0
 802a824:	eba8 0800 	sub.w	r8, r8, r0
 802a828:	e7e9      	b.n	802a7fe <__sflush_r+0xda>
 802a82a:	bf00      	nop
 802a82c:	dfbffffe 	.word	0xdfbffffe

0802a830 <_fflush_r>:
 802a830:	b538      	push	{r3, r4, r5, lr}
 802a832:	690b      	ldr	r3, [r1, #16]
 802a834:	4605      	mov	r5, r0
 802a836:	460c      	mov	r4, r1
 802a838:	b913      	cbnz	r3, 802a840 <_fflush_r+0x10>
 802a83a:	2500      	movs	r5, #0
 802a83c:	4628      	mov	r0, r5
 802a83e:	bd38      	pop	{r3, r4, r5, pc}
 802a840:	b118      	cbz	r0, 802a84a <_fflush_r+0x1a>
 802a842:	6a03      	ldr	r3, [r0, #32]
 802a844:	b90b      	cbnz	r3, 802a84a <_fflush_r+0x1a>
 802a846:	f7ff f867 	bl	8029918 <__sinit>
 802a84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a84e:	2b00      	cmp	r3, #0
 802a850:	d0f3      	beq.n	802a83a <_fflush_r+0xa>
 802a852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a854:	07d0      	lsls	r0, r2, #31
 802a856:	d404      	bmi.n	802a862 <_fflush_r+0x32>
 802a858:	0599      	lsls	r1, r3, #22
 802a85a:	d402      	bmi.n	802a862 <_fflush_r+0x32>
 802a85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a85e:	f7ff fa7a 	bl	8029d56 <__retarget_lock_acquire_recursive>
 802a862:	4628      	mov	r0, r5
 802a864:	4621      	mov	r1, r4
 802a866:	f7ff ff5d 	bl	802a724 <__sflush_r>
 802a86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a86c:	07da      	lsls	r2, r3, #31
 802a86e:	4605      	mov	r5, r0
 802a870:	d4e4      	bmi.n	802a83c <_fflush_r+0xc>
 802a872:	89a3      	ldrh	r3, [r4, #12]
 802a874:	059b      	lsls	r3, r3, #22
 802a876:	d4e1      	bmi.n	802a83c <_fflush_r+0xc>
 802a878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a87a:	f7ff fa6d 	bl	8029d58 <__retarget_lock_release_recursive>
 802a87e:	e7dd      	b.n	802a83c <_fflush_r+0xc>

0802a880 <__swhatbuf_r>:
 802a880:	b570      	push	{r4, r5, r6, lr}
 802a882:	460c      	mov	r4, r1
 802a884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a888:	2900      	cmp	r1, #0
 802a88a:	b096      	sub	sp, #88	; 0x58
 802a88c:	4615      	mov	r5, r2
 802a88e:	461e      	mov	r6, r3
 802a890:	da0d      	bge.n	802a8ae <__swhatbuf_r+0x2e>
 802a892:	89a3      	ldrh	r3, [r4, #12]
 802a894:	f013 0f80 	tst.w	r3, #128	; 0x80
 802a898:	f04f 0100 	mov.w	r1, #0
 802a89c:	bf0c      	ite	eq
 802a89e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802a8a2:	2340      	movne	r3, #64	; 0x40
 802a8a4:	2000      	movs	r0, #0
 802a8a6:	6031      	str	r1, [r6, #0]
 802a8a8:	602b      	str	r3, [r5, #0]
 802a8aa:	b016      	add	sp, #88	; 0x58
 802a8ac:	bd70      	pop	{r4, r5, r6, pc}
 802a8ae:	466a      	mov	r2, sp
 802a8b0:	f000 f862 	bl	802a978 <_fstat_r>
 802a8b4:	2800      	cmp	r0, #0
 802a8b6:	dbec      	blt.n	802a892 <__swhatbuf_r+0x12>
 802a8b8:	9901      	ldr	r1, [sp, #4]
 802a8ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802a8be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802a8c2:	4259      	negs	r1, r3
 802a8c4:	4159      	adcs	r1, r3
 802a8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a8ca:	e7eb      	b.n	802a8a4 <__swhatbuf_r+0x24>

0802a8cc <__smakebuf_r>:
 802a8cc:	898b      	ldrh	r3, [r1, #12]
 802a8ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a8d0:	079d      	lsls	r5, r3, #30
 802a8d2:	4606      	mov	r6, r0
 802a8d4:	460c      	mov	r4, r1
 802a8d6:	d507      	bpl.n	802a8e8 <__smakebuf_r+0x1c>
 802a8d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a8dc:	6023      	str	r3, [r4, #0]
 802a8de:	6123      	str	r3, [r4, #16]
 802a8e0:	2301      	movs	r3, #1
 802a8e2:	6163      	str	r3, [r4, #20]
 802a8e4:	b002      	add	sp, #8
 802a8e6:	bd70      	pop	{r4, r5, r6, pc}
 802a8e8:	ab01      	add	r3, sp, #4
 802a8ea:	466a      	mov	r2, sp
 802a8ec:	f7ff ffc8 	bl	802a880 <__swhatbuf_r>
 802a8f0:	9900      	ldr	r1, [sp, #0]
 802a8f2:	4605      	mov	r5, r0
 802a8f4:	4630      	mov	r0, r6
 802a8f6:	f7fe fee9 	bl	80296cc <_malloc_r>
 802a8fa:	b948      	cbnz	r0, 802a910 <__smakebuf_r+0x44>
 802a8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a900:	059a      	lsls	r2, r3, #22
 802a902:	d4ef      	bmi.n	802a8e4 <__smakebuf_r+0x18>
 802a904:	f023 0303 	bic.w	r3, r3, #3
 802a908:	f043 0302 	orr.w	r3, r3, #2
 802a90c:	81a3      	strh	r3, [r4, #12]
 802a90e:	e7e3      	b.n	802a8d8 <__smakebuf_r+0xc>
 802a910:	89a3      	ldrh	r3, [r4, #12]
 802a912:	6020      	str	r0, [r4, #0]
 802a914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a918:	81a3      	strh	r3, [r4, #12]
 802a91a:	9b00      	ldr	r3, [sp, #0]
 802a91c:	6163      	str	r3, [r4, #20]
 802a91e:	9b01      	ldr	r3, [sp, #4]
 802a920:	6120      	str	r0, [r4, #16]
 802a922:	b15b      	cbz	r3, 802a93c <__smakebuf_r+0x70>
 802a924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a928:	4630      	mov	r0, r6
 802a92a:	f000 f837 	bl	802a99c <_isatty_r>
 802a92e:	b128      	cbz	r0, 802a93c <__smakebuf_r+0x70>
 802a930:	89a3      	ldrh	r3, [r4, #12]
 802a932:	f023 0303 	bic.w	r3, r3, #3
 802a936:	f043 0301 	orr.w	r3, r3, #1
 802a93a:	81a3      	strh	r3, [r4, #12]
 802a93c:	89a3      	ldrh	r3, [r4, #12]
 802a93e:	431d      	orrs	r5, r3
 802a940:	81a5      	strh	r5, [r4, #12]
 802a942:	e7cf      	b.n	802a8e4 <__smakebuf_r+0x18>

0802a944 <memmove>:
 802a944:	4288      	cmp	r0, r1
 802a946:	b510      	push	{r4, lr}
 802a948:	eb01 0402 	add.w	r4, r1, r2
 802a94c:	d902      	bls.n	802a954 <memmove+0x10>
 802a94e:	4284      	cmp	r4, r0
 802a950:	4623      	mov	r3, r4
 802a952:	d807      	bhi.n	802a964 <memmove+0x20>
 802a954:	1e43      	subs	r3, r0, #1
 802a956:	42a1      	cmp	r1, r4
 802a958:	d008      	beq.n	802a96c <memmove+0x28>
 802a95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a95e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a962:	e7f8      	b.n	802a956 <memmove+0x12>
 802a964:	4402      	add	r2, r0
 802a966:	4601      	mov	r1, r0
 802a968:	428a      	cmp	r2, r1
 802a96a:	d100      	bne.n	802a96e <memmove+0x2a>
 802a96c:	bd10      	pop	{r4, pc}
 802a96e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a976:	e7f7      	b.n	802a968 <memmove+0x24>

0802a978 <_fstat_r>:
 802a978:	b538      	push	{r3, r4, r5, lr}
 802a97a:	4d07      	ldr	r5, [pc, #28]	; (802a998 <_fstat_r+0x20>)
 802a97c:	2300      	movs	r3, #0
 802a97e:	4604      	mov	r4, r0
 802a980:	4608      	mov	r0, r1
 802a982:	4611      	mov	r1, r2
 802a984:	602b      	str	r3, [r5, #0]
 802a986:	f7d6 ffe8 	bl	800195a <_fstat>
 802a98a:	1c43      	adds	r3, r0, #1
 802a98c:	d102      	bne.n	802a994 <_fstat_r+0x1c>
 802a98e:	682b      	ldr	r3, [r5, #0]
 802a990:	b103      	cbz	r3, 802a994 <_fstat_r+0x1c>
 802a992:	6023      	str	r3, [r4, #0]
 802a994:	bd38      	pop	{r3, r4, r5, pc}
 802a996:	bf00      	nop
 802a998:	20015ac8 	.word	0x20015ac8

0802a99c <_isatty_r>:
 802a99c:	b538      	push	{r3, r4, r5, lr}
 802a99e:	4d06      	ldr	r5, [pc, #24]	; (802a9b8 <_isatty_r+0x1c>)
 802a9a0:	2300      	movs	r3, #0
 802a9a2:	4604      	mov	r4, r0
 802a9a4:	4608      	mov	r0, r1
 802a9a6:	602b      	str	r3, [r5, #0]
 802a9a8:	f7d6 ffdc 	bl	8001964 <_isatty>
 802a9ac:	1c43      	adds	r3, r0, #1
 802a9ae:	d102      	bne.n	802a9b6 <_isatty_r+0x1a>
 802a9b0:	682b      	ldr	r3, [r5, #0]
 802a9b2:	b103      	cbz	r3, 802a9b6 <_isatty_r+0x1a>
 802a9b4:	6023      	str	r3, [r4, #0]
 802a9b6:	bd38      	pop	{r3, r4, r5, pc}
 802a9b8:	20015ac8 	.word	0x20015ac8

0802a9bc <_realloc_r>:
 802a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a9c0:	4680      	mov	r8, r0
 802a9c2:	4614      	mov	r4, r2
 802a9c4:	460e      	mov	r6, r1
 802a9c6:	b921      	cbnz	r1, 802a9d2 <_realloc_r+0x16>
 802a9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a9cc:	4611      	mov	r1, r2
 802a9ce:	f7fe be7d 	b.w	80296cc <_malloc_r>
 802a9d2:	b92a      	cbnz	r2, 802a9e0 <_realloc_r+0x24>
 802a9d4:	f7ff fa2e 	bl	8029e34 <_free_r>
 802a9d8:	4625      	mov	r5, r4
 802a9da:	4628      	mov	r0, r5
 802a9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a9e0:	f000 f81b 	bl	802aa1a <_malloc_usable_size_r>
 802a9e4:	4284      	cmp	r4, r0
 802a9e6:	4607      	mov	r7, r0
 802a9e8:	d802      	bhi.n	802a9f0 <_realloc_r+0x34>
 802a9ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a9ee:	d812      	bhi.n	802aa16 <_realloc_r+0x5a>
 802a9f0:	4621      	mov	r1, r4
 802a9f2:	4640      	mov	r0, r8
 802a9f4:	f7fe fe6a 	bl	80296cc <_malloc_r>
 802a9f8:	4605      	mov	r5, r0
 802a9fa:	2800      	cmp	r0, #0
 802a9fc:	d0ed      	beq.n	802a9da <_realloc_r+0x1e>
 802a9fe:	42bc      	cmp	r4, r7
 802aa00:	4622      	mov	r2, r4
 802aa02:	4631      	mov	r1, r6
 802aa04:	bf28      	it	cs
 802aa06:	463a      	movcs	r2, r7
 802aa08:	f7ff f9a7 	bl	8029d5a <memcpy>
 802aa0c:	4631      	mov	r1, r6
 802aa0e:	4640      	mov	r0, r8
 802aa10:	f7ff fa10 	bl	8029e34 <_free_r>
 802aa14:	e7e1      	b.n	802a9da <_realloc_r+0x1e>
 802aa16:	4635      	mov	r5, r6
 802aa18:	e7df      	b.n	802a9da <_realloc_r+0x1e>

0802aa1a <_malloc_usable_size_r>:
 802aa1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802aa1e:	1f18      	subs	r0, r3, #4
 802aa20:	2b00      	cmp	r3, #0
 802aa22:	bfbc      	itt	lt
 802aa24:	580b      	ldrlt	r3, [r1, r0]
 802aa26:	18c0      	addlt	r0, r0, r3
 802aa28:	4770      	bx	lr
	...

0802aa2c <_init>:
 802aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aa2e:	bf00      	nop
 802aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802aa32:	bc08      	pop	{r3}
 802aa34:	469e      	mov	lr, r3
 802aa36:	4770      	bx	lr

0802aa38 <_fini>:
 802aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aa3a:	bf00      	nop
 802aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802aa3e:	bc08      	pop	{r3}
 802aa40:	469e      	mov	lr, r3
 802aa42:	4770      	bx	lr
