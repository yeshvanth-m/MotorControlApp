
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b40c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047ec  0802b5e0  0802b5e0  0003b5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802fdcc  0802fdcc  0003fdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802fde4  0802fde4  00099a28  2**0
                  CONTENTS
  5 .ARM          00000008  0802fde4  0802fde4  0003fde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802fdec  0802fdec  00099a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802fdec  0802fdec  0003fdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802fe08  0802fe08  0003fe08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  0802fe10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015c2c  20000124  0802ff34  00040124  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20015d50  0802ff34  00045d50  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00099a28  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  000a0000  2**2
                  ALLOC
 14 ExtFlashSection 00049740  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000002d0  90049740  90049740  00099740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000018  90049a10  90049a10  00099a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .comment      000000c2  00000000  00000000  00099a58  2**0
                  CONTENTS, READONLY
 18 .debug_info   000c832f  00000000  00000000  00099b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000182de  00000000  00000000  00161e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003308  00000000  00000000  0017a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000038ac  00000000  00000000  0017d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  000389b2  00000000  00000000  00180cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0007336d  00000000  00000000  001b968e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0012c060  00000000  00000000  0022c9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000a074  00000000  00000000  00358a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loclists 000347b5  00000000  00000000  00362ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000077  00000000  00000000  00397285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802b5c4 	.word	0x0802b5c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802b5c4 	.word	0x0802b5c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000de8:	4901      	ldr	r1, [pc, #4]	; (8000df0 <vApplicationIdleHook+0x8>)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f008 b9b4 	b.w	8009158 <vTaskSetApplicationTaskTag>
 8000df0:	080020e5 	.word	0x080020e5

08000df4 <CAN_Tx_Callback>:

osTimerId_t can_timer_id;

static void CAN_Tx_Callback (void *argument)
{
	TxData[0] = (rot_ctrl.RPM_M1 >> 8);
 8000df4:	4912      	ldr	r1, [pc, #72]	; (8000e40 <CAN_Tx_Callback+0x4c>)
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <CAN_Tx_Callback+0x50>)
 8000df8:	880b      	ldrh	r3, [r1, #0]
{
 8000dfa:	b430      	push	{r4, r5}
	TxData[0] = (rot_ctrl.RPM_M1 >> 8);
 8000dfc:	0a18      	lsrs	r0, r3, #8
	TxData[1] = (rot_ctrl.RPM_M1 & 0xFF);
 8000dfe:	7053      	strb	r3, [r2, #1]
	TxData[2] = (rot_ctrl.RPM_M2 >> 8);
 8000e00:	884b      	ldrh	r3, [r1, #2]
	TxData[3] = (rot_ctrl.RPM_M2 & 0xFF);
	TxData[4] = (rot_ctrl.RPM_M3 >> 8);
	TxData[5] = (rot_ctrl.RPM_M3 & 0xFF);
	TxData[6] = ((rot_ctrl.ClrFault_M3 << 6) | (rot_ctrl.ClrFault_M1 << 5) | (rot_ctrl.ClrFault_M1 << 4)
 8000e02:	798c      	ldrb	r4, [r1, #6]
	TxData[0] = (rot_ctrl.RPM_M1 >> 8);
 8000e04:	7010      	strb	r0, [r2, #0]
	TxData[2] = (rot_ctrl.RPM_M2 >> 8);
 8000e06:	0a18      	lsrs	r0, r3, #8
	TxData[3] = (rot_ctrl.RPM_M2 & 0xFF);
 8000e08:	70d3      	strb	r3, [r2, #3]
	TxData[4] = (rot_ctrl.RPM_M3 >> 8);
 8000e0a:	888b      	ldrh	r3, [r1, #4]
	TxData[6] = ((rot_ctrl.ClrFault_M3 << 6) | (rot_ctrl.ClrFault_M1 << 5) | (rot_ctrl.ClrFault_M1 << 4)
 8000e0c:	7a0d      	ldrb	r5, [r1, #8]
	TxData[2] = (rot_ctrl.RPM_M2 >> 8);
 8000e0e:	7090      	strb	r0, [r2, #2]
	TxData[4] = (rot_ctrl.RPM_M3 >> 8);
 8000e10:	0a18      	lsrs	r0, r3, #8
	TxData[5] = (rot_ctrl.RPM_M3 & 0xFF);
 8000e12:	7153      	strb	r3, [r2, #5]
	TxData[6] = ((rot_ctrl.ClrFault_M3 << 6) | (rot_ctrl.ClrFault_M1 << 5) | (rot_ctrl.ClrFault_M1 << 4)
 8000e14:	0163      	lsls	r3, r4, #5
	TxData[4] = (rot_ctrl.RPM_M3 >> 8);
 8000e16:	7110      	strb	r0, [r2, #4]
	TxData[6] = ((rot_ctrl.ClrFault_M3 << 6) | (rot_ctrl.ClrFault_M1 << 5) | (rot_ctrl.ClrFault_M1 << 4)
 8000e18:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
				 | (rot_ctrl.Ctrl_M3 << 2) | (rot_ctrl.Ctrl_M3 << 1) | rot_ctrl.Ctrl_M1);
 8000e1c:	7ac8      	ldrb	r0, [r1, #11]
 8000e1e:	7a49      	ldrb	r1, [r1, #9]
 8000e20:	430b      	orrs	r3, r1
	TxData[7] = 0x22;
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e22:	4909      	ldr	r1, [pc, #36]	; (8000e48 <CAN_Tx_Callback+0x54>)
				 | (rot_ctrl.Ctrl_M3 << 2) | (rot_ctrl.Ctrl_M3 << 1) | rot_ctrl.Ctrl_M1);
 8000e24:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8000e28:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8000e2c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <CAN_Tx_Callback+0x58>)
	TxData[6] = ((rot_ctrl.ClrFault_M3 << 6) | (rot_ctrl.ClrFault_M1 << 5) | (rot_ctrl.ClrFault_M1 << 4)
 8000e32:	7193      	strb	r3, [r2, #6]
	TxData[7] = 0x22;
 8000e34:	2322      	movs	r3, #34	; 0x22
 8000e36:	71d3      	strb	r3, [r2, #7]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <CAN_Tx_Callback+0x5c>)
}
 8000e3a:	bc30      	pop	{r4, r5}
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e3c:	f003 bca6 	b.w	800478c <HAL_CAN_AddTxMessage>
 8000e40:	200003d4 	.word	0x200003d4
 8000e44:	20000178 	.word	0x20000178
 8000e48:	20000180 	.word	0x20000180
 8000e4c:	200001cc 	.word	0x200001cc
 8000e50:	20000198 	.word	0x20000198

08000e54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000e56:	2064      	movs	r0, #100	; 0x64
 8000e58:	f006 fb16 	bl	8007488 <osDelay>
  for(;;)
 8000e5c:	e7fb      	b.n	8000e56 <StartDefaultTask+0x2>
	...

08000e60 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8000e60:	b538      	push	{r3, r4, r5, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000e62:	4c20      	ldr	r4, [pc, #128]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4d20      	ldr	r5, [pc, #128]	; (8000ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000e68:	4623      	mov	r3, r4
 8000e6a:	462a      	mov	r2, r5
 8000e6c:	f003 fcd8 	bl	8004820 <HAL_CAN_GetRxMessage>
 8000e70:	bb30      	cbnz	r0, 8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		if (RxHeader.StdId == 2)
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d124      	bne.n	8000ec2 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
			rot_stats.RPM_M1   = (RxData[0] << 8) | RxData[1];
 8000e78:	8822      	ldrh	r2, [r4, #0]
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000e7c:	ba52      	rev16	r2, r2
 8000e7e:	801a      	strh	r2, [r3, #0]
			rot_stats.RPM_M2   = (RxData[2] << 8) | RxData[3];
 8000e80:	8862      	ldrh	r2, [r4, #2]
 8000e82:	ba52      	rev16	r2, r2
 8000e84:	805a      	strh	r2, [r3, #2]
			rot_stats.RPM_M3   = (RxData[4] << 8) | RxData[5];
 8000e86:	88a2      	ldrh	r2, [r4, #4]
 8000e88:	ba52      	rev16	r2, r2
 8000e8a:	809a      	strh	r2, [r3, #4]
			rot_stats.Stat_M1  = ((RxData[6] & 0x10) >> 4) ;
 8000e8c:	79a2      	ldrb	r2, [r4, #6]
 8000e8e:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8000e92:	7199      	strb	r1, [r3, #6]
			rot_stats.Stat_M2  = ((RxData[6] & 0x20) >> 5);
 8000e94:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8000e98:	71d9      	strb	r1, [r3, #7]
			rot_stats.Stat_M3  = ((RxData[6] & 0x40) >> 6);
 8000e9a:	f3c2 1180 	ubfx	r1, r2, #6, #1
			rot_stats.Fault_M3 = RxData[6] & 0xF;
 8000e9e:	f012 020f 	ands.w	r2, r2, #15
			rot_stats.Stat_M3  = ((RxData[6] & 0x40) >> 6);
 8000ea2:	7219      	strb	r1, [r3, #8]
			rot_stats.Fault_M3 = RxData[6] & 0xF;
 8000ea4:	bf18      	it	ne
 8000ea6:	2201      	movne	r2, #1
 8000ea8:	72da      	strb	r2, [r3, #11]
			rot_stats.Fault_M2 = ((RxData[7] & 0xF0) >> 4);
 8000eaa:	79e2      	ldrb	r2, [r4, #7]
 8000eac:	0911      	lsrs	r1, r2, #4
 8000eae:	bf14      	ite	ne
 8000eb0:	2101      	movne	r1, #1
 8000eb2:	2100      	moveq	r1, #0
			rot_stats.Fault_M1 = (RxData[7] & 0x0F);
 8000eb4:	f012 020f 	ands.w	r2, r2, #15
			rot_stats.Fault_M2 = ((RxData[7] & 0xF0) >> 4);
 8000eb8:	7299      	strb	r1, [r3, #10]
			rot_stats.Fault_M1 = (RxData[7] & 0x0F);
 8000eba:	bf18      	it	ne
 8000ebc:	2201      	movne	r2, #1
 8000ebe:	725a      	strb	r2, [r3, #9]
}
 8000ec0:	bd38      	pop	{r3, r4, r5, pc}
		if (RxHeader.StdId == 3)
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d1fc      	bne.n	8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
			temp_stats.T_Chip = (RxData[0] << 8) | RxData[1];
 8000ec6:	8822      	ldrh	r2, [r4, #0]
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000eca:	ba52      	rev16	r2, r2
 8000ecc:	801a      	strh	r2, [r3, #0]
			temp_stats.T_M1   = (RxData[2] << 8) | RxData[3];
 8000ece:	8862      	ldrh	r2, [r4, #2]
 8000ed0:	ba52      	rev16	r2, r2
 8000ed2:	805a      	strh	r2, [r3, #2]
			temp_stats.T_M2   = (RxData[4] << 8) | RxData[5];
 8000ed4:	88a2      	ldrh	r2, [r4, #4]
 8000ed6:	ba52      	rev16	r2, r2
 8000ed8:	809a      	strh	r2, [r3, #4]
			temp_stats.T_M3   = (RxData[6] << 8) | RxData[7];
 8000eda:	88e2      	ldrh	r2, [r4, #6]
 8000edc:	ba52      	rev16	r2, r2
 8000ede:	80da      	strh	r2, [r3, #6]
}
 8000ee0:	e7ee      	b.n	8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000ee2:	bf00      	nop
 8000ee4:	20000150 	.word	0x20000150
 8000ee8:	20000158 	.word	0x20000158
 8000eec:	200003e0 	.word	0x200003e0
 8000ef0:	200003ec 	.word	0x200003ec

08000ef4 <setup_CAN>:
{
 8000ef4:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IDE = CAN_ID_STD;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <setup_CAN+0x60>)
 8000ef8:	2400      	movs	r4, #0
	TxHeader.StdId = 0x001;
 8000efa:	2601      	movs	r6, #1
	TxHeader.DLC = 8;
 8000efc:	2208      	movs	r2, #8
	TxData[0] = 0x03;
 8000efe:	2103      	movs	r1, #3
	HAL_CAN_Start(&hcan1);
 8000f00:	4d15      	ldr	r5, [pc, #84]	; (8000f58 <setup_CAN+0x64>)
	TxHeader.StdId = 0x001;
 8000f02:	601e      	str	r6, [r3, #0]
	TxHeader.DLC = 8;
 8000f04:	611a      	str	r2, [r3, #16]
	TxData[1] = 0xE8;
 8000f06:	22e8      	movs	r2, #232	; 0xe8
	HAL_CAN_Start(&hcan1);
 8000f08:	4628      	mov	r0, r5
	TxHeader.RTR = CAN_RTR_DATA;
 8000f0a:	e9c3 4402 	strd	r4, r4, [r3, #8]
	TxData[0] = 0x03;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <setup_CAN+0x68>)
	TxData[1] = 0xE8;
 8000f10:	705a      	strb	r2, [r3, #1]
	TxData[3] = 0xE8;
 8000f12:	70da      	strb	r2, [r3, #3]
	TxData[5] = 0xE8;
 8000f14:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x77;
 8000f16:	2277      	movs	r2, #119	; 0x77
	TxData[0] = 0x03;
 8000f18:	7019      	strb	r1, [r3, #0]
	TxData[6] = 0x77;
 8000f1a:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x22;
 8000f1c:	2222      	movs	r2, #34	; 0x22
	TxData[2] = 0x03;
 8000f1e:	7099      	strb	r1, [r3, #2]
	TxData[4] = 0x03;
 8000f20:	7119      	strb	r1, [r3, #4]
	TxData[7] = 0x22;
 8000f22:	71da      	strb	r2, [r3, #7]
	HAL_CAN_Start(&hcan1);
 8000f24:	f003 fc04 	bl	8004730 <HAL_CAN_Start>
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f28:	490d      	ldr	r1, [pc, #52]	; (8000f60 <setup_CAN+0x6c>)
	canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can
 8000f2a:	230e      	movs	r3, #14
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000f2c:	4628      	mov	r0, r5
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f2e:	620e      	str	r6, [r1, #32]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000f30:	610c      	str	r4, [r1, #16]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000f32:	614c      	str	r4, [r1, #20]
	canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can
 8000f34:	624b      	str	r3, [r1, #36]	; 0x24
	canfilterconfig.FilterIdLow = 0;
 8000f36:	e9c1 4400 	strd	r4, r4, [r1]
	canfilterconfig.FilterMaskIdLow = 0;
 8000f3a:	e9c1 4402 	strd	r4, r4, [r1, #8]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f3e:	e9c1 4606 	strd	r4, r6, [r1, #24]
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000f42:	f003 fb6f 	bl	8004624 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f46:	4628      	mov	r0, r5
 8000f48:	2102      	movs	r1, #2
}
 8000f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000f4e:	f003 bcde 	b.w	800490e <HAL_CAN_ActivateNotification>
 8000f52:	bf00      	nop
 8000f54:	20000180 	.word	0x20000180
 8000f58:	200001cc 	.word	0x200001cc
 8000f5c:	20000178 	.word	0x20000178
 8000f60:	200001a0 	.word	0x200001a0

08000f64 <SystemClock_Config>:
{
 8000f64:	b510      	push	{r4, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f68:	2210      	movs	r2, #16
 8000f6a:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	a80a      	add	r0, sp, #40	; 0x28
 8000f70:	f029 fbde 	bl	802a730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	2214      	movs	r2, #20
 8000f76:	2100      	movs	r1, #0
 8000f78:	a803      	add	r0, sp, #12
 8000f7a:	f029 fbd9 	bl	802a730 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f80:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <SystemClock_Config+0x94>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb8:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000fbc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fc0:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000fc4:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f005 fa1a 	bl	8006400 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fcc:	f004 febc 	bl	8005d48 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd2:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fd4:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fde:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fe6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fea:	f005 fbf1 	bl	80067d0 <HAL_RCC_ClockConfig>
}
 8000fee:	b014      	add	sp, #80	; 0x50
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <main>:
{
 8000ffc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001000:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001002:	2210      	movs	r2, #16
 8001004:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001006:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001008:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800100a:	f04f 4a10 	mov.w	sl, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800100e:	f029 fb8f 	bl	802a730 <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001012:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8001014:	f003 fdfa 	bl	8004c0c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001018:	4bc7      	ldr	r3, [pc, #796]	; (8001338 <main+0x33c>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800101a:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800101c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001020:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001022:	e9cd a30e 	strd	sl, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001026:	f003 fe0f 	bl	8004c48 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800102a:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800102c:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800102e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001032:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001036:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800103a:	f003 fe05 	bl	8004c48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800103e:	2004      	movs	r0, #4
 8001040:	f003 fdf2 	bl	8004c28 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001048:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800104c:	4abb      	ldr	r2, [pc, #748]	; (800133c <main+0x340>)
 800104e:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001052:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001056:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800105a:	6953      	ldr	r3, [r2, #20]
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001066:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800106a:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800106e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001072:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001076:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800107a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800107e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001082:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001084:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001088:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800108a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800108e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001090:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001094:	d2f9      	bcs.n	800108a <main+0x8e>
    } while(sets-- != 0U);
 8001096:	3b20      	subs	r3, #32
 8001098:	f113 0f20 	cmn.w	r3, #32
 800109c:	d1f2      	bne.n	8001084 <main+0x88>
 800109e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010a2:	6953      	ldr	r3, [r2, #20]
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010ae:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80010b2:	f003 fa05 	bl	80044c0 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2400      	movs	r4, #0
  SystemClock_Config();
 80010b8:	f7ff ff54 	bl	8000f64 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	2214      	movs	r2, #20
 80010be:	2100      	movs	r1, #0
 80010c0:	a80d      	add	r0, sp, #52	; 0x34
 80010c2:	f029 fb35 	bl	802a730 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c6:	4b9e      	ldr	r3, [pc, #632]	; (8001340 <main+0x344>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010c8:	2110      	movs	r1, #16
 80010ca:	489e      	ldr	r0, [pc, #632]	; (8001344 <main+0x348>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2701      	movs	r7, #1
 80010d0:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d8:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80010dc:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 80010e0:	4d99      	ldr	r5, [pc, #612]	; (8001348 <main+0x34c>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010e2:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
 80010e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010ea:	4e98      	ldr	r6, [pc, #608]	; (800134c <main+0x350>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ec:	f002 0210 	and.w	r2, r2, #16
 80010f0:	9202      	str	r2, [sp, #8]
 80010f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f6:	f042 0202 	orr.w	r2, r2, #2
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
 80010fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fe:	f002 0202 	and.w	r2, r2, #2
 8001102:	9203      	str	r2, [sp, #12]
 8001104:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
 800110e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001110:	f002 0201 	and.w	r2, r2, #1
 8001114:	9204      	str	r2, [sp, #16]
 8001116:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
 8001120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001122:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001126:	9205      	str	r2, [sp, #20]
 8001128:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800112a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800112c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
 8001132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001134:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001138:	9206      	str	r2, [sp, #24]
 800113a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800113e:	f042 0208 	orr.w	r2, r2, #8
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
 8001144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001146:	f002 0208 	and.w	r2, r2, #8
 800114a:	9207      	str	r2, [sp, #28]
 800114c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800114e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001154:	631a      	str	r2, [r3, #48]	; 0x30
 8001156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001158:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800115c:	9208      	str	r2, [sp, #32]
 800115e:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	631a      	str	r2, [r3, #48]	; 0x30
 8001168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116a:	f002 0220 	and.w	r2, r2, #32
 800116e:	9209      	str	r2, [sp, #36]	; 0x24
 8001170:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
 800117a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001180:	920a      	str	r2, [sp, #40]	; 0x28
 8001182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
 800118c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001192:	920b      	str	r2, [sp, #44]	; 0x2c
 8001194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001198:	f042 0204 	orr.w	r2, r2, #4
 800119c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	930c      	str	r3, [sp, #48]	; 0x30
 80011a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80011aa:	f004 f89f 	bl	80052ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2108      	movs	r1, #8
 80011b2:	4867      	ldr	r0, [pc, #412]	; (8001350 <main+0x354>)
 80011b4:	f004 f89a 	bl	80052ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011be:	4865      	ldr	r0, [pc, #404]	; (8001354 <main+0x358>)
 80011c0:	f004 f894 	bl	80052ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	21c0      	movs	r1, #192	; 0xc0
 80011c8:	4863      	ldr	r0, [pc, #396]	; (8001358 <main+0x35c>)
 80011ca:	f004 f88f 	bl	80052ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	4862      	ldr	r0, [pc, #392]	; (800135c <main+0x360>)
 80011d4:	f004 f88a 	bl	80052ec <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 80011d8:	a90d      	add	r1, sp, #52	; 0x34
 80011da:	485a      	ldr	r0, [pc, #360]	; (8001344 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f003 fefa 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80011e8:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80011ea:	a90d      	add	r1, sp, #52	; 0x34
 80011ec:	4858      	ldr	r0, [pc, #352]	; (8001350 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f003 fef1 	bl	8004fdc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80011fa:	a90d      	add	r1, sp, #52	; 0x34
 80011fc:	4855      	ldr	r0, [pc, #340]	; (8001354 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001206:	f003 fee9 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 800120a:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	a90d      	add	r1, sp, #52	; 0x34
 800120e:	4852      	ldr	r0, [pc, #328]	; (8001358 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f003 fee0 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 800121c:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800121e:	a90d      	add	r1, sp, #52	; 0x34
 8001220:	484e      	ldr	r0, [pc, #312]	; (800135c <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800122a:	f003 fed7 	bl	8004fdc <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800122e:	484c      	ldr	r0, [pc, #304]	; (8001360 <main+0x364>)
 8001230:	494c      	ldr	r1, [pc, #304]	; (8001364 <main+0x368>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001232:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001234:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001236:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001238:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800123c:	f003 fd30 	bl	8004ca0 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 8001240:	4949      	ldr	r1, [pc, #292]	; (8001368 <main+0x36c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001242:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001244:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001248:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 800124c:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8001250:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001254:	f003 fdc1 	bl	8004dda <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001258:	4639      	mov	r1, r7
 800125a:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800125c:	4d43      	ldr	r5, [pc, #268]	; (800136c <main+0x370>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800125e:	f003 fe75 	bl	8004f4c <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001262:	2340      	movs	r3, #64	; 0x40
 8001264:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001268:	4941      	ldr	r1, [pc, #260]	; (8001370 <main+0x374>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800126a:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800126c:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800126e:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001270:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001272:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001276:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800127a:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800127e:	f04f 0a02 	mov.w	sl, #2
 8001282:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001284:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001288:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800128a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800128e:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.RowCycleDelay = 7;
 8001292:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001296:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RPDelay = 2;
 800129a:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800129e:	f005 fded 	bl	8006e7c <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012a2:	4629      	mov	r1, r5
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 80012aa:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80012ac:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80012b0:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012b4:	f005 fe02 	bl	8006ebc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80012b8:	4638      	mov	r0, r7
 80012ba:	f003 f925 	bl	8004508 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012be:	4629      	mov	r1, r5
 80012c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c4:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80012c6:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80012ca:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012ce:	f005 fdf5 	bl	8006ebc <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 80012d2:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012d4:	4629      	mov	r1, r5
 80012d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012da:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80012dc:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80012e0:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012e4:	f005 fdea 	bl	8006ebc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80012e8:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f0:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80012f2:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80012f4:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 80012f6:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 80012f8:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80012fa:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80012fc:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001300:	f005 fddc 	bl	8006ebc <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001304:	f240 712b 	movw	r1, #1835	; 0x72b
 8001308:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 800130a:	4d1a      	ldr	r5, [pc, #104]	; (8001374 <main+0x378>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800130c:	f005 fdf5 	bl	8006efa <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001310:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001314:	f243 02d2 	movw	r2, #12498	; 0x30d2
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 8001318:	2064      	movs	r0, #100	; 0x64
  hltdc.Init.AccumulatedActiveH = 283;
 800131a:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800131e:	601a      	str	r2, [r3, #0]
  HAL_Delay(100); //Delay to fix initialization issue on some boards 
 8001320:	f003 f8f2 	bl	8004508 <HAL_Delay>
  hi2c3.Init.Timing = 0x20404768;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <main+0x37c>)
 8001326:	4a15      	ldr	r2, [pc, #84]	; (800137c <main+0x380>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001328:	4628      	mov	r0, r5
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 800132c:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001330:	e9c5 4702 	strd	r4, r7, [r5, #8]
 8001334:	e024      	b.n	8001380 <main+0x384>
 8001336:	bf00      	nop
 8001338:	0300001b 	.word	0x0300001b
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400
 8001348:	20000218 	.word	0x20000218
 800134c:	200003a0 	.word	0x200003a0
 8001350:	40022800 	.word	0x40022800
 8001354:	40022000 	.word	0x40022000
 8001358:	40020800 	.word	0x40020800
 800135c:	40021800 	.word	0x40021800
 8001360:	200001f4 	.word	0x200001f4
 8001364:	40023000 	.word	0x40023000
 8001368:	4002b000 	.word	0x4002b000
 800136c:	20000140 	.word	0x20000140
 8001370:	a0000140 	.word	0xa0000140
 8001374:	20000258 	.word	0x20000258
 8001378:	20404768 	.word	0x20404768
 800137c:	40005c00 	.word	0x40005c00
  hi2c3.Init.OwnAddress2 = 0;
 8001380:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001384:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001388:	f004 f8d8 	bl	800553c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138c:	4621      	mov	r1, r4
 800138e:	4628      	mov	r0, r5
 8001390:	f004 faf6 	bl	8005980 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001394:	4621      	mov	r1, r4
 8001396:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8001398:	4d4d      	ldr	r5, [pc, #308]	; (80014d0 <main+0x4d4>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800139a:	f004 fb17 	bl	80059cc <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800139e:	2234      	movs	r2, #52	; 0x34
 80013a0:	4621      	mov	r1, r4
 80013a2:	eb0d 0002 	add.w	r0, sp, r2
 80013a6:	f029 f9c3 	bl	802a730 <memset>
  hltdc.Instance = LTDC;
 80013aa:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <main+0x4d8>)
  hltdc.Init.VerticalSync = 9;
 80013ac:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 80013ae:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 80013b0:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 80013b4:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013b6:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 80013b8:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013bc:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 80013c0:	2309      	movs	r3, #9
 80013c2:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 80013c6:	230b      	movs	r3, #11
 80013c8:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 80013cc:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013d0:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80013d2:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 80013d6:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013da:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 80013de:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013e2:	f004 fb9b 	bl	8005b1c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80013e6:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013e8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 80013ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 80013f0:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013f4:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 80013f6:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 80013f8:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80013fa:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 80013fe:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 8001402:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001406:	2105      	movs	r1, #5
 8001408:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 800140c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8001410:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 8001414:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001418:	4622      	mov	r2, r4
 800141a:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800141c:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001420:	f004 fc47 	bl	8005cb2 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 8001424:	482c      	ldr	r0, [pc, #176]	; (80014d8 <main+0x4dc>)
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <main+0x4e0>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001428:	6204      	str	r4, [r0, #32]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800142a:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ClockPrescaler = 1;
 800142e:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001432:	f04f 0818 	mov.w	r8, #24
 8001436:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  hcan1.Init.Prescaler = 27;
 800143a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8001510 <main+0x514>
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800143e:	e9c0 8304 	strd	r8, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001442:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001446:	f004 fd99 	bl	8005f7c <HAL_QSPI_Init>
  BSP_QSPI_Init();
 800144a:	f002 feb7 	bl	80041bc <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 800144e:	f002 fdfb 	bl	8004048 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001452:	205c      	movs	r0, #92	; 0x5c
 8001454:	f003 fbc8 	bl	8004be8 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 8001458:	f000 fbc4 	bl	8001be4 <MX_LIBJPEG_Init>
  hcan1.Instance = CAN1;
 800145c:	4820      	ldr	r0, [pc, #128]	; (80014e0 <main+0x4e4>)
  hcan1.Init.Prescaler = 27;
 800145e:	231b      	movs	r3, #27
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001460:	6184      	str	r4, [r0, #24]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001462:	8384      	strh	r4, [r0, #28]
  hcan1.Init.Prescaler = 27;
 8001464:	e9c0 9300 	strd	r9, r3, [r0]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800146c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001470:	e9c0 3404 	strd	r3, r4, [r0, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001474:	f003 f85a 	bl	800452c <HAL_CAN_Init>
  MX_TouchGFX_Init();
 8001478:	f000 fbe0 	bl	8001c3c <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 800147c:	f000 fbdd 	bl	8001c3a <MX_TouchGFX_PreOSInit>
  setup_CAN();
 8001480:	f7ff fd38 	bl	8000ef4 <setup_CAN>
  osKernelInitialize();
 8001484:	f005 ff72 	bl	800736c <osKernelInitialize>
  can_timer_id = osTimerNew(CAN_Tx_Callback, osTimerPeriodic, NULL, NULL);
 8001488:	4622      	mov	r2, r4
 800148a:	4623      	mov	r3, r4
 800148c:	4639      	mov	r1, r7
 800148e:	4815      	ldr	r0, [pc, #84]	; (80014e4 <main+0x4e8>)
 8001490:	f006 f814 	bl	80074bc <osTimerNew>
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <main+0x4ec>)
  osTimerStart(can_timer_id, 100U);
 8001496:	2164      	movs	r1, #100	; 0x64
  can_timer_id = osTimerNew(CAN_Tx_Callback, osTimerPeriodic, NULL, NULL);
 8001498:	6018      	str	r0, [r3, #0]
  osTimerStart(can_timer_id, 100U);
 800149a:	f006 f84d 	bl	8007538 <osTimerStart>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <main+0x4f0>)
 80014a0:	4621      	mov	r1, r4
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <main+0x4f4>)
 80014a4:	f005 ff9c 	bl	80073e0 <osThreadNew>
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <main+0x4f8>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <main+0x4fc>)
 80014ac:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014ae:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <main+0x500>)
 80014b2:	f005 ff95 	bl	80073e0 <osThreadNew>
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <main+0x504>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <main+0x508>)
 80014ba:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80014bc:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80014be:	4812      	ldr	r0, [pc, #72]	; (8001508 <main+0x50c>)
 80014c0:	f005 ff8e 	bl	80073e0 <osThreadNew>
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <main+0x510>)
 80014c6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80014c8:	f005 ff6a 	bl	80073a0 <osKernelStart>
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0x4d0>
 80014ce:	bf00      	nop
 80014d0:	200002ac 	.word	0x200002ac
 80014d4:	40016800 	.word	0x40016800
 80014d8:	20000354 	.word	0x20000354
 80014dc:	a0001000 	.word	0xa0001000
 80014e0:	200001cc 	.word	0x200001cc
 80014e4:	08000df5 	.word	0x08000df5
 80014e8:	2000019c 	.word	0x2000019c
 80014ec:	0802b668 	.word	0x0802b668
 80014f0:	08000e55 	.word	0x08000e55
 80014f4:	200001c8 	.word	0x200001c8
 80014f8:	0802b644 	.word	0x0802b644
 80014fc:	08001c4b 	.word	0x08001c4b
 8001500:	20000174 	.word	0x20000174
 8001504:	0802b68c 	.word	0x0802b68c
 8001508:	080034c5 	.word	0x080034c5
 800150c:	200003f4 	.word	0x200003f4
 8001510:	40006400 	.word	0x40006400

08001514 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001514:	6802      	ldr	r2, [r0, #0]
 8001516:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001518:	429a      	cmp	r2, r3
 800151a:	d101      	bne.n	8001520 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800151c:	f002 bfe2 	b.w	80044e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40001000 	.word	0x40001000

08001528 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001528:	4770      	bx	lr
	...

0800152c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_MspInit+0x38>)
{
 800152e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001530:	210f      	movs	r1, #15
 8001532:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001538:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
 800153e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001540:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001544:	9200      	str	r2, [sp, #0]
 8001546:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800154a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800154e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001550:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155e:	f003 bb03 	b.w	8004b68 <HAL_NVIC_SetPriority>
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001568:	b510      	push	{r4, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	2214      	movs	r2, #20
 8001570:	2100      	movs	r1, #0
 8001572:	a803      	add	r0, sp, #12
 8001574:	f029 f8dc 	bl	802a730 <memset>
  if(hcan->Instance==CAN1)
 8001578:	6822      	ldr	r2, [r4, #0]
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_CAN_MspInit+0x70>)
 800157c:	429a      	cmp	r2, r3
 800157e:	d128      	bne.n	80015d2 <HAL_CAN_MspInit+0x6a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001580:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001584:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <HAL_CAN_MspInit+0x74>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001592:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001596:	9201      	str	r2, [sp, #4]
 8001598:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159c:	f042 0202 	orr.w	r2, r2, #2
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015b6:	2309      	movs	r3, #9
 80015b8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	a903      	add	r1, sp, #12
 80015be:	f003 fd0d 	bl	8004fdc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80015c2:	2014      	movs	r0, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	2105      	movs	r1, #5
 80015c8:	f003 face 	bl	8004b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015cc:	2014      	movs	r0, #20
 80015ce:	f003 fafd 	bl	8004bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80015d2:	b008      	add	sp, #32
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	bf00      	nop
 80015d8:	40006400 	.word	0x40006400
 80015dc:	40020400 	.word	0x40020400

080015e0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80015e0:	6802      	ldr	r2, [r0, #0]
{
 80015e2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_CRC_MspInit+0x28>)
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d10b      	bne.n	8001602 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ea:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80015ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001602:	b002      	add	sp, #8
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023000 	.word	0x40023000

0800160c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_DMA2D_MspInit+0x3c>)
{
 800160e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001610:	6802      	ldr	r2, [r0, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d115      	bne.n	8001642 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001616:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800161a:	2105      	movs	r1, #5
 800161c:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800161e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001620:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001626:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001632:	f003 fa99 	bl	8004b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001636:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001638:	b003      	add	sp, #12
 800163a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800163e:	f003 bac5 	b.w	8004bcc <HAL_NVIC_EnableIRQ>
}
 8001642:	b003      	add	sp, #12
 8001644:	f85d fb04 	ldr.w	pc, [sp], #4
 8001648:	4002b000 	.word	0x4002b000

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b510      	push	{r4, lr}
 800164e:	b0a8      	sub	sp, #160	; 0xa0
 8001650:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	2214      	movs	r2, #20
 8001654:	2100      	movs	r1, #0
 8001656:	a802      	add	r0, sp, #8
 8001658:	f029 f86a 	bl	802a730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	2284      	movs	r2, #132	; 0x84
 800165e:	2100      	movs	r1, #0
 8001660:	a807      	add	r0, sp, #28
 8001662:	f029 f865 	bl	802a730 <memset>
  if(hi2c->Instance==I2C3)
 8001666:	6822      	ldr	r2, [r4, #0]
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_I2C_MspInit+0x7c>)
 800166a:	429a      	cmp	r2, r3
 800166c:	d12a      	bne.n	80016c4 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800166e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001672:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001674:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001676:	f005 f977 	bl	8006968 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	b108      	cbz	r0, 8001680 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 800167c:	f7ff ff54 	bl	8001528 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001680:	4c12      	ldr	r4, [pc, #72]	; (80016cc <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001688:	4811      	ldr	r0, [pc, #68]	; (80016d0 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	6323      	str	r3, [r4, #48]	; 0x30
 8001692:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169c:	2312      	movs	r3, #18
 800169e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016a8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016aa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016ac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ae:	f003 fc95 	bl	8004fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b8:	6423      	str	r3, [r4, #64]	; 0x40
 80016ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80016c4:	b028      	add	sp, #160	; 0xa0
 80016c6:	bd10      	pop	{r4, pc}
 80016c8:	40005c00 	.word	0x40005c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021c00 	.word	0x40021c00

080016d4 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80016d4:	6802      	ldr	r2, [r0, #0]
{
 80016d6:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_I2C_MspDeInit+0x2c>)
 80016da:	429a      	cmp	r2, r3
 80016dc:	d10f      	bne.n	80016fe <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80016e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80016ec:	f003 fd58 	bl	80051a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80016f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80016fa:	f003 bd51 	b.w	80051a0 <HAL_GPIO_DeInit>
}
 80016fe:	bd08      	pop	{r3, pc}
 8001700:	40005c00 	.word	0x40005c00
 8001704:	40023800 	.word	0x40023800
 8001708:	40021c00 	.word	0x40021c00

0800170c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	b0ac      	sub	sp, #176	; 0xb0
 8001710:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	2214      	movs	r2, #20
 8001714:	2100      	movs	r1, #0
 8001716:	a806      	add	r0, sp, #24
 8001718:	f029 f80a 	bl	802a730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	2284      	movs	r2, #132	; 0x84
 800171e:	2100      	movs	r1, #0
 8001720:	a80b      	add	r0, sp, #44	; 0x2c
 8001722:	f029 f805 	bl	802a730 <memset>
  if(hltdc->Instance==LTDC)
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_LTDC_MspInit+0x140>)
 800172a:	429a      	cmp	r2, r3
 800172c:	f040 808c 	bne.w	8001848 <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001730:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001732:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001734:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001736:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001738:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800173c:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800173e:	2302      	movs	r3, #2
 8001740:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001748:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800174a:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f005 f90b 	bl	8006968 <HAL_RCCEx_PeriphCLKConfig>
 8001752:	b108      	cbz	r0, 8001758 <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001754:	f7ff fee8 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800175e:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001762:	a906      	add	r1, sp, #24
 8001764:	483b      	ldr	r0, [pc, #236]	; (8001854 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001766:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
 800176c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800176e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001772:	9200      	str	r2, [sp, #0]
 8001774:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001778:	f042 0210 	orr.w	r2, r2, #16
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
 800177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001780:	f002 0210 	and.w	r2, r2, #16
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
 8001790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001792:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001796:	9202      	str	r2, [sp, #8]
 8001798:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800179a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
 80017a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80017a8:	9203      	str	r2, [sp, #12]
 80017aa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
 80017b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80017ba:	9204      	str	r2, [sp, #16]
 80017bc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	9305      	str	r3, [sp, #20]
 80017ce:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2310      	movs	r3, #16
 80017d2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017da:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017dc:	f003 fbfe 	bl	8004fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80017e0:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017e4:	a906      	add	r1, sp, #24
 80017e6:	481c      	ldr	r0, [pc, #112]	; (8001858 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017f2:	f003 fbf3 	bl	8004fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80017f6:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80017f8:	a906      	add	r1, sp, #24
 80017fa:	4818      	ldr	r0, [pc, #96]	; (800185c <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001806:	f003 fbe9 	bl	8004fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800180e:	a906      	add	r1, sp, #24
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001816:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800181c:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181e:	f003 fbdd 	bl	8004fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001822:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001826:	a906      	add	r1, sp, #24
 8001828:	480e      	ldr	r0, [pc, #56]	; (8001864 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800182a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001834:	f003 fbd2 	bl	8004fdc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001838:	2058      	movs	r0, #88	; 0x58
 800183a:	4622      	mov	r2, r4
 800183c:	2105      	movs	r1, #5
 800183e:	f003 f993 	bl	8004b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001842:	2058      	movs	r0, #88	; 0x58
 8001844:	f003 f9c2 	bl	8004bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001848:	b02c      	add	sp, #176	; 0xb0
 800184a:	bd70      	pop	{r4, r5, r6, pc}
 800184c:	40016800 	.word	0x40016800
 8001850:	40023800 	.word	0x40023800
 8001854:	40021000 	.word	0x40021000
 8001858:	40022400 	.word	0x40022400
 800185c:	40022800 	.word	0x40022800
 8001860:	40021800 	.word	0x40021800
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	2214      	movs	r2, #20
 800186a:	2100      	movs	r1, #0
{
 800186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001870:	b08a      	sub	sp, #40	; 0x28
 8001872:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	eb0d 0002 	add.w	r0, sp, r2
 8001878:	f028 ff5a 	bl	802a730 <memset>
  if(hqspi->Instance==QUADSPI)
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_QSPI_MspInit+0xc8>)
 8001880:	429a      	cmp	r2, r3
 8001882:	d151      	bne.n	8001928 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001888:	2403      	movs	r4, #3
 800188a:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800188c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001892:	a905      	add	r1, sp, #20
 8001894:	4828      	ldr	r0, [pc, #160]	; (8001938 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001896:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
 800189e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a0:	f002 0202 	and.w	r2, r2, #2
 80018a4:	9201      	str	r2, [sp, #4]
 80018a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018aa:	f042 0210 	orr.w	r2, r2, #16
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
 80018b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b2:	f002 0210 	and.w	r2, r2, #16
 80018b6:	9202      	str	r2, [sp, #8]
 80018b8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018bc:	f042 0202 	orr.w	r2, r2, #2
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
 80018c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c4:	f002 0202 	and.w	r2, r2, #2
 80018c8:	9203      	str	r2, [sp, #12]
 80018ca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ce:	f042 0208 	orr.w	r2, r2, #8
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018e2:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e6:	f003 fb79 	bl	8004fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ea:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	a905      	add	r1, sp, #20
 80018ee:	4813      	ldr	r0, [pc, #76]	; (800193c <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018f4:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018fa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f003 fb6e 	bl	8004fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	a905      	add	r1, sp, #20
 8001902:	480e      	ldr	r0, [pc, #56]	; (800193c <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001904:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f003 fb65 	bl	8004fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001912:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001916:	a905      	add	r1, sp, #20
 8001918:	4809      	ldr	r0, [pc, #36]	; (8001940 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800191a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001924:	f003 fb5a 	bl	8004fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001928:	b00a      	add	sp, #40	; 0x28
 800192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192e:	bf00      	nop
 8001930:	a0001000 	.word	0xa0001000
 8001934:	40023800 	.word	0x40023800
 8001938:	40021000 	.word	0x40021000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020c00 	.word	0x40020c00

08001944 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001944:	6802      	ldr	r2, [r0, #0]
{
 8001946:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_QSPI_MspDeInit+0x34>)
 800194a:	429a      	cmp	r2, r3
 800194c:	d113      	bne.n	8001976 <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001950:	2104      	movs	r1, #4
 8001952:	480b      	ldr	r0, [pc, #44]	; (8001980 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001954:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001956:	f023 0302 	bic.w	r3, r3, #2
 800195a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800195c:	f003 fc20 	bl	80051a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001960:	2144      	movs	r1, #68	; 0x44
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <HAL_QSPI_MspDeInit+0x40>)
 8001964:	f003 fc1c 	bl	80051a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001968:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800196c:	4806      	ldr	r0, [pc, #24]	; (8001988 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800196e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001972:	f003 bc15 	b.w	80051a0 <HAL_GPIO_DeInit>
}
 8001976:	bd08      	pop	{r3, pc}
 8001978:	a0001000 	.word	0xa0001000
 800197c:	40023800 	.word	0x40023800
 8001980:	40021000 	.word	0x40021000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020c00 	.word	0x40020c00

0800198c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800198e:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001990:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001992:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_SDRAM_MspInit+0xb0>)
 8001996:	681e      	ldr	r6, [r3, #0]
 8001998:	2e00      	cmp	r6, #0
 800199a:	d14d      	bne.n	8001a38 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 800199c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019a0:	2503      	movs	r5, #3
 80019a2:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80019a4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a6:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019aa:	4826      	ldr	r0, [pc, #152]	; (8001a44 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80019ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ca:	f003 fb07 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80019ce:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d2:	a901      	add	r1, sp, #4
 80019d4:	481c      	ldr	r0, [pc, #112]	; (8001a48 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e0:	f003 fafc 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80019e4:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	a901      	add	r1, sp, #4
 80019ea:	4818      	ldr	r0, [pc, #96]	; (8001a4c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f003 faf1 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019fe:	a901      	add	r1, sp, #4
 8001a00:	4813      	ldr	r0, [pc, #76]	; (8001a50 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a02:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a0c:	f003 fae6 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001a10:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a12:	a901      	add	r1, sp, #4
 8001a14:	480f      	ldr	r0, [pc, #60]	; (8001a54 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a16:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a20:	f003 fadc 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a24:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a26:	a901      	add	r1, sp, #4
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a2a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a34:	f003 fad2 	bl	8004fdc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a38:	b007      	add	sp, #28
 8001a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3c:	200003f8 	.word	0x200003f8
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021c00 	.word	0x40021c00
 8001a58:	40020800 	.word	0x40020800

08001a5c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_InitTick+0x88>)
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	f042 0210 	orr.w	r2, r2, #16
{
 8001a64:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001a68:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8001a6c:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6e:	a901      	add	r1, sp, #4
 8001a70:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a7a:	f004 ff57 	bl	800692c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a7e:	9b06      	ldr	r3, [sp, #24]
 8001a80:	bb4b      	cbnz	r3, 8001ad6 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a82:	f004 ff43 	bl	800690c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a86:	4e18      	ldr	r6, [pc, #96]	; (8001ae8 <HAL_InitTick+0x8c>)
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_InitTick+0x90>)
 8001a8a:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a8c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a90:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_InitTick+0x94>)
 8001a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a98:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8001a9a:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a9c:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8001aa6:	f005 fb99 	bl	80071dc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001aaa:	4604      	mov	r4, r0
 8001aac:	b980      	cbnz	r0, 8001ad0 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001aae:	4630      	mov	r0, r6
 8001ab0:	f005 fa3c 	bl	8006f2c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	b958      	cbnz	r0, 8001ad0 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ab8:	2036      	movs	r0, #54	; 0x36
 8001aba:	f003 f887 	bl	8004bcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	2d0f      	cmp	r5, #15
 8001ac0:	d80d      	bhi.n	8001ade <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ac2:	4622      	mov	r2, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	2036      	movs	r0, #54	; 0x36
 8001ac8:	f003 f84e 	bl	8004b68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_InitTick+0x98>)
 8001ace:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	b008      	add	sp, #32
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ad6:	f004 ff19 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8001ada:	0040      	lsls	r0, r0, #1
 8001adc:	e7d3      	b.n	8001a86 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8001ade:	2401      	movs	r4, #1
 8001ae0:	e7f6      	b.n	8001ad0 <HAL_InitTick+0x74>
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	200003fc 	.word	0x200003fc
 8001aec:	40001000 	.word	0x40001000
 8001af0:	000f4240 	.word	0x000f4240
 8001af4:	2000003c 	.word	0x2000003c

08001af8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af8:	4770      	bx	lr

08001afa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler>

08001afc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler>

08001afe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler>

08001b00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler>

08001b02 <DebugMon_Handler>:
 8001b02:	4770      	bx	lr

08001b04 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b04:	4801      	ldr	r0, [pc, #4]	; (8001b0c <CAN1_RX0_IRQHandler+0x8>)
 8001b06:	f002 bf1f 	b.w	8004948 <HAL_CAN_IRQHandler>
 8001b0a:	bf00      	nop
 8001b0c:	200001cc 	.word	0x200001cc

08001b10 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b10:	4801      	ldr	r0, [pc, #4]	; (8001b18 <TIM6_DAC_IRQHandler+0x8>)
 8001b12:	f005 ba4d 	b.w	8006fb0 <HAL_TIM_IRQHandler>
 8001b16:	bf00      	nop
 8001b18:	200003fc 	.word	0x200003fc

08001b1c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b1c:	4801      	ldr	r0, [pc, #4]	; (8001b24 <LTDC_IRQHandler+0x8>)
 8001b1e:	f004 b86b 	b.w	8005bf8 <HAL_LTDC_IRQHandler>
 8001b22:	bf00      	nop
 8001b24:	200002ac 	.word	0x200002ac

08001b28 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b28:	4801      	ldr	r0, [pc, #4]	; (8001b30 <DMA2D_IRQHandler+0x8>)
 8001b2a:	f003 b984 	b.w	8004e36 <HAL_DMA2D_IRQHandler>
 8001b2e:	bf00      	nop
 8001b30:	20000218 	.word	0x20000218

08001b34 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001b34:	2001      	movs	r0, #1
 8001b36:	4770      	bx	lr

08001b38 <_kill>:

int _kill(int pid, int sig)
{
 8001b38:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b3a:	f028 fead 	bl	802a898 <__errno>
 8001b3e:	2316      	movs	r3, #22
 8001b40:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295
 8001b46:	bd08      	pop	{r3, pc}

08001b48 <_exit>:

void _exit (int status)
{
 8001b48:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b4a:	f028 fea5 	bl	802a898 <__errno>
 8001b4e:	2316      	movs	r3, #22
 8001b50:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001b52:	e7fe      	b.n	8001b52 <_exit+0xa>

08001b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	460d      	mov	r5, r1
 8001b58:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	460e      	mov	r6, r1
 8001b5c:	1b73      	subs	r3, r6, r5
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	dc01      	bgt.n	8001b66 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001b62:	4620      	mov	r0, r4
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001b66:	f3af 8000 	nop.w
 8001b6a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	e7f5      	b.n	8001b5c <_read+0x8>

08001b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	460d      	mov	r5, r1
 8001b74:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	460e      	mov	r6, r1
 8001b78:	1b73      	subs	r3, r6, r5
 8001b7a:	429c      	cmp	r4, r3
 8001b7c:	dc01      	bgt.n	8001b82 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001b7e:	4620      	mov	r0, r4
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001b82:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001b86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	e7f5      	b.n	8001b78 <_write+0x8>

08001b8c <_close>:

int _close(int file)
{
	return -1;
}
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001b96:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001b98:	604b      	str	r3, [r1, #4]
}
 8001b9a:	4770      	bx	lr

08001b9c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	4770      	bx	lr

08001ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	4770      	bx	lr

08001ba4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <_sbrk+0x30>)
{
 8001ba6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001ba8:	6811      	ldr	r1, [r2, #0]
{
 8001baa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001bac:	b909      	cbnz	r1, 8001bb2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001bae:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <_sbrk+0x34>)
 8001bb0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	6810      	ldr	r0, [r2, #0]
 8001bb4:	4909      	ldr	r1, [pc, #36]	; (8001bdc <_sbrk+0x38>)
 8001bb6:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <_sbrk+0x3c>)
 8001bb8:	4403      	add	r3, r0
 8001bba:	1b09      	subs	r1, r1, r4
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d906      	bls.n	8001bce <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001bc0:	f028 fe6a 	bl	802a898 <__errno>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001bcc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001bce:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001bd0:	e7fc      	b.n	8001bcc <_sbrk+0x28>
 8001bd2:	bf00      	nop
 8001bd4:	20000448 	.word	0x20000448
 8001bd8:	20015d50 	.word	0x20015d50
 8001bdc:	20050000 	.word	0x20050000
 8001be0:	00000a00 	.word	0x00000a00

08001be4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001be4:	4770      	bx	lr
	...

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bee:	e003      	b.n	8001bf8 <LoopCopyDataInit>

08001bf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bf6:	3104      	adds	r1, #4

08001bf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c00:	d3f6      	bcc.n	8001bf0 <CopyDataInit>
  ldr  r2, =_sbss
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c04:	e002      	b.n	8001c0c <LoopFillZerobss>

08001c06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c08:	f842 3b04 	str.w	r3, [r2], #4

08001c0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c10:	d3f9      	bcc.n	8001c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c12:	f002 fb6b 	bl	80042ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f028 fe45 	bl	802a8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7ff f9ef 	bl	8000ffc <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001c24:	0802fe10 	.word	0x0802fe10
  ldr  r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c2c:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8001c30:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001c34:	20015d50 	.word	0x20015d50

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>

08001c3a <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001c3a:	4770      	bx	lr

08001c3c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001c3c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001c3e:	f001 f8f3 	bl	8002e28 <touchgfx_components_init>
  touchgfx_init();
}
 8001c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8001c46:	f001 b87f 	b.w	8002d48 <touchgfx_init>

08001c4a <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001c4a:	f001 b8ef 	b.w	8002e2c <touchgfx_taskEntry>

08001c4e <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001c4e:	6840      	ldr	r0, [r0, #4]
    }
 8001c50:	4770      	bx	lr

08001c52 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001c52:	6041      	str	r1, [r0, #4]
    }
 8001c54:	4770      	bx	lr
	...

08001c58 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001c58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c5c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c64:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001c6a:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001c6c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001c70:	430a      	orrs	r2, r1
 8001c72:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	4770      	bx	lr
 8001c80:	e0001000 	.word	0xe0001000
 8001c84:	c5acce55 	.word	0xc5acce55

08001c88 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001c88:	1a51      	subs	r1, r2, r1
 8001c8a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001c8e:	fbb1 f0f3 	udiv	r0, r1, r3
 8001c92:	4770      	bx	lr

08001c94 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001c94:	4b01      	ldr	r3, [pc, #4]	; (8001c9c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001c96:	6858      	ldr	r0, [r3, #4]
}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e0001000 	.word	0xe0001000

08001ca0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001ca0:	4770      	bx	lr

08001ca2 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001ca2:	b510      	push	{r4, lr}
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	210c      	movs	r1, #12
 8001ca8:	f028 fa5a 	bl	802a160 <_ZdlPvj>
 8001cac:	4620      	mov	r0, r4
 8001cae:	bd10      	pop	{r4, pc}

08001cb0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001cb0:	6803      	ldr	r3, [r0, #0]
{
 8001cb2:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001cb4:	691b      	ldr	r3, [r3, #16]
{
 8001cb6:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001cb8:	b131      	cbz	r1, 8001cc8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001cba:	4798      	blx	r3
 8001cbc:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001cbe:	6863      	ldr	r3, [r4, #4]
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	4418      	add	r0, r3
 8001cc4:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001cc6:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001cc8:	4798      	blx	r3
 8001cca:	60a0      	str	r0, [r4, #8]
}
 8001ccc:	e7fb      	b.n	8001cc6 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001cd0 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001cd2:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001cd4:	4a02      	ldr	r2, [pc, #8]	; (8001ce0 <_ZN20STM32TouchController4initEv+0x10>)
 8001cd6:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4718      	bx	r3
 8001cdc:	20000010 	.word	0x20000010
 8001ce0:	2000044c 	.word	0x2000044c

08001ce4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001ce4:	4770      	bx	lr

08001ce6 <_ZN20STM32TouchControllerD0Ev>:
 8001ce6:	b510      	push	{r4, lr}
 8001ce8:	4604      	mov	r4, r0
 8001cea:	2104      	movs	r1, #4
 8001cec:	f028 fa38 	bl	802a160 <_ZdlPvj>
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	bd10      	pop	{r4, pc}

08001cf4 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001cf6:	4e0e      	ldr	r6, [pc, #56]	; (8001d30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
{
 8001cf8:	460d      	mov	r5, r1
 8001cfa:	4614      	mov	r4, r2
    if (tsDriver)
 8001cfc:	6833      	ldr	r3, [r6, #0]
 8001cfe:	b913      	cbnz	r3, 8001d06 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = (int32_t)_x;
            y = (int32_t)_y;
            return true;
        }
    }
    return false;
 8001d00:	2000      	movs	r0, #0
}
 8001d02:	b002      	add	sp, #8
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2070      	movs	r0, #112	; 0x70
 8001d0a:	4798      	blx	r3
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d0f7      	beq.n	8001d00 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, &_y, &_x);
 8001d10:	6833      	ldr	r3, [r6, #0]
 8001d12:	2070      	movs	r0, #112	; 0x70
 8001d14:	aa01      	add	r2, sp, #4
 8001d16:	f10d 0106 	add.w	r1, sp, #6
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	4798      	blx	r3
            x = (int32_t)_x;
 8001d1e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001d22:	2001      	movs	r0, #1
 8001d24:	602b      	str	r3, [r5, #0]
            y = (int32_t)_y;
 8001d26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001d2a:	6023      	str	r3, [r4, #0]
            return true;
 8001d2c:	e7e9      	b.n	8001d02 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001d2e:	bf00      	nop
 8001d30:	2000044c 	.word	0x2000044c

08001d34 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d36:	2301      	movs	r3, #1
{
 8001d38:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d40:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001d44:	f10d 0217 	add.w	r2, sp, #23
 8001d48:	9200      	str	r2, [sp, #0]
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <TS_IO_Write+0x30>)
 8001d50:	f003 fc5e 	bl	8005610 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001d54:	b110      	cbz	r0, 8001d5c <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <TS_IO_Write+0x30>)
 8001d58:	f003 fc41 	bl	80055de <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001d5c:	b007      	add	sp, #28
 8001d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d62:	bf00      	nop
 8001d64:	20000258 	.word	0x20000258

08001d68 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001d6a:	2300      	movs	r3, #0
{
 8001d6c:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001d72:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d76:	2301      	movs	r3, #1
 8001d78:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001d7c:	f10d 0117 	add.w	r1, sp, #23
 8001d80:	9100      	str	r1, [sp, #0]
 8001d82:	4601      	mov	r1, r0
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <TS_IO_Read+0x34>)
 8001d86:	f003 fd1d 	bl	80057c4 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001d8a:	b110      	cbz	r0, 8001d92 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <TS_IO_Read+0x34>)
 8001d8e:	f003 fc26 	bl	80055de <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001d92:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001d96:	b007      	add	sp, #28
 8001d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d9c:	20000258 	.word	0x20000258

08001da0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001da0:	2803      	cmp	r0, #3
 8001da2:	d823      	bhi.n	8001dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001da4:	e8df f000 	tbb	[pc, r0]
 8001da8:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001dae:	2110      	movs	r1, #16
 8001db0:	4810      	ldr	r0, [pc, #64]	; (8001df4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001dba:	f003 ba97 	b.w	80052ec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001dc0:	2140      	movs	r1, #64	; 0x40
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	fab2 f282 	clz	r2, r2
 8001dc8:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001dcc:	e7f5      	b.n	8001dba <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	0952      	lsrs	r2, r2, #5
 8001dda:	e7f6      	b.n	8001dca <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	4806      	ldr	r0, [pc, #24]	; (8001dfc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	0952      	lsrs	r2, r2, #5
 8001dea:	e7e6      	b.n	8001dba <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000450 	.word	0x20000450
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40021800 	.word	0x40021800

08001e00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e00:	2803      	cmp	r0, #3
 8001e02:	d823      	bhi.n	8001e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001e04:	e8df f000 	tbb	[pc, r0]
 8001e08:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e0e:	2110      	movs	r1, #16
 8001e10:	4810      	ldr	r0, [pc, #64]	; (8001e54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	3a00      	subs	r2, #0
 8001e16:	bf18      	it	ne
 8001e18:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001e1a:	f003 ba67 	b.w	80052ec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	3a00      	subs	r2, #0
 8001e26:	bf18      	it	ne
 8001e28:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001e2a:	480b      	ldr	r0, [pc, #44]	; (8001e58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001e2c:	e7f5      	b.n	8001e1a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	3a00      	subs	r2, #0
 8001e36:	bf18      	it	ne
 8001e38:	2201      	movne	r2, #1
 8001e3a:	e7f6      	b.n	8001e2a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001e3e:	2140      	movs	r1, #64	; 0x40
 8001e40:	4806      	ldr	r0, [pc, #24]	; (8001e5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	3a00      	subs	r2, #0
 8001e46:	bf18      	it	ne
 8001e48:	2201      	movne	r2, #1
 8001e4a:	e7e6      	b.n	8001e1a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000450 	.word	0x20000450
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40021800 	.word	0x40021800

08001e60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e60:	2803      	cmp	r0, #3
 8001e62:	d80f      	bhi.n	8001e84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001e64:	e8df f000 	tbb	[pc, r0]
 8001e68:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e70:	f003 ba41 	b.w	80052f6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e74:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001e78:	e7fa      	b.n	8001e70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	e7fb      	b.n	8001e76 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e7e:	2140      	movs	r1, #64	; 0x40
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001e82:	e7f5      	b.n	8001e70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40021800 	.word	0x40021800

08001e94 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001e94:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001e96:	2803      	cmp	r0, #3
 8001e98:	d813      	bhi.n	8001ec2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8001e9a:	e8df f000 	tbb	[pc, r0]
 8001e9e:	0a02      	.short	0x0a02
 8001ea0:	0f0d      	.short	0x0f0d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ea6:	f003 fa1b 	bl	80052e0 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001eaa:	1e43      	subs	r3, r0, #1
 8001eac:	4258      	negs	r0, r3
 8001eae:	4158      	adcs	r0, r3
 8001eb0:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001eb2:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8001eb6:	e7f6      	b.n	8001ea6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	e7fb      	b.n	8001eb4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ebc:	2140      	movs	r1, #64	; 0x40
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001ec0:	e7f1      	b.n	8001ea6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	e7f1      	b.n	8001eaa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001ec6:	bf00      	nop
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40021800 	.word	0x40021800

08001ed4 <_ZN8touchgfx4GPIO4initEv>:
{
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	4d08      	ldr	r5, [pc, #32]	; (8001ef8 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001ed8:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001eda:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001edc:	b2e0      	uxtb	r0, r4
 8001ede:	f7ff ffd9 	bl	8001e94 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001ee2:	b118      	cbz	r0, 8001eec <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001ee8:	bf18      	it	ne
 8001eea:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001eec:	3401      	adds	r4, #1
 8001eee:	3504      	adds	r5, #4
 8001ef0:	2c05      	cmp	r4, #5
 8001ef2:	d1f3      	bne.n	8001edc <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000450 	.word	0x20000450

08001efc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001efc:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001efe:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8001f02:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    }
 8001f06:	4770      	bx	lr

08001f08 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4770      	bx	lr

08001f0c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001f0c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001f0e:	3900      	subs	r1, #0
 8001f10:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001f12:	bf18      	it	ne
 8001f14:	2101      	movne	r1, #1
 8001f16:	7019      	strb	r1, [r3, #0]
    }
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2001511f 	.word	0x2001511f

08001f20 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001f20:	2000      	movs	r0, #0
 8001f22:	4770      	bx	lr

08001f24 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001f24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f26:	b10b      	cbz	r3, 8001f2c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001f28:	4608      	mov	r0, r1
 8001f2a:	4718      	bx	r3
        }
    }
 8001f2c:	4770      	bx	lr

08001f2e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001f2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f32:	4770      	bx	lr

08001f34 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001f34:	6840      	ldr	r0, [r0, #4]
 8001f36:	6803      	ldr	r3, [r0, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	4718      	bx	r3

08001f3c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001f3c:	4770      	bx	lr
	...

08001f40 <_ZN11TouchGFXHAL10initializeEv>:
LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");
}

void TouchGFXHAL::initialize()
{
 8001f40:	b538      	push	{r3, r4, r5, lr}
 8001f42:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001f44:	f001 f87c 	bl	8003040 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setAnimationStorage((void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001f48:	4908      	ldr	r1, [pc, #32]	; (8001f6c <_ZN11TouchGFXHAL10initializeEv+0x2c>)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	4620      	mov	r0, r4
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001f4e:	4d08      	ldr	r5, [pc, #32]	; (8001f70 <_ZN11TouchGFXHAL10initializeEv+0x30>)
    setAnimationStorage((void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f54:	4798      	blx	r3
        lockDMAToPorch = enableLock;
 8001f56:	2300      	movs	r3, #0
    instrumentation.init();
 8001f58:	4628      	mov	r0, r5
 8001f5a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001f5e:	f7ff fe7b 	bl	8001c58 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001f62:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f64:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f66:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001f6a:	bd38      	pop	{r3, r4, r5, pc}
 8001f6c:	c0000000 	.word	0xc0000000
 8001f70:	20000460 	.word	0x20000460

08001f74 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001f74:	f001 b81a 	b.w	8002fac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001f78 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f78:	f001 b81e 	b.w	8002fb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001f7c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001f7e:	f001 f889 	bl	8003094 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f82:	4910      	ldr	r1, [pc, #64]	; (8001fc4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001f8e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001f92:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f96:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f9a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001f9e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fa0:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fa4:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fa6:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001faa:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fac:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001fb0:	d2f9      	bcs.n	8001fa6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001fb2:	3b20      	subs	r3, #32
 8001fb4:	f113 0f20 	cmn.w	r3, #32
 8001fb8:	d1f2      	bne.n	8001fa0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001fba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fbe:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001fc8:	f001 b866 	b.w	8003098 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001fcc <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001fcc:	f000 bfca 	b.w	8002f64 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001fd0 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001fd0:	f001 b980 	b.w	80032d4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001fd4 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001fd4:	f001 b988 	b.w	80032e8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001fd8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001fd8:	f000 bfce 	b.w	8002f78 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001fdc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001fe0:	f015 ff0a 	bl	8017df8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ff0:	4718      	bx	r3

08001ff2 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001ff2:	f015 b95f 	b.w	80172b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001ff6 <_ZN11TouchGFXHALD0Ev>:
 8001ff6:	b510      	push	{r4, lr}
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	217c      	movs	r1, #124	; 0x7c
 8001ffc:	f028 f8b0 	bl	802a160 <_ZdlPvj>
 8002000:	4620      	mov	r0, r4
 8002002:	bd10      	pop	{r4, pc}

08002004 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8002004:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8002008:	b11b      	cbz	r3, 8002012 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 800200a:	6840      	ldr	r0, [r0, #4]
 800200c:	6803      	ldr	r3, [r0, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4718      	bx	r3
    }
 8002012:	4618      	mov	r0, r3
 8002014:	4770      	bx	lr
	...

08002018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8002018:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 800201e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002020:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
            if (DISPLAY_ROTATION == rotate0)
 8002024:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8002026:	428c      	cmp	r4, r1
 8002028:	d009      	beq.n	800203e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800202a:	b93a      	cbnz	r2, 800203c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800202c:	490a      	ldr	r1, [pc, #40]	; (8002058 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002030:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002032:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8002034:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8002036:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002038:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 800203a:	701a      	strb	r2, [r3, #0]
        }
    }
 800203c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800203e:	2a00      	cmp	r2, #0
 8002040:	d0fc      	beq.n	800203c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002042:	4a06      	ldr	r2, [pc, #24]	; (800205c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002044:	4904      	ldr	r1, [pc, #16]	; (8002058 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002046:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002048:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800204a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 800204c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800204e:	2200      	movs	r2, #0
 8002050:	e7f3      	b.n	800203a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002052:	bf00      	nop
 8002054:	20015118 	.word	0x20015118
 8002058:	20015116 	.word	0x20015116
 800205c:	20015114 	.word	0x20015114

08002060 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	460d      	mov	r5, r1
 8002064:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002066:	b935      	cbnz	r5, 8002076 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 800206a:	f240 21d2 	movw	r1, #722	; 0x2d2
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8002072:	f028 f8a3 	bl	802a1bc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002076:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800207a:	3a00      	subs	r2, #0
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 800207e:	bf18      	it	ne
 8002080:	2201      	movne	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002084:	6803      	ldr	r3, [r0, #0]
    }
 8002086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 800208a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208e:	4718      	bx	r3
 8002090:	0802b6f0 	.word	0x0802b6f0
 8002094:	0802b728 	.word	0x0802b728
 8002098:	0802b776 	.word	0x0802b776
 800209c:	2001511e 	.word	0x2001511e

080020a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80020a0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	428b      	cmp	r3, r1
 80020a8:	d803      	bhi.n	80020b2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d905      	bls.n	80020be <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80020b4:	219e      	movs	r1, #158	; 0x9e
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80020b8:	4807      	ldr	r0, [pc, #28]	; (80020d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80020ba:	f028 f87f 	bl	802a1bc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80020c0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80020c4:	801a      	strh	r2, [r3, #0]
    }
 80020c6:	bd08      	pop	{r3, pc}
 80020c8:	20015114 	.word	0x20015114
 80020cc:	20015116 	.word	0x20015116
 80020d0:	0802b7bb 	.word	0x0802b7bb
 80020d4:	0802b81e 	.word	0x0802b81e
 80020d8:	0802b776 	.word	0x0802b776
 80020dc:	2001511a 	.word	0x2001511a
 80020e0:	2001511c 	.word	0x2001511c

080020e4 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 80020e4:	4601      	mov	r1, r0
 80020e6:	b508      	push	{r3, lr}
        return instance;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <IdleTaskHook+0x14>)
 80020ea:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80020ec:	b101      	cbz	r1, 80020f0 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80020ee:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80020f0:	f015 fe9c 	bl	8017e2c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80020f4:	2001      	movs	r0, #1
 80020f6:	bd08      	pop	{r3, pc}
 80020f8:	20015120 	.word	0x20015120

080020fc <_GLOBAL__sub_I_instrumentation>:
        : cc_consumed(0),
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <_GLOBAL__sub_I_instrumentation+0x10>)
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	4a02      	ldr	r2, [pc, #8]	; (8002110 <_GLOBAL__sub_I_instrumentation+0x14>)
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000460 	.word	0x20000460
 8002110:	0802b6b8 	.word	0x0802b6b8

08002114 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002114:	2101      	movs	r1, #1
 8002116:	2200      	movs	r2, #0
{
 8002118:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800211a:	4608      	mov	r0, r1
 800211c:	f005 fad0 	bl	80076c0 <osSemaphoreNew>
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002122:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002124:	b928      	cbnz	r0, 8002132 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002128:	2128      	movs	r1, #40	; 0x28
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800212c:	480a      	ldr	r0, [pc, #40]	; (8002158 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800212e:	f028 f845 	bl	802a1bc <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002132:	2200      	movs	r2, #0
 8002134:	2104      	movs	r1, #4
 8002136:	2001      	movs	r0, #1
 8002138:	f005 fb88 	bl	800784c <osMessageQueueNew>
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800213e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002140:	b918      	cbnz	r0, 800214a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	4a03      	ldr	r2, [pc, #12]	; (8002154 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002148:	e7f0      	b.n	800212c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 800214a:	bd08      	pop	{r3, pc}
 800214c:	20000470 	.word	0x20000470
 8002150:	0802b93c 	.word	0x0802b93c
 8002154:	0802b985 	.word	0x0802b985
 8002158:	0802b9b4 	.word	0x0802b9b4
 800215c:	2000046c 	.word	0x2000046c
 8002160:	0802ba0d 	.word	0x0802ba0d

08002164 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002166:	f04f 31ff 	mov.w	r1, #4294967295
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	f005 bafe 	b.w	800776c <osSemaphoreAcquire>
 8002170:	20000470 	.word	0x20000470

08002174 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002174:	4b01      	ldr	r3, [pc, #4]	; (800217c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f005 bb32 	b.w	80077e0 <osSemaphoreRelease>
 800217c:	20000470 	.word	0x20000470

08002180 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002182:	2100      	movs	r1, #0
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	f005 baf1 	b.w	800776c <osSemaphoreAcquire>
 800218a:	bf00      	nop
 800218c:	20000470 	.word	0x20000470

08002190 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8002190:	f7ff bff0 	b.w	8002174 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002194 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002194:	2300      	movs	r3, #0
 8002196:	4803      	ldr	r0, [pc, #12]	; (80021a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002198:	4903      	ldr	r1, [pc, #12]	; (80021a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800219a:	461a      	mov	r2, r3
 800219c:	6800      	ldr	r0, [r0, #0]
 800219e:	f005 bb9b 	b.w	80078d8 <osMessageQueuePut>
 80021a2:	bf00      	nop
 80021a4:	2000046c 	.word	0x2000046c
 80021a8:	20000004 	.word	0x20000004

080021ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80021ac:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80021ae:	2300      	movs	r3, #0
 80021b0:	4c07      	ldr	r4, [pc, #28]	; (80021d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80021b2:	a901      	add	r1, sp, #4
 80021b4:	461a      	mov	r2, r3
 80021b6:	6820      	ldr	r0, [r4, #0]
 80021b8:	f005 fbd0 	bl	800795c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	2200      	movs	r2, #0
 80021c2:	a901      	add	r1, sp, #4
 80021c4:	6820      	ldr	r0, [r4, #0]
 80021c6:	f005 fbc9 	bl	800795c <osMessageQueueGet>
}
 80021ca:	b002      	add	sp, #8
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	bf00      	nop
 80021d0:	2000046c 	.word	0x2000046c

080021d4 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 80021d4:	6803      	ldr	r3, [r0, #0]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	4718      	bx	r3

080021da <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 80021da:	2001      	movs	r0, #1
 80021dc:	4770      	bx	lr

080021de <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 80021de:	6803      	ldr	r3, [r0, #0]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	4718      	bx	r3

080021e4 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <_ZN8STM32DMA10initializeEv+0x38>)
{
 80021e6:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80021e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
 80021f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80021f6:	9201      	str	r2, [sp, #4]
 80021f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002200:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002208:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <_ZN8STM32DMA10initializeEv+0x3c>)
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <_ZN8STM32DMA10initializeEv+0x40>)
 800220e:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002210:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <_ZN8STM32DMA10initializeEv+0x44>)
 8002216:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8002218:	b002      	add	sp, #8
 800221a:	4770      	bx	lr
 800221c:	40023800 	.word	0x40023800
 8002220:	20000218 	.word	0x20000218
 8002224:	0800226d 	.word	0x0800226d
 8002228:	e000e100 	.word	0xe000e100

0800222c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 800222c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002230:	4770      	bx	lr
	...

08002234 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800223a:	6003      	str	r3, [r0, #0]
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <_ZN8STM32DMAD1Ev+0x1c>)
 800223e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002242:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002246:	f3bf 8f6f 	isb	sy
}
 800224a:	4770      	bx	lr
 800224c:	0802bbb8 	.word	0x0802bbb8
 8002250:	e000e100 	.word	0xe000e100

08002254 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002254:	b510      	push	{r4, lr}
 8002256:	4604      	mov	r4, r0
}
 8002258:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800225c:	f7ff ffea 	bl	8002234 <_ZN8STM32DMAD1Ev>
 8002260:	4620      	mov	r0, r4
 8002262:	f027 ff7d 	bl	802a160 <_ZdlPvj>
 8002266:	4620      	mov	r0, r4
 8002268:	bd10      	pop	{r4, pc}
	...

0800226c <DMA2D_XferCpltCallback>:
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <DMA2D_XferCpltCallback+0xc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002272:	6803      	ldr	r3, [r0, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	4718      	bx	r3
 8002278:	20015120 	.word	0x20015120

0800227c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <_ZN8STM32DMAC1Ev+0x30>)
 8002282:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002284:	2600      	movs	r6, #0
 8002286:	4625      	mov	r5, r4
 8002288:	2260      	movs	r2, #96	; 0x60
 800228a:	6060      	str	r0, [r4, #4]
 800228c:	7226      	strb	r6, [r4, #8]
 800228e:	7266      	strb	r6, [r4, #9]
 8002290:	f845 3b20 	str.w	r3, [r5], #32
 8002294:	4629      	mov	r1, r5
 8002296:	f015 ff05 	bl	80180a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800229a:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 800229e:	60ee      	str	r6, [r5, #12]
 80022a0:	3524      	adds	r5, #36	; 0x24
 80022a2:	42ab      	cmp	r3, r5
 80022a4:	d1fb      	bne.n	800229e <_ZN8STM32DMAC1Ev+0x22>
}
 80022a6:	4620      	mov	r0, r4
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	bf00      	nop
 80022ac:	0802bbb8 	.word	0x0802bbb8

080022b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80022b0:	b508      	push	{r3, lr}
    switch (format)
 80022b2:	290b      	cmp	r1, #11
 80022b4:	d80b      	bhi.n	80022ce <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 80022b6:	e8df f001 	tbb	[pc, r1]
 80022ba:	0612      	.short	0x0612
 80022bc:	0a0a0a10 	.word	0x0a0a0a10
 80022c0:	0808080a 	.word	0x0808080a
 80022c4:	0808      	.short	0x0808
 80022c6:	2001      	movs	r0, #1
}
 80022c8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80022ca:	2005      	movs	r0, #5
        break;
 80022cc:	e7fc      	b.n	80022c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80022d0:	2165      	movs	r1, #101	; 0x65
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 80022d6:	f027 ff71 	bl	802a1bc <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022da:	2000      	movs	r0, #0
 80022dc:	e7f4      	b.n	80022c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80022de:	2002      	movs	r0, #2
    return dma2dColorMode;
 80022e0:	e7f2      	b.n	80022c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80022e2:	bf00      	nop
 80022e4:	0802ba4f 	.word	0x0802ba4f
 80022e8:	0802ba6a 	.word	0x0802ba6a
 80022ec:	0802bab4 	.word	0x0802bab4

080022f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80022f0:	b508      	push	{r3, lr}
    switch (format)
 80022f2:	290a      	cmp	r1, #10
 80022f4:	d809      	bhi.n	800230a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 80022f6:	e8df f001 	tbb	[pc, r1]
 80022fa:	0610      	.short	0x0610
 80022fc:	0808080e 	.word	0x0808080e
 8002300:	06060608 	.word	0x06060608
 8002304:	06          	.byte	0x06
 8002305:	00          	.byte	0x00
 8002306:	2001      	movs	r0, #1
}
 8002308:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 800230c:	2186      	movs	r1, #134	; 0x86
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002312:	f027 ff53 	bl	802a1bc <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002316:	2000      	movs	r0, #0
 8002318:	e7f6      	b.n	8002308 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800231a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800231c:	e7f4      	b.n	8002308 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800231e:	bf00      	nop
 8002320:	0802ba4f 	.word	0x0802ba4f
 8002324:	0802bb0b 	.word	0x0802bb0b
 8002328:	0802bab4 	.word	0x0802bab4

0800232c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800232c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002330:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8002334:	460c      	mov	r4, r1
 8002336:	4607      	mov	r7, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002338:	4641      	mov	r1, r8
 800233a:	f7ff ffb9 	bl	80022b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800233e:	f894 901e 	ldrb.w	r9, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002342:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002344:	4638      	mov	r0, r7
 8002346:	4649      	mov	r1, r9
 8002348:	f7ff ffb2 	bl	80022b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800234c:	4649      	mov	r1, r9
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800234e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002350:	4638      	mov	r0, r7
 8002352:	f7ff ffcd 	bl	80022f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002356:	8aa1      	ldrh	r1, [r4, #20]
 8002358:	8b62      	ldrh	r2, [r4, #26]
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800235c:	1a52      	subs	r2, r2, r1
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002360:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002362:	8b22      	ldrh	r2, [r4, #24]
 8002364:	1a52      	subs	r2, r2, r1
 8002366:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002368:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800236a:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800236c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002370:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002372:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002374:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002376:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002378:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800237a:	6827      	ldr	r7, [r4, #0]
 800237c:	2f80      	cmp	r7, #128	; 0x80
 800237e:	d028      	beq.n	80023d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8002380:	7f22      	ldrb	r2, [r4, #28]
 8002382:	d80f      	bhi.n	80023a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8002384:	2f20      	cmp	r7, #32
 8002386:	d065      	beq.n	8002454 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002388:	2f40      	cmp	r7, #64	; 0x40
 800238a:	d063      	beq.n	8002454 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 800238c:	2f04      	cmp	r7, #4
 800238e:	d01a      	beq.n	80023c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002390:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002396:	45c8      	cmp	r8, r9
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002398:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 800239c:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800239e:	d05f      	beq.n	8002460 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80023a0:	4a32      	ldr	r2, [pc, #200]	; (800246c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 80023a2:	e044      	b.n	800242e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
    switch (blitOp.operation)
 80023a4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80023a8:	d004      	beq.n	80023b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x88>
 80023aa:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80023ae:	d1ef      	bne.n	8002390 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x64>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023b0:	492f      	ldr	r1, [pc, #188]	; (8002470 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80023b2:	e000      	b.n	80023b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023b4:	492f      	ldr	r1, [pc, #188]	; (8002474 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023b6:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 80023ba:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80023bc:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80023be:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023c0:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023c2:	6158      	str	r0, [r3, #20]
 80023c4:	e032      	b.n	800242c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023c6:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 80023ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023ce:	61da      	str	r2, [r3, #28]
 80023d0:	e7f6      	b.n	80023c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80023d2:	68a7      	ldr	r7, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80023d4:	1d3a      	adds	r2, r7, #4
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023d8:	7f21      	ldrb	r1, [r4, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 80023da:	783a      	ldrb	r2, [r7, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023dc:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 80023e0:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 80023e4:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023e6:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023e8:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 80023ea:	b142      	cbz	r2, 80023fe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80023ec:	2a01      	cmp	r2, #1
 80023ee:	d021      	beq.n	8002434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
                assert(0 && "Unsupported format");
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80023f2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 80023f8:	4821      	ldr	r0, [pc, #132]	; (8002480 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 80023fa:	f027 fedf 	bl	802a1bc <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	8879      	ldrh	r1, [r7, #2]
 8002402:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002406:	3901      	subs	r1, #1
 8002408:	f022 0210 	bic.w	r2, r2, #16
 800240c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            bool blend = true;
 8002410:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002412:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	f042 0220 	orr.w	r2, r2, #32
 800241c:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	0692      	lsls	r2, r2, #26
 8002422:	d4fc      	bmi.n	800241e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002424:	2210      	movs	r2, #16
 8002426:	609a      	str	r2, [r3, #8]
            if (blend)
 8002428:	2900      	cmp	r1, #0
 800242a:	d0b9      	beq.n	80023a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x74>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800242e:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8002430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002434:	69da      	ldr	r2, [r3, #28]
                if (blitOp.alpha == 255)
 8002436:	39ff      	subs	r1, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002438:	8878      	ldrh	r0, [r7, #2]
 800243a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
                if (blitOp.alpha == 255)
 800243e:	bf18      	it	ne
 8002440:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002442:	3801      	subs	r0, #1
 8002444:	f022 0210 	bic.w	r2, r2, #16
 8002448:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800244c:	f042 0210 	orr.w	r2, r2, #16
 8002450:	61da      	str	r2, [r3, #28]
                break;
 8002452:	e7df      	b.n	8002414 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002454:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800245a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800245e:	e7b6      	b.n	80023ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002460:	f240 2201 	movw	r2, #513	; 0x201
 8002464:	e7e3      	b.n	800242e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 8002466:	bf00      	nop
 8002468:	4002b000 	.word	0x4002b000
 800246c:	00010201 	.word	0x00010201
 8002470:	00020009 	.word	0x00020009
 8002474:	0002000a 	.word	0x0002000a
 8002478:	0802bb56 	.word	0x0802bb56
 800247c:	0802bb70 	.word	0x0802bb70
 8002480:	0802bab4 	.word	0x0802bab4
 8002484:	00020201 	.word	0x00020201

08002488 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800248c:	7f89      	ldrb	r1, [r1, #30]
 800248e:	f7ff ff2f 	bl	80022f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002494:	8aa5      	ldrh	r5, [r4, #20]
 8002496:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002498:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800249a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800249e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024a2:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024a4:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024a6:	1b52      	subs	r2, r2, r5
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80024aa:	6825      	ldr	r5, [r4, #0]
 80024ac:	2d08      	cmp	r5, #8
 80024ae:	d10e      	bne.n	80024ce <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024b0:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024b2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024b4:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80024b6:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80024b8:	7f20      	ldrb	r0, [r4, #28]
 80024ba:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80024be:	61da      	str	r2, [r3, #28]
 80024c0:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024c2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024c6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024c8:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80024ca:	601a      	str	r2, [r3, #0]
    }
}
 80024cc:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80024ce:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80024d0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80024d2:	611a      	str	r2, [r3, #16]
 80024d4:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80024d6:	0a0a      	lsrs	r2, r1, #8
 80024d8:	0948      	lsrs	r0, r1, #5
 80024da:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80024de:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80024e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80024e6:	4302      	orrs	r2, r0
 80024e8:	430a      	orrs	r2, r1
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80024ec:	4a03      	ldr	r2, [pc, #12]	; (80024fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 80024ee:	e7ec      	b.n	80024ca <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80024f0:	4002b000 	.word	0x4002b000
 80024f4:	00010009 	.word	0x00010009
 80024f8:	00020201 	.word	0x00020201
 80024fc:	00030201 	.word	0x00030201

08002500 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:

    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);

    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8002500:	6940      	ldr	r0, [r0, #20]
 8002502:	4770      	bx	lr

08002504 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:

    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8002504:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8002508:	4770      	bx	lr

0800250a <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800250a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800250c:	b923      	cbnz	r3, 8002518 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 800250e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002510:	3800      	subs	r0, #0
 8002512:	bf18      	it	ne
 8002514:	2001      	movne	r0, #1
 8002516:	4770      	bx	lr
 8002518:	2001      	movs	r0, #1
}
 800251a:	4770      	bx	lr

0800251c <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800251c:	6880      	ldr	r0, [r0, #8]
 800251e:	4770      	bx	lr

08002520 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002520:	3004      	adds	r0, #4
{
 8002522:	b510      	push	{r4, lr}
 8002524:	460c      	mov	r4, r1
    *data = videoInfo;
 8002526:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888 || VIDEO_DECODE_FORMAT == ARGB8888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 800252c:	bd10      	pop	{r4, pc}

0800252e <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 800252e:	4770      	bx	lr

08002530 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002530:	b508      	push	{r3, lr}
    assert(0);
 8002532:	4a03      	ldr	r2, [pc, #12]	; (8002540 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002534:	f240 2112 	movw	r1, #530	; 0x212
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800253c:	f027 fe3e 	bl	802a1bc <__assert_func>
 8002540:	0802bc00 	.word	0x0802bc00
 8002544:	0802d403 	.word	0x0802d403
 8002548:	0802bc5b 	.word	0x0802bc5b

0800254c <_ZN20SoftwareMJPEGDecoderD0Ev>:
 800254c:	b510      	push	{r4, lr}
 800254e:	4604      	mov	r4, r0
 8002550:	2148      	movs	r1, #72	; 0x48
 8002552:	f027 fe05 	bl	802a160 <_ZdlPvj>
 8002556:	4620      	mov	r0, r4
 8002558:	bd10      	pop	{r4, pc}
	...

0800255c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 800255c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002560:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002562:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002564:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002568:	4605      	mov	r5, r0
 800256a:	460e      	mov	r6, r1
 800256c:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800256e:	2b00      	cmp	r3, #0
 8002570:	d037      	beq.n	80025e2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x86>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002572:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 8002574:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 8002576:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002620 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800257a:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 800257e:	f00d fbd1 	bl	800fd24 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 8002582:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002586:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8002588:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 800258a:	a824      	add	r0, sp, #144	; 0x90
 800258c:	f007 fb18 	bl	8009bc0 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002590:	463a      	mov	r2, r7
 8002592:	4631      	mov	r1, r6
 8002594:	a824      	add	r0, sp, #144	; 0x90
 8002596:	f008 fa95 	bl	800aac4 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 800259a:	2101      	movs	r1, #1
 800259c:	a824      	add	r0, sp, #144	; 0x90
 800259e:	f007 fc13 	bl	8009dc8 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 80025a2:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 80025a4:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 80025a6:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 80025aa:	f007 fcb1 	bl	8009f10 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80025ae:	f8bd 3298 	ldrh.w	r3, [sp, #664]	; 0x298
 80025b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80025b4:	f8bd 629c 	ldrh.w	r6, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80025b8:	4293      	cmp	r3, r2
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80025ba:	9fa8      	ldr	r7, [sp, #672]	; 0x2a0
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80025bc:	bf28      	it	cs
 80025be:	4613      	movcs	r3, r2
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80025c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80025c2:	4296      	cmp	r6, r2
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80025c4:	eb03 0843 	add.w	r8, r3, r3, lsl #1
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80025c8:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80025cc:	bf28      	it	cs
 80025ce:	4616      	movcs	r6, r2
        while (cinfo.output_scanline < height)
 80025d0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80025d2:	429e      	cmp	r6, r3
 80025d4:	d809      	bhi.n	80025ea <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8e>
        jpeg_finish_decompress(&cinfo);
 80025d6:	a824      	add	r0, sp, #144	; 0x90
 80025d8:	f007 fc18 	bl	8009e0c <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 80025dc:	a824      	add	r0, sp, #144	; 0x90
 80025de:	f007 fb3c 	bl	8009c5a <jpeg_destroy_decompress>
}
 80025e2:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80025e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80025ea:	2201      	movs	r2, #1
 80025ec:	a901      	add	r1, sp, #4
 80025ee:	a824      	add	r0, sp, #144	; 0x90
 80025f0:	f007 fcd7 	bl	8009fa2 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 80025f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80025f6:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 80025fa:	4298      	cmp	r0, r3
 80025fc:	d801      	bhi.n	8002602 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa6>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80025fe:	443c      	add	r4, r7
 8002600:	e7e6      	b.n	80025d0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 8002602:	7859      	ldrb	r1, [r3, #1]
 8002604:	789a      	ldrb	r2, [r3, #2]
 8002606:	00c9      	lsls	r1, r1, #3
 8002608:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 800260c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002610:	430a      	orrs	r2, r1
 8002612:	f813 1b03 	ldrb.w	r1, [r3], #3
 8002616:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 800261a:	f824 2b02 	strh.w	r2, [r4], #2
                RGB_matrix++;
 800261e:	e7ec      	b.n	80025fa <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x9e>
 8002620:	fffff800 	.word	0xfffff800

08002624 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 8002626:	6002      	str	r2, [r0, #0]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002628:	2200      	movs	r2, #0
 800262a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800262e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002632:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002636:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 800263a:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 800263e:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8002642:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 8002646:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800264a:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 800264e:	4770      	bx	lr
 8002650:	0802bf48 	.word	0x0802bf48

08002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8002654:	b410      	push	{r4}
 8002656:	460c      	mov	r4, r1
 8002658:	4611      	mov	r1, r2
 800265a:	461a      	mov	r2, r3
    if (reader != 0)
 800265c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800265e:	b13b      	cbz	r3, 8002670 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002660:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002662:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002664:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002666:	4420      	add	r0, r4
}
 8002668:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 800266c:	f028 b868 	b.w	802a740 <strncmp>
        src = (const char*)movieData + offset;
 8002670:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002672:	e7f8      	b.n	8002666 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

08002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002674:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8002676:	b510      	push	{r4, lr}
    if (reader != 0)
 8002678:	b173      	cbz	r3, 8002698 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800267a:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800267c:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 800267e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002680:	1853      	adds	r3, r2, r1
 8002682:	5c52      	ldrb	r2, [r2, r1]
 8002684:	7898      	ldrb	r0, [r3, #2]
 8002686:	785c      	ldrb	r4, [r3, #1]
 8002688:	0400      	lsls	r0, r0, #16
 800268a:	78db      	ldrb	r3, [r3, #3]
 800268c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002690:	4310      	orrs	r0, r2
 8002692:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002696:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002698:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800269a:	5858      	ldr	r0, [r3, r1]
 800269c:	e7fb      	b.n	8002696 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

0800269e <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800269e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026a0:	b143      	cbz	r3, 80026b4 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80026a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026a4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80026a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026a8:	185a      	adds	r2, r3, r1
 80026aa:	5c58      	ldrb	r0, [r3, r1]
 80026ac:	7852      	ldrb	r2, [r2, #1]
 80026ae:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80026b2:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80026b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026b6:	5a58      	ldrh	r0, [r3, r1]
}
 80026b8:	4770      	bx	lr
	...

080026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	4604      	mov	r4, r0
    if (reader != 0)
 80026c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 80026c2:	460d      	mov	r5, r1
 80026c4:	4616      	mov	r6, r2
    if (reader != 0)
 80026c6:	b1d8      	cbz	r0, 8002700 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80026c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d208      	bcs.n	80026e0 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80026ce:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 80026d2:	2165      	movs	r1, #101	; 0x65
 80026d4:	480d      	ldr	r0, [pc, #52]	; (800270c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80026d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 80026dc:	f027 fd6e 	bl	802a1bc <__assert_func>
        reader->seek(offset);
 80026e0:	6803      	ldr	r3, [r0, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80026e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80026e8:	4632      	mov	r2, r6
 80026ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026ec:	6803      	ldr	r3, [r0, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4798      	blx	r3
 80026f2:	b910      	cbnz	r0, 80026fa <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80026f4:	230d      	movs	r3, #13
 80026f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 80026fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 80026fc:	6425      	str	r5, [r4, #64]	; 0x40
}
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002700:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002702:	4408      	add	r0, r1
 8002704:	e7fb      	b.n	80026fe <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 8002706:	bf00      	nop
 8002708:	0802bcd1 	.word	0x0802bcd1
 800270c:	0802bc5b 	.word	0x0802bc5b
 8002710:	0802bcbe 	.word	0x0802bcbe

08002714 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002718:	6943      	ldr	r3, [r0, #20]
{
 800271a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800271c:	b92b      	cbnz	r3, 800272a <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002720:	21aa      	movs	r1, #170	; 0xaa
 8002722:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002724:	4823      	ldr	r0, [pc, #140]	; (80027b4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 8002726:	f027 fd49 	bl	802a1bc <__assert_func>
    readData(currentMovieOffset, 8);
 800272a:	2208      	movs	r2, #8
 800272c:	6981      	ldr	r1, [r0, #24]
 800272e:	f7ff ffc5 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002732:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002734:	f243 0630 	movw	r6, #12336	; 0x3030
 8002738:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800273c:	3104      	adds	r1, #4
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff ff98 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002744:	69a3      	ldr	r3, [r4, #24]
 8002746:	4418      	add	r0, r3
 8002748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800274a:	f100 0208 	add.w	r2, r0, #8
 800274e:	429a      	cmp	r2, r3
 8002750:	d306      	bcc.n	8002760 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002752:	2301      	movs	r3, #1
    return false;
 8002754:	2000      	movs	r0, #0
    frameNumber = 1;
 8002756:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002758:	6a23      	ldr	r3, [r4, #32]
 800275a:	61a3      	str	r3, [r4, #24]
}
 800275c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002760:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002762:	3009      	adds	r0, #9
        readData(currentMovieOffset, 8);
 8002764:	2208      	movs	r2, #8
        frameNumber++;
 8002766:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002768:	f020 0101 	bic.w	r1, r0, #1
        readData(currentMovieOffset, 8);
 800276c:	4620      	mov	r0, r4
        frameNumber++;
 800276e:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002770:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002772:	f7ff ffa3 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 8002776:	f8d4 9018 	ldr.w	r9, [r4, #24]
 800277a:	4620      	mov	r0, r4
 800277c:	4649      	mov	r1, r9
 800277e:	f7ff ff8e 	bl	800269e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002782:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo = getU16(currentMovieOffset);
 8002786:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff ff88 	bl	800269e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 800278e:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002792:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002794:	4620      	mov	r0, r4
 8002796:	f7ff ff6d 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800279a:	45b0      	cmp	r8, r6
 800279c:	d1d2      	bne.n	8002744 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 800279e:	42bd      	cmp	r5, r7
 80027a0:	d1d0      	bne.n	8002744 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d0ce      	beq.n	8002744 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80027a6:	2001      	movs	r0, #1
 80027a8:	e7d8      	b.n	800275c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80027aa:	bf00      	nop
 80027ac:	0802bd13 	.word	0x0802bd13
 80027b0:	0802bd5c 	.word	0x0802bd5c
 80027b4:	0802bc5b 	.word	0x0802bc5b

080027b8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80027b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027bc:	4604      	mov	r4, r0
 80027be:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80027c2:	468a      	mov	sl, r1
 80027c4:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 80027c6:	6981      	ldr	r1, [r0, #24]
 80027c8:	2208      	movs	r2, #8
{
 80027ca:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 80027cc:	f7ff ff76 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80027d0:	69a7      	ldr	r7, [r4, #24]
 80027d2:	4620      	mov	r0, r4
 80027d4:	1d39      	adds	r1, r7, #4
 80027d6:	f7ff ff4d 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80027da:	f107 0108 	add.w	r1, r7, #8
 80027de:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80027e0:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff6a 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80027e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80027ea:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80027ec:	b933      	cbnz	r3, 80027fc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 80027f0:	f240 11ab 	movw	r1, #427	; 0x1ab
 80027f4:	4a3b      	ldr	r2, [pc, #236]	; (80028e4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 80027f6:	483c      	ldr	r0, [pc, #240]	; (80028e8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 80027f8:	f027 fce0 	bl	802a1bc <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80027fc:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80027fe:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002800:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002804:	f00d fa8e 	bl	800fd24 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002808:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800280c:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 800280e:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002810:	a824      	add	r0, sp, #144	; 0x90
 8002812:	f007 f9d5 	bl	8009bc0 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002816:	462a      	mov	r2, r5
 8002818:	4639      	mov	r1, r7
 800281a:	a824      	add	r0, sp, #144	; 0x90
 800281c:	f008 f952 	bl	800aac4 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 8002820:	2101      	movs	r1, #1
 8002822:	a824      	add	r0, sp, #144	; 0x90
 8002824:	f007 fad0 	bl	8009dc8 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 8002828:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 800282a:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 800282c:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 8002830:	f007 fb6e 	bl	8009f10 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002834:	f9ba 5002 	ldrsh.w	r5, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002838:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800283a:	42ab      	cmp	r3, r5
 800283c:	d329      	bcc.n	8002892 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xda>
    const uint32_t startX = area.x;
 800283e:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 8002842:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002846:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 800284a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 800284c:	fb08 6605 	mla	r6, r8, r5, r6
 8002850:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 8002852:	f8ba 5002 	ldrh.w	r5, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002856:	f8df b094 	ldr.w	fp, [pc, #148]	; 80028ec <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 800285a:	b23f      	sxth	r7, r7
 800285c:	429f      	cmp	r7, r3
 800285e:	bf28      	it	cs
 8002860:	461f      	movcs	r7, r3
 8002862:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8002866:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800286a:	441d      	add	r5, r3
 800286c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 800286e:	b22d      	sxth	r5, r5
 8002870:	429d      	cmp	r5, r3
 8002872:	bf28      	it	cs
 8002874:	461d      	movcs	r5, r3
    while (cinfo.output_scanline < endY)
 8002876:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002878:	42ab      	cmp	r3, r5
 800287a:	d310      	bcc.n	800289e <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe6>
    jpeg_finish_decompress(&cinfo);
 800287c:	a824      	add	r0, sp, #144	; 0x90
 800287e:	f007 fac5 	bl	8009e0c <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 8002882:	a824      	add	r0, sp, #144	; 0x90
 8002884:	f007 f9e9 	bl	8009c5a <jpeg_destroy_decompress>
}
 8002888:	2001      	movs	r0, #1
 800288a:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002892:	2201      	movs	r2, #1
 8002894:	a901      	add	r1, sp, #4
 8002896:	a824      	add	r0, sp, #144	; 0x90
 8002898:	f007 fb83 	bl	8009fa2 <jpeg_read_scanlines>
 800289c:	e7cc      	b.n	8002838 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800289e:	2201      	movs	r2, #1
 80028a0:	a901      	add	r1, sp, #4
 80028a2:	a824      	add	r0, sp, #144	; 0x90
 80028a4:	f007 fb7d 	bl	8009fa2 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 80028a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80028aa:	4649      	mov	r1, r9
 80028ac:	4452      	add	r2, sl
 80028ae:	42b9      	cmp	r1, r7
 80028b0:	f102 0203 	add.w	r2, r2, #3
 80028b4:	d301      	bcc.n	80028ba <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x102>
        lineptr += framebuffer_width; //move to next line
 80028b6:	4446      	add	r6, r8
 80028b8:	e7dd      	b.n	8002876 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xbe>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80028ba:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80028be:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80028c2:	00c0      	lsls	r0, r0, #3
 80028c4:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 80028c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80028cc:	4303      	orrs	r3, r0
 80028ce:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80028d2:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 80028d6:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 80028da:	3101      	adds	r1, #1
 80028dc:	e7e7      	b.n	80028ae <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf6>
 80028de:	bf00      	nop
 80028e0:	0802bd8f 	.word	0x0802bd8f
 80028e4:	0802bde5 	.word	0x0802bde5
 80028e8:	0802bc5b 	.word	0x0802bc5b
 80028ec:	fffff800 	.word	0xfffff800

080028f0 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80028f0:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80028f2:	6803      	ldr	r3, [r0, #0]
 80028f4:	bf38      	it	cc
 80028f6:	2101      	movcc	r1, #1
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80028fa:	b570      	push	{r4, r5, r6, lr}
 80028fc:	460d      	mov	r5, r1
 80028fe:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002900:	4798      	blx	r3
 8002902:	42a8      	cmp	r0, r5
 8002904:	d204      	bcs.n	8002910 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	4620      	mov	r0, r4
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	4798      	blx	r3
 800290e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002910:	1e6b      	subs	r3, r5, #1
 8002912:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002914:	2210      	movs	r2, #16
 8002916:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002918:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 800291c:	f106 0108 	add.w	r1, r6, #8
 8002920:	f7ff fecc 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002924:	f106 0110 	add.w	r1, r6, #16
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff fea3 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800292e:	6a23      	ldr	r3, [r4, #32]
 8002930:	3b04      	subs	r3, #4
 8002932:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002934:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800293c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 800293c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002940:	2100      	movs	r1, #0
{
 8002942:	4604      	mov	r4, r0
    readData(0, 72);
 8002944:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 8002946:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002948:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 800294c:	f7ff feb6 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002950:	69a7      	ldr	r7, [r4, #24]
 8002952:	2304      	movs	r3, #4
 8002954:	4a63      	ldr	r2, [pc, #396]	; (8002ae4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002956:	4639      	mov	r1, r7
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff fe7b 	bl	8002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800295e:	b140      	cbz	r0, 8002972 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 8002960:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002962:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002964:	21f2      	movs	r1, #242	; 0xf2
        lastError = AVI_ERROR_NOT_RIFF;
 8002966:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 800296a:	4b60      	ldr	r3, [pc, #384]	; (8002aec <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800296c:	4860      	ldr	r0, [pc, #384]	; (8002af0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800296e:	f027 fc25 	bl	802a1bc <__assert_func>
    currentMovieOffset += 8;
 8002972:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002976:	2304      	movs	r3, #4
 8002978:	4a5e      	ldr	r2, [pc, #376]	; (8002af4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 800297a:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800297c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800297e:	f7ff fe69 	bl	8002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002982:	b130      	cbz	r0, 8002992 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002984:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002986:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002988:	21fa      	movs	r1, #250	; 0xfa
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800298a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 800298e:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002990:	e7ec      	b.n	800296c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002992:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002996:	2304      	movs	r3, #4
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800299a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800299c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800299e:	f7ff fe59 	bl	8002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80029a2:	4606      	mov	r6, r0
 80029a4:	b138      	cbz	r0, 80029b6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80029a6:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80029aa:	f240 1101 	movw	r1, #257	; 0x101
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80029ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 80029b2:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80029b4:	e7da      	b.n	800296c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80029b6:	f107 0110 	add.w	r1, r7, #16
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7ff fe5a 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80029c0:	4605      	mov	r5, r0
 80029c2:	b920      	cbnz	r0, 80029ce <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80029c6:	f240 1107 	movw	r1, #263	; 0x107
 80029ca:	4a47      	ldr	r2, [pc, #284]	; (8002ae8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80029cc:	e7ce      	b.n	800296c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 80029ce:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80029d2:	2304      	movs	r3, #4
 80029d4:	4a4c      	ldr	r2, [pc, #304]	; (8002b08 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80029d6:	4620      	mov	r0, r4
 80029d8:	4641      	mov	r1, r8
 80029da:	f7ff fe3b 	bl	8002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d04b      	beq.n	8002a7a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80029e2:	2306      	movs	r3, #6
 80029e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 80029e8:	2304      	movs	r3, #4
 80029ea:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80029ec:	f107 0118 	add.w	r1, r7, #24
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff fe2f 	bl	8002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d041      	beq.n	8002a7e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80029fa:	2307      	movs	r3, #7
 80029fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002a00:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002a02:	4f43      	ldr	r7, [pc, #268]	; (8002b10 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002a04:	220c      	movs	r2, #12
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7ff fe57 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002a0e:	f105 0608 	add.w	r6, r5, #8
 8002a12:	2304      	movs	r3, #4
 8002a14:	463a      	mov	r2, r7
 8002a16:	4620      	mov	r0, r4
 8002a18:	4631      	mov	r1, r6
 8002a1a:	f7ff fe1b 	bl	8002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002a1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d04a      	beq.n	8002abc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d14a      	bne.n	8002ac0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002a2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002a2c:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002a2e:	42ab      	cmp	r3, r5
 8002a30:	d84a      	bhi.n	8002ac8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002a32:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002a36:	1d29      	adds	r1, r5, #4
 8002a38:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002a3a:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002a3c:	9101      	str	r1, [sp, #4]
 8002a3e:	f7ff fe19 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002a42:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002a44:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002a46:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff fe13 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002a4e:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002a50:	2204      	movs	r2, #4
 8002a52:	4620      	mov	r0, r4
 8002a54:	4631      	mov	r1, r6
 8002a56:	f7ff fe31 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002a5e:	4631      	mov	r1, r6
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff fdf7 	bl	8002654 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d139      	bne.n	8002ade <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 8002a6a:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002a6c:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8002a6e:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002a70:	69a3      	ldr	r3, [r4, #24]
 8002a72:	6223      	str	r3, [r4, #32]
}
 8002a74:	b002      	add	sp, #8
 8002a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002a7a:	2601      	movs	r6, #1
 8002a7c:	e7b4      	b.n	80029e8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 8002a7e:	2e00      	cmp	r6, #0
 8002a80:	d0be      	beq.n	8002a00 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002a82:	f107 0120 	add.w	r1, r7, #32
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7ff fdf4 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002a90:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002a94:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a98:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7ff fdea 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002aa0:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002aa4:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff fde4 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002aac:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002ab0:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff fdde 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002ab8:	6120      	str	r0, [r4, #16]
 8002aba:	e7a1      	b.n	8002a00 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0b8      	beq.n	8002a32 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002ac0:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002ac2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002ac6:	e7d5      	b.n	8002a74 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff fdd3 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002ace:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002ad0:	220c      	movs	r2, #12
        listOffset += listSize;
 8002ad2:	4405      	add	r5, r0
        readData(listOffset, 12);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7ff fdf0 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
 8002adc:	e797      	b.n	8002a0e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002ade:	230b      	movs	r3, #11
 8002ae0:	e7ef      	b.n	8002ac2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002ae2:	bf00      	nop
 8002ae4:	0802be3f 	.word	0x0802be3f
 8002ae8:	0802be5d 	.word	0x0802be5d
 8002aec:	0802be44 	.word	0x0802be44
 8002af0:	0802bc5b 	.word	0x0802bc5b
 8002af4:	0802be8a 	.word	0x0802be8a
 8002af8:	0802be8f 	.word	0x0802be8f
 8002afc:	0802bea7 	.word	0x0802bea7
 8002b00:	0802beac 	.word	0x0802beac
 8002b04:	0802bec2 	.word	0x0802bec2
 8002b08:	0802bece 	.word	0x0802bece
 8002b0c:	0802bed3 	.word	0x0802bed3
 8002b10:	0802bed8 	.word	0x0802bed8
 8002b14:	0802bedd 	.word	0x0802bedd

08002b18 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002b18:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002b20:	f7ff bf0c 	b.w	800293c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002b24 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002b24:	b510      	push	{r4, lr}
    movieData = 0;
 8002b26:	2300      	movs	r3, #0
{
 8002b28:	4604      	mov	r4, r0
 8002b2a:	4608      	mov	r0, r1
    movieData = 0;
 8002b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8002b2e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002b30:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4798      	blx	r3
 8002b36:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002b38:	4620      	mov	r0, r4
}
 8002b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002b3e:	f7ff befd 	b.w	800293c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002b42 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002b42:	b4f0      	push	{r4, r5, r6, r7}
 8002b44:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002b48:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 8002b4c:	b12a      	cbz	r2, 8002b5a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002b4e:	b123      	cbz	r3, 8002b5a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002b50:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 8002b54:	bcf0      	pop	{r4, r5, r6, r7}
 8002b56:	f7ff bd01 	b.w	800255c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b5c:	4770      	bx	lr
	...

08002b60 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b64:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002b66:	6943      	ldr	r3, [r0, #20]
{
 8002b68:	b085      	sub	sp, #20
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	460f      	mov	r7, r1
 8002b6e:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002b70:	b92b      	cbnz	r3, 8002b7e <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002b74:	2177      	movs	r1, #119	; 0x77
 8002b76:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002b78:	482a      	ldr	r0, [pc, #168]	; (8002c24 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002b7a:	f027 fb1f 	bl	802a1bc <__assert_func>
    readData(currentMovieOffset, 8);
 8002b7e:	2208      	movs	r2, #8
 8002b80:	6981      	ldr	r1, [r0, #24]
 8002b82:	f7ff fd9b 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002b86:	69a6      	ldr	r6, [r4, #24]
 8002b88:	4620      	mov	r0, r4
 8002b8a:	4631      	mov	r1, r6
 8002b8c:	f7ff fd87 	bl	800269e <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b90:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo = getU16(currentMovieOffset);
 8002b92:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff fd82 	bl	800269e <_ZN20SoftwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b9a:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b9c:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff fd68 	bl	8002674 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002ba4:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002baa:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002bac:	1842      	adds	r2, r0, r1
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d227      	bcs.n	8002c02 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002bb2:	f243 0330 	movw	r3, #12336	; 0x3030
 8002bb6:	459b      	cmp	fp, r3
 8002bb8:	d117      	bne.n	8002bea <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002bba:	f246 3364 	movw	r3, #25444	; 0x6364
 8002bbe:	459a      	cmp	sl, r3
 8002bc0:	d113      	bne.n	8002bea <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002bc2:	b190      	cbz	r0, 8002bea <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002bc4:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002bc6:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fd77 	bl	80026bc <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002bd0:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002bd2:	462a      	mov	r2, r5
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f8cd 8000 	str.w	r8, [sp]
 8002bda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002bde:	463b      	mov	r3, r7
 8002be0:	f7ff ffaf 	bl	8002b42 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002be4:	6963      	ldr	r3, [r4, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002bea:	69a3      	ldr	r3, [r4, #24]
 8002bec:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8002bee:	b18d      	cbz	r5, 8002c14 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8002bf0:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002bf2:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002bf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002bfc:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002bfe:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002c00:	d10a      	bne.n	8002c18 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8002c02:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8002c04:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8002c06:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002c08:	61a3      	str	r3, [r4, #24]
}
 8002c0a:	f080 0001 	eor.w	r0, r0, #1
 8002c0e:	b005      	add	sp, #20
 8002c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          currentMovieOffset += 8;
 8002c14:	3308      	adds	r3, #8
 8002c16:	e7eb      	b.n	8002bf0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e7f6      	b.n	8002c0a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002c1c:	0802bd13 	.word	0x0802bd13
 8002c20:	0802bee2 	.word	0x0802bee2
 8002c24:	0802bc5b 	.word	0x0802bc5b

08002c28 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002c28:	2001      	movs	r0, #1
 8002c2a:	4770      	bx	lr

08002c2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002c2c:	200c      	movs	r0, #12
 8002c2e:	4770      	bx	lr

08002c30 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002c30:	230c      	movs	r3, #12
 8002c32:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002c36:	3008      	adds	r0, #8
 8002c38:	4770      	bx	lr

08002c3a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002c40:	3008      	adds	r0, #8
 8002c42:	4770      	bx	lr

08002c44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002c44:	2001      	movs	r0, #1
 8002c46:	4770      	bx	lr

08002c48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002c48:	20e0      	movs	r0, #224	; 0xe0
 8002c4a:	4770      	bx	lr

08002c4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002c4c:	23e0      	movs	r3, #224	; 0xe0
 8002c4e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002c52:	3008      	adds	r0, #8
 8002c54:	4770      	bx	lr

08002c56 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002c56:	23e0      	movs	r3, #224	; 0xe0
 8002c58:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002c5c:	3008      	adds	r0, #8
 8002c5e:	4770      	bx	lr

08002c60 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002c60:	2001      	movs	r0, #1
 8002c62:	4770      	bx	lr

08002c64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002c64:	2010      	movs	r0, #16
 8002c66:	4770      	bx	lr

08002c68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002c68:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002c6c:	3008      	adds	r0, #8
 8002c6e:	4770      	bx	lr

08002c70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002c70:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002c74:	3008      	adds	r0, #8
 8002c76:	4770      	bx	lr

08002c78 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002c78:	4608      	mov	r0, r1
 8002c7a:	f000 be3b 	b.w	80038f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08002c80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002c82:	b510      	push	{r4, lr}
 8002c84:	4604      	mov	r4, r0
 8002c86:	6003      	str	r3, [r0, #0]
 8002c88:	f014 f86a 	bl	8016d60 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	bd10      	pop	{r4, pc}
 8002c90:	0802bff0 	.word	0x0802bff0

08002c94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	4604      	mov	r4, r0
 8002c98:	f7ff fff2 	bl	8002c80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c9c:	2114      	movs	r1, #20
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f027 fa5e 	bl	802a160 <_ZdlPvj>
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	bd10      	pop	{r4, pc}

08002ca8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002caa:	b510      	push	{r4, lr}
 8002cac:	4604      	mov	r4, r0
 8002cae:	6003      	str	r3, [r0, #0]
 8002cb0:	f014 f856 	bl	8016d60 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	bd10      	pop	{r4, pc}
 8002cb8:	0802bfbc 	.word	0x0802bfbc

08002cbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	f7ff fff2 	bl	8002ca8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002cc4:	21e8      	movs	r1, #232	; 0xe8
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f027 fa4a 	bl	802a160 <_ZdlPvj>
 8002ccc:	4620      	mov	r0, r4
 8002cce:	bd10      	pop	{r4, pc}

08002cd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002cd2:	b510      	push	{r4, lr}
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	6003      	str	r3, [r0, #0]
 8002cd8:	f014 f842 	bl	8016d60 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002cdc:	4620      	mov	r0, r4
 8002cde:	bd10      	pop	{r4, pc}
 8002ce0:	0802bf88 	.word	0x0802bf88

08002ce4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	f7ff fff2 	bl	8002cd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002cec:	2118      	movs	r1, #24
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f027 fa36 	bl	802a160 <_ZdlPvj>
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	bd10      	pop	{r4, pc}

08002cf8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <_ZN12FrontendHeapD1Ev+0x24>)
 8002cfa:	b510      	push	{r4, lr}
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	6003      	str	r3, [r0, #0]
 8002d00:	f500 708a 	add.w	r0, r0, #276	; 0x114
 8002d04:	f7ff ffbc 	bl	8002c80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002d08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002d0c:	f7ff ffcc 	bl	8002ca8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002d10:	f104 0014 	add.w	r0, r4, #20
 8002d14:	f7ff ffdc 	bl	8002cd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002d18:	4620      	mov	r0, r4
 8002d1a:	bd10      	pop	{r4, pc}
 8002d1c:	0802c024 	.word	0x0802c024

08002d20 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002d20:	b508      	push	{r3, lr}
 8002d22:	4802      	ldr	r0, [pc, #8]	; (8002d2c <__tcf_0+0xc>)
 8002d24:	f7ff ffe8 	bl	8002cf8 <_ZN12FrontendHeapD1Ev>
 8002d28:	bd08      	pop	{r3, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000478 	.word	0x20000478

08002d30 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4604      	mov	r4, r0
 8002d34:	f7ff ffe0 	bl	8002cf8 <_ZN12FrontendHeapD1Ev>
 8002d38:	f44f 7122 	mov.w	r1, #648	; 0x288
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f027 fa0f 	bl	802a160 <_ZdlPvj>
 8002d42:	4620      	mov	r0, r4
 8002d44:	bd10      	pop	{r4, pc}
	...

08002d48 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002d48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002d4c:	f000 fc52 	bl	80035f4 <_ZN14BitmapDatabase11getInstanceEv>
 8002d50:	2400      	movs	r4, #0
 8002d52:	4605      	mov	r5, r0
 8002d54:	f000 fc52 	bl	80035fc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002d58:	4623      	mov	r3, r4
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	4628      	mov	r0, r5
 8002d60:	9400      	str	r4, [sp, #0]
 8002d62:	f019 fd7b 	bl	801c85c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <touchgfx_init+0xb4>)
 8002d68:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002d6a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002d6c:	4d25      	ldr	r5, [pc, #148]	; (8002e04 <touchgfx_init+0xbc>)
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f001 f84a 	bl	8003e08 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002d74:	4824      	ldr	r0, [pc, #144]	; (8002e08 <touchgfx_init+0xc0>)
 8002d76:	f019 fcd9 	bl	801c72c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	f3bf 8f5b 	dmb	ish
 8002d80:	07db      	lsls	r3, r3, #31
 8002d82:	d435      	bmi.n	8002df0 <touchgfx_init+0xa8>
 8002d84:	4628      	mov	r0, r5
 8002d86:	f027 f9ed 	bl	802a164 <__cxa_guard_acquire>
 8002d8a:	b388      	cbz	r0, 8002df0 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002d8c:	4c1f      	ldr	r4, [pc, #124]	; (8002e0c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <touchgfx_init+0xc8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002d90:	f504 7696 	add.w	r6, r4, #300	; 0x12c
        : presenterStorage(pres),
 8002d94:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8002d98:	f104 082c 	add.w	r8, r4, #44	; 0x2c
          transitionStorage(tra),
 8002d9c:	f504 778a 	add.w	r7, r4, #276	; 0x114
 8002da0:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8002da2:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002da4:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002da8:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002daa:	6126      	str	r6, [r4, #16]
 8002dac:	f013 ffda 	bl	8016d64 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002db0:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <touchgfx_init+0xcc>)
 8002db2:	4640      	mov	r0, r8
 8002db4:	6163      	str	r3, [r4, #20]
 8002db6:	f013 ffd5 	bl	8016d64 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <touchgfx_init+0xd0>)
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dc0:	f013 ffd0 	bl	8016d64 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <touchgfx_init+0xd4>)
 8002dc6:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8002dca:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002dce:	f001 f897 	bl	8003f00 <_ZN5ModelC1Ev>
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	f504 7194 	add.w	r1, r4, #296	; 0x128
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f001 f887 	bl	8003eec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002dde:	4630      	mov	r0, r6
 8002de0:	f000 fd88 	bl	80038f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002de4:	480e      	ldr	r0, [pc, #56]	; (8002e20 <touchgfx_init+0xd8>)
 8002de6:	f027 fa07 	bl	802a1f8 <atexit>
 8002dea:	4628      	mov	r0, r5
 8002dec:	f027 f9c6 	bl	802a17c <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <touchgfx_init+0xdc>)
}
 8002df2:	b002      	add	sp, #8
 8002df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002df8:	f7ff b8a2 	b.w	8001f40 <_ZN11TouchGFXHAL10initializeEv>
 8002dfc:	2001517c 	.word	0x2001517c
 8002e00:	20001520 	.word	0x20001520
 8002e04:	20000474 	.word	0x20000474
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	20000478 	.word	0x20000478
 8002e10:	0802c024 	.word	0x0802c024
 8002e14:	0802bf88 	.word	0x0802bf88
 8002e18:	0802bfbc 	.word	0x0802bfbc
 8002e1c:	0802bff0 	.word	0x0802bff0
 8002e20:	08002d21 	.word	0x08002d21
 8002e24:	200014a4 	.word	0x200014a4

08002e28 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002e28:	4770      	bx	lr
	...

08002e2c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002e2c:	4801      	ldr	r0, [pc, #4]	; (8002e34 <touchgfx_taskEntry+0x8>)
 8002e2e:	f014 baaa 	b.w	8017386 <_ZN8touchgfx3HAL9taskEntryEv>
 8002e32:	bf00      	nop
 8002e34:	200014a4 	.word	0x200014a4

08002e38 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002e38:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002e3a:	4e22      	ldr	r6, [pc, #136]	; (8002ec4 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <_GLOBAL__sub_I_touchgfx_init+0x90>)
 8002e3e:	4c23      	ldr	r4, [pc, #140]	; (8002ecc <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002e40:	4630      	mov	r0, r6
static LCD16bpp display;
 8002e42:	4d23      	ldr	r5, [pc, #140]	; (8002ed0 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002e44:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002e46:	f7ff fa19 	bl	800227c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f01d ffe0 	bl	8020e10 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
          mcuInstrumentation(0),
 8002e52:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002e54:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002e58:	481f      	ldr	r0, [pc, #124]	; (8002ed8 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002e5a:	861a      	strh	r2, [r3, #48]	; 0x30
          useAuxiliaryLCD(false),
 8002e5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          lastY(0),
 8002e60:	665a      	str	r2, [r3, #100]	; 0x64
          updateMCULoad(0),
 8002e62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8002e66:	675a      	str	r2, [r3, #116]	; 0x74
          touchController(touchCtrl),
 8002e68:	60dc      	str	r4, [r3, #12]
          auxiliaryLCD(0),
 8002e6a:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
          touchSampleRate(1),
 8002e6e:	491b      	ldr	r1, [pc, #108]	; (8002edc <_GLOBAL__sub_I_touchgfx_init+0xa4>)
          vSyncCompensationEnabled(false),
 8002e70:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002e74:	491a      	ldr	r1, [pc, #104]	; (8002ee0 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002e76:	6799      	str	r1, [r3, #120]	; 0x78
        instance = this;
 8002e78:	491a      	ldr	r1, [pc, #104]	; (8002ee4 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002e7a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002e7c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002e80:	8001      	strh	r1, [r0, #0]
 8002e82:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002e84:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002e86:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002e8a:	4818      	ldr	r0, [pc, #96]	; (8002eec <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          buttonController(0),
 8002e8c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002e90:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002e94:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002e98:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
          frameBuffer0(0),
 8002e9c:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
 8002ea0:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002ea4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
          lastX(0),
 8002ea8:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
          lcdRef(display),
 8002eac:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002eb0:	8001      	strh	r1, [r0, #0]
 8002eb2:	480f      	ldr	r0, [pc, #60]	; (8002ef0 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002eb8:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002ebc:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	20000704 	.word	0x20000704
 8002ec8:	0802b6e0 	.word	0x0802b6e0
 8002ecc:	20000700 	.word	0x20000700
 8002ed0:	20001524 	.word	0x20001524
 8002ed4:	200014a4 	.word	0x200014a4
 8002ed8:	20015114 	.word	0x20015114
 8002edc:	01000001 	.word	0x01000001
 8002ee0:	01010000 	.word	0x01010000
 8002ee4:	20015120 	.word	0x20015120
 8002ee8:	2001511a 	.word	0x2001511a
 8002eec:	20015116 	.word	0x20015116
 8002ef0:	2001511c 	.word	0x2001511c
 8002ef4:	20015118 	.word	0x20015118
 8002ef8:	0802b86c 	.word	0x0802b86c

08002efc <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002efc:	4801      	ldr	r0, [pc, #4]	; (8002f04 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002efe:	f7ff b999 	b.w	8002234 <_ZN8STM32DMAD1Ev>
 8002f02:	bf00      	nop
 8002f04:	20000704 	.word	0x20000704

08002f08 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002f08:	2000      	movs	r0, #0
 8002f0a:	4770      	bx	lr

08002f0c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002f0c:	8081      	strh	r1, [r0, #4]
    }
 8002f0e:	4770      	bx	lr

08002f10 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002f10:	80c1      	strh	r1, [r0, #6]
    }
 8002f12:	4770      	bx	lr

08002f14 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002f14:	8101      	strh	r1, [r0, #8]
    }
 8002f16:	4770      	bx	lr

08002f18 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002f18:	8141      	strh	r1, [r0, #10]
    }
 8002f1a:	4770      	bx	lr

08002f1c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002f1c:	4770      	bx	lr

08002f1e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002f1e:	4770      	bx	lr

08002f20 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002f20:	4770      	bx	lr

08002f22 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002f22:	4770      	bx	lr

08002f24 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002f24:	4770      	bx	lr

08002f26 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002f26:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002f28:	88c4      	ldrh	r4, [r0, #6]
 8002f2a:	6803      	ldr	r3, [r0, #0]
 8002f2c:	1b12      	subs	r2, r2, r4
 8002f2e:	8884      	ldrh	r4, [r0, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	1b09      	subs	r1, r1, r4
 8002f34:	b212      	sxth	r2, r2
    }
 8002f36:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002f3a:	b209      	sxth	r1, r1
 8002f3c:	4718      	bx	r3

08002f3e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f42:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002f4e:	6010      	str	r0, [r2, #0]
    }
 8002f50:	4770      	bx	lr

08002f52 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002f52:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002f56:	b11a      	cbz	r2, 8002f60 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002f58:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002f5c:	b102      	cbz	r2, 8002f60 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002f5e:	6018      	str	r0, [r3, #0]
        }
    }
 8002f60:	4770      	bx	lr
	...

08002f64 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002f66:	2290      	movs	r2, #144	; 0x90
 8002f68:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002f6c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002f78:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002f7a:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002f7c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002f7e:	480a      	ldr	r0, [pc, #40]	; (8002fa8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002f8a:	6911      	ldr	r1, [r2, #16]
 8002f8c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002f90:	3901      	subs	r1, #1
 8002f92:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002f96:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002f9e:	4770      	bx	lr
 8002fa0:	40016800 	.word	0x40016800
 8002fa4:	200015aa 	.word	0x200015aa
 8002fa8:	200015a8 	.word	0x200015a8

08002fac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002fae:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002fb2:	4770      	bx	lr
 8002fb4:	40016800 	.word	0x40016800

08002fb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002fba:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002fbc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002fc2:	4770      	bx	lr
 8002fc4:	40016800 	.word	0x40016800

08002fc8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002fca:	6953      	ldr	r3, [r2, #20]
 8002fcc:	03db      	lsls	r3, r3, #15
{
 8002fce:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002fd0:	d51e      	bpl.n	8003010 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002fd8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002fdc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002fe0:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002fe4:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002fe8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002fec:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002fee:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ff2:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ff4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002ff8:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ffa:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002ffe:	d2f9      	bcs.n	8002ff4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003000:	3b20      	subs	r3, #32
 8003002:	f113 0f20 	cmn.w	r3, #32
 8003006:	d1f2      	bne.n	8002fee <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800300c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003010:	bd70      	pop	{r4, r5, r6, pc}
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8003018:	4770      	bx	lr

0800301a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 800301a:	2338      	movs	r3, #56	; 0x38
 800301c:	2200      	movs	r2, #0
 800301e:	fb01 3303 	mla	r3, r1, r3, r3
 8003022:	54c2      	strb	r2, [r0, r3]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8003024:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003028:	b90b      	cbnz	r3, 800302e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 800302a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800302c:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 800302e:	4770      	bx	lr

08003030 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8003030:	4770      	bx	lr

08003032 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	2158      	movs	r1, #88	; 0x58
 8003038:	f027 f892 	bl	802a160 <_ZdlPvj>
 800303c:	4620      	mov	r0, r4
 800303e:	bd10      	pop	{r4, pc}

08003040 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4604      	mov	r4, r0
    HAL::initialize();
 8003044:	f014 f98b 	bl	801735e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800304c:	f016 ff4e 	bl	8019eec <_ZN8touchgfx11Application11getInstanceEv>
 8003050:	4601      	mov	r1, r0
 8003052:	4620      	mov	r0, r4
 8003054:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	4a08      	ldr	r2, [pc, #32]	; (800307c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800305a:	4620      	mov	r0, r4
 800305c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8003060:	2300      	movs	r3, #0
 8003062:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8003066:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800306a:	4a06      	ldr	r2, [pc, #24]	; (8003084 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800306c:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 800306e:	4a06      	ldr	r2, [pc, #24]	; (8003088 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8003072:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8003074:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
}
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	c007f800 	.word	0xc007f800
 8003080:	20001d74 	.word	0x20001d74
 8003084:	20001d2c 	.word	0x20001d2c
 8003088:	c00bf400 	.word	0xc00bf400

0800308c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800308c:	f014 b94e 	b.w	801732c <_ZN8touchgfx3HAL10beginFrameEv>

08003090 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8003090:	f014 b958 	b.w	8017344 <_ZN8touchgfx3HAL8endFrameEv>

08003094 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8003094:	f014 b914 	b.w	80172c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08003098 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8003098:	f014 ba83 	b.w	80175a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800309c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800309c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80030a0:	b112      	cbz	r2, 80030a8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80030a2:	6803      	ldr	r3, [r0, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4718      	bx	r3
    }
 80030a8:	4770      	bx	lr
	...

080030ac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 80030ac:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 80030ae:	b131      	cbz	r1, 80030be <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 80030b2:	f240 1197 	movw	r1, #407	; 0x197
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 80030b8:	4804      	ldr	r0, [pc, #16]	; (80030cc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 80030ba:	f027 f87f 	bl	802a1bc <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 80030be:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80030c2:	bd08      	pop	{r3, pc}
 80030c4:	0802c030 	.word	0x0802c030
 80030c8:	0802c044 	.word	0x0802c044
 80030cc:	0802c1d1 	.word	0x0802c1d1

080030d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80030d0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80030d2:	b131      	cbz	r1, 80030e2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80030d6:	f240 1191 	movw	r1, #401	; 0x191
 80030da:	4a06      	ldr	r2, [pc, #24]	; (80030f4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80030dc:	4806      	ldr	r0, [pc, #24]	; (80030f8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80030de:	f027 f86d 	bl	802a1bc <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80030e2:	6840      	ldr	r0, [r0, #4]
 80030e4:	4611      	mov	r1, r2
 80030e6:	6803      	ldr	r3, [r0, #0]
    }
 80030e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4718      	bx	r3
 80030f0:	0802c030 	.word	0x0802c030
 80030f4:	0802c213 	.word	0x0802c213
 80030f8:	0802c1d1 	.word	0x0802c1d1

080030fc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80030fc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80030fe:	b129      	cbz	r1, 800310c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8003102:	217a      	movs	r1, #122	; 0x7a
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8003106:	4804      	ldr	r0, [pc, #16]	; (8003118 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8003108:	f027 f858 	bl	802a1bc <__assert_func>
    }
 800310c:	6900      	ldr	r0, [r0, #16]
 800310e:	bd08      	pop	{r3, pc}
 8003110:	0802c030 	.word	0x0802c030
 8003114:	0802c3c4 	.word	0x0802c3c4
 8003118:	0802c1d1 	.word	0x0802c1d1

0800311c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800311c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800311e:	b129      	cbz	r1, 800312c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8003122:	2183      	movs	r1, #131	; 0x83
 8003124:	4a05      	ldr	r2, [pc, #20]	; (800313c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8003126:	4806      	ldr	r0, [pc, #24]	; (8003140 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8003128:	f027 f848 	bl	802a1bc <__assert_func>
        stream.tickCount = 0;
 800312c:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 800312e:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8003130:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003134:	bd08      	pop	{r3, pc}
 8003136:	bf00      	nop
 8003138:	0802c030 	.word	0x0802c030
 800313c:	0802c57c 	.word	0x0802c57c
 8003140:	0802c1d1 	.word	0x0802c1d1

08003144 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003144:	b510      	push	{r4, lr}
 8003146:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003148:	b129      	cbz	r1, 8003156 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 800314c:	21a4      	movs	r1, #164	; 0xa4
 800314e:	4a27      	ldr	r2, [pc, #156]	; (80031ec <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8003150:	4827      	ldr	r0, [pc, #156]	; (80031f0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8003152:	f027 f833 	bl	802a1bc <__assert_func>
        switch (cmd)
 8003156:	2a05      	cmp	r2, #5
 8003158:	d834      	bhi.n	80031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 800315a:	e8df f002 	tbb	[pc, r2]
 800315e:	2903      	.short	0x2903
 8003160:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8003164:	6840      	ldr	r0, [r0, #4]
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	4798      	blx	r3
 800316c:	b350      	cbz	r0, 80031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 800316e:	f04f 31ff 	mov.w	r1, #4294967295
 8003172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003174:	f004 fa4a 	bl	800760c <osMutexAcquire>
                stream.cancelDecoding = false;
 8003178:	2300      	movs	r3, #0
                stream.isPlaying = true;
 800317a:	2201      	movs	r2, #1
                if (stream.isStopped)
 800317c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8003180:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8003184:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8003188:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 800318a:	6163      	str	r3, [r4, #20]
                if (stream.isStopped)
 800318c:	b101      	cbz	r1, 8003190 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 800318e:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8003190:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8003194:	6263      	str	r3, [r4, #36]	; 0x24
                if (stream.nextBuffer == 0)
 8003196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003198:	b92b      	cbnz	r3, 80031a6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 800319a:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 800319c:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 800319e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 80031a2:	f004 fb1d 	bl	80077e0 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 80031a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 80031a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 80031ac:	f004 ba5e 	b.w	800766c <osMutexRelease>
            stream.isPlaying = false;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 80031b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 80031ba:	e003      	b.n	80031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 80031bc:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 80031c2:	6143      	str	r3, [r0, #20]
    }
 80031c4:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80031c6:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 80031cc:	6143      	str	r3, [r0, #20]
 80031ce:	e7f2      	b.n	80031b6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e7ed      	b.n	80031b6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 80031da:	3b00      	subs	r3, #0
 80031dc:	bf18      	it	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 80031e4:	e7ee      	b.n	80031c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 80031e6:	bf00      	nop
 80031e8:	0802c030 	.word	0x0802c030
 80031ec:	0802c73b 	.word	0x0802c73b
 80031f0:	0802c1d1 	.word	0x0802c1d1

080031f4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	4604      	mov	r4, r0
 80031f8:	4616      	mov	r6, r2
        assert(handle < no_streams);
 80031fa:	b129      	cbz	r1, 8003208 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 80031fe:	21e7      	movs	r1, #231	; 0xe7
 8003200:	4a31      	ldr	r2, [pc, #196]	; (80032c8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8003202:	4832      	ldr	r0, [pc, #200]	; (80032cc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8003204:	f026 ffda 	bl	802a1bc <__assert_func>
        if (stream.isPlaying)
 8003208:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800320c:	b133      	cbz	r3, 800321c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 800320e:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003216:	6943      	ldr	r3, [r0, #20]
 8003218:	4413      	add	r3, r2
 800321a:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 800321c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04d      	beq.n	80032be <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003222:	69e1      	ldr	r1, [r4, #28]
 8003224:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003228:	4353      	muls	r3, r2
 800322a:	68a2      	ldr	r2, [r4, #8]
 800322c:	434a      	muls	r2, r1
 800322e:	4293      	cmp	r3, r2
 8003230:	d220      	bcs.n	8003274 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8003232:	6a23      	ldr	r3, [r4, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d042      	beq.n	80032be <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800323e:	f004 f9e5 	bl	800760c <osMutexAcquire>
            if (stream.seek_to_frame > 0)
 8003242:	6a23      	ldr	r3, [r4, #32]
 8003244:	b10b      	cbz	r3, 800324a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	62e3      	str	r3, [r4, #44]	; 0x2c
            if (stream.nextBuffer != 0)
 800324a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800324c:	b9fb      	cbnz	r3, 800328e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 800324e:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8003250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003252:	f004 fa0b 	bl	800766c <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8003256:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800325a:	b90b      	cbnz	r3, 8003260 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 800325c:	6a23      	ldr	r3, [r4, #32]
 800325e:	b13b      	cbz	r3, 8003270 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8003260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003262:	b92b      	cbnz	r3, 8003270 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8003264:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8003266:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8003268:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 800326c:	f004 fab8 	bl	80077e0 <osSemaphoreRelease>
    }
 8003270:	4628      	mov	r0, r5
 8003272:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8003274:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8003278:	2800      	cmp	r0, #0
 800327a:	d0dd      	beq.n	8003238 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003282:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003284:	bf98      	it	ls
 8003286:	f102 32ff 	addls.w	r2, r2, #4294967295
 800328a:	6262      	str	r2, [r4, #36]	; 0x24
 800328c:	e7d4      	b.n	8003238 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 800328e:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8003290:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8003294:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 8003296:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8003298:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 800329a:	68e2      	ldr	r2, [r4, #12]
 800329c:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 800329e:	68a2      	ldr	r2, [r4, #8]
 80032a0:	3201      	adds	r2, #1
 80032a2:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80032a4:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 80032a6:	6833      	ldr	r3, [r6, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 80032ac:	2d00      	cmp	r5, #0
 80032ae:	d1ce      	bne.n	800324e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 80032b0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1cb      	bne.n	8003250 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 80032b8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80032bc:	e7c8      	b.n	8003250 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 80032be:	2501      	movs	r5, #1
 80032c0:	e7c9      	b.n	8003256 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 80032c2:	bf00      	nop
 80032c4:	0802c030 	.word	0x0802c030
 80032c8:	0802c912 	.word	0x0802c912
 80032cc:	0802c1d1 	.word	0x0802c1d1
 80032d0:	20015120 	.word	0x20015120

080032d4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80032d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	4770      	bx	lr
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80032ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80032f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003306:	f3bf 8f6f 	isb	sy
}
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100

08003310 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003314:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8003318:	bb38      	cbnz	r0, 800336a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x5a>
        streams[handle].isActive = true;
 800331a:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 800331c:	6098      	str	r0, [r3, #8]
 800331e:	60d8      	str	r0, [r3, #12]
        streams[handle].isActive = true;
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
                streams[i] = Stream();
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	6158      	str	r0, [r3, #20]
 8003328:	879a      	strh	r2, [r3, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 800332a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800332e:	6198      	str	r0, [r3, #24]
 8003330:	61d8      	str	r0, [r3, #28]
 8003332:	6218      	str	r0, [r3, #32]
 8003334:	6258      	str	r0, [r3, #36]	; 0x24
 8003336:	6298      	str	r0, [r3, #40]	; 0x28
 8003338:	62d8      	str	r0, [r3, #44]	; 0x2c
 800333a:	6318      	str	r0, [r3, #48]	; 0x30
 800333c:	6358      	str	r0, [r3, #52]	; 0x34
 800333e:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
 8003342:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8003344:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8003348:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
        bufferHeight = height;
 800334c:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 800334e:	6308      	str	r0, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 8003352:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003354:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8003358:	e9d3 1510 	ldrd	r1, r5, [r3, #64]	; 0x40
 800335c:	4429      	add	r1, r5
 800335e:	428c      	cmp	r4, r1
 8003360:	d90a      	bls.n	8003378 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8003364:	2158      	movs	r1, #88	; 0x58
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003368:	e003      	b.n	8003372 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x62>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 800336c:	f240 11f5 	movw	r1, #501	; 0x1f5
 8003370:	4a07      	ldr	r2, [pc, #28]	; (8003390 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003372:	4808      	ldr	r0, [pc, #32]	; (8003394 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003374:	f026 ff22 	bl	802a1bc <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 800337a:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 800337e:	649c      	str	r4, [r3, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 8003380:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8003382:	bd38      	pop	{r3, r4, r5, pc}
 8003384:	0802cc70 	.word	0x0802cc70
 8003388:	0802ccb0 	.word	0x0802ccb0
 800338c:	0802cab6 	.word	0x0802cab6
 8003390:	0802cae6 	.word	0x0802cae6
 8003394:	0802c1d1 	.word	0x0802c1d1

08003398 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003398:	b510      	push	{r4, lr}
        return instance;
 800339a:	4c14      	ldr	r4, [pc, #80]	; (80033ec <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	b323      	cbz	r3, 80033ea <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_LTDC_LineEventCallback+0x58>)
 80033a2:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_LTDC_LineEventCallback+0x5c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	8811      	ldrh	r1, [r2, #0]
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d113      	bne.n	80033d4 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_LTDC_LineEventCallback+0x60>)
 80033ae:	8819      	ldrh	r1, [r3, #0]
 80033b0:	f002 fcac 	bl	8005d0c <HAL_LTDC_ProgramLineEvent>
 80033b4:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80033b6:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 80033ba:	3301      	adds	r3, #1
 80033bc:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80033c0:	f7fe fee8 	bl	8002194 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80033c4:	6820      	ldr	r0, [r4, #0]
 80033c6:	f014 fd17 	bl	8017df8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80033ca:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80033cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80033d0:	f7fe bce6 	b.w	8001da0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80033d4:	f002 fc9a 	bl	8005d0c <HAL_LTDC_ProgramLineEvent>
        return instance;
 80033d8:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80033da:	6803      	ldr	r3, [r0, #0]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80033e0:	2000      	movs	r0, #0
    }
 80033e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80033e6:	f7fe bd0b 	b.w	8001e00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80033ea:	bd10      	pop	{r4, pc}
 80033ec:	20015120 	.word	0x20015120
 80033f0:	40016800 	.word	0x40016800
 80033f4:	200015aa 	.word	0x200015aa
 80033f8:	200015a8 	.word	0x200015a8

080033fc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80033fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003400:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003402:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8003406:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 800340a:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 800340e:	2b00      	cmp	r3, #0
 8003410:	d031      	beq.n	8003476 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x7a>
            MUTEX_LOCK(mutexBuffers);
 8003412:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003414:	f004 f8fa 	bl	800760c <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003418:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800341a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800341c:	42bb      	cmp	r3, r7
 800341e:	d100      	bne.n	8003422 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x26>
 8003420:	6b67      	ldr	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 8003422:	6a26      	ldr	r6, [r4, #32]
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 8003424:	6865      	ldr	r5, [r4, #4]
            if (stream.seek_to_frame > 0)
 8003426:	b356      	cbz	r6, 800347e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x82>
                decoder->gotoFrame(stream.seek_to_frame);
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	4631      	mov	r1, r6
 800342c:	4628      	mov	r0, r5
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	4798      	blx	r3
                stream.seek_to_frame = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 8003436:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 800343a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800343c:	f004 f916 	bl	800766c <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003446:	4639      	mov	r1, r7
 8003448:	f8cd 8000 	str.w	r8, [sp]
 800344c:	4628      	mov	r0, r5
 800344e:	695e      	ldr	r6, [r3, #20]
 8003450:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003454:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 8003456:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 800345a:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 800345c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800345e:	f004 f8d5 	bl	800760c <osMutexAcquire>
            if (stream.cancelDecoding)
 8003462:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8003466:	b1e3      	cbz	r3, 80034a2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa6>
                stream.cancelDecoding = false;
 8003468:	2300      	movs	r3, #0
 800346a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 800346e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003470:	f004 f8fc 	bl	800766c <osMutexRelease>
 8003474:	e7c7      	b.n	8003406 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                SEM_WAIT(semDecode);
 8003476:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003478:	f004 f978 	bl	800776c <osSemaphoreAcquire>
                continue;
 800347c:	e7c3      	b.n	8003406 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 800347e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0da      	beq.n	800343a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x3e>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	4628      	mov	r0, r5
 8003488:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800348c:	4798      	blx	r3
 800348e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003490:	4401      	add	r1, r0
 8003492:	4628      	mov	r0, r5
 8003494:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 8003496:	68a3      	ldr	r3, [r4, #8]
 8003498:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 800349a:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 800349c:	4413      	add	r3, r2
 800349e:	60a3      	str	r3, [r4, #8]
 80034a0:	e7cb      	b.n	800343a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x3e>
                stream.nextBuffer = decodeBuffer;
 80034a2:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 80034a4:	b15e      	cbz	r6, 80034be <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc2>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	4628      	mov	r0, r5
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	4798      	blx	r3
 80034ae:	3801      	subs	r0, #1
                stream.doDecodeNewFrame = false;
 80034b0:	2300      	movs	r3, #0
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80034b2:	60e0      	str	r0, [r4, #12]
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 80034b4:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 80034b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80034bc:	e7d7      	b.n	800346e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x72>
 80034be:	2001      	movs	r0, #1
 80034c0:	e7f6      	b.n	80034b0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

080034c4 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 80034c4:	4801      	ldr	r0, [pc, #4]	; (80034cc <videoTaskFunc+0x8>)
{
 80034c6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80034c8:	f7ff ff98 	bl	80033fc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80034cc:	20001d74 	.word	0x20001d74

080034d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 80034d8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80034da:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 80034dc:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 80034de:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034e6:	f004 f891 	bl	800760c <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 80034ea:	2338      	movs	r3, #56	; 0x38
 80034ec:	fb03 4205 	mla	r2, r3, r5, r4
 80034f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034f2:	b109      	cbz	r1, 80034f8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 80034f4:	2100      	movs	r1, #0
 80034f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80034f8:	fb03 4505 	mla	r5, r3, r5, r4
        }
        stream.cancelDecoding = true;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 8003502:	2300      	movs	r3, #0
 8003504:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 8003508:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 800350a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 800350e:	f004 b8ad 	b.w	800766c <osMutexRelease>

08003512 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003512:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 8003514:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003518:	4604      	mov	r4, r0
 800351a:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 800351c:	4611      	mov	r1, r2
 800351e:	6858      	ldr	r0, [r3, #4]
 8003520:	6803      	ldr	r3, [r0, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4798      	blx	r3
        clearState(handle);
 8003526:	4629      	mov	r1, r5
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff ffd1 	bl	80034d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800352e:	bd38      	pop	{r3, r4, r5, pc}

08003530 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	460d      	mov	r5, r1
 8003534:	4611      	mov	r1, r2
 8003536:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003538:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800353c:	6850      	ldr	r0, [r2, #4]
 800353e:	6802      	ldr	r2, [r0, #0]
 8003540:	6896      	ldr	r6, [r2, #8]
 8003542:	461a      	mov	r2, r3
 8003544:	47b0      	blx	r6
        clearState(handle);
 8003546:	4629      	mov	r1, r5
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff ffc1 	bl	80034d0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 800354e:	bd70      	pop	{r4, r5, r6, pc}

08003550 <_GLOBAL__sub_I_lineBuffer>:
}
 8003550:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <_GLOBAL__sub_I_lineBuffer+0x5c>)
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003554:	2500      	movs	r5, #0
 8003556:	4816      	ldr	r0, [pc, #88]	; (80035b0 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8003558:	f7ff f864 	bl	8002624 <_ZN20SoftwareMJPEGDecoderC1EPh>
          semDecode(0), mutexBuffers(0)
 800355c:	4c15      	ldr	r4, [pc, #84]	; (80035b4 <_GLOBAL__sub_I_lineBuffer+0x64>)
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <_GLOBAL__sub_I_lineBuffer+0x68>)
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003560:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 8003562:	462a      	mov	r2, r5
 8003564:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 8003566:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003568:	f44f 7380 	mov.w	r3, #256	; 0x100
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 800356c:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 800356e:	87a3      	strh	r3, [r4, #60]	; 0x3c
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003570:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003574:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0), allowSkipFrames(true),
 8003578:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
          semDecode(0), mutexBuffers(0)
 800357c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003584:	e9c4 5503 	strd	r5, r5, [r4, #12]
            frame_rate_video(0), frame_rate_ticks(0),
 8003588:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 800358c:	e9c4 5507 	strd	r5, r5, [r4, #28]
            currentBuffer(0), nextBuffer(0), bufferA(0), bufferB(0),
 8003590:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 8003594:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 800359c:	f004 f890 	bl	80076c0 <osSemaphoreNew>
 80035a0:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 80035a2:	4628      	mov	r0, r5
 80035a4:	f003 ffee 	bl	8007584 <osMutexNew>
 80035a8:	6560      	str	r0, [r4, #84]	; 0x54
}
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	200015ac 	.word	0x200015ac
 80035b0:	20001d2c 	.word	0x20001d2c
 80035b4:	20001d74 	.word	0x20001d74
 80035b8:	0802ce60 	.word	0x0802ce60

080035bc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80035bc:	4770      	bx	lr

080035be <_ZN23ApplicationFontProviderD0Ev>:
 80035be:	b510      	push	{r4, lr}
 80035c0:	4604      	mov	r4, r0
 80035c2:	2104      	movs	r1, #4
 80035c4:	f026 fdcc 	bl	802a160 <_ZdlPvj>
 80035c8:	4620      	mov	r0, r4
 80035ca:	bd10      	pop	{r4, pc}

080035cc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80035cc:	2901      	cmp	r1, #1
{
 80035ce:	b508      	push	{r3, lr}
    switch (typography)
 80035d0:	d006      	beq.n	80035e0 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80035d2:	2902      	cmp	r1, #2
 80035d4:	d008      	beq.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80035d6:	b959      	cbnz	r1, 80035f0 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80035d8:	f000 fc62 	bl	8003ea0 <_ZN17TypedTextDatabase8getFontsEv>
 80035dc:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80035de:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80035e0:	f000 fc5e 	bl	8003ea0 <_ZN17TypedTextDatabase8getFontsEv>
 80035e4:	6840      	ldr	r0, [r0, #4]
 80035e6:	e7fa      	b.n	80035de <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80035e8:	f000 fc5a 	bl	8003ea0 <_ZN17TypedTextDatabase8getFontsEv>
 80035ec:	6880      	ldr	r0, [r0, #8]
 80035ee:	e7f6      	b.n	80035de <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80035f0:	2000      	movs	r0, #0
 80035f2:	e7f4      	b.n	80035de <_ZN23ApplicationFontProvider7getFontEt+0x12>

080035f4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80035f4:	4800      	ldr	r0, [pc, #0]	; (80035f8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80035f6:	4770      	bx	lr
 80035f8:	0802cea8 	.word	0x0802cea8

080035fc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80035fc:	2003      	movs	r0, #3
 80035fe:	4770      	bx	lr

08003600 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003600:	b513      	push	{r0, r1, r4, lr}
 8003602:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003604:	b151      	cbz	r1, 800361c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003606:	6803      	ldr	r3, [r0, #0]
 8003608:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800360a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800360c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003610:	689c      	ldr	r4, [r3, #8]
 8003612:	f10d 0303 	add.w	r3, sp, #3
 8003616:	47a0      	blx	r4
        return glyph;
    }
 8003618:	b002      	add	sp, #8
 800361a:	bd10      	pop	{r4, pc}
            return 0;
 800361c:	4608      	mov	r0, r1
 800361e:	e7fb      	b.n	8003618 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003620 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003620:	89c0      	ldrh	r0, [r0, #14]
 8003622:	4770      	bx	lr

08003624 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003624:	8a00      	ldrh	r0, [r0, #16]
 8003626:	4770      	bx	lr

08003628 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003628:	88c0      	ldrh	r0, [r0, #6]
 800362a:	4770      	bx	lr

0800362c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800362c:	8880      	ldrh	r0, [r0, #4]
 800362e:	4770      	bx	lr

08003630 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003630:	7a80      	ldrb	r0, [r0, #10]
    }
 8003632:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003636:	4770      	bx	lr

08003638 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003638:	7a80      	ldrb	r0, [r0, #10]
    }
 800363a:	09c0      	lsrs	r0, r0, #7
 800363c:	4770      	bx	lr

0800363e <_ZN8touchgfx9TypedTextD1Ev>:
    }
 800363e:	4770      	bx	lr

08003640 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003640:	b510      	push	{r4, lr}
 8003642:	4604      	mov	r4, r0
    }
 8003644:	2108      	movs	r1, #8
 8003646:	f026 fd8b 	bl	802a160 <_ZdlPvj>
 800364a:	4620      	mov	r0, r4
 800364c:	bd10      	pop	{r4, pc}

0800364e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800364e:	4770      	bx	lr

08003650 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003650:	4770      	bx	lr

08003652 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003652:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8003656:	6808      	ldr	r0, [r1, #0]
 8003658:	6849      	ldr	r1, [r1, #4]
 800365a:	c303      	stmia	r3!, {r0, r1}
    }
 800365c:	4770      	bx	lr

0800365e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800365e:	4770      	bx	lr

08003660 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003660:	4770      	bx	lr

08003662 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003662:	6041      	str	r1, [r0, #4]
    }
 8003664:	4770      	bx	lr

08003666 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003666:	4770      	bx	lr

08003668 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800366a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800366e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003672:	2300      	movs	r3, #0
 8003674:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003678:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 800367c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	0800372d 	.word	0x0800372d

08003688 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003688:	2301      	movs	r3, #1
 800368a:	7203      	strb	r3, [r0, #8]
    }
 800368c:	4770      	bx	lr

0800368e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800368e:	4770      	bx	lr

08003690 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003690:	4770      	bx	lr

08003692 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003692:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003694:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003696:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003698:	68c2      	ldr	r2, [r0, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	1054      	asrs	r4, r2, #1
 800369e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80036a2:	07d2      	lsls	r2, r2, #31
 80036a4:	bf48      	it	mi
 80036a6:	590a      	ldrmi	r2, [r1, r4]
    }
 80036a8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80036ac:	bf48      	it	mi
 80036ae:	58d3      	ldrmi	r3, [r2, r3]
 80036b0:	4718      	bx	r3

080036b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80036b2:	6843      	ldr	r3, [r0, #4]
 80036b4:	b12b      	cbz	r3, 80036c2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80036b6:	6883      	ldr	r3, [r0, #8]
 80036b8:	b92b      	cbnz	r3, 80036c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80036ba:	68c0      	ldr	r0, [r0, #12]
 80036bc:	f000 0001 	and.w	r0, r0, #1
 80036c0:	4770      	bx	lr
 80036c2:	4618      	mov	r0, r3
 80036c4:	4770      	bx	lr
 80036c6:	2001      	movs	r0, #1
    }
 80036c8:	4770      	bx	lr

080036ca <_ZN8touchgfx12NoTransitionD0Ev>:
 80036ca:	b510      	push	{r4, lr}
 80036cc:	4604      	mov	r4, r0
 80036ce:	210c      	movs	r1, #12
 80036d0:	f026 fd46 	bl	802a160 <_ZdlPvj>
 80036d4:	4620      	mov	r0, r4
 80036d6:	bd10      	pop	{r4, pc}

080036d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80036d8:	b510      	push	{r4, lr}
 80036da:	4604      	mov	r4, r0
 80036dc:	2110      	movs	r1, #16
 80036de:	f026 fd3f 	bl	802a160 <_ZdlPvj>
 80036e2:	4620      	mov	r0, r4
 80036e4:	bd10      	pop	{r4, pc}

080036e6 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80036e6:	b510      	push	{r4, lr}
 80036e8:	4604      	mov	r4, r0
 80036ea:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80036ee:	f026 fd37 	bl	802a160 <_ZdlPvj>
 80036f2:	4620      	mov	r0, r4
 80036f4:	bd10      	pop	{r4, pc}

080036f6 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80036f6:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80036f8:	f016 fbf8 	bl	8019eec <_ZN8touchgfx11Application11getInstanceEv>
 80036fc:	6803      	ldr	r3, [r0, #0]
    }
 80036fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	4718      	bx	r3

08003706 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003706:	b510      	push	{r4, lr}
 8003708:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800370a:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800370e:	b158      	cbz	r0, 8003728 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4798      	blx	r3
 8003716:	b138      	cbz	r0, 8003728 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003718:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 800371c:	6803      	ldr	r3, [r0, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8003728:	bd10      	pop	{r4, pc}
	...

0800372c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800372c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003730:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8003734:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003736:	68a8      	ldr	r0, [r5, #8]
 8003738:	6803      	ldr	r3, [r0, #0]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4798      	blx	r3
 800373e:	28df      	cmp	r0, #223	; 0xdf
 8003740:	d805      	bhi.n	800374e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 8003742:	4b46      	ldr	r3, [pc, #280]	; (800385c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003744:	21a3      	movs	r1, #163	; 0xa3
 8003746:	4a46      	ldr	r2, [pc, #280]	; (8003860 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003748:	4846      	ldr	r0, [pc, #280]	; (8003864 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800374a:	f026 fd37 	bl	802a1bc <__assert_func>
 800374e:	6868      	ldr	r0, [r5, #4]
 8003750:	6803      	ldr	r3, [r0, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4798      	blx	r3
 8003756:	280f      	cmp	r0, #15
 8003758:	d803      	bhi.n	8003762 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 800375a:	4b43      	ldr	r3, [pc, #268]	; (8003868 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800375c:	21a4      	movs	r1, #164	; 0xa4
 800375e:	4a40      	ldr	r2, [pc, #256]	; (8003860 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003760:	e7f2      	b.n	8003748 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003762:	68e8      	ldr	r0, [r5, #12]
 8003764:	6803      	ldr	r3, [r0, #0]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4798      	blx	r3
 800376a:	280b      	cmp	r0, #11
 800376c:	d803      	bhi.n	8003776 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 800376e:	4b3f      	ldr	r3, [pc, #252]	; (800386c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003770:	21a5      	movs	r1, #165	; 0xa5
 8003772:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003774:	e7e8      	b.n	8003748 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8003776:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8003874 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 800377a:	f016 fbb7 	bl	8019eec <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800377e:	3004      	adds	r0, #4
 8003780:	f016 fbd9 	bl	8019f36 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003784:	f8d9 0000 	ldr.w	r0, [r9]
 8003788:	b110      	cbz	r0, 8003790 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800378a:	6803      	ldr	r3, [r0, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4798      	blx	r3
    if (*currentTrans)
 8003790:	f8d9 0000 	ldr.w	r0, [r9]
 8003794:	b110      	cbz	r0, 800379c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003796:	6803      	ldr	r3, [r0, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4798      	blx	r3
    if (*currentScreen)
 800379c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003878 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 80037a0:	f8d8 0000 	ldr.w	r0, [r8]
 80037a4:	b110      	cbz	r0, 80037ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80037a6:	6803      	ldr	r3, [r0, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4798      	blx	r3
    if (*currentPresenter)
 80037ac:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80037b0:	b110      	cbz	r0, 80037b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80037b2:	6803      	ldr	r3, [r0, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4798      	blx	r3
    if (*currentScreen)
 80037b8:	f8d8 0000 	ldr.w	r0, [r8]
 80037bc:	b110      	cbz	r0, 80037c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80037be:	6803      	ldr	r3, [r0, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4798      	blx	r3
    if (*currentPresenter)
 80037c4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80037c8:	b110      	cbz	r0, 80037d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80037ca:	6803      	ldr	r3, [r0, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80037d0:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80037d2:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80037d4:	f04f 0b00 	mov.w	fp, #0
 80037d8:	6803      	ldr	r3, [r0, #0]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	4798      	blx	r3
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80037e0:	4604      	mov	r4, r0
 80037e2:	f8c0 b004 	str.w	fp, [r0, #4]
 80037e6:	6003      	str	r3, [r0, #0]
 80037e8:	4659      	mov	r1, fp
 80037ea:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80037ee:	68a8      	ldr	r0, [r5, #8]
 80037f0:	6803      	ldr	r3, [r0, #0]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	4798      	blx	r3
 80037f6:	4606      	mov	r6, r0
 80037f8:	f000 fbb8 	bl	8003f6c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80037fc:	6868      	ldr	r0, [r5, #4]
 80037fe:	4659      	mov	r1, fp
 8003800:	6803      	ldr	r3, [r0, #0]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	4798      	blx	r3
 8003806:	4605      	mov	r5, r0
 8003808:	4631      	mov	r1, r6
 800380a:	f000 fb8b 	bl	8003f24 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 800380e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003812:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8003816:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800381a:	b1e5      	cbz	r5, 8003856 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12a>
 800381c:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800381e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003822:	4630      	mov	r0, r6
 8003824:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003826:	f8c5 a008 	str.w	sl, [r5, #8]
 800382a:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800382c:	63f5      	str	r5, [r6, #60]	; 0x3c
 800382e:	4798      	blx	r3
    newPresenter->activate();
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	4628      	mov	r0, r5
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003838:	4621      	mov	r1, r4
 800383a:	4630      	mov	r0, r6
 800383c:	f018 f822 	bl	801b884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	4620      	mov	r0, r4
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4798      	blx	r3
    newTransition->invalidate();
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	4620      	mov	r0, r4
 800384c:	695b      	ldr	r3, [r3, #20]
}
 800384e:	b001      	add	sp, #4
 8003850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	4718      	bx	r3
    model->bind(newPresenter);
 8003856:	462b      	mov	r3, r5
 8003858:	e7e1      	b.n	800381e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf2>
 800385a:	bf00      	nop
 800385c:	0802cef4 	.word	0x0802cef4
 8003860:	0802cf82 	.word	0x0802cf82
 8003864:	0802d086 	.word	0x0802d086
 8003868:	0802d0cd 	.word	0x0802d0cd
 800386c:	0802d170 	.word	0x0802d170
 8003870:	0802d288 	.word	0x0802d288
 8003874:	20015160 	.word	0x20015160
 8003878:	2001515c 	.word	0x2001515c

0800387c <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003884:	b10a      	cbz	r2, 800388a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003886:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003888:	b900      	cbnz	r0, 800388c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800388a:	6898      	ldr	r0, [r3, #8]
    }
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20015120 	.word	0x20015120

08003894 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	4604      	mov	r4, r0
 8003898:	4617      	mov	r7, r2
 800389a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800389c:	f016 fbec 	bl	801a078 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 80038a2:	2500      	movs	r5, #0
        instance = this;
 80038a4:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80038a6:	4629      	mov	r1, r5
      model(m)
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80038aa:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80038ae:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
        return instance;
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80038ba:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80038bc:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80038c0:	689b      	ldr	r3, [r3, #8]
      model(m)
 80038c2:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80038c6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80038c8:	4628      	mov	r0, r5
 80038ca:	f000 fa9d 	bl	8003e08 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80038ce:	f7ff ffd5 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 80038d2:	f01f f8cc 	bl	8022a6e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80038d6:	f7ff ffd1 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 80038da:	f01f f943 	bl	8022b64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 80038de:	4620      	mov	r0, r4
 80038e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2001516c 	.word	0x2001516c
 80038e8:	0802d234 	.word	0x0802d234
 80038ec:	0802d21c 	.word	0x0802d21c
 80038f0:	20015120 	.word	0x20015120

080038f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80038f6:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80038fa:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80038fe:	2300      	movs	r3, #0
 8003900:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003904:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003908:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	0800372d 	.word	0x0800372d

08003914 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003914:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003916:	4770      	bx	lr

08003918 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003918:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800391a:	4770      	bx	lr

0800391c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800391c:	4770      	bx	lr

0800391e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800391e:	888b      	ldrh	r3, [r1, #4]
 8003920:	69c0      	ldr	r0, [r0, #28]
 8003922:	0adb      	lsrs	r3, r3, #11
 8003924:	680a      	ldr	r2, [r1, #0]
 8003926:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800392a:	4410      	add	r0, r2
 800392c:	4770      	bx	lr

0800392e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800392e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8003930:	b1c2      	cbz	r2, 8003964 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003932:	7b13      	ldrb	r3, [r2, #12]
 8003934:	b1b3      	cbz	r3, 8003964 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003936:	7b54      	ldrb	r4, [r2, #13]
 8003938:	7ad2      	ldrb	r2, [r2, #11]
 800393a:	0224      	lsls	r4, r4, #8
 800393c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003940:	4314      	orrs	r4, r2
 8003942:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003944:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003946:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 800394a:	8813      	ldrh	r3, [r2, #0]
 800394c:	428b      	cmp	r3, r1
 800394e:	d102      	bne.n	8003956 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003950:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003954:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003956:	d805      	bhi.n	8003964 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003958:	3801      	subs	r0, #1
 800395a:	3204      	adds	r2, #4
 800395c:	b280      	uxth	r0, r0
 800395e:	2800      	cmp	r0, #0
 8003960:	d1f3      	bne.n	800394a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003962:	e7f7      	b.n	8003954 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003964:	2000      	movs	r0, #0
 8003966:	e7f5      	b.n	8003954 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003968 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003968:	b510      	push	{r4, lr}
 800396a:	4604      	mov	r4, r0
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	f026 fbf7 	bl	802a160 <_ZdlPvj>
 8003972:	4620      	mov	r0, r4
 8003974:	bd10      	pop	{r4, pc}
	...

08003978 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003978:	b530      	push	{r4, r5, lr}
 800397a:	b08b      	sub	sp, #44	; 0x2c
 800397c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800397e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8003982:	9508      	str	r5, [sp, #32]
 8003984:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8003988:	9507      	str	r5, [sp, #28]
 800398a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800398e:	9506      	str	r5, [sp, #24]
 8003990:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8003994:	9505      	str	r5, [sp, #20]
 8003996:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800399a:	9504      	str	r5, [sp, #16]
 800399c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80039a0:	9503      	str	r5, [sp, #12]
 80039a2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80039a6:	9502      	str	r5, [sp, #8]
 80039a8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80039ac:	9501      	str	r5, [sp, #4]
 80039ae:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80039b2:	9500      	str	r5, [sp, #0]
 80039b4:	f017 fbc0 	bl	801b138 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80039ba:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80039bc:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80039be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039c0:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80039c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80039c4:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80039c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039c8:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
 80039ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80039cc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80039ce:	b00b      	add	sp, #44	; 0x2c
 80039d0:	bd30      	pop	{r4, r5, pc}
 80039d2:	bf00      	nop
 80039d4:	0802d2ac 	.word	0x0802d2ac

080039d8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80039d8:	4770      	bx	lr

080039da <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80039da:	4770      	bx	lr

080039dc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80039dc:	4770      	bx	lr

080039de <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80039de:	4770      	bx	lr

080039e0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80039e0:	4770      	bx	lr

080039e2 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80039e2:	4770      	bx	lr

080039e4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80039e4:	4770      	bx	lr

080039e6 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80039e6:	b510      	push	{r4, lr}
 80039e8:	4604      	mov	r4, r0
}
 80039ea:	21e0      	movs	r1, #224	; 0xe0
 80039ec:	f026 fbb8 	bl	802a160 <_ZdlPvj>
 80039f0:	4620      	mov	r0, r4
 80039f2:	bd10      	pop	{r4, pc}

080039f4 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80039f4:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80039f6:	b570      	push	{r4, r5, r6, lr}
 80039f8:	4604      	mov	r4, r0
        setX(x);
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80039fc:	4615      	mov	r5, r2
        setX(x);
 80039fe:	4798      	blx	r3
        setY(y);
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	4620      	mov	r0, r4
 8003a04:	4629      	mov	r1, r5
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8003a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003a0c:	4718      	bx	r3
	...

08003a10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
        return typedTextId < numberOfTypedTexts;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8003a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8003a14:	881b      	ldrh	r3, [r3, #0]
    void updateTextPosition()
 8003a16:	4606      	mov	r6, r0
 8003a18:	8f01      	ldrh	r1, [r0, #56]	; 0x38
        if (typedText.hasValidId())
 8003a1a:	428b      	cmp	r3, r1
 8003a1c:	d92b      	bls.n	8003a76 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x66>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003a1e:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b92b      	cbnz	r3, 8003a30 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003a24:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8003a26:	216c      	movs	r1, #108	; 0x6c
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8003a2a:	4818      	ldr	r0, [pc, #96]	; (8003a8c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8003a2c:	f026 fbc6 	bl	802a1bc <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003a30:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	f000 fa1e 	bl	8003e80 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	9001      	str	r0, [sp, #4]
 8003a48:	4628      	mov	r0, r5
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	4798      	blx	r3
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	4604      	mov	r4, r0
 8003a52:	9901      	ldr	r1, [sp, #4]
 8003a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a56:	4628      	mov	r0, r5
 8003a58:	4798      	blx	r3
 8003a5a:	fb14 f400 	smulbb	r4, r4, r0
 8003a5e:	682b      	ldr	r3, [r5, #0]
 8003a60:	4628      	mov	r0, r5
 8003a62:	b2a4      	uxth	r4, r4
 8003a64:	9901      	ldr	r1, [sp, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	4798      	blx	r3
 8003a6a:	1823      	adds	r3, r4, r0
 8003a6c:	b21b      	sxth	r3, r3
 8003a6e:	f8a6 3046 	strh.w	r3, [r6, #70]	; 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8003a72:	b002      	add	sp, #8
 8003a74:	bd70      	pop	{r4, r5, r6, pc}
 8003a76:	2300      	movs	r3, #0
 8003a78:	e7f9      	b.n	8003a6e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8003a7a:	bf00      	nop
 8003a7c:	20015174 	.word	0x20015174
 8003a80:	20015170 	.word	0x20015170
 8003a84:	0802d304 	.word	0x0802d304
 8003a88:	0802d346 	.word	0x0802d346
 8003a8c:	0802d381 	.word	0x0802d381
 8003a90:	20015178 	.word	0x20015178
 8003a94:	2001517c 	.word	0x2001517c

08003a98 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a9c:	4604      	mov	r4, r0
        : presenter(0)
 8003a9e:	2500      	movs	r5, #0
 8003aa0:	f017 fd44 	bl	801b52c <_ZN8touchgfx6ScreenC1Ev>
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <_ZN15Screen1ViewBaseC1Ev+0x10c>)
 8003aa6:	4626      	mov	r6, r4
 8003aa8:	63e5      	str	r5, [r4, #60]	; 0x3c
          touchable(false),
 8003aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aae:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8003ab2:	f846 3b40 	str.w	r3, [r6], #64
 8003ab6:	f104 0798 	add.w	r7, r4, #152	; 0x98
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <_ZN15Screen1ViewBaseC1Ev+0x110>)
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
 8003abc:	a901      	add	r1, sp, #4
 8003abe:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003ac8:	f104 0904 	add.w	r9, r4, #4
        : Widget(), bitmap(bmp), alpha(255)
 8003acc:	4a37      	ldr	r2, [pc, #220]	; (8003bac <_ZN15Screen1ViewBaseC1Ev+0x114>)
          cachedAbsX(0),
 8003ace:	6625      	str	r5, [r4, #96]	; 0x60
 8003ad0:	66e2      	str	r2, [r4, #108]	; 0x6c
        : color(col)
 8003ad2:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 8003ad4:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 8003ad8:	23ff      	movs	r3, #255	; 0xff
 8003ada:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ae2:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ae6:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8003aea:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 8003aee:	f8ad 3004 	strh.w	r3, [sp, #4]
          parent(0),
 8003af2:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
 8003af6:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 8003afa:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8003afe:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
          nextSibling(0),
 8003b02:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
          cachedAbsX(0),
 8003b06:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
 8003b0a:	f014 fbe2 	bl	80182d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003b0e:	4638      	mov	r0, r7
 8003b10:	f014 fd20 	bl	8018554 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        setXY(x, y);
 8003b14:	462a      	mov	r2, r5
 8003b16:	4629      	mov	r1, r5
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f7ff ff6b 	bl	80039f4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003b24:	f7ff f9f6 	bl	8002f14 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003b2e:	f7ff f9f3 	bl	8002f18 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003b32:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003b36:	4631      	mov	r1, r6
 8003b38:	4648      	mov	r0, r9
 8003b3a:	66a3      	str	r3, [r4, #104]	; 0x68
 8003b3c:	f013 f926 	bl	8016d8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8003b40:	462a      	mov	r2, r5
 8003b42:	4629      	mov	r1, r5
 8003b44:	4640      	mov	r0, r8
 8003b46:	f7ff ff55 	bl	80039f4 <_ZN8touchgfx8Drawable5setXYEss>
 8003b4a:	2302      	movs	r3, #2
    image1.setBitmap(touchgfx::Bitmap(BITMAP_COVERPAGE_ID));
 8003b4c:	a901      	add	r1, sp, #4
 8003b4e:	4640      	mov	r0, r8
 8003b50:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003b54:	f014 fbbd 	bl	80182d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003b58:	4641      	mov	r1, r8
 8003b5a:	4648      	mov	r0, r9
 8003b5c:	f013 f916 	bl	8016d8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonWithLabel1.setXY(31, 153);
 8003b60:	4638      	mov	r0, r7
 8003b62:	2299      	movs	r2, #153	; 0x99
 8003b64:	211f      	movs	r1, #31
 8003b66:	f7ff ff45 	bl	80039f4 <_ZN8touchgfx8Drawable5setXYEss>
 8003b6a:	2301      	movs	r3, #1
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_SMALL_ROUND_PRESSED_ID));
 8003b6c:	aa01      	add	r2, sp, #4
 8003b6e:	4669      	mov	r1, sp
 8003b70:	4638      	mov	r0, r7
 8003b72:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003b76:	f8ad 5000 	strh.w	r5, [sp]
 8003b7a:	f014 fae4 	bl	8018146 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003b7e:	4638      	mov	r0, r7
class TypedText
 8003b80:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
 8003b84:	f7ff ff44 	bl	8003a10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        colorPressed = col;
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <_ZN15Screen1ViewBaseC1Ev+0x118>)
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	4648      	mov	r0, r9
 8003b90:	4639      	mov	r1, r7
 8003b92:	e9c4 2335 	strd	r2, r3, [r4, #212]	; 0xd4
 8003b96:	f013 f8f9 	bl	8016d8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	b003      	add	sp, #12
 8003b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ba2:	bf00      	nop
 8003ba4:	0802d3d0 	.word	0x0802d3d0
 8003ba8:	0802f818 	.word	0x0802f818
 8003bac:	0802f880 	.word	0x0802f880
 8003bb0:	ff007bff 	.word	0xff007bff

08003bb4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003bb4:	4770      	bx	lr
	...

08003bb8 <_Z23getFont_verdana_10_4bppv>:
{
 8003bb8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003bba:	4d16      	ldr	r5, [pc, #88]	; (8003c14 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003bbc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003bbe:	682c      	ldr	r4, [r5, #0]
 8003bc0:	f3bf 8f5b 	dmb	ish
 8003bc4:	f014 0401 	ands.w	r4, r4, #1
 8003bc8:	d120      	bne.n	8003c0c <_Z23getFont_verdana_10_4bppv+0x54>
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f026 faca 	bl	802a164 <__cxa_guard_acquire>
 8003bd0:	b1e0      	cbz	r0, 8003c0c <_Z23getFont_verdana_10_4bppv+0x54>
 8003bd2:	233f      	movs	r3, #63	; 0x3f
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4910      	ldr	r1, [pc, #64]	; (8003c18 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <_Z23getFont_verdana_10_4bppv+0x64>)
 8003bdc:	4810      	ldr	r0, [pc, #64]	; (8003c20 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003bde:	9308      	str	r3, [sp, #32]
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003be2:	940a      	str	r4, [sp, #40]	; 0x28
 8003be4:	9405      	str	r4, [sp, #20]
 8003be6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003bea:	2304      	movs	r3, #4
 8003bec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003bfc:	f7ff febc 	bl	8003978 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003c00:	4809      	ldr	r0, [pc, #36]	; (8003c28 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003c02:	f026 faf9 	bl	802a1f8 <atexit>
 8003c06:	4628      	mov	r0, r5
 8003c08:	f026 fab8 	bl	802a17c <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003c0c:	4804      	ldr	r0, [pc, #16]	; (8003c20 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003c0e:	b00f      	add	sp, #60	; 0x3c
 8003c10:	bd30      	pop	{r4, r5, pc}
 8003c12:	bf00      	nop
 8003c14:	20001dcc 	.word	0x20001dcc
 8003c18:	900499a8 	.word	0x900499a8
 8003c1c:	0802fdcc 	.word	0x0802fdcc
 8003c20:	20001dd0 	.word	0x20001dd0
 8003c24:	0802fdd8 	.word	0x0802fdd8
 8003c28:	08003bb5 	.word	0x08003bb5

08003c2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 5, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003c2c:	4770      	bx	lr
	...

08003c30 <_Z23getFont_verdana_20_4bppv>:
{
 8003c30:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 5, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003c32:	4d16      	ldr	r5, [pc, #88]	; (8003c8c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8003c34:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 5, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003c36:	682c      	ldr	r4, [r5, #0]
 8003c38:	f3bf 8f5b 	dmb	ish
 8003c3c:	f014 0401 	ands.w	r4, r4, #1
 8003c40:	d121      	bne.n	8003c86 <_Z23getFont_verdana_20_4bppv+0x56>
 8003c42:	4628      	mov	r0, r5
 8003c44:	f026 fa8e 	bl	802a164 <__cxa_guard_acquire>
 8003c48:	b1e8      	cbz	r0, 8003c86 <_Z23getFont_verdana_20_4bppv+0x56>
 8003c4a:	233f      	movs	r3, #63	; 0x3f
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4910      	ldr	r1, [pc, #64]	; (8003c90 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003c50:	9309      	str	r3, [sp, #36]	; 0x24
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003c54:	4810      	ldr	r0, [pc, #64]	; (8003c98 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003c56:	9308      	str	r3, [sp, #32]
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003c5a:	940a      	str	r4, [sp, #40]	; 0x28
 8003c5c:	9405      	str	r4, [sp, #20]
 8003c5e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003c62:	2304      	movs	r3, #4
 8003c64:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003c68:	2314      	movs	r3, #20
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003c72:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003c76:	f7ff fe7f 	bl	8003978 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003c7a:	4809      	ldr	r0, [pc, #36]	; (8003ca0 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003c7c:	f026 fabc 	bl	802a1f8 <atexit>
 8003c80:	4628      	mov	r0, r5
 8003c82:	f026 fa7b 	bl	802a17c <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003c86:	4804      	ldr	r0, [pc, #16]	; (8003c98 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003c88:	b00f      	add	sp, #60	; 0x3c
 8003c8a:	bd30      	pop	{r4, r5, pc}
 8003c8c:	20001dfc 	.word	0x20001dfc
 8003c90:	900499b8 	.word	0x900499b8
 8003c94:	0802fdd0 	.word	0x0802fdd0
 8003c98:	20001e00 	.word	0x20001e00
 8003c9c:	0802fddc 	.word	0x0802fddc
 8003ca0:	08003c2d 	.word	0x08003c2d

08003ca4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003ca4:	4770      	bx	lr
	...

08003ca8 <_Z23getFont_verdana_40_4bppv>:
{
 8003ca8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003caa:	4d16      	ldr	r5, [pc, #88]	; (8003d04 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003cac:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003cae:	682c      	ldr	r4, [r5, #0]
 8003cb0:	f3bf 8f5b 	dmb	ish
 8003cb4:	f014 0401 	ands.w	r4, r4, #1
 8003cb8:	d120      	bne.n	8003cfc <_Z23getFont_verdana_40_4bppv+0x54>
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f026 fa52 	bl	802a164 <__cxa_guard_acquire>
 8003cc0:	b1e0      	cbz	r0, 8003cfc <_Z23getFont_verdana_40_4bppv+0x54>
 8003cc2:	233f      	movs	r3, #63	; 0x3f
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4910      	ldr	r1, [pc, #64]	; (8003d08 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <_Z23getFont_verdana_40_4bppv+0x64>)
 8003ccc:	4810      	ldr	r0, [pc, #64]	; (8003d10 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003cce:	9308      	str	r3, [sp, #32]
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003cd2:	940a      	str	r4, [sp, #40]	; 0x28
 8003cd4:	9405      	str	r4, [sp, #20]
 8003cd6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003ce0:	2328      	movs	r3, #40	; 0x28
 8003ce2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003cec:	f7ff fe44 	bl	8003978 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003cf0:	4809      	ldr	r0, [pc, #36]	; (8003d18 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003cf2:	f026 fa81 	bl	802a1f8 <atexit>
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f026 fa40 	bl	802a17c <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003cfc:	4804      	ldr	r0, [pc, #16]	; (8003d10 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003cfe:	b00f      	add	sp, #60	; 0x3c
 8003d00:	bd30      	pop	{r4, r5, pc}
 8003d02:	bf00      	nop
 8003d04:	20001e2c 	.word	0x20001e2c
 8003d08:	90049a00 	.word	0x90049a00
 8003d0c:	0802fdd4 	.word	0x0802fdd4
 8003d10:	20001e30 	.word	0x20001e30
 8003d14:	0802fde0 	.word	0x0802fde0
 8003d18:	08003ca5 	.word	0x08003ca5

08003d1c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	4770      	bx	lr

08003d20 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003d20:	2000      	movs	r0, #0
 8003d22:	4770      	bx	lr

08003d24 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	b503      	push	{r0, r1, lr}
 8003d28:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003d2a:	2100      	movs	r1, #0
{
 8003d2c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003d30:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003d32:	f017 f829 	bl	801ad88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003d36:	b002      	add	sp, #8
 8003d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d3c:	b003      	add	sp, #12
 8003d3e:	4770      	bx	lr

08003d40 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003d40:	b40c      	push	{r2, r3}
 8003d42:	b507      	push	{r0, r1, r2, lr}
 8003d44:	ab04      	add	r3, sp, #16
 8003d46:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003d4a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003d4c:	f017 f81c 	bl	801ad88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003d50:	b003      	add	sp, #12
 8003d52:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d56:	b002      	add	sp, #8
 8003d58:	4770      	bx	lr
	...

08003d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003d5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003d5e:	b510      	push	{r4, lr}
 8003d60:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003d62:	b373      	cbz	r3, 8003dc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003d64:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003d66:	b92b      	cbnz	r3, 8003d74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003d6a:	21c5      	movs	r1, #197	; 0xc5
 8003d6c:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003d6e:	4819      	ldr	r0, [pc, #100]	; (8003dd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003d70:	f026 fa24 	bl	802a1bc <__assert_func>
            return buffer[pos];
 8003d74:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003d76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003d7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003d7c:	b30b      	cbz	r3, 8003dc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003d7e:	f018 fa99 	bl	801c2b4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003d82:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d803      	bhi.n	8003d90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003d8a:	21cb      	movs	r1, #203	; 0xcb
 8003d8c:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003d8e:	e7ee      	b.n	8003d6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003d90:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003d92:	f640 103f 	movw	r0, #2367	; 0x93f
 8003d96:	1c53      	adds	r3, r2, #1
 8003d98:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	bf88      	it	hi
 8003da0:	f1a3 010a 	subhi.w	r1, r3, #10
 8003da4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003da8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003daa:	4281      	cmp	r1, r0
 8003dac:	d109      	bne.n	8003dc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003dae:	2b0a      	cmp	r3, #10
 8003db0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003db4:	bf28      	it	cs
 8003db6:	2300      	movcs	r3, #0
            return buffer[pos];
 8003db8:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003dba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003dbe:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003dc0:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003dc2:	4620      	mov	r0, r4
}
 8003dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003dc8:	f018 b976 	b.w	801c0b8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003dcc:	0802d3fc 	.word	0x0802d3fc
 8003dd0:	0802d405 	.word	0x0802d405
 8003dd4:	0802d4b0 	.word	0x0802d4b0
 8003dd8:	0802d4fa 	.word	0x0802d4fa
 8003ddc:	0802d508 	.word	0x0802d508

08003de0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003de0:	f018 b933 	b.w	801c04a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003de4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003de4:	b510      	push	{r4, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	ac02      	add	r4, sp, #8
 8003dea:	e884 0006 	stmia.w	r4, {r1, r2}
 8003dee:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003df0:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003df2:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003df4:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	9b08      	ldr	r3, [sp, #32]
 8003dfe:	f015 fc13 	bl	8019628 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003e02:	b006      	add	sp, #24
 8003e04:	bd10      	pop	{r4, pc}
	...

08003e08 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003e08:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003e0a:	bb18      	cbnz	r0, 8003e54 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003e0e:	4813      	ldr	r0, [pc, #76]	; (8003e5c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003e10:	681c      	ldr	r4, [r3, #0]
 8003e12:	4913      	ldr	r1, [pc, #76]	; (8003e60 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003e14:	b1b4      	cbz	r4, 8003e44 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	4422      	add	r2, r4
 8003e1a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003e1c:	6862      	ldr	r2, [r4, #4]
 8003e1e:	4422      	add	r2, r4
 8003e20:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003e22:	68a2      	ldr	r2, [r4, #8]
 8003e24:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003e2c:	f000 f838 	bl	8003ea0 <_ZN17TypedTextDatabase8getFontsEv>
 8003e30:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003e32:	f000 f833 	bl	8003e9c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003e38:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003e3c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003e40:	8018      	strh	r0, [r3, #0]
    }
}
 8003e42:	e007      	b.n	8003e54 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003e46:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003e4a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003e4e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003e50:	2c00      	cmp	r4, #0
 8003e52:	d1e8      	bne.n	8003e26 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003e54:	bd38      	pop	{r3, r4, r5, pc}
 8003e56:	bf00      	nop
 8003e58:	20001e5c 	.word	0x20001e5c
 8003e5c:	20001e60 	.word	0x20001e60
 8003e60:	20001e64 	.word	0x20001e64
 8003e64:	20001e68 	.word	0x20001e68
 8003e68:	20015170 	.word	0x20015170
 8003e6c:	20015178 	.word	0x20015178
 8003e70:	20015174 	.word	0x20015174
 8003e74:	90049a14 	.word	0x90049a14
 8003e78:	90049a10 	.word	0x90049a10
 8003e7c:	90049a24 	.word	0x90049a24

08003e80 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20001e64 	.word	0x20001e64
 8003e98:	20001e60 	.word	0x20001e60

08003e9c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	4770      	bx	lr

08003ea0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003ea0:	4800      	ldr	r0, [pc, #0]	; (8003ea4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003ea2:	4770      	bx	lr
 8003ea4:	20001e6c 	.word	0x20001e6c

08003ea8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003ea8:	b510      	push	{r4, lr}
};
 8003eaa:	4c05      	ldr	r4, [pc, #20]	; (8003ec0 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8003eac:	f7ff fec0 	bl	8003c30 <_Z23getFont_verdana_20_4bppv>
};
 8003eb0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003eb2:	f7ff fef9 	bl	8003ca8 <_Z23getFont_verdana_40_4bppv>
};
 8003eb6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003eb8:	f7ff fe7e 	bl	8003bb8 <_Z23getFont_verdana_10_4bppv>
};
 8003ebc:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003ebe:	bd10      	pop	{r4, pc}
 8003ec0:	20001e6c 	.word	0x20001e6c

08003ec4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003ec4:	4770      	bx	lr

08003ec6 <_ZN19FrontendApplicationD0Ev>:
 8003ec6:	b510      	push	{r4, lr}
 8003ec8:	4604      	mov	r4, r0
 8003eca:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003ece:	f026 f947 	bl	802a160 <_ZdlPvj>
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	bd10      	pop	{r4, pc}

08003ed6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	4604      	mov	r4, r0
    {
        model.tick();
 8003eda:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003ede:	f000 f812 	bl	8003f06 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003ee2:	4620      	mov	r0, r4
    }
 8003ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003ee8:	f016 b882 	b.w	8019ff0 <_ZN8touchgfx11Application15handleTickEventEv>

08003eec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003eec:	b510      	push	{r4, lr}
 8003eee:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003ef0:	f7ff fcd0 	bl	8003894 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003ef6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003ef8:	6023      	str	r3, [r4, #0]
}
 8003efa:	bd10      	pop	{r4, pc}
 8003efc:	0802d5e4 	.word	0x0802d5e4

08003f00 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003f00:	2200      	movs	r2, #0
 8003f02:	6002      	str	r2, [r0, #0]
{

}
 8003f04:	4770      	bx	lr

08003f06 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003f06:	4770      	bx	lr

08003f08 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8003f08:	4770      	bx	lr

08003f0a <_ZThn4_N16Screen1PresenterD1Ev>:
 8003f0a:	3804      	subs	r0, #4
 8003f0c:	4770      	bx	lr

08003f0e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003f0e:	4770      	bx	lr

08003f10 <_ZN16Screen1PresenterD0Ev>:
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	2110      	movs	r1, #16
 8003f16:	f026 f923 	bl	802a160 <_ZdlPvj>
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <_ZThn4_N16Screen1PresenterD0Ev>:
 8003f1e:	f1a0 0004 	sub.w	r0, r0, #4
 8003f22:	e7f5      	b.n	8003f10 <_ZN16Screen1PresenterD0Ev>

08003f24 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003f24:	2200      	movs	r2, #0
    : view(v)
 8003f26:	60c1      	str	r1, [r0, #12]
 8003f28:	6082      	str	r2, [r0, #8]
 8003f2a:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003f2c:	b510      	push	{r4, lr}
    : view(v)
 8003f2e:	f102 0408 	add.w	r4, r2, #8
 8003f32:	3220      	adds	r2, #32
 8003f34:	6004      	str	r4, [r0, #0]
 8003f36:	6042      	str	r2, [r0, #4]
}
 8003f38:	bd10      	pop	{r4, pc}
 8003f3a:	bf00      	nop
 8003f3c:	0802d630 	.word	0x0802d630

08003f40 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003f40:	4770      	bx	lr
	...

08003f44 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <_ZN11Screen1ViewD1Ev+0x10>)
 8003f46:	b510      	push	{r4, lr}
 8003f48:	4604      	mov	r4, r0
 8003f4a:	6003      	str	r3, [r0, #0]
 8003f4c:	f7ff fd49 	bl	80039e2 <_ZN15Screen1ViewBaseD1Ev>
 8003f50:	4620      	mov	r0, r4
 8003f52:	bd10      	pop	{r4, pc}
 8003f54:	0802d660 	.word	0x0802d660

08003f58 <_ZN11Screen1ViewD0Ev>:
 8003f58:	b510      	push	{r4, lr}
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	f7ff fff2 	bl	8003f44 <_ZN11Screen1ViewD1Ev>
 8003f60:	21e0      	movs	r1, #224	; 0xe0
 8003f62:	4620      	mov	r0, r4
 8003f64:	f026 f8fc 	bl	802a160 <_ZdlPvj>
 8003f68:	4620      	mov	r0, r4
 8003f6a:	bd10      	pop	{r4, pc}

08003f6c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	4604      	mov	r4, r0
 8003f70:	f7ff fd92 	bl	8003a98 <_ZN15Screen1ViewBaseC1Ev>
 8003f74:	4b01      	ldr	r3, [pc, #4]	; (8003f7c <_ZN11Screen1ViewC1Ev+0x10>)
}
 8003f76:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8003f78:	6023      	str	r3, [r4, #0]
}
 8003f7a:	bd10      	pop	{r4, pc}
 8003f7c:	0802d660 	.word	0x0802d660

08003f80 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003f80:	f7ff bd30 	b.w	80039e4 <_ZN15Screen1ViewBase11setupScreenEv>

08003f84 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003f84:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f86:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003f8a:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003f8c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003f90:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f92:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003f94:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003f96:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8003f98:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003f9a:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003f9c:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8003f9e:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8003fa0:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003fa2:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8003fa4:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003fa6:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8003fa8:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003fac:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003fb0:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8003fb4:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003fb6:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8003fb8:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003fba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003fbe:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003fc0:	466a      	mov	r2, sp
 8003fc2:	f002 f885 	bl	80060d0 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8003fc6:	3800      	subs	r0, #0
 8003fc8:	bf18      	it	ne
 8003fca:	2001      	movne	r0, #1
 8003fcc:	b015      	add	sp, #84	; 0x54
 8003fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fd2:	bf00      	nop
 8003fd4:	20001e78 	.word	0x20001e78

08003fd8 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003fd8:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003fda:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003fde:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4817      	ldr	r0, [pc, #92]	; (8004044 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003fe6:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003fe8:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fea:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003fec:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003fee:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ff0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003ff4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8003ff6:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003ff8:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003ffa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ffe:	f002 f824 	bl	800604a <HAL_QSPI_Command>
 8004002:	b9e0      	cbnz	r0, 800403e <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8004004:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8004006:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004008:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800400c:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800400e:	480d      	ldr	r0, [pc, #52]	; (8004044 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8004010:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004014:	2310      	movs	r3, #16
 8004016:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800401a:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800401c:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800401e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004026:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004028:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800402a:	f241 3388 	movw	r3, #5000	; 0x1388
 800402e:	f002 f84f 	bl	80060d0 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8004032:	3800      	subs	r0, #0
 8004034:	bf18      	it	ne
 8004036:	2001      	movne	r0, #1
}
 8004038:	b015      	add	sp, #84	; 0x54
 800403a:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800403e:	2001      	movs	r0, #1
 8004040:	e7fa      	b.n	8004038 <QSPI_WriteEnable.constprop.0+0x60>
 8004042:	bf00      	nop
 8004044:	20001e78 	.word	0x20001e78

08004048 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8004048:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800404a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800404e:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004050:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004054:	480e      	ldr	r0, [pc, #56]	; (8004090 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004056:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004058:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800405a:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800405c:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800405e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004062:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004068:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800406a:	2300      	movs	r3, #0
 800406c:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004070:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004072:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004074:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004076:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004078:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800407c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004080:	f002 f876 	bl	8006170 <HAL_QSPI_MemoryMapped>
}
 8004084:	3800      	subs	r0, #0
 8004086:	bf18      	it	ne
 8004088:	2001      	movne	r0, #1
 800408a:	b011      	add	sp, #68	; 0x44
 800408c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004090:	20001e78 	.word	0x20001e78

08004094 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8004094:	4b45      	ldr	r3, [pc, #276]	; (80041ac <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004096:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004098:	4845      	ldr	r0, [pc, #276]	; (80041b0 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 800409a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409c:	f042 0202 	orr.w	r2, r2, #2
{
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
{
 80040a4:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80040a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80040a8:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80040aa:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80040ac:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80040ae:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80040b2:	4d40      	ldr	r5, [pc, #256]	; (80041b4 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 80040b4:	9200      	str	r2, [sp, #0]
 80040b6:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	f042 0202 	orr.w	r2, r2, #2
 80040be:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	f022 0202 	bic.w	r2, r2, #2
 80040c6:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 80040c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ca:	f042 0202 	orr.w	r2, r2, #2
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
 80040d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d2:	f002 0202 	and.w	r2, r2, #2
 80040d6:	9201      	str	r2, [sp, #4]
 80040d8:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 80040da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040dc:	f042 0202 	orr.w	r2, r2, #2
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
 80040e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e4:	f002 0202 	and.w	r2, r2, #2
 80040e8:	9202      	str	r2, [sp, #8]
 80040ea:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 80040ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
 80040f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f6:	f002 0208 	and.w	r2, r2, #8
 80040fa:	9203      	str	r2, [sp, #12]
 80040fc:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 80040fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004100:	f042 0208 	orr.w	r2, r2, #8
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
 8004106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004108:	f002 0208 	and.w	r2, r2, #8
 800410c:	9204      	str	r2, [sp, #16]
 800410e:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8004110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004112:	f042 0210 	orr.w	r2, r2, #16
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
 8004118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411a:	f002 0210 	and.w	r2, r2, #16
 800411e:	9205      	str	r2, [sp, #20]
 8004120:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	f042 0208 	orr.w	r2, r2, #8
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800412a:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	9306      	str	r3, [sp, #24]
 8004134:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004136:	2302      	movs	r3, #2
 8004138:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800413c:	2303      	movs	r3, #3
 800413e:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004142:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004144:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004146:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004148:	f000 ff48 	bl	8004fdc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800414c:	a907      	add	r1, sp, #28
 800414e:	4818      	ldr	r0, [pc, #96]	; (80041b0 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004150:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004152:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004154:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004156:	f000 ff41 	bl	8004fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800415a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800415e:	a907      	add	r1, sp, #28
 8004160:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004162:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8004164:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004166:	f000 ff39 	bl	8004fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800416a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800416e:	a907      	add	r1, sp, #28
 8004170:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004172:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8004174:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8004176:	f000 ff31 	bl	8004fdc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800417a:	a907      	add	r1, sp, #28
 800417c:	480e      	ldr	r0, [pc, #56]	; (80041b8 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800417e:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004180:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8004182:	f000 ff2b 	bl	8004fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800418a:	a907      	add	r1, sp, #28
 800418c:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800418e:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004190:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8004192:	f000 ff23 	bl	8004fdc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8004196:	4632      	mov	r2, r6
 8004198:	210f      	movs	r1, #15
 800419a:	205c      	movs	r0, #92	; 0x5c
 800419c:	f000 fce4 	bl	8004b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80041a0:	205c      	movs	r0, #92	; 0x5c
 80041a2:	f000 fd13 	bl	8004bcc <HAL_NVIC_EnableIRQ>
}
 80041a6:	b00d      	add	sp, #52	; 0x34
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40020400 	.word	0x40020400
 80041b4:	40020c00 	.word	0x40020c00
 80041b8:	40021000 	.word	0x40021000

080041bc <BSP_QSPI_Init>:
{ 
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 80041be:	4c49      	ldr	r4, [pc, #292]	; (80042e4 <BSP_QSPI_Init+0x128>)
{ 
 80041c0:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 80041c2:	4b49      	ldr	r3, [pc, #292]	; (80042e8 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80041c4:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 80041c6:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80041c8:	f001 ff2c 	bl	8006024 <HAL_QSPI_DeInit>
 80041cc:	4605      	mov	r5, r0
 80041ce:	b110      	cbz	r0, 80041d6 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 80041d0:	2001      	movs	r0, #1
}
 80041d2:	b011      	add	sp, #68	; 0x44
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80041d6:	4601      	mov	r1, r0
 80041d8:	4620      	mov	r0, r4
 80041da:	f7ff ff5b 	bl	8004094 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 80041de:	2601      	movs	r6, #1
 80041e0:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 80041e6:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80041ea:	2310      	movs	r3, #16
 80041ec:	60e3      	str	r3, [r4, #12]
 80041ee:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80041f2:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80041f6:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 80041f8:	3b01      	subs	r3, #1
 80041fa:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 80041fc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8004200:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004204:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004208:	f001 feb8 	bl	8005f7c <HAL_QSPI_Init>
 800420c:	2800      	cmp	r0, #0
 800420e:	d1df      	bne.n	80041d0 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004210:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004214:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8004216:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004218:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 800421c:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800421e:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004220:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004222:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004224:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004226:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800422a:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800422e:	4620      	mov	r0, r4
 8004230:	f001 ff0b 	bl	800604a <HAL_QSPI_Command>
 8004234:	b108      	cbz	r0, 800423a <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8004236:	2004      	movs	r0, #4
 8004238:	e7cb      	b.n	80041d2 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 800423a:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	a902      	add	r1, sp, #8
 8004242:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8004244:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004246:	f001 ff00 	bl	800604a <HAL_QSPI_Command>
 800424a:	2800      	cmp	r0, #0
 800424c:	d1f3      	bne.n	8004236 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800424e:	f241 3088 	movw	r0, #5000	; 0x1388
 8004252:	f7ff fe97 	bl	8003f84 <QSPI_AutoPollingMemReady.constprop.0>
 8004256:	2800      	cmp	r0, #0
 8004258:	d1ed      	bne.n	8004236 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800425a:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 800425c:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004264:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004266:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004268:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800426a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800426e:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004272:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004276:	4620      	mov	r0, r4
 8004278:	f001 fee7 	bl	800604a <HAL_QSPI_Command>
 800427c:	2800      	cmp	r0, #0
 800427e:	d1da      	bne.n	8004236 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	f10d 0107 	add.w	r1, sp, #7
 8004288:	4620      	mov	r0, r4
 800428a:	f002 f857 	bl	800633c <HAL_QSPI_Receive>
 800428e:	2800      	cmp	r0, #0
 8004290:	d1d1      	bne.n	8004236 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004292:	f7ff fea1 	bl	8003fd8 <QSPI_WriteEnable.constprop.0>
 8004296:	2800      	cmp	r0, #0
 8004298:	d1cd      	bne.n	8004236 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800429a:	2381      	movs	r3, #129	; 0x81
 800429c:	22f0      	movs	r2, #240	; 0xf0
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80042a4:	210a      	movs	r1, #10
 80042a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80042aa:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042ae:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042b8:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80042ba:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80042c0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042c4:	f001 fec1 	bl	800604a <HAL_QSPI_Command>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d1b4      	bne.n	8004236 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	f10d 0107 	add.w	r1, sp, #7
 80042d4:	4620      	mov	r0, r4
 80042d6:	f001 ffd5 	bl	8006284 <HAL_QSPI_Transmit>
 80042da:	2800      	cmp	r0, #0
 80042dc:	f43f af79 	beq.w	80041d2 <BSP_QSPI_Init+0x16>
 80042e0:	e7a9      	b.n	8004236 <BSP_QSPI_Init+0x7a>
 80042e2:	bf00      	nop
 80042e4:	20001e78 	.word	0x20001e78
 80042e8:	a0001000 	.word	0xa0001000

080042ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042ec:	490f      	ldr	r1, [pc, #60]	; (800432c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042ee:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042f0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80042f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <SystemInit+0x44>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004306:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800430e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004312:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004314:	4a07      	ldr	r2, [pc, #28]	; (8004334 <SystemInit+0x48>)
 8004316:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800431e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004320:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004326:	608b      	str	r3, [r1, #8]
#endif
}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000ed00 	.word	0xe000ed00
 8004330:	40023800 	.word	0x40023800
 8004334:	24003010 	.word	0x24003010

08004338 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8004338:	4770      	bx	lr

0800433a <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800433a:	2000      	movs	r0, #0
 800433c:	4770      	bx	lr
	...

08004340 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8004340:	2300      	movs	r3, #0
{
 8004342:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004344:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	b90a      	cbnz	r2, 8004352 <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
{
 8004352:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004354:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004356:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004358:	21a8      	movs	r1, #168	; 0xa8
 800435a:	4628      	mov	r0, r5
 800435c:	f7fd fd04 	bl	8001d68 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004360:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004364:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8004368:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800436c:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800436e:	d103      	bne.n	8004378 <ft5336_ReadID+0x38>
  return (ucReadId);
 8004370:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004374:	b003      	add	sp, #12
 8004376:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004378:	2b51      	cmp	r3, #81	; 0x51
 800437a:	d1ec      	bne.n	8004356 <ft5336_ReadID+0x16>
 800437c:	e7f8      	b.n	8004370 <ft5336_ReadID+0x30>
 800437e:	bf00      	nop
 8004380:	20001ec6 	.word	0x20001ec6

08004384 <ft5336_TS_DetectTouch>:
{
 8004384:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004386:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004388:	2102      	movs	r1, #2
 800438a:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 800438c:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004390:	f7fd fcea 	bl	8001d68 <TS_IO_Read>
 8004394:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80043a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d901      	bls.n	80043b0 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80043ac:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80043b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 80043b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80043ba:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80043bc:	2200      	movs	r2, #0
 80043be:	709a      	strb	r2, [r3, #2]
}
 80043c0:	b002      	add	sp, #8
 80043c2:	bd10      	pop	{r4, pc}
 80043c4:	20001ec6 	.word	0x20001ec6

080043c8 <ft5336_TS_GetXY>:
{
 80043c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80043cc:	4c2f      	ldr	r4, [pc, #188]	; (800448c <ft5336_TS_GetXY+0xc4>)
{
 80043ce:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 80043d0:	f04f 0800 	mov.w	r8, #0
{
 80043d4:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80043d6:	78a3      	ldrb	r3, [r4, #2]
 80043d8:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
 80043da:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80043de:	429a      	cmp	r2, r3
 80043e0:	d94d      	bls.n	800447e <ft5336_TS_GetXY+0xb6>
    switch(ft5336_handle.currActiveTouchIdx)
 80043e2:	2b09      	cmp	r3, #9
 80043e4:	d84e      	bhi.n	8004484 <ft5336_TS_GetXY+0xbc>
 80043e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	1d19      	adds	r1, r3, #4
 80043f0:	f103 0b03 	add.w	fp, r3, #3
 80043f4:	f103 0a06 	add.w	sl, r3, #6
 80043f8:	3305      	adds	r3, #5
 80043fa:	b2c9      	uxtb	r1, r1
 80043fc:	fa5f fb8b 	uxtb.w	fp, fp
 8004400:	fa5f fa8a 	uxtb.w	sl, sl
 8004404:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004408:	b2c6      	uxtb	r6, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800440a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004490 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800440e:	4630      	mov	r0, r6
 8004410:	f7fd fcaa 	bl	8001d68 <TS_IO_Read>
 8004414:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004418:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800441c:	4659      	mov	r1, fp
 800441e:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004420:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004424:	f7fd fca0 	bl	8001d68 <TS_IO_Read>
 8004428:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800442c:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800442e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004432:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004434:	f8b9 2000 	ldrh.w	r2, [r9]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800443e:	4313      	orrs	r3, r2
    *X = coord;
 8004440:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004442:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004446:	f7fd fc8f 	bl	8001d68 <TS_IO_Read>
 800444a:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800444e:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004450:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004454:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004456:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800445a:	f7fd fc85 	bl	8001d68 <TS_IO_Read>
 800445e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004462:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004466:	f8b9 2000 	ldrh.w	r2, [r9]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004470:	4313      	orrs	r3, r2
 8004472:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8004476:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004478:	78a3      	ldrb	r3, [r4, #2]
 800447a:	3301      	adds	r3, #1
 800447c:	70a3      	strb	r3, [r4, #2]
}
 800447e:	b003      	add	sp, #12
 8004480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004484:	46c2      	mov	sl, r8
 8004486:	46c3      	mov	fp, r8
 8004488:	4641      	mov	r1, r8
 800448a:	e7bd      	b.n	8004408 <ft5336_TS_GetXY+0x40>
 800448c:	20001ec6 	.word	0x20001ec6
 8004490:	20001ec4 	.word	0x20001ec4

08004494 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004494:	2201      	movs	r2, #1
 8004496:	21a4      	movs	r1, #164	; 0xa4
 8004498:	b2c0      	uxtb	r0, r0
 800449a:	f7fd bc4b 	b.w	8001d34 <TS_IO_Write>

0800449e <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800449e:	2200      	movs	r2, #0
 80044a0:	21a4      	movs	r1, #164	; 0xa4
 80044a2:	b2c0      	uxtb	r0, r0
 80044a4:	f7fd bc46 	b.w	8001d34 <TS_IO_Write>

080044a8 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 80044a8:	f7ff bff9 	b.w	800449e <ft5336_TS_DisableIT>

080044ac <ft5336_TS_ClearIT>:
 80044ac:	4770      	bx	lr
	...

080044b0 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 80044b0:	4b02      	ldr	r3, [pc, #8]	; (80044bc <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	b90a      	cbnz	r2, 80044ba <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
}
 80044ba:	4770      	bx	lr
 80044bc:	20001ec6 	.word	0x20001ec6

080044c0 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c2:	2003      	movs	r0, #3
{
 80044c4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044ce:	f000 fb39 	bl	8004b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fd fac2 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044d8:	f7fd f828 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80044dc:	2000      	movs	r0, #0
 80044de:	bd08      	pop	{r3, pc}
 80044e0:	40023c00 	.word	0x40023c00

080044e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80044e4:	4a03      	ldr	r2, [pc, #12]	; (80044f4 <HAL_IncTick+0x10>)
 80044e6:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_IncTick+0x14>)
 80044e8:	6811      	ldr	r1, [r2, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	440b      	add	r3, r1
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20001ecc 	.word	0x20001ecc
 80044f8:	20000038 	.word	0x20000038

080044fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044fc:	4b01      	ldr	r3, [pc, #4]	; (8004504 <HAL_GetTick+0x8>)
 80044fe:	6818      	ldr	r0, [r3, #0]
}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20001ecc 	.word	0x20001ecc

08004508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800450c:	f7ff fff6 	bl	80044fc <HAL_GetTick>
 8004510:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004512:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004514:	bf1e      	ittt	ne
 8004516:	4b04      	ldrne	r3, [pc, #16]	; (8004528 <HAL_Delay+0x20>)
 8004518:	781b      	ldrbne	r3, [r3, #0]
 800451a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800451c:	f7ff ffee 	bl	80044fc <HAL_GetTick>
 8004520:	1b43      	subs	r3, r0, r5
 8004522:	42a3      	cmp	r3, r4
 8004524:	d3fa      	bcc.n	800451c <HAL_Delay+0x14>
  {
  }
}
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	20000038 	.word	0x20000038

0800452c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800452c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800452e:	4604      	mov	r4, r0
 8004530:	2800      	cmp	r0, #0
 8004532:	d06e      	beq.n	8004612 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004534:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004538:	b90b      	cbnz	r3, 800453e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800453a:	f7fd f815 	bl	8001568 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	6813      	ldr	r3, [r2, #0]
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004548:	f7ff ffd8 	bl	80044fc <HAL_GetTick>
 800454c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	07d1      	lsls	r1, r2, #31
 8004554:	d551      	bpl.n	80045fa <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	f022 0202 	bic.w	r2, r2, #2
 800455c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800455e:	f7ff ffcd 	bl	80044fc <HAL_GetTick>
 8004562:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	0792      	lsls	r2, r2, #30
 800456a:	d454      	bmi.n	8004616 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800456c:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800456e:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004570:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	bf0c      	ite	eq
 8004576:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800457a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800457e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8004580:	7e62      	ldrb	r2, [r4, #25]
 8004582:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	bf0c      	ite	eq
 8004588:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800458c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8004590:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004592:	7ea2      	ldrb	r2, [r4, #26]
 8004594:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	bf0c      	ite	eq
 800459a:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800459e:	f022 0220 	bicne.w	r2, r2, #32
 80045a2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80045a4:	7ee2      	ldrb	r2, [r4, #27]
 80045a6:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	bf0c      	ite	eq
 80045ac:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045b0:	f042 0210 	orrne.w	r2, r2, #16
 80045b4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045b6:	7f22      	ldrb	r2, [r4, #28]
 80045b8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	bf0c      	ite	eq
 80045be:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045c2:	f022 0208 	bicne.w	r2, r2, #8
 80045c6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045c8:	7f62      	ldrb	r2, [r4, #29]
 80045ca:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	bf0c      	ite	eq
 80045d0:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045d4:	f022 0204 	bicne.w	r2, r2, #4
 80045d8:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045da:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80045de:	430a      	orrs	r2, r1
 80045e0:	6921      	ldr	r1, [r4, #16]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	6961      	ldr	r1, [r4, #20]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	6861      	ldr	r1, [r4, #4]
 80045ea:	3901      	subs	r1, #1
 80045ec:	430a      	orrs	r2, r1
 80045ee:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80045f0:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045f2:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80045f4:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80045f8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045fa:	f7ff ff7f 	bl	80044fc <HAL_GetTick>
 80045fe:	1b40      	subs	r0, r0, r5
 8004600:	280a      	cmp	r0, #10
 8004602:	d9a4      	bls.n	800454e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800460c:	2305      	movs	r3, #5
 800460e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8004612:	2001      	movs	r0, #1
 8004614:	e7f0      	b.n	80045f8 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004616:	f7ff ff71 	bl	80044fc <HAL_GetTick>
 800461a:	1b40      	subs	r0, r0, r5
 800461c:	280a      	cmp	r0, #10
 800461e:	d9a1      	bls.n	8004564 <HAL_CAN_Init+0x38>
 8004620:	e7f0      	b.n	8004604 <HAL_CAN_Init+0xd8>
	...

08004624 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004624:	b530      	push	{r4, r5, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004626:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800462a:	3b01      	subs	r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d876      	bhi.n	800471e <HAL_CAN_ConfigFilter+0xfa>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004630:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_CAN_ConfigFilter+0x108>)
 8004632:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800463e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004642:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004646:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800464a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800464e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004650:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004654:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004656:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800465a:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800465c:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004660:	f002 041f 	and.w	r4, r2, #31
 8004664:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004666:	ea25 0500 	bic.w	r5, r5, r0
 800466a:	43c4      	mvns	r4, r0
 800466c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004670:	69cd      	ldr	r5, [r1, #28]
 8004672:	bbad      	cbnz	r5, 80046e0 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004674:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8004678:	4025      	ands	r5, r4
 800467a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800467e:	68cb      	ldr	r3, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004680:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004682:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8004686:	00d3      	lsls	r3, r2, #3

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004688:	880a      	ldrh	r2, [r1, #0]
 800468a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800468e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004692:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004696:	688d      	ldr	r5, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004698:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800469c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80046a0:	698a      	ldr	r2, [r1, #24]
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_CAN_ConfigFilter+0x108>)
 80046a4:	bb8a      	cbnz	r2, 800470a <HAL_CAN_ConfigFilter+0xe6>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80046a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046aa:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80046ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80046b0:	690a      	ldr	r2, [r1, #16]
 80046b2:	bb72      	cbnz	r2, 8004712 <HAL_CAN_ConfigFilter+0xee>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80046b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80046b8:	4014      	ands	r4, r2
 80046ba:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80046be:	6a0b      	ldr	r3, [r1, #32]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_CAN_ConfigFilter+0x108>)
 80046c4:	d104      	bne.n	80046d0 <HAL_CAN_ConfigFilter+0xac>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80046c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046ca:	4302      	orrs	r2, r0
 80046cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80046d4:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80046de:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80046e0:	2d01      	cmp	r5, #1
 80046e2:	d1dd      	bne.n	80046a0 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80046e4:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80046e8:	4305      	orrs	r5, r0
 80046ea:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046ee:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046f0:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80046f6:	00d3      	lsls	r3, r2, #3
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80046f8:	898a      	ldrh	r2, [r1, #12]
 80046fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046fe:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004702:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004706:	688d      	ldr	r5, [r1, #8]
 8004708:	e7c6      	b.n	8004698 <HAL_CAN_ConfigFilter+0x74>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800470a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800470e:	4302      	orrs	r2, r0
 8004710:	e7cc      	b.n	80046ac <HAL_CAN_ConfigFilter+0x88>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004712:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004716:	4302      	orrs	r2, r0
 8004718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800471c:	e7cf      	b.n	80046be <HAL_CAN_ConfigFilter+0x9a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800471e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004724:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004726:	2001      	movs	r0, #1
 8004728:	e7d9      	b.n	80046de <HAL_CAN_ConfigFilter+0xba>
 800472a:	bf00      	nop
 800472c:	40006400 	.word	0x40006400

08004730 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004730:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004732:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8004736:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8004738:	2b01      	cmp	r3, #1
 800473a:	b2dd      	uxtb	r5, r3
 800473c:	d120      	bne.n	8004780 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800473e:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004740:	2302      	movs	r3, #2
 8004742:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800474e:	f7ff fed5 	bl	80044fc <HAL_GetTick>
 8004752:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f013 0301 	ands.w	r3, r3, #1
 800475c:	d102      	bne.n	8004764 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 800475e:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004760:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8004762:	e00b      	b.n	800477c <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004764:	f7ff feca 	bl	80044fc <HAL_GetTick>
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	280a      	cmp	r0, #10
 800476c:	d9f2      	bls.n	8004754 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800476e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004774:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8004776:	2305      	movs	r3, #5
 8004778:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 800477c:	4628      	mov	r0, r5
 800477e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004780:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004782:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004788:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800478a:	e7f7      	b.n	800477c <HAL_CAN_Start+0x4c>

0800478c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800478e:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004792:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004794:	3d01      	subs	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004796:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8004798:	2d01      	cmp	r5, #1
 800479a:	d83d      	bhi.n	8004818 <HAL_CAN_AddTxMessage+0x8c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800479c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80047a0:	f04f 0501 	mov.w	r5, #1
 80047a4:	d032      	beq.n	800480c <HAL_CAN_AddTxMessage+0x80>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80047a6:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80047aa:	40a5      	lsls	r5, r4
 80047ac:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80047ae:	f104 0318 	add.w	r3, r4, #24
 80047b2:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 80047b6:	bb10      	cbnz	r0, 80047fe <HAL_CAN_AddTxMessage+0x72>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80047b8:	6808      	ldr	r0, [r1, #0]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	ea47 5740 	orr.w	r7, r7, r0, lsl #21
 80047c0:	50f7      	str	r7, [r6, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80047c2:	690d      	ldr	r5, [r1, #16]
 80047c4:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 80047c8:	0120      	lsls	r0, r4, #4
 80047ca:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80047ce:	7d09      	ldrb	r1, [r1, #20]
 80047d0:	2901      	cmp	r1, #1
 80047d2:	d105      	bne.n	80047e0 <HAL_CAN_AddTxMessage+0x54>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80047d4:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 80047d8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80047dc:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80047e0:	6851      	ldr	r1, [r2, #4]
 80047e2:	4406      	add	r6, r0

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

      /* Return function status */
      return HAL_OK;
 80047e4:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80047e6:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80047f0:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80047fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047fe:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8004800:	4338      	orrs	r0, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004802:	011b      	lsls	r3, r3, #4
                                                           pHeader->IDE |
 8004804:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004808:	50f0      	str	r0, [r6, r3]
 800480a:	e7da      	b.n	80047c2 <HAL_CAN_AddTxMessage+0x36>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800480c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800480e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004812:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004814:	2001      	movs	r0, #1
 8004816:	e7f1      	b.n	80047fc <HAL_CAN_AddTxMessage+0x70>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004818:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800481a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481e:	e7f8      	b.n	8004812 <HAL_CAN_AddTxMessage+0x86>

08004820 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8004822:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004826:	3c01      	subs	r4, #1
 8004828:	2c01      	cmp	r4, #1
 800482a:	d86c      	bhi.n	8004906 <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800482c:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800482e:	b941      	cbnz	r1, 8004842 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004830:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004832:	07a4      	lsls	r4, r4, #30
 8004834:	d107      	bne.n	8004846 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004836:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800483c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800483e:	2001      	movs	r0, #1
 8004840:	e056      	b.n	80048f0 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004842:	6934      	ldr	r4, [r6, #16]
 8004844:	e7f5      	b.n	8004832 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004846:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800484a:	010c      	lsls	r4, r1, #4
 800484c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004850:	f007 0704 	and.w	r7, r7, #4
 8004854:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004856:	2f00      	cmp	r7, #0
 8004858:	d14b      	bne.n	80048f2 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800485a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800485e:	0d7f      	lsrs	r7, r7, #21
 8004860:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004862:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004866:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004868:	f007 0702 	and.w	r7, r7, #2
 800486c:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800486e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8004872:	f007 070f 	and.w	r7, r7, #15
 8004876:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004878:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800487c:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004880:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004884:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004886:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004888:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800488a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800488e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004890:	6802      	ldr	r2, [r0, #0]
 8004892:	4422      	add	r2, r4
 8004894:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004898:	0a12      	lsrs	r2, r2, #8
 800489a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800489c:	6802      	ldr	r2, [r0, #0]
 800489e:	4422      	add	r2, r4
 80048a0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80048a4:	0c12      	lsrs	r2, r2, #16
 80048a6:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80048a8:	6802      	ldr	r2, [r0, #0]
 80048aa:	4422      	add	r2, r4
 80048ac:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80048b0:	0e12      	lsrs	r2, r2, #24
 80048b2:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80048b4:	6802      	ldr	r2, [r0, #0]
 80048b6:	4422      	add	r2, r4
 80048b8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80048bc:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80048be:	6802      	ldr	r2, [r0, #0]
 80048c0:	4422      	add	r2, r4
 80048c2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80048c6:	0a12      	lsrs	r2, r2, #8
 80048c8:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80048ca:	6802      	ldr	r2, [r0, #0]
 80048cc:	4422      	add	r2, r4
 80048ce:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80048d2:	0c12      	lsrs	r2, r2, #16
 80048d4:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	4422      	add	r2, r4
 80048da:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80048de:	0e12      	lsrs	r2, r2, #24
 80048e0:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048e2:	6803      	ldr	r3, [r0, #0]
 80048e4:	b951      	cbnz	r1, 80048fc <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	f042 0220 	orr.w	r2, r2, #32
 80048ec:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80048ee:	2000      	movs	r0, #0
  }
}
 80048f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80048f2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80048f6:	08ff      	lsrs	r7, r7, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80048f8:	6057      	str	r7, [r2, #4]
 80048fa:	e7b2      	b.n	8004862 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	f042 0220 	orr.w	r2, r2, #32
 8004902:	611a      	str	r2, [r3, #16]
 8004904:	e7f3      	b.n	80048ee <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004906:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800490c:	e796      	b.n	800483c <HAL_CAN_GetRxMessage+0x1c>

0800490e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800490e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004912:	3b01      	subs	r3, #1
 8004914:	2b01      	cmp	r3, #1
 8004916:	d805      	bhi.n	8004924 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004918:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 800491a:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800491c:	6953      	ldr	r3, [r2, #20]
 800491e:	4319      	orrs	r1, r3
 8004920:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8004922:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004924:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800492a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
  }
}
 800492e:	4770      	bx	lr

08004930 <HAL_CAN_TxMailbox0CompleteCallback>:
 8004930:	4770      	bx	lr

08004932 <HAL_CAN_TxMailbox1CompleteCallback>:
 8004932:	4770      	bx	lr

08004934 <HAL_CAN_TxMailbox2CompleteCallback>:
 8004934:	4770      	bx	lr

08004936 <HAL_CAN_TxMailbox0AbortCallback>:
 8004936:	4770      	bx	lr

08004938 <HAL_CAN_TxMailbox1AbortCallback>:
 8004938:	4770      	bx	lr

0800493a <HAL_CAN_TxMailbox2AbortCallback>:
 800493a:	4770      	bx	lr

0800493c <HAL_CAN_RxFifo0FullCallback>:
 800493c:	4770      	bx	lr

0800493e <HAL_CAN_RxFifo1MsgPendingCallback>:
 800493e:	4770      	bx	lr

08004940 <HAL_CAN_RxFifo1FullCallback>:
 8004940:	4770      	bx	lr

08004942 <HAL_CAN_SleepCallback>:
 8004942:	4770      	bx	lr

08004944 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8004944:	4770      	bx	lr

08004946 <HAL_CAN_ErrorCallback>:
 8004946:	4770      	bx	lr

08004948 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800494c:	6803      	ldr	r3, [r0, #0]
{
 800494e:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004950:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004952:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004956:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800495a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800495c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004960:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004964:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004968:	d022      	beq.n	80049b0 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800496a:	f017 0401 	ands.w	r4, r7, #1
 800496e:	d007      	beq.n	8004980 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004970:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004972:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004974:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004976:	f140 80a5 	bpl.w	8004ac4 <HAL_CAN_IRQHandler+0x17c>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800497a:	2400      	movs	r4, #0
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800497c:	f7ff ffd8 	bl	8004930 <HAL_CAN_TxMailbox0CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004980:	05fb      	lsls	r3, r7, #23
 8004982:	d509      	bpl.n	8004998 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800498a:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800498c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800498e:	f140 80a7 	bpl.w	8004ae0 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004992:	4628      	mov	r0, r5
 8004994:	f7ff ffcd 	bl	8004932 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004998:	03fb      	lsls	r3, r7, #15
 800499a:	d509      	bpl.n	80049b0 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049a2:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049a4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049a6:	f140 80a9 	bpl.w	8004afc <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80049aa:	4628      	mov	r0, r5
 80049ac:	f7ff ffc2 	bl	8004934 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80049b0:	0733      	lsls	r3, r6, #28
 80049b2:	d507      	bpl.n	80049c4 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80049b4:	f01b 0f10 	tst.w	fp, #16
 80049b8:	d004      	beq.n	80049c4 <HAL_CAN_IRQHandler+0x7c>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80049be:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80049c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80049c4:	0777      	lsls	r7, r6, #29
 80049c6:	d508      	bpl.n	80049da <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80049c8:	f01b 0f08 	tst.w	fp, #8
 80049cc:	d005      	beq.n	80049da <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	2208      	movs	r2, #8
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80049d2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80049d4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80049d6:	f7ff ffb1 	bl	800493c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80049da:	07b0      	lsls	r0, r6, #30
 80049dc:	d506      	bpl.n	80049ec <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80049de:	682b      	ldr	r3, [r5, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	0799      	lsls	r1, r3, #30
 80049e4:	d002      	beq.n	80049ec <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80049e6:	4628      	mov	r0, r5
 80049e8:	f7fc fa3a 	bl	8000e60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80049ec:	0672      	lsls	r2, r6, #25
 80049ee:	d507      	bpl.n	8004a00 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80049f0:	f01a 0f10 	tst.w	sl, #16
 80049f4:	d004      	beq.n	8004a00 <HAL_CAN_IRQHandler+0xb8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80049fa:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80049fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a00:	06b3      	lsls	r3, r6, #26
 8004a02:	d508      	bpl.n	8004a16 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a04:	f01a 0f08 	tst.w	sl, #8
 8004a08:	d005      	beq.n	8004a16 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	2208      	movs	r2, #8
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a0e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a10:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a12:	f7ff ff95 	bl	8004940 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a16:	06f7      	lsls	r7, r6, #27
 8004a18:	d506      	bpl.n	8004a28 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004a1a:	682b      	ldr	r3, [r5, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	0798      	lsls	r0, r3, #30
 8004a20:	d002      	beq.n	8004a28 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004a22:	4628      	mov	r0, r5
 8004a24:	f7ff ff8b 	bl	800493e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004a28:	03b1      	lsls	r1, r6, #14
 8004a2a:	d508      	bpl.n	8004a3e <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004a2c:	f019 0f10 	tst.w	r9, #16
 8004a30:	d005      	beq.n	8004a3e <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	2210      	movs	r2, #16
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004a36:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a38:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8004a3a:	f7ff ff82 	bl	8004942 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004a3e:	03f2      	lsls	r2, r6, #15
 8004a40:	d508      	bpl.n	8004a54 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004a42:	f019 0f08 	tst.w	r9, #8
 8004a46:	d005      	beq.n	8004a54 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	2208      	movs	r2, #8
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a4c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004a4e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a50:	f7ff ff78 	bl	8004944 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004a54:	0433      	lsls	r3, r6, #16
 8004a56:	d52c      	bpl.n	8004ab2 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004a58:	f019 0f04 	tst.w	r9, #4
 8004a5c:	682a      	ldr	r2, [r5, #0]
 8004a5e:	d026      	beq.n	8004aae <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a60:	05f7      	lsls	r7, r6, #23
 8004a62:	d504      	bpl.n	8004a6e <HAL_CAN_IRQHandler+0x126>
 8004a64:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004a68:	bf18      	it	ne
 8004a6a:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a6e:	05b0      	lsls	r0, r6, #22
 8004a70:	d504      	bpl.n	8004a7c <HAL_CAN_IRQHandler+0x134>
 8004a72:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004a76:	bf18      	it	ne
 8004a78:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a7c:	0571      	lsls	r1, r6, #21
 8004a7e:	d504      	bpl.n	8004a8a <HAL_CAN_IRQHandler+0x142>
 8004a80:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004a84:	bf18      	it	ne
 8004a86:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a8a:	0533      	lsls	r3, r6, #20
 8004a8c:	d50f      	bpl.n	8004aae <HAL_CAN_IRQHandler+0x166>
 8004a8e:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8004a92:	d00c      	beq.n	8004aae <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d04f      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x1f0>
 8004a98:	d83e      	bhi.n	8004b18 <HAL_CAN_IRQHandler+0x1d0>
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d046      	beq.n	8004b2c <HAL_CAN_IRQHandler+0x1e4>
 8004a9e:	2b30      	cmp	r3, #48	; 0x30
 8004aa0:	d047      	beq.n	8004b32 <HAL_CAN_IRQHandler+0x1ea>
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d03f      	beq.n	8004b26 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004aa6:	6993      	ldr	r3, [r2, #24]
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004aae:	2304      	movs	r3, #4
 8004ab0:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ab2:	b12c      	cbz	r4, 8004ac0 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ab4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ab6:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8004ab8:	4323      	orrs	r3, r4
 8004aba:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004abc:	f7ff ff43 	bl	8004946 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004ac4:	077a      	lsls	r2, r7, #29
 8004ac6:	d405      	bmi.n	8004ad4 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004ac8:	f017 0408 	ands.w	r4, r7, #8
 8004acc:	d105      	bne.n	8004ada <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ace:	f7ff ff32 	bl	8004936 <HAL_CAN_TxMailbox0AbortCallback>
 8004ad2:	e755      	b.n	8004980 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ad4:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004ad8:	e752      	b.n	8004980 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004ada:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8004ade:	e74f      	b.n	8004980 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004ae0:	0579      	lsls	r1, r7, #21
 8004ae2:	d502      	bpl.n	8004aea <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004ae4:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004ae8:	e756      	b.n	8004998 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004aea:	053a      	lsls	r2, r7, #20
 8004aec:	d502      	bpl.n	8004af4 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004aee:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004af2:	e751      	b.n	8004998 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004af4:	4628      	mov	r0, r5
 8004af6:	f7ff ff1f 	bl	8004938 <HAL_CAN_TxMailbox1AbortCallback>
 8004afa:	e74d      	b.n	8004998 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004afc:	0379      	lsls	r1, r7, #13
 8004afe:	d502      	bpl.n	8004b06 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004b00:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004b04:	e754      	b.n	80049b0 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b06:	033a      	lsls	r2, r7, #12
 8004b08:	d502      	bpl.n	8004b10 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b0a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8004b0e:	e74f      	b.n	80049b0 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b10:	4628      	mov	r0, r5
 8004b12:	f7ff ff12 	bl	800493a <HAL_CAN_TxMailbox2AbortCallback>
 8004b16:	e74b      	b.n	80049b0 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8004b18:	2b50      	cmp	r3, #80	; 0x50
 8004b1a:	d010      	beq.n	8004b3e <HAL_CAN_IRQHandler+0x1f6>
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d1c2      	bne.n	8004aa6 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004b20:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8004b24:	e7bf      	b.n	8004aa6 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8004b26:	f044 0408 	orr.w	r4, r4, #8
            break;
 8004b2a:	e7bc      	b.n	8004aa6 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004b2c:	f044 0410 	orr.w	r4, r4, #16
            break;
 8004b30:	e7b9      	b.n	8004aa6 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004b32:	f044 0420 	orr.w	r4, r4, #32
            break;
 8004b36:	e7b6      	b.n	8004aa6 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8004b38:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8004b3c:	e7b3      	b.n	8004aa6 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8004b3e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8004b42:	e7b0      	b.n	8004aa6 <HAL_CAN_IRQHandler+0x15e>

08004b44 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b44:	4907      	ldr	r1, [pc, #28]	; (8004b64 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b46:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b48:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b52:	0412      	lsls	r2, r2, #16
 8004b54:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004b60:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b68:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b6a:	b530      	push	{r4, r5, lr}
 8004b6c:	68dc      	ldr	r4, [r3, #12]
 8004b6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	bf28      	it	cs
 8004b7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b7e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b84:	bf8c      	ite	hi
 8004b86:	3c03      	subhi	r4, #3
 8004b88:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b8a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8004b8e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b90:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b98:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	fa03 f304 	lsl.w	r3, r3, r4
 8004ba0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004ba8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004baa:	db06      	blt.n	8004bba <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004bb0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004bb4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004bb8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bba:	f000 000f 	and.w	r0, r0, #15
 8004bbe:	4a02      	ldr	r2, [pc, #8]	; (8004bc8 <HAL_NVIC_SetPriority+0x60>)
 8004bc0:	5413      	strb	r3, [r2, r0]
 8004bc2:	e7f9      	b.n	8004bb8 <HAL_NVIC_SetPriority+0x50>
 8004bc4:	e000ed00 	.word	0xe000ed00
 8004bc8:	e000ed14 	.word	0xe000ed14

08004bcc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	db07      	blt.n	8004be0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd0:	0941      	lsrs	r1, r0, #5
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f000 001f 	and.w	r0, r0, #31
 8004bd8:	4a02      	ldr	r2, [pc, #8]	; (8004be4 <HAL_NVIC_EnableIRQ+0x18>)
 8004bda:	4083      	lsls	r3, r0
 8004bdc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000e100 	.word	0xe000e100

08004be8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004be8:	2800      	cmp	r0, #0
 8004bea:	db0c      	blt.n	8004c06 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bec:	0943      	lsrs	r3, r0, #5
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f000 001f 	and.w	r0, r0, #31
 8004bf4:	4904      	ldr	r1, [pc, #16]	; (8004c08 <HAL_NVIC_DisableIRQ+0x20>)
 8004bf6:	3320      	adds	r3, #32
 8004bf8:	4082      	lsls	r2, r0
 8004bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c02:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004c06:	4770      	bx	lr
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004c0c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <HAL_MPU_Disable+0x18>)
 8004c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_MPU_Enable+0x1c>)
 8004c2a:	f040 0001 	orr.w	r0, r0, #1
 8004c2e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004c3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c3e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004c42:	4770      	bx	lr
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004c48:	7843      	ldrb	r3, [r0, #1]
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_MPU_ConfigRegion+0x54>)
{
 8004c4c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8004c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8004c52:	7801      	ldrb	r1, [r0, #0]
 8004c54:	b1e9      	cbz	r1, 8004c92 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004c56:	6843      	ldr	r3, [r0, #4]
 8004c58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c5c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c5e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c60:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c62:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c66:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c68:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c6a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c6e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c70:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c74:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c76:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c7a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c80:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c86:	7a01      	ldrb	r1, [r0, #8]
 8004c88:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c8c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004c90:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8004c92:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004c96:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8004c9a:	e7f9      	b.n	8004c90 <HAL_MPU_ConfigRegion+0x48>
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ca0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	b908      	cbnz	r0, 8004caa <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8004ca6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004ca8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004caa:	7f43      	ldrb	r3, [r0, #29]
 8004cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cb0:	b913      	cbnz	r3, 8004cb8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004cb2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004cb4:	f7fc fc94 	bl	80015e0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004cbc:	7923      	ldrb	r3, [r4, #4]
 8004cbe:	b9e3      	cbnz	r3, 8004cfa <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <HAL_CRC_Init+0x70>)
 8004cc4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	f022 0218 	bic.w	r2, r2, #24
 8004ccc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004cce:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004cd0:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004cd2:	b9d2      	cbnz	r2, 8004d0a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004cd8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004cda:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	6961      	ldr	r1, [r4, #20]
 8004ce0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ce6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ce8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004cf8:	e7d6      	b.n	8004ca8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004cfa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 f808 	bl	8004d14 <HAL_CRCEx_Polynomial_Set>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d0e2      	beq.n	8004cce <HAL_CRC_Init+0x2e>
 8004d08:	e7cd      	b.n	8004ca6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004d0a:	6922      	ldr	r2, [r4, #16]
 8004d0c:	e7e4      	b.n	8004cd8 <HAL_CRC_Init+0x38>
 8004d0e:	bf00      	nop
 8004d10:	04c11db7 	.word	0x04c11db7

08004d14 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004d14:	231f      	movs	r3, #31
{
 8004d16:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	d31c      	bcc.n	8004d56 <HAL_CRCEx_Polynomial_Set+0x42>
 8004d1c:	fa21 f403 	lsr.w	r4, r1, r3
 8004d20:	07e4      	lsls	r4, r4, #31
 8004d22:	d5f9      	bpl.n	8004d18 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004d24:	2a10      	cmp	r2, #16
 8004d26:	d012      	beq.n	8004d4e <HAL_CRCEx_Polynomial_Set+0x3a>
 8004d28:	d804      	bhi.n	8004d34 <HAL_CRCEx_Polynomial_Set+0x20>
 8004d2a:	b13a      	cbz	r2, 8004d3c <HAL_CRCEx_Polynomial_Set+0x28>
 8004d2c:	2a08      	cmp	r2, #8
 8004d2e:	d010      	beq.n	8004d52 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004d30:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004d32:	e00b      	b.n	8004d4c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8004d34:	2a18      	cmp	r2, #24
 8004d36:	d1fb      	bne.n	8004d30 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004d38:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004d3a:	d8f9      	bhi.n	8004d30 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d40:	6883      	ldr	r3, [r0, #8]
 8004d42:	f023 0318 	bic.w	r3, r3, #24
 8004d46:	4313      	orrs	r3, r2
 8004d48:	6083      	str	r3, [r0, #8]
 8004d4a:	2000      	movs	r0, #0
}
 8004d4c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004d4e:	2b07      	cmp	r3, #7
 8004d50:	e7f3      	b.n	8004d3a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004d52:	2b0f      	cmp	r3, #15
 8004d54:	e7f1      	b.n	8004d3a <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	d1ea      	bne.n	8004d30 <HAL_CRCEx_Polynomial_Set+0x1c>
 8004d5a:	e7ef      	b.n	8004d3c <HAL_CRCEx_Polynomial_Set+0x28>

08004d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d60:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004d62:	f7ff fbcb 	bl	80044fc <HAL_GetTick>
 8004d66:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d68:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d006      	beq.n	8004d7e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d70:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8004d72:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d74:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004d76:	2300      	movs	r3, #0
 8004d78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8004d7c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	f022 0216 	bic.w	r2, r2, #22
 8004d86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d8e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d92:	b90a      	cbnz	r2, 8004d98 <HAL_DMA_Abort+0x3c>
 8004d94:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004d96:	b11a      	cbz	r2, 8004da0 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	f022 0208 	bic.w	r2, r2, #8
 8004d9e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f013 0301 	ands.w	r3, r3, #1
 8004db0:	d108      	bne.n	8004dc4 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004db4:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004db6:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db8:	408a      	lsls	r2, r1
 8004dba:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004dc2:	e7d8      	b.n	8004d76 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dc4:	f7ff fb9a 	bl	80044fc <HAL_GetTick>
 8004dc8:	1b40      	subs	r0, r0, r5
 8004dca:	2805      	cmp	r0, #5
 8004dcc:	d9ec      	bls.n	8004da8 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dce:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dd0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dd2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dd4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8004dd8:	e7cd      	b.n	8004d76 <HAL_DMA_Abort+0x1a>

08004dda <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004dda:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004ddc:	4604      	mov	r4, r0
 8004dde:	b330      	cbz	r0, 8004e2e <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004de0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004de4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004de8:	b91b      	cbnz	r3, 8004df2 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004dea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004dee:	f7fc fc0d 	bl	800160c <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004df2:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004df4:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004df6:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004df8:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004dfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e04:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004e06:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004e08:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004e0a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e0c:	f023 0307 	bic.w	r3, r3, #7
 8004e10:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004e12:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004e14:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004e16:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004e24:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004e26:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004e28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004e2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e2e:	2001      	movs	r0, #1
 8004e30:	e7fc      	b.n	8004e2c <HAL_DMA2D_Init+0x52>

08004e32 <HAL_DMA2D_LineEventCallback>:
 8004e32:	4770      	bx	lr

08004e34 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004e34:	4770      	bx	lr

08004e36 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e36:	6803      	ldr	r3, [r0, #0]
{
 8004e38:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e3a:	685e      	ldr	r6, [r3, #4]
{
 8004e3c:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004e3e:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e40:	07f2      	lsls	r2, r6, #31
 8004e42:	d514      	bpl.n	8004e6e <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004e44:	05e9      	lsls	r1, r5, #23
 8004e46:	d512      	bpl.n	8004e6e <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e4e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004e58:	2201      	movs	r2, #1
 8004e5a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e62:	2300      	movs	r3, #0
 8004e64:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004e68:	6943      	ldr	r3, [r0, #20]
 8004e6a:	b103      	cbz	r3, 8004e6e <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e6c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e6e:	06b2      	lsls	r2, r6, #26
 8004e70:	d516      	bpl.n	8004ea0 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004e72:	04ab      	lsls	r3, r5, #18
 8004e74:	d514      	bpl.n	8004ea0 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004e80:	2220      	movs	r2, #32
 8004e82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e86:	f043 0302 	orr.w	r3, r3, #2
 8004e8a:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e92:	2300      	movs	r3, #0
 8004e94:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004e98:	6963      	ldr	r3, [r4, #20]
 8004e9a:	b10b      	cbz	r3, 8004ea0 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004ea0:	0730      	lsls	r0, r6, #28
 8004ea2:	d516      	bpl.n	8004ed2 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004ea4:	0529      	lsls	r1, r5, #20
 8004ea6:	d514      	bpl.n	8004ed2 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004eb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ebe:	2304      	movs	r3, #4
 8004ec0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004eca:	6963      	ldr	r3, [r4, #20]
 8004ecc:	b10b      	cbz	r3, 8004ed2 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ed2:	0772      	lsls	r2, r6, #29
 8004ed4:	d50b      	bpl.n	8004eee <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ed6:	056b      	lsls	r3, r5, #21
 8004ed8:	d509      	bpl.n	8004eee <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004eda:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004edc:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004eea:	f7ff ffa2 	bl	8004e32 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004eee:	07b0      	lsls	r0, r6, #30
 8004ef0:	d514      	bpl.n	8004f1c <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004ef2:	05a9      	lsls	r1, r5, #22
 8004ef4:	d512      	bpl.n	8004f1c <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004f00:	2202      	movs	r2, #2
 8004f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004f04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f06:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004f14:	6923      	ldr	r3, [r4, #16]
 8004f16:	b10b      	cbz	r3, 8004f1c <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004f18:	4620      	mov	r0, r4
 8004f1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004f1c:	06f2      	lsls	r2, r6, #27
 8004f1e:	d513      	bpl.n	8004f48 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004f20:	04eb      	lsls	r3, r5, #19
 8004f22:	d511      	bpl.n	8004f48 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004f24:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004f26:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004f30:	2210      	movs	r2, #16
 8004f32:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004f34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f36:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004f44:	f7ff ff76 	bl	8004e34 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f4c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004f4e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	f04f 0302 	mov.w	r3, #2
 8004f58:	d02b      	beq.n	8004fb2 <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f5a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004f5e:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004f60:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004f64:	4f1c      	ldr	r7, [pc, #112]	; (8004fd8 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004f66:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004f6a:	010e      	lsls	r6, r1, #4
 8004f6c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004f6e:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004f72:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f76:	3c09      	subs	r4, #9
 8004f78:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f7a:	bf96      	itet	ls
 8004f7c:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004f80:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f84:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f86:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004f88:	b9a9      	cbnz	r1, 8004fb6 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f8a:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f8c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f8e:	ea01 0107 	and.w	r1, r1, r7
 8004f92:	ea42 0201 	orr.w	r2, r2, r1
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f98:	6982      	ldr	r2, [r0, #24]
 8004f9a:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f9c:	d803      	bhi.n	8004fa6 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004f9e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004fa0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004fa4:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004fac:	2300      	movs	r3, #0
 8004fae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004fb2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004fb6:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fb8:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004fba:	ea01 0107 	and.w	r1, r1, r7
 8004fbe:	ea42 0201 	orr.w	r2, r2, r1
 8004fc2:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004fc4:	eb00 0206 	add.w	r2, r0, r6
 8004fc8:	6992      	ldr	r2, [r2, #24]
 8004fca:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fcc:	d8eb      	bhi.n	8004fa6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004fce:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004fd2:	621d      	str	r5, [r3, #32]
 8004fd4:	e7e7      	b.n	8004fa6 <HAL_DMA2D_ConfigLayer+0x5a>
 8004fd6:	bf00      	nop
 8004fd8:	00fcfff0 	.word	0x00fcfff0

08004fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fe0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800519c <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fe6:	4a6b      	ldr	r2, [pc, #428]	; (8005194 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8004fe8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fea:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004fec:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fee:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004ff2:	43ac      	bics	r4, r5
 8004ff4:	f040 80b4 	bne.w	8005160 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ff8:	684d      	ldr	r5, [r1, #4]
 8004ffa:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ffe:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005000:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005004:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005008:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800500a:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800500c:	2f01      	cmp	r7, #1
 800500e:	d834      	bhi.n	800507a <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8005010:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005012:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8005016:	68cf      	ldr	r7, [r1, #12]
 8005018:	fa07 f708 	lsl.w	r7, r7, r8
 800501c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8005020:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005022:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005024:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005028:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800502c:	409f      	lsls	r7, r3
 800502e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005032:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005034:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005036:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005038:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800503c:	688f      	ldr	r7, [r1, #8]
 800503e:	fa07 f708 	lsl.w	r7, r7, r8
 8005042:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8005046:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005048:	d119      	bne.n	800507e <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800504a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800504e:	f003 0b07 	and.w	fp, r3, #7
 8005052:	f04f 0e0f 	mov.w	lr, #15
 8005056:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800505a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800505e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005062:	fa0e fe0b 	lsl.w	lr, lr, fp
 8005066:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800506a:	690f      	ldr	r7, [r1, #16]
 800506c:	fa07 f70b 	lsl.w	r7, r7, fp
 8005070:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8005074:	f8ca 7020 	str.w	r7, [sl, #32]
 8005078:	e001      	b.n	800507e <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800507a:	2c03      	cmp	r4, #3
 800507c:	d1da      	bne.n	8005034 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800507e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005080:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005084:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005088:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800508c:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8005090:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005092:	d065      	beq.n	8005160 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005094:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8005098:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800509c:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80050a4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050a8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050aa:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80050ae:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80050b2:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80050b6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80050ba:	9401      	str	r4, [sp, #4]
 80050bc:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050be:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 80050c0:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050c4:	40bc      	lsls	r4, r7
 80050c6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050ca:	4c33      	ldr	r4, [pc, #204]	; (8005198 <HAL_GPIO_Init+0x1bc>)
 80050cc:	42a0      	cmp	r0, r4
 80050ce:	d04e      	beq.n	800516e <HAL_GPIO_Init+0x192>
 80050d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050d4:	42a0      	cmp	r0, r4
 80050d6:	d04c      	beq.n	8005172 <HAL_GPIO_Init+0x196>
 80050d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050dc:	42a0      	cmp	r0, r4
 80050de:	d04a      	beq.n	8005176 <HAL_GPIO_Init+0x19a>
 80050e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050e4:	42a0      	cmp	r0, r4
 80050e6:	d048      	beq.n	800517a <HAL_GPIO_Init+0x19e>
 80050e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d046      	beq.n	800517e <HAL_GPIO_Init+0x1a2>
 80050f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d044      	beq.n	8005182 <HAL_GPIO_Init+0x1a6>
 80050f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d042      	beq.n	8005186 <HAL_GPIO_Init+0x1aa>
 8005100:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005104:	42a0      	cmp	r0, r4
 8005106:	d040      	beq.n	800518a <HAL_GPIO_Init+0x1ae>
 8005108:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800510c:	42a0      	cmp	r0, r4
 800510e:	d03e      	beq.n	800518e <HAL_GPIO_Init+0x1b2>
 8005110:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005114:	42a0      	cmp	r0, r4
 8005116:	bf0c      	ite	eq
 8005118:	2409      	moveq	r4, #9
 800511a:	240a      	movne	r4, #10
 800511c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800511e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005120:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8005124:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8005126:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800512a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800512c:	bf54      	ite	pl
 800512e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005130:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005134:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8005136:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8005138:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800513a:	bf54      	ite	pl
 800513c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800513e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005142:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8005144:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8005146:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8005148:	bf54      	ite	pl
 800514a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800514c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005150:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8005152:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8005154:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005156:	bf54      	ite	pl
 8005158:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800515a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800515e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005160:	3301      	adds	r3, #1
 8005162:	2b10      	cmp	r3, #16
 8005164:	f47f af40 	bne.w	8004fe8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8005168:	b003      	add	sp, #12
 800516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800516e:	2400      	movs	r4, #0
 8005170:	e7d4      	b.n	800511c <HAL_GPIO_Init+0x140>
 8005172:	2401      	movs	r4, #1
 8005174:	e7d2      	b.n	800511c <HAL_GPIO_Init+0x140>
 8005176:	2402      	movs	r4, #2
 8005178:	e7d0      	b.n	800511c <HAL_GPIO_Init+0x140>
 800517a:	2403      	movs	r4, #3
 800517c:	e7ce      	b.n	800511c <HAL_GPIO_Init+0x140>
 800517e:	2404      	movs	r4, #4
 8005180:	e7cc      	b.n	800511c <HAL_GPIO_Init+0x140>
 8005182:	2405      	movs	r4, #5
 8005184:	e7ca      	b.n	800511c <HAL_GPIO_Init+0x140>
 8005186:	2406      	movs	r4, #6
 8005188:	e7c8      	b.n	800511c <HAL_GPIO_Init+0x140>
 800518a:	2407      	movs	r4, #7
 800518c:	e7c6      	b.n	800511c <HAL_GPIO_Init+0x140>
 800518e:	2408      	movs	r4, #8
 8005190:	e7c4      	b.n	800511c <HAL_GPIO_Init+0x140>
 8005192:	bf00      	nop
 8005194:	40013c00 	.word	0x40013c00
 8005198:	40020000 	.word	0x40020000
 800519c:	40023800 	.word	0x40023800

080051a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80051a4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80051a6:	4c49      	ldr	r4, [pc, #292]	; (80052cc <HAL_GPIO_DeInit+0x12c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80051a8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80052d4 <HAL_GPIO_DeInit+0x134>
 80051ac:	f8df a128 	ldr.w	sl, [pc, #296]	; 80052d8 <HAL_GPIO_DeInit+0x138>
 80051b0:	f8df b128 	ldr.w	fp, [pc, #296]	; 80052dc <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 80051b4:	2301      	movs	r3, #1
 80051b6:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80051ba:	ea3e 0501 	bics.w	r5, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80051be:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80051c2:	d16c      	bne.n	800529e <HAL_GPIO_DeInit+0xfe>
      tmp = SYSCFG->EXTICR[position >> 2];
 80051c4:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051c8:	f002 0c03 	and.w	ip, r2, #3
 80051cc:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80051ce:	4b40      	ldr	r3, [pc, #256]	; (80052d0 <HAL_GPIO_DeInit+0x130>)
 80051d0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051d4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80051d8:	4298      	cmp	r0, r3
 80051da:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051de:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 80051e2:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051e6:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80051ea:	d05d      	beq.n	80052a8 <HAL_GPIO_DeInit+0x108>
 80051ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f0:	4298      	cmp	r0, r3
 80051f2:	d05b      	beq.n	80052ac <HAL_GPIO_DeInit+0x10c>
 80051f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f8:	4298      	cmp	r0, r3
 80051fa:	d059      	beq.n	80052b0 <HAL_GPIO_DeInit+0x110>
 80051fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005200:	4298      	cmp	r0, r3
 8005202:	d057      	beq.n	80052b4 <HAL_GPIO_DeInit+0x114>
 8005204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005208:	4298      	cmp	r0, r3
 800520a:	d055      	beq.n	80052b8 <HAL_GPIO_DeInit+0x118>
 800520c:	4548      	cmp	r0, r9
 800520e:	d055      	beq.n	80052bc <HAL_GPIO_DeInit+0x11c>
 8005210:	4550      	cmp	r0, sl
 8005212:	d055      	beq.n	80052c0 <HAL_GPIO_DeInit+0x120>
 8005214:	4558      	cmp	r0, fp
 8005216:	d055      	beq.n	80052c4 <HAL_GPIO_DeInit+0x124>
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	4298      	cmp	r0, r3
 800521e:	d053      	beq.n	80052c8 <HAL_GPIO_DeInit+0x128>
 8005220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005224:	4298      	cmp	r0, r3
 8005226:	bf0c      	ite	eq
 8005228:	2309      	moveq	r3, #9
 800522a:	230a      	movne	r3, #10
 800522c:	fa03 f30c 	lsl.w	r3, r3, ip
 8005230:	4543      	cmp	r3, r8
 8005232:	d113      	bne.n	800525c <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	ea23 0307 	bic.w	r3, r3, r7
 800523a:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	ea23 0307 	bic.w	r3, r3, r7
 8005242:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005244:	68e3      	ldr	r3, [r4, #12]
 8005246:	ea23 0307 	bic.w	r3, r3, r7
 800524a:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800524c:	68a3      	ldr	r3, [r4, #8]
 800524e:	ea23 0307 	bic.w	r3, r3, r7
 8005252:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005254:	68ab      	ldr	r3, [r5, #8]
 8005256:	ea23 0306 	bic.w	r3, r3, r6
 800525a:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800525c:	0056      	lsls	r6, r2, #1
 800525e:	2303      	movs	r3, #3
 8005260:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005262:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005266:	40b3      	lsls	r3, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005268:	270f      	movs	r7, #15
 800526a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800526e:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005272:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005276:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005278:	08d5      	lsrs	r5, r2, #3
 800527a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800527e:	6a2e      	ldr	r6, [r5, #32]
 8005280:	ea26 0607 	bic.w	r6, r6, r7
 8005284:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005286:	68c5      	ldr	r5, [r0, #12]
 8005288:	ea25 0503 	bic.w	r5, r5, r3
 800528c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800528e:	6845      	ldr	r5, [r0, #4]
 8005290:	ea25 050e 	bic.w	r5, r5, lr
 8005294:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005296:	6885      	ldr	r5, [r0, #8]
 8005298:	ea25 0303 	bic.w	r3, r5, r3
 800529c:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800529e:	3201      	adds	r2, #1
 80052a0:	2a10      	cmp	r2, #16
 80052a2:	d187      	bne.n	80051b4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80052a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80052a8:	2300      	movs	r3, #0
 80052aa:	e7bf      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e7bd      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e7bb      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052b4:	2303      	movs	r3, #3
 80052b6:	e7b9      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052b8:	2304      	movs	r3, #4
 80052ba:	e7b7      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052bc:	2305      	movs	r3, #5
 80052be:	e7b5      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052c0:	2306      	movs	r3, #6
 80052c2:	e7b3      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052c4:	2307      	movs	r3, #7
 80052c6:	e7b1      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052c8:	2308      	movs	r3, #8
 80052ca:	e7af      	b.n	800522c <HAL_GPIO_DeInit+0x8c>
 80052cc:	40013c00 	.word	0x40013c00
 80052d0:	40020000 	.word	0x40020000
 80052d4:	40021400 	.word	0x40021400
 80052d8:	40021800 	.word	0x40021800
 80052dc:	40021c00 	.word	0x40021c00

080052e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052e0:	6903      	ldr	r3, [r0, #16]
 80052e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80052e4:	bf14      	ite	ne
 80052e6:	2001      	movne	r0, #1
 80052e8:	2000      	moveq	r0, #0
 80052ea:	4770      	bx	lr

080052ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052ec:	b10a      	cbz	r2, 80052f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052ee:	6181      	str	r1, [r0, #24]
  }
}
 80052f0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052f2:	0409      	lsls	r1, r1, #16
 80052f4:	e7fb      	b.n	80052ee <HAL_GPIO_WritePin+0x2>

080052f6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052f6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052f8:	ea01 0203 	and.w	r2, r1, r3
 80052fc:	ea21 0103 	bic.w	r1, r1, r3
 8005300:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005304:	6181      	str	r1, [r0, #24]
}
 8005306:	4770      	bx	lr

08005308 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005308:	6803      	ldr	r3, [r0, #0]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	0791      	lsls	r1, r2, #30
 800530e:	d501      	bpl.n	8005314 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005310:	2200      	movs	r2, #0
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	07d2      	lsls	r2, r2, #31
 8005318:	d403      	bmi.n	8005322 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	619a      	str	r2, [r3, #24]
  }
}
 8005322:	4770      	bx	lr

08005324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005324:	b530      	push	{r4, r5, lr}
 8005326:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005328:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800532c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800532e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005330:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005336:	4a05      	ldr	r2, [pc, #20]	; (800534c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005338:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800533a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800533e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005342:	ea20 0002 	bic.w	r0, r0, r2
 8005346:	4303      	orrs	r3, r0
 8005348:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800534a:	bd30      	pop	{r4, r5, pc}
 800534c:	03ff63ff 	.word	0x03ff63ff

08005350 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8005350:	6803      	ldr	r3, [r0, #0]
{
 8005352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005356:	699c      	ldr	r4, [r3, #24]
{
 8005358:	4605      	mov	r5, r0
 800535a:	460f      	mov	r7, r1
 800535c:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800535e:	f014 0410 	ands.w	r4, r4, #16
 8005362:	d06f      	beq.n	8005444 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8005364:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005366:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005368:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	0690      	lsls	r0, r2, #26
 8005372:	d461      	bmi.n	8005438 <I2C_IsErrorOccurred+0xe8>
 8005374:	f1b8 0f00 	cmp.w	r8, #0
 8005378:	d035      	beq.n	80053e6 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800537a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800537e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8005380:	682e      	ldr	r6, [r5, #0]
 8005382:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005384:	05d9      	lsls	r1, r3, #23
 8005386:	d505      	bpl.n	8005394 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005388:	f44f 7280 	mov.w	r2, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800538c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8005390:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005392:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005394:	055a      	lsls	r2, r3, #21
 8005396:	d505      	bpl.n	80053a4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005398:	f44f 6280 	mov.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800539c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80053a0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053a2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053a4:	059b      	lsls	r3, r3, #22
 80053a6:	d54f      	bpl.n	8005448 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80053ac:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053b0:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80053b2:	4628      	mov	r0, r5
 80053b4:	f7ff ffa8 	bl	8005308 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80053b8:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80053ba:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80053bc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80053c0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80053c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80053ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80053d0:	4323      	orrs	r3, r4
 80053d2:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053d4:	2320      	movs	r3, #32
 80053d6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	2300      	movs	r3, #0
 80053dc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80053e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80053e4:	e032      	b.n	800544c <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80053e6:	1c7a      	adds	r2, r7, #1
 80053e8:	d0c1      	beq.n	800536e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7ff f887 	bl	80044fc <HAL_GetTick>
 80053ee:	1b80      	subs	r0, r0, r6
 80053f0:	42b8      	cmp	r0, r7
 80053f2:	d801      	bhi.n	80053f8 <I2C_IsErrorOccurred+0xa8>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	d1b9      	bne.n	800536c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80053fc:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005400:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005402:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005404:	0400      	lsls	r0, r0, #16
 8005406:	d50a      	bpl.n	800541e <I2C_IsErrorOccurred+0xce>
 8005408:	0449      	lsls	r1, r1, #17
 800540a:	d408      	bmi.n	800541e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800540c:	2a20      	cmp	r2, #32
 800540e:	d006      	beq.n	800541e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005416:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005418:	f7ff f870 	bl	80044fc <HAL_GetTick>
 800541c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800541e:	682b      	ldr	r3, [r5, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	069b      	lsls	r3, r3, #26
 8005424:	d4a2      	bmi.n	800536c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005426:	f7ff f869 	bl	80044fc <HAL_GetTick>
 800542a:	1b80      	subs	r0, r0, r6
 800542c:	2819      	cmp	r0, #25
 800542e:	d9f6      	bls.n	800541e <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005430:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8005432:	f04f 0801 	mov.w	r8, #1
 8005436:	e799      	b.n	800536c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8005438:	f1b8 0f00 	cmp.w	r8, #0
 800543c:	d19d      	bne.n	800537a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800543e:	2220      	movs	r2, #32
 8005440:	61da      	str	r2, [r3, #28]
 8005442:	e79a      	b.n	800537a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	4620      	mov	r0, r4
 8005446:	e79b      	b.n	8005380 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8005448:	2800      	cmp	r0, #0
 800544a:	d1b2      	bne.n	80053b2 <I2C_IsErrorOccurred+0x62>
}
 800544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005450 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	4604      	mov	r4, r0
 8005454:	460d      	mov	r5, r1
 8005456:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	079b      	lsls	r3, r3, #30
 800545e:	d501      	bpl.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005460:	2000      	movs	r0, #0
}
 8005462:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005464:	4632      	mov	r2, r6
 8005466:	4629      	mov	r1, r5
 8005468:	4620      	mov	r0, r4
 800546a:	f7ff ff71 	bl	8005350 <I2C_IsErrorOccurred>
 800546e:	b9a0      	cbnz	r0, 800549a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005470:	1c6a      	adds	r2, r5, #1
 8005472:	d0f1      	beq.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7ff f842 	bl	80044fc <HAL_GetTick>
 8005478:	1b80      	subs	r0, r0, r6
 800547a:	42a8      	cmp	r0, r5
 800547c:	d801      	bhi.n	8005482 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800547e:	2d00      	cmp	r5, #0
 8005480:	d1ea      	bne.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005482:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005484:	f043 0320 	orr.w	r3, r3, #32
 8005488:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800548a:	2320      	movs	r3, #32
 800548c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	2300      	movs	r3, #0
 8005492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
 800549c:	e7e1      	b.n	8005462 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800549e <I2C_WaitOnFlagUntilTimeout>:
{
 800549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	9f06      	ldr	r7, [sp, #24]
 80054a4:	4604      	mov	r4, r0
 80054a6:	4688      	mov	r8, r1
 80054a8:	4616      	mov	r6, r2
 80054aa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	6993      	ldr	r3, [r2, #24]
 80054b0:	ea38 0303 	bics.w	r3, r8, r3
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	42b3      	cmp	r3, r6
 80054bc:	d001      	beq.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80054be:	2000      	movs	r0, #0
 80054c0:	e015      	b.n	80054ee <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80054c2:	1c6b      	adds	r3, r5, #1
 80054c4:	d0f3      	beq.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7ff f819 	bl	80044fc <HAL_GetTick>
 80054ca:	1bc0      	subs	r0, r0, r7
 80054cc:	42a8      	cmp	r0, r5
 80054ce:	d801      	bhi.n	80054d4 <I2C_WaitOnFlagUntilTimeout+0x36>
 80054d0:	2d00      	cmp	r5, #0
 80054d2:	d1eb      	bne.n	80054ac <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80054d6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	f043 0320 	orr.w	r3, r3, #32
 80054dc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054de:	2320      	movs	r3, #32
 80054e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80054ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80054f2:	b570      	push	{r4, r5, r6, lr}
 80054f4:	4604      	mov	r4, r0
 80054f6:	460d      	mov	r5, r1
 80054f8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	069b      	lsls	r3, r3, #26
 8005500:	d501      	bpl.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005502:	2000      	movs	r0, #0
}
 8005504:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005506:	4632      	mov	r2, r6
 8005508:	4629      	mov	r1, r5
 800550a:	4620      	mov	r0, r4
 800550c:	f7ff ff20 	bl	8005350 <I2C_IsErrorOccurred>
 8005510:	b990      	cbnz	r0, 8005538 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fe fff3 	bl	80044fc <HAL_GetTick>
 8005516:	1b80      	subs	r0, r0, r6
 8005518:	42a8      	cmp	r0, r5
 800551a:	d801      	bhi.n	8005520 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800551c:	2d00      	cmp	r5, #0
 800551e:	d1ec      	bne.n	80054fa <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005522:	f043 0320 	orr.w	r3, r3, #32
 8005526:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005528:	2320      	movs	r3, #32
 800552a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800552e:	2300      	movs	r3, #0
 8005530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005534:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005538:	2001      	movs	r0, #1
 800553a:	e7e3      	b.n	8005504 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800553c <HAL_I2C_Init>:
{
 800553c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800553e:	4604      	mov	r4, r0
 8005540:	2800      	cmp	r0, #0
 8005542:	d04a      	beq.n	80055da <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005544:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005548:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800554c:	b91b      	cbnz	r3, 8005556 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800554e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005552:	f7fc f87b 	bl	800164c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005556:	2324      	movs	r3, #36	; 0x24
 8005558:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005566:	6862      	ldr	r2, [r4, #4]
 8005568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800556c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005574:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005576:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800557a:	2901      	cmp	r1, #1
 800557c:	d124      	bne.n	80055c8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800557e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005582:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005584:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005586:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005588:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800558c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005590:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005598:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800559a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800559e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055a0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055a6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055a8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ba:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80055c6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055cc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055ce:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055d0:	d1d8      	bne.n	8005584 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d6:	605a      	str	r2, [r3, #4]
 80055d8:	e7d4      	b.n	8005584 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80055da:	2001      	movs	r0, #1
 80055dc:	e7f3      	b.n	80055c6 <HAL_I2C_Init+0x8a>

080055de <HAL_I2C_DeInit>:
{
 80055de:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80055e0:	4604      	mov	r4, r0
 80055e2:	b198      	cbz	r0, 800560c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80055e4:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e6:	2324      	movs	r3, #36	; 0x24
 80055e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80055ec:	6813      	ldr	r3, [r2, #0]
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80055f4:	f7fc f86e 	bl	80016d4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f8:	2000      	movs	r0, #0
 80055fa:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80055fc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005600:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005604:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005606:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800560a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800560c:	2001      	movs	r0, #1
 800560e:	e7fc      	b.n	800560a <HAL_I2C_DeInit+0x2c>

08005610 <HAL_I2C_Mem_Write>:
{
 8005610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005616:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800561a:	4604      	mov	r4, r0
 800561c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800561e:	2b20      	cmp	r3, #32
{
 8005620:	4616      	mov	r6, r2
 8005622:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005626:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800562a:	f040 80c6 	bne.w	80057ba <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800562e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005630:	b113      	cbz	r3, 8005638 <HAL_I2C_Mem_Write+0x28>
 8005632:	f1ba 0f00 	cmp.w	sl, #0
 8005636:	d106      	bne.n	8005646 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800563c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800563e:	2001      	movs	r0, #1
}
 8005640:	b003      	add	sp, #12
 8005642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005646:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800564a:	2b01      	cmp	r3, #1
 800564c:	f000 80b5 	beq.w	80057ba <HAL_I2C_Mem_Write+0x1aa>
 8005650:	f04f 0b01 	mov.w	fp, #1
 8005654:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005658:	f7fe ff50 	bl	80044fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800565c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800565e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005660:	9000      	str	r0, [sp, #0]
 8005662:	465a      	mov	r2, fp
 8005664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005668:	4620      	mov	r0, r4
 800566a:	f7ff ff18 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 800566e:	2800      	cmp	r0, #0
 8005670:	d1e5      	bne.n	800563e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005672:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005674:	fa5f f289 	uxtb.w	r2, r9
 8005678:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800567a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800567c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005688:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800568a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800568c:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800568e:	4b4c      	ldr	r3, [pc, #304]	; (80057c0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8005690:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800569a:	f7ff fe43 	bl	8005324 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	462a      	mov	r2, r5
 80056a0:	4641      	mov	r1, r8
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7ff fed4 	bl	8005450 <I2C_WaitOnTXISFlagUntilTimeout>
 80056a8:	bb18      	cbnz	r0, 80056f2 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056aa:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ae:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056b0:	d115      	bne.n	80056de <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b2:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056b4:	2200      	movs	r2, #0
 80056b6:	2180      	movs	r1, #128	; 0x80
 80056b8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ba:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056bc:	4643      	mov	r3, r8
 80056be:	9500      	str	r5, [sp, #0]
 80056c0:	f7ff feed 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 80056c4:	b9a8      	cbnz	r0, 80056f2 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2bff      	cmp	r3, #255	; 0xff
 80056cc:	d815      	bhi.n	80056fa <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80056ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056d4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80056d6:	b292      	uxth	r2, r2
 80056d8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	e012      	b.n	8005704 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056de:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e0:	4641      	mov	r1, r8
 80056e2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e6:	462a      	mov	r2, r5
 80056e8:	f7ff feb2 	bl	8005450 <I2C_WaitOnTXISFlagUntilTimeout>
 80056ec:	b908      	cbnz	r0, 80056f2 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	e7df      	b.n	80056b2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80056f2:	2300      	movs	r3, #0
 80056f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80056f8:	e7a1      	b.n	800563e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056fa:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005700:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005702:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005704:	4639      	mov	r1, r7
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff fe0c 	bl	8005324 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800570c:	462a      	mov	r2, r5
 800570e:	4641      	mov	r1, r8
 8005710:	4620      	mov	r0, r4
 8005712:	f7ff fe9d 	bl	8005450 <I2C_WaitOnTXISFlagUntilTimeout>
 8005716:	2800      	cmp	r0, #0
 8005718:	d191      	bne.n	800563e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800571a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005722:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005724:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005726:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005728:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800572a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800572c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800572e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005730:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005732:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005734:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005736:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005738:	b29b      	uxth	r3, r3
 800573a:	b1b3      	cbz	r3, 800576a <HAL_I2C_Mem_Write+0x15a>
 800573c:	b9aa      	cbnz	r2, 800576a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800573e:	4643      	mov	r3, r8
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	4620      	mov	r0, r4
 8005744:	9500      	str	r5, [sp, #0]
 8005746:	f7ff feaa 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 800574a:	2800      	cmp	r0, #0
 800574c:	f47f af77 	bne.w	800563e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005750:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	2bff      	cmp	r3, #255	; 0xff
 8005756:	d928      	bls.n	80057aa <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005758:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800575a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800575e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005760:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005762:	4639      	mov	r1, r7
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff fddd 	bl	8005324 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800576a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1cc      	bne.n	800570c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005772:	462a      	mov	r2, r5
 8005774:	4641      	mov	r1, r8
 8005776:	4620      	mov	r0, r4
 8005778:	f7ff febb 	bl	80054f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800577c:	2800      	cmp	r0, #0
 800577e:	f47f af5e 	bne.w	800563e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	2120      	movs	r1, #32
 8005786:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800578e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005792:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80057a0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80057a8:	e74a      	b.n	8005640 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80057aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80057b2:	b292      	uxth	r2, r2
 80057b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	e7d3      	b.n	8005762 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80057ba:	2002      	movs	r0, #2
 80057bc:	e740      	b.n	8005640 <HAL_I2C_Mem_Write+0x30>
 80057be:	bf00      	nop
 80057c0:	80002000 	.word	0x80002000

080057c4 <HAL_I2C_Mem_Read>:
{
 80057c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80057ce:	4604      	mov	r4, r0
 80057d0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d2:	2b20      	cmp	r3, #32
{
 80057d4:	4616      	mov	r6, r2
 80057d6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80057da:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057de:	f040 80c9 	bne.w	8005974 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80057e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057e4:	b113      	cbz	r3, 80057ec <HAL_I2C_Mem_Read+0x28>
 80057e6:	f1ba 0f00 	cmp.w	sl, #0
 80057ea:	d106      	bne.n	80057fa <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80057f2:	2001      	movs	r0, #1
}
 80057f4:	b003      	add	sp, #12
 80057f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80057fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057fe:	2b01      	cmp	r3, #1
 8005800:	f000 80b8 	beq.w	8005974 <HAL_I2C_Mem_Read+0x1b0>
 8005804:	f04f 0b01 	mov.w	fp, #1
 8005808:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800580c:	f7fe fe76 	bl	80044fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005810:	2319      	movs	r3, #25
 8005812:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005814:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005816:	465a      	mov	r2, fp
 8005818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff fe3e 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2800      	cmp	r0, #0
 8005826:	d1e4      	bne.n	80057f2 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005828:	2222      	movs	r2, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800582a:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800582c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800582e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005832:	2240      	movs	r2, #64	; 0x40
 8005834:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800583a:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800583c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800583e:	6262      	str	r2, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005840:	4a4d      	ldr	r2, [pc, #308]	; (8005978 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8005842:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005846:	9200      	str	r2, [sp, #0]
 8005848:	fa5f f289 	uxtb.w	r2, r9
 800584c:	f7ff fd6a 	bl	8005324 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005850:	462a      	mov	r2, r5
 8005852:	4641      	mov	r1, r8
 8005854:	4620      	mov	r0, r4
 8005856:	f7ff fdfb 	bl	8005450 <I2C_WaitOnTXISFlagUntilTimeout>
 800585a:	bb20      	cbnz	r0, 80058a6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800585c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005860:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005862:	d116      	bne.n	8005892 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005864:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005866:	2200      	movs	r2, #0
 8005868:	2140      	movs	r1, #64	; 0x40
 800586a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800586c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800586e:	4643      	mov	r3, r8
 8005870:	9500      	str	r5, [sp, #0]
 8005872:	f7ff fe14 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 8005876:	b9b0      	cbnz	r0, 80058a6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2bff      	cmp	r3, #255	; 0xff
 800587e:	4b3f      	ldr	r3, [pc, #252]	; (800597c <HAL_I2C_Mem_Read+0x1b8>)
 8005880:	d815      	bhi.n	80058ae <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8005882:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800588a:	b292      	uxth	r2, r2
 800588c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	e012      	b.n	80058b8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005892:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005894:	4641      	mov	r1, r8
 8005896:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005898:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589a:	462a      	mov	r2, r5
 800589c:	f7ff fdd8 	bl	8005450 <I2C_WaitOnTXISFlagUntilTimeout>
 80058a0:	b908      	cbnz	r0, 80058a6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	e7de      	b.n	8005864 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80058a6:	2300      	movs	r3, #0
 80058a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80058ac:	e7a1      	b.n	80057f2 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ae:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058b6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058b8:	4639      	mov	r1, r7
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff fd32 	bl	8005324 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058c0:	4643      	mov	r3, r8
 80058c2:	2200      	movs	r2, #0
 80058c4:	2104      	movs	r1, #4
 80058c6:	4620      	mov	r0, r4
 80058c8:	9500      	str	r5, [sp, #0]
 80058ca:	f7ff fde8 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d18f      	bne.n	80057f2 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80058da:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80058dc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058de:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80058e0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80058e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058e6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80058e8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80058ea:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	b1b3      	cbz	r3, 8005924 <HAL_I2C_Mem_Read+0x160>
 80058f6:	b9aa      	cbnz	r2, 8005924 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058f8:	4643      	mov	r3, r8
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	4620      	mov	r0, r4
 80058fe:	9500      	str	r5, [sp, #0]
 8005900:	f7ff fdcd 	bl	800549e <I2C_WaitOnFlagUntilTimeout>
 8005904:	2800      	cmp	r0, #0
 8005906:	f47f af74 	bne.w	80057f2 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2bff      	cmp	r3, #255	; 0xff
 8005910:	d928      	bls.n	8005964 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005912:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005918:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800591a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800591c:	4639      	mov	r1, r7
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff fd00 	bl	8005324 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005924:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1c9      	bne.n	80058c0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592c:	462a      	mov	r2, r5
 800592e:	4641      	mov	r1, r8
 8005930:	4620      	mov	r0, r4
 8005932:	f7ff fdde 	bl	80054f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005936:	2800      	cmp	r0, #0
 8005938:	f47f af5b 	bne.w	80057f2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	2120      	movs	r1, #32
 8005940:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005948:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800594c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005956:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800595a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800595e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005962:	e747      	b.n	80057f4 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8005964:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800596a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800596c:	b292      	uxth	r2, r2
 800596e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	e7d3      	b.n	800591c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8005974:	2002      	movs	r0, #2
 8005976:	e73d      	b.n	80057f4 <HAL_I2C_Mem_Read+0x30>
 8005978:	80002000 	.word	0x80002000
 800597c:	80002400 	.word	0x80002400

08005980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005980:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005986:	2b20      	cmp	r3, #32
 8005988:	b2dc      	uxtb	r4, r3
 800598a:	d11d      	bne.n	80059c8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005990:	2b01      	cmp	r3, #1
 8005992:	d019      	beq.n	80059c8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005994:	2324      	movs	r3, #36	; 0x24
 8005996:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800599a:	6803      	ldr	r3, [r0, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4311      	orrs	r1, r2
 80059b0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ba:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80059c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80059c4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80059c6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80059c8:	2002      	movs	r0, #2
 80059ca:	e7fc      	b.n	80059c6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080059cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059cc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	b2dc      	uxtb	r4, r3
 80059d6:	d11c      	bne.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d018      	beq.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e0:	2324      	movs	r3, #36	; 0x24
 80059e2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059e6:	6803      	ldr	r3, [r0, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059f0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059f2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059f6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059fa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005a06:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005a0a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005a0e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005a10:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005a12:	2002      	movs	r0, #2
 8005a14:	e7fc      	b.n	8005a10 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08005a18 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a18:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a1a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a1c:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a20:	3284      	adds	r2, #132	; 0x84
 8005a22:	1883      	adds	r3, r0, r2
{
 8005a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a28:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a2a:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a2e:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005a30:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a34:	684c      	ldr	r4, [r1, #4]
 8005a36:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a3a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005a3e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a42:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a44:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a46:	68c5      	ldr	r5, [r0, #12]
 8005a48:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8005a4c:	443d      	add	r5, r7
 8005a4e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a52:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a54:	68c6      	ldr	r6, [r0, #12]
 8005a56:	68cd      	ldr	r5, [r1, #12]
 8005a58:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005a5c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a5e:	689d      	ldr	r5, [r3, #8]
 8005a60:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005a64:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a66:	688d      	ldr	r5, [r1, #8]
 8005a68:	68c7      	ldr	r7, [r0, #12]
 8005a6a:	3501      	adds	r5, #1
 8005a6c:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005a70:	443d      	add	r5, r7
 8005a72:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a76:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a78:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a7a:	691d      	ldr	r5, [r3, #16]
 8005a7c:	f025 0507 	bic.w	r5, r5, #7
 8005a80:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a82:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005a84:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a86:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a8a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005a8e:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a92:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005a96:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005a9a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005a9e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005aa2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005aa4:	695d      	ldr	r5, [r3, #20]
 8005aa6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005aaa:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005aac:	694d      	ldr	r5, [r1, #20]
 8005aae:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ab0:	69dd      	ldr	r5, [r3, #28]
 8005ab2:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8005ab6:	f025 0507 	bic.w	r5, r5, #7
 8005aba:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005abc:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005ac0:	433d      	orrs	r5, r7
 8005ac2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ac4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ac6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ac8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005acc:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ace:	b1fe      	cbz	r6, 8005b10 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ad0:	3e01      	subs	r6, #1
 8005ad2:	2e06      	cmp	r6, #6
 8005ad4:	d81e      	bhi.n	8005b14 <LTDC_SetConfig+0xfc>
 8005ad6:	4d10      	ldr	r5, [pc, #64]	; (8005b18 <LTDC_SetConfig+0x100>)
 8005ad8:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ada:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005adc:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ae0:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ae4:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ae6:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ae8:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005aea:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005aec:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005aee:	436e      	muls	r6, r5
 8005af0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8005af4:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005af6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005af8:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8005afc:	f024 0407 	bic.w	r4, r4, #7
 8005b00:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005b02:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005b04:	5883      	ldr	r3, [r0, r2]
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	5083      	str	r3, [r0, r2]
}
 8005b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005b10:	2504      	movs	r5, #4
 8005b12:	e7e2      	b.n	8005ada <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b14:	2501      	movs	r5, #1
 8005b16:	e7e0      	b.n	8005ada <LTDC_SetConfig+0xc2>
 8005b18:	0802d6a4 	.word	0x0802d6a4

08005b1c <HAL_LTDC_Init>:
{
 8005b1c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005b1e:	4604      	mov	r4, r0
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d063      	beq.n	8005bec <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b24:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005b28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b2c:	b91b      	cbnz	r3, 8005b36 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005b2e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005b32:	f7fb fdeb 	bl	800170c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b36:	2302      	movs	r3, #2
 8005b38:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b44:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b46:	6999      	ldr	r1, [r3, #24]
 8005b48:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005b4c:	4302      	orrs	r2, r0
 8005b4e:	68e0      	ldr	r0, [r4, #12]
 8005b50:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b52:	6920      	ldr	r0, [r4, #16]
 8005b54:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b56:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b58:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b5a:	4925      	ldr	r1, [pc, #148]	; (8005bf0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b5c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	400a      	ands	r2, r1
 8005b62:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b6a:	69a0      	ldr	r0, [r4, #24]
 8005b6c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b6e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b70:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	400a      	ands	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b7e:	6a20      	ldr	r0, [r4, #32]
 8005b80:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b82:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b84:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	400a      	ands	r2, r1
 8005b8a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b94:	4302      	orrs	r2, r0
 8005b96:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b9e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005ba6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005bae:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bb2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005bb6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bbc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005bbe:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005bc2:	432a      	orrs	r2, r5
 8005bc4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bc8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd2:	f042 0206 	orr.w	r2, r2, #6
 8005bd6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005be0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005be2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005be6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005bec:	2001      	movs	r0, #1
 8005bee:	e7fc      	b.n	8005bea <HAL_LTDC_Init+0xce>
 8005bf0:	f000f800 	.word	0xf000f800

08005bf4 <HAL_LTDC_ErrorCallback>:
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_LTDC_ReloadEventCallback>:
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bf8:	6803      	ldr	r3, [r0, #0]
{
 8005bfa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bfc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8005bfe:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c00:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c02:	0772      	lsls	r2, r6, #29
 8005c04:	d514      	bpl.n	8005c30 <HAL_LTDC_IRQHandler+0x38>
 8005c06:	0769      	lsls	r1, r5, #29
 8005c08:	d512      	bpl.n	8005c30 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0c:	f022 0204 	bic.w	r2, r2, #4
 8005c10:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c12:	2204      	movs	r2, #4
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c16:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005c22:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c24:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005c28:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005c2c:	f7ff ffe2 	bl	8005bf4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c30:	07b2      	lsls	r2, r6, #30
 8005c32:	d516      	bpl.n	8005c62 <HAL_LTDC_IRQHandler+0x6a>
 8005c34:	07ab      	lsls	r3, r5, #30
 8005c36:	d514      	bpl.n	8005c62 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c38:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8005c3a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3e:	f022 0202 	bic.w	r2, r2, #2
 8005c42:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c44:	2202      	movs	r2, #2
 8005c46:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c48:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c52:	2304      	movs	r3, #4
 8005c54:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005c5e:	f7ff ffc9 	bl	8005bf4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c62:	07f0      	lsls	r0, r6, #31
 8005c64:	d510      	bpl.n	8005c88 <HAL_LTDC_IRQHandler+0x90>
 8005c66:	07e9      	lsls	r1, r5, #31
 8005c68:	d50e      	bpl.n	8005c88 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c6a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005c6c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005c76:	2201      	movs	r2, #1
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8005c7a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c7c:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005c80:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005c84:	f7fd fb88 	bl	8003398 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005c88:	0732      	lsls	r2, r6, #28
 8005c8a:	d511      	bpl.n	8005cb0 <HAL_LTDC_IRQHandler+0xb8>
 8005c8c:	072b      	lsls	r3, r5, #28
 8005c8e:	d50f      	bpl.n	8005cb0 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005c90:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005c92:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c96:	f022 0208 	bic.w	r2, r2, #8
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005cac:	f7ff ffa3 	bl	8005bf6 <HAL_LTDC_ReloadEventCallback>
}
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}

08005cb2 <HAL_LTDC_ConfigLayer>:
{
 8005cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005cb6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005cba:	4606      	mov	r6, r0
 8005cbc:	460f      	mov	r7, r1
 8005cbe:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	f04f 0002 	mov.w	r0, #2
 8005cc6:	d01f      	beq.n	8005d08 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cc8:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005cca:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cce:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cd0:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cd4:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005cd8:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cdc:	3438      	adds	r4, #56	; 0x38
 8005cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cea:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005cec:	4630      	mov	r0, r6
 8005cee:	4662      	mov	r2, ip
 8005cf0:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cf2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005cf4:	f7ff fe90 	bl	8005a18 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005cf8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005cfa:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005cfc:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d00:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005d04:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d0c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005d0c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f04f 0302 	mov.w	r3, #2
 8005d16:	d012      	beq.n	8005d3e <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d18:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d1c:	6803      	ldr	r3, [r0, #0]
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005d26:	4a07      	ldr	r2, [pc, #28]	; (8005d44 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005d28:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8005d3e:	4618      	mov	r0, r3
}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40016800 	.word	0x40016800

08005d48 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d48:	4b19      	ldr	r3, [pc, #100]	; (8005db0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d4e:	4c19      	ldr	r4, [pc, #100]	; (8005db4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d66:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d68:	f7fe fbc8 	bl	80044fc <HAL_GetTick>
 8005d6c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	03da      	lsls	r2, r3, #15
 8005d72:	d50c      	bpl.n	8005d8e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d74:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d76:	4d0f      	ldr	r5, [pc, #60]	; (8005db4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d7c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005d7e:	f7fe fbbd 	bl	80044fc <HAL_GetTick>
 8005d82:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d84:	686b      	ldr	r3, [r5, #4]
 8005d86:	039b      	lsls	r3, r3, #14
 8005d88:	d50a      	bpl.n	8005da0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e006      	b.n	8005d9c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d8e:	f7fe fbb5 	bl	80044fc <HAL_GetTick>
 8005d92:	1b40      	subs	r0, r0, r5
 8005d94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005d98:	d9e9      	bls.n	8005d6e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005d9a:	2003      	movs	r0, #3
}
 8005d9c:	b003      	add	sp, #12
 8005d9e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005da0:	f7fe fbac 	bl	80044fc <HAL_GetTick>
 8005da4:	1b00      	subs	r0, r0, r4
 8005da6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005daa:	d9eb      	bls.n	8005d84 <HAL_PWREx_EnableOverDrive+0x3c>
 8005dac:	e7f5      	b.n	8005d9a <HAL_PWREx_EnableOverDrive+0x52>
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800
 8005db4:	40007000 	.word	0x40007000

08005db8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005dbc:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005dbe:	b136      	cbz	r6, 8005dce <QSPI_Config+0x16>
 8005dc0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005dc4:	d003      	beq.n	8005dce <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005dc6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005dc8:	6804      	ldr	r4, [r0, #0]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005dce:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005dd2:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005dd6:	f1ba 0f00 	cmp.w	sl, #0
 8005dda:	d04c      	beq.n	8005e76 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ddc:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005dde:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005de0:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8005de4:	ea4a 0406 	orr.w	r4, sl, r6
 8005de8:	680b      	ldr	r3, [r1, #0]
 8005dea:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 8005dee:	ea44 0a02 	orr.w	sl, r4, r2
 8005df2:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005df6:	f1be 0f00 	cmp.w	lr, #0
 8005dfa:	d024      	beq.n	8005e46 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005dfc:	688e      	ldr	r6, [r1, #8]
 8005dfe:	ea4a 040e 	orr.w	r4, sl, lr
 8005e02:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e04:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005e06:	b19f      	cbz	r7, 8005e30 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e08:	433b      	orrs	r3, r7
 8005e0a:	4303      	orrs	r3, r0
 8005e0c:	68c8      	ldr	r0, [r1, #12]
 8005e0e:	ea43 0309 	orr.w	r3, r3, r9
 8005e12:	ea43 0308 	orr.w	r3, r3, r8
 8005e16:	4333      	orrs	r3, r6
 8005e18:	4303      	orrs	r3, r0
 8005e1a:	ea43 030c 	orr.w	r3, r3, ip
 8005e1e:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005e20:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e24:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005e26:	d001      	beq.n	8005e2c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005e28:	684b      	ldr	r3, [r1, #4]
 8005e2a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e30:	4303      	orrs	r3, r0
 8005e32:	ea43 0309 	orr.w	r3, r3, r9
 8005e36:	ea43 0308 	orr.w	r3, r3, r8
 8005e3a:	4333      	orrs	r3, r6
 8005e3c:	ea43 030c 	orr.w	r3, r3, ip
 8005e40:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e42:	616b      	str	r3, [r5, #20]
 8005e44:	e7f2      	b.n	8005e2c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005e46:	b167      	cbz	r7, 8005e62 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e48:	433b      	orrs	r3, r7
 8005e4a:	4303      	orrs	r3, r0
 8005e4c:	68c8      	ldr	r0, [r1, #12]
 8005e4e:	ea43 0309 	orr.w	r3, r3, r9
 8005e52:	ea43 0308 	orr.w	r3, r3, r8
 8005e56:	4303      	orrs	r3, r0
 8005e58:	ea43 030c 	orr.w	r3, r3, ip
 8005e5c:	ea43 030a 	orr.w	r3, r3, sl
 8005e60:	e7de      	b.n	8005e20 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e62:	4303      	orrs	r3, r0
 8005e64:	ea43 0309 	orr.w	r3, r3, r9
 8005e68:	ea43 0408 	orr.w	r4, r3, r8
 8005e6c:	ea44 030c 	orr.w	r3, r4, ip
 8005e70:	ea43 030a 	orr.w	r3, r3, sl
 8005e74:	e7e5      	b.n	8005e42 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005e76:	f1be 0f00 	cmp.w	lr, #0
 8005e7a:	d02c      	beq.n	8005ed6 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005e7c:	ea46 050e 	orr.w	r5, r6, lr
 8005e80:	688b      	ldr	r3, [r1, #8]
 8005e82:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e84:	694e      	ldr	r6, [r1, #20]
 8005e86:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005e88:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e8a:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005e8e:	04b6      	lsls	r6, r6, #18
 8005e90:	690b      	ldr	r3, [r1, #16]
 8005e92:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005e96:	b1a7      	cbz	r7, 8005ec2 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e98:	433b      	orrs	r3, r7
 8005e9a:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005e9c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ea0:	ea43 0308 	orr.w	r3, r3, r8
 8005ea4:	ea43 030e 	orr.w	r3, r3, lr
 8005ea8:	ea43 030c 	orr.w	r3, r3, ip
 8005eac:	ea43 0300 	orr.w	r3, r3, r0
 8005eb0:	ea43 0306 	orr.w	r3, r3, r6
 8005eb4:	ea43 0305 	orr.w	r3, r3, r5
 8005eb8:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005eba:	d0b7      	beq.n	8005e2c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005ebc:	684b      	ldr	r3, [r1, #4]
 8005ebe:	61a3      	str	r3, [r4, #24]
 8005ec0:	e7b4      	b.n	8005e2c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ec2:	ea43 0308 	orr.w	r3, r3, r8
 8005ec6:	ea43 030e 	orr.w	r3, r3, lr
 8005eca:	ea43 030c 	orr.w	r3, r3, ip
 8005ece:	4333      	orrs	r3, r6
 8005ed0:	432b      	orrs	r3, r5
 8005ed2:	6163      	str	r3, [r4, #20]
 8005ed4:	e7aa      	b.n	8005e2c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005ed6:	b1d7      	cbz	r7, 8005f0e <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ed8:	ea46 0307 	orr.w	r3, r6, r7
 8005edc:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005ede:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005ee0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ee4:	ea43 0302 	orr.w	r3, r3, r2
 8005ee8:	ea43 0304 	orr.w	r3, r3, r4
 8005eec:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005eee:	ea43 0304 	orr.w	r3, r3, r4
 8005ef2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005ef4:	ea43 0304 	orr.w	r3, r3, r4
 8005ef8:	68cc      	ldr	r4, [r1, #12]
 8005efa:	ea43 0304 	orr.w	r3, r3, r4
 8005efe:	694c      	ldr	r4, [r1, #20]
 8005f00:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005f04:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005f06:	d091      	beq.n	8005e2c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005f08:	684b      	ldr	r3, [r1, #4]
 8005f0a:	6183      	str	r3, [r0, #24]
 8005f0c:	e78e      	b.n	8005e2c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	d08c      	beq.n	8005e2c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f12:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005f14:	6800      	ldr	r0, [r0, #0]
 8005f16:	4333      	orrs	r3, r6
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005f20:	4313      	orrs	r3, r2
 8005f22:	694a      	ldr	r2, [r1, #20]
 8005f24:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8005f28:	6143      	str	r3, [r0, #20]
}
 8005f2a:	e77f      	b.n	8005e2c <QSPI_Config+0x74>

08005f2c <QSPI_WaitFlagStateUntilTimeout>:
{
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005f34:	4604      	mov	r4, r0
 8005f36:	460e      	mov	r6, r1
 8005f38:	4615      	mov	r5, r2
 8005f3a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	6893      	ldr	r3, [r2, #8]
 8005f40:	4233      	tst	r3, r6
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	d101      	bne.n	8005f50 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e012      	b.n	8005f76 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005f50:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f54:	d0f3      	beq.n	8005f3e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f56:	f7fe fad1 	bl	80044fc <HAL_GetTick>
 8005f5a:	1bc0      	subs	r0, r0, r7
 8005f5c:	4540      	cmp	r0, r8
 8005f5e:	d802      	bhi.n	8005f66 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005f60:	f1b8 0f00 	cmp.w	r8, #0
 8005f64:	d1ea      	bne.n	8005f3c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005f66:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005f68:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005f6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005f6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005f7c <HAL_QSPI_Init>:
{
 8005f7c:	b530      	push	{r4, r5, lr}
 8005f7e:	4604      	mov	r4, r0
 8005f80:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005f82:	f7fe fabb 	bl	80044fc <HAL_GetTick>
 8005f86:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005f88:	2c00      	cmp	r4, #0
 8005f8a:	d047      	beq.n	800601c <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005f8c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005f90:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005f94:	b94a      	cbnz	r2, 8005faa <HAL_QSPI_Init+0x2e>
 8005f96:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005f98:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005f9a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8005f9e:	f7fb fc63 	bl	8001868 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	68a1      	ldr	r1, [r4, #8]
 8005fae:	6802      	ldr	r2, [r0, #0]
 8005fb0:	3901      	subs	r1, #1
 8005fb2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005fb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005fba:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005fbc:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005fc2:	9200      	str	r2, [sp, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f7ff ffb1 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005fca:	bb10      	cbnz	r0, 8006012 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	69e5      	ldr	r5, [r4, #28]
 8005fd0:	68e3      	ldr	r3, [r4, #12]
 8005fd2:	6811      	ldr	r1, [r2, #0]
 8005fd4:	432b      	orrs	r3, r5
 8005fd6:	6a25      	ldr	r5, [r4, #32]
 8005fd8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005fdc:	432b      	orrs	r3, r5
 8005fde:	6865      	ldr	r5, [r4, #4]
 8005fe0:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005fe4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005fec:	6855      	ldr	r5, [r2, #4]
 8005fee:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	6921      	ldr	r1, [r4, #16]
 8005ff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005ffa:	4909      	ldr	r1, [pc, #36]	; (8006020 <HAL_QSPI_Init+0xa4>)
 8005ffc:	4029      	ands	r1, r5
 8005ffe:	430b      	orrs	r3, r1
 8006000:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8006002:	6813      	ldr	r3, [r2, #0]
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800600a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800600c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800600e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006012:	2300      	movs	r3, #0
 8006014:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006018:	b005      	add	sp, #20
 800601a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800601c:	2001      	movs	r0, #1
 800601e:	e7fb      	b.n	8006018 <HAL_QSPI_Init+0x9c>
 8006020:	ffe0f8fe 	.word	0xffe0f8fe

08006024 <HAL_QSPI_DeInit>:
{
 8006024:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8006026:	4604      	mov	r4, r0
 8006028:	b168      	cbz	r0, 8006046 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 800602a:	6802      	ldr	r2, [r0, #0]
 800602c:	6813      	ldr	r3, [r2, #0]
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8006034:	f7fb fc86 	bl	8001944 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006038:	2000      	movs	r0, #0
 800603a:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800603c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006040:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006044:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006046:	2001      	movs	r0, #1
 8006048:	e7fc      	b.n	8006044 <HAL_QSPI_DeInit+0x20>

0800604a <HAL_QSPI_Command>:
{
 800604a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	b085      	sub	sp, #20
 8006052:	4617      	mov	r7, r2
 8006054:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8006056:	f7fe fa51 	bl	80044fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800605a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800605e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006060:	2a01      	cmp	r2, #1
 8006062:	d033      	beq.n	80060cc <HAL_QSPI_Command+0x82>
 8006064:	2201      	movs	r2, #1
 8006066:	2602      	movs	r6, #2
 8006068:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800606c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006070:	2a01      	cmp	r2, #1
 8006072:	fa5f f882 	uxtb.w	r8, r2
 8006076:	d127      	bne.n	80060c8 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006078:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800607a:	9003      	str	r0, [sp, #12]
 800607c:	2120      	movs	r1, #32
 800607e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006080:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006082:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006084:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006088:	f7ff ff50 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800608c:	4605      	mov	r5, r0
 800608e:	b9a0      	cbnz	r0, 80060ba <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006090:	4602      	mov	r2, r0
 8006092:	4649      	mov	r1, r9
 8006094:	4620      	mov	r0, r4
 8006096:	f7ff fe8f 	bl	8005db8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800609a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	b94a      	cbnz	r2, 80060b6 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80060a2:	4642      	mov	r2, r8
 80060a4:	4631      	mov	r1, r6
 80060a6:	4620      	mov	r0, r4
 80060a8:	9700      	str	r7, [sp, #0]
 80060aa:	f7ff ff3f 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80060ae:	4605      	mov	r5, r0
 80060b0:	b918      	cbnz	r0, 80060ba <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80060b6:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80060ba:	2300      	movs	r3, #0
 80060bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80060c0:	4628      	mov	r0, r5
 80060c2:	b005      	add	sp, #20
 80060c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80060c8:	4635      	mov	r5, r6
 80060ca:	e7f6      	b.n	80060ba <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80060cc:	2502      	movs	r5, #2
 80060ce:	e7f7      	b.n	80060c0 <HAL_QSPI_Command+0x76>

080060d0 <HAL_QSPI_AutoPolling>:
{
 80060d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80060d4:	4604      	mov	r4, r0
 80060d6:	4615      	mov	r5, r2
 80060d8:	461e      	mov	r6, r3
 80060da:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80060dc:	f7fe fa0e 	bl	80044fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80060e0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80060e4:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80060e6:	2a01      	cmp	r2, #1
 80060e8:	d040      	beq.n	800616c <HAL_QSPI_AutoPolling+0x9c>
 80060ea:	2201      	movs	r2, #1
 80060ec:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80060f0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80060f4:	2a01      	cmp	r2, #1
 80060f6:	b2d7      	uxtb	r7, r2
 80060f8:	d136      	bne.n	8006168 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80060fa:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80060fc:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80060fe:	9003      	str	r0, [sp, #12]
 8006100:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006102:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006104:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006106:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800610a:	2120      	movs	r1, #32
 800610c:	f7ff ff0e 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006110:	bb20      	cbnz	r0, 800615c <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006112:	6821      	ldr	r1, [r4, #0]
 8006114:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006116:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006118:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800611a:	686a      	ldr	r2, [r5, #4]
 800611c:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800611e:	68aa      	ldr	r2, [r5, #8]
 8006120:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006122:	680a      	ldr	r2, [r1, #0]
 8006124:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006128:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800612a:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800612c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006130:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006132:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8006134:	68ea      	ldr	r2, [r5, #12]
 8006136:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800613a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800613e:	f7ff fe3b 	bl	8005db8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	463a      	mov	r2, r7
 8006146:	2108      	movs	r1, #8
 8006148:	4620      	mov	r0, r4
 800614a:	9600      	str	r6, [sp, #0]
 800614c:	f7ff feee 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006150:	b920      	cbnz	r0, 800615c <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8006158:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800615c:	2300      	movs	r3, #0
 800615e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006162:	b004      	add	sp, #16
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8006168:	2002      	movs	r0, #2
 800616a:	e7f7      	b.n	800615c <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800616c:	2002      	movs	r0, #2
 800616e:	e7f8      	b.n	8006162 <HAL_QSPI_AutoPolling+0x92>

08006170 <HAL_QSPI_MemoryMapped>:
{
 8006170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	4616      	mov	r6, r2
 8006176:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7fe f9c0 	bl	80044fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800617c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006180:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006182:	2a01      	cmp	r2, #1
 8006184:	d033      	beq.n	80061ee <HAL_QSPI_MemoryMapped+0x7e>
 8006186:	2201      	movs	r2, #1
 8006188:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800618c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006190:	2a01      	cmp	r2, #1
 8006192:	d12a      	bne.n	80061ea <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006194:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006196:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006198:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800619a:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800619c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80061a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061a2:	9100      	str	r1, [sp, #0]
 80061a4:	2120      	movs	r1, #32
 80061a6:	f7ff fec1 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80061aa:	4605      	mov	r5, r0
 80061ac:	b9b8      	cbnz	r0, 80061de <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	6872      	ldr	r2, [r6, #4]
 80061b2:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80061b4:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80061b6:	f020 0008 	bic.w	r0, r0, #8
 80061ba:	ea40 0002 	orr.w	r0, r0, r2
 80061be:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80061c0:	d107      	bne.n	80061d2 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80061c2:	6832      	ldr	r2, [r6, #0]
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80061c6:	2210      	movs	r2, #16
 80061c8:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80061d0:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80061d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80061d6:	4639      	mov	r1, r7
 80061d8:	4620      	mov	r0, r4
 80061da:	f7ff fded 	bl	8005db8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80061de:	2300      	movs	r3, #0
 80061e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80061e4:	4628      	mov	r0, r5
 80061e6:	b003      	add	sp, #12
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80061ea:	2502      	movs	r5, #2
 80061ec:	e7f7      	b.n	80061de <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80061ee:	2502      	movs	r5, #2
 80061f0:	e7f8      	b.n	80061e4 <HAL_QSPI_MemoryMapped+0x74>

080061f2 <HAL_QSPI_Abort>:
{
 80061f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061f4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80061f6:	f7fe f981 	bl	80044fc <HAL_GetTick>
 80061fa:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80061fc:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8006200:	f010 0002 	ands.w	r0, r0, #2
 8006204:	d03a      	beq.n	800627c <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 8006206:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006208:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 800620a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800620e:	680a      	ldr	r2, [r1, #0]
 8006210:	f012 0204 	ands.w	r2, r2, #4
 8006214:	d034      	beq.n	8006280 <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006216:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8006218:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8006222:	f7fe fd9b 	bl	8004d5c <HAL_DMA_Abort>
      if(status != HAL_OK)
 8006226:	9b03      	ldr	r3, [sp, #12]
 8006228:	b118      	cbz	r0, 8006232 <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800622a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800622c:	f042 0204 	orr.w	r2, r2, #4
 8006230:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	6891      	ldr	r1, [r2, #8]
 8006236:	0689      	lsls	r1, r1, #26
 8006238:	d51d      	bpl.n	8006276 <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800623a:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800623c:	4620      	mov	r0, r4
 800623e:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006240:	f041 0102 	orr.w	r1, r1, #2
 8006244:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006246:	2102      	movs	r1, #2
 8006248:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800624a:	9200      	str	r2, [sp, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	f7ff fe6d 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	b990      	cbnz	r0, 800627c <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	2102      	movs	r1, #2
 800625a:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800625c:	2120      	movs	r1, #32
 800625e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006260:	9200      	str	r2, [sp, #0]
 8006262:	4602      	mov	r2, r0
 8006264:	4620      	mov	r0, r4
 8006266:	f7ff fe61 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800626a:	b938      	cbnz	r0, 800627c <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800626c:	6822      	ldr	r2, [r4, #0]
 800626e:	6953      	ldr	r3, [r2, #20]
 8006270:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006274:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006276:	2301      	movs	r3, #1
 8006278:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800627c:	b004      	add	sp, #16
 800627e:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	4610      	mov	r0, r2
 8006282:	e7d6      	b.n	8006232 <HAL_QSPI_Abort+0x40>

08006284 <HAL_QSPI_Transmit>:
{
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	4604      	mov	r4, r0
 8006288:	b085      	sub	sp, #20
 800628a:	4616      	mov	r6, r2
 800628c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800628e:	f7fe f935 	bl	80044fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006292:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006296:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006298:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800629a:	2a01      	cmp	r2, #1
 800629c:	d04c      	beq.n	8006338 <HAL_QSPI_Transmit+0xb4>
 800629e:	2201      	movs	r2, #1
 80062a0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80062a4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	b2d0      	uxtb	r0, r2
 80062ac:	d142      	bne.n	8006334 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062ae:	2200      	movs	r2, #0
 80062b0:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80062b2:	2f00      	cmp	r7, #0
 80062b4:	d039      	beq.n	800632a <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80062b6:	2212      	movs	r2, #18
 80062b8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80062bc:	692a      	ldr	r2, [r5, #16]
 80062be:	3201      	adds	r2, #1
 80062c0:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80062c2:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80062c4:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80062c6:	3201      	adds	r2, #1
 80062c8:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80062ca:	696a      	ldr	r2, [r5, #20]
 80062cc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80062d0:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80062d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062d4:	b9a2      	cbnz	r2, 8006300 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80062d6:	2201      	movs	r2, #1
 80062d8:	2102      	movs	r1, #2
 80062da:	4620      	mov	r0, r4
 80062dc:	9600      	str	r6, [sp, #0]
 80062de:	f7ff fe25 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80062e2:	b928      	cbnz	r0, 80062f0 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80062e8:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80062ea:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80062ec:	f7ff ff81 	bl	80061f2 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80062f6:	2300      	movs	r3, #0
 80062f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80062fc:	b005      	add	sp, #20
 80062fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006300:	2201      	movs	r2, #1
 8006302:	2104      	movs	r1, #4
 8006304:	4620      	mov	r0, r4
 8006306:	9600      	str	r6, [sp, #0]
 8006308:	9303      	str	r3, [sp, #12]
 800630a:	f7ff fe0f 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800630e:	2800      	cmp	r0, #0
 8006310:	d1ee      	bne.n	80062f0 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006312:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006314:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800631c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800631e:	3201      	adds	r2, #1
 8006320:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006322:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006324:	3a01      	subs	r2, #1
 8006326:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006328:	e7d3      	b.n	80062d2 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800632a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800632c:	f043 0308 	orr.w	r3, r3, #8
 8006330:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8006332:	e7e0      	b.n	80062f6 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8006334:	2002      	movs	r0, #2
 8006336:	e7de      	b.n	80062f6 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8006338:	2002      	movs	r0, #2
 800633a:	e7df      	b.n	80062fc <HAL_QSPI_Transmit+0x78>

0800633c <HAL_QSPI_Receive>:
{
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633e:	4604      	mov	r4, r0
 8006340:	b085      	sub	sp, #20
 8006342:	4616      	mov	r6, r2
 8006344:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006346:	f7fe f8d9 	bl	80044fc <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800634a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800634c:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800634e:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8006352:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8006356:	2a01      	cmp	r2, #1
 8006358:	d050      	beq.n	80063fc <HAL_QSPI_Receive+0xc0>
 800635a:	2201      	movs	r2, #1
 800635c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006360:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006364:	2a01      	cmp	r2, #1
 8006366:	b2d0      	uxtb	r0, r2
 8006368:	d146      	bne.n	80063f8 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800636a:	2200      	movs	r2, #0
 800636c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800636e:	2f00      	cmp	r7, #0
 8006370:	d03d      	beq.n	80063ee <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006372:	2222      	movs	r2, #34	; 0x22
 8006374:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006378:	692a      	ldr	r2, [r5, #16]
 800637a:	3201      	adds	r2, #1
 800637c:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800637e:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8006380:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006382:	3201      	adds	r2, #1
 8006384:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006386:	6969      	ldr	r1, [r5, #20]
 8006388:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800638c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8006390:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006392:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8006396:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006398:	b9a2      	cbnz	r2, 80063c4 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800639a:	2201      	movs	r2, #1
 800639c:	2102      	movs	r1, #2
 800639e:	4620      	mov	r0, r4
 80063a0:	9600      	str	r6, [sp, #0]
 80063a2:	f7ff fdc3 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80063a6:	b928      	cbnz	r0, 80063b4 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80063ac:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80063ae:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80063b0:	f7ff ff1f 	bl	80061f2 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80063ba:	2300      	movs	r3, #0
 80063bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80063c0:	b005      	add	sp, #20
 80063c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80063c4:	2201      	movs	r2, #1
 80063c6:	2106      	movs	r1, #6
 80063c8:	4620      	mov	r0, r4
 80063ca:	9600      	str	r6, [sp, #0]
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	f7ff fdad 	bl	8005f2c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d1ee      	bne.n	80063b4 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80063d6:	f895 1020 	ldrb.w	r1, [r5, #32]
 80063da:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80063dc:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80063de:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80063e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80063e2:	3201      	adds	r2, #1
 80063e4:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80063e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80063e8:	3a01      	subs	r2, #1
 80063ea:	63a2      	str	r2, [r4, #56]	; 0x38
 80063ec:	e7d3      	b.n	8006396 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80063ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063f0:	f043 0308 	orr.w	r3, r3, #8
 80063f4:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80063f6:	e7e0      	b.n	80063ba <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80063f8:	2002      	movs	r0, #2
 80063fa:	e7de      	b.n	80063ba <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 80063fc:	2002      	movs	r0, #2
 80063fe:	e7df      	b.n	80063c0 <HAL_QSPI_Receive+0x84>

08006400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006404:	4604      	mov	r4, r0
 8006406:	b340      	cbz	r0, 800645a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006408:	6803      	ldr	r3, [r0, #0]
 800640a:	07db      	lsls	r3, r3, #31
 800640c:	d410      	bmi.n	8006430 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	079f      	lsls	r7, r3, #30
 8006412:	d461      	bmi.n	80064d8 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	0719      	lsls	r1, r3, #28
 8006418:	f100 80a6 	bmi.w	8006568 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	075a      	lsls	r2, r3, #29
 8006420:	f100 80c7 	bmi.w	80065b2 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006424:	69a2      	ldr	r2, [r4, #24]
 8006426:	2a00      	cmp	r2, #0
 8006428:	f040 8130 	bne.w	800668c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800642c:	2000      	movs	r0, #0
 800642e:	e02c      	b.n	800648a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006430:	4b94      	ldr	r3, [pc, #592]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	f002 020c 	and.w	r2, r2, #12
 8006438:	2a04      	cmp	r2, #4
 800643a:	d007      	beq.n	800644c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	f002 020c 	and.w	r2, r2, #12
 8006442:	2a08      	cmp	r2, #8
 8006444:	d10b      	bne.n	800645e <HAL_RCC_OscConfig+0x5e>
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	025e      	lsls	r6, r3, #9
 800644a:	d508      	bpl.n	800645e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800644c:	4b8d      	ldr	r3, [pc, #564]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	039d      	lsls	r5, r3, #14
 8006452:	d5dc      	bpl.n	800640e <HAL_RCC_OscConfig+0xe>
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1d9      	bne.n	800640e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800645a:	2001      	movs	r0, #1
 800645c:	e015      	b.n	800648a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	4d88      	ldr	r5, [pc, #544]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 8006462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006466:	d113      	bne.n	8006490 <HAL_RCC_OscConfig+0x90>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006470:	f7fe f844 	bl	80044fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006474:	4e83      	ldr	r6, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8006476:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006478:	6833      	ldr	r3, [r6, #0]
 800647a:	0398      	lsls	r0, r3, #14
 800647c:	d4c7      	bmi.n	800640e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800647e:	f7fe f83d 	bl	80044fc <HAL_GetTick>
 8006482:	1b40      	subs	r0, r0, r5
 8006484:	2864      	cmp	r0, #100	; 0x64
 8006486:	d9f7      	bls.n	8006478 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8006488:	2003      	movs	r0, #3
}
 800648a:	b002      	add	sp, #8
 800648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006490:	b99b      	cbnz	r3, 80064ba <HAL_RCC_OscConfig+0xba>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80064a2:	f7fe f82b 	bl	80044fc <HAL_GetTick>
 80064a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	0399      	lsls	r1, r3, #14
 80064ac:	d5af      	bpl.n	800640e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ae:	f7fe f825 	bl	80044fc <HAL_GetTick>
 80064b2:	1b80      	subs	r0, r0, r6
 80064b4:	2864      	cmp	r0, #100	; 0x64
 80064b6:	d9f7      	bls.n	80064a8 <HAL_RCC_OscConfig+0xa8>
 80064b8:	e7e6      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	d103      	bne.n	80064ca <HAL_RCC_OscConfig+0xca>
 80064c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	e7ce      	b.n	8006468 <HAL_RCC_OscConfig+0x68>
 80064ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ce:	602b      	str	r3, [r5, #0]
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064d6:	e7ca      	b.n	800646e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064d8:	4b6a      	ldr	r3, [pc, #424]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	f012 0f0c 	tst.w	r2, #12
 80064e0:	d007      	beq.n	80064f2 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	f002 020c 	and.w	r2, r2, #12
 80064e8:	2a08      	cmp	r2, #8
 80064ea:	d111      	bne.n	8006510 <HAL_RCC_OscConfig+0x110>
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	025a      	lsls	r2, r3, #9
 80064f0:	d40e      	bmi.n	8006510 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f2:	4a64      	ldr	r2, [pc, #400]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 80064f4:	6813      	ldr	r3, [r2, #0]
 80064f6:	079b      	lsls	r3, r3, #30
 80064f8:	d502      	bpl.n	8006500 <HAL_RCC_OscConfig+0x100>
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d1ac      	bne.n	800645a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006500:	6813      	ldr	r3, [r2, #0]
 8006502:	6921      	ldr	r1, [r4, #16]
 8006504:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006508:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800650c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650e:	e781      	b.n	8006414 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006510:	68e3      	ldr	r3, [r4, #12]
 8006512:	4d5c      	ldr	r5, [pc, #368]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 8006514:	b1bb      	cbz	r3, 8006546 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800651e:	f7fd ffed 	bl	80044fc <HAL_GetTick>
 8006522:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	079f      	lsls	r7, r3, #30
 8006528:	d507      	bpl.n	800653a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	6922      	ldr	r2, [r4, #16]
 800652e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006532:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	e76c      	b.n	8006414 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800653a:	f7fd ffdf 	bl	80044fc <HAL_GetTick>
 800653e:	1b80      	subs	r0, r0, r6
 8006540:	2802      	cmp	r0, #2
 8006542:	d9ef      	bls.n	8006524 <HAL_RCC_OscConfig+0x124>
 8006544:	e7a0      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800654e:	f7fd ffd5 	bl	80044fc <HAL_GetTick>
 8006552:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	0798      	lsls	r0, r3, #30
 8006558:	f57f af5c 	bpl.w	8006414 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655c:	f7fd ffce 	bl	80044fc <HAL_GetTick>
 8006560:	1b80      	subs	r0, r0, r6
 8006562:	2802      	cmp	r0, #2
 8006564:	d9f6      	bls.n	8006554 <HAL_RCC_OscConfig+0x154>
 8006566:	e78f      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006568:	6963      	ldr	r3, [r4, #20]
 800656a:	4d46      	ldr	r5, [pc, #280]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 800656c:	b183      	cbz	r3, 8006590 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800656e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006576:	f7fd ffc1 	bl	80044fc <HAL_GetTick>
 800657a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800657e:	079b      	lsls	r3, r3, #30
 8006580:	f53f af4c 	bmi.w	800641c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006584:	f7fd ffba 	bl	80044fc <HAL_GetTick>
 8006588:	1b80      	subs	r0, r0, r6
 800658a:	2802      	cmp	r0, #2
 800658c:	d9f6      	bls.n	800657c <HAL_RCC_OscConfig+0x17c>
 800658e:	e77b      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8006590:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006592:	f023 0301 	bic.w	r3, r3, #1
 8006596:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006598:	f7fd ffb0 	bl	80044fc <HAL_GetTick>
 800659c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800659e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80065a0:	079f      	lsls	r7, r3, #30
 80065a2:	f57f af3b 	bpl.w	800641c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a6:	f7fd ffa9 	bl	80044fc <HAL_GetTick>
 80065aa:	1b80      	subs	r0, r0, r6
 80065ac:	2802      	cmp	r0, #2
 80065ae:	d9f6      	bls.n	800659e <HAL_RCC_OscConfig+0x19e>
 80065b0:	e76a      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065b2:	4b34      	ldr	r3, [pc, #208]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 80065b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b6:	00d0      	lsls	r0, r2, #3
 80065b8:	d427      	bmi.n	800660a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80065bc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80065be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ce:	4d2e      	ldr	r5, [pc, #184]	; (8006688 <HAL_RCC_OscConfig+0x288>)
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	05d9      	lsls	r1, r3, #23
 80065d4:	d51b      	bpl.n	800660e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065d6:	68a3      	ldr	r3, [r4, #8]
 80065d8:	4d2a      	ldr	r5, [pc, #168]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d127      	bne.n	800662e <HAL_RCC_OscConfig+0x22e>
 80065de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80065ea:	f7fd ff87 	bl	80044fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ee:	4e25      	ldr	r6, [pc, #148]	; (8006684 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80065f0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80065f4:	079b      	lsls	r3, r3, #30
 80065f6:	d53f      	bpl.n	8006678 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f43f af13 	beq.w	8006424 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fe:	4a21      	ldr	r2, [pc, #132]	; (8006684 <HAL_RCC_OscConfig+0x284>)
 8006600:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006606:	6413      	str	r3, [r2, #64]	; 0x40
 8006608:	e70c      	b.n	8006424 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800660a:	2700      	movs	r7, #0
 800660c:	e7df      	b.n	80065ce <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006614:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006616:	f7fd ff71 	bl	80044fc <HAL_GetTick>
 800661a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	05da      	lsls	r2, r3, #23
 8006620:	d4d9      	bmi.n	80065d6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006622:	f7fd ff6b 	bl	80044fc <HAL_GetTick>
 8006626:	1b80      	subs	r0, r0, r6
 8006628:	2864      	cmp	r0, #100	; 0x64
 800662a:	d9f7      	bls.n	800661c <HAL_RCC_OscConfig+0x21c>
 800662c:	e72c      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800662e:	b9ab      	cbnz	r3, 800665c <HAL_RCC_OscConfig+0x25c>
 8006630:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006632:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	672b      	str	r3, [r5, #112]	; 0x70
 800663c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800663e:	f023 0304 	bic.w	r3, r3, #4
 8006642:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006644:	f7fd ff5a 	bl	80044fc <HAL_GetTick>
 8006648:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800664a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800664c:	0798      	lsls	r0, r3, #30
 800664e:	d5d3      	bpl.n	80065f8 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006650:	f7fd ff54 	bl	80044fc <HAL_GetTick>
 8006654:	1b80      	subs	r0, r0, r6
 8006656:	4540      	cmp	r0, r8
 8006658:	d9f7      	bls.n	800664a <HAL_RCC_OscConfig+0x24a>
 800665a:	e715      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800665c:	2b05      	cmp	r3, #5
 800665e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006660:	d103      	bne.n	800666a <HAL_RCC_OscConfig+0x26a>
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	672b      	str	r3, [r5, #112]	; 0x70
 8006668:	e7b9      	b.n	80065de <HAL_RCC_OscConfig+0x1de>
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	672b      	str	r3, [r5, #112]	; 0x70
 8006670:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006672:	f023 0304 	bic.w	r3, r3, #4
 8006676:	e7b5      	b.n	80065e4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006678:	f7fd ff40 	bl	80044fc <HAL_GetTick>
 800667c:	1b40      	subs	r0, r0, r5
 800667e:	4540      	cmp	r0, r8
 8006680:	d9b7      	bls.n	80065f2 <HAL_RCC_OscConfig+0x1f2>
 8006682:	e701      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
 8006684:	40023800 	.word	0x40023800
 8006688:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800668c:	4d38      	ldr	r5, [pc, #224]	; (8006770 <HAL_RCC_OscConfig+0x370>)
 800668e:	68ab      	ldr	r3, [r5, #8]
 8006690:	f003 030c 	and.w	r3, r3, #12
 8006694:	2b08      	cmp	r3, #8
 8006696:	d041      	beq.n	800671c <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8006698:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800669a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800669c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066a0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a2:	d12e      	bne.n	8006702 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80066a4:	f7fd ff2a 	bl	80044fc <HAL_GetTick>
 80066a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066aa:	682b      	ldr	r3, [r5, #0]
 80066ac:	0199      	lsls	r1, r3, #6
 80066ae:	d422      	bmi.n	80066f6 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80066ba:	430b      	orrs	r3, r1
 80066bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80066c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80066cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80066d2:	682b      	ldr	r3, [r5, #0]
 80066d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80066da:	f7fd ff0f 	bl	80044fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066de:	4d24      	ldr	r5, [pc, #144]	; (8006770 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 80066e0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e2:	682b      	ldr	r3, [r5, #0]
 80066e4:	019a      	lsls	r2, r3, #6
 80066e6:	f53f aea1 	bmi.w	800642c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ea:	f7fd ff07 	bl	80044fc <HAL_GetTick>
 80066ee:	1b00      	subs	r0, r0, r4
 80066f0:	2802      	cmp	r0, #2
 80066f2:	d9f6      	bls.n	80066e2 <HAL_RCC_OscConfig+0x2e2>
 80066f4:	e6c8      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f6:	f7fd ff01 	bl	80044fc <HAL_GetTick>
 80066fa:	1b80      	subs	r0, r0, r6
 80066fc:	2802      	cmp	r0, #2
 80066fe:	d9d4      	bls.n	80066aa <HAL_RCC_OscConfig+0x2aa>
 8006700:	e6c2      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8006702:	f7fd fefb 	bl	80044fc <HAL_GetTick>
 8006706:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	019b      	lsls	r3, r3, #6
 800670c:	f57f ae8e 	bpl.w	800642c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006710:	f7fd fef4 	bl	80044fc <HAL_GetTick>
 8006714:	1b00      	subs	r0, r0, r4
 8006716:	2802      	cmp	r0, #2
 8006718:	d9f6      	bls.n	8006708 <HAL_RCC_OscConfig+0x308>
 800671a:	e6b5      	b.n	8006488 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800671c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800671e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006720:	f43f ae9b 	beq.w	800645a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006728:	69e1      	ldr	r1, [r4, #28]
 800672a:	428a      	cmp	r2, r1
 800672c:	f47f ae95 	bne.w	800645a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006730:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006734:	6a21      	ldr	r1, [r4, #32]
 8006736:	428a      	cmp	r2, r1
 8006738:	f47f ae8f 	bne.w	800645a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800673c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006740:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006742:	401a      	ands	r2, r3
 8006744:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006748:	f47f ae87 	bne.w	800645a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800674c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800674e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8006752:	0852      	lsrs	r2, r2, #1
 8006754:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006756:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800675a:	f47f ae7e 	bne.w	800645a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800675e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006762:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006764:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006768:	f43f ae60 	beq.w	800642c <HAL_RCC_OscConfig+0x2c>
 800676c:	e675      	b.n	800645a <HAL_RCC_OscConfig+0x5a>
 800676e:	bf00      	nop
 8006770:	40023800 	.word	0x40023800

08006774 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006774:	4913      	ldr	r1, [pc, #76]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006776:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006778:	688b      	ldr	r3, [r1, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b04      	cmp	r3, #4
 8006780:	d01b      	beq.n	80067ba <HAL_RCC_GetSysClockFreq+0x46>
 8006782:	2b08      	cmp	r3, #8
 8006784:	d11b      	bne.n	80067be <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006786:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006788:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800678a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800678c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006790:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006794:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006798:	bf1a      	itte	ne
 800679a:	480b      	ldrne	r0, [pc, #44]	; (80067c8 <HAL_RCC_GetSysClockFreq+0x54>)
 800679c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800679e:	480b      	ldreq	r0, [pc, #44]	; (80067cc <HAL_RCC_GetSysClockFreq+0x58>)
 80067a0:	fba1 0100 	umull	r0, r1, r1, r0
 80067a4:	f7fa f9a2 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x50>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80067b0:	3301      	adds	r3, #1
 80067b2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80067b4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80067b8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067ba:	4803      	ldr	r0, [pc, #12]	; (80067c8 <HAL_RCC_GetSysClockFreq+0x54>)
 80067bc:	e7fc      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80067be:	4803      	ldr	r0, [pc, #12]	; (80067cc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80067c0:	e7fa      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x44>
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	017d7840 	.word	0x017d7840
 80067cc:	00f42400 	.word	0x00f42400

080067d0 <HAL_RCC_ClockConfig>:
{
 80067d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80067d6:	4604      	mov	r4, r0
 80067d8:	b910      	cbnz	r0, 80067e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80067da:	2001      	movs	r0, #1
}
 80067dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067e0:	4a45      	ldr	r2, [pc, #276]	; (80068f8 <HAL_RCC_ClockConfig+0x128>)
 80067e2:	6813      	ldr	r3, [r2, #0]
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	428b      	cmp	r3, r1
 80067ea:	d328      	bcc.n	800683e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	078f      	lsls	r7, r1, #30
 80067f0:	d430      	bmi.n	8006854 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067f2:	07c8      	lsls	r0, r1, #31
 80067f4:	d443      	bmi.n	800687e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067f6:	4a40      	ldr	r2, [pc, #256]	; (80068f8 <HAL_RCC_ClockConfig+0x128>)
 80067f8:	6813      	ldr	r3, [r2, #0]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	42ab      	cmp	r3, r5
 8006800:	d866      	bhi.n	80068d0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	0751      	lsls	r1, r2, #29
 8006806:	d46f      	bmi.n	80068e8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006808:	0713      	lsls	r3, r2, #28
 800680a:	d507      	bpl.n	800681c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800680c:	4a3b      	ldr	r2, [pc, #236]	; (80068fc <HAL_RCC_ClockConfig+0x12c>)
 800680e:	6921      	ldr	r1, [r4, #16]
 8006810:	6893      	ldr	r3, [r2, #8]
 8006812:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006816:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800681a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800681c:	f7ff ffaa 	bl	8006774 <HAL_RCC_GetSysClockFreq>
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <HAL_RCC_ClockConfig+0x12c>)
 8006822:	4a37      	ldr	r2, [pc, #220]	; (8006900 <HAL_RCC_ClockConfig+0x130>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800682a:	5cd3      	ldrb	r3, [r2, r3]
 800682c:	40d8      	lsrs	r0, r3
 800682e:	4b35      	ldr	r3, [pc, #212]	; (8006904 <HAL_RCC_ClockConfig+0x134>)
 8006830:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006832:	4b35      	ldr	r3, [pc, #212]	; (8006908 <HAL_RCC_ClockConfig+0x138>)
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	f7fb f911 	bl	8001a5c <HAL_InitTick>
  return HAL_OK;
 800683a:	2000      	movs	r0, #0
 800683c:	e7ce      	b.n	80067dc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683e:	6813      	ldr	r3, [r2, #0]
 8006840:	f023 030f 	bic.w	r3, r3, #15
 8006844:	430b      	orrs	r3, r1
 8006846:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006848:	6813      	ldr	r3, [r2, #0]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	428b      	cmp	r3, r1
 8006850:	d1c3      	bne.n	80067da <HAL_RCC_ClockConfig+0xa>
 8006852:	e7cb      	b.n	80067ec <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006854:	f011 0f04 	tst.w	r1, #4
 8006858:	4b28      	ldr	r3, [pc, #160]	; (80068fc <HAL_RCC_ClockConfig+0x12c>)
 800685a:	d003      	beq.n	8006864 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8006862:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006864:	070e      	lsls	r6, r1, #28
 8006866:	d503      	bpl.n	8006870 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800686e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	68a0      	ldr	r0, [r4, #8]
 8006874:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006878:	4302      	orrs	r2, r0
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	e7b9      	b.n	80067f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800687e:	6861      	ldr	r1, [r4, #4]
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <HAL_RCC_ClockConfig+0x12c>)
 8006882:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006884:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006886:	d11b      	bne.n	80068c0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006888:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688c:	d0a5      	beq.n	80067da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800688e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006890:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006894:	4f19      	ldr	r7, [pc, #100]	; (80068fc <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006896:	f022 0203 	bic.w	r2, r2, #3
 800689a:	430a      	orrs	r2, r1
 800689c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800689e:	f7fd fe2d 	bl	80044fc <HAL_GetTick>
 80068a2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	f003 030c 	and.w	r3, r3, #12
 80068ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80068b0:	d0a1      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b2:	f7fd fe23 	bl	80044fc <HAL_GetTick>
 80068b6:	1b80      	subs	r0, r0, r6
 80068b8:	4540      	cmp	r0, r8
 80068ba:	d9f3      	bls.n	80068a4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80068bc:	2003      	movs	r0, #3
 80068be:	e78d      	b.n	80067dc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068c0:	2902      	cmp	r1, #2
 80068c2:	d102      	bne.n	80068ca <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80068c8:	e7e0      	b.n	800688c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ca:	f012 0f02 	tst.w	r2, #2
 80068ce:	e7dd      	b.n	800688c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	f023 030f 	bic.w	r3, r3, #15
 80068d6:	432b      	orrs	r3, r5
 80068d8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	f47f af7a 	bne.w	80067da <HAL_RCC_ClockConfig+0xa>
 80068e6:	e78c      	b.n	8006802 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068e8:	4904      	ldr	r1, [pc, #16]	; (80068fc <HAL_RCC_ClockConfig+0x12c>)
 80068ea:	68e0      	ldr	r0, [r4, #12]
 80068ec:	688b      	ldr	r3, [r1, #8]
 80068ee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80068f2:	4303      	orrs	r3, r0
 80068f4:	608b      	str	r3, [r1, #8]
 80068f6:	e787      	b.n	8006808 <HAL_RCC_ClockConfig+0x38>
 80068f8:	40023c00 	.word	0x40023c00
 80068fc:	40023800 	.word	0x40023800
 8006900:	0802d68c 	.word	0x0802d68c
 8006904:	2000000c 	.word	0x2000000c
 8006908:	2000003c 	.word	0x2000003c

0800690c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800690c:	4b04      	ldr	r3, [pc, #16]	; (8006920 <HAL_RCC_GetPCLK1Freq+0x14>)
 800690e:	4a05      	ldr	r2, [pc, #20]	; (8006924 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006916:	5cd3      	ldrb	r3, [r2, r3]
 8006918:	4a03      	ldr	r2, [pc, #12]	; (8006928 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800691a:	6810      	ldr	r0, [r2, #0]
}
 800691c:	40d8      	lsrs	r0, r3
 800691e:	4770      	bx	lr
 8006920:	40023800 	.word	0x40023800
 8006924:	0802d69c 	.word	0x0802d69c
 8006928:	2000000c 	.word	0x2000000c

0800692c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800692c:	230f      	movs	r3, #15
 800692e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_RCC_GetClockConfig+0x34>)
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	f002 0203 	and.w	r2, r2, #3
 8006938:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006940:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006948:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	08db      	lsrs	r3, r3, #3
 800694e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006952:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006954:	4b03      	ldr	r3, [pc, #12]	; (8006964 <HAL_RCC_GetClockConfig+0x38>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	600b      	str	r3, [r1, #0]
}
 800695e:	4770      	bx	lr
 8006960:	40023800 	.word	0x40023800
 8006964:	40023c00 	.word	0x40023c00

08006968 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006968:	6803      	ldr	r3, [r0, #0]
{
 800696a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800696e:	f013 0601 	ands.w	r6, r3, #1
{
 8006972:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006974:	d00b      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006976:	4aad      	ldr	r2, [pc, #692]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006978:	6891      	ldr	r1, [r2, #8]
 800697a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800697e:	6091      	str	r1, [r2, #8]
 8006980:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8006982:	6891      	ldr	r1, [r2, #8]
 8006984:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006986:	fab6 f686 	clz	r6, r6
 800698a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800698c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800698e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8006992:	d012      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006994:	49a5      	ldr	r1, [pc, #660]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006996:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006998:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800699c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80069a4:	bf08      	it	eq
 80069a6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069a8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069ac:	bf16      	itet	ne
 80069ae:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80069b2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069b4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069b6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069ba:	02d8      	lsls	r0, r3, #11
 80069bc:	d510      	bpl.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069be:	489b      	ldr	r0, [pc, #620]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80069c2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069c6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069ca:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80069ce:	ea42 0201 	orr.w	r2, r2, r1
 80069d2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069d6:	f000 8186 	beq.w	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80069da:	2900      	cmp	r1, #0
 80069dc:	bf08      	it	eq
 80069de:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80069e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80069e4:	bf18      	it	ne
 80069e6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069e8:	0699      	lsls	r1, r3, #26
 80069ea:	d532      	bpl.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069ec:	4b8f      	ldr	r3, [pc, #572]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069ee:	4f90      	ldr	r7, [pc, #576]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80069f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a08:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0a:	f7fd fd77 	bl	80044fc <HAL_GetTick>
 8006a0e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	05da      	lsls	r2, r3, #23
 8006a14:	f140 8169 	bpl.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a18:	4f84      	ldr	r7, [pc, #528]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a1e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006a22:	f040 816d 	bne.w	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a28:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006a2c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006a30:	4a7e      	ldr	r2, [pc, #504]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a32:	f040 818a 	bne.w	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006a36:	6891      	ldr	r1, [r2, #8]
 8006a38:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8006a3c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006a40:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006a44:	4301      	orrs	r1, r0
 8006a46:	6091      	str	r1, [r2, #8]
 8006a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	06d9      	lsls	r1, r3, #27
 8006a56:	d50c      	bpl.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a58:	4a74      	ldr	r2, [pc, #464]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a5a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006a5e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006a62:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8006a66:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006a6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a6c:	4301      	orrs	r1, r0
 8006a6e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a72:	045a      	lsls	r2, r3, #17
 8006a74:	d508      	bpl.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a76:	496d      	ldr	r1, [pc, #436]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a78:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006a7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a7e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006a82:	4302      	orrs	r2, r0
 8006a84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a88:	041f      	lsls	r7, r3, #16
 8006a8a:	d508      	bpl.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a8c:	4967      	ldr	r1, [pc, #412]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a8e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006a90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a94:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006a98:	4302      	orrs	r2, r0
 8006a9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a9e:	03d8      	lsls	r0, r3, #15
 8006aa0:	d508      	bpl.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aa2:	4962      	ldr	r1, [pc, #392]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006aa4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006aa6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006aaa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006aae:	4302      	orrs	r2, r0
 8006ab0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ab4:	0399      	lsls	r1, r3, #14
 8006ab6:	d508      	bpl.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ab8:	495c      	ldr	r1, [pc, #368]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006aba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006abc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006ac0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006ac4:	4302      	orrs	r2, r0
 8006ac6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aca:	065a      	lsls	r2, r3, #25
 8006acc:	d508      	bpl.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ace:	4957      	ldr	r1, [pc, #348]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ad0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006ad2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006ad6:	f022 0203 	bic.w	r2, r2, #3
 8006ada:	4302      	orrs	r2, r0
 8006adc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ae0:	061f      	lsls	r7, r3, #24
 8006ae2:	d508      	bpl.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ae4:	4951      	ldr	r1, [pc, #324]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ae6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ae8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006aec:	f022 020c 	bic.w	r2, r2, #12
 8006af0:	4302      	orrs	r2, r0
 8006af2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006af6:	05d8      	lsls	r0, r3, #23
 8006af8:	d508      	bpl.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006afa:	494c      	ldr	r1, [pc, #304]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006afc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006afe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b02:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006b06:	4302      	orrs	r2, r0
 8006b08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b0c:	0599      	lsls	r1, r3, #22
 8006b0e:	d508      	bpl.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b10:	4946      	ldr	r1, [pc, #280]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b12:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006b14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b18:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b1c:	4302      	orrs	r2, r0
 8006b1e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b22:	055a      	lsls	r2, r3, #21
 8006b24:	d508      	bpl.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b26:	4941      	ldr	r1, [pc, #260]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b32:	4302      	orrs	r2, r0
 8006b34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006b38:	051f      	lsls	r7, r3, #20
 8006b3a:	d508      	bpl.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006b3c:	493b      	ldr	r1, [pc, #236]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b48:	4302      	orrs	r2, r0
 8006b4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006b4e:	04d8      	lsls	r0, r3, #19
 8006b50:	d508      	bpl.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006b52:	4936      	ldr	r1, [pc, #216]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b54:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006b56:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b5a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006b5e:	4302      	orrs	r2, r0
 8006b60:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006b64:	0499      	lsls	r1, r3, #18
 8006b66:	d508      	bpl.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006b68:	4930      	ldr	r1, [pc, #192]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b6a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006b6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b70:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b74:	4302      	orrs	r2, r0
 8006b76:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b7a:	025a      	lsls	r2, r3, #9
 8006b7c:	d508      	bpl.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b7e:	492b      	ldr	r1, [pc, #172]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b80:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006b82:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b86:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006b8a:	4302      	orrs	r2, r0
 8006b8c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b90:	029f      	lsls	r7, r3, #10
 8006b92:	d50c      	bpl.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b94:	4825      	ldr	r0, [pc, #148]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b96:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006b98:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8006b9c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ba0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8006ba4:	bf08      	it	eq
 8006ba6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006bae:	f013 0f08 	tst.w	r3, #8
 8006bb2:	bf18      	it	ne
 8006bb4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bb6:	0358      	lsls	r0, r3, #13
 8006bb8:	d508      	bpl.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bba:	491c      	ldr	r1, [pc, #112]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006bbc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006bbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006bc2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006bc6:	4302      	orrs	r2, r0
 8006bc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006bcc:	0219      	lsls	r1, r3, #8
 8006bce:	d509      	bpl.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bd0:	4916      	ldr	r1, [pc, #88]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006bd2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006bd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006bda:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006bde:	4302      	orrs	r2, r0
 8006be0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006be4:	2e01      	cmp	r6, #1
 8006be6:	f000 80b4 	beq.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006bea:	019a      	lsls	r2, r3, #6
 8006bec:	f100 80b1 	bmi.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006bf0:	2d01      	cmp	r5, #1
 8006bf2:	d176      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bf4:	4d0d      	ldr	r5, [pc, #52]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006bf6:	682b      	ldr	r3, [r5, #0]
 8006bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bfc:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfe:	f7fd fc7d 	bl	80044fc <HAL_GetTick>
 8006c02:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	009f      	lsls	r7, r3, #2
 8006c08:	f100 8127 	bmi.w	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	030e      	lsls	r6, r1, #12
 8006c10:	d501      	bpl.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8006c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c14:	b11b      	cbz	r3, 8006c1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006c16:	02cd      	lsls	r5, r1, #11
 8006c18:	d523      	bpl.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c1c:	bb0b      	cbnz	r3, 8006c62 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c1e:	4a03      	ldr	r2, [pc, #12]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c24:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8006c28:	e004      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006c2a:	bf00      	nop
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c38:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006c3c:	4303      	orrs	r3, r0
 8006c3e:	6960      	ldr	r0, [r4, #20]
 8006c40:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006c44:	69a0      	ldr	r0, [r4, #24]
 8006c46:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006c4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c4e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006c52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006c54:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006c58:	3801      	subs	r0, #1
 8006c5a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006c5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c62:	0288      	lsls	r0, r1, #10
 8006c64:	d515      	bpl.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006c66:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6c:	d111      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c6e:	4a82      	ldr	r2, [pc, #520]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006c70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c74:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006c78:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006c7c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006c80:	4303      	orrs	r3, r0
 8006c82:	6960      	ldr	r0, [r4, #20]
 8006c84:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006c88:	6a20      	ldr	r0, [r4, #32]
 8006c8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c92:	070a      	lsls	r2, r1, #28
 8006c94:	d519      	bpl.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c96:	4a78      	ldr	r2, [pc, #480]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006c98:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c9c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ca0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6961      	ldr	r1, [r4, #20]
 8006cac:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006cb0:	69e1      	ldr	r1, [r4, #28]
 8006cb2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006cb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006cbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cc0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cca:	4c6b      	ldr	r4, [pc, #428]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd4:	f7fd fc12 	bl	80044fc <HAL_GetTick>
 8006cd8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	f140 80c3 	bpl.w	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e009      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8006ce6:	2601      	movs	r6, #1
 8006ce8:	e67a      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cea:	f7fd fc07 	bl	80044fc <HAL_GetTick>
 8006cee:	eba0 0008 	sub.w	r0, r0, r8
 8006cf2:	2864      	cmp	r0, #100	; 0x64
 8006cf4:	f67f ae8c 	bls.w	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006cf8:	2003      	movs	r0, #3
}
 8006cfa:	b003      	add	sp, #12
 8006cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d00:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006d04:	429a      	cmp	r2, r3
 8006d06:	f43f ae8e 	beq.w	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d16:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d1e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006d20:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d24:	07db      	lsls	r3, r3, #31
 8006d26:	f57f ae7e 	bpl.w	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8006d2a:	f7fd fbe7 	bl	80044fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006d32:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d36:	0798      	lsls	r0, r3, #30
 8006d38:	f53f ae75 	bmi.w	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d3c:	f7fd fbde 	bl	80044fc <HAL_GetTick>
 8006d40:	eba0 0008 	sub.w	r0, r0, r8
 8006d44:	4548      	cmp	r0, r9
 8006d46:	d9f5      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006d48:	e7d6      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d4a:	6891      	ldr	r1, [r2, #8]
 8006d4c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006d50:	e679      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8006d52:	4e49      	ldr	r6, [pc, #292]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006d54:	6833      	ldr	r3, [r6, #0]
 8006d56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d5a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006d5c:	f7fd fbce 	bl	80044fc <HAL_GetTick>
 8006d60:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d62:	6833      	ldr	r3, [r6, #0]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	d472      	bmi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	07d7      	lsls	r7, r2, #31
 8006d6c:	d512      	bpl.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d70:	b983      	cbnz	r3, 8006d94 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d72:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d76:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d7e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006d82:	430b      	orrs	r3, r1
 8006d84:	6861      	ldr	r1, [r4, #4]
 8006d86:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006d8a:	68a1      	ldr	r1, [r4, #8]
 8006d8c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006d90:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d94:	0316      	lsls	r6, r2, #12
 8006d96:	d503      	bpl.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8006d98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9e:	d005      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x444>
 8006da0:	02d0      	lsls	r0, r2, #11
 8006da2:	d51e      	bpl.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006daa:	d11a      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006dac:	4932      	ldr	r1, [pc, #200]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006dae:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006db2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006dbe:	4303      	orrs	r3, r0
 8006dc0:	6860      	ldr	r0, [r4, #4]
 8006dc2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006dc6:	68e0      	ldr	r0, [r4, #12]
 8006dc8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006dcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006dd0:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dd6:	f020 001f 	bic.w	r0, r0, #31
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4303      	orrs	r3, r0
 8006dde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006de2:	01d1      	lsls	r1, r2, #7
 8006de4:	d511      	bpl.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006de6:	4924      	ldr	r1, [pc, #144]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006de8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006dec:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006df0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006df4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006df8:	4303      	orrs	r3, r0
 8006dfa:	6860      	ldr	r0, [r4, #4]
 8006dfc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006e00:	6920      	ldr	r0, [r4, #16]
 8006e02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e0a:	0192      	lsls	r2, r2, #6
 8006e0c:	d50d      	bpl.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	6862      	ldr	r2, [r4, #4]
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006e18:	68e2      	ldr	r2, [r4, #12]
 8006e1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e1e:	68a2      	ldr	r2, [r4, #8]
 8006e20:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006e24:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006e2a:	4e13      	ldr	r6, [pc, #76]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006e2c:	6833      	ldr	r3, [r6, #0]
 8006e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e32:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006e34:	f7fd fb62 	bl	80044fc <HAL_GetTick>
 8006e38:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e3a:	6833      	ldr	r3, [r6, #0]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	f53f aed7 	bmi.w	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e42:	f7fd fb5b 	bl	80044fc <HAL_GetTick>
 8006e46:	1bc0      	subs	r0, r0, r7
 8006e48:	2864      	cmp	r0, #100	; 0x64
 8006e4a:	d9f6      	bls.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e4c:	e754      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e4e:	f7fd fb55 	bl	80044fc <HAL_GetTick>
 8006e52:	1bc0      	subs	r0, r0, r7
 8006e54:	2864      	cmp	r0, #100	; 0x64
 8006e56:	d984      	bls.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006e58:	e74e      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e5a:	f7fd fb4f 	bl	80044fc <HAL_GetTick>
 8006e5e:	1b80      	subs	r0, r0, r6
 8006e60:	2864      	cmp	r0, #100	; 0x64
 8006e62:	f67f aecf 	bls.w	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8006e66:	e747      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e68:	f7fd fb48 	bl	80044fc <HAL_GetTick>
 8006e6c:	1b40      	subs	r0, r0, r5
 8006e6e:	2864      	cmp	r0, #100	; 0x64
 8006e70:	f67f af33 	bls.w	8006cda <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006e74:	e740      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8006e76:	bf00      	nop
 8006e78:	40023800 	.word	0x40023800

08006e7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006e80:	4604      	mov	r4, r0
 8006e82:	b1c8      	cbz	r0, 8006eb8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e84:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006e88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e8c:	b91b      	cbnz	r3, 8006e96 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e8e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e92:	f7fa fd7b 	bl	800198c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e96:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e98:	1d21      	adds	r1, r4, #4
 8006e9a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e9c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ea0:	f000 f9cf 	bl	8007242 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006ea4:	6862      	ldr	r2, [r4, #4]
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	f000 fa02 	bl	80072b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006eae:	2301      	movs	r3, #1

  return HAL_OK;
 8006eb0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006eb2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006eb8:	2001      	movs	r0, #1
 8006eba:	e7fc      	b.n	8006eb6 <HAL_SDRAM_Init+0x3a>

08006ebc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006ebc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006ebe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ec6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006ec8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006eca:	d010      	beq.n	8006eee <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006ecc:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006ed0:	2c01      	cmp	r4, #1
 8006ed2:	d110      	bne.n	8006ef6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ed4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006ed6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ed8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006edc:	f000 fa1f 	bl	800731e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d104      	bne.n	8006ef0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006ee6:	2305      	movs	r3, #5
 8006ee8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006eec:	2000      	movs	r0, #0
}
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006ef0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006ef4:	e7fa      	b.n	8006eec <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	e7f9      	b.n	8006eee <HAL_SDRAM_SendCommand+0x32>

08006efa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006efa:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006efc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006f00:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	b2d8      	uxtb	r0, r3
 8006f06:	d00d      	beq.n	8006f24 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006f08:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	b2dd      	uxtb	r5, r3
 8006f10:	d109      	bne.n	8006f26 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f12:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f14:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f16:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f1a:	f000 fa12 	bl	8007342 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006f1e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f20:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006f24:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006f26:	2001      	movs	r0, #1
 8006f28:	e7fc      	b.n	8006f24 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006f2a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f2c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d133      	bne.n	8006f9c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	2302      	movs	r3, #2
 8006f36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f3a:	6803      	ldr	r3, [r0, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f44:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <HAL_TIM_Base_Start_IT+0x74>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d01a      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x54>
 8006f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4e:	d017      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x54>
 8006f50:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d013      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x54>
 8006f58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x54>
 8006f60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x54>
 8006f68:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x54>
 8006f70:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x54>
 8006f78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d107      	bne.n	8006f90 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f80:	6899      	ldr	r1, [r3, #8]
 8006f82:	4a08      	ldr	r2, [pc, #32]	; (8006fa4 <HAL_TIM_Base_Start_IT+0x78>)
 8006f84:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f86:	2a06      	cmp	r2, #6
 8006f88:	d006      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x6c>
 8006f8a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006f8e:	d003      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f98:	2000      	movs	r0, #0
}
 8006f9a:	4770      	bx	lr
    return HAL_ERROR;
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	4770      	bx	lr
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	00010007 	.word	0x00010007

08006fa8 <HAL_TIM_OC_DelayElapsedCallback>:
 8006fa8:	4770      	bx	lr

08006faa <HAL_TIM_IC_CaptureCallback>:
 8006faa:	4770      	bx	lr

08006fac <HAL_TIM_PWM_PulseFinishedCallback>:
 8006fac:	4770      	bx	lr

08006fae <HAL_TIM_TriggerCallback>:
 8006fae:	4770      	bx	lr

08006fb0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fb0:	6803      	ldr	r3, [r0, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	0791      	lsls	r1, r2, #30
{
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fba:	d50f      	bpl.n	8006fdc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	0792      	lsls	r2, r2, #30
 8006fc0:	d50c      	bpl.n	8006fdc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fc2:	f06f 0202 	mvn.w	r2, #2
 8006fc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fc8:	2201      	movs	r2, #1
 8006fca:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	0799      	lsls	r1, r3, #30
 8006fd0:	f000 8085 	beq.w	80070de <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fd4:	f7ff ffe9 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	0752      	lsls	r2, r2, #29
 8006fe2:	d510      	bpl.n	8007006 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	0750      	lsls	r0, r2, #29
 8006fe8:	d50d      	bpl.n	8007006 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fea:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006ffc:	d075      	beq.n	80070ea <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffe:	f7ff ffd4 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	2300      	movs	r3, #0
 8007004:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	0711      	lsls	r1, r2, #28
 800700c:	d50f      	bpl.n	800702e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	0712      	lsls	r2, r2, #28
 8007012:	d50c      	bpl.n	800702e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007014:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007018:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800701a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800701c:	2204      	movs	r2, #4
 800701e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	079b      	lsls	r3, r3, #30
 8007024:	d067      	beq.n	80070f6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007026:	f7ff ffc0 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702a:	2300      	movs	r3, #0
 800702c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	06d0      	lsls	r0, r2, #27
 8007034:	d510      	bpl.n	8007058 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	06d1      	lsls	r1, r2, #27
 800703a:	d50d      	bpl.n	8007058 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800703c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007040:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007044:	2208      	movs	r2, #8
 8007046:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800704e:	d058      	beq.n	8007102 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8007050:	f7ff ffab 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007054:	2300      	movs	r3, #0
 8007056:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	07d2      	lsls	r2, r2, #31
 800705e:	d508      	bpl.n	8007072 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	07d0      	lsls	r0, r2, #31
 8007064:	d505      	bpl.n	8007072 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007066:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800706a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800706c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800706e:	f7fa fa51 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	0611      	lsls	r1, r2, #24
 8007078:	d508      	bpl.n	800708c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	0612      	lsls	r2, r2, #24
 800707e:	d505      	bpl.n	800708c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007080:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007084:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007086:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007088:	f000 f8d9 	bl	800723e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	05d0      	lsls	r0, r2, #23
 8007092:	d508      	bpl.n	80070a6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	0611      	lsls	r1, r2, #24
 8007098:	d505      	bpl.n	80070a6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800709a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800709e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80070a2:	f000 f8cd 	bl	8007240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	0652      	lsls	r2, r2, #25
 80070ac:	d508      	bpl.n	80070c0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	0650      	lsls	r0, r2, #25
 80070b2:	d505      	bpl.n	80070c0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80070bc:	f7ff ff77 	bl	8006fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	0691      	lsls	r1, r2, #26
 80070c6:	d522      	bpl.n	800710e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	0692      	lsls	r2, r2, #26
 80070cc:	d51f      	bpl.n	800710e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ce:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070d4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80070da:	f000 b8af 	b.w	800723c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070de:	f7ff ff63 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e2:	4620      	mov	r0, r4
 80070e4:	f7ff ff62 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
 80070e8:	e776      	b.n	8006fd8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ea:	f7ff ff5d 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff ff5c 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
 80070f4:	e785      	b.n	8007002 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f6:	f7ff ff57 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff ff56 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
 8007100:	e793      	b.n	800702a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	f7ff ff51 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007106:	4620      	mov	r0, r4
 8007108:	f7ff ff50 	bl	8006fac <HAL_TIM_PWM_PulseFinishedCallback>
 800710c:	e7a2      	b.n	8007054 <HAL_TIM_IRQHandler+0xa4>
}
 800710e:	bd10      	pop	{r4, pc}

08007110 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007110:	4a30      	ldr	r2, [pc, #192]	; (80071d4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8007112:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007114:	4290      	cmp	r0, r2
 8007116:	d012      	beq.n	800713e <TIM_Base_SetConfig+0x2e>
 8007118:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800711c:	d00f      	beq.n	800713e <TIM_Base_SetConfig+0x2e>
 800711e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007122:	4290      	cmp	r0, r2
 8007124:	d00b      	beq.n	800713e <TIM_Base_SetConfig+0x2e>
 8007126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800712a:	4290      	cmp	r0, r2
 800712c:	d007      	beq.n	800713e <TIM_Base_SetConfig+0x2e>
 800712e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007132:	4290      	cmp	r0, r2
 8007134:	d003      	beq.n	800713e <TIM_Base_SetConfig+0x2e>
 8007136:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800713a:	4290      	cmp	r0, r2
 800713c:	d119      	bne.n	8007172 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800713e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007144:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007146:	4a23      	ldr	r2, [pc, #140]	; (80071d4 <TIM_Base_SetConfig+0xc4>)
 8007148:	4290      	cmp	r0, r2
 800714a:	d029      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 800714c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007150:	d026      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007152:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007156:	4290      	cmp	r0, r2
 8007158:	d022      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 800715a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800715e:	4290      	cmp	r0, r2
 8007160:	d01e      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007166:	4290      	cmp	r0, r2
 8007168:	d01a      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 800716a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800716e:	4290      	cmp	r0, r2
 8007170:	d016      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007172:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <TIM_Base_SetConfig+0xc8>)
 8007174:	4290      	cmp	r0, r2
 8007176:	d013      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800717c:	4290      	cmp	r0, r2
 800717e:	d00f      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007184:	4290      	cmp	r0, r2
 8007186:	d00b      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007188:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800718c:	4290      	cmp	r0, r2
 800718e:	d007      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007194:	4290      	cmp	r0, r2
 8007196:	d003      	beq.n	80071a0 <TIM_Base_SetConfig+0x90>
 8007198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800719c:	4290      	cmp	r0, r2
 800719e:	d103      	bne.n	80071a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071a4:	68ca      	ldr	r2, [r1, #12]
 80071a6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a8:	694a      	ldr	r2, [r1, #20]
 80071aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80071b0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b2:	688b      	ldr	r3, [r1, #8]
 80071b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b6:	680b      	ldr	r3, [r1, #0]
 80071b8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <TIM_Base_SetConfig+0xc4>)
 80071bc:	4298      	cmp	r0, r3
 80071be:	d003      	beq.n	80071c8 <TIM_Base_SetConfig+0xb8>
 80071c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c4:	4298      	cmp	r0, r3
 80071c6:	d101      	bne.n	80071cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c8:	690b      	ldr	r3, [r1, #16]
 80071ca:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071cc:	2301      	movs	r3, #1
 80071ce:	6143      	str	r3, [r0, #20]
}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40014000 	.word	0x40014000

080071dc <HAL_TIM_Base_Init>:
{
 80071dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80071de:	4604      	mov	r4, r0
 80071e0:	b350      	cbz	r0, 8007238 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80071e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80071e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071ea:	b91b      	cbnz	r3, 80071f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80071ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80071f0:	f7ff fe9b 	bl	8006f2a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80071f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80071fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071fe:	f7ff ff87 	bl	8007110 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007202:	2301      	movs	r3, #1
  return HAL_OK;
 8007204:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007206:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800720a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800720e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007212:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007216:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800721a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800721e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800722a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800722e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007232:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007236:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007238:	2001      	movs	r0, #1
 800723a:	e7fc      	b.n	8007236 <HAL_TIM_Base_Init+0x5a>

0800723c <HAL_TIMEx_CommutCallback>:
 800723c:	4770      	bx	lr

0800723e <HAL_TIMEx_BreakCallback>:
 800723e:	4770      	bx	lr

08007240 <HAL_TIMEx_Break2Callback>:
 8007240:	4770      	bx	lr

08007242 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007246:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800724a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800724e:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8007252:	ea43 0308 	orr.w	r3, r3, r8
 8007256:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800725a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800725e:	6809      	ldr	r1, [r1, #0]
 8007260:	b991      	cbnz	r1, 8007288 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007262:	ea43 030e 	orr.w	r3, r3, lr
 8007266:	6801      	ldr	r1, [r0, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800726e:	ea43 030c 	orr.w	r3, r3, ip
 8007272:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8007276:	433b      	orrs	r3, r7
 8007278:	4333      	orrs	r3, r6
 800727a:	432b      	orrs	r3, r5
 800727c:	4323      	orrs	r3, r4
 800727e:	430b      	orrs	r3, r1
 8007280:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007282:	2000      	movs	r0, #0
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007288:	6801      	ldr	r1, [r0, #0]
 800728a:	ea43 030e 	orr.w	r3, r3, lr
 800728e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007292:	430b      	orrs	r3, r1
 8007294:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007296:	ea42 030c 	orr.w	r3, r2, ip
 800729a:	6841      	ldr	r1, [r0, #4]
 800729c:	433b      	orrs	r3, r7
 800729e:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 80072a2:	4333      	orrs	r3, r6
 80072a4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80072a8:	432b      	orrs	r3, r5
 80072aa:	4323      	orrs	r3, r4
 80072ac:	4313      	orrs	r3, r2
 80072ae:	6043      	str	r3, [r0, #4]
 80072b0:	e7e7      	b.n	8007282 <FMC_SDRAM_Init+0x40>

080072b2 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072b2:	68cb      	ldr	r3, [r1, #12]
 80072b4:	f103 3cff 	add.w	ip, r3, #4294967295
 80072b8:	694b      	ldr	r3, [r1, #20]
{
 80072ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072bc:	3b01      	subs	r3, #1
 80072be:	680f      	ldr	r7, [r1, #0]
 80072c0:	684c      	ldr	r4, [r1, #4]
 80072c2:	688e      	ldr	r6, [r1, #8]
 80072c4:	051b      	lsls	r3, r3, #20
 80072c6:	690d      	ldr	r5, [r1, #16]
 80072c8:	3c01      	subs	r4, #1
 80072ca:	6989      	ldr	r1, [r1, #24]
 80072cc:	3e01      	subs	r6, #1
 80072ce:	3d01      	subs	r5, #1
 80072d0:	3f01      	subs	r7, #1
 80072d2:	3901      	subs	r1, #1
 80072d4:	0124      	lsls	r4, r4, #4
 80072d6:	0236      	lsls	r6, r6, #8
 80072d8:	042d      	lsls	r5, r5, #16
 80072da:	0609      	lsls	r1, r1, #24
 80072dc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80072e0:	b95a      	cbnz	r2, 80072fa <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072e2:	433b      	orrs	r3, r7
 80072e4:	6882      	ldr	r2, [r0, #8]
 80072e6:	4323      	orrs	r3, r4
 80072e8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80072ec:	4333      	orrs	r3, r6
 80072ee:	432b      	orrs	r3, r5
 80072f0:	430b      	orrs	r3, r1
 80072f2:	4313      	orrs	r3, r2
 80072f4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80072f6:	2000      	movs	r0, #0
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072fa:	6882      	ldr	r2, [r0, #8]
 80072fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007300:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007304:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007306:	ea44 0306 	orr.w	r3, r4, r6
 800730a:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800730c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800730e:	68c2      	ldr	r2, [r0, #12]
 8007310:	432b      	orrs	r3, r5
 8007312:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007316:	430b      	orrs	r3, r1
 8007318:	4313      	orrs	r3, r2
 800731a:	60c3      	str	r3, [r0, #12]
 800731c:	e7eb      	b.n	80072f6 <FMC_SDRAM_Timing_Init+0x44>

0800731e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800731e:	6902      	ldr	r2, [r0, #16]
{
 8007320:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007322:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007326:	0d92      	lsrs	r2, r2, #22
 8007328:	4323      	orrs	r3, r4
 800732a:	68cc      	ldr	r4, [r1, #12]
 800732c:	0592      	lsls	r2, r2, #22
 800732e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8007332:	4313      	orrs	r3, r2
 8007334:	688a      	ldr	r2, [r1, #8]
 8007336:	3a01      	subs	r2, #1
 8007338:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800733c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800733e:	2000      	movs	r0, #0
 8007340:	bd10      	pop	{r4, pc}

08007342 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007342:	6943      	ldr	r3, [r0, #20]
 8007344:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007348:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800734c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007350:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8007352:	2000      	movs	r0, #0
 8007354:	4770      	bx	lr

08007356 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007356:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007358:	f002 fbea 	bl	8009b30 <pvTimerGetTimerID>

  if (callb != NULL) {
 800735c:	b120      	cbz	r0, 8007368 <TimerCallback+0x12>
    callb->func (callb->arg);
 800735e:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
 8007362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
 8007366:	4718      	bx	r3
}
 8007368:	bd10      	pop	{r4, pc}
	...

0800736c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736c:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8007370:	b113      	cbz	r3, 8007378 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8007372:	f06f 0005 	mvn.w	r0, #5
 8007376:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007378:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800737c:	4b07      	ldr	r3, [pc, #28]	; (800739c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800737e:	b912      	cbnz	r2, 8007386 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007380:	f3ef 8211 	mrs	r2, BASEPRI
 8007384:	b112      	cbz	r2, 800738c <osKernelInitialize+0x20>
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	2a02      	cmp	r2, #2
 800738a:	d0f2      	beq.n	8007372 <osKernelInitialize+0x6>
    if (KernelState == osKernelInactive) {
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	b910      	cbnz	r0, 8007396 <osKernelInitialize+0x2a>
      KernelState = osKernelReady;
 8007390:	2201      	movs	r2, #1
 8007392:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007394:	4770      	bx	lr
      stat = osError;
 8007396:	f04f 30ff 	mov.w	r0, #4294967295
}
 800739a:	4770      	bx	lr
 800739c:	20002130 	.word	0x20002130

080073a0 <osKernelStart>:
osStatus_t osKernelStart (void) {
 80073a0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a2:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80073a6:	b113      	cbz	r3, 80073ae <osKernelStart+0xe>
    stat = osErrorISR;
 80073a8:	f06f 0005 	mvn.w	r0, #5
}
 80073ac:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ae:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80073b2:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 80073b4:	b912      	cbnz	r2, 80073bc <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073b6:	f3ef 8211 	mrs	r2, BASEPRI
 80073ba:	b112      	cbz	r2, 80073c2 <osKernelStart+0x22>
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	2a02      	cmp	r2, #2
 80073c0:	d0f2      	beq.n	80073a8 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	2a01      	cmp	r2, #1
 80073c6:	d105      	bne.n	80073d4 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 80073c8:	2202      	movs	r2, #2
 80073ca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80073cc:	f001 fee0 	bl	8009190 <vTaskStartScheduler>
      stat = osOK;
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7eb      	b.n	80073ac <osKernelStart+0xc>
      stat = osError;
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80073d8:	e7e8      	b.n	80073ac <osKernelStart+0xc>
 80073da:	bf00      	nop
 80073dc:	20002130 	.word	0x20002130

080073e0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e2:	4614      	mov	r4, r2
 80073e4:	b087      	sub	sp, #28
  hTask = NULL;
 80073e6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073e8:	460b      	mov	r3, r1
  hTask = NULL;
 80073ea:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ec:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 80073f0:	bb1a      	cbnz	r2, 800743a <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f2:	f3ef 8210 	mrs	r2, PRIMASK
 80073f6:	b912      	cbnz	r2, 80073fe <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073f8:	f3ef 8211 	mrs	r2, BASEPRI
 80073fc:	b11a      	cbz	r2, 8007406 <osThreadNew+0x26>
 80073fe:	4a21      	ldr	r2, [pc, #132]	; (8007484 <osThreadNew+0xa4>)
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	2a02      	cmp	r2, #2
 8007404:	d019      	beq.n	800743a <osThreadNew+0x5a>
 8007406:	b1c0      	cbz	r0, 800743a <osThreadNew+0x5a>
    if (attr != NULL) {
 8007408:	b36c      	cbz	r4, 8007466 <osThreadNew+0x86>
      if (attr->priority != osPriorityNone) {
 800740a:	69a5      	ldr	r5, [r4, #24]
 800740c:	2d00      	cmp	r5, #0
 800740e:	bf08      	it	eq
 8007410:	2518      	moveq	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007412:	1e6a      	subs	r2, r5, #1
 8007414:	46ac      	mov	ip, r5
 8007416:	2a37      	cmp	r2, #55	; 0x37
 8007418:	d82a      	bhi.n	8007470 <osThreadNew+0x90>
 800741a:	6862      	ldr	r2, [r4, #4]
 800741c:	07d2      	lsls	r2, r2, #31
 800741e:	d427      	bmi.n	8007470 <osThreadNew+0x90>
      if (attr->stack_size > 0U) {
 8007420:	6966      	ldr	r6, [r4, #20]
 8007422:	b16e      	cbz	r6, 8007440 <osThreadNew+0x60>
        stack = attr->stack_size / sizeof(StackType_t);
 8007424:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8007426:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007428:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800742c:	b157      	cbz	r7, 8007444 <osThreadNew+0x64>
 800742e:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8007432:	d902      	bls.n	800743a <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007434:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007436:	b104      	cbz	r4, 800743a <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007438:	b9e6      	cbnz	r6, 8007474 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 800743a:	9805      	ldr	r0, [sp, #20]
}
 800743c:	b007      	add	sp, #28
 800743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007440:	2280      	movs	r2, #128	; 0x80
 8007442:	e7f0      	b.n	8007426 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007444:	f1be 0f00 	cmp.w	lr, #0
 8007448:	d1f7      	bne.n	800743a <osThreadNew+0x5a>
      if (mem == 0) {
 800744a:	6924      	ldr	r4, [r4, #16]
 800744c:	2c00      	cmp	r4, #0
 800744e:	d1f4      	bne.n	800743a <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007450:	ac05      	add	r4, sp, #20
 8007452:	b292      	uxth	r2, r2
 8007454:	e9cd c400 	strd	ip, r4, [sp]
 8007458:	f001 fd0f 	bl	8008e7a <xTaskCreate>
 800745c:	2801      	cmp	r0, #1
          hTask = NULL;
 800745e:	bf1c      	itt	ne
 8007460:	2300      	movne	r3, #0
 8007462:	9305      	strne	r3, [sp, #20]
 8007464:	e7e9      	b.n	800743a <osThreadNew+0x5a>
    name = NULL;
 8007466:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8007468:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	e7ef      	b.n	8007450 <osThreadNew+0x70>
        return (NULL);
 8007470:	2000      	movs	r0, #0
 8007472:	e7e3      	b.n	800743c <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007474:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007478:	9500      	str	r5, [sp, #0]
 800747a:	f001 fcc0 	bl	8008dfe <xTaskCreateStatic>
 800747e:	9005      	str	r0, [sp, #20]
 8007480:	e7db      	b.n	800743a <osThreadNew+0x5a>
 8007482:	bf00      	nop
 8007484:	20002130 	.word	0x20002130

08007488 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8007488:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800748a:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800748e:	b113      	cbz	r3, 8007496 <osDelay+0xe>
    stat = osErrorISR;
 8007490:	f06f 0005 	mvn.w	r0, #5
}
 8007494:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007496:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800749a:	b913      	cbnz	r3, 80074a2 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800749c:	f3ef 8311 	mrs	r3, BASEPRI
 80074a0:	b11b      	cbz	r3, 80074aa <osDelay+0x22>
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <osDelay+0x30>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d0f2      	beq.n	8007490 <osDelay+0x8>
    if (ticks != 0U) {
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d0f2      	beq.n	8007494 <osDelay+0xc>
      vTaskDelay(ticks);
 80074ae:	f001 fe2d 	bl	800910c <vTaskDelay>
    stat = osOK;
 80074b2:	2000      	movs	r0, #0
 80074b4:	e7ee      	b.n	8007494 <osDelay+0xc>
 80074b6:	bf00      	nop
 80074b8:	20002130 	.word	0x20002130

080074bc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80074bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074be:	4606      	mov	r6, r0
 80074c0:	460d      	mov	r5, r1
 80074c2:	4617      	mov	r7, r2
 80074c4:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c6:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 80074ca:	b113      	cbz	r3, 80074d2 <osTimerNew+0x16>
  hTimer = NULL;
 80074cc:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 80074ce:	b003      	add	sp, #12
 80074d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d2:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (func != NULL)) {
 80074d6:	b913      	cbnz	r3, 80074de <osTimerNew+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074d8:	f3ef 8311 	mrs	r3, BASEPRI
 80074dc:	b11b      	cbz	r3, 80074e6 <osTimerNew+0x2a>
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <osTimerNew+0x74>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d0f2      	beq.n	80074cc <osTimerNew+0x10>
 80074e6:	2e00      	cmp	r6, #0
 80074e8:	d0f0      	beq.n	80074cc <osTimerNew+0x10>
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80074ea:	2008      	movs	r0, #8
 80074ec:	f000 fab4 	bl	8007a58 <pvPortMalloc>
    if (callb != NULL) {
 80074f0:	4603      	mov	r3, r0
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d0ea      	beq.n	80074cc <osTimerNew+0x10>
      if (type == osTimerOnce) {
 80074f6:	1e2a      	subs	r2, r5, #0
      callb->arg  = argument;
 80074f8:	e9c0 6700 	strd	r6, r7, [r0]
      if (type == osTimerOnce) {
 80074fc:	bf18      	it	ne
 80074fe:	2201      	movne	r2, #1
      if (attr != NULL) {
 8007500:	b1a4      	cbz	r4, 800752c <osTimerNew+0x70>
        if (attr->name != NULL) {
 8007502:	6820      	ldr	r0, [r4, #0]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007504:	e9d4 1402 	ldrd	r1, r4, [r4, #8]
 8007508:	b141      	cbz	r1, 800751c <osTimerNew+0x60>
 800750a:	2c2b      	cmp	r4, #43	; 0x2b
 800750c:	d9de      	bls.n	80074cc <osTimerNew+0x10>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800750e:	9101      	str	r1, [sp, #4]
 8007510:	4908      	ldr	r1, [pc, #32]	; (8007534 <osTimerNew+0x78>)
 8007512:	9100      	str	r1, [sp, #0]
 8007514:	2101      	movs	r1, #1
 8007516:	f002 f96f 	bl	80097f8 <xTimerCreateStatic>
 800751a:	e7d8      	b.n	80074ce <osTimerNew+0x12>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800751c:	2c00      	cmp	r4, #0
 800751e:	d1d5      	bne.n	80074cc <osTimerNew+0x10>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007520:	4904      	ldr	r1, [pc, #16]	; (8007534 <osTimerNew+0x78>)
 8007522:	9100      	str	r1, [sp, #0]
 8007524:	2101      	movs	r1, #1
 8007526:	f002 f94d 	bl	80097c4 <xTimerCreate>
  return ((osTimerId_t)hTimer);
 800752a:	e7d0      	b.n	80074ce <osTimerNew+0x12>
      name = NULL;
 800752c:	4620      	mov	r0, r4
 800752e:	e7f7      	b.n	8007520 <osTimerNew+0x64>
 8007530:	20002130 	.word	0x20002130
 8007534:	08007357 	.word	0x08007357

08007538 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007538:	b507      	push	{r0, r1, r2, lr}
 800753a:	460a      	mov	r2, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800753c:	f3ef 8305 	mrs	r3, IPSR
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8007540:	b123      	cbz	r3, 800754c <osTimerStart+0x14>
    stat = osErrorISR;
 8007542:	f06f 0005 	mvn.w	r0, #5
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8007546:	b003      	add	sp, #12
 8007548:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007550:	b913      	cbnz	r3, 8007558 <osTimerStart+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007552:	f3ef 8311 	mrs	r3, BASEPRI
 8007556:	b11b      	cbz	r3, 8007560 <osTimerStart+0x28>
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <osTimerStart+0x48>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d0f0      	beq.n	8007542 <osTimerStart+0xa>
  else if (hTimer == NULL) {
 8007560:	b150      	cbz	r0, 8007578 <osTimerStart+0x40>
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007562:	2300      	movs	r3, #0
 8007564:	2104      	movs	r1, #4
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	f002 f972 	bl	8009850 <xTimerGenericCommand>
      stat = osErrorResource;
 800756c:	2801      	cmp	r0, #1
 800756e:	bf0c      	ite	eq
 8007570:	2000      	moveq	r0, #0
 8007572:	f06f 0002 	mvnne.w	r0, #2
 8007576:	e7e6      	b.n	8007546 <osTimerStart+0xe>
    stat = osErrorParameter;
 8007578:	f06f 0003 	mvn.w	r0, #3
 800757c:	e7e3      	b.n	8007546 <osTimerStart+0xe>
 800757e:	bf00      	nop
 8007580:	20002130 	.word	0x20002130

08007584 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007588:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800758c:	b116      	cbz	r6, 8007594 <osMutexNew+0x10>
  hMutex = NULL;
 800758e:	2700      	movs	r7, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8007590:	4638      	mov	r0, r7
 8007592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007594:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ()) {
 8007598:	b913      	cbnz	r3, 80075a0 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800759a:	f3ef 8311 	mrs	r3, BASEPRI
 800759e:	b11b      	cbz	r3, 80075a8 <osMutexNew+0x24>
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <osMutexNew+0x84>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d0f2      	beq.n	800758e <osMutexNew+0xa>
    if (attr != NULL) {
 80075a8:	b324      	cbz	r4, 80075f4 <osMutexNew+0x70>
      type = attr->attr_bits;
 80075aa:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80075ac:	072b      	lsls	r3, r5, #28
 80075ae:	d4ee      	bmi.n	800758e <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80075b0:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075b4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80075b8:	b199      	cbz	r1, 80075e2 <osMutexNew+0x5e>
 80075ba:	2b4f      	cmp	r3, #79	; 0x4f
 80075bc:	d9e7      	bls.n	800758e <osMutexNew+0xa>
        if (rmtx != 0U) {
 80075be:	b1bd      	cbz	r5, 80075f0 <osMutexNew+0x6c>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80075c0:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80075c2:	f000 ff53 	bl	800846c <xQueueCreateMutexStatic>
 80075c6:	4607      	mov	r7, r0
      if (hMutex != NULL) {
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d0e0      	beq.n	800758e <osMutexNew+0xa>
          name = attr->name;
 80075cc:	6824      	ldr	r4, [r4, #0]
 80075ce:	462e      	mov	r6, r5
        vQueueAddToRegistry (hMutex, name);
 80075d0:	4621      	mov	r1, r4
 80075d2:	4638      	mov	r0, r7
 80075d4:	f001 fa4a 	bl	8008a6c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80075d8:	2e00      	cmp	r6, #0
 80075da:	d0d9      	beq.n	8007590 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80075dc:	f047 0701 	orr.w	r7, r7, #1
  return ((osMutexId_t)hMutex);
 80075e0:	e7d6      	b.n	8007590 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d3      	bne.n	800758e <osMutexNew+0xa>
          if (rmtx != 0U) {
 80075e6:	b12d      	cbz	r5, 80075f4 <osMutexNew+0x70>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80075e8:	2004      	movs	r0, #4
 80075ea:	f000 ff74 	bl	80084d6 <xQueueCreateMutex>
 80075ee:	e7ea      	b.n	80075c6 <osMutexNew+0x42>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80075f0:	2001      	movs	r0, #1
 80075f2:	e7e6      	b.n	80075c2 <osMutexNew+0x3e>
            hMutex = xSemaphoreCreateMutex ();
 80075f4:	2001      	movs	r0, #1
 80075f6:	f000 ff6e 	bl	80084d6 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80075fa:	4607      	mov	r7, r0
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d0c6      	beq.n	800758e <osMutexNew+0xa>
        if (attr != NULL) {
 8007600:	2c00      	cmp	r4, #0
 8007602:	d0e5      	beq.n	80075d0 <osMutexNew+0x4c>
 8007604:	2500      	movs	r5, #0
 8007606:	e7e1      	b.n	80075cc <osMutexNew+0x48>
 8007608:	20002130 	.word	0x20002130

0800760c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800760c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800760e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007612:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8007614:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007618:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761a:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800761e:	b112      	cbz	r2, 8007626 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8007620:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8007624:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007626:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800762a:	b912      	cbnz	r2, 8007632 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800762c:	f3ef 8211 	mrs	r2, BASEPRI
 8007630:	b11a      	cbz	r2, 800763a <osMutexAcquire+0x2e>
 8007632:	4a0d      	ldr	r2, [pc, #52]	; (8007668 <osMutexAcquire+0x5c>)
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	2a02      	cmp	r2, #2
 8007638:	d0f2      	beq.n	8007620 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800763a:	b188      	cbz	r0, 8007660 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800763c:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800763e:	b163      	cbz	r3, 800765a <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007640:	f001 f99b 	bl	800897a <xQueueTakeMutexRecursive>
 8007644:	2801      	cmp	r0, #1
 8007646:	d101      	bne.n	800764c <osMutexAcquire+0x40>
  stat = osOK;
 8007648:	2000      	movs	r0, #0
 800764a:	e7eb      	b.n	8007624 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800764c:	2c00      	cmp	r4, #0
 800764e:	bf14      	ite	ne
 8007650:	f06f 0001 	mvnne.w	r0, #1
 8007654:	f06f 0002 	mvneq.w	r0, #2
 8007658:	e7e4      	b.n	8007624 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800765a:	f001 f8c3 	bl	80087e4 <xQueueSemaphoreTake>
 800765e:	e7f1      	b.n	8007644 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8007660:	f06f 0003 	mvn.w	r0, #3
 8007664:	e7de      	b.n	8007624 <osMutexAcquire+0x18>
 8007666:	bf00      	nop
 8007668:	20002130 	.word	0x20002130

0800766c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800766c:	b508      	push	{r3, lr}
 800766e:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007670:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8007674:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007678:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800767c:	b112      	cbz	r2, 8007684 <osMutexRelease+0x18>
    stat = osErrorISR;
 800767e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8007682:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007684:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8007688:	b912      	cbnz	r2, 8007690 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800768a:	f3ef 8211 	mrs	r2, BASEPRI
 800768e:	b11a      	cbz	r2, 8007698 <osMutexRelease+0x2c>
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <osMutexRelease+0x50>)
 8007692:	6812      	ldr	r2, [r2, #0]
 8007694:	2a02      	cmp	r2, #2
 8007696:	d0f2      	beq.n	800767e <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8007698:	b168      	cbz	r0, 80076b6 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800769a:	b13b      	cbz	r3, 80076ac <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800769c:	f000 fefb 	bl	8008496 <xQueueGiveMutexRecursive>
 80076a0:	2801      	cmp	r0, #1
  stat = osOK;
 80076a2:	bf0c      	ite	eq
 80076a4:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80076a6:	f06f 0002 	mvnne.w	r0, #2
 80076aa:	e7ea      	b.n	8007682 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80076ac:	461a      	mov	r2, r3
 80076ae:	4619      	mov	r1, r3
 80076b0:	f000 fe21 	bl	80082f6 <xQueueGenericSend>
 80076b4:	e7f4      	b.n	80076a0 <osMutexRelease+0x34>
    stat = osErrorParameter;
 80076b6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80076ba:	e7e2      	b.n	8007682 <osMutexRelease+0x16>
 80076bc:	20002130 	.word	0x20002130

080076c0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80076c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076c2:	460e      	mov	r6, r1
 80076c4:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80076ca:	b11b      	cbz	r3, 80076d4 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 80076cc:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80076ce:	4620      	mov	r0, r4
 80076d0:	b002      	add	sp, #8
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d4:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80076d8:	b913      	cbnz	r3, 80076e0 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076da:	f3ef 8311 	mrs	r3, BASEPRI
 80076de:	b11b      	cbz	r3, 80076e8 <osSemaphoreNew+0x28>
 80076e0:	4b21      	ldr	r3, [pc, #132]	; (8007768 <osSemaphoreNew+0xa8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d0f1      	beq.n	80076cc <osSemaphoreNew+0xc>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d0ef      	beq.n	80076cc <osSemaphoreNew+0xc>
 80076ec:	42b0      	cmp	r0, r6
 80076ee:	d3ed      	bcc.n	80076cc <osSemaphoreNew+0xc>
    if (attr != NULL) {
 80076f0:	b1ed      	cbz	r5, 800772e <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076f2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80076f6:	b1c3      	cbz	r3, 800772a <osSemaphoreNew+0x6a>
 80076f8:	2a4f      	cmp	r2, #79	; 0x4f
 80076fa:	d9e7      	bls.n	80076cc <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80076fc:	2801      	cmp	r0, #1
 80076fe:	d129      	bne.n	8007754 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007700:	2203      	movs	r2, #3
 8007702:	9200      	str	r2, [sp, #0]
 8007704:	2200      	movs	r2, #0
 8007706:	4611      	mov	r1, r2
 8007708:	f000 fd70 	bl	80081ec <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800770c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800770e:	2800      	cmp	r0, #0
 8007710:	d0dc      	beq.n	80076cc <osSemaphoreNew+0xc>
 8007712:	b1ce      	cbz	r6, 8007748 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007714:	2300      	movs	r3, #0
 8007716:	461a      	mov	r2, r3
 8007718:	4619      	mov	r1, r3
 800771a:	f000 fdec 	bl	80082f6 <xQueueGenericSend>
 800771e:	2801      	cmp	r0, #1
 8007720:	d012      	beq.n	8007748 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8007722:	4620      	mov	r0, r4
 8007724:	f001 f9c8 	bl	8008ab8 <vQueueDelete>
 8007728:	e7d0      	b.n	80076cc <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800772a:	2a00      	cmp	r2, #0
 800772c:	d1ce      	bne.n	80076cc <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800772e:	2801      	cmp	r0, #1
 8007730:	d104      	bne.n	800773c <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8007732:	2203      	movs	r2, #3
 8007734:	2100      	movs	r1, #0
 8007736:	f000 fd6d 	bl	8008214 <xQueueGenericCreate>
 800773a:	e7e7      	b.n	800770c <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800773c:	4631      	mov	r1, r6
 800773e:	f000 fdb8 	bl	80082b2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8007742:	4604      	mov	r4, r0
 8007744:	2800      	cmp	r0, #0
 8007746:	d0c1      	beq.n	80076cc <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8007748:	b95d      	cbnz	r5, 8007762 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800774a:	4629      	mov	r1, r5
 800774c:	4620      	mov	r0, r4
 800774e:	f001 f98d 	bl	8008a6c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8007752:	e7bc      	b.n	80076ce <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007754:	461a      	mov	r2, r3
 8007756:	4631      	mov	r1, r6
 8007758:	f000 fd85 	bl	8008266 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800775c:	4604      	mov	r4, r0
 800775e:	2800      	cmp	r0, #0
 8007760:	d0b4      	beq.n	80076cc <osSemaphoreNew+0xc>
          name = attr->name;
 8007762:	682d      	ldr	r5, [r5, #0]
 8007764:	e7f1      	b.n	800774a <osSemaphoreNew+0x8a>
 8007766:	bf00      	nop
 8007768:	20002130 	.word	0x20002130

0800776c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800776c:	b513      	push	{r0, r1, r4, lr}
 800776e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007770:	b918      	cbnz	r0, 800777a <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8007772:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007776:	b002      	add	sp, #8
 8007778:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800777a:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800777e:	b163      	cbz	r3, 800779a <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8007780:	2c00      	cmp	r4, #0
 8007782:	d1f6      	bne.n	8007772 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007784:	aa01      	add	r2, sp, #4
 8007786:	4621      	mov	r1, r4
      yield = pdFALSE;
 8007788:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800778a:	f001 f91a 	bl	80089c2 <xQueueReceiveFromISR>
 800778e:	2801      	cmp	r0, #1
 8007790:	d113      	bne.n	80077ba <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	b9a3      	cbnz	r3, 80077c0 <osSemaphoreAcquire+0x54>
  stat = osOK;
 8007796:	2000      	movs	r0, #0
 8007798:	e7ed      	b.n	8007776 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800779e:	b913      	cbnz	r3, 80077a6 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077a0:	f3ef 8311 	mrs	r3, BASEPRI
 80077a4:	b11b      	cbz	r3, 80077ae <osSemaphoreAcquire+0x42>
 80077a6:	4b0d      	ldr	r3, [pc, #52]	; (80077dc <osSemaphoreAcquire+0x70>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d0e8      	beq.n	8007780 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80077ae:	4621      	mov	r1, r4
 80077b0:	f001 f818 	bl	80087e4 <xQueueSemaphoreTake>
 80077b4:	2801      	cmp	r0, #1
 80077b6:	d0ee      	beq.n	8007796 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 80077b8:	b96c      	cbnz	r4, 80077d6 <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 80077ba:	f06f 0002 	mvn.w	r0, #2
 80077be:	e7da      	b.n	8007776 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80077c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80077c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	e7df      	b.n	8007796 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 80077d6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80077da:	e7cc      	b.n	8007776 <osSemaphoreAcquire+0xa>
 80077dc:	20002130 	.word	0x20002130

080077e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80077e0:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80077e2:	b370      	cbz	r0, 8007842 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80077e8:	b14b      	cbz	r3, 80077fe <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 80077ea:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80077ec:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80077ee:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80077f0:	f000 fef7 	bl	80085e2 <xQueueGiveFromISR>
 80077f4:	2801      	cmp	r0, #1
 80077f6:	d014      	beq.n	8007822 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80077f8:	f06f 0002 	mvn.w	r0, #2
 80077fc:	e014      	b.n	8007828 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077fe:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007802:	b913      	cbnz	r3, 800780a <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007804:	f3ef 8311 	mrs	r3, BASEPRI
 8007808:	b11b      	cbz	r3, 8007812 <osSemaphoreRelease+0x32>
 800780a:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <osSemaphoreRelease+0x68>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d0eb      	beq.n	80077ea <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007812:	2300      	movs	r3, #0
 8007814:	461a      	mov	r2, r3
 8007816:	4619      	mov	r1, r3
 8007818:	f000 fd6d 	bl	80082f6 <xQueueGenericSend>
 800781c:	2801      	cmp	r0, #1
 800781e:	d002      	beq.n	8007826 <osSemaphoreRelease+0x46>
 8007820:	e7ea      	b.n	80077f8 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	b913      	cbnz	r3, 800782c <osSemaphoreRelease+0x4c>
  stat = osOK;
 8007826:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8007828:	b002      	add	sp, #8
 800782a:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800782c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007834:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	e7f1      	b.n	8007826 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8007842:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007846:	e7ef      	b.n	8007828 <osSemaphoreRelease+0x48>
 8007848:	20002130 	.word	0x20002130

0800784c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800784c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800784e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007850:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007854:	b11b      	cbz	r3, 800785e <osMessageQueueNew+0x12>
  hQueue = NULL;
 8007856:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007858:	4628      	mov	r0, r5
 800785a:	b002      	add	sp, #8
 800785c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785e:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007862:	b913      	cbnz	r3, 800786a <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007864:	f3ef 8311 	mrs	r3, BASEPRI
 8007868:	b11b      	cbz	r3, 8007872 <osMessageQueueNew+0x26>
 800786a:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <osMessageQueueNew+0x88>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d0f1      	beq.n	8007856 <osMessageQueueNew+0xa>
 8007872:	2800      	cmp	r0, #0
 8007874:	d0ef      	beq.n	8007856 <osMessageQueueNew+0xa>
 8007876:	2900      	cmp	r1, #0
 8007878:	d0ed      	beq.n	8007856 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800787a:	b1ec      	cbz	r4, 80078b8 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800787c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8007880:	b193      	cbz	r3, 80078a8 <osMessageQueueNew+0x5c>
 8007882:	2a4f      	cmp	r2, #79	; 0x4f
 8007884:	d9e7      	bls.n	8007856 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007886:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007888:	2a00      	cmp	r2, #0
 800788a:	d0e4      	beq.n	8007856 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800788c:	fb01 f500 	mul.w	r5, r1, r0
 8007890:	6966      	ldr	r6, [r4, #20]
 8007892:	42ae      	cmp	r6, r5
 8007894:	d3df      	bcc.n	8007856 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007896:	2500      	movs	r5, #0
 8007898:	9500      	str	r5, [sp, #0]
 800789a:	f000 fca7 	bl	80081ec <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800789e:	4605      	mov	r5, r0
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0d8      	beq.n	8007856 <osMessageQueueNew+0xa>
        name = attr->name;
 80078a4:	6824      	ldr	r4, [r4, #0]
 80078a6:	e00f      	b.n	80078c8 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078a8:	2a00      	cmp	r2, #0
 80078aa:	d1d4      	bne.n	8007856 <osMessageQueueNew+0xa>
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1d1      	bne.n	8007856 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078b2:	6963      	ldr	r3, [r4, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1ce      	bne.n	8007856 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 80078b8:	2200      	movs	r2, #0
 80078ba:	f000 fcab 	bl	8008214 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80078be:	4605      	mov	r5, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d0c8      	beq.n	8007856 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80078c4:	2c00      	cmp	r4, #0
 80078c6:	d1ed      	bne.n	80078a4 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f001 f8ce 	bl	8008a6c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80078d0:	e7c2      	b.n	8007858 <osMessageQueueNew+0xc>
 80078d2:	bf00      	nop
 80078d4:	20002130 	.word	0x20002130

080078d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80078d8:	b513      	push	{r0, r1, r4, lr}
 80078da:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078dc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80078e0:	b123      	cbz	r3, 80078ec <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078e2:	b9d8      	cbnz	r0, 800791c <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 80078e4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80078e8:	b002      	add	sp, #8
 80078ea:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ec:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80078f0:	b913      	cbnz	r3, 80078f8 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078f2:	f3ef 8311 	mrs	r3, BASEPRI
 80078f6:	b11b      	cbz	r3, 8007900 <osMessageQueuePut+0x28>
 80078f8:	4b17      	ldr	r3, [pc, #92]	; (8007958 <osMessageQueuePut+0x80>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d0f0      	beq.n	80078e2 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007900:	2800      	cmp	r0, #0
 8007902:	d0ef      	beq.n	80078e4 <osMessageQueuePut+0xc>
 8007904:	2900      	cmp	r1, #0
 8007906:	d0ed      	beq.n	80078e4 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007908:	2300      	movs	r3, #0
 800790a:	4622      	mov	r2, r4
 800790c:	f000 fcf3 	bl	80082f6 <xQueueGenericSend>
 8007910:	2801      	cmp	r0, #1
 8007912:	d010      	beq.n	8007936 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8007914:	b9e4      	cbnz	r4, 8007950 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 8007916:	f06f 0002 	mvn.w	r0, #2
 800791a:	e7e5      	b.n	80078e8 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800791c:	2900      	cmp	r1, #0
 800791e:	d0e1      	beq.n	80078e4 <osMessageQueuePut+0xc>
 8007920:	2c00      	cmp	r4, #0
 8007922:	d1df      	bne.n	80078e4 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007924:	4623      	mov	r3, r4
 8007926:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007928:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800792a:	f000 fdf1 	bl	8008510 <xQueueGenericSendFromISR>
 800792e:	2801      	cmp	r0, #1
 8007930:	d1f1      	bne.n	8007916 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	b90b      	cbnz	r3, 800793a <osMessageQueuePut+0x62>
  stat = osOK;
 8007936:	2000      	movs	r0, #0
 8007938:	e7d6      	b.n	80078e8 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800793a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	e7f2      	b.n	8007936 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8007950:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007954:	e7c8      	b.n	80078e8 <osMessageQueuePut+0x10>
 8007956:	bf00      	nop
 8007958:	20002130 	.word	0x20002130

0800795c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800795c:	b513      	push	{r0, r1, r4, lr}
 800795e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007960:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007964:	b123      	cbz	r3, 8007970 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007966:	b9d0      	cbnz	r0, 800799e <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8007968:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800796c:	b002      	add	sp, #8
 800796e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007970:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007974:	b913      	cbnz	r3, 800797c <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007976:	f3ef 8311 	mrs	r3, BASEPRI
 800797a:	b11b      	cbz	r3, 8007984 <osMessageQueueGet+0x28>
 800797c:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <osMessageQueueGet+0x7c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d0f0      	beq.n	8007966 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007984:	2800      	cmp	r0, #0
 8007986:	d0ef      	beq.n	8007968 <osMessageQueueGet+0xc>
 8007988:	2900      	cmp	r1, #0
 800798a:	d0ed      	beq.n	8007968 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800798c:	4622      	mov	r2, r4
 800798e:	f000 fe84 	bl	800869a <xQueueReceive>
 8007992:	2801      	cmp	r0, #1
 8007994:	d00f      	beq.n	80079b6 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 8007996:	b9dc      	cbnz	r4, 80079d0 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8007998:	f06f 0002 	mvn.w	r0, #2
 800799c:	e7e6      	b.n	800796c <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800799e:	2900      	cmp	r1, #0
 80079a0:	d0e2      	beq.n	8007968 <osMessageQueueGet+0xc>
 80079a2:	2c00      	cmp	r4, #0
 80079a4:	d1e0      	bne.n	8007968 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80079a6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80079a8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80079aa:	f001 f80a 	bl	80089c2 <xQueueReceiveFromISR>
 80079ae:	2801      	cmp	r0, #1
 80079b0:	d1f2      	bne.n	8007998 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 80079b2:	9b01      	ldr	r3, [sp, #4]
 80079b4:	b90b      	cbnz	r3, 80079ba <osMessageQueueGet+0x5e>
  stat = osOK;
 80079b6:	2000      	movs	r0, #0
 80079b8:	e7d8      	b.n	800796c <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80079ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	e7f2      	b.n	80079b6 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 80079d0:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80079d4:	e7ca      	b.n	800796c <osMessageQueueGet+0x10>
 80079d6:	bf00      	nop
 80079d8:	20002130 	.word	0x20002130

080079dc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079dc:	4b03      	ldr	r3, [pc, #12]	; (80079ec <vApplicationGetIdleTaskMemory+0x10>)
 80079de:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079e0:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <vApplicationGetIdleTaskMemory+0x14>)
 80079e2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	6013      	str	r3, [r2, #0]
}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	200020d0 	.word	0x200020d0
 80079f0:	20001ed0 	.word	0x20001ed0

080079f4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <vApplicationGetTimerTaskMemory+0x10>)
 80079f6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079f8:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <vApplicationGetTimerTaskMemory+0x14>)
 80079fa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a00:	6013      	str	r3, [r2, #0]
}
 8007a02:	4770      	bx	lr
 8007a04:	20002534 	.word	0x20002534
 8007a08:	20002134 	.word	0x20002134

08007a0c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <prvInsertBlockIntoFreeList+0x44>)
{
 8007a0e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a10:	461a      	mov	r2, r3
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4283      	cmp	r3, r0
 8007a16:	d3fb      	bcc.n	8007a10 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a18:	6854      	ldr	r4, [r2, #4]
 8007a1a:	1911      	adds	r1, r2, r4
 8007a1c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a1e:	bf01      	itttt	eq
 8007a20:	6841      	ldreq	r1, [r0, #4]
 8007a22:	4610      	moveq	r0, r2
 8007a24:	1909      	addeq	r1, r1, r4
 8007a26:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a28:	6844      	ldr	r4, [r0, #4]
 8007a2a:	1901      	adds	r1, r0, r4
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	d10c      	bne.n	8007a4a <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a30:	4908      	ldr	r1, [pc, #32]	; (8007a54 <prvInsertBlockIntoFreeList+0x48>)
 8007a32:	6809      	ldr	r1, [r1, #0]
 8007a34:	428b      	cmp	r3, r1
 8007a36:	d003      	beq.n	8007a40 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a38:	6859      	ldr	r1, [r3, #4]
 8007a3a:	4421      	add	r1, r4
 8007a3c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a3e:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a40:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a42:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a44:	bf18      	it	ne
 8007a46:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a48:	bd10      	pop	{r4, pc}
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	e7f8      	b.n	8007a40 <prvInsertBlockIntoFreeList+0x34>
 8007a4e:	bf00      	nop
 8007a50:	20014a9c 	.word	0x20014a9c
 8007a54:	20002594 	.word	0x20002594

08007a58 <pvPortMalloc>:
{
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007a5e:	f001 fa39 	bl	8008ed4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007a62:	4940      	ldr	r1, [pc, #256]	; (8007b64 <pvPortMalloc+0x10c>)
 8007a64:	4d40      	ldr	r5, [pc, #256]	; (8007b68 <pvPortMalloc+0x110>)
 8007a66:	680b      	ldr	r3, [r1, #0]
 8007a68:	b9f3      	cbnz	r3, 8007aa8 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8007a6a:	4a40      	ldr	r2, [pc, #256]	; (8007b6c <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8007a6c:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a6e:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a70:	4e3f      	ldr	r6, [pc, #252]	; (8007b70 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a72:	bf1b      	ittet	ne
 8007a74:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a76:	4b3f      	ldrne	r3, [pc, #252]	; (8007b74 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a78:	4b3f      	ldreq	r3, [pc, #252]	; (8007b78 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a7a:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007a7e:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a80:	bf18      	it	ne
 8007a82:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a84:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a86:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007a88:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a8a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007a8e:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a92:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8007a94:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a96:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a9a:	4b38      	ldr	r3, [pc, #224]	; (8007b7c <pvPortMalloc+0x124>)
 8007a9c:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a9e:	4b38      	ldr	r3, [pc, #224]	; (8007b80 <pvPortMalloc+0x128>)
 8007aa0:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007aa6:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007aa8:	682e      	ldr	r6, [r5, #0]
 8007aaa:	4226      	tst	r6, r4
 8007aac:	d154      	bne.n	8007b58 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8007aae:	2c00      	cmp	r4, #0
 8007ab0:	d043      	beq.n	8007b3a <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8007ab2:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ab6:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ab8:	bf1c      	itt	ne
 8007aba:	f023 0307 	bicne.w	r3, r3, #7
 8007abe:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d049      	beq.n	8007b58 <pvPortMalloc+0x100>
 8007ac4:	4f2e      	ldr	r7, [pc, #184]	; (8007b80 <pvPortMalloc+0x128>)
 8007ac6:	683c      	ldr	r4, [r7, #0]
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d345      	bcc.n	8007b58 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8007acc:	4a28      	ldr	r2, [pc, #160]	; (8007b70 <pvPortMalloc+0x118>)
 8007ace:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad0:	6868      	ldr	r0, [r5, #4]
 8007ad2:	4298      	cmp	r0, r3
 8007ad4:	d204      	bcs.n	8007ae0 <pvPortMalloc+0x88>
 8007ad6:	f8d5 c000 	ldr.w	ip, [r5]
 8007ada:	f1bc 0f00 	cmp.w	ip, #0
 8007ade:	d117      	bne.n	8007b10 <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 8007ae0:	6809      	ldr	r1, [r1, #0]
 8007ae2:	42a9      	cmp	r1, r5
 8007ae4:	d038      	beq.n	8007b58 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ae6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ae8:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aec:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aee:	1ac2      	subs	r2, r0, r3
 8007af0:	2a10      	cmp	r2, #16
 8007af2:	d914      	bls.n	8007b1e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007af4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007af6:	0741      	lsls	r1, r0, #29
 8007af8:	d00d      	beq.n	8007b16 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afe:	b672      	cpsid	i
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	b662      	cpsie	i
 8007b0e:	e7fe      	b.n	8007b0e <pvPortMalloc+0xb6>
 8007b10:	462a      	mov	r2, r5
 8007b12:	4665      	mov	r5, ip
 8007b14:	e7dc      	b.n	8007ad0 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b16:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b18:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b1a:	f7ff ff77 	bl	8007a0c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b1e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b20:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b22:	4916      	ldr	r1, [pc, #88]	; (8007b7c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b24:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b26:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b28:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b2a:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b2c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b2e:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b30:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b32:	bf38      	it	cc
 8007b34:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b36:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8007b3a:	f001 fa71 	bl	8009020 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b3e:	0763      	lsls	r3, r4, #29
 8007b40:	d00c      	beq.n	8007b5c <pvPortMalloc+0x104>
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	b672      	cpsid	i
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	b662      	cpsie	i
 8007b56:	e7fe      	b.n	8007b56 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8007b58:	2400      	movs	r4, #0
 8007b5a:	e7ee      	b.n	8007b3a <pvPortMalloc+0xe2>
}
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b62:	bf00      	nop
 8007b64:	20002594 	.word	0x20002594
 8007b68:	20014a90 	.word	0x20014a90
 8007b6c:	20002598 	.word	0x20002598
 8007b70:	20014a9c 	.word	0x20014a9c
 8007b74:	20014a90 	.word	0x20014a90
 8007b78:	000124f8 	.word	0x000124f8
 8007b7c:	20014a98 	.word	0x20014a98
 8007b80:	20014a94 	.word	0x20014a94

08007b84 <vPortFree>:
{
 8007b84:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007b86:	4604      	mov	r4, r0
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d032      	beq.n	8007bf2 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <vPortFree+0x70>)
 8007b8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007b92:	6812      	ldr	r2, [r2, #0]
 8007b94:	4213      	tst	r3, r2
 8007b96:	d10a      	bne.n	8007bae <vPortFree+0x2a>
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	b672      	cpsid	i
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	b662      	cpsie	i
 8007bac:	e7fe      	b.n	8007bac <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007bb2:	b151      	cbz	r1, 8007bca <vPortFree+0x46>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	b672      	cpsid	i
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	b662      	cpsie	i
 8007bc8:	e7fe      	b.n	8007bc8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bca:	ea23 0302 	bic.w	r3, r3, r2
 8007bce:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007bd2:	f001 f97f 	bl	8008ed4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bd6:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <vPortFree+0x74>)
 8007bd8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bdc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007be0:	6811      	ldr	r1, [r2, #0]
 8007be2:	440b      	add	r3, r1
 8007be4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007be6:	f7ff ff11 	bl	8007a0c <prvInsertBlockIntoFreeList>
}
 8007bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007bee:	f001 ba17 	b.w	8009020 <xTaskResumeAll>
}
 8007bf2:	bd10      	pop	{r4, pc}
 8007bf4:	20014a90 	.word	0x20014a90
 8007bf8:	20014a94 	.word	0x20014a94

08007bfc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bfc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c04:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c06:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c08:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c10:	4770      	bx	lr

08007c12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c16:	4770      	bx	lr

08007c18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c18:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c1a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007c1c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c1e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c24:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007c26:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007c28:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	6003      	str	r3, [r0, #0]
}
 8007c2e:	4770      	bx	lr

08007c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c30:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c32:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c34:	1c63      	adds	r3, r4, #1
 8007c36:	d10a      	bne.n	8007c4e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c38:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c3e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c40:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c42:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007c44:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007c46:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c48:	3301      	adds	r3, #1
 8007c4a:	6003      	str	r3, [r0, #0]
}
 8007c4c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c4e:	f100 0208 	add.w	r2, r0, #8
 8007c52:	4613      	mov	r3, r2
 8007c54:	6852      	ldr	r2, [r2, #4]
 8007c56:	6815      	ldr	r5, [r2, #0]
 8007c58:	42a5      	cmp	r5, r4
 8007c5a:	d9fa      	bls.n	8007c52 <vListInsert+0x22>
 8007c5c:	e7ed      	b.n	8007c3a <vListInsert+0xa>

08007c5e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c5e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c60:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007c64:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c66:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c68:	6859      	ldr	r1, [r3, #4]
 8007c6a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c6c:	bf08      	it	eq
 8007c6e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c70:	2200      	movs	r2, #0
 8007c72:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	3a01      	subs	r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c7a:	6818      	ldr	r0, [r3, #0]
}
 8007c7c:	4770      	bx	lr
	...

08007c80 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c80:	4808      	ldr	r0, [pc, #32]	; (8007ca4 <prvPortStartFirstTask+0x24>)
 8007c82:	6800      	ldr	r0, [r0, #0]
 8007c84:	6800      	ldr	r0, [r0, #0]
 8007c86:	f380 8808 	msr	MSP, r0
 8007c8a:	f04f 0000 	mov.w	r0, #0
 8007c8e:	f380 8814 	msr	CONTROL, r0
 8007c92:	b662      	cpsie	i
 8007c94:	b661      	cpsie	f
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	df00      	svc	0
 8007ca0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ca2:	0000      	.short	0x0000
 8007ca4:	e000ed08 	.word	0xe000ed08

08007ca8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ca8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cb8 <vPortEnableVFP+0x10>
 8007cac:	6801      	ldr	r1, [r0, #0]
 8007cae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cb2:	6001      	str	r1, [r0, #0]
 8007cb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cb6:	0000      	.short	0x0000
 8007cb8:	e000ed88 	.word	0xe000ed88

08007cbc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007cbc:	2300      	movs	r3, #0
{
 8007cbe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007cc0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <prvTaskExitError+0x44>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	d00a      	beq.n	8007ce0 <prvTaskExitError+0x24>
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	b672      	cpsid	i
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	b662      	cpsie	i
 8007cde:	e7fe      	b.n	8007cde <prvTaskExitError+0x22>
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	b662      	cpsie	i
	while( ulDummy == 0 )
 8007cf4:	9b01      	ldr	r3, [sp, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0fc      	beq.n	8007cf4 <prvTaskExitError+0x38>
}
 8007cfa:	b002      	add	sp, #8
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000040 	.word	0x20000040

08007d04 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d08:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d0c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007d10:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d12:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d14:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d16:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d18:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d1a:	f06f 0302 	mvn.w	r3, #2
 8007d1e:	6203      	str	r3, [r0, #32]
}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	08007cbd 	.word	0x08007cbd
	...

08007d30 <SVC_Handler>:
	__asm volatile (
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <pxCurrentTCBConst2>)
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6808      	ldr	r0, [r1, #0]
 8007d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	f380 8809 	msr	PSP, r0
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	4770      	bx	lr
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst2>:
 8007d50:	20014aec 	.word	0x20014aec

08007d54 <vPortEnterCritical>:
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	b672      	cpsid	i
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	b662      	cpsie	i
	uxCriticalNesting++;
 8007d68:	4a0b      	ldr	r2, [pc, #44]	; (8007d98 <vPortEnterCritical+0x44>)
 8007d6a:	6813      	ldr	r3, [r2, #0]
 8007d6c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007d6e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007d70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007d72:	d110      	bne.n	8007d96 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d78:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	b153      	cbz	r3, 8007d96 <vPortEnterCritical+0x42>
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	b672      	cpsid	i
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	b662      	cpsie	i
 8007d94:	e7fe      	b.n	8007d94 <vPortEnterCritical+0x40>
}
 8007d96:	4770      	bx	lr
 8007d98:	20000040 	.word	0x20000040

08007d9c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007d9c:	4a09      	ldr	r2, [pc, #36]	; (8007dc4 <vPortExitCritical+0x28>)
 8007d9e:	6813      	ldr	r3, [r2, #0]
 8007da0:	b953      	cbnz	r3, 8007db8 <vPortExitCritical+0x1c>
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	b672      	cpsid	i
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	b662      	cpsie	i
 8007db6:	e7fe      	b.n	8007db6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007db8:	3b01      	subs	r3, #1
 8007dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dbc:	b90b      	cbnz	r3, 8007dc2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dbe:	f383 8811 	msr	BASEPRI, r3
}
 8007dc2:	4770      	bx	lr
 8007dc4:	20000040 	.word	0x20000040
	...

08007dd0 <PendSV_Handler>:
	__asm volatile
 8007dd0:	f3ef 8009 	mrs	r0, PSP
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <pxCurrentTCBConst>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	f01e 0f10 	tst.w	lr, #16
 8007de0:	bf08      	it	eq
 8007de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	6010      	str	r0, [r2, #0]
 8007dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007df4:	b672      	cpsid	i
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	b662      	cpsie	i
 8007e04:	f001 fa16 	bl	8009234 <vTaskSwitchContext>
 8007e08:	f04f 0000 	mov.w	r0, #0
 8007e0c:	f380 8811 	msr	BASEPRI, r0
 8007e10:	bc09      	pop	{r0, r3}
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	6808      	ldr	r0, [r1, #0]
 8007e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	f01e 0f10 	tst.w	lr, #16
 8007e1e:	bf08      	it	eq
 8007e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e24:	f380 8809 	msr	PSP, r0
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop

08007e30 <pxCurrentTCBConst>:
 8007e30:	20014aec 	.word	0x20014aec

08007e34 <SysTick_Handler>:
{
 8007e34:	b508      	push	{r3, lr}
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	b672      	cpsid	i
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8007e4a:	f001 f851 	bl	8008ef0 <xTaskIncrementTick>
 8007e4e:	b128      	cbz	r0, 8007e5c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e58:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f383 8811 	msr	BASEPRI, r3
}
 8007e62:	bd08      	pop	{r3, pc}

08007e64 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e64:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007e68:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e6e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e70:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e72:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <vPortSetupTimerInterrupt+0x20>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e7e:	2307      	movs	r3, #7
 8007e80:	6113      	str	r3, [r2, #16]
}
 8007e82:	4770      	bx	lr
 8007e84:	2000000c 	.word	0x2000000c

08007e88 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e88:	4b2e      	ldr	r3, [pc, #184]	; (8007f44 <xPortStartScheduler+0xbc>)
{
 8007e8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e8c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e8e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e94:	22ff      	movs	r2, #255	; 0xff
 8007e96:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e98:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e9a:	4a2b      	ldr	r2, [pc, #172]	; (8007f48 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ea2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007ea6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007eaa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eac:	2307      	movs	r3, #7
 8007eae:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <xPortStartScheduler+0xc4>)
 8007eb0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eb2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007eb6:	1e5c      	subs	r4, r3, #1
 8007eb8:	0600      	lsls	r0, r0, #24
 8007eba:	d40e      	bmi.n	8007eda <xPortStartScheduler+0x52>
 8007ebc:	b111      	cbz	r1, 8007ec4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	d013      	beq.n	8007eec <xPortStartScheduler+0x64>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	b672      	cpsid	i
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	b662      	cpsie	i
 8007ed8:	e7fe      	b.n	8007ed8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eda:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007ede:	2101      	movs	r1, #1
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f88d 3003 	strb.w	r3, [sp, #3]
 8007ee8:	4623      	mov	r3, r4
 8007eea:	e7e2      	b.n	8007eb2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eec:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ef0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8007ef4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ef6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ef8:	9b01      	ldr	r3, [sp, #4]
 8007efa:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <xPortStartScheduler+0xbc>)
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f00:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f08:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f0c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007f10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f14:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007f18:	f7ff ffa4 	bl	8007e64 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007f1c:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <xPortStartScheduler+0xc8>)
 8007f1e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007f20:	f7ff fec2 	bl	8007ca8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f24:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007f28:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f2c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007f30:	f7ff fea6 	bl	8007c80 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007f34:	f001 f97e 	bl	8009234 <vTaskSwitchContext>
}
 8007f38:	4628      	mov	r0, r5
	prvTaskExitError();
 8007f3a:	f7ff febf 	bl	8007cbc <prvTaskExitError>
}
 8007f3e:	b003      	add	sp, #12
 8007f40:	bd30      	pop	{r4, r5, pc}
 8007f42:	bf00      	nop
 8007f44:	e000e400 	.word	0xe000e400
 8007f48:	20014aa4 	.word	0x20014aa4
 8007f4c:	20014aa8 	.word	0x20014aa8
 8007f50:	20000040 	.word	0x20000040

08007f54 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f54:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f58:	2b0f      	cmp	r3, #15
 8007f5a:	d910      	bls.n	8007f7e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f5c:	4a13      	ldr	r2, [pc, #76]	; (8007fac <vPortValidateInterruptPriority+0x58>)
 8007f5e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f60:	4a13      	ldr	r2, [pc, #76]	; (8007fb0 <vPortValidateInterruptPriority+0x5c>)
 8007f62:	7812      	ldrb	r2, [r2, #0]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d90a      	bls.n	8007f7e <vPortValidateInterruptPriority+0x2a>
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	b672      	cpsid	i
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	b662      	cpsie	i
 8007f7c:	e7fe      	b.n	8007f7c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f82:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <vPortValidateInterruptPriority+0x60>)
 8007f84:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d90a      	bls.n	8007fa8 <vPortValidateInterruptPriority+0x54>
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	b672      	cpsid	i
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	b662      	cpsie	i
 8007fa6:	e7fe      	b.n	8007fa6 <vPortValidateInterruptPriority+0x52>
	}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	e000e3f0 	.word	0xe000e3f0
 8007fb0:	20014aa4 	.word	0x20014aa4
 8007fb4:	20014aa8 	.word	0x20014aa8

08007fb8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fbc:	f7ff feca 	bl	8007d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fc0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007fc2:	f7ff feeb 	bl	8007d9c <vPortExitCritical>

	return xReturn;
}
 8007fc6:	fab4 f084 	clz	r0, r4
 8007fca:	0940      	lsrs	r0, r0, #5
 8007fcc:	bd10      	pop	{r4, pc}

08007fce <prvCopyDataToQueue>:
{
 8007fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007fd4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fd6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fd8:	b952      	cbnz	r2, 8007ff0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fda:	6807      	ldr	r7, [r0, #0]
 8007fdc:	bb47      	cbnz	r7, 8008030 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fde:	6880      	ldr	r0, [r0, #8]
 8007fe0:	f001 fa98 	bl	8009514 <xTaskPriorityDisinherit>
 8007fe4:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fe6:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fe8:	3601      	adds	r6, #1
}
 8007fea:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fec:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007ff0:	b965      	cbnz	r5, 800800c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ff2:	6840      	ldr	r0, [r0, #4]
 8007ff4:	f022 fc7d 	bl	802a8f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ffc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ffe:	68a2      	ldr	r2, [r4, #8]
 8008000:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008002:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008004:	d3f0      	bcc.n	8007fe8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	6063      	str	r3, [r4, #4]
 800800a:	e7ed      	b.n	8007fe8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800800c:	68c0      	ldr	r0, [r0, #12]
 800800e:	f022 fc70 	bl	802a8f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008012:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008014:	68e3      	ldr	r3, [r4, #12]
 8008016:	4251      	negs	r1, r2
 8008018:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800801e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008020:	bf3e      	ittt	cc
 8008022:	68a3      	ldrcc	r3, [r4, #8]
 8008024:	185b      	addcc	r3, r3, r1
 8008026:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008028:	2d02      	cmp	r5, #2
 800802a:	d101      	bne.n	8008030 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800802c:	b116      	cbz	r6, 8008034 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800802e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008030:	2500      	movs	r5, #0
 8008032:	e7d9      	b.n	8007fe8 <prvCopyDataToQueue+0x1a>
 8008034:	4635      	mov	r5, r6
 8008036:	e7d7      	b.n	8007fe8 <prvCopyDataToQueue+0x1a>

08008038 <prvCopyDataFromQueue>:
{
 8008038:	4603      	mov	r3, r0
 800803a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800803c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800803e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008040:	b162      	cbz	r2, 800805c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008042:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008044:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008046:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008048:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800804a:	60dc      	str	r4, [r3, #12]
}
 800804c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008050:	bf24      	itt	cs
 8008052:	6819      	ldrcs	r1, [r3, #0]
 8008054:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008056:	68d9      	ldr	r1, [r3, #12]
 8008058:	f022 bc4b 	b.w	802a8f2 <memcpy>
}
 800805c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008060:	4770      	bx	lr

08008062 <prvUnlockQueue>:
{
 8008062:	b570      	push	{r4, r5, r6, lr}
 8008064:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008066:	f7ff fe75 	bl	8007d54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800806a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800806e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008072:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008074:	2d00      	cmp	r5, #0
 8008076:	dc14      	bgt.n	80080a2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008078:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800807a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800807e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008082:	f7ff fe8b 	bl	8007d9c <vPortExitCritical>
	taskENTER_CRITICAL();
 8008086:	f7ff fe65 	bl	8007d54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800808a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800808e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008090:	2d00      	cmp	r5, #0
 8008092:	dc12      	bgt.n	80080ba <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008094:	23ff      	movs	r3, #255	; 0xff
 8008096:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800809a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800809e:	f7ff be7d 	b.w	8007d9c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d0e7      	beq.n	8008078 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080a8:	4630      	mov	r0, r6
 80080aa:	f001 f945 	bl	8009338 <xTaskRemoveFromEventList>
 80080ae:	b108      	cbz	r0, 80080b4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80080b0:	f001 f9d4 	bl	800945c <vTaskMissedYield>
			--cTxLock;
 80080b4:	3d01      	subs	r5, #1
 80080b6:	b26d      	sxtb	r5, r5
 80080b8:	e7dc      	b.n	8008074 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0e9      	beq.n	8008094 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080c0:	4630      	mov	r0, r6
 80080c2:	f001 f939 	bl	8009338 <xTaskRemoveFromEventList>
 80080c6:	b108      	cbz	r0, 80080cc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80080c8:	f001 f9c8 	bl	800945c <vTaskMissedYield>
				--cRxLock;
 80080cc:	3d01      	subs	r5, #1
 80080ce:	b26d      	sxtb	r5, r5
 80080d0:	e7de      	b.n	8008090 <prvUnlockQueue+0x2e>

080080d2 <xQueueGenericReset>:
{
 80080d2:	b538      	push	{r3, r4, r5, lr}
 80080d4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80080d6:	4604      	mov	r4, r0
 80080d8:	b950      	cbnz	r0, 80080f0 <xQueueGenericReset+0x1e>
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	b672      	cpsid	i
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	b662      	cpsie	i
 80080ee:	e7fe      	b.n	80080ee <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80080f0:	f7ff fe30 	bl	8007d54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080fa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080fc:	434b      	muls	r3, r1
 80080fe:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008100:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008102:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008104:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008106:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8008108:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800810a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800810c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800810e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008116:	b9a5      	cbnz	r5, 8008142 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	b173      	cbz	r3, 800813a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800811c:	f104 0010 	add.w	r0, r4, #16
 8008120:	f001 f90a 	bl	8009338 <xTaskRemoveFromEventList>
 8008124:	b148      	cbz	r0, 800813a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8008126:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800812a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800812e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800813a:	f7ff fe2f 	bl	8007d9c <vPortExitCritical>
}
 800813e:	2001      	movs	r0, #1
 8008140:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008142:	f104 0010 	add.w	r0, r4, #16
 8008146:	f7ff fd59 	bl	8007bfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800814a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800814e:	f7ff fd55 	bl	8007bfc <vListInitialise>
 8008152:	e7f2      	b.n	800813a <xQueueGenericReset+0x68>

08008154 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8008154:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8008156:	461c      	mov	r4, r3
 8008158:	b953      	cbnz	r3, 8008170 <xQueueGenericCreateStatic.part.0+0x1c>
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	b672      	cpsid	i
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	b662      	cpsie	i
 800816e:	e7fe      	b.n	800816e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008170:	b15a      	cbz	r2, 800818a <xQueueGenericCreateStatic.part.0+0x36>
 8008172:	b9b1      	cbnz	r1, 80081a2 <xQueueGenericCreateStatic.part.0+0x4e>
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	b672      	cpsid	i
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	b662      	cpsie	i
 8008188:	e7fe      	b.n	8008188 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800818a:	b151      	cbz	r1, 80081a2 <xQueueGenericCreateStatic.part.0+0x4e>
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	e7fe      	b.n	80081a0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081a2:	2350      	movs	r3, #80	; 0x50
 80081a4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	2b50      	cmp	r3, #80	; 0x50
 80081aa:	d00a      	beq.n	80081c2 <xQueueGenericCreateStatic.part.0+0x6e>
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	b672      	cpsid	i
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	b662      	cpsie	i
 80081c0:	e7fe      	b.n	80081c0 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80081c2:	2900      	cmp	r1, #0
 80081c4:	bf08      	it	eq
 80081c6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081c8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	6022      	str	r2, [r4, #0]
 80081ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80081d2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081d6:	4619      	mov	r1, r3
 80081d8:	4620      	mov	r0, r4
 80081da:	f7ff ff7a 	bl	80080d2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80081de:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 80081e2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80081e4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80081e8:	b002      	add	sp, #8
 80081ea:	bd10      	pop	{r4, pc}

080081ec <xQueueGenericCreateStatic>:
	{
 80081ec:	b410      	push	{r4}
 80081ee:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081f2:	b950      	cbnz	r0, 800820a <xQueueGenericCreateStatic+0x1e>
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	e7fe      	b.n	8008208 <xQueueGenericCreateStatic+0x1c>
 800820a:	9401      	str	r4, [sp, #4]
	}
 800820c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008210:	f7ff bfa0 	b.w	8008154 <xQueueGenericCreateStatic.part.0>

08008214 <xQueueGenericCreate>:
	{
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	460d      	mov	r5, r1
 8008218:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800821a:	4606      	mov	r6, r0
 800821c:	b950      	cbnz	r0, 8008234 <xQueueGenericCreate+0x20>
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	b672      	cpsid	i
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	b662      	cpsie	i
 8008232:	e7fe      	b.n	8008232 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008234:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008236:	3050      	adds	r0, #80	; 0x50
 8008238:	f7ff fc0e 	bl	8007a58 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800823c:	4604      	mov	r4, r0
 800823e:	b170      	cbz	r0, 800825e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008246:	b165      	cbz	r5, 8008262 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008248:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800824c:	2101      	movs	r1, #1
 800824e:	4620      	mov	r0, r4
 8008250:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008252:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008256:	f7ff ff3c 	bl	80080d2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800825a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800825e:	4620      	mov	r0, r4
 8008260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008262:	4603      	mov	r3, r0
 8008264:	e7f2      	b.n	800824c <xQueueGenericCreate+0x38>

08008266 <xQueueCreateCountingSemaphoreStatic>:
	{
 8008266:	b513      	push	{r0, r1, r4, lr}
 8008268:	4613      	mov	r3, r2
 800826a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800826c:	b950      	cbnz	r0, 8008284 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	b672      	cpsid	i
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	b662      	cpsie	i
 8008282:	e7fe      	b.n	8008282 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008284:	4288      	cmp	r0, r1
 8008286:	d20a      	bcs.n	800829e <xQueueCreateCountingSemaphoreStatic+0x38>
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	b672      	cpsid	i
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	b662      	cpsie	i
 800829c:	e7fe      	b.n	800829c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800829e:	2202      	movs	r2, #2
 80082a0:	9200      	str	r2, [sp, #0]
 80082a2:	2200      	movs	r2, #0
 80082a4:	4611      	mov	r1, r2
 80082a6:	f7ff ffa1 	bl	80081ec <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80082aa:	b100      	cbz	r0, 80082ae <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082ac:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80082ae:	b002      	add	sp, #8
 80082b0:	bd10      	pop	{r4, pc}

080082b2 <xQueueCreateCountingSemaphore>:
	{
 80082b2:	b510      	push	{r4, lr}
 80082b4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80082b6:	b950      	cbnz	r0, 80082ce <xQueueCreateCountingSemaphore+0x1c>
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	b672      	cpsid	i
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	b662      	cpsie	i
 80082cc:	e7fe      	b.n	80082cc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082ce:	4288      	cmp	r0, r1
 80082d0:	d20a      	bcs.n	80082e8 <xQueueCreateCountingSemaphore+0x36>
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	b672      	cpsid	i
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	b662      	cpsie	i
 80082e6:	e7fe      	b.n	80082e6 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082e8:	2202      	movs	r2, #2
 80082ea:	2100      	movs	r1, #0
 80082ec:	f7ff ff92 	bl	8008214 <xQueueGenericCreate>
		if( xHandle != NULL )
 80082f0:	b100      	cbz	r0, 80082f4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082f2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80082f4:	bd10      	pop	{r4, pc}

080082f6 <xQueueGenericSend>:
{
 80082f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082fa:	b085      	sub	sp, #20
 80082fc:	4688      	mov	r8, r1
 80082fe:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008300:	4604      	mov	r4, r0
{
 8008302:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008304:	b950      	cbnz	r0, 800831c <xQueueGenericSend+0x26>
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	b672      	cpsid	i
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	b662      	cpsie	i
 800831a:	e7fe      	b.n	800831a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800831c:	b961      	cbnz	r1, 8008338 <xQueueGenericSend+0x42>
 800831e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008320:	b153      	cbz	r3, 8008338 <xQueueGenericSend+0x42>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	e7fe      	b.n	8008336 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008338:	2f02      	cmp	r7, #2
 800833a:	d10d      	bne.n	8008358 <xQueueGenericSend+0x62>
 800833c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d00a      	beq.n	8008358 <xQueueGenericSend+0x62>
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	b672      	cpsid	i
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	b662      	cpsie	i
 8008356:	e7fe      	b.n	8008356 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008358:	f001 f88c 	bl	8009474 <xTaskGetSchedulerState>
 800835c:	4606      	mov	r6, r0
 800835e:	b960      	cbnz	r0, 800837a <xQueueGenericSend+0x84>
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	b15b      	cbz	r3, 800837c <xQueueGenericSend+0x86>
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	b672      	cpsid	i
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	b662      	cpsie	i
 8008378:	e7fe      	b.n	8008378 <xQueueGenericSend+0x82>
 800837a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800837c:	f04f 0900 	mov.w	r9, #0
 8008380:	e037      	b.n	80083f2 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008382:	9d01      	ldr	r5, [sp, #4]
 8008384:	b91d      	cbnz	r5, 800838e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8008386:	f7ff fd09 	bl	8007d9c <vPortExitCritical>
			return errQUEUE_FULL;
 800838a:	2000      	movs	r0, #0
 800838c:	e052      	b.n	8008434 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800838e:	b916      	cbnz	r6, 8008396 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008390:	a802      	add	r0, sp, #8
 8008392:	f001 f817 	bl	80093c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008396:	f7ff fd01 	bl	8007d9c <vPortExitCritical>
		vTaskSuspendAll();
 800839a:	f000 fd9b 	bl	8008ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800839e:	f7ff fcd9 	bl	8007d54 <vPortEnterCritical>
 80083a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80083a6:	2bff      	cmp	r3, #255	; 0xff
 80083a8:	d101      	bne.n	80083ae <xQueueGenericSend+0xb8>
 80083aa:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80083ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80083b2:	2bff      	cmp	r3, #255	; 0xff
 80083b4:	d101      	bne.n	80083ba <xQueueGenericSend+0xc4>
 80083b6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80083ba:	f7ff fcef 	bl	8007d9c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083be:	a901      	add	r1, sp, #4
 80083c0:	a802      	add	r0, sp, #8
 80083c2:	f001 f80b 	bl	80093dc <xTaskCheckForTimeOut>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d14a      	bne.n	8008460 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083ca:	f7ff fcc3 	bl	8007d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d131      	bne.n	800843a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80083d6:	f7ff fce1 	bl	8007d9c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083da:	9901      	ldr	r1, [sp, #4]
 80083dc:	f104 0010 	add.w	r0, r4, #16
 80083e0:	f000 ff6e 	bl	80092c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff fe3c 	bl	8008062 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083ea:	f000 fe19 	bl	8009020 <xTaskResumeAll>
 80083ee:	b360      	cbz	r0, 800844a <xQueueGenericSend+0x154>
 80083f0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80083f2:	f7ff fcaf 	bl	8007d54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d301      	bcc.n	8008402 <xQueueGenericSend+0x10c>
 80083fe:	2f02      	cmp	r7, #2
 8008400:	d1bf      	bne.n	8008382 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008402:	463a      	mov	r2, r7
 8008404:	4641      	mov	r1, r8
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff fde1 	bl	8007fce <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800840c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800840e:	b11b      	cbz	r3, 8008418 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008410:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008414:	f000 ff90 	bl	8009338 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008418:	b148      	cbz	r0, 800842e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800841a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800841e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008422:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800842e:	f7ff fcb5 	bl	8007d9c <vPortExitCritical>
				return pdPASS;
 8008432:	2001      	movs	r0, #1
}
 8008434:	b005      	add	sp, #20
 8008436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800843a:	f7ff fcaf 	bl	8007d9c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800843e:	4620      	mov	r0, r4
 8008440:	f7ff fe0f 	bl	8008062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008444:	f000 fdec 	bl	8009020 <xTaskResumeAll>
 8008448:	e7d2      	b.n	80083f0 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800844a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	e7c7      	b.n	80083f0 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8008460:	4620      	mov	r0, r4
 8008462:	f7ff fdfe 	bl	8008062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008466:	f000 fddb 	bl	8009020 <xTaskResumeAll>
 800846a:	e78e      	b.n	800838a <xQueueGenericSend+0x94>

0800846c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800846c:	2200      	movs	r2, #0
	{
 800846e:	460b      	mov	r3, r1
 8008470:	b513      	push	{r0, r1, r4, lr}
 8008472:	4611      	mov	r1, r2
 8008474:	9000      	str	r0, [sp, #0]
 8008476:	2001      	movs	r0, #1
 8008478:	f7ff fe6c 	bl	8008154 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800847c:	4604      	mov	r4, r0
 800847e:	b138      	cbz	r0, 8008490 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008480:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008482:	461a      	mov	r2, r3
 8008484:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008486:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008488:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800848a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800848c:	f7ff ff33 	bl	80082f6 <xQueueGenericSend>
	}
 8008490:	4620      	mov	r0, r4
 8008492:	b002      	add	sp, #8
 8008494:	bd10      	pop	{r4, pc}

08008496 <xQueueGiveMutexRecursive>:
	{
 8008496:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8008498:	4604      	mov	r4, r0
 800849a:	b950      	cbnz	r0, 80084b2 <xQueueGiveMutexRecursive+0x1c>
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	b672      	cpsid	i
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	b662      	cpsie	i
 80084b0:	e7fe      	b.n	80084b0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80084b2:	6885      	ldr	r5, [r0, #8]
 80084b4:	f000 ffd8 	bl	8009468 <xTaskGetCurrentTaskHandle>
 80084b8:	4285      	cmp	r5, r0
 80084ba:	d10a      	bne.n	80084d2 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80084bc:	68e3      	ldr	r3, [r4, #12]
 80084be:	3b01      	subs	r3, #1
 80084c0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80084c2:	b923      	cbnz	r3, 80084ce <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80084c4:	461a      	mov	r2, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7ff ff14 	bl	80082f6 <xQueueGenericSend>
			xReturn = pdPASS;
 80084ce:	2001      	movs	r0, #1
		return xReturn;
 80084d0:	e000      	b.n	80084d4 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 80084d2:	2000      	movs	r0, #0
	}
 80084d4:	bd38      	pop	{r3, r4, r5, pc}

080084d6 <xQueueCreateMutex>:
	{
 80084d6:	b570      	push	{r4, r5, r6, lr}
 80084d8:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80084da:	2050      	movs	r0, #80	; 0x50
 80084dc:	f7ff fabc 	bl	8007a58 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80084e0:	4604      	mov	r4, r0
 80084e2:	b198      	cbz	r0, 800850c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084e4:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80084e6:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084e8:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084ea:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80084ee:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084f2:	f7ff fdee 	bl	80080d2 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084f6:	462b      	mov	r3, r5
 80084f8:	462a      	mov	r2, r5
 80084fa:	4629      	mov	r1, r5
 80084fc:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80084fe:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008502:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008504:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008506:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008508:	f7ff fef5 	bl	80082f6 <xQueueGenericSend>
	}
 800850c:	4620      	mov	r0, r4
 800850e:	bd70      	pop	{r4, r5, r6, pc}

08008510 <xQueueGenericSendFromISR>:
{
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008514:	4689      	mov	r9, r1
 8008516:	4690      	mov	r8, r2
 8008518:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800851a:	4604      	mov	r4, r0
 800851c:	b950      	cbnz	r0, 8008534 <xQueueGenericSendFromISR+0x24>
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	b672      	cpsid	i
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	b662      	cpsie	i
 8008532:	e7fe      	b.n	8008532 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008534:	b961      	cbnz	r1, 8008550 <xQueueGenericSendFromISR+0x40>
 8008536:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008538:	b153      	cbz	r3, 8008550 <xQueueGenericSendFromISR+0x40>
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	b672      	cpsid	i
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	b662      	cpsie	i
 800854e:	e7fe      	b.n	800854e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008550:	2f02      	cmp	r7, #2
 8008552:	d10d      	bne.n	8008570 <xQueueGenericSendFromISR+0x60>
 8008554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008556:	2b01      	cmp	r3, #1
 8008558:	d00a      	beq.n	8008570 <xQueueGenericSendFromISR+0x60>
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	b672      	cpsid	i
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	b662      	cpsie	i
 800856e:	e7fe      	b.n	800856e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008570:	f7ff fcf0 	bl	8007f54 <vPortValidateInterruptPriority>
	__asm volatile
 8008574:	f3ef 8611 	mrs	r6, BASEPRI
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	b672      	cpsid	i
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800858c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800858e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008590:	429a      	cmp	r2, r3
 8008592:	d301      	bcc.n	8008598 <xQueueGenericSendFromISR+0x88>
 8008594:	2f02      	cmp	r7, #2
 8008596:	d122      	bne.n	80085de <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008598:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800859c:	463a      	mov	r2, r7
 800859e:	4649      	mov	r1, r9
 80085a0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80085a2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a4:	f7ff fd13 	bl	8007fce <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80085a8:	1c6b      	adds	r3, r5, #1
 80085aa:	d113      	bne.n	80085d4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ae:	b90b      	cbnz	r3, 80085b4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 80085b0:	2001      	movs	r0, #1
 80085b2:	e00b      	b.n	80085cc <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085b8:	f000 febe 	bl	8009338 <xTaskRemoveFromEventList>
 80085bc:	2800      	cmp	r0, #0
 80085be:	d0f7      	beq.n	80085b0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80085c0:	f1b8 0f00 	cmp.w	r8, #0
 80085c4:	d0f4      	beq.n	80085b0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085c6:	2001      	movs	r0, #1
 80085c8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80085cc:	f386 8811 	msr	BASEPRI, r6
}
 80085d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085d4:	3501      	adds	r5, #1
 80085d6:	b26d      	sxtb	r5, r5
 80085d8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80085dc:	e7e8      	b.n	80085b0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80085de:	2000      	movs	r0, #0
 80085e0:	e7f4      	b.n	80085cc <xQueueGenericSendFromISR+0xbc>

080085e2 <xQueueGiveFromISR>:
{
 80085e2:	b570      	push	{r4, r5, r6, lr}
 80085e4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80085e6:	4604      	mov	r4, r0
 80085e8:	b950      	cbnz	r0, 8008600 <xQueueGiveFromISR+0x1e>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	b672      	cpsid	i
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	b662      	cpsie	i
 80085fe:	e7fe      	b.n	80085fe <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008600:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008602:	b153      	cbz	r3, 800861a <xQueueGiveFromISR+0x38>
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	b672      	cpsid	i
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	b662      	cpsie	i
 8008618:	e7fe      	b.n	8008618 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800861a:	6803      	ldr	r3, [r0, #0]
 800861c:	b963      	cbnz	r3, 8008638 <xQueueGiveFromISR+0x56>
 800861e:	6883      	ldr	r3, [r0, #8]
 8008620:	b153      	cbz	r3, 8008638 <xQueueGiveFromISR+0x56>
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	b672      	cpsid	i
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	b662      	cpsie	i
 8008636:	e7fe      	b.n	8008636 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008638:	f7ff fc8c 	bl	8007f54 <vPortValidateInterruptPriority>
	__asm volatile
 800863c:	f3ef 8611 	mrs	r6, BASEPRI
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	b672      	cpsid	i
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008654:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008656:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008658:	4293      	cmp	r3, r2
 800865a:	d91c      	bls.n	8008696 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800865c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008660:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008662:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008664:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008666:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008668:	d110      	bne.n	800868c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800866a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800866c:	b90b      	cbnz	r3, 8008672 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800866e:	2001      	movs	r0, #1
 8008670:	e009      	b.n	8008686 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008672:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008676:	f000 fe5f 	bl	8009338 <xTaskRemoveFromEventList>
 800867a:	2800      	cmp	r0, #0
 800867c:	d0f7      	beq.n	800866e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800867e:	2d00      	cmp	r5, #0
 8008680:	d0f5      	beq.n	800866e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008682:	2001      	movs	r0, #1
 8008684:	6028      	str	r0, [r5, #0]
	__asm volatile
 8008686:	f386 8811 	msr	BASEPRI, r6
}
 800868a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800868c:	3301      	adds	r3, #1
 800868e:	b25b      	sxtb	r3, r3
 8008690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008694:	e7eb      	b.n	800866e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8008696:	2000      	movs	r0, #0
 8008698:	e7f5      	b.n	8008686 <xQueueGiveFromISR+0xa4>

0800869a <xQueueReceive>:
{
 800869a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800869e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80086a0:	4604      	mov	r4, r0
{
 80086a2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80086a4:	b950      	cbnz	r0, 80086bc <xQueueReceive+0x22>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	b672      	cpsid	i
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	b662      	cpsie	i
 80086ba:	e7fe      	b.n	80086ba <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086bc:	b961      	cbnz	r1, 80086d8 <xQueueReceive+0x3e>
 80086be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80086c0:	b153      	cbz	r3, 80086d8 <xQueueReceive+0x3e>
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	b672      	cpsid	i
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	b662      	cpsie	i
 80086d6:	e7fe      	b.n	80086d6 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086d8:	f000 fecc 	bl	8009474 <xTaskGetSchedulerState>
 80086dc:	4606      	mov	r6, r0
 80086de:	b960      	cbnz	r0, 80086fa <xQueueReceive+0x60>
 80086e0:	9b01      	ldr	r3, [sp, #4]
 80086e2:	b15b      	cbz	r3, 80086fc <xQueueReceive+0x62>
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	b672      	cpsid	i
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	b662      	cpsie	i
 80086f8:	e7fe      	b.n	80086f8 <xQueueReceive+0x5e>
 80086fa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80086fc:	f04f 0800 	mov.w	r8, #0
 8008700:	e03d      	b.n	800877e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008702:	9d01      	ldr	r5, [sp, #4]
 8008704:	b91d      	cbnz	r5, 800870e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8008706:	f7ff fb49 	bl	8007d9c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800870a:	2000      	movs	r0, #0
 800870c:	e056      	b.n	80087bc <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800870e:	b916      	cbnz	r6, 8008716 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008710:	a802      	add	r0, sp, #8
 8008712:	f000 fe57 	bl	80093c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008716:	f7ff fb41 	bl	8007d9c <vPortExitCritical>
		vTaskSuspendAll();
 800871a:	f000 fbdb 	bl	8008ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800871e:	f7ff fb19 	bl	8007d54 <vPortEnterCritical>
 8008722:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008726:	2bff      	cmp	r3, #255	; 0xff
 8008728:	d101      	bne.n	800872e <xQueueReceive+0x94>
 800872a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800872e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008732:	2bff      	cmp	r3, #255	; 0xff
 8008734:	d101      	bne.n	800873a <xQueueReceive+0xa0>
 8008736:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800873a:	f7ff fb2f 	bl	8007d9c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800873e:	a901      	add	r1, sp, #4
 8008740:	a802      	add	r0, sp, #8
 8008742:	f000 fe4b 	bl	80093dc <xTaskCheckForTimeOut>
 8008746:	2800      	cmp	r0, #0
 8008748:	d141      	bne.n	80087ce <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff fc34 	bl	8007fb8 <prvIsQueueEmpty>
 8008750:	b3b8      	cbz	r0, 80087c2 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008752:	9901      	ldr	r1, [sp, #4]
 8008754:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008758:	f000 fdb2 	bl	80092c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800875c:	4620      	mov	r0, r4
 800875e:	f7ff fc80 	bl	8008062 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008762:	f000 fc5d 	bl	8009020 <xTaskResumeAll>
 8008766:	b948      	cbnz	r0, 800877c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8008768:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800876c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008770:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800877e:	f7ff fae9 	bl	8007d54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008782:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008784:	2d00      	cmp	r5, #0
 8008786:	d0bc      	beq.n	8008702 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008788:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800878a:	4639      	mov	r1, r7
 800878c:	4620      	mov	r0, r4
 800878e:	f7ff fc53 	bl	8008038 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008792:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	b173      	cbz	r3, 80087b6 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008798:	f104 0010 	add.w	r0, r4, #16
 800879c:	f000 fdcc 	bl	8009338 <xTaskRemoveFromEventList>
 80087a0:	b148      	cbz	r0, 80087b6 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 80087a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80087b6:	f7ff faf1 	bl	8007d9c <vPortExitCritical>
				return pdPASS;
 80087ba:	2001      	movs	r0, #1
}
 80087bc:	b004      	add	sp, #16
 80087be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff fc4d 	bl	8008062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087c8:	f000 fc2a 	bl	8009020 <xTaskResumeAll>
 80087cc:	e7d6      	b.n	800877c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff fc47 	bl	8008062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087d4:	f000 fc24 	bl	8009020 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087d8:	4620      	mov	r0, r4
 80087da:	f7ff fbed 	bl	8007fb8 <prvIsQueueEmpty>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d0cc      	beq.n	800877c <xQueueReceive+0xe2>
 80087e2:	e792      	b.n	800870a <xQueueReceive+0x70>

080087e4 <xQueueSemaphoreTake>:
{
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80087e8:	4604      	mov	r4, r0
{
 80087ea:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80087ec:	b950      	cbnz	r0, 8008804 <xQueueSemaphoreTake+0x20>
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	e7fe      	b.n	8008802 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008804:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008806:	b155      	cbz	r5, 800881e <xQueueSemaphoreTake+0x3a>
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	b672      	cpsid	i
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	b662      	cpsie	i
 800881c:	e7fe      	b.n	800881c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800881e:	f000 fe29 	bl	8009474 <xTaskGetSchedulerState>
 8008822:	4606      	mov	r6, r0
 8008824:	b960      	cbnz	r0, 8008840 <xQueueSemaphoreTake+0x5c>
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	b16b      	cbz	r3, 8008846 <xQueueSemaphoreTake+0x62>
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	b672      	cpsid	i
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	b662      	cpsie	i
 800883e:	e7fe      	b.n	800883e <xQueueSemaphoreTake+0x5a>
 8008840:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008842:	2700      	movs	r7, #0
 8008844:	e055      	b.n	80088f2 <xQueueSemaphoreTake+0x10e>
 8008846:	4605      	mov	r5, r0
 8008848:	e7fb      	b.n	8008842 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	b973      	cbnz	r3, 800886c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800884e:	b155      	cbz	r5, 8008866 <xQueueSemaphoreTake+0x82>
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	b672      	cpsid	i
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	b662      	cpsie	i
 8008864:	e7fe      	b.n	8008864 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8008866:	f7ff fa99 	bl	8007d9c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800886a:	e062      	b.n	8008932 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800886c:	b916      	cbnz	r6, 8008874 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800886e:	a802      	add	r0, sp, #8
 8008870:	f000 fda8 	bl	80093c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008874:	f7ff fa92 	bl	8007d9c <vPortExitCritical>
		vTaskSuspendAll();
 8008878:	f000 fb2c 	bl	8008ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800887c:	f7ff fa6a 	bl	8007d54 <vPortEnterCritical>
 8008880:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008884:	2bff      	cmp	r3, #255	; 0xff
 8008886:	d101      	bne.n	800888c <xQueueSemaphoreTake+0xa8>
 8008888:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800888c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008890:	2bff      	cmp	r3, #255	; 0xff
 8008892:	d101      	bne.n	8008898 <xQueueSemaphoreTake+0xb4>
 8008894:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008898:	f7ff fa80 	bl	8007d9c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800889c:	a901      	add	r1, sp, #4
 800889e:	a802      	add	r0, sp, #8
 80088a0:	f000 fd9c 	bl	80093dc <xTaskCheckForTimeOut>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d14d      	bne.n	8008944 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088a8:	4620      	mov	r0, r4
 80088aa:	f7ff fb85 	bl	8007fb8 <prvIsQueueEmpty>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d042      	beq.n	8008938 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	b93b      	cbnz	r3, 80088c6 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 80088b6:	f7ff fa4d 	bl	8007d54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088ba:	68a0      	ldr	r0, [r4, #8]
 80088bc:	f000 fdea 	bl	8009494 <xTaskPriorityInherit>
 80088c0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80088c2:	f7ff fa6b 	bl	8007d9c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088c6:	9901      	ldr	r1, [sp, #4]
 80088c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80088cc:	f000 fcf8 	bl	80092c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088d0:	4620      	mov	r0, r4
 80088d2:	f7ff fbc6 	bl	8008062 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088d6:	f000 fba3 	bl	8009020 <xTaskResumeAll>
 80088da:	b948      	cbnz	r0, 80088f0 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 80088dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80088f2:	f7ff fa2f 	bl	8007d54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80088f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0a6      	beq.n	800884a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80088fc:	3b01      	subs	r3, #1
 80088fe:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	b913      	cbnz	r3, 800890a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008904:	f000 fea4 	bl	8009650 <pvTaskIncrementMutexHeldCount>
 8008908:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	b173      	cbz	r3, 800892c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800890e:	f104 0010 	add.w	r0, r4, #16
 8008912:	f000 fd11 	bl	8009338 <xTaskRemoveFromEventList>
 8008916:	b148      	cbz	r0, 800892c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8008918:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800891c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008920:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800892c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800892e:	f7ff fa35 	bl	8007d9c <vPortExitCritical>
}
 8008932:	4628      	mov	r0, r5
 8008934:	b005      	add	sp, #20
 8008936:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff fb92 	bl	8008062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800893e:	f000 fb6f 	bl	8009020 <xTaskResumeAll>
 8008942:	e7d5      	b.n	80088f0 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8008944:	4620      	mov	r0, r4
 8008946:	f7ff fb8c 	bl	8008062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800894a:	f000 fb69 	bl	8009020 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff fb32 	bl	8007fb8 <prvIsQueueEmpty>
 8008954:	2800      	cmp	r0, #0
 8008956:	d0cb      	beq.n	80088f0 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8008958:	2d00      	cmp	r5, #0
 800895a:	d0ea      	beq.n	8008932 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800895c:	f7ff f9fa 	bl	8007d54 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008960:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008962:	b119      	cbz	r1, 800896c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008966:	6819      	ldr	r1, [r3, #0]
 8008968:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800896c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800896e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008970:	f000 fe18 	bl	80095a4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008974:	f7ff fa12 	bl	8007d9c <vPortExitCritical>
 8008978:	e7db      	b.n	8008932 <xQueueSemaphoreTake+0x14e>

0800897a <xQueueTakeMutexRecursive>:
	{
 800897a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800897c:	4604      	mov	r4, r0
 800897e:	b950      	cbnz	r0, 8008996 <xQueueTakeMutexRecursive+0x1c>
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	b672      	cpsid	i
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	b662      	cpsie	i
 8008994:	e7fe      	b.n	8008994 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008996:	6885      	ldr	r5, [r0, #8]
 8008998:	9101      	str	r1, [sp, #4]
 800899a:	f000 fd65 	bl	8009468 <xTaskGetCurrentTaskHandle>
 800899e:	4285      	cmp	r5, r0
 80089a0:	9901      	ldr	r1, [sp, #4]
 80089a2:	d105      	bne.n	80089b0 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089a4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80089a6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089a8:	3301      	adds	r3, #1
 80089aa:	60e3      	str	r3, [r4, #12]
	}
 80089ac:	b003      	add	sp, #12
 80089ae:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7ff ff17 	bl	80087e4 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d0f8      	beq.n	80089ac <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	3301      	adds	r3, #1
 80089be:	60e3      	str	r3, [r4, #12]
		return xReturn;
 80089c0:	e7f4      	b.n	80089ac <xQueueTakeMutexRecursive+0x32>

080089c2 <xQueueReceiveFromISR>:
{
 80089c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c6:	4689      	mov	r9, r1
 80089c8:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80089ca:	4605      	mov	r5, r0
 80089cc:	b950      	cbnz	r0, 80089e4 <xQueueReceiveFromISR+0x22>
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	b672      	cpsid	i
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	b662      	cpsie	i
 80089e2:	e7fe      	b.n	80089e2 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089e4:	b961      	cbnz	r1, 8008a00 <xQueueReceiveFromISR+0x3e>
 80089e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80089e8:	b153      	cbz	r3, 8008a00 <xQueueReceiveFromISR+0x3e>
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	b672      	cpsid	i
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	b662      	cpsie	i
 80089fe:	e7fe      	b.n	80089fe <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a00:	f7ff faa8 	bl	8007f54 <vPortValidateInterruptPriority>
	__asm volatile
 8008a04:	f3ef 8711 	mrs	r7, BASEPRI
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	b672      	cpsid	i
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a1c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a1e:	b31c      	cbz	r4, 8008a68 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a20:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a24:	4649      	mov	r1, r9
 8008a26:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a28:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a2a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a2c:	f7ff fb04 	bl	8008038 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a30:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008a32:	1c73      	adds	r3, r6, #1
 8008a34:	d113      	bne.n	8008a5e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a36:	692b      	ldr	r3, [r5, #16]
 8008a38:	b90b      	cbnz	r3, 8008a3e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	e00b      	b.n	8008a56 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a3e:	f105 0010 	add.w	r0, r5, #16
 8008a42:	f000 fc79 	bl	8009338 <xTaskRemoveFromEventList>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d0f7      	beq.n	8008a3a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8008a4a:	f1b8 0f00 	cmp.w	r8, #0
 8008a4e:	d0f4      	beq.n	8008a3a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a50:	2001      	movs	r0, #1
 8008a52:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008a56:	f387 8811 	msr	BASEPRI, r7
}
 8008a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a5e:	3601      	adds	r6, #1
 8008a60:	b276      	sxtb	r6, r6
 8008a62:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008a66:	e7e8      	b.n	8008a3a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8008a68:	4620      	mov	r0, r4
 8008a6a:	e7f4      	b.n	8008a56 <xQueueReceiveFromISR+0x94>

08008a6c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a6c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a6e:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <vQueueAddToRegistry+0x20>)
	{
 8008a70:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a72:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008a76:	b92c      	cbnz	r4, 8008a84 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a80:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a82:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a84:	3301      	adds	r3, #1
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d1f3      	bne.n	8008a72 <vQueueAddToRegistry+0x6>
 8008a8a:	e7fa      	b.n	8008a82 <vQueueAddToRegistry+0x16>
 8008a8c:	20014aac 	.word	0x20014aac

08008a90 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a90:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a92:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <vQueueUnregisterQueue+0x24>)
	{
 8008a94:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a96:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008a9a:	684c      	ldr	r4, [r1, #4]
 8008a9c:	4284      	cmp	r4, r0
 8008a9e:	d104      	bne.n	8008aaa <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008aa6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008aa8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aaa:	3301      	adds	r3, #1
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d1f2      	bne.n	8008a96 <vQueueUnregisterQueue+0x6>
 8008ab0:	e7fa      	b.n	8008aa8 <vQueueUnregisterQueue+0x18>
 8008ab2:	bf00      	nop
 8008ab4:	20014aac 	.word	0x20014aac

08008ab8 <vQueueDelete>:
{
 8008ab8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008aba:	4604      	mov	r4, r0
 8008abc:	b950      	cbnz	r0, 8008ad4 <vQueueDelete+0x1c>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	b672      	cpsid	i
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	b662      	cpsie	i
 8008ad2:	e7fe      	b.n	8008ad2 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8008ad4:	f7ff ffdc 	bl	8008a90 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008ad8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008adc:	b923      	cbnz	r3, 8008ae8 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8008ade:	4620      	mov	r0, r4
}
 8008ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008ae4:	f7ff b84e 	b.w	8007b84 <vPortFree>
}
 8008ae8:	bd10      	pop	{r4, pc}

08008aea <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008aea:	b570      	push	{r4, r5, r6, lr}
 8008aec:	4604      	mov	r4, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008af2:	f7ff f92f 	bl	8007d54 <vPortEnterCritical>
 8008af6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008afa:	2bff      	cmp	r3, #255	; 0xff
 8008afc:	d102      	bne.n	8008b04 <vQueueWaitForMessageRestricted+0x1a>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b08:	2bff      	cmp	r3, #255	; 0xff
 8008b0a:	d102      	bne.n	8008b12 <vQueueWaitForMessageRestricted+0x28>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b12:	f7ff f943 	bl	8007d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b18:	b92b      	cbnz	r3, 8008b26 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b1a:	4632      	mov	r2, r6
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b22:	f000 fbe9 	bl	80092f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b26:	4620      	mov	r0, r4
	}
 8008b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008b2c:	f7ff ba99 	b.w	8008062 <prvUnlockQueue>

08008b30 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b34:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b36:	f7ff f90d 	bl	8007d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b3a:	4b2f      	ldr	r3, [pc, #188]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008b3c:	4e2f      	ldr	r6, [pc, #188]	; (8008bfc <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4f2f      	ldr	r7, [pc, #188]	; (8008c00 <prvAddNewTaskToReadyList+0xd0>)
 8008b42:	3201      	adds	r2, #1
 8008b44:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008b46:	6835      	ldr	r5, [r6, #0]
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	d14a      	bne.n	8008be2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b4c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d11f      	bne.n	8008b94 <prvAddNewTaskToReadyList+0x64>
 8008b54:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b56:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b58:	4640      	mov	r0, r8
 8008b5a:	f7ff f84f 	bl	8007bfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b5e:	f108 0814 	add.w	r8, r8, #20
 8008b62:	2d38      	cmp	r5, #56	; 0x38
 8008b64:	d1f7      	bne.n	8008b56 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b66:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008c28 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8008b6a:	4d26      	ldr	r5, [pc, #152]	; (8008c04 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	f7ff f845 	bl	8007bfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7ff f842 	bl	8007bfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b78:	4823      	ldr	r0, [pc, #140]	; (8008c08 <prvAddNewTaskToReadyList+0xd8>)
 8008b7a:	f7ff f83f 	bl	8007bfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b7e:	4823      	ldr	r0, [pc, #140]	; (8008c0c <prvAddNewTaskToReadyList+0xdc>)
 8008b80:	f7ff f83c 	bl	8007bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b84:	4822      	ldr	r0, [pc, #136]	; (8008c10 <prvAddNewTaskToReadyList+0xe0>)
 8008b86:	f7ff f839 	bl	8007bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b8a:	4b22      	ldr	r3, [pc, #136]	; (8008c14 <prvAddNewTaskToReadyList+0xe4>)
 8008b8c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b90:	4b21      	ldr	r3, [pc, #132]	; (8008c18 <prvAddNewTaskToReadyList+0xe8>)
 8008b92:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008b94:	4a21      	ldr	r2, [pc, #132]	; (8008c1c <prvAddNewTaskToReadyList+0xec>)
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008b9c:	4a20      	ldr	r2, [pc, #128]	; (8008c20 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b9e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008ba0:	6811      	ldr	r1, [r2, #0]
 8008ba2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ba4:	428b      	cmp	r3, r1
 8008ba6:	d900      	bls.n	8008baa <prvAddNewTaskToReadyList+0x7a>
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	2014      	movs	r0, #20
 8008bac:	1d21      	adds	r1, r4, #4
 8008bae:	fb00 7003 	mla	r0, r0, r3, r7
 8008bb2:	f7ff f831 	bl	8007c18 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008bb6:	f7ff f8f1 	bl	8007d9c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008bba:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <prvAddNewTaskToReadyList+0xf4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	b173      	cbz	r3, 8008bde <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bc0:	6833      	ldr	r3, [r6, #0]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d209      	bcs.n	8008bde <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008bca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	f3bf 8f6f 	isb	sy
}
 8008bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008be2:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <prvAddNewTaskToReadyList+0xf4>)
 8008be4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008be6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	d1d3      	bne.n	8008b94 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bec:	6832      	ldr	r2, [r6, #0]
 8008bee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d8cf      	bhi.n	8008b94 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008bf4:	6034      	str	r4, [r6, #0]
 8008bf6:	e7cd      	b.n	8008b94 <prvAddNewTaskToReadyList+0x64>
 8008bf8:	20014f58 	.word	0x20014f58
 8008bfc:	20014aec 	.word	0x20014aec
 8008c00:	20014af8 	.word	0x20014af8
 8008c04:	20014f84 	.word	0x20014f84
 8008c08:	20014fa0 	.word	0x20014fa0
 8008c0c:	20014fcc 	.word	0x20014fcc
 8008c10:	20014fb8 	.word	0x20014fb8
 8008c14:	20014af0 	.word	0x20014af0
 8008c18:	20014af4 	.word	0x20014af4
 8008c1c:	20014f68 	.word	0x20014f68
 8008c20:	20014f6c 	.word	0x20014f6c
 8008c24:	20014fb4 	.word	0x20014fb4
 8008c28:	20014f70 	.word	0x20014f70

08008c2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c2e:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008c30:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c32:	4d15      	ldr	r5, [pc, #84]	; (8008c88 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008c34:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008c36:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c38:	6828      	ldr	r0, [r5, #0]
 8008c3a:	3004      	adds	r0, #4
 8008c3c:	f7ff f80f 	bl	8007c5e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c40:	1c73      	adds	r3, r6, #1
 8008c42:	d107      	bne.n	8008c54 <prvAddCurrentTaskToDelayedList+0x28>
 8008c44:	b137      	cbz	r7, 8008c54 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c46:	6829      	ldr	r1, [r5, #0]
 8008c48:	4810      	ldr	r0, [pc, #64]	; (8008c8c <prvAddCurrentTaskToDelayedList+0x60>)
 8008c4a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c50:	f7fe bfe2 	b.w	8007c18 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c54:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c56:	682b      	ldr	r3, [r5, #0]
 8008c58:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c5a:	d307      	bcc.n	8008c6c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c5c:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <prvAddCurrentTaskToDelayedList+0x64>)
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	6829      	ldr	r1, [r5, #0]
}
 8008c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c66:	3104      	adds	r1, #4
 8008c68:	f7fe bfe2 	b.w	8007c30 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x68>)
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	3104      	adds	r1, #4
 8008c74:	f7fe ffdc 	bl	8007c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	42a2      	cmp	r2, r4
 8008c7e:	d900      	bls.n	8008c82 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8008c80:	601c      	str	r4, [r3, #0]
}
 8008c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c84:	20014fe0 	.word	0x20014fe0
 8008c88:	20014aec 	.word	0x20014aec
 8008c8c:	20014fb8 	.word	0x20014fb8
 8008c90:	20014af4 	.word	0x20014af4
 8008c94:	20014af0 	.word	0x20014af0
 8008c98:	20014f98 	.word	0x20014f98

08008c9c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9c:	4a06      	ldr	r2, [pc, #24]	; (8008cb8 <prvResetNextTaskUnblockTime+0x1c>)
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	6819      	ldr	r1, [r3, #0]
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <prvResetNextTaskUnblockTime+0x20>)
 8008ca4:	b919      	cbnz	r1, 8008cae <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ca6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008caa:	601a      	str	r2, [r3, #0]
}
 8008cac:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cb2:	68d2      	ldr	r2, [r2, #12]
 8008cb4:	6852      	ldr	r2, [r2, #4]
 8008cb6:	e7f8      	b.n	8008caa <prvResetNextTaskUnblockTime+0xe>
 8008cb8:	20014af0 	.word	0x20014af0
 8008cbc:	20014f98 	.word	0x20014f98

08008cc0 <prvDeleteTCB>:
	{
 8008cc0:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cc2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008cc6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cc8:	b93b      	cbnz	r3, 8008cda <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008cca:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008ccc:	f7fe ff5a 	bl	8007b84 <vPortFree>
				vPortFree( pxTCB );
 8008cd0:	4620      	mov	r0, r4
	}
 8008cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008cd6:	f7fe bf55 	b.w	8007b84 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d0f9      	beq.n	8008cd2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d00a      	beq.n	8008cf8 <prvDeleteTCB+0x38>
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	b672      	cpsid	i
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	b662      	cpsie	i
 8008cf6:	e7fe      	b.n	8008cf6 <prvDeleteTCB+0x36>
	}
 8008cf8:	bd10      	pop	{r4, pc}
	...

08008cfc <prvIdleTask>:
{
 8008cfc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cfe:	4c14      	ldr	r4, [pc, #80]	; (8008d50 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d00:	4f14      	ldr	r7, [pc, #80]	; (8008d54 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8008d02:	4d15      	ldr	r5, [pc, #84]	; (8008d58 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	b983      	cbnz	r3, 8008d2a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <prvIdleTask+0x60>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d909      	bls.n	8008d24 <prvIdleTask+0x28>
				taskYIELD();
 8008d10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8008d24:	f7f8 f860 	bl	8000de8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008d28:	e7eb      	b.n	8008d02 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008d2a:	f7ff f813 	bl	8007d54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d32:	1d30      	adds	r0, r6, #4
 8008d34:	f7fe ff93 	bl	8007c5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008d44:	f7ff f82a 	bl	8007d9c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff ffb9 	bl	8008cc0 <prvDeleteTCB>
 8008d4e:	e7d9      	b.n	8008d04 <prvIdleTask+0x8>
 8008d50:	20014f5c 	.word	0x20014f5c
 8008d54:	20014fcc 	.word	0x20014fcc
 8008d58:	20014f58 	.word	0x20014f58
 8008d5c:	20014af8 	.word	0x20014af8

08008d60 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d64:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d68:	4606      	mov	r6, r0
 8008d6a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d6c:	21a5      	movs	r1, #165	; 0xa5
 8008d6e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d70:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d72:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008d76:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d7c:	f021 fcd8 	bl	802a730 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d82:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d84:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 8008d88:	b3b5      	cbz	r5, 8008df8 <prvInitialiseNewTask.constprop.0+0x98>
 8008d8a:	1e6b      	subs	r3, r5, #1
 8008d8c:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8008d90:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d92:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008d96:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008d9a:	b109      	cbz	r1, 8008da0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d9c:	42ab      	cmp	r3, r5
 8008d9e:	d1f8      	bne.n	8008d92 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008da0:	2300      	movs	r3, #0
 8008da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008da6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008da8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dac:	1d20      	adds	r0, r4, #4
 8008dae:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008db0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008db4:	bf28      	it	cs
 8008db6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008db8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008dba:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dbc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dc0:	f7fe ff27 	bl	8007c12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dc4:	f104 0018 	add.w	r0, r4, #24
 8008dc8:	f7fe ff23 	bl	8007c12 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008dcc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dd0:	463a      	mov	r2, r7
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dd6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dda:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008ddc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008de0:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008de4:	f7fe ff8e 	bl	8007d04 <pxPortInitialiseStack>
 8008de8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008dea:	f1b8 0f00 	cmp.w	r8, #0
 8008dee:	d001      	beq.n	8008df4 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008df0:	f8c8 4000 	str.w	r4, [r8]
}
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008df8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008dfc:	e7d3      	b.n	8008da6 <prvInitialiseNewTask.constprop.0+0x46>

08008dfe <xTaskCreateStatic>:
	{
 8008dfe:	b570      	push	{r4, r5, r6, lr}
 8008e00:	b086      	sub	sp, #24
 8008e02:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008e06:	b955      	cbnz	r5, 8008e1e <xTaskCreateStatic+0x20>
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	b672      	cpsid	i
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	b662      	cpsie	i
 8008e1c:	e7fe      	b.n	8008e1c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008e1e:	b954      	cbnz	r4, 8008e36 <xTaskCreateStatic+0x38>
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	b672      	cpsid	i
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	b662      	cpsie	i
 8008e34:	e7fe      	b.n	8008e34 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e36:	2660      	movs	r6, #96	; 0x60
 8008e38:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e3a:	9e05      	ldr	r6, [sp, #20]
 8008e3c:	2e60      	cmp	r6, #96	; 0x60
 8008e3e:	d00a      	beq.n	8008e56 <xTaskCreateStatic+0x58>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	b672      	cpsid	i
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	b662      	cpsie	i
 8008e54:	e7fe      	b.n	8008e54 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e56:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e58:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e5a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e5c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e60:	ad04      	add	r5, sp, #16
 8008e62:	9402      	str	r4, [sp, #8]
 8008e64:	9501      	str	r5, [sp, #4]
 8008e66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008e68:	9500      	str	r5, [sp, #0]
 8008e6a:	f7ff ff79 	bl	8008d60 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f7ff fe5e 	bl	8008b30 <prvAddNewTaskToReadyList>
	}
 8008e74:	9804      	ldr	r0, [sp, #16]
 8008e76:	b006      	add	sp, #24
 8008e78:	bd70      	pop	{r4, r5, r6, pc}

08008e7a <xTaskCreate>:
	{
 8008e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e7e:	4607      	mov	r7, r0
 8008e80:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e82:	0090      	lsls	r0, r2, #2
	{
 8008e84:	4688      	mov	r8, r1
 8008e86:	4616      	mov	r6, r2
 8008e88:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e8a:	f7fe fde5 	bl	8007a58 <pvPortMalloc>
			if( pxStack != NULL )
 8008e8e:	4605      	mov	r5, r0
 8008e90:	b1e8      	cbz	r0, 8008ece <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e92:	2060      	movs	r0, #96	; 0x60
 8008e94:	f7fe fde0 	bl	8007a58 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008e98:	4604      	mov	r4, r0
 8008e9a:	b1a8      	cbz	r0, 8008ec8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e9c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008e9e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ea4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eaa:	9002      	str	r0, [sp, #8]
 8008eac:	4638      	mov	r0, r7
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	f7ff ff53 	bl	8008d60 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f7ff fe38 	bl	8008b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ec0:	2001      	movs	r0, #1
	}
 8008ec2:	b005      	add	sp, #20
 8008ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7fe fe5b 	bl	8007b84 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008ed2:	e7f6      	b.n	8008ec2 <xTaskCreate+0x48>

08008ed4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008ed4:	4a02      	ldr	r2, [pc, #8]	; (8008ee0 <vTaskSuspendAll+0xc>)
 8008ed6:	6813      	ldr	r3, [r2, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	6013      	str	r3, [r2, #0]
}
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	20014f64 	.word	0x20014f64

08008ee4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008ee4:	4b01      	ldr	r3, [pc, #4]	; (8008eec <xTaskGetTickCount+0x8>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
}
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20014fe0 	.word	0x20014fe0

08008ef0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef0:	4b40      	ldr	r3, [pc, #256]	; (8008ff4 <xTaskIncrementTick+0x104>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
{
 8008ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d174      	bne.n	8008fe6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008efc:	4b3e      	ldr	r3, [pc, #248]	; (8008ff8 <xTaskIncrementTick+0x108>)
 8008efe:	681d      	ldr	r5, [r3, #0]
 8008f00:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008f02:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f04:	b9cd      	cbnz	r5, 8008f3a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008f06:	4b3d      	ldr	r3, [pc, #244]	; (8008ffc <xTaskIncrementTick+0x10c>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	b152      	cbz	r2, 8008f24 <xTaskIncrementTick+0x34>
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	b672      	cpsid	i
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	b662      	cpsie	i
 8008f22:	e7fe      	b.n	8008f22 <xTaskIncrementTick+0x32>
 8008f24:	4a36      	ldr	r2, [pc, #216]	; (8009000 <xTaskIncrementTick+0x110>)
 8008f26:	6819      	ldr	r1, [r3, #0]
 8008f28:	6810      	ldr	r0, [r2, #0]
 8008f2a:	6018      	str	r0, [r3, #0]
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	4a35      	ldr	r2, [pc, #212]	; (8009004 <xTaskIncrementTick+0x114>)
 8008f30:	6813      	ldr	r3, [r2, #0]
 8008f32:	3301      	adds	r3, #1
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	f7ff feb1 	bl	8008c9c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f3a:	4e33      	ldr	r6, [pc, #204]	; (8009008 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008f3c:	2400      	movs	r4, #0
 8008f3e:	4f33      	ldr	r7, [pc, #204]	; (800900c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009018 <xTaskIncrementTick+0x128>
 8008f46:	42ab      	cmp	r3, r5
 8008f48:	d911      	bls.n	8008f6e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f4e:	2214      	movs	r2, #20
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	4353      	muls	r3, r2
 8008f54:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	bf28      	it	cs
 8008f5a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008f5c:	4b2c      	ldr	r3, [pc, #176]	; (8009010 <xTaskIncrementTick+0x120>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008f60:	2b00      	cmp	r3, #0
}
 8008f62:	bf0c      	ite	eq
 8008f64:	4620      	moveq	r0, r4
 8008f66:	2001      	movne	r0, #1
 8008f68:	b003      	add	sp, #12
 8008f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f6e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008ffc <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008f72:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800901c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f76:	f8d9 3000 	ldr.w	r3, [r9]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	b91b      	cbnz	r3, 8008f86 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f82:	6033      	str	r3, [r6, #0]
					break;
 8008f84:	e7e1      	b.n	8008f4a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f86:	f8d9 3000 	ldr.w	r3, [r9]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f90:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008f94:	4295      	cmp	r5, r2
 8008f96:	d201      	bcs.n	8008f9c <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008f98:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f9a:	e7d6      	b.n	8008f4a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f9c:	f10b 0104 	add.w	r1, fp, #4
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	9101      	str	r1, [sp, #4]
 8008fa4:	f7fe fe5b 	bl	8007c5e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fa8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008fac:	9901      	ldr	r1, [sp, #4]
 8008fae:	b122      	cbz	r2, 8008fba <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fb0:	f10b 0018 	add.w	r0, fp, #24
 8008fb4:	f7fe fe53 	bl	8007c5e <uxListRemove>
 8008fb8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008fba:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008fbe:	f8da 2000 	ldr.w	r2, [sl]
 8008fc2:	4290      	cmp	r0, r2
 8008fc4:	d901      	bls.n	8008fca <xTaskIncrementTick+0xda>
 8008fc6:	f8ca 0000 	str.w	r0, [sl]
 8008fca:	2314      	movs	r3, #20
 8008fcc:	fb03 7000 	mla	r0, r3, r0, r7
 8008fd0:	f7fe fe22 	bl	8007c18 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fd4:	f8d8 1000 	ldr.w	r1, [r8]
 8008fd8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008fdc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	bf28      	it	cs
 8008fe2:	2401      	movcs	r4, #1
 8008fe4:	e7c7      	b.n	8008f76 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8008fe6:	4a0b      	ldr	r2, [pc, #44]	; (8009014 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8008fe8:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	3301      	adds	r3, #1
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e7b4      	b.n	8008f5c <xTaskIncrementTick+0x6c>
 8008ff2:	bf00      	nop
 8008ff4:	20014f64 	.word	0x20014f64
 8008ff8:	20014fe0 	.word	0x20014fe0
 8008ffc:	20014af0 	.word	0x20014af0
 8009000:	20014af4 	.word	0x20014af4
 8009004:	20014f9c 	.word	0x20014f9c
 8009008:	20014f98 	.word	0x20014f98
 800900c:	20014af8 	.word	0x20014af8
 8009010:	20014fe4 	.word	0x20014fe4
 8009014:	20014f60 	.word	0x20014f60
 8009018:	20014aec 	.word	0x20014aec
 800901c:	20014f6c 	.word	0x20014f6c

08009020 <xTaskResumeAll>:
{
 8009020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8009022:	4c32      	ldr	r4, [pc, #200]	; (80090ec <xTaskResumeAll+0xcc>)
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	b953      	cbnz	r3, 800903e <xTaskResumeAll+0x1e>
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	b672      	cpsid	i
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	b662      	cpsie	i
 800903c:	e7fe      	b.n	800903c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800903e:	f7fe fe89 	bl	8007d54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	3b01      	subs	r3, #1
 8009046:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009048:	6824      	ldr	r4, [r4, #0]
 800904a:	b12c      	cbz	r4, 8009058 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800904c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800904e:	f7fe fea5 	bl	8007d9c <vPortExitCritical>
}
 8009052:	4620      	mov	r0, r4
 8009054:	b003      	add	sp, #12
 8009056:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <xTaskResumeAll+0xd0>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0f5      	beq.n	800904c <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009060:	4d24      	ldr	r5, [pc, #144]	; (80090f4 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8009062:	4e25      	ldr	r6, [pc, #148]	; (80090f8 <xTaskResumeAll+0xd8>)
 8009064:	4f25      	ldr	r7, [pc, #148]	; (80090fc <xTaskResumeAll+0xdc>)
 8009066:	e01e      	b.n	80090a6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009068:	68eb      	ldr	r3, [r5, #12]
 800906a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800906c:	f104 0018 	add.w	r0, r4, #24
 8009070:	f7fe fdf5 	bl	8007c5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009074:	1d21      	adds	r1, r4, #4
 8009076:	4608      	mov	r0, r1
 8009078:	9101      	str	r1, [sp, #4]
 800907a:	f7fe fdf0 	bl	8007c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800907e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009080:	6832      	ldr	r2, [r6, #0]
 8009082:	9901      	ldr	r1, [sp, #4]
 8009084:	4293      	cmp	r3, r2
 8009086:	d900      	bls.n	800908a <xTaskResumeAll+0x6a>
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	2014      	movs	r0, #20
 800908c:	fb00 7003 	mla	r0, r0, r3, r7
 8009090:	f7fe fdc2 	bl	8007c18 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009094:	4b1a      	ldr	r3, [pc, #104]	; (8009100 <xTaskResumeAll+0xe0>)
 8009096:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	429a      	cmp	r2, r3
 800909e:	d302      	bcc.n	80090a6 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 80090a0:	4b18      	ldr	r3, [pc, #96]	; (8009104 <xTaskResumeAll+0xe4>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090a6:	682b      	ldr	r3, [r5, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1dd      	bne.n	8009068 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80090ac:	b10c      	cbz	r4, 80090b2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80090ae:	f7ff fdf5 	bl	8008c9c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80090b2:	4d15      	ldr	r5, [pc, #84]	; (8009108 <xTaskResumeAll+0xe8>)
 80090b4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80090b6:	b144      	cbz	r4, 80090ca <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 80090b8:	4e12      	ldr	r6, [pc, #72]	; (8009104 <xTaskResumeAll+0xe4>)
 80090ba:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80090bc:	f7ff ff18 	bl	8008ef0 <xTaskIncrementTick>
 80090c0:	b100      	cbz	r0, 80090c4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80090c2:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090c4:	3c01      	subs	r4, #1
 80090c6:	d1f9      	bne.n	80090bc <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 80090c8:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <xTaskResumeAll+0xe4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0bc      	beq.n	800904c <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 80090d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80090d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80090e6:	2401      	movs	r4, #1
 80090e8:	e7b1      	b.n	800904e <xTaskResumeAll+0x2e>
 80090ea:	bf00      	nop
 80090ec:	20014f64 	.word	0x20014f64
 80090f0:	20014f58 	.word	0x20014f58
 80090f4:	20014fa0 	.word	0x20014fa0
 80090f8:	20014f6c 	.word	0x20014f6c
 80090fc:	20014af8 	.word	0x20014af8
 8009100:	20014aec 	.word	0x20014aec
 8009104:	20014fe4 	.word	0x20014fe4
 8009108:	20014f60 	.word	0x20014f60

0800910c <vTaskDelay>:
	{
 800910c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800910e:	b950      	cbnz	r0, 8009126 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009110:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009118:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
	}
 8009124:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <vTaskDelay+0x48>)
 8009128:	6819      	ldr	r1, [r3, #0]
 800912a:	b151      	cbz	r1, 8009142 <vTaskDelay+0x36>
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	b672      	cpsid	i
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	b662      	cpsie	i
 8009140:	e7fe      	b.n	8009140 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8009142:	f7ff fec7 	bl	8008ed4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009146:	f7ff fd71 	bl	8008c2c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800914a:	f7ff ff69 	bl	8009020 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800914e:	2800      	cmp	r0, #0
 8009150:	d0de      	beq.n	8009110 <vTaskDelay+0x4>
 8009152:	e7e7      	b.n	8009124 <vTaskDelay+0x18>
 8009154:	20014f64 	.word	0x20014f64

08009158 <vTaskSetApplicationTaskTag>:
	{
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800915c:	4604      	mov	r4, r0
 800915e:	b908      	cbnz	r0, 8009164 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8009160:	4b04      	ldr	r3, [pc, #16]	; (8009174 <vTaskSetApplicationTaskTag+0x1c>)
 8009162:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8009164:	f7fe fdf6 	bl	8007d54 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8009168:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800916a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800916e:	f7fe be15 	b.w	8007d9c <vPortExitCritical>
 8009172:	bf00      	nop
 8009174:	20014aec 	.word	0x20014aec

08009178 <xTaskCallApplicationTaskHook>:
	{
 8009178:	4603      	mov	r3, r0
 800917a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800917c:	b90b      	cbnz	r3, 8009182 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800917e:	4b03      	ldr	r3, [pc, #12]	; (800918c <xTaskCallApplicationTaskHook+0x14>)
 8009180:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8009182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009184:	b103      	cbz	r3, 8009188 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8009186:	4718      	bx	r3
	}
 8009188:	4618      	mov	r0, r3
 800918a:	4770      	bx	lr
 800918c:	20014aec 	.word	0x20014aec

08009190 <vTaskStartScheduler>:
{
 8009190:	b510      	push	{r4, lr}
 8009192:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009194:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009196:	aa07      	add	r2, sp, #28
 8009198:	a906      	add	r1, sp, #24
 800919a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800919c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091a0:	f7fe fc1c 	bl	80079dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091a4:	9b05      	ldr	r3, [sp, #20]
 80091a6:	9a07      	ldr	r2, [sp, #28]
 80091a8:	9302      	str	r3, [sp, #8]
 80091aa:	9b06      	ldr	r3, [sp, #24]
 80091ac:	491b      	ldr	r1, [pc, #108]	; (800921c <vTaskStartScheduler+0x8c>)
 80091ae:	481c      	ldr	r0, [pc, #112]	; (8009220 <vTaskStartScheduler+0x90>)
 80091b0:	e9cd 4300 	strd	r4, r3, [sp]
 80091b4:	4623      	mov	r3, r4
 80091b6:	f7ff fe22 	bl	8008dfe <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80091ba:	b360      	cbz	r0, 8009216 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 80091bc:	f000 face 	bl	800975c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80091c0:	2801      	cmp	r0, #1
 80091c2:	d11b      	bne.n	80091fc <vTaskStartScheduler+0x6c>
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	b672      	cpsid	i
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295
 80091dc:	4b11      	ldr	r3, [pc, #68]	; (8009224 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 80091de:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 80091e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091e2:	4b11      	ldr	r3, [pc, #68]	; (8009228 <vTaskStartScheduler+0x98>)
 80091e4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091e6:	4b11      	ldr	r3, [pc, #68]	; (800922c <vTaskStartScheduler+0x9c>)
 80091e8:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 80091ea:	4b11      	ldr	r3, [pc, #68]	; (8009230 <vTaskStartScheduler+0xa0>)
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	f7ff ffc3 	bl	8009178 <xTaskCallApplicationTaskHook>
}
 80091f2:	b008      	add	sp, #32
 80091f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80091f8:	f7fe be46 	b.w	8007e88 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091fc:	3001      	adds	r0, #1
 80091fe:	d10a      	bne.n	8009216 <vTaskStartScheduler+0x86>
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	b672      	cpsid	i
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	b662      	cpsie	i
 8009214:	e7fe      	b.n	8009214 <vTaskStartScheduler+0x84>
}
 8009216:	b008      	add	sp, #32
 8009218:	bd10      	pop	{r4, pc}
 800921a:	bf00      	nop
 800921c:	0802d6ab 	.word	0x0802d6ab
 8009220:	08008cfd 	.word	0x08008cfd
 8009224:	20014f98 	.word	0x20014f98
 8009228:	20014fb4 	.word	0x20014fb4
 800922c:	20014fe0 	.word	0x20014fe0
 8009230:	20014aec 	.word	0x20014aec

08009234 <vTaskSwitchContext>:
{
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009236:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <vTaskSwitchContext+0x78>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <vTaskSwitchContext+0x7c>)
 800923c:	b112      	cbz	r2, 8009244 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800923e:	2201      	movs	r2, #1
 8009240:	601a      	str	r2, [r3, #0]
}
 8009242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8009244:	4c1b      	ldr	r4, [pc, #108]	; (80092b4 <vTaskSwitchContext+0x80>)
 8009246:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009248:	4e1b      	ldr	r6, [pc, #108]	; (80092b8 <vTaskSwitchContext+0x84>)
 800924a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800924c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	f7ff ff92 	bl	8009178 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009254:	6832      	ldr	r2, [r6, #0]
 8009256:	4919      	ldr	r1, [pc, #100]	; (80092bc <vTaskSwitchContext+0x88>)
 8009258:	fb07 f302 	mul.w	r3, r7, r2
 800925c:	58cd      	ldr	r5, [r1, r3]
 800925e:	18c8      	adds	r0, r1, r3
 8009260:	b1ad      	cbz	r5, 800928e <vTaskSwitchContext+0x5a>
 8009262:	6845      	ldr	r5, [r0, #4]
 8009264:	3308      	adds	r3, #8
 8009266:	686d      	ldr	r5, [r5, #4]
 8009268:	440b      	add	r3, r1
 800926a:	429d      	cmp	r5, r3
 800926c:	6045      	str	r5, [r0, #4]
 800926e:	bf04      	itt	eq
 8009270:	686b      	ldreq	r3, [r5, #4]
 8009272:	6043      	streq	r3, [r0, #4]
 8009274:	2314      	movs	r3, #20
 8009276:	fb03 1102 	mla	r1, r3, r2, r1
 800927a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800927c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8009284:	6820      	ldr	r0, [r4, #0]
}
 8009286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800928a:	f7ff bf75 	b.w	8009178 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800928e:	b952      	cbnz	r2, 80092a6 <vTaskSwitchContext+0x72>
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	b672      	cpsid	i
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	b662      	cpsie	i
 80092a4:	e7fe      	b.n	80092a4 <vTaskSwitchContext+0x70>
 80092a6:	3a01      	subs	r2, #1
 80092a8:	e7d6      	b.n	8009258 <vTaskSwitchContext+0x24>
 80092aa:	bf00      	nop
 80092ac:	20014f64 	.word	0x20014f64
 80092b0:	20014fe4 	.word	0x20014fe4
 80092b4:	20014aec 	.word	0x20014aec
 80092b8:	20014f6c 	.word	0x20014f6c
 80092bc:	20014af8 	.word	0x20014af8

080092c0 <vTaskPlaceOnEventList>:
{
 80092c0:	b510      	push	{r4, lr}
 80092c2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80092c4:	b950      	cbnz	r0, 80092dc <vTaskPlaceOnEventList+0x1c>
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	b672      	cpsid	i
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	b662      	cpsie	i
 80092da:	e7fe      	b.n	80092da <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <vTaskPlaceOnEventList+0x34>)
 80092de:	6819      	ldr	r1, [r3, #0]
 80092e0:	3118      	adds	r1, #24
 80092e2:	f7fe fca5 	bl	8007c30 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092e6:	4620      	mov	r0, r4
 80092e8:	2101      	movs	r1, #1
}
 80092ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092ee:	f7ff bc9d 	b.w	8008c2c <prvAddCurrentTaskToDelayedList>
 80092f2:	bf00      	nop
 80092f4:	20014aec 	.word	0x20014aec

080092f8 <vTaskPlaceOnEventListRestricted>:
	{
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	460d      	mov	r5, r1
 80092fc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80092fe:	b950      	cbnz	r0, 8009316 <vTaskPlaceOnEventListRestricted+0x1e>
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	b672      	cpsid	i
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	b662      	cpsie	i
 8009314:	e7fe      	b.n	8009314 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009316:	4b07      	ldr	r3, [pc, #28]	; (8009334 <vTaskPlaceOnEventListRestricted+0x3c>)
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	3118      	adds	r1, #24
 800931c:	f7fe fc7c 	bl	8007c18 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009320:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009322:	4621      	mov	r1, r4
 8009324:	bf0c      	ite	eq
 8009326:	4628      	moveq	r0, r5
 8009328:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800932c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009330:	f7ff bc7c 	b.w	8008c2c <prvAddCurrentTaskToDelayedList>
 8009334:	20014aec 	.word	0x20014aec

08009338 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009338:	68c3      	ldr	r3, [r0, #12]
{
 800933a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800933c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800933e:	b954      	cbnz	r4, 8009356 <xTaskRemoveFromEventList+0x1e>
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	b672      	cpsid	i
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	b662      	cpsie	i
 8009354:	e7fe      	b.n	8009354 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009356:	f104 0118 	add.w	r1, r4, #24
 800935a:	4608      	mov	r0, r1
 800935c:	9101      	str	r1, [sp, #4]
 800935e:	f7fe fc7e 	bl	8007c5e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009362:	4b12      	ldr	r3, [pc, #72]	; (80093ac <xTaskRemoveFromEventList+0x74>)
 8009364:	9901      	ldr	r1, [sp, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	b9e3      	cbnz	r3, 80093a4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800936a:	1d21      	adds	r1, r4, #4
 800936c:	4608      	mov	r0, r1
 800936e:	9101      	str	r1, [sp, #4]
 8009370:	f7fe fc75 	bl	8007c5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009374:	4a0e      	ldr	r2, [pc, #56]	; (80093b0 <xTaskRemoveFromEventList+0x78>)
 8009376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009378:	6810      	ldr	r0, [r2, #0]
 800937a:	9901      	ldr	r1, [sp, #4]
 800937c:	4283      	cmp	r3, r0
 800937e:	d900      	bls.n	8009382 <xTaskRemoveFromEventList+0x4a>
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	4a0c      	ldr	r2, [pc, #48]	; (80093b4 <xTaskRemoveFromEventList+0x7c>)
 8009384:	2014      	movs	r0, #20
 8009386:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800938a:	f7fe fc45 	bl	8007c18 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800938e:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <xTaskRemoveFromEventList+0x80>)
 8009390:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	429a      	cmp	r2, r3
 8009398:	d906      	bls.n	80093a8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800939a:	2001      	movs	r0, #1
 800939c:	4b07      	ldr	r3, [pc, #28]	; (80093bc <xTaskRemoveFromEventList+0x84>)
 800939e:	6018      	str	r0, [r3, #0]
}
 80093a0:	b002      	add	sp, #8
 80093a2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093a4:	4806      	ldr	r0, [pc, #24]	; (80093c0 <xTaskRemoveFromEventList+0x88>)
 80093a6:	e7f0      	b.n	800938a <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 80093a8:	2000      	movs	r0, #0
	return xReturn;
 80093aa:	e7f9      	b.n	80093a0 <xTaskRemoveFromEventList+0x68>
 80093ac:	20014f64 	.word	0x20014f64
 80093b0:	20014f6c 	.word	0x20014f6c
 80093b4:	20014af8 	.word	0x20014af8
 80093b8:	20014aec 	.word	0x20014aec
 80093bc:	20014fe4 	.word	0x20014fe4
 80093c0:	20014fa0 	.word	0x20014fa0

080093c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093c4:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <vTaskInternalSetTimeOutState+0x10>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093ca:	4b03      	ldr	r3, [pc, #12]	; (80093d8 <vTaskInternalSetTimeOutState+0x14>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6043      	str	r3, [r0, #4]
}
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20014f9c 	.word	0x20014f9c
 80093d8:	20014fe0 	.word	0x20014fe0

080093dc <xTaskCheckForTimeOut>:
{
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80093e0:	4605      	mov	r5, r0
 80093e2:	b950      	cbnz	r0, 80093fa <xTaskCheckForTimeOut+0x1e>
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	b672      	cpsid	i
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	b662      	cpsie	i
 80093f8:	e7fe      	b.n	80093f8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80093fa:	b951      	cbnz	r1, 8009412 <xTaskCheckForTimeOut+0x36>
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	b672      	cpsid	i
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	b662      	cpsie	i
 8009410:	e7fe      	b.n	8009410 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8009412:	f7fe fc9f 	bl	8007d54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009416:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <xTaskCheckForTimeOut+0x78>)
 8009418:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	d010      	beq.n	8009442 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009420:	480d      	ldr	r0, [pc, #52]	; (8009458 <xTaskCheckForTimeOut+0x7c>)
 8009422:	682e      	ldr	r6, [r5, #0]
 8009424:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009426:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009428:	4286      	cmp	r6, r0
 800942a:	d001      	beq.n	8009430 <xTaskCheckForTimeOut+0x54>
 800942c:	428a      	cmp	r2, r1
 800942e:	d90f      	bls.n	8009450 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009430:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009432:	4283      	cmp	r3, r0
 8009434:	d90a      	bls.n	800944c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8009436:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009438:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800943a:	4413      	add	r3, r2
 800943c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800943e:	f7ff ffc1 	bl	80093c4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009442:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009444:	f7fe fcaa 	bl	8007d9c <vPortExitCritical>
}
 8009448:	4620      	mov	r0, r4
 800944a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009450:	2401      	movs	r4, #1
 8009452:	e7f7      	b.n	8009444 <xTaskCheckForTimeOut+0x68>
 8009454:	20014fe0 	.word	0x20014fe0
 8009458:	20014f9c 	.word	0x20014f9c

0800945c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800945c:	4b01      	ldr	r3, [pc, #4]	; (8009464 <vTaskMissedYield+0x8>)
 800945e:	2201      	movs	r2, #1
 8009460:	601a      	str	r2, [r3, #0]
}
 8009462:	4770      	bx	lr
 8009464:	20014fe4 	.word	0x20014fe4

08009468 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009468:	4b01      	ldr	r3, [pc, #4]	; (8009470 <xTaskGetCurrentTaskHandle+0x8>)
 800946a:	6818      	ldr	r0, [r3, #0]
	}
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20014aec 	.word	0x20014aec

08009474 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <xTaskGetSchedulerState+0x18>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	b133      	cbz	r3, 8009488 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <xTaskGetSchedulerState+0x1c>)
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	fab0 f080 	clz	r0, r0
 8009482:	0940      	lsrs	r0, r0, #5
 8009484:	0040      	lsls	r0, r0, #1
 8009486:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009488:	2001      	movs	r0, #1
	}
 800948a:	4770      	bx	lr
 800948c:	20014fb4 	.word	0x20014fb4
 8009490:	20014f64 	.word	0x20014f64

08009494 <xTaskPriorityInherit>:
	{
 8009494:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8009496:	4604      	mov	r4, r0
 8009498:	b340      	cbz	r0, 80094ec <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800949a:	4d1b      	ldr	r5, [pc, #108]	; (8009508 <xTaskPriorityInherit+0x74>)
 800949c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800949e:	682a      	ldr	r2, [r5, #0]
 80094a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d228      	bcs.n	80094f8 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094a6:	6982      	ldr	r2, [r0, #24]
 80094a8:	2a00      	cmp	r2, #0
 80094aa:	db04      	blt.n	80094b6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ac:	682a      	ldr	r2, [r5, #0]
 80094ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094b0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80094b4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094b6:	2214      	movs	r2, #20
 80094b8:	4e14      	ldr	r6, [pc, #80]	; (800950c <xTaskPriorityInherit+0x78>)
 80094ba:	fb02 6303 	mla	r3, r2, r3, r6
 80094be:	6962      	ldr	r2, [r4, #20]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d115      	bne.n	80094f0 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094c4:	1d21      	adds	r1, r4, #4
 80094c6:	4608      	mov	r0, r1
 80094c8:	9101      	str	r1, [sp, #4]
 80094ca:	f7fe fbc8 	bl	8007c5e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094ce:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094d0:	4a0f      	ldr	r2, [pc, #60]	; (8009510 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094d4:	6810      	ldr	r0, [r2, #0]
 80094d6:	9901      	ldr	r1, [sp, #4]
 80094d8:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094da:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094dc:	d900      	bls.n	80094e0 <xTaskPriorityInherit+0x4c>
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	2014      	movs	r0, #20
 80094e2:	fb00 6003 	mla	r0, r0, r3, r6
 80094e6:	f7fe fb97 	bl	8007c18 <vListInsertEnd>
				xReturn = pdTRUE;
 80094ea:	2001      	movs	r0, #1
	}
 80094ec:	b002      	add	sp, #8
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094f6:	e7f8      	b.n	80094ea <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	4298      	cmp	r0, r3
 8009500:	bf2c      	ite	cs
 8009502:	2000      	movcs	r0, #0
 8009504:	2001      	movcc	r0, #1
 8009506:	e7f1      	b.n	80094ec <xTaskPriorityInherit+0x58>
 8009508:	20014aec 	.word	0x20014aec
 800950c:	20014af8 	.word	0x20014af8
 8009510:	20014f6c 	.word	0x20014f6c

08009514 <xTaskPriorityDisinherit>:
	{
 8009514:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8009516:	b910      	cbnz	r0, 800951e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009518:	2000      	movs	r0, #0
	}
 800951a:	b002      	add	sp, #8
 800951c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800951e:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <xTaskPriorityDisinherit+0x84>)
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	4284      	cmp	r4, r0
 8009524:	d00a      	beq.n	800953c <xTaskPriorityDisinherit+0x28>
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	b672      	cpsid	i
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	b662      	cpsie	i
 800953a:	e7fe      	b.n	800953a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800953c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800953e:	b953      	cbnz	r3, 8009556 <xTaskPriorityDisinherit+0x42>
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	b672      	cpsid	i
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	b662      	cpsie	i
 8009554:	e7fe      	b.n	8009554 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009556:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009558:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800955a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800955c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800955e:	4291      	cmp	r1, r2
 8009560:	d0da      	beq.n	8009518 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1d8      	bne.n	8009518 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009566:	1d21      	adds	r1, r4, #4
 8009568:	4608      	mov	r0, r1
 800956a:	9101      	str	r1, [sp, #4]
 800956c:	f7fe fb77 	bl	8007c5e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009570:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8009572:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009574:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009578:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800957c:	4a07      	ldr	r2, [pc, #28]	; (800959c <xTaskPriorityDisinherit+0x88>)
 800957e:	6810      	ldr	r0, [r2, #0]
 8009580:	4283      	cmp	r3, r0
 8009582:	d900      	bls.n	8009586 <xTaskPriorityDisinherit+0x72>
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	4a06      	ldr	r2, [pc, #24]	; (80095a0 <xTaskPriorityDisinherit+0x8c>)
 8009588:	2014      	movs	r0, #20
 800958a:	fb00 2003 	mla	r0, r0, r3, r2
 800958e:	f7fe fb43 	bl	8007c18 <vListInsertEnd>
					xReturn = pdTRUE;
 8009592:	2001      	movs	r0, #1
		return xReturn;
 8009594:	e7c1      	b.n	800951a <xTaskPriorityDisinherit+0x6>
 8009596:	bf00      	nop
 8009598:	20014aec 	.word	0x20014aec
 800959c:	20014f6c 	.word	0x20014f6c
 80095a0:	20014af8 	.word	0x20014af8

080095a4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80095a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80095a6:	4604      	mov	r4, r0
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d048      	beq.n	800963e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 80095ac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80095ae:	b952      	cbnz	r2, 80095c6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	b672      	cpsid	i
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	b662      	cpsie	i
 80095c4:	e7fe      	b.n	80095c4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80095c8:	4299      	cmp	r1, r3
 80095ca:	bf38      	it	cc
 80095cc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80095d0:	428b      	cmp	r3, r1
 80095d2:	d034      	beq.n	800963e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095d4:	2a01      	cmp	r2, #1
 80095d6:	d132      	bne.n	800963e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 80095d8:	4a1a      	ldr	r2, [pc, #104]	; (8009644 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 80095da:	6812      	ldr	r2, [r2, #0]
 80095dc:	4282      	cmp	r2, r0
 80095de:	d10a      	bne.n	80095f6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	b672      	cpsid	i
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	b662      	cpsie	i
 80095f4:	e7fe      	b.n	80095f4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095f6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095f8:	4d13      	ldr	r5, [pc, #76]	; (8009648 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095fa:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095fc:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8009600:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009602:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009606:	bfa8      	it	ge
 8009608:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800960c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800960e:	bfa8      	it	ge
 8009610:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009612:	429a      	cmp	r2, r3
 8009614:	d113      	bne.n	800963e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009616:	1d01      	adds	r1, r0, #4
 8009618:	4608      	mov	r0, r1
 800961a:	9101      	str	r1, [sp, #4]
 800961c:	f7fe fb1f 	bl	8007c5e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009620:	4a0a      	ldr	r2, [pc, #40]	; (800964c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8009622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009624:	6810      	ldr	r0, [r2, #0]
 8009626:	9901      	ldr	r1, [sp, #4]
 8009628:	4283      	cmp	r3, r0
 800962a:	d900      	bls.n	800962e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	2014      	movs	r0, #20
 8009630:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8009634:	b003      	add	sp, #12
 8009636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800963a:	f7fe baed 	b.w	8007c18 <vListInsertEnd>
	}
 800963e:	b003      	add	sp, #12
 8009640:	bd30      	pop	{r4, r5, pc}
 8009642:	bf00      	nop
 8009644:	20014aec 	.word	0x20014aec
 8009648:	20014af8 	.word	0x20014af8
 800964c:	20014f6c 	.word	0x20014f6c

08009650 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <pvTaskIncrementMutexHeldCount+0x14>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	b11a      	cbz	r2, 800965e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009656:	6819      	ldr	r1, [r3, #0]
 8009658:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800965a:	3201      	adds	r2, #1
 800965c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800965e:	6818      	ldr	r0, [r3, #0]
	}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20014aec 	.word	0x20014aec

08009668 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800966a:	4c11      	ldr	r4, [pc, #68]	; (80096b0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800966c:	f7fe fb72 	bl	8007d54 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009670:	6825      	ldr	r5, [r4, #0]
 8009672:	b9bd      	cbnz	r5, 80096a4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009674:	4f0f      	ldr	r7, [pc, #60]	; (80096b4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009676:	4e10      	ldr	r6, [pc, #64]	; (80096b8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009678:	4638      	mov	r0, r7
 800967a:	f7fe fabf 	bl	8007bfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800967e:	4630      	mov	r0, r6
 8009680:	f7fe fabc 	bl	8007bfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009684:	4b0d      	ldr	r3, [pc, #52]	; (80096bc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009686:	4a0e      	ldr	r2, [pc, #56]	; (80096c0 <prvCheckForValidListAndQueue+0x58>)
 8009688:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800968a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800968c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <prvCheckForValidListAndQueue+0x5c>)
 8009690:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009692:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <prvCheckForValidListAndQueue+0x60>)
 8009694:	9500      	str	r5, [sp, #0]
 8009696:	f7fe fda9 	bl	80081ec <xQueueGenericCreateStatic>
 800969a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800969c:	b110      	cbz	r0, 80096a4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800969e:	490b      	ldr	r1, [pc, #44]	; (80096cc <prvCheckForValidListAndQueue+0x64>)
 80096a0:	f7ff f9e4 	bl	8008a6c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80096a4:	b003      	add	sp, #12
 80096a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80096aa:	f7fe bb77 	b.w	8007d9c <vPortExitCritical>
 80096ae:	bf00      	nop
 80096b0:	2001510c 	.word	0x2001510c
 80096b4:	20015090 	.word	0x20015090
 80096b8:	200150a4 	.word	0x200150a4
 80096bc:	20014fe8 	.word	0x20014fe8
 80096c0:	20014ff0 	.word	0x20014ff0
 80096c4:	20014fec 	.word	0x20014fec
 80096c8:	200150bc 	.word	0x200150bc
 80096cc:	0802d6b0 	.word	0x0802d6b0

080096d0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80096d0:	4291      	cmp	r1, r2
{
 80096d2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096d4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096d6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80096d8:	d80a      	bhi.n	80096f0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	6982      	ldr	r2, [r0, #24]
 80096de:	4293      	cmp	r3, r2
 80096e0:	d20d      	bcs.n	80096fe <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096e2:	1d01      	adds	r1, r0, #4
 80096e4:	4b07      	ldr	r3, [pc, #28]	; (8009704 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	f7fe faa2 	bl	8007c30 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80096ec:	2000      	movs	r0, #0
}
 80096ee:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d201      	bcs.n	80096f8 <prvInsertTimerInActiveList+0x28>
 80096f4:	4299      	cmp	r1, r3
 80096f6:	d202      	bcs.n	80096fe <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096f8:	1d01      	adds	r1, r0, #4
 80096fa:	4b03      	ldr	r3, [pc, #12]	; (8009708 <prvInsertTimerInActiveList+0x38>)
 80096fc:	e7f3      	b.n	80096e6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80096fe:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009700:	e7f5      	b.n	80096ee <prvInsertTimerInActiveList+0x1e>
 8009702:	bf00      	nop
 8009704:	20014fec 	.word	0x20014fec
 8009708:	20014fe8 	.word	0x20014fe8

0800970c <prvInitialiseNewTimer>:
{
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	9c07      	ldr	r4, [sp, #28]
 8009712:	4680      	mov	r8, r0
 8009714:	4616      	mov	r6, r2
 8009716:	461f      	mov	r7, r3
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009718:	460d      	mov	r5, r1
 800971a:	b951      	cbnz	r1, 8009732 <prvInitialiseNewTimer+0x26>
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	b672      	cpsid	i
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	b662      	cpsie	i
 8009730:	e7fe      	b.n	8009730 <prvInitialiseNewTimer+0x24>
	if( pxNewTimer != NULL )
 8009732:	b18c      	cbz	r4, 8009758 <prvInitialiseNewTimer+0x4c>
		prvCheckForValidListAndQueue();
 8009734:	f7ff ff98 	bl	8009668 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009738:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800973a:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 800973c:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009740:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 8009742:	e9c4 5706 	strd	r5, r7, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009746:	f7fe fa64 	bl	8007c12 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800974a:	b12e      	cbz	r6, 8009758 <prvInitialiseNewTimer+0x4c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800974c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009750:	f043 0304 	orr.w	r3, r3, #4
 8009754:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8009758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800975c <xTimerCreateTimerTask>:
{
 800975c:	b510      	push	{r4, lr}
 800975e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009760:	f7ff ff82 	bl	8009668 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009764:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <xTimerCreateTimerTask+0x58>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	b1b3      	cbz	r3, 8009798 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800976a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800976c:	aa07      	add	r2, sp, #28
 800976e:	a906      	add	r1, sp, #24
 8009770:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009772:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009776:	f7fe f93d 	bl	80079f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	9a07      	ldr	r2, [sp, #28]
 800977e:	9302      	str	r3, [sp, #8]
 8009780:	9b06      	ldr	r3, [sp, #24]
 8009782:	490d      	ldr	r1, [pc, #52]	; (80097b8 <xTimerCreateTimerTask+0x5c>)
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	2302      	movs	r3, #2
 8009788:	480c      	ldr	r0, [pc, #48]	; (80097bc <xTimerCreateTimerTask+0x60>)
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	4623      	mov	r3, r4
 800978e:	f7ff fb36 	bl	8008dfe <xTaskCreateStatic>
 8009792:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <xTimerCreateTimerTask+0x64>)
 8009794:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009796:	b950      	cbnz	r0, 80097ae <xTimerCreateTimerTask+0x52>
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	b672      	cpsid	i
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	b662      	cpsie	i
	configASSERT( xReturn );
 80097ac:	e7fe      	b.n	80097ac <xTimerCreateTimerTask+0x50>
}
 80097ae:	2001      	movs	r0, #1
 80097b0:	b008      	add	sp, #32
 80097b2:	bd10      	pop	{r4, pc}
 80097b4:	2001510c 	.word	0x2001510c
 80097b8:	0802d6b5 	.word	0x0802d6b5
 80097bc:	08009959 	.word	0x08009959
 80097c0:	20015110 	.word	0x20015110

080097c4 <xTimerCreate>:
	{
 80097c4:	b530      	push	{r4, r5, lr}
 80097c6:	b087      	sub	sp, #28
 80097c8:	4605      	mov	r5, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80097ca:	202c      	movs	r0, #44	; 0x2c
	{
 80097cc:	9303      	str	r3, [sp, #12]
 80097ce:	e9cd 2104 	strd	r2, r1, [sp, #16]
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80097d2:	f7fe f941 	bl	8007a58 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80097d6:	4604      	mov	r4, r0
 80097d8:	b158      	cbz	r0, 80097f2 <xTimerCreate+0x2e>
			pxNewTimer->ucStatus = 0x00;
 80097da:	2000      	movs	r0, #0
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80097dc:	9905      	ldr	r1, [sp, #20]
			pxNewTimer->ucStatus = 0x00;
 80097de:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80097e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80097e4:	9401      	str	r4, [sp, #4]
 80097e6:	9000      	str	r0, [sp, #0]
 80097e8:	4628      	mov	r0, r5
 80097ea:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80097ee:	f7ff ff8d 	bl	800970c <prvInitialiseNewTimer>
	}
 80097f2:	4620      	mov	r0, r4
 80097f4:	b007      	add	sp, #28
 80097f6:	bd30      	pop	{r4, r5, pc}

080097f8 <xTimerCreateStatic>:
	{
 80097f8:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 80097fa:	252c      	movs	r5, #44	; 0x2c
	{
 80097fc:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
 80097fe:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009800:	9d03      	ldr	r5, [sp, #12]
	{
 8009802:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8009804:	2d2c      	cmp	r5, #44	; 0x2c
 8009806:	d00a      	beq.n	800981e <xTimerCreateStatic+0x26>
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	b672      	cpsid	i
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	b662      	cpsie	i
 800981c:	e7fe      	b.n	800981c <xTimerCreateStatic+0x24>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800981e:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 8009820:	b954      	cbnz	r4, 8009838 <xTimerCreateStatic+0x40>
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	b672      	cpsid	i
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	b662      	cpsie	i
 8009836:	e7fe      	b.n	8009836 <xTimerCreateStatic+0x3e>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009838:	2502      	movs	r5, #2
 800983a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800983e:	9d08      	ldr	r5, [sp, #32]
 8009840:	9401      	str	r4, [sp, #4]
 8009842:	9500      	str	r5, [sp, #0]
 8009844:	f7ff ff62 	bl	800970c <prvInitialiseNewTimer>
	}
 8009848:	4620      	mov	r0, r4
 800984a:	b005      	add	sp, #20
 800984c:	bd30      	pop	{r4, r5, pc}
	...

08009850 <xTimerGenericCommand>:
{
 8009850:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009852:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009854:	4604      	mov	r4, r0
{
 8009856:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009858:	b950      	cbnz	r0, 8009870 <xTimerGenericCommand+0x20>
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	b672      	cpsid	i
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	b662      	cpsie	i
 800986e:	e7fe      	b.n	800986e <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8009870:	4d0c      	ldr	r5, [pc, #48]	; (80098a4 <xTimerGenericCommand+0x54>)
 8009872:	6828      	ldr	r0, [r5, #0]
 8009874:	b178      	cbz	r0, 8009896 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009876:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009878:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800987a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800987e:	dc0c      	bgt.n	800989a <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009880:	f7ff fdf8 	bl	8009474 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009884:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009886:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009888:	4669      	mov	r1, sp
 800988a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800988c:	bf0c      	ite	eq
 800988e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009890:	461a      	movne	r2, r3
 8009892:	f7fe fd30 	bl	80082f6 <xQueueGenericSend>
}
 8009896:	b004      	add	sp, #16
 8009898:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800989a:	2300      	movs	r3, #0
 800989c:	4669      	mov	r1, sp
 800989e:	f7fe fe37 	bl	8008510 <xQueueGenericSendFromISR>
 80098a2:	e7f8      	b.n	8009896 <xTimerGenericCommand+0x46>
 80098a4:	2001510c 	.word	0x2001510c

080098a8 <prvSampleTimeNow>:
{
 80098a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80098ac:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009954 <prvSampleTimeNow+0xac>
{
 80098b0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80098b2:	f7ff fb17 	bl	8008ee4 <xTaskGetTickCount>
 80098b6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80098b8:	f8d8 3000 	ldr.w	r3, [r8]
 80098bc:	4283      	cmp	r3, r0
 80098be:	d90b      	bls.n	80098d8 <prvSampleTimeNow+0x30>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098c0:	4f22      	ldr	r7, [pc, #136]	; (800994c <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098c2:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	b96a      	cbnz	r2, 80098e8 <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 80098cc:	4a20      	ldr	r2, [pc, #128]	; (8009950 <prvSampleTimeNow+0xa8>)
 80098ce:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80098d4:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80098d6:	e000      	b.n	80098da <prvSampleTimeNow+0x32>
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80098dc:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80098de:	f8c8 5000 	str.w	r5, [r8]
}
 80098e2:	b004      	add	sp, #16
 80098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098e8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ea:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098ec:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098f0:	1d21      	adds	r1, r4, #4
 80098f2:	4608      	mov	r0, r1
 80098f4:	9103      	str	r1, [sp, #12]
 80098f6:	f7fe f9b2 	bl	8007c5e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098fa:	6a23      	ldr	r3, [r4, #32]
 80098fc:	4620      	mov	r0, r4
 80098fe:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009900:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009904:	9903      	ldr	r1, [sp, #12]
 8009906:	f013 0f04 	tst.w	r3, #4
 800990a:	d0dc      	beq.n	80098c6 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800990c:	69a3      	ldr	r3, [r4, #24]
 800990e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009910:	459a      	cmp	sl, r3
 8009912:	d205      	bcs.n	8009920 <prvSampleTimeNow+0x78>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009914:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009916:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009918:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800991a:	f7fe f989 	bl	8007c30 <vListInsert>
 800991e:	e7d2      	b.n	80098c6 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009920:	2300      	movs	r3, #0
 8009922:	4652      	mov	r2, sl
 8009924:	4620      	mov	r0, r4
 8009926:	f8cd 9000 	str.w	r9, [sp]
 800992a:	4619      	mov	r1, r3
 800992c:	f7ff ff90 	bl	8009850 <xTimerGenericCommand>
				configASSERT( xResult );
 8009930:	2800      	cmp	r0, #0
 8009932:	d1c8      	bne.n	80098c6 <prvSampleTimeNow+0x1e>
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	b672      	cpsid	i
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	b662      	cpsie	i
 8009948:	e7fe      	b.n	8009948 <prvSampleTimeNow+0xa0>
 800994a:	bf00      	nop
 800994c:	20014fe8 	.word	0x20014fe8
 8009950:	20014fec 	.word	0x20014fec
 8009954:	200150b8 	.word	0x200150b8

08009958 <prvTimerTask>:
{
 8009958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800995c:	4d71      	ldr	r5, [pc, #452]	; (8009b24 <prvTimerTask+0x1cc>)
{
 800995e:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009960:	4e71      	ldr	r6, [pc, #452]	; (8009b28 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	f8d3 8000 	ldr.w	r8, [r3]
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	d037      	beq.n	80099de <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800996e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009970:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009972:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8009976:	f7ff faad 	bl	8008ed4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800997a:	a804      	add	r0, sp, #16
 800997c:	f7ff ff94 	bl	80098a8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009980:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009982:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009984:	2b00      	cmp	r3, #0
 8009986:	d16b      	bne.n	8009a60 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009988:	2c00      	cmp	r4, #0
 800998a:	d14e      	bne.n	8009a2a <prvTimerTask+0xd2>
 800998c:	4540      	cmp	r0, r8
 800998e:	d352      	bcc.n	8009a36 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8009990:	f7ff fb46 	bl	8009020 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800999a:	1d38      	adds	r0, r7, #4
 800999c:	f7fe f95f 	bl	8007c5e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099a4:	0758      	lsls	r0, r3, #29
 80099a6:	d51c      	bpl.n	80099e2 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099a8:	69b9      	ldr	r1, [r7, #24]
 80099aa:	4643      	mov	r3, r8
 80099ac:	464a      	mov	r2, r9
 80099ae:	4638      	mov	r0, r7
 80099b0:	4441      	add	r1, r8
 80099b2:	f7ff fe8d 	bl	80096d0 <prvInsertTimerInActiveList>
 80099b6:	b1c0      	cbz	r0, 80099ea <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099b8:	4623      	mov	r3, r4
 80099ba:	4642      	mov	r2, r8
 80099bc:	4621      	mov	r1, r4
 80099be:	4638      	mov	r0, r7
 80099c0:	9400      	str	r4, [sp, #0]
 80099c2:	f7ff ff45 	bl	8009850 <xTimerGenericCommand>
			configASSERT( xResult );
 80099c6:	b980      	cbnz	r0, 80099ea <prvTimerTask+0x92>
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	b672      	cpsid	i
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	b662      	cpsie	i
 80099dc:	e7fe      	b.n	80099dc <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099de:	2401      	movs	r4, #1
 80099e0:	e7c9      	b.n	8009976 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099e2:	f023 0301 	bic.w	r3, r3, #1
 80099e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	4638      	mov	r0, r7
 80099ee:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099f0:	2200      	movs	r2, #0
 80099f2:	a904      	add	r1, sp, #16
 80099f4:	6830      	ldr	r0, [r6, #0]
 80099f6:	f7fe fe50 	bl	800869a <xQueueReceive>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0b1      	beq.n	8009962 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099fe:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a00:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	db2f      	blt.n	8009a66 <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a06:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a08:	6963      	ldr	r3, [r4, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d132      	bne.n	8009a74 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a0e:	a803      	add	r0, sp, #12
 8009a10:	f7ff ff4a 	bl	80098a8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009a14:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a16:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009a18:	2b09      	cmp	r3, #9
 8009a1a:	d8e9      	bhi.n	80099f0 <prvTimerTask+0x98>
 8009a1c:	e8df f003 	tbb	[pc, r3]
 8009a20:	592e2e2e 	.word	0x592e2e2e
 8009a24:	2e2e7a60 	.word	0x2e2e7a60
 8009a28:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a2a:	4b40      	ldr	r3, [pc, #256]	; (8009b2c <prvTimerTask+0x1d4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681c      	ldr	r4, [r3, #0]
 8009a30:	fab4 f484 	clz	r4, r4
 8009a34:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a36:	4622      	mov	r2, r4
 8009a38:	eba8 0109 	sub.w	r1, r8, r9
 8009a3c:	6830      	ldr	r0, [r6, #0]
 8009a3e:	f7ff f854 	bl	8008aea <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a42:	f7ff faed 	bl	8009020 <xTaskResumeAll>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d1d2      	bne.n	80099f0 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8009a4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a52:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	e7c7      	b.n	80099f0 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8009a60:	f7ff fade 	bl	8009020 <xTaskResumeAll>
}
 8009a64:	e7c4      	b.n	80099f0 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a66:	9b05      	ldr	r3, [sp, #20]
 8009a68:	9907      	ldr	r1, [sp, #28]
 8009a6a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a6c:	9b04      	ldr	r3, [sp, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	dbbe      	blt.n	80099f0 <prvTimerTask+0x98>
 8009a72:	e7c8      	b.n	8009a06 <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a74:	1d20      	adds	r0, r4, #4
 8009a76:	f7fe f8f2 	bl	8007c5e <uxListRemove>
 8009a7a:	e7c8      	b.n	8009a0e <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a80:	4620      	mov	r0, r4
 8009a82:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a84:	f043 0301 	orr.w	r3, r3, #1
 8009a88:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a8c:	9b05      	ldr	r3, [sp, #20]
 8009a8e:	4419      	add	r1, r3
 8009a90:	f7ff fe1e 	bl	80096d0 <prvInsertTimerInActiveList>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d0ab      	beq.n	80099f0 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a98:	6a23      	ldr	r3, [r4, #32]
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a9e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009aa2:	0759      	lsls	r1, r3, #29
 8009aa4:	d5a4      	bpl.n	80099f0 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009aa6:	69a2      	ldr	r2, [r4, #24]
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9905      	ldr	r1, [sp, #20]
 8009aac:	4620      	mov	r0, r4
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	440a      	add	r2, r1
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	f7ff fecc 	bl	8009850 <xTimerGenericCommand>
							configASSERT( xResult );
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d199      	bne.n	80099f0 <prvTimerTask+0x98>
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	b672      	cpsid	i
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	b662      	cpsie	i
 8009ad0:	e7fe      	b.n	8009ad0 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ad2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ad6:	f023 0301 	bic.w	r3, r3, #1
 8009ada:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009ade:	e787      	b.n	80099f0 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ae0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009ae4:	f043 0301 	orr.w	r3, r3, #1
 8009ae8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009aec:	9905      	ldr	r1, [sp, #20]
 8009aee:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009af0:	b951      	cbnz	r1, 8009b08 <prvTimerTask+0x1b0>
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	b672      	cpsid	i
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	b662      	cpsie	i
 8009b06:	e7fe      	b.n	8009b06 <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b08:	4603      	mov	r3, r0
 8009b0a:	4401      	add	r1, r0
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7ff fddf 	bl	80096d0 <prvInsertTimerInActiveList>
					break;
 8009b12:	e76d      	b.n	80099f0 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009b18:	079a      	lsls	r2, r3, #30
 8009b1a:	d4dc      	bmi.n	8009ad6 <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7fe f831 	bl	8007b84 <vPortFree>
 8009b22:	e765      	b.n	80099f0 <prvTimerTask+0x98>
 8009b24:	20014fe8 	.word	0x20014fe8
 8009b28:	2001510c 	.word	0x2001510c
 8009b2c:	20014fec 	.word	0x20014fec

08009b30 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009b30:	b513      	push	{r0, r1, r4, lr}
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8009b32:	4604      	mov	r4, r0
 8009b34:	b950      	cbnz	r0, 8009b4c <pvTimerGetTimerID+0x1c>
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	b672      	cpsid	i
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	b662      	cpsie	i
 8009b4a:	e7fe      	b.n	8009b4a <pvTimerGetTimerID+0x1a>

	taskENTER_CRITICAL();
 8009b4c:	f7fe f902 	bl	8007d54 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009b50:	69e0      	ldr	r0, [r4, #28]
 8009b52:	9001      	str	r0, [sp, #4]
	}
	taskEXIT_CRITICAL();
 8009b54:	f7fe f922 	bl	8007d9c <vPortExitCritical>

	return pvReturn;
}
 8009b58:	9801      	ldr	r0, [sp, #4]
 8009b5a:	b002      	add	sp, #8
 8009b5c:	bd10      	pop	{r4, pc}

08009b5e <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009b5e:	6843      	ldr	r3, [r0, #4]
{
 8009b60:	b510      	push	{r4, lr}
 8009b62:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 8009b64:	b14b      	cbz	r3, 8009b7a <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	2101      	movs	r1, #1
 8009b6a:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009b6c:	6923      	ldr	r3, [r4, #16]
 8009b6e:	b12b      	cbz	r3, 8009b7c <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8009b70:	23c8      	movs	r3, #200	; 0xc8
 8009b72:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8009b74:	2300      	movs	r3, #0
 8009b76:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8009b7a:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8009b7c:	2364      	movs	r3, #100	; 0x64
 8009b7e:	6163      	str	r3, [r4, #20]
 8009b80:	e7fb      	b.n	8009b7a <jpeg_abort+0x1c>

08009b82 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8009b82:	6843      	ldr	r3, [r0, #4]
{
 8009b84:	b510      	push	{r4, lr}
 8009b86:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 8009b88:	b10b      	cbz	r3, 8009b8e <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8009b92:	6163      	str	r3, [r4, #20]
}
 8009b94:	bd10      	pop	{r4, pc}

08009b96 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8009b96:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8009b98:	6843      	ldr	r3, [r0, #4]
 8009b9a:	2284      	movs	r2, #132	; 0x84
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 8009ba8:	bd08      	pop	{r3, pc}

08009baa <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009baa:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009bac:	6843      	ldr	r3, [r0, #4]
 8009bae:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8009bbe:	bd08      	pop	{r3, pc}

08009bc0 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009bc0:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8009bc2:	2950      	cmp	r1, #80	; 0x50
{
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009bca:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 8009bcc:	d007      	beq.n	8009bde <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8009bce:	6803      	ldr	r3, [r0, #0]
 8009bd0:	260d      	movs	r6, #13
 8009bd2:	2250      	movs	r2, #80	; 0x50
 8009bd4:	61d9      	str	r1, [r3, #28]
 8009bd6:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8009bde:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8009be2:	d009      	beq.n	8009bf8 <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	2116      	movs	r1, #22
 8009be8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009bec:	4620      	mov	r0, r4
 8009bee:	61dd      	str	r5, [r3, #28]
 8009bf0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8009bf8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8009c00:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8009c02:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8009c04:	f020 fd94 	bl	802a730 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 8009c08:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009c0a:	4620      	mov	r0, r4
    cinfo->err = err;
 8009c0c:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8009c0e:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8009c10:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8009c12:	f00b fe45 	bl	80158a0 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 8009c16:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 8009c18:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8009c1a:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8009c1c:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009c1e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009c22:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009c26:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009c2a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009c2e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009c32:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009c36:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009c3a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8009c3e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8009c42:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8009c46:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 8009c4a:	f005 f88d 	bl	800ed68 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f003 fd92 	bl	800d778 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8009c54:	23c8      	movs	r3, #200	; 0xc8
 8009c56:	6163      	str	r3, [r4, #20]
}
 8009c58:	bd70      	pop	{r4, r5, r6, pc}

08009c5a <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8009c5a:	f7ff bf92 	b.w	8009b82 <jpeg_destroy>
	...

08009c60 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8009c60:	6942      	ldr	r2, [r0, #20]
 8009c62:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 8009c66:	b570      	push	{r4, r5, r6, lr}
 8009c68:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 8009c6a:	2b0a      	cmp	r3, #10
 8009c6c:	f200 809f 	bhi.w	8009dae <jpeg_consume_input+0x14e>
 8009c70:	e8df f003 	tbb	[pc, r3]
 8009c74:	97a51006 	.word	0x97a51006
 8009c78:	97979797 	.word	0x97979797
 8009c7c:	9d97      	.short	0x9d97
 8009c7e:	97          	.byte	0x97
 8009c7f:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8009c80:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8009c88:	69a3      	ldr	r3, [r4, #24]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8009c90:	23c9      	movs	r3, #201	; 0xc9
 8009c92:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009c94:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009c98:	4620      	mov	r0, r4
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009c9e:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009ca0:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009ca2:	d12a      	bne.n	8009cfa <jpeg_consume_input+0x9a>
  switch (cinfo->num_components) {
 8009ca4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009ca6:	2d03      	cmp	r5, #3
 8009ca8:	d029      	beq.n	8009cfe <jpeg_consume_input+0x9e>
 8009caa:	2d04      	cmp	r5, #4
 8009cac:	d05f      	beq.n	8009d6e <jpeg_consume_input+0x10e>
 8009cae:	2d01      	cmp	r5, #1
 8009cb0:	d173      	bne.n	8009d9a <jpeg_consume_input+0x13a>
    break;
 8009cb2:	4603      	mov	r3, r0
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8009cb4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_GRAYSCALE;
 8009cb8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->output_gamma = 1.0;
 8009cbc:	2200      	movs	r2, #0
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8009cbe:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->dither_mode = JDITHER_FS;
 8009cc2:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009cc4:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8009cc8:	4b3e      	ldr	r3, [pc, #248]	; (8009dc4 <jpeg_consume_input+0x164>)
  cinfo->dither_mode = JDITHER_FS;
 8009cca:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 8009cce:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8009cd2:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009cd4:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8009cd6:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 8009cda:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 8009cde:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8009ce0:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8009ce2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8009ce6:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8009ce8:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8009cec:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8009cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009cf4:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8009cf6:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8009cf8:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
    if (cinfo->saw_JFIF_marker) {
 8009cfe:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009d02:	b983      	cbnz	r3, 8009d26 <jpeg_consume_input+0xc6>
    } else if (cinfo->saw_Adobe_marker) {
 8009d04:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009d08:	b18b      	cbz	r3, 8009d2e <jpeg_consume_input+0xce>
      switch (cinfo->Adobe_transform) {
 8009d0a:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009d0e:	b362      	cbz	r2, 8009d6a <jpeg_consume_input+0x10a>
 8009d10:	2a01      	cmp	r2, #1
 8009d12:	d008      	beq.n	8009d26 <jpeg_consume_input+0xc6>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	2174      	movs	r1, #116	; 0x74
 8009d18:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009d1a:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	f04f 31ff 	mov.w	r1, #4294967295
 8009d24:	4798      	blx	r3
    break;
 8009d26:	2302      	movs	r3, #2
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
 8009d28:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    break;
 8009d2c:	e7c4      	b.n	8009cb8 <jpeg_consume_input+0x58>
      int cid0 = cinfo->comp_info[0].component_id;
 8009d2e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009d32:	6819      	ldr	r1, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009d36:	2901      	cmp	r1, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8009d38:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009d3c:	d10f      	bne.n	8009d5e <jpeg_consume_input+0xfe>
 8009d3e:	2a02      	cmp	r2, #2
 8009d40:	d101      	bne.n	8009d46 <jpeg_consume_input+0xe6>
 8009d42:	2d03      	cmp	r5, #3
 8009d44:	d0ef      	beq.n	8009d26 <jpeg_consume_input+0xc6>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8009d4e:	2271      	movs	r2, #113	; 0x71
 8009d50:	621d      	str	r5, [r3, #32]
 8009d52:	2101      	movs	r1, #1
 8009d54:	2503      	movs	r5, #3
 8009d56:	615a      	str	r2, [r3, #20]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009d5c:	e7e3      	b.n	8009d26 <jpeg_consume_input+0xc6>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8009d5e:	2952      	cmp	r1, #82	; 0x52
 8009d60:	d1f1      	bne.n	8009d46 <jpeg_consume_input+0xe6>
 8009d62:	2a47      	cmp	r2, #71	; 0x47
 8009d64:	d1ef      	bne.n	8009d46 <jpeg_consume_input+0xe6>
 8009d66:	2d42      	cmp	r5, #66	; 0x42
 8009d68:	d1ed      	bne.n	8009d46 <jpeg_consume_input+0xe6>
 8009d6a:	2502      	movs	r5, #2
 8009d6c:	e7db      	b.n	8009d26 <jpeg_consume_input+0xc6>
    if (cinfo->saw_Adobe_marker) {
 8009d6e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009d72:	b173      	cbz	r3, 8009d92 <jpeg_consume_input+0x132>
      switch (cinfo->Adobe_transform) {
 8009d74:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009d78:	b15a      	cbz	r2, 8009d92 <jpeg_consume_input+0x132>
 8009d7a:	2a02      	cmp	r2, #2
 8009d7c:	d008      	beq.n	8009d90 <jpeg_consume_input+0x130>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	2174      	movs	r1, #116	; 0x74
 8009d82:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009d84:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d8e:	4798      	blx	r3
	break;
 8009d90:	2505      	movs	r5, #5
    break;
 8009d92:	2304      	movs	r3, #4
	cinfo->jpeg_color_space = JCS_CMYK;
 8009d94:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    break;
 8009d98:	e78e      	b.n	8009cb8 <jpeg_consume_input+0x58>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    break;
 8009da0:	e78a      	b.n	8009cb8 <jpeg_consume_input+0x58>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009da2:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8009da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009dae:	6803      	ldr	r3, [r0, #0]
 8009db0:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8009db2:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009db4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4798      	blx	r3
 8009dbc:	e79d      	b.n	8009cfa <jpeg_consume_input+0x9a>
  switch (cinfo->global_state) {
 8009dbe:	2601      	movs	r6, #1
  return retcode;
 8009dc0:	e79b      	b.n	8009cfa <jpeg_consume_input+0x9a>
 8009dc2:	bf00      	nop
 8009dc4:	3ff00000 	.word	0x3ff00000

08009dc8 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8009dc8:	6942      	ldr	r2, [r0, #20]
 8009dca:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 8009dce:	2b01      	cmp	r3, #1
{
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8009dd6:	d905      	bls.n	8009de4 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009dd8:	6803      	ldr	r3, [r0, #0]
 8009dda:	2115      	movs	r1, #21
 8009ddc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7ff ff3b 	bl	8009c60 <jpeg_consume_input>
  switch (retcode) {
 8009dea:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8009dec:	4605      	mov	r5, r0
  switch (retcode) {
 8009dee:	d00b      	beq.n	8009e08 <jpeg_read_header+0x40>
 8009df0:	2802      	cmp	r0, #2
 8009df2:	d109      	bne.n	8009e08 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009df4:	b12e      	cbz	r6, 8009e02 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	2235      	movs	r2, #53	; 0x35
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	615a      	str	r2, [r3, #20]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009e02:	4620      	mov	r0, r4
 8009e04:	f7ff feab 	bl	8009b5e <jpeg_abort>
}
 8009e08:	4628      	mov	r0, r5
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}

08009e0c <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009e0c:	6943      	ldr	r3, [r0, #20]
 8009e0e:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009e12:	2a01      	cmp	r2, #1
{
 8009e14:	b510      	push	{r4, lr}
 8009e16:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009e18:	d81f      	bhi.n	8009e5a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8009e1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009e1c:	bb0a      	cbnz	r2, 8009e62 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8009e1e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009e22:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d204      	bcs.n	8009e32 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8009e28:	6803      	ldr	r3, [r0, #0]
 8009e2a:	2245      	movs	r2, #69	; 0x45
 8009e2c:	615a      	str	r2, [r3, #20]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009e32:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009e36:	4620      	mov	r0, r4
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8009e3c:	23d2      	movs	r3, #210	; 0xd2
 8009e3e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8009e40:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009e44:	695a      	ldr	r2, [r3, #20]
 8009e46:	b1a2      	cbz	r2, 8009e72 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 8009e48:	69a3      	ldr	r3, [r4, #24]
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7ff fe84 	bl	8009b5e <jpeg_abort>
  return TRUE;
 8009e56:	2001      	movs	r0, #1
 8009e58:	e010      	b.n	8009e7c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8009e5a:	2bcf      	cmp	r3, #207	; 0xcf
 8009e5c:	d0ee      	beq.n	8009e3c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8009e5e:	2bd2      	cmp	r3, #210	; 0xd2
 8009e60:	d0ee      	beq.n	8009e40 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009e62:	6822      	ldr	r2, [r4, #0]
 8009e64:	2115      	movs	r1, #21
 8009e66:	4620      	mov	r0, r4
 8009e68:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8009e6c:	6813      	ldr	r3, [r2, #0]
 8009e6e:	4798      	blx	r3
 8009e70:	e7e6      	b.n	8009e40 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4620      	mov	r0, r4
 8009e76:	4798      	blx	r3
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d1e1      	bne.n	8009e40 <jpeg_finish_decompress+0x34>
}
 8009e7c:	bd10      	pop	{r4, pc}

08009e7e <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009e7e:	6943      	ldr	r3, [r0, #20]
 8009e80:	2bcc      	cmp	r3, #204	; 0xcc
{
 8009e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e86:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009e88:	d008      	beq.n	8009e9c <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009e8a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8009e98:	23cc      	movs	r3, #204	; 0xcc
 8009e9a:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009e9c:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8009ea0:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8009ea2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	b9f3      	cbnz	r3, 8009ee8 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009eaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 8009eac:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf14      	ite	ne
 8009eb2:	23ce      	movne	r3, #206	; 0xce
 8009eb4:	23cd      	moveq	r3, #205	; 0xcd
 8009eb6:	6163      	str	r3, [r4, #20]
}
 8009eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	b123      	cbz	r3, 8009eca <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009ec0:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009ec2:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009eca:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8009ed2:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009ed6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8009eda:	2300      	movs	r3, #0
 8009edc:	4619      	mov	r1, r3
 8009ede:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009ee0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009ee4:	42bb      	cmp	r3, r7
 8009ee6:	d011      	beq.n	8009f0c <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8009ee8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009eec:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009eee:	4291      	cmp	r1, r2
 8009ef0:	d3e4      	bcc.n	8009ebc <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009ef2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009efc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009f00:	4620      	mov	r0, r4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009f06:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8009f0a:	e7ca      	b.n	8009ea2 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e7d3      	b.n	8009eb8 <output_pass_setup+0x3a>

08009f10 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009f10:	6943      	ldr	r3, [r0, #20]
 8009f12:	2bca      	cmp	r3, #202	; 0xca
{
 8009f14:	b510      	push	{r4, lr}
 8009f16:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8009f18:	d109      	bne.n	8009f2e <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 8009f1a:	f005 f8cf 	bl	800f0bc <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8009f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f20:	b11b      	cbz	r3, 8009f2a <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009f22:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009f24:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009f26:	6163      	str	r3, [r4, #20]
}
 8009f28:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 8009f2a:	23cb      	movs	r3, #203	; 0xcb
 8009f2c:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8009f2e:	6962      	ldr	r2, [r4, #20]
 8009f30:	2acb      	cmp	r2, #203	; 0xcb
 8009f32:	d12c      	bne.n	8009f8e <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009f34:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	b1fb      	cbz	r3, 8009f7c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 8009f3c:	68a3      	ldr	r3, [r4, #8]
 8009f3e:	b113      	cbz	r3, 8009f46 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4620      	mov	r0, r4
 8009f44:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009f46:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d0e9      	beq.n	8009f28 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009f54:	2802      	cmp	r0, #2
 8009f56:	d011      	beq.n	8009f7c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8009f58:	68a3      	ldr	r3, [r4, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0ee      	beq.n	8009f3c <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8009f5e:	f020 0002 	bic.w	r0, r0, #2
 8009f62:	2801      	cmp	r0, #1
 8009f64:	d1ea      	bne.n	8009f3c <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	6899      	ldr	r1, [r3, #8]
 8009f6a:	3201      	adds	r2, #1
 8009f6c:	428a      	cmp	r2, r1
 8009f6e:	605a      	str	r2, [r3, #4]
 8009f70:	dbe4      	blt.n	8009f3c <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009f72:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009f76:	440a      	add	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]
 8009f7a:	e7df      	b.n	8009f3c <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 8009f7c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f80:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8009f84:	4620      	mov	r0, r4
}
 8009f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 8009f8a:	f7ff bf78 	b.w	8009e7e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 8009f8e:	2acc      	cmp	r2, #204	; 0xcc
 8009f90:	d0f8      	beq.n	8009f84 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	2115      	movs	r1, #21
 8009f96:	4620      	mov	r0, r4
 8009f98:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4798      	blx	r3
 8009fa0:	e7f0      	b.n	8009f84 <jpeg_start_decompress+0x74>

08009fa2 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fa4:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8009fa6:	6942      	ldr	r2, [r0, #20]
{
 8009fa8:	4604      	mov	r4, r0
 8009faa:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8009fac:	2acd      	cmp	r2, #205	; 0xcd
 8009fae:	d005      	beq.n	8009fbc <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009fb0:	6803      	ldr	r3, [r0, #0]
 8009fb2:	2115      	movs	r1, #21
 8009fb4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8009fbc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009fc0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d30a      	bcc.n	8009fdc <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	227e      	movs	r2, #126	; 0x7e
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8009fd0:	615a      	str	r2, [r3, #20]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	4798      	blx	r3
    return 0;
 8009fd6:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8009fd8:	b003      	add	sp, #12
 8009fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8009fdc:	68a0      	ldr	r0, [r4, #8]
 8009fde:	b120      	cbz	r0, 8009fea <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009fe0:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009fe4:	6803      	ldr	r3, [r0, #0]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4798      	blx	r3
  row_ctr = 0;
 8009fea:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009fec:	4620      	mov	r0, r4
 8009fee:	aa01      	add	r2, sp, #4
 8009ff0:	4629      	mov	r1, r5
  row_ctr = 0;
 8009ff2:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009ff4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009ff8:	685f      	ldr	r7, [r3, #4]
 8009ffa:	4633      	mov	r3, r6
 8009ffc:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8009ffe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a002:	9801      	ldr	r0, [sp, #4]
 800a004:	4403      	add	r3, r0
 800a006:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 800a00a:	e7e5      	b.n	8009fd8 <jpeg_read_scanlines+0x36>

0800a00c <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 800a00c:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 800a00e:	6984      	ldr	r4, [r0, #24]
{
 800a010:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 800a012:	6863      	ldr	r3, [r4, #4]
 800a014:	b943      	cbnz	r3, 800a028 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800a016:	68e3      	ldr	r3, [r4, #12]
 800a018:	4798      	blx	r3
 800a01a:	b928      	cbnz	r0, 800a028 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	2219      	movs	r2, #25
 800a020:	4628      	mov	r0, r5
 800a022:	615a      	str	r2, [r3, #20]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4798      	blx	r3
  src->bytes_in_buffer--;
 800a028:	6863      	ldr	r3, [r4, #4]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	6022      	str	r2, [r4, #0]
}
 800a034:	7818      	ldrb	r0, [r3, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}

0800a038 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800a038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a03c:	4680      	mov	r8, r0
 800a03e:	460d      	mov	r5, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 800a040:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800a044:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 800a048:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
  while (e->a < 0x8000L) {
 800a04c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a050:	db1c      	blt.n	800a08c <arith_decode+0x54>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 800a052:	7828      	ldrb	r0, [r5, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800a054:	4929      	ldr	r1, [pc, #164]	; (800a0fc <arith_decode+0xc4>)
 800a056:	f000 067f 	and.w	r6, r0, #127	; 0x7f

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 800a05a:	68a7      	ldr	r7, [r4, #8]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800a05c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
  temp = e->a - qe;
 800a060:	eba2 4221 	sub.w	r2, r2, r1, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 800a064:	ea4f 2c21 	mov.w	ip, r1, asr #8
  temp <<= e->ct;
 800a068:	fa02 f303 	lsl.w	r3, r2, r3
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800a06c:	140e      	asrs	r6, r1, #16
  e->a = temp;
 800a06e:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 800a070:	429f      	cmp	r7, r3
 800a072:	db34      	blt.n	800a0de <arith_decode+0xa6>
    e->c -= temp;
 800a074:	1aff      	subs	r7, r7, r3
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 800a076:	4296      	cmp	r6, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a078:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
      e->a = qe;
 800a07c:	60e6      	str	r6, [r4, #12]
    e->c -= temp;
 800a07e:	60a7      	str	r7, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a080:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 800a082:	dd34      	ble.n	800a0ee <arith_decode+0xb6>
    /* Conditional MPS (more probable symbol) exchange */
    if (e->a < qe) {
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
      sv ^= 0x80;		/* Exchange LPS/MPS */
    } else {
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a084:	ea83 030c 	eor.w	r3, r3, ip
 800a088:	702b      	strb	r3, [r5, #0]
 800a08a:	e034      	b.n	800a0f6 <arith_decode+0xbe>
    if (--e->ct < 0) {
 800a08c:	3b01      	subs	r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	6123      	str	r3, [r4, #16]
 800a092:	da1a      	bge.n	800a0ca <arith_decode+0x92>
      if (cinfo->unread_marker)
 800a094:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 800a098:	b96b      	cbnz	r3, 800a0b6 <arith_decode+0x7e>
	data = get_byte(cinfo);	/* read next input byte */
 800a09a:	4640      	mov	r0, r8
 800a09c:	f7ff ffb6 	bl	800a00c <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 800a0a0:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 800a0a2:	4606      	mov	r6, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 800a0a4:	d108      	bne.n	800a0b8 <arith_decode+0x80>
	  do data = get_byte(cinfo);
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	f7ff ffb0 	bl	800a00c <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 800a0ac:	28ff      	cmp	r0, #255	; 0xff
 800a0ae:	d0fa      	beq.n	800a0a6 <arith_decode+0x6e>
	  if (data == 0)
 800a0b0:	b110      	cbz	r0, 800a0b8 <arith_decode+0x80>
	    cinfo->unread_marker = data;
 800a0b2:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 800a0b6:	2600      	movs	r6, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800a0b8:	68a3      	ldr	r3, [r4, #8]
 800a0ba:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 800a0c4:	60a6      	str	r6, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800a0c6:	d404      	bmi.n	800a0d2 <arith_decode+0x9a>
 800a0c8:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800a0ca:	68e3      	ldr	r3, [r4, #12]
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	60e3      	str	r3, [r4, #12]
 800a0d0:	e7ba      	b.n	800a048 <arith_decode+0x10>
	if (++e->ct == 0)
 800a0d2:	3309      	adds	r3, #9
 800a0d4:	6123      	str	r3, [r4, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1f7      	bne.n	800a0ca <arith_decode+0x92>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800a0da:	60e7      	str	r7, [r4, #12]
 800a0dc:	e7f5      	b.n	800a0ca <arith_decode+0x92>
  } else if (e->a < 0x8000L) {
 800a0de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a0e2:	da08      	bge.n	800a0f6 <arith_decode+0xbe>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a0e4:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 800a0e8:	4296      	cmp	r6, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a0ea:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 800a0ec:	ddca      	ble.n	800a084 <arith_decode+0x4c>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800a0ee:	404b      	eors	r3, r1
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800a0f0:	f080 0080 	eor.w	r0, r0, #128	; 0x80
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800a0f4:	702b      	strb	r3, [r5, #0]
    }
  }

  return sv >> 7;
}
 800a0f6:	09c0      	lsrs	r0, r0, #7
 800a0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fc:	0802d6c0 	.word	0x0802d6c0

0800a100 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800a100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800a104:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a108:	f500 71a8 	add.w	r1, r0, #336	; 0x150
{
 800a10c:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a10e:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800a112:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800a116:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f000 8088 	beq.w	800a22e <start_pass+0x12e>
    if (cinfo->Ss == 0) {
 800a11e:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 800a122:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800a126:	b95a      	cbnz	r2, 800a140 <start_pass+0x40>
      if (cinfo->Se != 0)
 800a128:	b1a1      	cbz	r1, 800a154 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	2611      	movs	r6, #17
 800a12e:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800a132:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800a136:	6258      	str	r0, [r3, #36]	; 0x24
 800a138:	4620      	mov	r0, r4
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4798      	blx	r3
 800a13e:	e00f      	b.n	800a160 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800a140:	428a      	cmp	r2, r1
 800a142:	dcf2      	bgt.n	800a12a <start_pass+0x2a>
 800a144:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a148:	428b      	cmp	r3, r1
 800a14a:	dbee      	blt.n	800a12a <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 800a14c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a150:	2b01      	cmp	r3, #1
 800a152:	d1ea      	bne.n	800a12a <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 800a154:	b117      	cbz	r7, 800a15c <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800a156:	1e7b      	subs	r3, r7, #1
 800a158:	4283      	cmp	r3, r0
 800a15a:	d1e6      	bne.n	800a12a <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800a15c:	280d      	cmp	r0, #13
 800a15e:	dce4      	bgt.n	800a12a <start_pass+0x2a>
 800a160:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 800a164:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800a168:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a16c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800a170:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a174:	454b      	cmp	r3, r9
 800a176:	dc1f      	bgt.n	800a1b8 <start_pass+0xb8>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800a178:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d153      	bne.n	800a228 <start_pass+0x128>
      if (cinfo->Ss == 0)
 800a180:	4b63      	ldr	r3, [pc, #396]	; (800a310 <start_pass+0x210>)
 800a182:	4964      	ldr	r1, [pc, #400]	; (800a314 <start_pass+0x214>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
 800a184:	2a00      	cmp	r2, #0
 800a186:	bf08      	it	eq
 800a188:	460b      	moveq	r3, r1
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800a18a:	f04f 0800 	mov.w	r8, #0
 800a18e:	f105 0914 	add.w	r9, r5, #20
 800a192:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a194:	46c2      	mov	sl, r8
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800a196:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a198:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a19c:	4543      	cmp	r3, r8
 800a19e:	dc5f      	bgt.n	800a260 <start_pass+0x160>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800a1a0:	2300      	movs	r3, #0
  entropy->a = 0;
 800a1a2:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a1a6:	f06f 030f 	mvn.w	r3, #15
 800a1aa:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800a1ac:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a1b0:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a1b2:	b003      	add	sp, #12
 800a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800a1b8:	f85a 3f04 	ldr.w	r3, [sl, #4]!
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800a1bc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800a1c0:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800a1c2:	0230      	lsls	r0, r6, #8
 800a1c4:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800a1c8:	b162      	cbz	r2, 800a1e4 <start_pass+0xe4>
 800a1ca:	580a      	ldr	r2, [r1, r0]
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	da09      	bge.n	800a1e4 <start_pass+0xe4>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a1d8:	4620      	mov	r0, r4
 800a1da:	61d3      	str	r3, [r2, #28]
 800a1dc:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800a1e0:	6852      	ldr	r2, [r2, #4]
 800a1e2:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a1e4:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 800a1e8:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800a1ec:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800a1f0:	42ba      	cmp	r2, r7
 800a1f2:	da02      	bge.n	800a1fa <start_pass+0xfa>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a1f4:	f109 0901 	add.w	r9, r9, #1
 800a1f8:	e7b8      	b.n	800a16c <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800a1fa:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 800a1fe:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800a202:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800a206:	4291      	cmp	r1, r2
 800a208:	d008      	beq.n	800a21c <start_pass+0x11c>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800a20a:	6822      	ldr	r2, [r4, #0]
 800a20c:	f04f 31ff 	mov.w	r1, #4294967295
 800a210:	4620      	mov	r0, r4
 800a212:	61d7      	str	r7, [r2, #28]
 800a214:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800a218:	6852      	ldr	r2, [r2, #4]
 800a21a:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 800a21c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a220:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800a222:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a226:	e7e1      	b.n	800a1ec <start_pass+0xec>
      if (cinfo->Ss == 0)
 800a228:	4b3b      	ldr	r3, [pc, #236]	; (800a318 <start_pass+0x218>)
 800a22a:	493c      	ldr	r1, [pc, #240]	; (800a31c <start_pass+0x21c>)
 800a22c:	e7aa      	b.n	800a184 <start_pass+0x84>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a22e:	b96a      	cbnz	r2, 800a24c <start_pass+0x14c>
 800a230:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800a234:	b953      	cbnz	r3, 800a24c <start_pass+0x14c>
 800a236:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800a23a:	b93b      	cbnz	r3, 800a24c <start_pass+0x14c>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a23c:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a240:	2b3f      	cmp	r3, #63	; 0x3f
 800a242:	dc0b      	bgt.n	800a25c <start_pass+0x15c>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a244:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800a248:	4293      	cmp	r3, r2
 800a24a:	d007      	beq.n	800a25c <start_pass+0x15c>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	227d      	movs	r2, #125	; 0x7d
 800a250:	f04f 31ff 	mov.w	r1, #4294967295
 800a254:	4620      	mov	r0, r4
 800a256:	615a      	str	r2, [r3, #20]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	4798      	blx	r3
      if (cinfo->Ss == 0)
 800a25c:	4b30      	ldr	r3, [pc, #192]	; (800a320 <start_pass+0x220>)
 800a25e:	e794      	b.n	800a18a <start_pass+0x8a>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a260:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a264:	f856 bf04 	ldr.w	fp, [r6, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a268:	b133      	cbz	r3, 800a278 <start_pass+0x178>
 800a26a:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a26e:	bb43      	cbnz	r3, 800a2c2 <start_pass+0x1c2>
 800a270:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d13a      	bne.n	800a2ee <start_pass+0x1ee>
      tbl = compptr->dc_tbl_no;
 800a278:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a27c:	2f0f      	cmp	r7, #15
 800a27e:	d906      	bls.n	800a28e <start_pass+0x18e>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	2232      	movs	r2, #50	; 0x32
 800a284:	4620      	mov	r0, r4
 800a286:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800a28e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	b933      	cbnz	r3, 800a2a4 <start_pass+0x1a4>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a296:	6863      	ldr	r3, [r4, #4]
 800a298:	2240      	movs	r2, #64	; 0x40
 800a29a:	2101      	movs	r1, #1
 800a29c:	4620      	mov	r0, r4
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4798      	blx	r3
 800a2a2:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800a2a4:	2240      	movs	r2, #64	; 0x40
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2aa:	f020 fa41 	bl	802a730 <memset>
      entropy->last_dc_val[ci] = 0;
 800a2ae:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 800a2b2:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a2b6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a2ba:	b9eb      	cbnz	r3, 800a2f8 <start_pass+0x1f8>
 800a2bc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a2c0:	b1ab      	cbz	r3, 800a2ee <start_pass+0x1ee>
      tbl = compptr->ac_tbl_no;
 800a2c2:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a2c6:	2f0f      	cmp	r7, #15
 800a2c8:	d819      	bhi.n	800a2fe <start_pass+0x1fe>
      if (entropy->ac_stats[tbl] == NULL)
 800a2ca:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a2ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2d0:	b93b      	cbnz	r3, 800a2e2 <start_pass+0x1e2>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a2d2:	6863      	ldr	r3, [r4, #4]
 800a2d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2d8:	2101      	movs	r1, #1
 800a2da:	4620      	mov	r0, r4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4798      	blx	r3
 800a2e0:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a2e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a2ea:	f020 fa21 	bl	802a730 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a2ee:	f108 0801 	add.w	r8, r8, #1
 800a2f2:	f109 0904 	add.w	r9, r9, #4
 800a2f6:	e74f      	b.n	800a198 <start_pass+0x98>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a2f8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a2fc:	e7e0      	b.n	800a2c0 <start_pass+0x1c0>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	2232      	movs	r2, #50	; 0x32
 800a302:	4620      	mov	r0, r4
 800a304:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4798      	blx	r3
 800a30c:	e7dd      	b.n	800a2ca <start_pass+0x1ca>
 800a30e:	bf00      	nop
 800a310:	0800a791 	.word	0x0800a791
 800a314:	0800a8c5 	.word	0x0800a8c5
 800a318:	0800a619 	.word	0x0800a619
 800a31c:	0800a73f 	.word	0x0800a73f
 800a320:	0800a3c7 	.word	0x0800a3c7

0800a324 <process_restart>:
{
 800a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a328:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 800a32c:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	4798      	blx	r3
 800a332:	b928      	cbnz	r0, 800a340 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	2219      	movs	r2, #25
 800a338:	4620      	mov	r0, r4
 800a33a:	615a      	str	r2, [r3, #20]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4798      	blx	r3
{
 800a340:	2600      	movs	r6, #0
 800a342:	f105 0714 	add.w	r7, r5, #20
 800a346:	f504 78a8 	add.w	r8, r4, #336	; 0x150
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a34a:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a34c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a350:	42b3      	cmp	r3, r6
 800a352:	dc0a      	bgt.n	800a36a <process_restart+0x46>
  entropy->c = 0;
 800a354:	2300      	movs	r3, #0
  entropy->a = 0;
 800a356:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a35a:	f06f 030f 	mvn.w	r3, #15
 800a35e:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800a360:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a364:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a36a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a36e:	f858 af04 	ldr.w	sl, [r8, #4]!
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a372:	b12b      	cbz	r3, 800a380 <process_restart+0x5c>
 800a374:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a378:	b9ab      	cbnz	r3, 800a3a6 <process_restart+0x82>
 800a37a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a37e:	b9e3      	cbnz	r3, 800a3ba <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800a380:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a384:	2240      	movs	r2, #64	; 0x40
 800a386:	2100      	movs	r1, #0
 800a388:	330e      	adds	r3, #14
 800a38a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a38e:	f020 f9cf 	bl	802a730 <memset>
      entropy->last_dc_val[ci] = 0;
 800a392:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800a396:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a39a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a39e:	b97b      	cbnz	r3, 800a3c0 <process_restart+0x9c>
 800a3a0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a3a4:	b14b      	cbz	r3, 800a3ba <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a3a6:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a3aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	331e      	adds	r3, #30
 800a3b2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a3b6:	f020 f9bb 	bl	802a730 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	3704      	adds	r7, #4
 800a3be:	e7c5      	b.n	800a34c <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a3c0:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a3c4:	e7ee      	b.n	800a3a4 <process_restart+0x80>

0800a3c6 <decode_mcu>:
{
 800a3c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a3ca:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a3ce:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a3d0:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800a3d4:	ed2d 8b02 	vpush	{d8}
 800a3d8:	b087      	sub	sp, #28
 800a3da:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800a3dc:	b133      	cbz	r3, 800a3ec <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 800a3de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3e0:	b90b      	cbnz	r3, 800a3e6 <decode_mcu+0x20>
      process_restart(cinfo);
 800a3e2:	f7ff ff9f 	bl	800a324 <process_restart>
    entropy->restarts_to_go--;
 800a3e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a3ec:	692b      	ldr	r3, [r5, #16]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	f000 80aa 	beq.w	800a548 <decode_mcu+0x182>
  natural_order = cinfo->natural_order;
 800a3f4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a3f8:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800a3fa:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a3fc:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 800a400:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a402:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800a406:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a40a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a40e:	42bb      	cmp	r3, r7
 800a410:	f340 809a 	ble.w	800a548 <decode_mcu+0x182>
    block = MCU_data[blkn];
 800a414:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800a416:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a418:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800a41a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a41e:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800a420:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800a424:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800a426:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a42a:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 800a42e:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a432:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800a436:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800a438:	6952      	ldr	r2, [r2, #20]
 800a43a:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800a43e:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a440:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 800a444:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800a446:	4631      	mov	r1, r6
 800a448:	f7ff fdf6 	bl	800a038 <arith_decode>
 800a44c:	bb68      	cbnz	r0, 800a4aa <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 800a44e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800a452:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a456:	9a00      	ldr	r2, [sp, #0]
 800a458:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800a45a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 80c3 	beq.w	800a5ea <decode_mcu+0x224>
    tbl = compptr->ac_tbl_no;
 800a464:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800a466:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800a468:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800a46a:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a46e:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 800a472:	f8db 1078 	ldr.w	r1, [fp, #120]	; 0x78
 800a476:	eb06 0246 	add.w	r2, r6, r6, lsl #1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a47a:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 800a47c:	eb01 0902 	add.w	r9, r1, r2
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a480:	4649      	mov	r1, r9
 800a482:	f7ff fdd9 	bl	800a038 <arith_decode>
 800a486:	2800      	cmp	r0, #0
 800a488:	f040 80af 	bne.w	800a5ea <decode_mcu+0x224>
	if (arith_decode(cinfo, st + 1)) break;
 800a48c:	f109 0101 	add.w	r1, r9, #1
 800a490:	4620      	mov	r0, r4
	k++;
 800a492:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800a494:	f7ff fdd0 	bl	800a038 <arith_decode>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d16d      	bne.n	800a578 <decode_mcu+0x1b2>
	if (k >= cinfo->lim_Se) {
 800a49c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800a4a0:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800a4a4:	42b2      	cmp	r2, r6
 800a4a6:	dcf1      	bgt.n	800a48c <decode_mcu+0xc6>
 800a4a8:	e043      	b.n	800a532 <decode_mcu+0x16c>
      sign = arith_decode(cinfo, st + 1);
 800a4aa:	1c71      	adds	r1, r6, #1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f7ff fdc3 	bl	800a038 <arith_decode>
      st += 2; st += sign;
 800a4b2:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a4b4:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a4b6:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a4b8:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a4bc:	4651      	mov	r1, sl
 800a4be:	f7ff fdbb 	bl	800a038 <arith_decode>
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	b140      	cbz	r0, 800a4d8 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a4c6:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a4ca:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800a4ce:	4651      	mov	r1, sl
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7ff fdb1 	bl	800a038 <arith_decode>
 800a4d6:	bb40      	cbnz	r0, 800a52a <decode_mcu+0x164>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	4423      	add	r3, r4
 800a4dc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a4e0:	4699      	mov	r9, r3
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	fa03 f202 	lsl.w	r2, r3, r2
 800a4e8:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800a4ec:	db35      	blt.n	800a55a <decode_mcu+0x194>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a4ee:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a4f2:	fa03 f202 	lsl.w	r2, r3, r2
 800a4f6:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a4fa:	bfcc      	ite	gt
 800a4fc:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a500:	f108 0201 	addle.w	r2, r8, #1
 800a504:	0092      	lsls	r2, r2, #2
      st += 14;
 800a506:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800a50a:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a50c:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800a510:	1076      	asrs	r6, r6, #1
 800a512:	d124      	bne.n	800a55e <decode_mcu+0x198>
      v += 1; if (sign) v = -v;
 800a514:	f1b8 0f00 	cmp.w	r8, #0
 800a518:	d12b      	bne.n	800a572 <decode_mcu+0x1ac>
 800a51a:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a51e:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a522:	444a      	add	r2, r9
 800a524:	f8cb 2014 	str.w	r2, [fp, #20]
 800a528:	e793      	b.n	800a452 <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800a52a:	0076      	lsls	r6, r6, #1
 800a52c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a530:	d110      	bne.n	800a554 <decode_mcu+0x18e>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	2275      	movs	r2, #117	; 0x75
 800a536:	f04f 31ff 	mov.w	r1, #4294967295
 800a53a:	4620      	mov	r0, r4
 800a53c:	615a      	str	r2, [r3, #20]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800a542:	f04f 33ff 	mov.w	r3, #4294967295
 800a546:	612b      	str	r3, [r5, #16]
}
 800a548:	2001      	movs	r0, #1
 800a54a:	b007      	add	sp, #28
 800a54c:	ecbd 8b02 	vpop	{d8}
 800a550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a554:	f10a 0a01 	add.w	sl, sl, #1
 800a558:	e7b9      	b.n	800a4ce <decode_mcu+0x108>
 800a55a:	2200      	movs	r2, #0
 800a55c:	e7d3      	b.n	800a506 <decode_mcu+0x140>
	if (arith_decode(cinfo, st)) v |= m;
 800a55e:	4620      	mov	r0, r4
 800a560:	9102      	str	r1, [sp, #8]
 800a562:	f7ff fd69 	bl	800a038 <arith_decode>
 800a566:	9902      	ldr	r1, [sp, #8]
 800a568:	2800      	cmp	r0, #0
 800a56a:	d0d1      	beq.n	800a510 <decode_mcu+0x14a>
 800a56c:	ea49 0906 	orr.w	r9, r9, r6
 800a570:	e7ce      	b.n	800a510 <decode_mcu+0x14a>
      v += 1; if (sign) v = -v;
 800a572:	ea6f 0909 	mvn.w	r9, r9
 800a576:	e7d2      	b.n	800a51e <decode_mcu+0x158>
      st += 2;
 800a578:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a57c:	ee18 1a10 	vmov	r1, s16
 800a580:	4620      	mov	r0, r4
 800a582:	f7ff fd59 	bl	800a038 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a586:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a588:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7ff fd54 	bl	800a038 <arith_decode>
 800a590:	4680      	mov	r8, r0
 800a592:	b1a8      	cbz	r0, 800a5c0 <decode_mcu+0x1fa>
	if (arith_decode(cinfo, st)) {
 800a594:	4649      	mov	r1, r9
 800a596:	4620      	mov	r0, r4
 800a598:	f7ff fd4e 	bl	800a038 <arith_decode>
 800a59c:	b180      	cbz	r0, 800a5c0 <decode_mcu+0x1fa>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a59e:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800a5a2:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800a5a6:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a5aa:	42b1      	cmp	r1, r6
 800a5ac:	bfac      	ite	ge
 800a5ae:	21bd      	movge	r1, #189	; 0xbd
 800a5b0:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800a5b2:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7ff fd3d 	bl	800a038 <arith_decode>
 800a5be:	b9b0      	cbnz	r0, 800a5ee <decode_mcu+0x228>
      st += 14;
 800a5c0:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800a5c4:	46c1      	mov	r9, r8
      while (m >>= 1)
 800a5c6:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a5ca:	d118      	bne.n	800a5fe <decode_mcu+0x238>
      v += 1; if (sign) v = -v;
 800a5cc:	9b01      	ldr	r3, [sp, #4]
 800a5ce:	bb03      	cbnz	r3, 800a612 <decode_mcu+0x24c>
 800a5d0:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	9900      	ldr	r1, [sp, #0]
 800a5d8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a5dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800a5e0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a5e4:	42b3      	cmp	r3, r6
 800a5e6:	f73f af44 	bgt.w	800a472 <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a5ea:	3701      	adds	r7, #1
 800a5ec:	e70d      	b.n	800a40a <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800a5ee:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a5f2:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800a5f6:	d09c      	beq.n	800a532 <decode_mcu+0x16c>
	    st += 1;
 800a5f8:	f109 0901 	add.w	r9, r9, #1
 800a5fc:	e7db      	b.n	800a5b6 <decode_mcu+0x1f0>
	if (arith_decode(cinfo, st)) v |= m;
 800a5fe:	4620      	mov	r0, r4
 800a600:	9102      	str	r1, [sp, #8]
 800a602:	f7ff fd19 	bl	800a038 <arith_decode>
 800a606:	9902      	ldr	r1, [sp, #8]
 800a608:	2800      	cmp	r0, #0
 800a60a:	d0dc      	beq.n	800a5c6 <decode_mcu+0x200>
 800a60c:	ea49 0908 	orr.w	r9, r9, r8
 800a610:	e7d9      	b.n	800a5c6 <decode_mcu+0x200>
      v += 1; if (sign) v = -v;
 800a612:	ea6f 0209 	mvn.w	r2, r9
 800a616:	e7dd      	b.n	800a5d4 <decode_mcu+0x20e>

0800a618 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800a618:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a624:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a628:	ed2d 8b02 	vpush	{d8}
 800a62c:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800a62e:	b133      	cbz	r3, 800a63e <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800a630:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a632:	b90b      	cbnz	r3, 800a638 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800a634:	f7ff fe76 	bl	800a324 <process_restart>
    entropy->restarts_to_go--;
 800a638:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a63a:	3b01      	subs	r3, #1
 800a63c:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a63e:	6933      	ldr	r3, [r6, #16]
 800a640:	3301      	adds	r3, #1
 800a642:	d076      	beq.n	800a732 <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a644:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a648:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a64a:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800a64e:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a652:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a654:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800a658:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a65c:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800a65e:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a662:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a666:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a668:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800a66a:	2f00      	cmp	r7, #0
 800a66c:	dc37      	bgt.n	800a6de <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a66e:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a672:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a676:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a678:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800a67c:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a680:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a684:	42ab      	cmp	r3, r5
 800a686:	db54      	blt.n	800a732 <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a688:	1e6b      	subs	r3, r5, #1
 800a68a:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800a68c:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a68e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a692:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a696:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800a69a:	dd05      	ble.n	800a6a8 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a69c:	4651      	mov	r1, sl
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7ff fcca 	bl	800a038 <arith_decode>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d144      	bne.n	800a732 <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800a6a8:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800a6ac:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800a6ae:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800a6b2:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a6b6:	b1d1      	cbz	r1, 800a6ee <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800a6b8:	f10a 0102 	add.w	r1, sl, #2
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7ff fcbb 	bl	800a038 <arith_decode>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d0dc      	beq.n	800a680 <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800a6c6:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800a6ca:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800a6ce:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800a6d0:	bfb4      	ite	lt
 800a6d2:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800a6d4:	9a01      	ldrge	r2, [sp, #4]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f8a8 3000 	strh.w	r3, [r8]
 800a6dc:	e7d0      	b.n	800a680 <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800a6de:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a6e2:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1c1      	bne.n	800a66e <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800a6ea:	3f01      	subs	r7, #1
 800a6ec:	e7bd      	b.n	800a66a <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800a6ee:	f10a 0101 	add.w	r1, sl, #1
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7ff fca0 	bl	800a038 <arith_decode>
 800a6f8:	b150      	cbz	r0, 800a710 <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a6fa:	ee18 1a10 	vmov	r1, s16
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7ff fc9a 	bl	800a038 <arith_decode>
	  *thiscoef = m1;
 800a704:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800a708:	2800      	cmp	r0, #0
 800a70a:	bf18      	it	ne
 800a70c:	4613      	movne	r3, r2
 800a70e:	e7e3      	b.n	800a6d8 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800a710:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a714:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800a718:	42aa      	cmp	r2, r5
 800a71a:	dac5      	bge.n	800a6a8 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	2275      	movs	r2, #117	; 0x75
 800a720:	f04f 31ff 	mov.w	r1, #4294967295
 800a724:	4620      	mov	r0, r4
 800a726:	615a      	str	r2, [r3, #20]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295
 800a730:	6133      	str	r3, [r6, #16]
}
 800a732:	2001      	movs	r0, #1
 800a734:	b005      	add	sp, #20
 800a736:	ecbd 8b02 	vpop	{d8}
 800a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a73e <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800a73e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a746:	4604      	mov	r4, r0
 800a748:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a74a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a74e:	b133      	cbz	r3, 800a75e <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800a750:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a752:	b90b      	cbnz	r3, 800a758 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800a754:	f7ff fde6 	bl	800a324 <process_restart>
    entropy->restarts_to_go--;
 800a758:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a75a:	3b01      	subs	r3, #1
 800a75c:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a75e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800a762:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800a764:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a766:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a768:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a76a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a76e:	42ab      	cmp	r3, r5
 800a770:	dc02      	bgt.n	800a778 <decode_mcu_DC_refine+0x3a>
}
 800a772:	2001      	movs	r0, #1
 800a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800a778:	4631      	mov	r1, r6
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff fc5c 	bl	800a038 <arith_decode>
 800a780:	b120      	cbz	r0, 800a78c <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800a782:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800a786:	8813      	ldrh	r3, [r2, #0]
 800a788:	433b      	orrs	r3, r7
 800a78a:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a78c:	3501      	adds	r5, #1
 800a78e:	e7ec      	b.n	800a76a <decode_mcu_DC_refine+0x2c>

0800a790 <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800a790:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	4604      	mov	r4, r0
 800a79a:	b087      	sub	sp, #28
 800a79c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a79e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a7a2:	b133      	cbz	r3, 800a7b2 <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a7a4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a7a6:	b90b      	cbnz	r3, 800a7ac <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800a7a8:	f7ff fdbc 	bl	800a324 <process_restart>
    entropy->restarts_to_go--;
 800a7ac:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a7b2:	6933      	ldr	r3, [r6, #16]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	d01d      	beq.n	800a7f4 <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800a7b8:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a7ba:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800a7be:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800a7c2:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a7c4:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a7c8:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800a7d2:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a7d4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a7d8:	42ab      	cmp	r3, r5
 800a7da:	db0b      	blt.n	800a7f4 <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a7dc:	1e6b      	subs	r3, r5, #1
 800a7de:	f8d9 1078 	ldr.w	r1, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a7e2:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a7e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a7e8:	eb01 0803 	add.w	r8, r1, r3
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	f7ff fc23 	bl	800a038 <arith_decode>
 800a7f2:	b1b0      	cbz	r0, 800a822 <decode_mcu_AC_first+0x92>
}
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	b007      	add	sp, #28
 800a7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800a7fc:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800a7fe:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a802:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800a806:	42aa      	cmp	r2, r5
 800a808:	da0b      	bge.n	800a822 <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	2275      	movs	r2, #117	; 0x75
 800a80e:	f04f 31ff 	mov.w	r1, #4294967295
 800a812:	4620      	mov	r0, r4
 800a814:	615a      	str	r2, [r3, #20]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295
 800a81e:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800a820:	e7e8      	b.n	800a7f4 <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a822:	f108 0101 	add.w	r1, r8, #1
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff fc06 	bl	800a038 <arith_decode>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d0e5      	beq.n	800a7fc <decode_mcu_AC_first+0x6c>
    st += 2;
 800a830:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a834:	4659      	mov	r1, fp
 800a836:	4620      	mov	r0, r4
 800a838:	f7ff fbfe 	bl	800a038 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a83c:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a83e:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a840:	4620      	mov	r0, r4
 800a842:	f7ff fbf9 	bl	800a038 <arith_decode>
 800a846:	4607      	mov	r7, r0
 800a848:	b1b0      	cbz	r0, 800a878 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800a84a:	4641      	mov	r1, r8
 800a84c:	4620      	mov	r0, r4
 800a84e:	f7ff fbf3 	bl	800a038 <arith_decode>
 800a852:	b188      	cbz	r0, 800a878 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a854:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800a856:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800a858:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a85c:	18e1      	adds	r1, r4, r3
 800a85e:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800a862:	42a9      	cmp	r1, r5
 800a864:	bfac      	ite	ge
 800a866:	21bd      	movge	r1, #189	; 0xbd
 800a868:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a86a:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800a86e:	4641      	mov	r1, r8
 800a870:	4620      	mov	r0, r4
 800a872:	f7ff fbe1 	bl	800a038 <arith_decode>
 800a876:	b988      	cbnz	r0, 800a89c <decode_mcu_AC_first+0x10c>
    st += 14;
 800a878:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800a87c:	463a      	mov	r2, r7
    while (m >>= 1)
 800a87e:	107f      	asrs	r7, r7, #1
 800a880:	d113      	bne.n	800a8aa <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800a882:	9b03      	ldr	r3, [sp, #12]
 800a884:	b9e3      	cbnz	r3, 800a8c0 <decode_mcu_AC_first+0x130>
 800a886:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a888:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800a88c:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a890:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a892:	408a      	lsls	r2, r1
 800a894:	9902      	ldr	r1, [sp, #8]
 800a896:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a89a:	e79b      	b.n	800a7d4 <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800a89c:	007f      	lsls	r7, r7, #1
 800a89e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800a8a2:	d0b2      	beq.n	800a80a <decode_mcu_AC_first+0x7a>
	  st += 1;
 800a8a4:	f108 0801 	add.w	r8, r8, #1
 800a8a8:	e7e1      	b.n	800a86e <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a8b0:	f7ff fbc2 	bl	800a038 <arith_decode>
 800a8b4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d0e0      	beq.n	800a87e <decode_mcu_AC_first+0xee>
 800a8bc:	433a      	orrs	r2, r7
 800a8be:	e7de      	b.n	800a87e <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800a8c0:	43d2      	mvns	r2, r2
 800a8c2:	e7e1      	b.n	800a888 <decode_mcu_AC_first+0xf8>

0800a8c4 <decode_mcu_DC_first>:
{
 800a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a8c8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a8d0:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a8d4:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800a8d6:	b133      	cbz	r3, 800a8e6 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a8d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a8da:	b90b      	cbnz	r3, 800a8e0 <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800a8dc:	f7ff fd22 	bl	800a324 <process_restart>
    entropy->restarts_to_go--;
 800a8e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a8e6:	6933      	ldr	r3, [r6, #16]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	d07b      	beq.n	800a9e4 <decode_mcu_DC_first+0x120>
 800a8ec:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a8f0:	f04f 0900 	mov.w	r9, #0
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a8fa:	454b      	cmp	r3, r9
 800a8fc:	dd72      	ble.n	800a9e4 <decode_mcu_DC_first+0x120>
    block = MCU_data[blkn];
 800a8fe:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800a900:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a902:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800a904:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800a908:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800a90a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800a90e:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a910:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a914:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800a918:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a91c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a920:	6952      	ldr	r2, [r2, #20]
 800a922:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 800a926:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a928:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 800a92c:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800a92e:	4629      	mov	r1, r5
 800a930:	f7ff fb82 	bl	800a038 <arith_decode>
 800a934:	b958      	cbnz	r0, 800a94e <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800a936:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a93a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a93e:	f109 0901 	add.w	r9, r9, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a942:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a946:	4093      	lsls	r3, r2
 800a948:	9a02      	ldr	r2, [sp, #8]
 800a94a:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a94c:	e7d3      	b.n	800a8f6 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800a94e:	1c69      	adds	r1, r5, #1
 800a950:	4620      	mov	r0, r4
 800a952:	f7ff fb71 	bl	800a038 <arith_decode>
      st += 2; st += sign;
 800a956:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a958:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a95a:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a95c:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a960:	4659      	mov	r1, fp
 800a962:	f7ff fb69 	bl	800a038 <arith_decode>
 800a966:	4605      	mov	r5, r0
 800a968:	b140      	cbz	r0, 800a97c <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a96a:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 800a96e:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800a972:	4659      	mov	r1, fp
 800a974:	4620      	mov	r0, r4
 800a976:	f7ff fb5f 	bl	800a038 <arith_decode>
 800a97a:	bb20      	cbnz	r0, 800a9c6 <decode_mcu_DC_first+0x102>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	4423      	add	r3, r4
 800a980:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a984:	4698      	mov	r8, r3
 800a986:	2301      	movs	r3, #1
 800a988:	fa03 f202 	lsl.w	r2, r3, r2
 800a98c:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800a990:	db2f      	blt.n	800a9f2 <decode_mcu_DC_first+0x12e>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a992:	f898 20f8 	ldrb.w	r2, [r8, #248]	; 0xf8
 800a996:	fa03 f202 	lsl.w	r2, r3, r2
 800a99a:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a99e:	bfcc      	ite	gt
 800a9a0:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a9a2:	1c7a      	addle	r2, r7, #1
 800a9a4:	0092      	lsls	r2, r2, #2
      st += 14;
 800a9a6:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800a9aa:	46a8      	mov	r8, r5
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a9ac:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
      while (m >>= 1)
 800a9b0:	106d      	asrs	r5, r5, #1
 800a9b2:	d120      	bne.n	800a9f6 <decode_mcu_DC_first+0x132>
      v += 1; if (sign) v = -v;
 800a9b4:	bb4f      	cbnz	r7, 800aa0a <decode_mcu_DC_first+0x146>
 800a9b6:	f108 0801 	add.w	r8, r8, #1
      entropy->last_dc_val[ci] += v;
 800a9ba:	f8da 2014 	ldr.w	r2, [sl, #20]
 800a9be:	4442      	add	r2, r8
 800a9c0:	f8ca 2014 	str.w	r2, [sl, #20]
 800a9c4:	e7b9      	b.n	800a93a <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800a9c6:	006d      	lsls	r5, r5, #1
 800a9c8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a9cc:	d10e      	bne.n	800a9ec <decode_mcu_DC_first+0x128>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	2275      	movs	r2, #117	; 0x75
 800a9d2:	f04f 31ff 	mov.w	r1, #4294967295
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	615a      	str	r2, [r3, #20]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e2:	6133      	str	r3, [r6, #16]
}
 800a9e4:	2001      	movs	r0, #1
 800a9e6:	b005      	add	sp, #20
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a9ec:	f10b 0b01 	add.w	fp, fp, #1
 800a9f0:	e7bf      	b.n	800a972 <decode_mcu_DC_first+0xae>
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	e7d7      	b.n	800a9a6 <decode_mcu_DC_first+0xe2>
	if (arith_decode(cinfo, st)) v |= m;
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	9100      	str	r1, [sp, #0]
 800a9fa:	f7ff fb1d 	bl	800a038 <arith_decode>
 800a9fe:	9900      	ldr	r1, [sp, #0]
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d0d5      	beq.n	800a9b0 <decode_mcu_DC_first+0xec>
 800aa04:	ea48 0805 	orr.w	r8, r8, r5
 800aa08:	e7d2      	b.n	800a9b0 <decode_mcu_DC_first+0xec>
      v += 1; if (sign) v = -v;
 800aa0a:	ea6f 0808 	mvn.w	r8, r8
 800aa0e:	e7d4      	b.n	800a9ba <decode_mcu_DC_first+0xf6>

0800aa10 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa10:	6843      	ldr	r3, [r0, #4]
 800aa12:	22bc      	movs	r2, #188	; 0xbc
 800aa14:	2101      	movs	r1, #1
 800aa16:	681b      	ldr	r3, [r3, #0]
{
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa1c:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800aa1e:	4b14      	ldr	r3, [pc, #80]	; (800aa70 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa20:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800aa22:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800aa26:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800aa28:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	f01f fe7f 	bl	802a730 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800aa32:	2371      	movs	r3, #113	; 0x71
 800aa34:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800aa38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800aa3c:	b17b      	cbz	r3, 800aa5e <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa40:	2101      	movs	r1, #1
 800aa42:	6863      	ldr	r3, [r4, #4]
 800aa44:	4620      	mov	r0, r4
 800aa46:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aa48:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4798      	blx	r3
 800aa4e:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800aa50:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aa54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa56:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800aa5a:	42ab      	cmp	r3, r5
 800aa5c:	dc00      	bgt.n	800aa60 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800aa60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa64:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aa66:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800aa68:	f01f fe62 	bl	802a730 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aa6c:	e7f2      	b.n	800aa54 <jinit_arith_decoder+0x44>
 800aa6e:	bf00      	nop
 800aa70:	0800a101 	.word	0x0800a101

0800aa74 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800aa74:	4770      	bx	lr
	...

0800aa78 <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800aa78:	6803      	ldr	r3, [r0, #0]
 800aa7a:	227b      	movs	r2, #123	; 0x7b
 800aa7c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800aa80:	b510      	push	{r4, lr}
 800aa82:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800aa84:	615a      	str	r2, [r3, #20]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800aa8a:	69a3      	ldr	r3, [r4, #24]
 800aa8c:	4a02      	ldr	r2, [pc, #8]	; (800aa98 <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800aa8e:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800aa90:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800aa92:	2202      	movs	r2, #2
 800aa94:	605a      	str	r2, [r3, #4]
}
 800aa96:	bd10      	pop	{r4, pc}
 800aa98:	0802d888 	.word	0x0802d888

0800aa9c <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800aa9c:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800aa9e:	1e0c      	subs	r4, r1, #0
{
 800aaa0:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800aaa2:	dd08      	ble.n	800aab6 <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800aaa4:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800aaa6:	686b      	ldr	r3, [r5, #4]
 800aaa8:	42a3      	cmp	r3, r4
 800aaaa:	db05      	blt.n	800aab8 <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800aaac:	682a      	ldr	r2, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800aaae:	1b1b      	subs	r3, r3, r4
    src->next_input_byte += (size_t) num_bytes;
 800aab0:	4422      	add	r2, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800aab2:	606b      	str	r3, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800aab4:	602a      	str	r2, [r5, #0]
  }
}
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
      num_bytes -= (long) src->bytes_in_buffer;
 800aab8:	1ae4      	subs	r4, r4, r3
      (void) (*src->fill_input_buffer) (cinfo);
 800aaba:	4630      	mov	r0, r6
 800aabc:	68eb      	ldr	r3, [r5, #12]
 800aabe:	4798      	blx	r3
 800aac0:	e7f1      	b.n	800aaa6 <skip_input_data+0xa>

0800aac2 <term_source>:
 800aac2:	4770      	bx	lr

0800aac4 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	4604      	mov	r4, r0
 800aac8:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800aaca:	460d      	mov	r5, r1
 800aacc:	b101      	cbz	r1, 800aad0 <jpeg_mem_src+0xc>
 800aace:	b92a      	cbnz	r2, 800aadc <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	222b      	movs	r2, #43	; 0x2b
 800aad4:	4620      	mov	r0, r4
 800aad6:	615a      	str	r2, [r3, #20]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800aadc:	69a1      	ldr	r1, [r4, #24]
 800aade:	b929      	cbnz	r1, 800aaec <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800aae0:	6863      	ldr	r3, [r4, #4]
 800aae2:	221c      	movs	r2, #28
 800aae4:	4620      	mov	r0, r4
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800aaea:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800aaec:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800aaee:	4a06      	ldr	r2, [pc, #24]	; (800ab08 <jpeg_mem_src+0x44>)
 800aaf0:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800aaf2:	4a06      	ldr	r2, [pc, #24]	; (800ab0c <jpeg_mem_src+0x48>)
 800aaf4:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800aaf6:	4a06      	ldr	r2, [pc, #24]	; (800ab10 <jpeg_mem_src+0x4c>)
 800aaf8:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800aafa:	4a06      	ldr	r2, [pc, #24]	; (800ab14 <jpeg_mem_src+0x50>)
 800aafc:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800aafe:	4a06      	ldr	r2, [pc, #24]	; (800ab18 <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800ab00:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800ab04:	619a      	str	r2, [r3, #24]
}
 800ab06:	bd70      	pop	{r4, r5, r6, pc}
 800ab08:	0800aa75 	.word	0x0800aa75
 800ab0c:	0800aa79 	.word	0x0800aa79
 800ab10:	0800aa9d 	.word	0x0800aa9d
 800ab14:	0800ecc9 	.word	0x0800ecc9
 800ab18:	0800aac3 	.word	0x0800aac3

0800ab1c <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800ab1c:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ab20:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800ab24:	2a01      	cmp	r2, #1
 800ab26:	dc0f      	bgt.n	800ab48 <start_iMCU_row+0x2c>
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800ab28:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800ab2c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800ab30:	3a01      	subs	r2, #1
 800ab32:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800ab36:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800ab38:	bf34      	ite	cc
 800ab3a:	68ca      	ldrcc	r2, [r1, #12]
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800ab3c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
    coef->MCU_rows_per_iMCU_row = 1;
 800ab3e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800ab40:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800ab42:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800ab46:	4770      	bx	lr
 800ab48:	2201      	movs	r2, #1
 800ab4a:	e7f8      	b.n	800ab3e <start_iMCU_row+0x22>

0800ab4c <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800ab52:	f7ff bfe3 	b.w	800ab1c <start_iMCU_row>

0800ab56 <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800ab56:	2000      	movs	r0, #0
 800ab58:	4770      	bx	lr

0800ab5a <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800ab5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5e:	f500 7ba8 	add.w	fp, r0, #336	; 0x150
 800ab62:	b08f      	sub	sp, #60	; 0x3c
 800ab64:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ab66:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ab6a:	465f      	mov	r7, fp
 800ab6c:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800ab6e:	f04f 0801 	mov.w	r8, #1
 800ab72:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ab76:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ab7a:	42b3      	cmp	r3, r6
 800ab7c:	dc13      	bgt.n	800aba6 <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800ab7e:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800ab80:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800ab84:	69eb      	ldr	r3, [r5, #28]
 800ab86:	42b3      	cmp	r3, r6
 800ab88:	dc22      	bgt.n	800abd0 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800ab8a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ab8e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800ab92:	3301      	adds	r3, #1
 800ab94:	4293      	cmp	r3, r2
 800ab96:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800ab9a:	d271      	bcs.n	800ac80 <consume_data+0x126>
    start_iMCU_row(cinfo);
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7ff ffbd 	bl	800ab1c <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800aba2:	2003      	movs	r0, #3
 800aba4:	e044      	b.n	800ac30 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800aba6:	f857 1f04 	ldr.w	r1, [r7, #4]!
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800abaa:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800abac:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800abae:	6849      	ldr	r1, [r1, #4]
 800abb0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800abb4:	3112      	adds	r1, #18
 800abb6:	f8cd 8000 	str.w	r8, [sp]
 800abba:	435a      	muls	r2, r3
 800abbc:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800abc0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800abc4:	4620      	mov	r0, r4
 800abc6:	47d0      	blx	sl
 800abc8:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800abcc:	3601      	adds	r6, #1
 800abce:	e7d2      	b.n	800ab76 <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800abd0:	00b3      	lsls	r3, r6, #2
 800abd2:	696f      	ldr	r7, [r5, #20]
 800abd4:	9308      	str	r3, [sp, #32]
 800abd6:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800abda:	42bb      	cmp	r3, r7
 800abdc:	f04f 0300 	mov.w	r3, #0
 800abe0:	d94b      	bls.n	800ac7a <consume_data+0x120>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800abe2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800abe6:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800abe8:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800abea:	9206      	str	r2, [sp, #24]
 800abec:	e013      	b.n	800ac16 <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800abee:	f85a 2f04 	ldr.w	r2, [sl, #4]!
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800abf2:	f04f 0c00 	mov.w	ip, #0
 800abf6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abfa:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800abfe:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800ac00:	fb07 f20e 	mul.w	r2, r7, lr
 800ac04:	01d2      	lsls	r2, r2, #7
 800ac06:	9204      	str	r2, [sp, #16]
 800ac08:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800ac0c:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ac0e:	9a05      	ldr	r2, [sp, #20]
 800ac10:	4562      	cmp	r2, ip
 800ac12:	dc10      	bgt.n	800ac36 <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ac14:	3301      	adds	r3, #1
 800ac16:	9a06      	ldr	r2, [sp, #24]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	dce8      	bgt.n	800abee <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800ac1c:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800ac20:	f105 0120 	add.w	r1, r5, #32
 800ac24:	4620      	mov	r0, r4
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4798      	blx	r3
 800ac2a:	bb20      	cbnz	r0, 800ac76 <consume_data+0x11c>
	coef->MCU_ctr = MCU_col_num;
 800ac2c:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800ac30:	b00f      	add	sp, #60	; 0x3c
 800ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800ac36:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800ac3a:	9904      	ldr	r1, [sp, #16]
 800ac3c:	f852 2008 	ldr.w	r2, [r2, r8]
 800ac40:	440a      	add	r2, r1
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800ac42:	2100      	movs	r1, #0
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800ac44:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800ac46:	9a03      	ldr	r2, [sp, #12]
 800ac48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ac4c:	3207      	adds	r2, #7
 800ac4e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800ac52:	9807      	ldr	r0, [sp, #28]
 800ac54:	458e      	cmp	lr, r1
 800ac56:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 800ac5a:	dc08      	bgt.n	800ac6e <consume_data+0x114>
 800ac5c:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ac5e:	f10c 0c01 	add.w	ip, ip, #1
 800ac62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac64:	f108 0804 	add.w	r8, r8, #4
 800ac68:	4411      	add	r1, r2
 800ac6a:	9103      	str	r1, [sp, #12]
 800ac6c:	e7cf      	b.n	800ac0e <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800ac6e:	3101      	adds	r1, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800ac70:	f842 0f04 	str.w	r0, [r2, #4]!
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800ac74:	e7ed      	b.n	800ac52 <consume_data+0xf8>
	 MCU_col_num++) {
 800ac76:	3701      	adds	r7, #1
 800ac78:	e7ad      	b.n	800abd6 <consume_data+0x7c>
       yoffset++) {
 800ac7a:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800ac7c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800ac7e:	e781      	b.n	800ab84 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800ac80:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ac84:	4620      	mov	r0, r4
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800ac8a:	2004      	movs	r0, #4
 800ac8c:	e7d0      	b.n	800ac30 <consume_data+0xd6>

0800ac8e <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800ac8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac92:	4604      	mov	r4, r0
 800ac94:	b089      	sub	sp, #36	; 0x24
 800ac96:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ac98:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ac9c:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800aca0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800aca4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800aca8:	429a      	cmp	r2, r3
 800acaa:	db1d      	blt.n	800ace8 <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800acac:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800acb0:	d103      	bne.n	800acba <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800acb2:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d916      	bls.n	800ace8 <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800acba:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800acbc:	2600      	movs	r6, #0
 800acbe:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800acc2:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800acc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800acc8:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800acca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800accc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800acd0:	42b3      	cmp	r3, r6
 800acd2:	dc13      	bgt.n	800acfc <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800acd4:	1c50      	adds	r0, r2, #1
 800acd6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800acda:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800acde:	4298      	cmp	r0, r3
 800ace0:	bf2c      	ite	cs
 800ace2:	2004      	movcs	r0, #4
 800ace4:	2003      	movcc	r0, #3
 800ace6:	e006      	b.n	800acf6 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800ace8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800acec:	4620      	mov	r0, r4
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4798      	blx	r3
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d1d4      	bne.n	800aca0 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800acf6:	b009      	add	sp, #36	; 0x24
 800acf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800acfc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800acfe:	b913      	cbnz	r3, 800ad06 <decompress_data+0x78>
       ci++, compptr++) {
 800ad00:	3601      	adds	r6, #1
 800ad02:	3558      	adds	r5, #88	; 0x58
 800ad04:	e7e1      	b.n	800acca <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800ad06:	6861      	ldr	r1, [r4, #4]
 800ad08:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800ad0a:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800ad0c:	9000      	str	r0, [sp, #0]
 800ad0e:	4620      	mov	r0, r4
 800ad10:	6a0f      	ldr	r7, [r1, #32]
 800ad12:	435a      	muls	r2, r3
 800ad14:	9906      	ldr	r1, [sp, #24]
 800ad16:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ad1a:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ad1c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800ad20:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800ad22:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	68eb      	ldr	r3, [r5, #12]
 800ad28:	d221      	bcs.n	800ad6e <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800ad2a:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ad2c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ad30:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ad32:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800ad3a:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ad3e:	9202      	str	r2, [sp, #8]
 800ad40:	9a02      	ldr	r2, [sp, #8]
 800ad42:	4552      	cmp	r2, sl
 800ad44:	dadc      	bge.n	800ad00 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800ad46:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800ad48:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800ad4c:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ad4e:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800ad50:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ad54:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ad56:	69e9      	ldr	r1, [r5, #28]
 800ad58:	9a05      	ldr	r2, [sp, #20]
 800ad5a:	4541      	cmp	r1, r8
 800ad5c:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800ad60:	d80f      	bhi.n	800ad82 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800ad62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ad64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ad68:	9a02      	ldr	r2, [sp, #8]
 800ad6a:	3201      	adds	r2, #1
 800ad6c:	e7e7      	b.n	800ad3e <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800ad6e:	6a2a      	ldr	r2, [r5, #32]
 800ad70:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad74:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800ad78:	f1ba 0f00 	cmp.w	sl, #0
 800ad7c:	bf08      	it	eq
 800ad7e:	469a      	moveq	sl, r3
 800ad80:	e7d4      	b.n	800ad2c <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800ad82:	f8cd 9000 	str.w	r9, [sp]
 800ad86:	4629      	mov	r1, r5
 800ad88:	9307      	str	r3, [sp, #28]
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800ad8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ad90:	f108 0801 	add.w	r8, r8, #1
 800ad94:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800ad96:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ad98:	e7dd      	b.n	800ad56 <decompress_data+0xc8>
	...

0800ad9c <start_output_pass>:
{
 800ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ada0:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800ada4:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800ada6:	692b      	ldr	r3, [r5, #16]
 800ada8:	b323      	cbz	r3, 800adf4 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800adaa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800adac:	2b00      	cmp	r3, #0
 800adae:	d04b      	beq.n	800ae48 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800adb0:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d047      	beq.n	800ae48 <start_output_pass+0xac>
 800adb8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d043      	beq.n	800ae48 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800adc0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800adc2:	b93b      	cbnz	r3, 800add4 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800adc4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800adc6:	2118      	movs	r1, #24
 800adc8:	6843      	ldr	r3, [r0, #4]
 800adca:	434a      	muls	r2, r1
 800adcc:	2101      	movs	r1, #1
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800add2:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800add4:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800add6:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800adda:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800adde:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800ade2:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ade4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ade6:	fb0e c703 	mla	r7, lr, r3, ip
 800adea:	4293      	cmp	r3, r2
 800adec:	db07      	blt.n	800adfe <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800adee:	b359      	cbz	r1, 800ae48 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800adf0:	4b16      	ldr	r3, [pc, #88]	; (800ae4c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800adf2:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800adfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800adfe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ae00:	b312      	cbz	r2, 800ae48 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800ae02:	8816      	ldrh	r6, [r2, #0]
 800ae04:	b306      	cbz	r6, 800ae48 <start_output_pass+0xac>
 800ae06:	8856      	ldrh	r6, [r2, #2]
 800ae08:	b1f6      	cbz	r6, 800ae48 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800ae0a:	8a16      	ldrh	r6, [r2, #16]
 800ae0c:	b1e6      	cbz	r6, 800ae48 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800ae0e:	8c16      	ldrh	r6, [r2, #32]
 800ae10:	b1d6      	cbz	r6, 800ae48 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800ae12:	8a56      	ldrh	r6, [r2, #18]
 800ae14:	b1c6      	cbz	r6, 800ae48 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800ae16:	8892      	ldrh	r2, [r2, #4]
 800ae18:	b1b2      	cbz	r2, 800ae48 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800ae1a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800ae1e:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800ae20:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800ae22:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800ae26:	2a00      	cmp	r2, #0
 800ae28:	db0e      	blt.n	800ae48 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800ae2a:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ae2c:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800ae30:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ae32:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800ae36:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800ae3a:	bf18      	it	ne
 800ae3c:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800ae3e:	2a06      	cmp	r2, #6
 800ae40:	d1f4      	bne.n	800ae2c <start_output_pass+0x90>
       ci++, compptr++) {
 800ae42:	3301      	adds	r3, #1
 800ae44:	3058      	adds	r0, #88	; 0x58
 800ae46:	e7cd      	b.n	800ade4 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800ae48:	4b01      	ldr	r3, [pc, #4]	; (800ae50 <start_output_pass+0xb4>)
 800ae4a:	e7d2      	b.n	800adf2 <start_output_pass+0x56>
 800ae4c:	0800afd7 	.word	0x0800afd7
 800ae50:	0800ac8f 	.word	0x0800ac8f

0800ae54 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800ae54:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800ae5c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ae5e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800ae62:	4604      	mov	r4, r0
 800ae64:	ed2d 8b02 	vpush	{d8}
 800ae68:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800ae6a:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ae6c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800ae70:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ae72:	3b01      	subs	r3, #1
 800ae74:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800ae76:	69ab      	ldr	r3, [r5, #24]
 800ae78:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800ae7a:	f105 0320 	add.w	r3, r5, #32
 800ae7e:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800ae82:	69eb      	ldr	r3, [r5, #28]
 800ae84:	9a03      	ldr	r2, [sp, #12]
 800ae86:	4293      	cmp	r3, r2
 800ae88:	dc13      	bgt.n	800aeb2 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800ae8a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800ae8e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800ae92:	3301      	adds	r3, #1
 800ae94:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800ae98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800aea4:	f080 8090 	bcs.w	800afc8 <decompress_onepass+0x174>
    start_iMCU_row(cinfo);
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7ff fe37 	bl	800ab1c <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800aeae:	2003      	movs	r0, #3
 800aeb0:	e02a      	b.n	800af08 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800aeb2:	696f      	ldr	r7, [r5, #20]
 800aeb4:	9b08      	ldr	r3, [sp, #32]
 800aeb6:	429f      	cmp	r7, r3
 800aeb8:	d905      	bls.n	800aec6 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	9303      	str	r3, [sp, #12]
 800aec4:	e7dd      	b.n	800ae82 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800aec6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800aeca:	b133      	cbz	r3, 800aeda <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800aecc:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800aed0:	2100      	movs	r1, #0
 800aed2:	6a28      	ldr	r0, [r5, #32]
 800aed4:	01d2      	lsls	r2, r2, #7
 800aed6:	f01f fc2b 	bl	802a730 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800aeda:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800aede:	ee18 1a10 	vmov	r1, s16
 800aee2:	4620      	mov	r0, r4
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	4798      	blx	r3
 800aee8:	b158      	cbz	r0, 800af02 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aeea:	f04f 0b00 	mov.w	fp, #0
 800aeee:	f504 73a8 	add.w	r3, r4, #336	; 0x150
      blkn = 0;			/* index of current DCT block within MCU */
 800aef2:	46da      	mov	sl, fp
 800aef4:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aef6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800aefa:	455b      	cmp	r3, fp
 800aefc:	dc09      	bgt.n	800af12 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800aefe:	3701      	adds	r7, #1
 800af00:	e7d8      	b.n	800aeb4 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800af02:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800af04:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800af08:	b00f      	add	sp, #60	; 0x3c
 800af0a:	ecbd 8b02 	vpop	{d8}
 800af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800af12:	9b05      	ldr	r3, [sp, #20]
 800af14:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800af18:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800af1a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800af1c:	b923      	cbnz	r3, 800af28 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800af1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af20:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800af22:	f10b 0b01 	add.w	fp, fp, #1
 800af26:	e7e6      	b.n	800aef6 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800af28:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800af2a:	f04f 0900 	mov.w	r9, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800af2e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800af32:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800af34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800af3c:	9b08      	ldr	r3, [sp, #32]
 800af3e:	429f      	cmp	r7, r3
 800af40:	bf34      	ite	cc
 800af42:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800af44:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800af46:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800af48:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800af4a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800af4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af4e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800af52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800af56:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800af58:	437a      	muls	r2, r7
 800af5a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800af5c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800af5e:	454a      	cmp	r2, r9
 800af60:	dddf      	ble.n	800af22 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800af62:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800af66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af68:	4282      	cmp	r2, r0
 800af6a:	d304      	bcc.n	800af76 <decompress_onepass+0x122>
 800af6c:	9a03      	ldr	r2, [sp, #12]
 800af6e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800af70:	444a      	add	r2, r9
 800af72:	4290      	cmp	r0, r2
 800af74:	dd0d      	ble.n	800af92 <decompress_onepass+0x13e>
 800af76:	f10a 4880 	add.w	r8, sl, #1073741824	; 0x40000000
 800af7a:	f108 0807 	add.w	r8, r8, #7
 800af7e:	eb05 0288 	add.w	r2, r5, r8, lsl #2
{
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	9207      	str	r2, [sp, #28]
 800af88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af8a:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800af8c:	9a06      	ldr	r2, [sp, #24]
 800af8e:	4590      	cmp	r8, r2
 800af90:	db07      	blt.n	800afa2 <decompress_onepass+0x14e>
	  blkn += compptr->MCU_width;
 800af92:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800af94:	f109 0901 	add.w	r9, r9, #1
	  blkn += compptr->MCU_width;
 800af98:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800af9a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800af9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800afa0:	e7dc      	b.n	800af5c <decompress_onepass+0x108>
	      (*inverse_DCT) (cinfo, compptr,
 800afa2:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800afa4:	f108 0801 	add.w	r8, r8, #1
	      (*inverse_DCT) (cinfo, compptr,
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	930d      	str	r3, [sp, #52]	; 0x34
 800afac:	9200      	str	r2, [sp, #0]
 800afae:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800afb2:	910c      	str	r1, [sp, #48]	; 0x30
 800afb4:	9007      	str	r0, [sp, #28]
 800afb6:	4620      	mov	r0, r4
 800afb8:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800afba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800afbc:	9b04      	ldr	r3, [sp, #16]
 800afbe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800afc0:	4413      	add	r3, r2
 800afc2:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800afc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afc6:	e7e1      	b.n	800af8c <decompress_onepass+0x138>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800afc8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800afcc:	4620      	mov	r0, r4
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800afd2:	2004      	movs	r0, #4
 800afd4:	e798      	b.n	800af08 <decompress_onepass+0xb4>

0800afd6 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800afd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800afda:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800afde:	b0c5      	sub	sp, #276	; 0x114
 800afe0:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800afe2:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800afe6:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800afe8:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800afea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800afee:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800aff2:	428b      	cmp	r3, r1
 800aff4:	dc03      	bgt.n	800affe <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800aff6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800affa:	6950      	ldr	r0, [r2, #20]
 800affc:	b1a8      	cbz	r0, 800b02a <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800affe:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b000:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b004:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b006:	2300      	movs	r3, #0
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b00c:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800b00e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b012:	428b      	cmp	r3, r1
 800b014:	dc1e      	bgt.n	800b054 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800b016:	1c50      	adds	r0, r2, #1
 800b018:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800b01c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800b020:	4298      	cmp	r0, r3
 800b022:	bf2c      	ite	cs
 800b024:	2004      	movcs	r0, #4
 800b026:	2003      	movcc	r0, #3
 800b028:	e011      	b.n	800b04e <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800b02a:	428b      	cmp	r3, r1
 800b02c:	d10a      	bne.n	800b044 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800b02e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800b032:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b036:	2900      	cmp	r1, #0
 800b038:	bf08      	it	eq
 800b03a:	3301      	addeq	r3, #1
 800b03c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b040:	4299      	cmp	r1, r3
 800b042:	d8dc      	bhi.n	800affe <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800b044:	6813      	ldr	r3, [r2, #0]
 800b046:	4620      	mov	r0, r4
 800b048:	4798      	blx	r3
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d1cd      	bne.n	800afea <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800b04e:	b045      	add	sp, #276	; 0x114
 800b050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800b054:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b056:	b923      	cbnz	r3, 800b062 <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	3558      	adds	r5, #88	; 0x58
 800b05c:	3301      	adds	r3, #1
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	e7d3      	b.n	800b00a <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800b062:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800b064:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800b066:	4293      	cmp	r3, r2
 800b068:	f240 815a 	bls.w	800b320 <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800b06c:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800b06e:	4681      	mov	r9, r0
      last_row = FALSE;
 800b070:	2100      	movs	r1, #0
      last_row = TRUE;
 800b072:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800b074:	6861      	ldr	r1, [r4, #4]
 800b076:	9e03      	ldr	r6, [sp, #12]
 800b078:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800b07c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b07e:	3148      	adds	r1, #72	; 0x48
 800b080:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800b084:	2a00      	cmp	r2, #0
 800b086:	f000 8159 	beq.w	800b33c <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800b08a:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800b08c:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800b08e:	4403      	add	r3, r0
 800b090:	4342      	muls	r2, r0
 800b092:	4620      	mov	r0, r4
 800b094:	9600      	str	r6, [sp, #0]
 800b096:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800b098:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800b09a:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800b09c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800b0a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b0a2:	2218      	movs	r2, #24
 800b0a4:	9903      	ldr	r1, [sp, #12]
 800b0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b0a8:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800b0aa:	fb02 3301 	mla	r3, r2, r1, r3
 800b0ae:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800b0b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800b0b2:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800b0b4:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800b0b8:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800b0bc:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800b0be:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800b0c0:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800b0c2:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b0c4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800b0c8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800b0d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0d2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b0d6:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b0d8:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800b0dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0de:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800b0e2:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b0e4:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800b0e8:	9315      	str	r3, [sp, #84]	; 0x54
 800b0ea:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800b0ee:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b0f0:	01f3      	lsls	r3, r6, #7
 800b0f2:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0f4:	0233      	lsls	r3, r6, #8
 800b0f6:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b0f8:	01cb      	lsls	r3, r1, #7
 800b0fa:	9319      	str	r3, [sp, #100]	; 0x64
 800b0fc:	020b      	lsls	r3, r1, #8
 800b0fe:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b100:	01d3      	lsls	r3, r2, #7
 800b102:	931b      	str	r3, [sp, #108]	; 0x6c
 800b104:	0213      	lsls	r3, r2, #8
 800b106:	931c      	str	r3, [sp, #112]	; 0x70
 800b108:	1f03      	subs	r3, r0, #4
 800b10a:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b10c:	2300      	movs	r3, #0
 800b10e:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800b110:	f109 33ff 	add.w	r3, r9, #4294967295
 800b114:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b116:	9b04      	ldr	r3, [sp, #16]
 800b118:	454b      	cmp	r3, r9
 800b11a:	da9d      	bge.n	800b058 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800b11c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b11e:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800b122:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800b124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b126:	b11b      	cbz	r3, 800b130 <decompress_smooth_data+0x15a>
 800b128:	9b04      	ldr	r3, [sp, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 810c 	beq.w	800b348 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800b130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b132:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b136:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800b138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b13a:	b123      	cbz	r3, 800b146 <decompress_smooth_data+0x170>
 800b13c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b13e:	9a04      	ldr	r2, [sp, #16]
 800b140:	4293      	cmp	r3, r2
 800b142:	f000 8104 	beq.w	800b34e <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800b146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b14c:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800b14e:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800b150:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b152:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800b156:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b158:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b15a:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800b15e:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800b160:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b162:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b164:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b166:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b16a:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b16e:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b170:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b172:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800b176:	2201      	movs	r2, #1
 800b178:	a924      	add	r1, sp, #144	; 0x90
 800b17a:	4640      	mov	r0, r8
 800b17c:	930a      	str	r3, [sp, #40]	; 0x28
 800b17e:	f00b fdc6 	bl	8016d0e <jcopy_block_row>
	if (block_num < last_block_column) {
 800b182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b186:	4293      	cmp	r3, r2
 800b188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18a:	f240 80ea 	bls.w	800b362 <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800b18e:	9a07      	ldr	r2, [sp, #28]
 800b190:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800b194:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800b196:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800b19a:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800b19c:	9a08      	ldr	r2, [sp, #32]
 800b19e:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800b1a2:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800b1a4:	9a05      	ldr	r2, [sp, #20]
 800b1a6:	6851      	ldr	r1, [r2, #4]
 800b1a8:	b1c1      	cbz	r1, 800b1dc <decompress_smooth_data+0x206>
 800b1aa:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800b1ae:	b9aa      	cbnz	r2, 800b1dc <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800b1b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1b2:	1a3a      	subs	r2, r7, r0
 800b1b4:	9806      	ldr	r0, [sp, #24]
 800b1b6:	4342      	muls	r2, r0
	  if (num >= 0) {
 800b1b8:	2024      	movs	r0, #36	; 0x24
 800b1ba:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b1bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800b1be:	f100 80d7 	bmi.w	800b370 <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b1c2:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b1c4:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b1c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b1c8:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b1cc:	dd04      	ble.n	800b1d8 <decompress_smooth_data+0x202>
 800b1ce:	fa06 f101 	lsl.w	r1, r6, r1
 800b1d2:	4291      	cmp	r1, r2
 800b1d4:	dc00      	bgt.n	800b1d8 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800b1d6:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800b1d8:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800b1dc:	9a05      	ldr	r2, [sp, #20]
 800b1de:	6891      	ldr	r1, [r2, #8]
 800b1e0:	b1c9      	cbz	r1, 800b216 <decompress_smooth_data+0x240>
 800b1e2:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800b1e6:	b9b2      	cbnz	r2, 800b216 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800b1e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ea:	9806      	ldr	r0, [sp, #24]
 800b1ec:	ebab 0202 	sub.w	r2, fp, r2
 800b1f0:	4342      	muls	r2, r0
	  if (num >= 0) {
 800b1f2:	2024      	movs	r0, #36	; 0x24
 800b1f4:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b1f6:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800b1f8:	f100 80c8 	bmi.w	800b38c <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b1fc:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b1fe:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b200:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b202:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b206:	dd04      	ble.n	800b212 <decompress_smooth_data+0x23c>
 800b208:	fa06 f101 	lsl.w	r1, r6, r1
 800b20c:	4291      	cmp	r1, r2
 800b20e:	dc00      	bgt.n	800b212 <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800b210:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800b212:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800b216:	9a05      	ldr	r2, [sp, #20]
 800b218:	68d1      	ldr	r1, [r2, #12]
 800b21a:	b1d1      	cbz	r1, 800b252 <decompress_smooth_data+0x27c>
 800b21c:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800b220:	b9ba      	cbnz	r2, 800b252 <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800b222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b224:	9806      	ldr	r0, [sp, #24]
 800b226:	445a      	add	r2, fp
 800b228:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800b22c:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b22e:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800b230:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800b234:	f100 80b8 	bmi.w	800b3a8 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b238:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b23a:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b23c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b23e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b242:	dd04      	ble.n	800b24e <decompress_smooth_data+0x278>
 800b244:	fa06 f101 	lsl.w	r1, r6, r1
 800b248:	4291      	cmp	r1, r2
 800b24a:	dc00      	bgt.n	800b24e <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800b24c:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800b24e:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800b252:	9a05      	ldr	r2, [sp, #20]
 800b254:	6912      	ldr	r2, [r2, #16]
 800b256:	b1e2      	cbz	r2, 800b292 <decompress_smooth_data+0x2bc>
 800b258:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800b25c:	b9c9      	cbnz	r1, 800b292 <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800b25e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b260:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b262:	1a09      	subs	r1, r1, r0
 800b264:	1acb      	subs	r3, r1, r3
 800b266:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b268:	440b      	add	r3, r1
 800b26a:	9906      	ldr	r1, [sp, #24]
 800b26c:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b26e:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800b270:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800b274:	f100 80a6 	bmi.w	800b3c4 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b278:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b27a:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b27c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b27e:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b282:	dd04      	ble.n	800b28e <decompress_smooth_data+0x2b8>
 800b284:	fa06 f202 	lsl.w	r2, r6, r2
 800b288:	429a      	cmp	r2, r3
 800b28a:	dc00      	bgt.n	800b28e <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800b28c:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800b28e:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800b292:	9b05      	ldr	r3, [sp, #20]
 800b294:	695a      	ldr	r2, [r3, #20]
 800b296:	b1da      	cbz	r2, 800b2d0 <decompress_smooth_data+0x2fa>
 800b298:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800b29c:	b9c3      	cbnz	r3, 800b2d0 <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800b29e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2a0:	463b      	mov	r3, r7
 800b2a2:	440b      	add	r3, r1
 800b2a4:	9906      	ldr	r1, [sp, #24]
 800b2a6:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800b2aa:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b2ac:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800b2ae:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800b2b2:	f100 8095 	bmi.w	800b3e0 <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b2b6:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b2b8:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b2ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2bc:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b2c0:	dd04      	ble.n	800b2cc <decompress_smooth_data+0x2f6>
 800b2c2:	fa06 f202 	lsl.w	r2, r6, r2
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	dc00      	bgt.n	800b2cc <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800b2ca:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800b2cc:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2d2:	aa24      	add	r2, sp, #144	; 0x90
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b2de:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b2e2:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b2e4:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800b2e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2e8:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b2ea:	3380      	adds	r3, #128	; 0x80
 800b2ec:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800b2f0:	9307      	str	r3, [sp, #28]
 800b2f2:	9b08      	ldr	r3, [sp, #32]
 800b2f4:	3380      	adds	r3, #128	; 0x80
 800b2f6:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800b2f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2fa:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b2fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800b2fe:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b302:	3301      	adds	r3, #1
 800b304:	930c      	str	r3, [sp, #48]	; 0x30
 800b306:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30a:	428a      	cmp	r2, r1
 800b30c:	d222      	bcs.n	800b354 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800b30e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b310:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b316:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b318:	9b04      	ldr	r3, [sp, #16]
 800b31a:	3301      	adds	r3, #1
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	e6fa      	b.n	800b116 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b320:	6a2b      	ldr	r3, [r5, #32]
 800b322:	fbb3 f1f0 	udiv	r1, r3, r0
 800b326:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b32a:	f1b9 0f00 	cmp.w	r9, #0
 800b32e:	d103      	bne.n	800b338 <decompress_smooth_data+0x362>
 800b330:	4603      	mov	r3, r0
 800b332:	4681      	mov	r9, r0
      last_row = TRUE;
 800b334:	2101      	movs	r1, #1
 800b336:	e69c      	b.n	800b072 <decompress_smooth_data+0x9c>
 800b338:	464b      	mov	r3, r9
 800b33a:	e7fb      	b.n	800b334 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800b33c:	4620      	mov	r0, r4
 800b33e:	9200      	str	r2, [sp, #0]
 800b340:	47c0      	blx	r8
      first_row = TRUE;
 800b342:	2301      	movs	r3, #1
 800b344:	931d      	str	r3, [sp, #116]	; 0x74
 800b346:	e6ab      	b.n	800b0a0 <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800b348:	f8cd 801c 	str.w	r8, [sp, #28]
 800b34c:	e6f4      	b.n	800b138 <decompress_smooth_data+0x162>
 800b34e:	f8cd 8020 	str.w	r8, [sp, #32]
 800b352:	e6fb      	b.n	800b14c <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800b354:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800b356:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800b35a:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800b35e:	9209      	str	r2, [sp, #36]	; 0x24
 800b360:	e709      	b.n	800b176 <decompress_smooth_data+0x1a0>
 800b362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b364:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b368:	9211      	str	r2, [sp, #68]	; 0x44
 800b36a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800b36e:	e719      	b.n	800b1a4 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b370:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b372:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b374:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b376:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b37a:	dd05      	ble.n	800b388 <decompress_smooth_data+0x3b2>
 800b37c:	fa06 f101 	lsl.w	r1, r6, r1
 800b380:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b382:	bfd8      	it	le
 800b384:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b388:	4252      	negs	r2, r2
 800b38a:	e725      	b.n	800b1d8 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b38c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b38e:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b390:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b392:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b396:	dd05      	ble.n	800b3a4 <decompress_smooth_data+0x3ce>
 800b398:	fa06 f101 	lsl.w	r1, r6, r1
 800b39c:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b39e:	bfd8      	it	le
 800b3a0:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b3a4:	4252      	negs	r2, r2
 800b3a6:	e734      	b.n	800b212 <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b3a8:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b3aa:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b3ac:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b3ae:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b3b2:	dd05      	ble.n	800b3c0 <decompress_smooth_data+0x3ea>
 800b3b4:	fa06 f101 	lsl.w	r1, r6, r1
 800b3b8:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b3ba:	bfd8      	it	le
 800b3bc:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b3c0:	4252      	negs	r2, r2
 800b3c2:	e744      	b.n	800b24e <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b3c4:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b3c6:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b3c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3ca:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b3ce:	dd05      	ble.n	800b3dc <decompress_smooth_data+0x406>
 800b3d0:	fa06 f202 	lsl.w	r2, r6, r2
 800b3d4:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b3d6:	bfd8      	it	le
 800b3d8:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800b3dc:	425b      	negs	r3, r3
 800b3de:	e756      	b.n	800b28e <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b3e0:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b3e2:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b3e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3e6:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b3ea:	dd05      	ble.n	800b3f8 <decompress_smooth_data+0x422>
 800b3ec:	fa06 f202 	lsl.w	r2, r6, r2
 800b3f0:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b3f2:	bfd8      	it	le
 800b3f4:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800b3f8:	425b      	negs	r3, r3
 800b3fa:	e767      	b.n	800b2cc <decompress_smooth_data+0x2f6>

0800b3fc <jinit_d_coef_controller>:
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800b3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b400:	6843      	ldr	r3, [r0, #4]
{
 800b402:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b404:	2274      	movs	r2, #116	; 0x74
 800b406:	2101      	movs	r1, #1
 800b408:	681b      	ldr	r3, [r3, #0]
{
 800b40a:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b40c:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800b40e:	4b2c      	ldr	r3, [pc, #176]	; (800b4c0 <jinit_d_coef_controller+0xc4>)
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800b410:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800b414:	2700      	movs	r7, #0
  coef->pub.start_input_pass = start_input_pass;
 800b416:	6003      	str	r3, [r0, #0]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b418:	4604      	mov	r4, r0
  coef->pub.start_output_pass = start_output_pass;
 800b41a:	4b2a      	ldr	r3, [pc, #168]	; (800b4c4 <jinit_d_coef_controller+0xc8>)
 800b41c:	f100 0844 	add.w	r8, r0, #68	; 0x44
  coef->coef_bits_latch = NULL;
 800b420:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800b422:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800b424:	b386      	cbz	r6, 800b488 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b426:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800b42a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b42c:	42bb      	cmp	r3, r7
 800b42e:	dc09      	bgt.n	800b444 <jinit_d_coef_controller+0x48>
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800b430:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800b434:	4924      	ldr	r1, [pc, #144]	; (800b4c8 <jinit_d_coef_controller+0xcc>)
 800b436:	4a25      	ldr	r2, [pc, #148]	; (800b4cc <jinit_d_coef_controller+0xd0>)
    coef->pub.consume_data = consume_data;
 800b438:	6061      	str	r1, [r4, #4]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800b43a:	e9c4 2303 	strd	r2, r3, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800b43e:	b004      	add	sp, #16
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cinfo->progressive_mode)
 800b444:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800b448:	f8d6 900c 	ldr.w	r9, [r6, #12]
      if (cinfo->progressive_mode)
 800b44c:	b10b      	cbz	r3, 800b452 <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800b44e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b452:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800b454:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b456:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800b458:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b45a:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b45e:	f8d3 a014 	ldr.w	sl, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b462:	f00b fc3a 	bl	8016cda <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b466:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b46a:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b46c:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800b470:	f00b fc33 	bl	8016cda <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b474:	2201      	movs	r2, #1
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	4611      	mov	r1, r2
 800b47a:	e9cd 0900 	strd	r0, r9, [sp]
 800b47e:	4628      	mov	r0, r5
 800b480:	47d0      	blx	sl
 800b482:	f848 0f04 	str.w	r0, [r8, #4]!
	 ci++, compptr++) {
 800b486:	e7d0      	b.n	800b42a <jinit_d_coef_controller+0x2e>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b488:	686b      	ldr	r3, [r5, #4]
 800b48a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b48e:	2101      	movs	r1, #1
 800b490:	4628      	mov	r0, r5
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b496:	f104 031c 	add.w	r3, r4, #28
 800b49a:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800b49c:	f843 2f04 	str.w	r2, [r3, #4]!
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b4a0:	4543      	cmp	r3, r8
 800b4a2:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800b4a6:	d1f9      	bne.n	800b49c <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800b4a8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800b4ac:	b919      	cbnz	r1, 800b4b6 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800b4ae:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b4b2:	f01f f93d 	bl	802a730 <memset>
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800b4b6:	4906      	ldr	r1, [pc, #24]	; (800b4d0 <jinit_d_coef_controller+0xd4>)
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	4a06      	ldr	r2, [pc, #24]	; (800b4d4 <jinit_d_coef_controller+0xd8>)
 800b4bc:	e7bc      	b.n	800b438 <jinit_d_coef_controller+0x3c>
 800b4be:	bf00      	nop
 800b4c0:	0800ab4d 	.word	0x0800ab4d
 800b4c4:	0800ad9d 	.word	0x0800ad9d
 800b4c8:	0800ab5b 	.word	0x0800ab5b
 800b4cc:	0800ac8f 	.word	0x0800ac8f
 800b4d0:	0800ab57 	.word	0x0800ab57
 800b4d4:	0800ae55 	.word	0x0800ae55

0800b4d8 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b4d8:	6843      	ldr	r3, [r0, #4]
 800b4da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b4de:	2101      	movs	r1, #1
 800b4e0:	681b      	ldr	r3, [r3, #0]
{
 800b4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e6:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b4e8:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b4ec:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b4ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b4f2:	6863      	ldr	r3, [r4, #4]
 800b4f4:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800b4f6:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b4fe:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800b500:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2101      	movs	r1, #1
 800b50a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b50c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800b58c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b510:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b512:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800b514:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b516:	2101      	movs	r1, #1
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4620      	mov	r0, r4
 800b51c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b520:	4f17      	ldr	r7, [pc, #92]	; (800b580 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b522:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b524:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800b526:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b528:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b52a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800b590 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b52e:	4915      	ldr	r1, [pc, #84]	; (800b584 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800b530:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b534:	4d14      	ldr	r5, [pc, #80]	; (800b588 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b536:	fb08 e203 	mla	r2, r8, r3, lr
 800b53a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800b53c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b540:	fb07 f203 	mul.w	r2, r7, r3
 800b544:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800b548:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800b54c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800b54e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b552:	fb05 f203 	mul.w	r2, r5, r3
 800b556:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800b55a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800b55e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b562:	fb01 f203 	mul.w	r2, r1, r3
 800b566:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800b56a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800b56e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b572:	3301      	adds	r3, #1
 800b574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b578:	d1dd      	bne.n	800b536 <build_ycc_rgb_table+0x5e>
  }
}
 800b57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b57e:	bf00      	nop
 800b580:	0001c5a2 	.word	0x0001c5a2
 800b584:	ffffa7e6 	.word	0xffffa7e6
 800b588:	ffff492e 	.word	0xffff492e
 800b58c:	000166e9 	.word	0x000166e9
 800b590:	ff4d0b80 	.word	0xff4d0b80

0800b594 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b598:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b59c:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b59e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b5a0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b5a4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b5a8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b5ac:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800b5ae:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800b5b0:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b5b2:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800b5b6:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b5b8:	6920      	ldr	r0, [r4, #16]
 800b5ba:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b5bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5be:	3a01      	subs	r2, #1
 800b5c0:	9210      	str	r2, [sp, #64]	; 0x40
 800b5c2:	d502      	bpl.n	800b5ca <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b5c4:	b007      	add	sp, #28
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b5ca:	9a05      	ldr	r2, [sp, #20]
 800b5cc:	680c      	ldr	r4, [r1, #0]
 800b5ce:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800b5d0:	f853 0b04 	ldr.w	r0, [r3], #4
 800b5d4:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800b5d8:	684c      	ldr	r4, [r1, #4]
 800b5da:	5964      	ldr	r4, [r4, r5]
 800b5dc:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800b5e0:	688c      	ldr	r4, [r1, #8]
 800b5e2:	5967      	ldr	r7, [r4, r5]
 800b5e4:	9c01      	ldr	r4, [sp, #4]
 800b5e6:	3f01      	subs	r7, #1
 800b5e8:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800b5ec:	45d0      	cmp	r8, sl
 800b5ee:	f100 0003 	add.w	r0, r0, #3
 800b5f2:	d0e3      	beq.n	800b5bc <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b5f4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800b5f8:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b5fc:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800b5fe:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b602:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800b606:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b608:	fa0f fb8b 	sxth.w	fp, fp
 800b60c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b60e:	5d65      	ldrb	r5, [r4, r5]
 800b610:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b614:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800b618:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800b61c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b61e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b620:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800b622:	5d65      	ldrb	r5, [r4, r5]
 800b624:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b628:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800b62c:	5d64      	ldrb	r4, [r4, r5]
 800b62e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800b632:	e7db      	b.n	800b5ec <ycc_rgb_convert+0x58>

0800b634 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b638:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800b63c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800b640:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b642:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b644:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b646:	3d01      	subs	r5, #1
 800b648:	d501      	bpl.n	800b64e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b64e:	189c      	adds	r4, r3, r2
 800b650:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800b652:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800b656:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800b65a:	6848      	ldr	r0, [r1, #4]
 800b65c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800b660:	6888      	ldr	r0, [r1, #8]
 800b662:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800b666:	2000      	movs	r0, #0
 800b668:	42b8      	cmp	r0, r7
 800b66a:	d0ec      	beq.n	800b646 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800b66c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800b670:	f81c b000 	ldrb.w	fp, [ip, r0]
 800b674:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800b678:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800b67c:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800b680:	4454      	add	r4, sl
 800b682:	f818 a000 	ldrb.w	sl, [r8, r0]
 800b686:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800b68a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800b68e:	4454      	add	r4, sl
		 >> SCALEBITS);
 800b690:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800b692:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800b696:	3001      	adds	r0, #1
 800b698:	e7e6      	b.n	800b668 <rgb_gray_convert+0x34>

0800b69a <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800b69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69e:	9d06      	ldr	r5, [sp, #24]
 800b6a0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b6a4:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b6a6:	3d01      	subs	r5, #1
 800b6a8:	d501      	bpl.n	800b6ae <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800b6ae:	1898      	adds	r0, r3, r2
 800b6b0:	680c      	ldr	r4, [r1, #0]
 800b6b2:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800b6b4:	684c      	ldr	r4, [r1, #4]
 800b6b6:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800b6ba:	688c      	ldr	r4, [r1, #8]
 800b6bc:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f853 4b04 	ldr.w	r4, [r3], #4
 800b6c6:	42b0      	cmp	r0, r6
 800b6c8:	f104 0403 	add.w	r4, r4, #3
 800b6cc:	d0eb      	beq.n	800b6a6 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800b6ce:	f817 8000 	ldrb.w	r8, [r7, r0]
 800b6d2:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800b6d6:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800b6da:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800b6de:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800b6e2:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800b6e4:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800b6e8:	e7ed      	b.n	800b6c6 <rgb_convert+0x2c>

0800b6ea <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800b6ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6ee:	9e07      	ldr	r6, [sp, #28]
 800b6f0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800b6f4:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800b6f6:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800b6fa:	3e01      	subs	r6, #1
 800b6fc:	d418      	bmi.n	800b730 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800b6fe:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800b702:	2000      	movs	r0, #0
 800b704:	e00a      	b.n	800b71c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800b706:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b70a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800b70e:	681c      	ldr	r4, [r3, #0]
 800b710:	eb05 080e 	add.w	r8, r5, lr
 800b714:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800b716:	4545      	cmp	r5, r8
 800b718:	d104      	bne.n	800b724 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800b71a:	3001      	adds	r0, #1
 800b71c:	42b8      	cmp	r0, r7
 800b71e:	dbf2      	blt.n	800b706 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800b720:	3304      	adds	r3, #4
 800b722:	e7ea      	b.n	800b6fa <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800b724:	f815 9b01 	ldrb.w	r9, [r5], #1
 800b728:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800b72c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800b72e:	e7f2      	b.n	800b716 <null_convert+0x2c>
  }
}
 800b730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b734 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b736:	9d05      	ldr	r5, [sp, #20]
 800b738:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b73c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b73e:	3d01      	subs	r5, #1
 800b740:	d500      	bpl.n	800b744 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b742:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800b744:	6808      	ldr	r0, [r1, #0]
 800b746:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800b748:	f853 0b04 	ldr.w	r0, [r3], #4
 800b74c:	58a4      	ldr	r4, [r4, r2]
 800b74e:	eb04 0c07 	add.w	ip, r4, r7
 800b752:	4564      	cmp	r4, ip
 800b754:	f100 0003 	add.w	r0, r0, #3
 800b758:	d0f1      	beq.n	800b73e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800b75a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800b75e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800b762:	f800 6c02 	strb.w	r6, [r0, #-2]
 800b766:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800b76a:	e7f2      	b.n	800b752 <gray_rgb_convert+0x1e>

0800b76c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b770:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b774:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b776:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b778:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b77c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b780:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800b784:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b786:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800b78a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b78c:	6920      	ldr	r0, [r4, #16]
 800b78e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b790:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b792:	3a01      	subs	r2, #1
 800b794:	9210      	str	r2, [sp, #64]	; 0x40
 800b796:	d502      	bpl.n	800b79e <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800b798:	b007      	add	sp, #28
 800b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b79e:	eb03 0008 	add.w	r0, r3, r8
 800b7a2:	680a      	ldr	r2, [r1, #0]
 800b7a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7a8:	5812      	ldr	r2, [r2, r0]
 800b7aa:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800b7ac:	684a      	ldr	r2, [r1, #4]
 800b7ae:	5812      	ldr	r2, [r2, r0]
 800b7b0:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800b7b2:	688a      	ldr	r2, [r1, #8]
 800b7b4:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800b7b8:	68ca      	ldr	r2, [r1, #12]
 800b7ba:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800b7be:	2200      	movs	r2, #0
 800b7c0:	9800      	ldr	r0, [sp, #0]
 800b7c2:	3504      	adds	r5, #4
 800b7c4:	4282      	cmp	r2, r0
 800b7c6:	d0e3      	beq.n	800b790 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b7c8:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800b7cc:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800b7ce:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800b7d0:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800b7d4:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b7d6:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b7da:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b7de:	4404      	add	r4, r0
 800b7e0:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b7e4:	5d34      	ldrb	r4, [r6, r4]
 800b7e6:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b7ea:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800b7ee:	9405      	str	r4, [sp, #20]
 800b7f0:	9c02      	ldr	r4, [sp, #8]
 800b7f2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b7f6:	9c05      	ldr	r4, [sp, #20]
 800b7f8:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800b7fa:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800b7fe:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b802:	5d34      	ldrb	r4, [r6, r4]
 800b804:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800b808:	9c01      	ldr	r4, [sp, #4]
 800b80a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800b80e:	4420      	add	r0, r4
 800b810:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b814:	5c30      	ldrb	r0, [r6, r0]
 800b816:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b81a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800b81e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b820:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800b824:	e7cc      	b.n	800b7c0 <ycck_cmyk_convert+0x54>

0800b826 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800b826:	4770      	bx	lr

0800b828 <grayscale_convert>:
{
 800b828:	b513      	push	{r0, r1, r4, lr}
 800b82a:	460c      	mov	r4, r1
 800b82c:	4611      	mov	r1, r2
 800b82e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800b830:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b832:	6820      	ldr	r0, [r4, #0]
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	9b04      	ldr	r3, [sp, #16]
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	2300      	movs	r3, #0
 800b83c:	f00b fa55 	bl	8016cea <jcopy_sample_rows>
}
 800b840:	b002      	add	sp, #8
 800b842:	bd10      	pop	{r4, pc}

0800b844 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b844:	6843      	ldr	r3, [r0, #4]
 800b846:	221c      	movs	r2, #28
 800b848:	2101      	movs	r1, #1
 800b84a:	681b      	ldr	r3, [r3, #0]
{
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b850:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800b852:	4b4a      	ldr	r3, [pc, #296]	; (800b97c <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b854:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800b856:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800b85a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800b85c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b860:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b862:	2b03      	cmp	r3, #3
 800b864:	d821      	bhi.n	800b8aa <jinit_color_deconverter+0x66>
 800b866:	2b01      	cmp	r3, #1
 800b868:	d82d      	bhi.n	800b8c6 <jinit_color_deconverter+0x82>
 800b86a:	d023      	beq.n	800b8b4 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	dd23      	ble.n	800b8b8 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800b870:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b874:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800b878:	2902      	cmp	r1, #2
 800b87a:	d055      	beq.n	800b928 <jinit_color_deconverter+0xe4>
 800b87c:	2904      	cmp	r1, #4
 800b87e:	d066      	beq.n	800b94e <jinit_color_deconverter+0x10a>
 800b880:	2901      	cmp	r1, #1
 800b882:	d16d      	bne.n	800b960 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b884:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800b888:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b88a:	2a01      	cmp	r2, #1
 800b88c:	d124      	bne.n	800b8d8 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800b88e:	4b3c      	ldr	r3, [pc, #240]	; (800b980 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800b890:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b892:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800b894:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b896:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800b898:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b89a:	4299      	cmp	r1, r3
 800b89c:	dc15      	bgt.n	800b8ca <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800b89e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d169      	bne.n	800b978 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800b8a4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b8a6:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800b8a8:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800b8aa:	3b04      	subs	r3, #4
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d8dd      	bhi.n	800b86c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800b8b0:	2a04      	cmp	r2, #4
 800b8b2:	e000      	b.n	800b8b6 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800b8b4:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800b8b6:	d0db      	beq.n	800b870 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	220b      	movs	r2, #11
 800b8bc:	4620      	mov	r0, r4
 800b8be:	615a      	str	r2, [r3, #20]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4798      	blx	r3
 800b8c4:	e7d4      	b.n	800b870 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800b8c6:	2a03      	cmp	r2, #3
 800b8c8:	e7f5      	b.n	800b8b6 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800b8ca:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800b8ce:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b8d2:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800b8d4:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b8d6:	e7e0      	b.n	800b89a <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d146      	bne.n	800b96a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800b8dc:	4b29      	ldr	r3, [pc, #164]	; (800b984 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8de:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b8e2:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b8e4:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800b8e8:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8ea:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b8ec:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b8f4:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800b8f6:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b8f8:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800b8fc:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b8fe:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b902:	fb06 f203 	mul.w	r2, r6, r3
 800b906:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b90a:	fb05 f203 	mul.w	r2, r5, r3
 800b90e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b912:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b916:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b918:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b91c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b920:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b924:	d1ed      	bne.n	800b902 <jinit_color_deconverter+0xbe>
 800b926:	e7ba      	b.n	800b89e <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b928:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b92a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b92c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b92e:	d105      	bne.n	800b93c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800b930:	4b15      	ldr	r3, [pc, #84]	; (800b988 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800b932:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b934:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800b936:	f7ff fdcf 	bl	800b4d8 <build_ycc_rgb_table>
 800b93a:	e7b0      	b.n	800b89e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d102      	bne.n	800b946 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800b940:	4b12      	ldr	r3, [pc, #72]	; (800b98c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800b942:	606b      	str	r3, [r5, #4]
 800b944:	e7ab      	b.n	800b89e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b946:	2b02      	cmp	r3, #2
 800b948:	d10f      	bne.n	800b96a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800b94a:	4b11      	ldr	r3, [pc, #68]	; (800b990 <jinit_color_deconverter+0x14c>)
 800b94c:	e7f9      	b.n	800b942 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b94e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800b950:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b952:	d101      	bne.n	800b958 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b954:	4b0f      	ldr	r3, [pc, #60]	; (800b994 <jinit_color_deconverter+0x150>)
 800b956:	e7ec      	b.n	800b932 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800b958:	2b04      	cmp	r3, #4
 800b95a:	d106      	bne.n	800b96a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800b95c:	4b0e      	ldr	r3, [pc, #56]	; (800b998 <jinit_color_deconverter+0x154>)
 800b95e:	e7f0      	b.n	800b942 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800b960:	4299      	cmp	r1, r3
 800b962:	d102      	bne.n	800b96a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800b964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b966:	67a3      	str	r3, [r4, #120]	; 0x78
 800b968:	e7f8      	b.n	800b95c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	221c      	movs	r2, #28
 800b96e:	4620      	mov	r0, r4
 800b970:	615a      	str	r2, [r3, #20]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4798      	blx	r3
 800b976:	e792      	b.n	800b89e <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800b978:	2301      	movs	r3, #1
 800b97a:	e794      	b.n	800b8a6 <jinit_color_deconverter+0x62>
 800b97c:	0800b827 	.word	0x0800b827
 800b980:	0800b829 	.word	0x0800b829
 800b984:	0800b635 	.word	0x0800b635
 800b988:	0800b595 	.word	0x0800b595
 800b98c:	0800b735 	.word	0x0800b735
 800b990:	0800b69b 	.word	0x0800b69b
 800b994:	0800b76d 	.word	0x0800b76d
 800b998:	0800b6eb 	.word	0x0800b6eb

0800b99c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800b9a0:	2500      	movs	r5, #0
{
 800b9a2:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b9a4:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800b9a8:	f8d0 81d4 	ldr.w	r8, [r0, #468]	; 0x1d4
  int method = 0;
 800b9ac:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b9ae:	46ab      	mov	fp, r5
{
 800b9b0:	ed2d 8b04 	vpush	{d8-d9}
 800b9b4:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	455b      	cmp	r3, fp
 800b9ba:	dc04      	bgt.n	800b9c6 <start_pass+0x2a>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800b9bc:	b007      	add	sp, #28
 800b9be:	ecbd 8b04 	vpop	{d8-d9}
 800b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b9c6:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800b9ca:	f240 700e 	movw	r0, #1806	; 0x70e
 800b9ce:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800b9d2:	4283      	cmp	r3, r0
 800b9d4:	f000 80d9 	beq.w	800bb8a <start_pass+0x1ee>
 800b9d8:	dc5a      	bgt.n	800ba90 <start_pass+0xf4>
 800b9da:	f240 4004 	movw	r0, #1028	; 0x404
 800b9de:	4283      	cmp	r3, r0
 800b9e0:	f000 80d6 	beq.w	800bb90 <start_pass+0x1f4>
 800b9e4:	dc2f      	bgt.n	800ba46 <start_pass+0xaa>
 800b9e6:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b9ea:	f000 80d3 	beq.w	800bb94 <start_pass+0x1f8>
 800b9ee:	dc1a      	bgt.n	800ba26 <start_pass+0x8a>
 800b9f0:	f240 2001 	movw	r0, #513	; 0x201
 800b9f4:	4283      	cmp	r3, r0
 800b9f6:	f000 80cf 	beq.w	800bb98 <start_pass+0x1fc>
 800b9fa:	dc0e      	bgt.n	800ba1a <start_pass+0x7e>
 800b9fc:	f240 1001 	movw	r0, #257	; 0x101
 800ba00:	4283      	cmp	r3, r0
 800ba02:	f000 80cb 	beq.w	800bb9c <start_pass+0x200>
 800ba06:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800ba0a:	f000 80c9 	beq.w	800bba0 <start_pass+0x204>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2007      	movs	r0, #7
 800ba12:	61da      	str	r2, [r3, #28]
 800ba14:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800ba18:	e0b3      	b.n	800bb82 <start_pass+0x1e6>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ba1a:	f240 2002 	movw	r0, #514	; 0x202
 800ba1e:	4283      	cmp	r3, r0
 800ba20:	d1f5      	bne.n	800ba0e <start_pass+0x72>
 800ba22:	4d9e      	ldr	r5, [pc, #632]	; (800bc9c <start_pass+0x300>)
 800ba24:	e0b2      	b.n	800bb8c <start_pass+0x1f0>
 800ba26:	f240 3006 	movw	r0, #774	; 0x306
 800ba2a:	4283      	cmp	r3, r0
 800ba2c:	f000 80ba 	beq.w	800bba4 <start_pass+0x208>
 800ba30:	f240 4002 	movw	r0, #1026	; 0x402
 800ba34:	4283      	cmp	r3, r0
 800ba36:	f000 80b7 	beq.w	800bba8 <start_pass+0x20c>
 800ba3a:	f240 3003 	movw	r0, #771	; 0x303
 800ba3e:	4283      	cmp	r3, r0
 800ba40:	d1e5      	bne.n	800ba0e <start_pass+0x72>
      method_ptr = jpeg_idct_3x3;
 800ba42:	4d97      	ldr	r5, [pc, #604]	; (800bca0 <start_pass+0x304>)
 800ba44:	e0a2      	b.n	800bb8c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ba46:	f240 6003 	movw	r0, #1539	; 0x603
 800ba4a:	4283      	cmp	r3, r0
 800ba4c:	f000 80ae 	beq.w	800bbac <start_pass+0x210>
 800ba50:	dc0e      	bgt.n	800ba70 <start_pass+0xd4>
 800ba52:	f240 5005 	movw	r0, #1285	; 0x505
 800ba56:	4283      	cmp	r3, r0
 800ba58:	f000 80aa 	beq.w	800bbb0 <start_pass+0x214>
 800ba5c:	f240 500a 	movw	r0, #1290	; 0x50a
 800ba60:	4283      	cmp	r3, r0
 800ba62:	f000 80a7 	beq.w	800bbb4 <start_pass+0x218>
 800ba66:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800ba6a:	d1d0      	bne.n	800ba0e <start_pass+0x72>
      method_ptr = jpeg_idct_4x8;
 800ba6c:	4d8d      	ldr	r5, [pc, #564]	; (800bca4 <start_pass+0x308>)
 800ba6e:	e08d      	b.n	800bb8c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ba70:	f240 600c 	movw	r0, #1548	; 0x60c
 800ba74:	4283      	cmp	r3, r0
 800ba76:	f000 809f 	beq.w	800bbb8 <start_pass+0x21c>
 800ba7a:	f240 7007 	movw	r0, #1799	; 0x707
 800ba7e:	4283      	cmp	r3, r0
 800ba80:	f000 809c 	beq.w	800bbbc <start_pass+0x220>
 800ba84:	f240 6006 	movw	r0, #1542	; 0x606
 800ba88:	4283      	cmp	r3, r0
 800ba8a:	d1c0      	bne.n	800ba0e <start_pass+0x72>
      method_ptr = jpeg_idct_6x6;
 800ba8c:	4d86      	ldr	r5, [pc, #536]	; (800bca8 <start_pass+0x30c>)
 800ba8e:	e07d      	b.n	800bb8c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ba90:	f640 4006 	movw	r0, #3078	; 0xc06
 800ba94:	4283      	cmp	r3, r0
 800ba96:	f000 8093 	beq.w	800bbc0 <start_pass+0x224>
 800ba9a:	dc21      	bgt.n	800bae0 <start_pass+0x144>
 800ba9c:	f640 1009 	movw	r0, #2313	; 0x909
 800baa0:	4283      	cmp	r3, r0
 800baa2:	f000 808f 	beq.w	800bbc4 <start_pass+0x228>
 800baa6:	dc0d      	bgt.n	800bac4 <start_pass+0x128>
 800baa8:	f640 0008 	movw	r0, #2056	; 0x808
 800baac:	4283      	cmp	r3, r0
 800baae:	d039      	beq.n	800bb24 <start_pass+0x188>
 800bab0:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800bab4:	f000 8088 	beq.w	800bbc8 <start_pass+0x22c>
 800bab8:	f640 0004 	movw	r0, #2052	; 0x804
 800babc:	4283      	cmp	r3, r0
 800babe:	d1a6      	bne.n	800ba0e <start_pass+0x72>
      method_ptr = jpeg_idct_8x4;
 800bac0:	4d7a      	ldr	r5, [pc, #488]	; (800bcac <start_pass+0x310>)
 800bac2:	e063      	b.n	800bb8c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bac4:	f640 200a 	movw	r0, #2570	; 0xa0a
 800bac8:	4283      	cmp	r3, r0
 800baca:	d07f      	beq.n	800bbcc <start_pass+0x230>
 800bacc:	f640 300b 	movw	r0, #2827	; 0xb0b
 800bad0:	4283      	cmp	r3, r0
 800bad2:	d07d      	beq.n	800bbd0 <start_pass+0x234>
 800bad4:	f640 2005 	movw	r0, #2565	; 0xa05
 800bad8:	4283      	cmp	r3, r0
 800bada:	d198      	bne.n	800ba0e <start_pass+0x72>
      method_ptr = jpeg_idct_10x5;
 800badc:	4d74      	ldr	r5, [pc, #464]	; (800bcb0 <start_pass+0x314>)
 800bade:	e055      	b.n	800bb8c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bae0:	f640 600e 	movw	r0, #3598	; 0xe0e
 800bae4:	4283      	cmp	r3, r0
 800bae6:	d075      	beq.n	800bbd4 <start_pass+0x238>
 800bae8:	dc0d      	bgt.n	800bb06 <start_pass+0x16a>
 800baea:	f640 500d 	movw	r0, #3341	; 0xd0d
 800baee:	4283      	cmp	r3, r0
 800baf0:	d072      	beq.n	800bbd8 <start_pass+0x23c>
 800baf2:	f640 6007 	movw	r0, #3591	; 0xe07
 800baf6:	4283      	cmp	r3, r0
 800baf8:	d070      	beq.n	800bbdc <start_pass+0x240>
 800bafa:	f640 400c 	movw	r0, #3084	; 0xc0c
 800bafe:	4283      	cmp	r3, r0
 800bb00:	d185      	bne.n	800ba0e <start_pass+0x72>
      method_ptr = jpeg_idct_12x12;
 800bb02:	4d6c      	ldr	r5, [pc, #432]	; (800bcb4 <start_pass+0x318>)
 800bb04:	e042      	b.n	800bb8c <start_pass+0x1f0>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bb06:	f241 0008 	movw	r0, #4104	; 0x1008
 800bb0a:	4283      	cmp	r3, r0
 800bb0c:	d068      	beq.n	800bbe0 <start_pass+0x244>
 800bb0e:	f241 0010 	movw	r0, #4112	; 0x1010
 800bb12:	4283      	cmp	r3, r0
 800bb14:	d066      	beq.n	800bbe4 <start_pass+0x248>
 800bb16:	f640 700f 	movw	r0, #3855	; 0xf0f
 800bb1a:	4283      	cmp	r3, r0
 800bb1c:	f47f af77 	bne.w	800ba0e <start_pass+0x72>
      method_ptr = jpeg_idct_15x15;
 800bb20:	4d65      	ldr	r5, [pc, #404]	; (800bcb8 <start_pass+0x31c>)
 800bb22:	e033      	b.n	800bb8c <start_pass+0x1f0>
      switch (cinfo->dct_method) {
 800bb24:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d827      	bhi.n	800bb7c <start_pass+0x1e0>
 800bb2c:	461c      	mov	r4, r3
 800bb2e:	4b63      	ldr	r3, [pc, #396]	; (800bcbc <start_pass+0x320>)
 800bb30:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800bb34:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800bb38:	f848 5f04 	str.w	r5, [r8, #4]!
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800bb3c:	b1cb      	cbz	r3, 800bb72 <start_pass+0x1d6>
 800bb3e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800bb42:	42a3      	cmp	r3, r4
 800bb44:	d015      	beq.n	800bb72 <start_pass+0x1d6>
    qtbl = compptr->quant_table;
 800bb46:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800bb4a:	b196      	cbz	r6, 800bb72 <start_pass+0x1d6>
    switch (method) {
 800bb4c:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800bb4e:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
    switch (method) {
 800bb52:	d049      	beq.n	800bbe8 <start_pass+0x24c>
 800bb54:	2c02      	cmp	r4, #2
 800bb56:	d05a      	beq.n	800bc0e <start_pass+0x272>
 800bb58:	2c00      	cmp	r4, #0
 800bb5a:	f040 8098 	bne.w	800bc8e <start_pass+0x2f2>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800bb5e:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800bb62:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800bb64:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800bb68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	2b40      	cmp	r3, #64	; 0x40
 800bb70:	d1f8      	bne.n	800bb64 <start_pass+0x1c8>
       ci++, compptr++) {
 800bb72:	f10b 0b01 	add.w	fp, fp, #1
 800bb76:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800bb7a:	e71c      	b.n	800b9b6 <start_pass+0x1a>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2231      	movs	r2, #49	; 0x31
 800bb80:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4638      	mov	r0, r7
 800bb86:	4798      	blx	r3
      break;
 800bb88:	e7d4      	b.n	800bb34 <start_pass+0x198>
      method_ptr = jpeg_idct_7x14;
 800bb8a:	4d4d      	ldr	r5, [pc, #308]	; (800bcc0 <start_pass+0x324>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800bb8c:	2400      	movs	r4, #0
 800bb8e:	e7d1      	b.n	800bb34 <start_pass+0x198>
      method_ptr = jpeg_idct_4x4;
 800bb90:	4d4c      	ldr	r5, [pc, #304]	; (800bcc4 <start_pass+0x328>)
 800bb92:	e7fb      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_2x4;
 800bb94:	4d4c      	ldr	r5, [pc, #304]	; (800bcc8 <start_pass+0x32c>)
 800bb96:	e7f9      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_2x1;
 800bb98:	4d4c      	ldr	r5, [pc, #304]	; (800bccc <start_pass+0x330>)
 800bb9a:	e7f7      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_1x1;
 800bb9c:	4d4c      	ldr	r5, [pc, #304]	; (800bcd0 <start_pass+0x334>)
 800bb9e:	e7f5      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_1x2;
 800bba0:	4d4c      	ldr	r5, [pc, #304]	; (800bcd4 <start_pass+0x338>)
 800bba2:	e7f3      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_3x6;
 800bba4:	4d4c      	ldr	r5, [pc, #304]	; (800bcd8 <start_pass+0x33c>)
 800bba6:	e7f1      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_4x2;
 800bba8:	4d4c      	ldr	r5, [pc, #304]	; (800bcdc <start_pass+0x340>)
 800bbaa:	e7ef      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_6x3;
 800bbac:	4d4c      	ldr	r5, [pc, #304]	; (800bce0 <start_pass+0x344>)
 800bbae:	e7ed      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_5x5;
 800bbb0:	4d4c      	ldr	r5, [pc, #304]	; (800bce4 <start_pass+0x348>)
 800bbb2:	e7eb      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_5x10;
 800bbb4:	4d4c      	ldr	r5, [pc, #304]	; (800bce8 <start_pass+0x34c>)
 800bbb6:	e7e9      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_6x12;
 800bbb8:	4d4c      	ldr	r5, [pc, #304]	; (800bcec <start_pass+0x350>)
 800bbba:	e7e7      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_7x7;
 800bbbc:	4d4c      	ldr	r5, [pc, #304]	; (800bcf0 <start_pass+0x354>)
 800bbbe:	e7e5      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_12x6;
 800bbc0:	4d4c      	ldr	r5, [pc, #304]	; (800bcf4 <start_pass+0x358>)
 800bbc2:	e7e3      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_9x9;
 800bbc4:	4d4c      	ldr	r5, [pc, #304]	; (800bcf8 <start_pass+0x35c>)
 800bbc6:	e7e1      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_8x16;
 800bbc8:	4d4c      	ldr	r5, [pc, #304]	; (800bcfc <start_pass+0x360>)
 800bbca:	e7df      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_10x10;
 800bbcc:	4d4c      	ldr	r5, [pc, #304]	; (800bd00 <start_pass+0x364>)
 800bbce:	e7dd      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_11x11;
 800bbd0:	4d4c      	ldr	r5, [pc, #304]	; (800bd04 <start_pass+0x368>)
 800bbd2:	e7db      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_14x14;
 800bbd4:	4d4c      	ldr	r5, [pc, #304]	; (800bd08 <start_pass+0x36c>)
 800bbd6:	e7d9      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_13x13;
 800bbd8:	4d4c      	ldr	r5, [pc, #304]	; (800bd0c <start_pass+0x370>)
 800bbda:	e7d7      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_14x7;
 800bbdc:	4d4c      	ldr	r5, [pc, #304]	; (800bd10 <start_pass+0x374>)
 800bbde:	e7d5      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_16x8;
 800bbe0:	4d4c      	ldr	r5, [pc, #304]	; (800bd14 <start_pass+0x378>)
 800bbe2:	e7d3      	b.n	800bb8c <start_pass+0x1f0>
      method_ptr = jpeg_idct_16x16;
 800bbe4:	4d4c      	ldr	r5, [pc, #304]	; (800bd18 <start_pass+0x37c>)
 800bbe6:	e7d1      	b.n	800bb8c <start_pass+0x1f0>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800bbe8:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800bbec:	2200      	movs	r2, #0
 800bbee:	494b      	ldr	r1, [pc, #300]	; (800bd1c <start_pass+0x380>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800bbf0:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800bbf4:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800bbf8:	fb0c f303 	mul.w	r3, ip, r3
 800bbfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc00:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800bc02:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800bc06:	3201      	adds	r2, #1
 800bc08:	2a40      	cmp	r2, #64	; 0x40
 800bc0a:	d1f1      	bne.n	800bbf0 <start_pass+0x254>
 800bc0c:	e7b1      	b.n	800bb72 <start_pass+0x1d6>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800bc0e:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800bc12:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	4b41      	ldr	r3, [pc, #260]	; (800bd20 <start_pass+0x384>)
 800bc1a:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800bc1c:	9b03      	ldr	r3, [sp, #12]
 800bc1e:	ecb3 7b02 	vldmia	r3!, {d7}
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	eeb0 8a47 	vmov.f32	s16, s14
 800bc28:	eef0 8a67 	vmov.f32	s17, s15
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	4b3a      	ldr	r3, [pc, #232]	; (800bd20 <start_pass+0x384>)
 800bc36:	9302      	str	r3, [sp, #8]
 800bc38:	f106 0310 	add.w	r3, r6, #16
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800bc40:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800bc44:	ecb3 7b02 	vldmia	r3!, {d7}
 800bc48:	eeb0 9a47 	vmov.f32	s18, s14
 800bc4c:	eef0 9a67 	vmov.f32	s19, s15
 800bc50:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800bc52:	f7f4 fc6f 	bl	8000534 <__aeabi_ui2d>
 800bc56:	ec53 2b18 	vmov	r2, r3, d8
 800bc5a:	f7f4 fce5 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800bc5e:	ec53 2b19 	vmov	r2, r3, d9
 800bc62:	f7f4 fce1 	bl	8000628 <__aeabi_dmul>
 800bc66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f7f4 fcdc 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800bc70:	f7f4 feec 	bl	8000a4c <__aeabi_d2f>
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	f843 0b04 	str.w	r0, [r3], #4
 800bc7a:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800bc7c:	9b05      	ldr	r3, [sp, #20]
 800bc7e:	429e      	cmp	r6, r3
 800bc80:	d1dd      	bne.n	800bc3e <start_pass+0x2a2>
	    i++;
 800bc82:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800bc86:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800bc8a:	d1c7      	bne.n	800bc1c <start_pass+0x280>
 800bc8c:	e771      	b.n	800bb72 <start_pass+0x1d6>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2231      	movs	r2, #49	; 0x31
 800bc92:	4638      	mov	r0, r7
 800bc94:	615a      	str	r2, [r3, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4798      	blx	r3
      break;
 800bc9a:	e76a      	b.n	800bb72 <start_pass+0x1d6>
 800bc9c:	08010df9 	.word	0x08010df9
 800bca0:	08010d05 	.word	0x08010d05
 800bca4:	08014c2d 	.word	0x08014c2d
 800bca8:	080108a9 	.word	0x080108a9
 800bcac:	08013ba9 	.word	0x08013ba9
 800bcb0:	08013959 	.word	0x08013959
 800bcb4:	0801185d 	.word	0x0801185d
 800bcb8:	08012509 	.word	0x08012509
 800bcbc:	0802d88c 	.word	0x0802d88c
 800bcc0:	080143cd 	.word	0x080143cd
 800bcc4:	08010bd9 	.word	0x08010bd9
 800bcc8:	08014f95 	.word	0x08014f95
 800bccc:	08013fbd 	.word	0x08013fbd
 800bcd0:	08010e75 	.word	0x08010e75
 800bcd4:	0801506d 	.word	0x0801506d
 800bcd8:	08014e45 	.word	0x08014e45
 800bcdc:	08013ef1 	.word	0x08013ef1
 800bce0:	08013d95 	.word	0x08013d95
 800bce4:	08010a59 	.word	0x08010a59
 800bce8:	080149f5 	.word	0x080149f5
 800bcec:	0801473d 	.word	0x0801473d
 800bcf0:	08010615 	.word	0x08010615
 800bcf4:	080136a1 	.word	0x080136a1
 800bcf8:	08010e99 	.word	0x08010e99
 800bcfc:	08013ff5 	.word	0x08013ff5
 800bd00:	0801115d 	.word	0x0801115d
 800bd04:	08011461 	.word	0x08011461
 800bd08:	080120c1 	.word	0x080120c1
 800bd0c:	08011c29 	.word	0x08011c29
 800bd10:	08013315 	.word	0x08013315
 800bd14:	08012edd 	.word	0x08012edd
 800bd18:	0801299d 	.word	0x0801299d
 800bd1c:	0802d8d8 	.word	0x0802d8d8
 800bd20:	0802d898 	.word	0x0802d898

0800bd24 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800bd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd26:	6843      	ldr	r3, [r0, #4]
{
 800bd28:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd2a:	2254      	movs	r2, #84	; 0x54
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bd30:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd32:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800bd34:	4b0f      	ldr	r3, [pc, #60]	; (800bd74 <jinit_inverse_dct+0x50>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd36:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bd38:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800bd3c:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800bd40:	f844 3b28 	str.w	r3, [r4], #40
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bd44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd46:	42b3      	cmp	r3, r6
 800bd48:	dc00      	bgt.n	800bd4c <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800bd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd4c:	686b      	ldr	r3, [r5, #4]
 800bd4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd52:	2101      	movs	r1, #1
 800bd54:	4628      	mov	r0, r5
 800bd56:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800bd58:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd5a:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bd5c:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800bd60:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bd62:	2100      	movs	r1, #0
 800bd64:	f01e fce4 	bl	802a730 <memset>
    idct->cur_method[ci] = -1;
 800bd68:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800bd6c:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800bd6e:	f844 3f04 	str.w	r3, [r4, #4]!
       ci++, compptr++) {
 800bd72:	e7e7      	b.n	800bd44 <jinit_inverse_dct+0x20>
 800bd74:	0800b99d 	.word	0x0800b99d

0800bd78 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800bd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800bd7c:	6905      	ldr	r5, [r0, #16]
{
 800bd7e:	4607      	mov	r7, r0
 800bd80:	4688      	mov	r8, r1
 800bd82:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bd84:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800bd88:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800bd8a:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bd8e:	f1bb 0f00 	cmp.w	fp, #0
 800bd92:	d042      	beq.n	800be1a <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800bd94:	454e      	cmp	r6, r9
 800bd96:	da42      	bge.n	800be1e <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800bd98:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9e:	b95b      	cbnz	r3, 800bdb8 <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	2278      	movs	r2, #120	; 0x78
 800bda4:	f04f 31ff 	mov.w	r1, #4294967295
 800bda8:	4628      	mov	r0, r5
 800bdaa:	615a      	str	r2, [r3, #20]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800bdb0:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800bdb8:	f1c6 0619 	rsb	r6, r6, #25
 800bdbc:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800bdc0:	2619      	movs	r6, #25
 800bdc2:	e02c      	b.n	800be1e <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800bdc4:	f1ba 0f00 	cmp.w	sl, #0
 800bdc8:	d107      	bne.n	800bdda <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bdca:	69ab      	ldr	r3, [r5, #24]
 800bdcc:	4628      	mov	r0, r5
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	4798      	blx	r3
 800bdd2:	b350      	cbz	r0, 800be2a <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800bdd4:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bdd6:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800bdda:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800bdde:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800bde2:	2aff      	cmp	r2, #255	; 0xff
 800bde4:	d116      	bne.n	800be14 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800bde6:	f1ba 0f00 	cmp.w	sl, #0
 800bdea:	d109      	bne.n	800be00 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bdec:	69ab      	ldr	r3, [r5, #24]
 800bdee:	4628      	mov	r0, r5
 800bdf0:	9201      	str	r2, [sp, #4]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	4798      	blx	r3
 800bdf6:	b1c0      	cbz	r0, 800be2a <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800bdf8:	69ab      	ldr	r3, [r5, #24]
 800bdfa:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bdfc:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800be00:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800be04:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800be08:	2bff      	cmp	r3, #255	; 0xff
 800be0a:	d0ec      	beq.n	800bde6 <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800be0c:	b113      	cbz	r3, 800be14 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800be0e:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800be12:	e7bf      	b.n	800bd94 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800be14:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800be18:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800be1a:	2e18      	cmp	r6, #24
 800be1c:	ddd2      	ble.n	800bdc4 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800be1e:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800be22:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800be26:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800be2a:	4658      	mov	r0, fp
 800be2c:	b003      	add	sp, #12
 800be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800be34 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	9d06      	ldr	r5, [sp, #24]
 800be38:	4606      	mov	r6, r0
 800be3a:	468c      	mov	ip, r1
 800be3c:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800be3e:	4295      	cmp	r5, r2
{
 800be40:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800be42:	dd08      	ble.n	800be56 <jpeg_huff_decode+0x22>
 800be44:	462b      	mov	r3, r5
 800be46:	f7ff ff97 	bl	800bd78 <jpeg_fill_bit_buffer>
 800be4a:	b910      	cbnz	r0, 800be52 <jpeg_huff_decode+0x1e>
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800be50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800be52:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800be56:	1b62      	subs	r2, r4, r5
 800be58:	4b1b      	ldr	r3, [pc, #108]	; (800bec8 <jpeg_huff_decode+0x94>)
 800be5a:	fa4c f002 	asr.w	r0, ip, r2
 800be5e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800be62:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800be64:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800be68:	4283      	cmp	r3, r0
 800be6a:	db0d      	blt.n	800be88 <jpeg_huff_decode+0x54>
  if (l > 16) {
 800be6c:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800be6e:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800be72:	dd1f      	ble.n	800beb4 <jpeg_huff_decode+0x80>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800be74:	6930      	ldr	r0, [r6, #16]
 800be76:	2279      	movs	r2, #121	; 0x79
 800be78:	f04f 31ff 	mov.w	r1, #4294967295
 800be7c:	6803      	ldr	r3, [r0, #0]
 800be7e:	615a      	str	r2, [r3, #20]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800be84:	2000      	movs	r0, #0
 800be86:	e7e3      	b.n	800be50 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800be88:	2a00      	cmp	r2, #0
    code <<= 1;
 800be8a:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800be8e:	dc08      	bgt.n	800bea2 <jpeg_huff_decode+0x6e>
 800be90:	2301      	movs	r3, #1
 800be92:	4661      	mov	r1, ip
 800be94:	4630      	mov	r0, r6
 800be96:	f7ff ff6f 	bl	800bd78 <jpeg_fill_bit_buffer>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d0d6      	beq.n	800be4c <jpeg_huff_decode+0x18>
 800be9e:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800bea2:	3a01      	subs	r2, #1
    l++;
 800bea4:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800bea6:	fa4c f302 	asr.w	r3, ip, r2
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	ea43 0004 	orr.w	r0, r3, r4
    l++;
 800beb2:	e7d7      	b.n	800be64 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800beb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800beb8:	3512      	adds	r5, #18
 800beba:	4403      	add	r3, r0
 800bebc:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800bec0:	4413      	add	r3, r2
 800bec2:	7c58      	ldrb	r0, [r3, #17]
 800bec4:	e7c4      	b.n	800be50 <jpeg_huff_decode+0x1c>
 800bec6:	bf00      	nop
 800bec8:	0802d958 	.word	0x0802d958

0800becc <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800becc:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800bece:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800bed2:	2600      	movs	r6, #0
{
 800bed4:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800bed6:	68eb      	ldr	r3, [r5, #12]
 800bed8:	6991      	ldr	r1, [r2, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	bfb8      	it	lt
 800bede:	3307      	addlt	r3, #7
 800bee0:	eb01 01e3 	add.w	r1, r1, r3, asr #3

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800bee4:	6893      	ldr	r3, [r2, #8]
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800bee6:	6191      	str	r1, [r2, #24]
  entropy->bitstate.bits_left = 0;
 800bee8:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800beea:	4798      	blx	r3
 800beec:	b190      	cbz	r0, 800bf14 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800beee:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800bef2:	4631      	mov	r1, r6
 800bef4:	f105 0014 	add.w	r0, r5, #20
 800bef8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800befc:	0092      	lsls	r2, r2, #2
 800befe:	f01e fc17 	bl	802a730 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800bf02:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800bf06:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800bf08:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800bf0a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800bf0e:	b903      	cbnz	r3, 800bf12 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800bf10:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800bf12:	2001      	movs	r0, #1
}
 800bf14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf18 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800bf1c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800bf20:	b091      	sub	sp, #68	; 0x44
 800bf22:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bf24:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800bf28:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bf2a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bf2e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800bf30:	b933      	cbnz	r3, 800bf40 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bf32:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf34:	b17e      	cbz	r6, 800bf56 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bf36:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800bf38:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800bf3e:	e007      	b.n	800bf50 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800bf40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1f5      	bne.n	800bf32 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800bf46:	f7ff ffc1 	bl	800becc <process_restart>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d1f1      	bne.n	800bf32 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800bf4e:	2000      	movs	r0, #0
}
 800bf50:	b011      	add	sp, #68	; 0x44
 800bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf56:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800bf58:	f104 0810 	add.w	r8, r4, #16
 800bf5c:	af0b      	add	r7, sp, #44	; 0x2c
 800bf5e:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	f104 0b10 	add.w	fp, r4, #16
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	9206      	str	r2, [sp, #24]
 800bf6c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800bf6e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c088 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf72:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800bf74:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf78:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bf7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800bf7e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf82:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf84:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800bf88:	42b3      	cmp	r3, r6
 800bf8a:	dc0d      	bgt.n	800bfa8 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf8c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bf8e:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf90:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bf92:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	9a07      	ldr	r2, [sp, #28]
 800bf98:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bf9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf9c:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bfa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfa2:	6833      	ldr	r3, [r6, #0]
 800bfa4:	602b      	str	r3, [r5, #0]
 800bfa6:	e7c6      	b.n	800bf36 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800bfa8:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bfaa:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800bfae:	f859 7f04 	ldr.w	r7, [r9, #4]!
      block = MCU_data[blkn];
 800bfb2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800bfb6:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800bfb8:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800bfbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfc6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bfca:	dc0c      	bgt.n	800bfe6 <decode_mcu_DC_first+0xce>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4662      	mov	r2, ip
 800bfd0:	4671      	mov	r1, lr
 800bfd2:	a806      	add	r0, sp, #24
 800bfd4:	f7ff fed0 	bl	800bd78 <jpeg_fill_bit_buffer>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d0b8      	beq.n	800bf4e <decode_mcu_DC_first+0x36>
 800bfdc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bfe0:	f1bc 0f07 	cmp.w	ip, #7
 800bfe4:	dd3e      	ble.n	800c064 <decode_mcu_DC_first+0x14c>
 800bfe6:	f1ac 0308 	sub.w	r3, ip, #8
 800bfea:	fa4e f303 	asr.w	r3, lr, r3
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bff4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bff8:	2a00      	cmp	r2, #0
 800bffa:	d042      	beq.n	800c082 <decode_mcu_DC_first+0x16a>
 800bffc:	4443      	add	r3, r8
 800bffe:	ebac 0c02 	sub.w	ip, ip, r2
 800c002:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800c006:	f1b8 0f00 	cmp.w	r8, #0
 800c00a:	d01b      	beq.n	800c044 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c00c:	45e0      	cmp	r8, ip
 800c00e:	dd09      	ble.n	800c024 <decode_mcu_DC_first+0x10c>
 800c010:	4643      	mov	r3, r8
 800c012:	4662      	mov	r2, ip
 800c014:	4671      	mov	r1, lr
 800c016:	a806      	add	r0, sp, #24
 800c018:	f7ff feae 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d096      	beq.n	800bf4e <decode_mcu_DC_first+0x36>
 800c020:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800c024:	ebac 0c08 	sub.w	ip, ip, r8
 800c028:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800c02c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800c030:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800c034:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800c038:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800c03a:	4299      	cmp	r1, r3
 800c03c:	bfac      	ite	ge
 800c03e:	eba3 0802 	subge.w	r8, r3, r2
 800c042:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800c044:	ab10      	add	r3, sp, #64	; 0x40
      (*block)[0] = (JCOEF) (s << Al);
 800c046:	9a03      	ldr	r2, [sp, #12]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c048:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800c04a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c04e:	f857 3c10 	ldr.w	r3, [r7, #-16]
 800c052:	4443      	add	r3, r8
      (*block)[0] = (JCOEF) (s << Al);
 800c054:	fa03 f802 	lsl.w	r8, r3, r2
      state.last_dc_val[ci] = s;
 800c058:	f847 3c10 	str.w	r3, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c062:	e78f      	b.n	800bf84 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800c064:	2301      	movs	r3, #1
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	4662      	mov	r2, ip
 800c06a:	4643      	mov	r3, r8
 800c06c:	4671      	mov	r1, lr
 800c06e:	a806      	add	r0, sp, #24
 800c070:	f7ff fee0 	bl	800be34 <jpeg_huff_decode>
 800c074:	f1b0 0800 	subs.w	r8, r0, #0
 800c078:	f6ff af69 	blt.w	800bf4e <decode_mcu_DC_first+0x36>
 800c07c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c080:	e7c1      	b.n	800c006 <decode_mcu_DC_first+0xee>
 800c082:	2309      	movs	r3, #9
 800c084:	e7ef      	b.n	800c066 <decode_mcu_DC_first+0x14e>
 800c086:	bf00      	nop
 800c088:	0802d958 	.word	0x0802d958

0800c08c <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c08c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	4607      	mov	r7, r0
 800c096:	b08d      	sub	sp, #52	; 0x34
 800c098:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c09a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c09e:	b933      	cbnz	r3, 800c0ae <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c0a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c0a2:	b17b      	cbz	r3, 800c0c4 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c0a4:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c0a6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c0ac:	e007      	b.n	800c0be <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800c0ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1f5      	bne.n	800c0a0 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800c0b4:	f7ff ff0a 	bl	800becc <process_restart>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d1f1      	bne.n	800c0a0 <decode_mcu_AC_first+0x14>
	return FALSE;
 800c0bc:	2000      	movs	r0, #0
}
 800c0be:	b00d      	add	sp, #52	; 0x34
 800c0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800c0c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800c0c8:	692e      	ldr	r6, [r5, #16]
    Se = cinfo->Se;
 800c0ca:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800c0cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    natural_order = cinfo->natural_order;
 800c0d0:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Al = cinfo->Al;
 800c0d4:	9304      	str	r3, [sp, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800c0d6:	b116      	cbz	r6, 800c0de <decode_mcu_AC_first+0x52>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800c0d8:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800c0da:	612e      	str	r6, [r5, #16]
 800c0dc:	e7e2      	b.n	800c0a4 <decode_mcu_AC_first+0x18>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c0de:	69bb      	ldr	r3, [r7, #24]
      tbl = entropy->ac_derived_tbl;
 800c0e0:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	9207      	str	r2, [sp, #28]
 800c0ea:	9308      	str	r3, [sp, #32]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c0ec:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      block = MCU_data[0];
 800c0f0:	6823      	ldr	r3, [r4, #0]
	  r = GET_BITS(s);
 800c0f2:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800c1e8 <decode_mcu_AC_first+0x15c>
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c0f6:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800c0f8:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c0fa:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	4598      	cmp	r8, r3
 800c102:	dc69      	bgt.n	800c1d8 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800c104:	2a07      	cmp	r2, #7
 800c106:	dc09      	bgt.n	800c11c <decode_mcu_AC_first+0x90>
 800c108:	2300      	movs	r3, #0
 800c10a:	a807      	add	r0, sp, #28
 800c10c:	f7ff fe34 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c110:	2800      	cmp	r0, #0
 800c112:	d0d3      	beq.n	800c0bc <decode_mcu_AC_first+0x30>
 800c114:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800c118:	2a07      	cmp	r2, #7
 800c11a:	dd33      	ble.n	800c184 <decode_mcu_AC_first+0xf8>
 800c11c:	f1a2 0308 	sub.w	r3, r2, #8
 800c120:	fa41 f303 	asr.w	r3, r1, r3
 800c124:	b2db      	uxtb	r3, r3
 800c126:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c12a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c12e:	b3a0      	cbz	r0, 800c19a <decode_mcu_AC_first+0x10e>
 800c130:	444b      	add	r3, r9
 800c132:	1a12      	subs	r2, r2, r0
 800c134:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c138:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800c13c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c140:	d02d      	beq.n	800c19e <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c142:	42a2      	cmp	r2, r4
	  k += r;
 800c144:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c146:	da07      	bge.n	800c158 <decode_mcu_AC_first+0xcc>
 800c148:	4623      	mov	r3, r4
 800c14a:	a807      	add	r0, sp, #28
 800c14c:	f7ff fe14 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c150:	2800      	cmp	r0, #0
 800c152:	d0b3      	beq.n	800c0bc <decode_mcu_AC_first+0x30>
 800c154:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800c158:	1b12      	subs	r2, r2, r4
 800c15a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c15e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c160:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800c164:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c168:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800c16a:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800c16c:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800c16e:	bfa8      	it	ge
 800c170:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800c172:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800c176:	40a3      	lsls	r3, r4
 800c178:	9c05      	ldr	r4, [sp, #20]
 800c17a:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c17e:	f108 0801 	add.w	r8, r8, #1
 800c182:	e7bc      	b.n	800c0fe <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800c184:	2301      	movs	r3, #1
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	a807      	add	r0, sp, #28
 800c18a:	464b      	mov	r3, r9
 800c18c:	f7ff fe52 	bl	800be34 <jpeg_huff_decode>
 800c190:	2800      	cmp	r0, #0
 800c192:	db93      	blt.n	800c0bc <decode_mcu_AC_first+0x30>
 800c194:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800c198:	e7ce      	b.n	800c138 <decode_mcu_AC_first+0xac>
 800c19a:	2309      	movs	r3, #9
 800c19c:	e7f3      	b.n	800c186 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800c19e:	2b0f      	cmp	r3, #15
 800c1a0:	d102      	bne.n	800c1a8 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800c1a2:	f108 080f 	add.w	r8, r8, #15
 800c1a6:	e7ea      	b.n	800c17e <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800c1a8:	2601      	movs	r6, #1
 800c1aa:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800c1ac:	b19b      	cbz	r3, 800c1d6 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	da09      	bge.n	800c1c6 <decode_mcu_AC_first+0x13a>
 800c1b2:	a807      	add	r0, sp, #28
 800c1b4:	9303      	str	r3, [sp, #12]
 800c1b6:	f7ff fddf 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	f43f af7e 	beq.w	800c0bc <decode_mcu_AC_first+0x30>
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800c1c6:	1ad2      	subs	r2, r2, r3
 800c1c8:	4807      	ldr	r0, [pc, #28]	; (800c1e8 <decode_mcu_AC_first+0x15c>)
 800c1ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c1ce:	fa41 f302 	asr.w	r3, r1, r2
 800c1d2:	4003      	ands	r3, r0
	      EOBRUN += r;
 800c1d4:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800c1d6:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	9807      	ldr	r0, [sp, #28]
 800c1dc:	6018      	str	r0, [r3, #0]
 800c1de:	9808      	ldr	r0, [sp, #32]
 800c1e0:	6058      	str	r0, [r3, #4]
 800c1e2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800c1e6:	e778      	b.n	800c0da <decode_mcu_AC_first+0x4e>
 800c1e8:	0802d958 	.word	0x0802d958

0800c1ec <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800c1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c1f0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c1f4:	2701      	movs	r7, #1
{   
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c1fa:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c1fc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c200:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c202:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c206:	b9c3      	cbnz	r3, 800c23a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c208:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c20a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c20c:	9405      	str	r4, [sp, #20]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	9201      	str	r2, [sp, #4]
 800c214:	9302      	str	r3, [sp, #8]
 800c216:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c21a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c21e:	42b3      	cmp	r3, r6
 800c220:	dc16      	bgt.n	800c250 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c222:	69a3      	ldr	r3, [r4, #24]
 800c224:	9801      	ldr	r0, [sp, #4]
 800c226:	6018      	str	r0, [r3, #0]
 800c228:	9802      	ldr	r0, [sp, #8]
 800c22a:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800c22c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c22e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c230:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c232:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800c236:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c238:	e007      	b.n	800c24a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800c23a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e3      	bne.n	800c208 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800c240:	f7ff fe44 	bl	800becc <process_restart>
 800c244:	2800      	cmp	r0, #0
 800c246:	d1df      	bne.n	800c208 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800c248:	2000      	movs	r0, #0
}
 800c24a:	b007      	add	sp, #28
 800c24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c250:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800c252:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c256:	dc07      	bgt.n	800c268 <decode_mcu_DC_refine+0x7c>
 800c258:	2301      	movs	r3, #1
 800c25a:	a801      	add	r0, sp, #4
 800c25c:	f7ff fd8c 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c260:	2800      	cmp	r0, #0
 800c262:	d0f1      	beq.n	800c248 <decode_mcu_DC_refine+0x5c>
 800c264:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800c268:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c26a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800c26c:	fa41 f302 	asr.w	r3, r1, r2
 800c270:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800c272:	bf42      	ittt	mi
 800c274:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800c278:	433b      	orrmi	r3, r7
 800c27a:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c27e:	e7cc      	b.n	800c21a <decode_mcu_DC_refine+0x2e>

0800c280 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c280:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	4605      	mov	r5, r0
 800c28a:	b0d1      	sub	sp, #324	; 0x144
 800c28c:	460e      	mov	r6, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c28e:	f8d0 71d0 	ldr.w	r7, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c292:	b94b      	cbnz	r3, 800c2a8 <decode_mcu_AC_refine+0x28>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800c294:	f8d7 a024 	ldr.w	sl, [r7, #36]	; 0x24
 800c298:	f1ba 0f00 	cmp.w	sl, #0
 800c29c:	d00f      	beq.n	800c2be <decode_mcu_AC_refine+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28

  return TRUE;
 800c2a0:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return TRUE;
 800c2a6:	e007      	b.n	800c2b8 <decode_mcu_AC_refine+0x38>
    if (entropy->restarts_to_go == 0)
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1f2      	bne.n	800c294 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800c2ae:	f7ff fe0d 	bl	800becc <process_restart>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	d1ee      	bne.n	800c294 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800c2b6:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800c2b8:	b051      	add	sp, #324	; 0x144
 800c2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800c2be:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c2c2:	2201      	movs	r2, #1
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c2c4:	f8d7 b010 	ldr.w	fp, [r7, #16]
    Se = cinfo->Se;
 800c2c8:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c2ca:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
    block = MCU_data[0];
 800c2ce:	f8d6 8000 	ldr.w	r8, [r6]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c2d2:	409a      	lsls	r2, r3
    k = cinfo->Ss;
 800c2d4:	f8d5 6198 	ldr.w	r6, [r5, #408]	; 0x198
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c2d8:	950f      	str	r5, [sp, #60]	; 0x3c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c2da:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800c2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e4:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800c2e6:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
 800c2ea:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c2ec:	69ab      	ldr	r3, [r5, #24]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c2f4:	930c      	str	r3, [sp, #48]	; 0x30
    tbl = entropy->ac_derived_tbl;
 800c2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c2f8:	e9d7 4202 	ldrd	r4, r2, [r7, #8]
    tbl = entropy->ac_derived_tbl;
 800c2fc:	9309      	str	r3, [sp, #36]	; 0x24
    if (EOBRUN == 0) {
 800c2fe:	f1bb 0f00 	cmp.w	fp, #0
 800c302:	f000 80c3 	beq.w	800c48c <decode_mcu_AC_refine+0x20c>
      for (; k <= Se; k++) {
 800c306:	9b06      	ldr	r3, [sp, #24]
 800c308:	429e      	cmp	r6, r3
 800c30a:	f340 80cd 	ble.w	800c4a8 <decode_mcu_AC_refine+0x228>
      EOBRUN--;
 800c30e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c312:	e0bf      	b.n	800c494 <decode_mcu_AC_refine+0x214>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c314:	2a07      	cmp	r2, #7
 800c316:	dc0a      	bgt.n	800c32e <decode_mcu_AC_refine+0xae>
 800c318:	2300      	movs	r3, #0
 800c31a:	4621      	mov	r1, r4
 800c31c:	a80b      	add	r0, sp, #44	; 0x2c
 800c31e:	f7ff fd2b 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c322:	2800      	cmp	r0, #0
 800c324:	d06e      	beq.n	800c404 <decode_mcu_AC_refine+0x184>
 800c326:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
 800c32a:	2a07      	cmp	r2, #7
 800c32c:	dd61      	ble.n	800c3f2 <decode_mcu_AC_refine+0x172>
 800c32e:	f1a2 0308 	sub.w	r3, r2, #8
 800c332:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c334:	fa44 f303 	asr.w	r3, r4, r3
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c33e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800c342:	2900      	cmp	r1, #0
 800c344:	d06b      	beq.n	800c41e <decode_mcu_AC_refine+0x19e>
 800c346:	4403      	add	r3, r0
 800c348:	1a52      	subs	r2, r2, r1
 800c34a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c34e:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800c352:	ea4f 1920 	mov.w	r9, r0, asr #4
	if (s) {
 800c356:	9304      	str	r3, [sp, #16]
 800c358:	d066      	beq.n	800c428 <decode_mcu_AC_refine+0x1a8>
	  if (s != 1)		/* size of new coef should always be 1 */
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d009      	beq.n	800c372 <decode_mcu_AC_refine+0xf2>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800c35e:	682b      	ldr	r3, [r5, #0]
 800c360:	2179      	movs	r1, #121	; 0x79
 800c362:	4628      	mov	r0, r5
 800c364:	9204      	str	r2, [sp, #16]
 800c366:	6159      	str	r1, [r3, #20]
 800c368:	f04f 31ff 	mov.w	r1, #4294967295
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	4798      	blx	r3
 800c370:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c372:	2a00      	cmp	r2, #0
 800c374:	dc08      	bgt.n	800c388 <decode_mcu_AC_refine+0x108>
 800c376:	2301      	movs	r3, #1
 800c378:	4621      	mov	r1, r4
 800c37a:	a80b      	add	r0, sp, #44	; 0x2c
 800c37c:	f7ff fcfc 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c380:	2800      	cmp	r0, #0
 800c382:	d03f      	beq.n	800c404 <decode_mcu_AC_refine+0x184>
 800c384:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1))
 800c388:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800c38a:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800c38c:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800c390:	f013 0f01 	tst.w	r3, #1
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	bf08      	it	eq
 800c398:	460b      	moveq	r3, r1
 800c39a:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800c39c:	9b08      	ldr	r3, [sp, #32]
 800c39e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800c3a2:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800c3a4:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d05e      	beq.n	800c46a <decode_mcu_AC_refine+0x1ea>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	dc07      	bgt.n	800c3c0 <decode_mcu_AC_refine+0x140>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	a80b      	add	r0, sp, #44	; 0x2c
 800c3b6:	f7ff fcdf 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c3ba:	b318      	cbz	r0, 800c404 <decode_mcu_AC_refine+0x184>
 800c3bc:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	    if (GET_BITS(1)) {
 800c3c0:	3a01      	subs	r2, #1
 800c3c2:	fa44 f302 	asr.w	r3, r4, r2
 800c3c6:	07d9      	lsls	r1, r3, #31
 800c3c8:	d50e      	bpl.n	800c3e8 <decode_mcu_AC_refine+0x168>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800c3ca:	9b05      	ldr	r3, [sp, #20]
 800c3cc:	f938 1013 	ldrsh.w	r1, [r8, r3, lsl #1]
 800c3d0:	9b03      	ldr	r3, [sp, #12]
 800c3d2:	4219      	tst	r1, r3
 800c3d4:	d108      	bne.n	800c3e8 <decode_mcu_AC_refine+0x168>
		if (*thiscoef >= 0)
 800c3d6:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800c3d8:	b28b      	uxth	r3, r1
 800c3da:	bfac      	ite	ge
 800c3dc:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800c3de:	9907      	ldrlt	r1, [sp, #28]
 800c3e0:	440b      	add	r3, r1
 800c3e2:	9905      	ldr	r1, [sp, #20]
 800c3e4:	f828 3011 	strh.w	r3, [r8, r1, lsl #1]
	  k++;
 800c3e8:	3601      	adds	r6, #1
	} while (k <= Se);
 800c3ea:	9b06      	ldr	r3, [sp, #24]
 800c3ec:	42b3      	cmp	r3, r6
 800c3ee:	dad5      	bge.n	800c39c <decode_mcu_AC_refine+0x11c>
 800c3f0:	e03e      	b.n	800c470 <decode_mcu_AC_refine+0x1f0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fa:	a80b      	add	r0, sp, #44	; 0x2c
 800c3fc:	f7ff fd1a 	bl	800be34 <jpeg_huff_decode>
 800c400:	2800      	cmp	r0, #0
 800c402:	da0e      	bge.n	800c422 <decode_mcu_AC_refine+0x1a2>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c404:	ab10      	add	r3, sp, #64	; 0x40
 800c406:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800c408:	f1ba 0f00 	cmp.w	sl, #0
 800c40c:	f43f af53 	beq.w	800c2b6 <decode_mcu_AC_refine+0x36>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c410:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c414:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c418:	f828 2011 	strh.w	r2, [r8, r1, lsl #1]
 800c41c:	e7f4      	b.n	800c408 <decode_mcu_AC_refine+0x188>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c41e:	2309      	movs	r3, #9
 800c420:	e7e8      	b.n	800c3f4 <decode_mcu_AC_refine+0x174>
 800c422:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
 800c426:	e792      	b.n	800c34e <decode_mcu_AC_refine+0xce>
	  if (r != 15) {
 800c428:	f1b9 0f0f 	cmp.w	r9, #15
 800c42c:	d0b6      	beq.n	800c39c <decode_mcu_AC_refine+0x11c>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800c42e:	2301      	movs	r3, #1
 800c430:	fa03 fb09 	lsl.w	fp, r3, r9
	    if (r) {
 800c434:	f1b9 0f00 	cmp.w	r9, #0
 800c438:	d013      	beq.n	800c462 <decode_mcu_AC_refine+0x1e2>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800c43a:	454a      	cmp	r2, r9
 800c43c:	da08      	bge.n	800c450 <decode_mcu_AC_refine+0x1d0>
 800c43e:	464b      	mov	r3, r9
 800c440:	4621      	mov	r1, r4
 800c442:	a80b      	add	r0, sp, #44	; 0x2c
 800c444:	f7ff fc98 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d0db      	beq.n	800c404 <decode_mcu_AC_refine+0x184>
 800c44c:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800c450:	4b28      	ldr	r3, [pc, #160]	; (800c4f4 <decode_mcu_AC_refine+0x274>)
 800c452:	eba2 0209 	sub.w	r2, r2, r9
 800c456:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 800c45a:	fa44 f302 	asr.w	r3, r4, r2
 800c45e:	400b      	ands	r3, r1
	      EOBRUN += r;
 800c460:	449b      	add	fp, r3
    if (EOBRUN > 0) {
 800c462:	f1bb 0f00 	cmp.w	fp, #0
 800c466:	d015      	beq.n	800c494 <decode_mcu_AC_refine+0x214>
 800c468:	e74d      	b.n	800c306 <decode_mcu_AC_refine+0x86>
	    if (--r < 0)
 800c46a:	f1b9 0901 	subs.w	r9, r9, #1
 800c46e:	d2bb      	bcs.n	800c3e8 <decode_mcu_AC_refine+0x168>
	if (s) {
 800c470:	9b04      	ldr	r3, [sp, #16]
 800c472:	b153      	cbz	r3, 800c48a <decode_mcu_AC_refine+0x20a>
	  int pos = natural_order[k];
 800c474:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800c476:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800c478:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800c47c:	f828 1013 	strh.w	r1, [r8, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800c480:	a910      	add	r1, sp, #64	; 0x40
 800c482:	f841 302a 	str.w	r3, [r1, sl, lsl #2]
 800c486:	f10a 0a01 	add.w	sl, sl, #1
      for (; k <= Se; k++) {
 800c48a:	3601      	adds	r6, #1
 800c48c:	9b06      	ldr	r3, [sp, #24]
 800c48e:	429e      	cmp	r6, r3
 800c490:	f77f af40 	ble.w	800c314 <decode_mcu_AC_refine+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c494:	69ab      	ldr	r3, [r5, #24]
 800c496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c498:	6019      	str	r1, [r3, #0]
 800c49a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c49c:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c49e:	f8c7 b010 	str.w	fp, [r7, #16]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c4a2:	e9c7 4202 	strd	r4, r2, [r7, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c4a6:	e6fa      	b.n	800c29e <decode_mcu_AC_refine+0x1e>
	thiscoef = *block + natural_order[k];
 800c4a8:	9b08      	ldr	r3, [sp, #32]
 800c4aa:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
	if (*thiscoef != 0) {
 800c4ae:	f938 3019 	ldrsh.w	r3, [r8, r9, lsl #1]
 800c4b2:	b1e3      	cbz	r3, 800c4ee <decode_mcu_AC_refine+0x26e>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c4b4:	2a00      	cmp	r2, #0
 800c4b6:	dc08      	bgt.n	800c4ca <decode_mcu_AC_refine+0x24a>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	a80b      	add	r0, sp, #44	; 0x2c
 800c4be:	f7ff fc5b 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	d09e      	beq.n	800c404 <decode_mcu_AC_refine+0x184>
 800c4c6:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800c4ca:	3a01      	subs	r2, #1
 800c4cc:	fa44 f302 	asr.w	r3, r4, r2
 800c4d0:	07db      	lsls	r3, r3, #31
 800c4d2:	d50c      	bpl.n	800c4ee <decode_mcu_AC_refine+0x26e>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800c4d4:	f938 1019 	ldrsh.w	r1, [r8, r9, lsl #1]
 800c4d8:	9b03      	ldr	r3, [sp, #12]
 800c4da:	4219      	tst	r1, r3
 800c4dc:	d107      	bne.n	800c4ee <decode_mcu_AC_refine+0x26e>
	      if (*thiscoef >= 0)
 800c4de:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800c4e0:	b28b      	uxth	r3, r1
 800c4e2:	bfac      	ite	ge
 800c4e4:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800c4e6:	9907      	ldrlt	r1, [sp, #28]
 800c4e8:	440b      	add	r3, r1
 800c4ea:	f828 3019 	strh.w	r3, [r8, r9, lsl #1]
      for (; k <= Se; k++) {
 800c4ee:	3601      	adds	r6, #1
 800c4f0:	e709      	b.n	800c306 <decode_mcu_AC_refine+0x86>
 800c4f2:	bf00      	nop
 800c4f4:	0802d958 	.word	0x0802d958

0800c4f8 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c4fc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c500:	b093      	sub	sp, #76	; 0x4c
 800c502:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c504:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c508:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800c50a:	b933      	cbnz	r3, 800c51a <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c50c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c50e:	b17f      	cbz	r7, 800c530 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c510:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c512:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c514:	3b01      	subs	r3, #1
 800c516:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c518:	e007      	b.n	800c52a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800c51a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f5      	bne.n	800c50c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800c520:	f7ff fcd4 	bl	800becc <process_restart>
 800c524:	2800      	cmp	r0, #0
 800c526:	d1f1      	bne.n	800c50c <decode_mcu_sub+0x14>
	return FALSE;
 800c528:	2000      	movs	r0, #0
}
 800c52a:	b013      	add	sp, #76	; 0x4c
 800c52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800c530:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800c534:	f105 0810 	add.w	r8, r5, #16
 800c538:	ac0d      	add	r4, sp, #52	; 0x34
 800c53a:	f105 095c 	add.w	r9, r5, #92	; 0x5c
    natural_order = cinfo->natural_order;
 800c53e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800c540:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800c544:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800c7e4 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800c548:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c54a:	69b3      	ldr	r3, [r6, #24]
 800c54c:	960c      	str	r6, [sp, #48]	; 0x30
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	9208      	str	r2, [sp, #32]
 800c554:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800c556:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c55a:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c55e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c560:	f8d8 3000 	ldr.w	r3, [r8]
 800c564:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c566:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c56a:	42bb      	cmp	r3, r7
 800c56c:	dc0e      	bgt.n	800c58c <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c56e:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c570:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c572:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800c574:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c57c:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c57e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c580:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c586:	6833      	ldr	r3, [r6, #0]
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	e7c1      	b.n	800c510 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c58c:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c58e:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c592:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800c596:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c59a:	dc0c      	bgt.n	800c5b6 <decode_mcu_sub+0xbe>
 800c59c:	2300      	movs	r3, #0
 800c59e:	4662      	mov	r2, ip
 800c5a0:	4671      	mov	r1, lr
 800c5a2:	a808      	add	r0, sp, #32
 800c5a4:	f7ff fbe8 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d0bd      	beq.n	800c528 <decode_mcu_sub+0x30>
 800c5ac:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c5b0:	f1bc 0f07 	cmp.w	ip, #7
 800c5b4:	dd4a      	ble.n	800c64c <decode_mcu_sub+0x154>
 800c5b6:	f1ac 0308 	sub.w	r3, ip, #8
 800c5ba:	fa4e f303 	asr.w	r3, lr, r3
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c5c4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	d04d      	beq.n	800c668 <decode_mcu_sub+0x170>
 800c5cc:	4423      	add	r3, r4
 800c5ce:	ebac 0c02 	sub.w	ip, ip, r2
 800c5d2:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c5d6:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800c5da:	f8d9 8028 	ldr.w	r8, [r9, #40]	; 0x28
      coef_limit = entropy->coef_limit[blkn];
 800c5de:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 80a0 	beq.w	800c726 <decode_mcu_sub+0x22e>
	if (s) {
 800c5e6:	b1cc      	cbz	r4, 800c61c <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c5e8:	45a4      	cmp	ip, r4
 800c5ea:	da09      	bge.n	800c600 <decode_mcu_sub+0x108>
 800c5ec:	4623      	mov	r3, r4
 800c5ee:	4662      	mov	r2, ip
 800c5f0:	4671      	mov	r1, lr
 800c5f2:	a808      	add	r0, sp, #32
 800c5f4:	f7ff fbc0 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d095      	beq.n	800c528 <decode_mcu_sub+0x30>
 800c5fc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800c600:	ebac 0c04 	sub.w	ip, ip, r4
 800c604:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c608:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c60a:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c60e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c612:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c614:	4299      	cmp	r1, r3
 800c616:	bfac      	ite	ge
 800c618:	1a9c      	subge	r4, r3, r2
 800c61a:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c61c:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c620:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c624:	ab12      	add	r3, sp, #72	; 0x48
 800c626:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c62a:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c62e:	4423      	add	r3, r4
      k = 1;
 800c630:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800c632:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c636:	f8ab 3000 	strh.w	r3, [fp]
	for (; k < coef_limit; k++) {
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	429c      	cmp	r4, r3
 800c63e:	db15      	blt.n	800c66c <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800c640:	9b05      	ldr	r3, [sp, #20]
 800c642:	429c      	cmp	r4, r3
 800c644:	f340 8081 	ble.w	800c74a <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c648:	3701      	adds	r7, #1
 800c64a:	e78c      	b.n	800c566 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c64c:	2301      	movs	r3, #1
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	4662      	mov	r2, ip
 800c652:	4623      	mov	r3, r4
 800c654:	4671      	mov	r1, lr
 800c656:	a808      	add	r0, sp, #32
 800c658:	f7ff fbec 	bl	800be34 <jpeg_huff_decode>
 800c65c:	1e04      	subs	r4, r0, #0
 800c65e:	f6ff af63 	blt.w	800c528 <decode_mcu_sub+0x30>
 800c662:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c666:	e7b6      	b.n	800c5d6 <decode_mcu_sub+0xde>
 800c668:	2309      	movs	r3, #9
 800c66a:	e7f0      	b.n	800c64e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c66c:	f1bc 0f07 	cmp.w	ip, #7
 800c670:	dc0d      	bgt.n	800c68e <decode_mcu_sub+0x196>
 800c672:	2300      	movs	r3, #0
 800c674:	4662      	mov	r2, ip
 800c676:	4671      	mov	r1, lr
 800c678:	a808      	add	r0, sp, #32
 800c67a:	f7ff fb7d 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f43f af52 	beq.w	800c528 <decode_mcu_sub+0x30>
 800c684:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c688:	f1bc 0f07 	cmp.w	ip, #7
 800c68c:	dd37      	ble.n	800c6fe <decode_mcu_sub+0x206>
 800c68e:	f1ac 0308 	sub.w	r3, ip, #8
 800c692:	fa4e f303 	asr.w	r3, lr, r3
 800c696:	b2db      	uxtb	r3, r3
 800c698:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c69c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	d03a      	beq.n	800c71a <decode_mcu_sub+0x222>
 800c6a4:	4443      	add	r3, r8
 800c6a6:	ebac 0c02 	sub.w	ip, ip, r2
 800c6aa:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c6ae:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c6b2:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c6b6:	d032      	beq.n	800c71e <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c6b8:	459c      	cmp	ip, r3
	    k += r;
 800c6ba:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c6bc:	da0b      	bge.n	800c6d6 <decode_mcu_sub+0x1de>
 800c6be:	4662      	mov	r2, ip
 800c6c0:	4671      	mov	r1, lr
 800c6c2:	a808      	add	r0, sp, #32
 800c6c4:	9307      	str	r3, [sp, #28]
 800c6c6:	f7ff fb57 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	f43f af2c 	beq.w	800c528 <decode_mcu_sub+0x30>
 800c6d0:	9b07      	ldr	r3, [sp, #28]
 800c6d2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800c6d6:	ebac 0c03 	sub.w	ip, ip, r3
 800c6da:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c6de:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c6e0:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c6e4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c6e8:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c6ea:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c6ec:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800c6ee:	bfa8      	it	ge
 800c6f0:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c6f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c6f6:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c6fa:	3401      	adds	r4, #1
 800c6fc:	e79d      	b.n	800c63a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c6fe:	2301      	movs	r3, #1
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	4662      	mov	r2, ip
 800c704:	4643      	mov	r3, r8
 800c706:	4671      	mov	r1, lr
 800c708:	a808      	add	r0, sp, #32
 800c70a:	f7ff fb93 	bl	800be34 <jpeg_huff_decode>
 800c70e:	2800      	cmp	r0, #0
 800c710:	f6ff af0a 	blt.w	800c528 <decode_mcu_sub+0x30>
 800c714:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c718:	e7c9      	b.n	800c6ae <decode_mcu_sub+0x1b6>
 800c71a:	2309      	movs	r3, #9
 800c71c:	e7f0      	b.n	800c700 <decode_mcu_sub+0x208>
	    if (r != 15)
 800c71e:	2a0f      	cmp	r2, #15
 800c720:	d192      	bne.n	800c648 <decode_mcu_sub+0x150>
	    k += 15;
 800c722:	340f      	adds	r4, #15
 800c724:	e7e9      	b.n	800c6fa <decode_mcu_sub+0x202>
	if (s) {
 800c726:	b174      	cbz	r4, 800c746 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c728:	45a4      	cmp	ip, r4
 800c72a:	da0a      	bge.n	800c742 <decode_mcu_sub+0x24a>
 800c72c:	4623      	mov	r3, r4
 800c72e:	4662      	mov	r2, ip
 800c730:	4671      	mov	r1, lr
 800c732:	a808      	add	r0, sp, #32
 800c734:	f7ff fb20 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c738:	2800      	cmp	r0, #0
 800c73a:	f43f aef5 	beq.w	800c528 <decode_mcu_sub+0x30>
 800c73e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c742:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c746:	2401      	movs	r4, #1
 800c748:	e77a      	b.n	800c640 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c74a:	f1bc 0f07 	cmp.w	ip, #7
 800c74e:	dc0d      	bgt.n	800c76c <decode_mcu_sub+0x274>
 800c750:	2300      	movs	r3, #0
 800c752:	4662      	mov	r2, ip
 800c754:	4671      	mov	r1, lr
 800c756:	a808      	add	r0, sp, #32
 800c758:	f7ff fb0e 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	f43f aee3 	beq.w	800c528 <decode_mcu_sub+0x30>
 800c762:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c766:	f1bc 0f07 	cmp.w	ip, #7
 800c76a:	dd25      	ble.n	800c7b8 <decode_mcu_sub+0x2c0>
 800c76c:	f1ac 0308 	sub.w	r3, ip, #8
 800c770:	fa4e f303 	asr.w	r3, lr, r3
 800c774:	b2db      	uxtb	r3, r3
 800c776:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c77a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c77e:	b34a      	cbz	r2, 800c7d4 <decode_mcu_sub+0x2dc>
 800c780:	4443      	add	r3, r8
 800c782:	ebac 0c02 	sub.w	ip, ip, r2
 800c786:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c78a:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c78e:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c792:	d021      	beq.n	800c7d8 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c794:	45dc      	cmp	ip, fp
	  k += r;
 800c796:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c798:	da0a      	bge.n	800c7b0 <decode_mcu_sub+0x2b8>
 800c79a:	465b      	mov	r3, fp
 800c79c:	4662      	mov	r2, ip
 800c79e:	4671      	mov	r1, lr
 800c7a0:	a808      	add	r0, sp, #32
 800c7a2:	f7ff fae9 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f43f aebe 	beq.w	800c528 <decode_mcu_sub+0x30>
 800c7ac:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c7b0:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800c7b4:	3401      	adds	r4, #1
 800c7b6:	e743      	b.n	800c640 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	4662      	mov	r2, ip
 800c7be:	4643      	mov	r3, r8
 800c7c0:	4671      	mov	r1, lr
 800c7c2:	a808      	add	r0, sp, #32
 800c7c4:	f7ff fb36 	bl	800be34 <jpeg_huff_decode>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	f6ff aead 	blt.w	800c528 <decode_mcu_sub+0x30>
 800c7ce:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c7d2:	e7da      	b.n	800c78a <decode_mcu_sub+0x292>
 800c7d4:	2309      	movs	r3, #9
 800c7d6:	e7f0      	b.n	800c7ba <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800c7d8:	2b0f      	cmp	r3, #15
 800c7da:	f47f af35 	bne.w	800c648 <decode_mcu_sub+0x150>
	  k += 15;
 800c7de:	340f      	adds	r4, #15
 800c7e0:	e7e8      	b.n	800c7b4 <decode_mcu_sub+0x2bc>
 800c7e2:	bf00      	nop
 800c7e4:	0802d958 	.word	0x0802d958

0800c7e8 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c7ec:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c7f0:	b091      	sub	sp, #68	; 0x44
 800c7f2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c7f4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c7f8:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800c7fa:	b933      	cbnz	r3, 800c80a <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c7fc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c7fe:	b17f      	cbz	r7, 800c820 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c800:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c802:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c804:	3b01      	subs	r3, #1
 800c806:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c808:	e007      	b.n	800c81a <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800c80a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1f5      	bne.n	800c7fc <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800c810:	f7ff fb5c 	bl	800becc <process_restart>
 800c814:	2800      	cmp	r0, #0
 800c816:	d1f1      	bne.n	800c7fc <decode_mcu+0x14>
	return FALSE;
 800c818:	2000      	movs	r0, #0
}
 800c81a:	b011      	add	sp, #68	; 0x44
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c820:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c822:	f105 0810 	add.w	r8, r5, #16
 800c826:	ac0b      	add	r4, sp, #44	; 0x2c
 800c828:	f105 095c 	add.w	r9, r5, #92	; 0x5c
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	9206      	str	r2, [sp, #24]
 800c832:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800c834:	f8df a290 	ldr.w	sl, [pc, #656]	; 800cac8 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c838:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c83a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c83e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c844:	f8d8 3000 	ldr.w	r3, [r8]
 800c848:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c84a:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c84e:	42bb      	cmp	r3, r7
 800c850:	dc0e      	bgt.n	800c870 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c852:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c854:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c856:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c858:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	9a07      	ldr	r2, [sp, #28]
 800c860:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c862:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c864:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c86a:	6833      	ldr	r3, [r6, #0]
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	e7c7      	b.n	800c800 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c870:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c872:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c876:	f859 4f04 	ldr.w	r4, [r9, #4]!
      JBLOCKROW block = MCU_data[blkn];
 800c87a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c87e:	dc0c      	bgt.n	800c89a <decode_mcu+0xb2>
 800c880:	2300      	movs	r3, #0
 800c882:	4662      	mov	r2, ip
 800c884:	4671      	mov	r1, lr
 800c886:	a806      	add	r0, sp, #24
 800c888:	f7ff fa76 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0c3      	beq.n	800c818 <decode_mcu+0x30>
 800c890:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c894:	f1bc 0f07 	cmp.w	ip, #7
 800c898:	dd49      	ble.n	800c92e <decode_mcu+0x146>
 800c89a:	f1ac 0308 	sub.w	r3, ip, #8
 800c89e:	fa4e f303 	asr.w	r3, lr, r3
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c8a8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8ac:	2a00      	cmp	r2, #0
 800c8ae:	d04c      	beq.n	800c94a <decode_mcu+0x162>
 800c8b0:	4423      	add	r3, r4
 800c8b2:	ebac 0c02 	sub.w	ip, ip, r2
 800c8b6:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c8ba:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
      htbl = entropy->ac_cur_tbls[blkn];
 800c8be:	f8d9 8028 	ldr.w	r8, [r9, #40]	; 0x28
      coef_limit = entropy->coef_limit[blkn];
 800c8c2:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 809f 	beq.w	800ca08 <decode_mcu+0x220>
	if (s) {
 800c8ca:	b1cc      	cbz	r4, 800c900 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c8cc:	45a4      	cmp	ip, r4
 800c8ce:	da09      	bge.n	800c8e4 <decode_mcu+0xfc>
 800c8d0:	4623      	mov	r3, r4
 800c8d2:	4662      	mov	r2, ip
 800c8d4:	4671      	mov	r1, lr
 800c8d6:	a806      	add	r0, sp, #24
 800c8d8:	f7ff fa4e 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d09b      	beq.n	800c818 <decode_mcu+0x30>
 800c8e0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800c8e4:	ebac 0c04 	sub.w	ip, ip, r4
 800c8e8:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c8ec:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c8ee:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c8f2:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c8f6:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c8f8:	4299      	cmp	r1, r3
 800c8fa:	bfac      	ite	ge
 800c8fc:	1a9c      	subge	r4, r3, r2
 800c8fe:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c900:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c904:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c908:	ab10      	add	r3, sp, #64	; 0x40
 800c90a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c90e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c912:	4423      	add	r3, r4
      k = 1;
 800c914:	2401      	movs	r4, #1
	state.last_dc_val[ci] = s;
 800c916:	f842 3c10 	str.w	r3, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c91a:	f8ab 3000 	strh.w	r3, [fp]
	for (; k < coef_limit; k++) {
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	429c      	cmp	r4, r3
 800c922:	db14      	blt.n	800c94e <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800c924:	2c3f      	cmp	r4, #63	; 0x3f
 800c926:	f340 8081 	ble.w	800ca2c <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c92a:	3701      	adds	r7, #1
 800c92c:	e78d      	b.n	800c84a <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c92e:	2301      	movs	r3, #1
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	4662      	mov	r2, ip
 800c934:	4623      	mov	r3, r4
 800c936:	4671      	mov	r1, lr
 800c938:	a806      	add	r0, sp, #24
 800c93a:	f7ff fa7b 	bl	800be34 <jpeg_huff_decode>
 800c93e:	1e04      	subs	r4, r0, #0
 800c940:	f6ff af6a 	blt.w	800c818 <decode_mcu+0x30>
 800c944:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c948:	e7b7      	b.n	800c8ba <decode_mcu+0xd2>
 800c94a:	2309      	movs	r3, #9
 800c94c:	e7f0      	b.n	800c930 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c94e:	f1bc 0f07 	cmp.w	ip, #7
 800c952:	dc0d      	bgt.n	800c970 <decode_mcu+0x188>
 800c954:	2300      	movs	r3, #0
 800c956:	4662      	mov	r2, ip
 800c958:	4671      	mov	r1, lr
 800c95a:	a806      	add	r0, sp, #24
 800c95c:	f7ff fa0c 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c960:	2800      	cmp	r0, #0
 800c962:	f43f af59 	beq.w	800c818 <decode_mcu+0x30>
 800c966:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c96a:	f1bc 0f07 	cmp.w	ip, #7
 800c96e:	dd37      	ble.n	800c9e0 <decode_mcu+0x1f8>
 800c970:	f1ac 0308 	sub.w	r3, ip, #8
 800c974:	fa4e f303 	asr.w	r3, lr, r3
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c97e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c982:	2a00      	cmp	r2, #0
 800c984:	d03a      	beq.n	800c9fc <decode_mcu+0x214>
 800c986:	4443      	add	r3, r8
 800c988:	ebac 0c02 	sub.w	ip, ip, r2
 800c98c:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c990:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c994:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c998:	d032      	beq.n	800ca00 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c99a:	459c      	cmp	ip, r3
	    k += r;
 800c99c:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c99e:	da0b      	bge.n	800c9b8 <decode_mcu+0x1d0>
 800c9a0:	4662      	mov	r2, ip
 800c9a2:	4671      	mov	r1, lr
 800c9a4:	a806      	add	r0, sp, #24
 800c9a6:	9305      	str	r3, [sp, #20]
 800c9a8:	f7ff f9e6 	bl	800bd78 <jpeg_fill_bit_buffer>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	f43f af33 	beq.w	800c818 <decode_mcu+0x30>
 800c9b2:	9b05      	ldr	r3, [sp, #20]
 800c9b4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800c9b8:	ebac 0c03 	sub.w	ip, ip, r3
 800c9bc:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c9c0:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c9c2:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c9c6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c9ca:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c9cc:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c9ce:	4b3d      	ldr	r3, [pc, #244]	; (800cac4 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800c9d0:	bfa8      	it	ge
 800c9d2:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c9d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c9d8:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c9dc:	3401      	adds	r4, #1
 800c9de:	e79e      	b.n	800c91e <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	4662      	mov	r2, ip
 800c9e6:	4643      	mov	r3, r8
 800c9e8:	4671      	mov	r1, lr
 800c9ea:	a806      	add	r0, sp, #24
 800c9ec:	f7ff fa22 	bl	800be34 <jpeg_huff_decode>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	f6ff af11 	blt.w	800c818 <decode_mcu+0x30>
 800c9f6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c9fa:	e7c9      	b.n	800c990 <decode_mcu+0x1a8>
 800c9fc:	2309      	movs	r3, #9
 800c9fe:	e7f0      	b.n	800c9e2 <decode_mcu+0x1fa>
	    if (r != 15)
 800ca00:	2a0f      	cmp	r2, #15
 800ca02:	d192      	bne.n	800c92a <decode_mcu+0x142>
	    k += 15;
 800ca04:	340f      	adds	r4, #15
 800ca06:	e7e9      	b.n	800c9dc <decode_mcu+0x1f4>
	if (s) {
 800ca08:	b174      	cbz	r4, 800ca28 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ca0a:	45a4      	cmp	ip, r4
 800ca0c:	da0a      	bge.n	800ca24 <decode_mcu+0x23c>
 800ca0e:	4623      	mov	r3, r4
 800ca10:	4662      	mov	r2, ip
 800ca12:	4671      	mov	r1, lr
 800ca14:	a806      	add	r0, sp, #24
 800ca16:	f7ff f9af 	bl	800bd78 <jpeg_fill_bit_buffer>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	f43f aefc 	beq.w	800c818 <decode_mcu+0x30>
 800ca20:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800ca24:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800ca28:	2401      	movs	r4, #1
 800ca2a:	e77b      	b.n	800c924 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800ca2c:	f1bc 0f07 	cmp.w	ip, #7
 800ca30:	dc0d      	bgt.n	800ca4e <decode_mcu+0x266>
 800ca32:	2300      	movs	r3, #0
 800ca34:	4662      	mov	r2, ip
 800ca36:	4671      	mov	r1, lr
 800ca38:	a806      	add	r0, sp, #24
 800ca3a:	f7ff f99d 	bl	800bd78 <jpeg_fill_bit_buffer>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f43f aeea 	beq.w	800c818 <decode_mcu+0x30>
 800ca44:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800ca48:	f1bc 0f07 	cmp.w	ip, #7
 800ca4c:	dd25      	ble.n	800ca9a <decode_mcu+0x2b2>
 800ca4e:	f1ac 0308 	sub.w	r3, ip, #8
 800ca52:	fa4e f303 	asr.w	r3, lr, r3
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ca5c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ca60:	b34a      	cbz	r2, 800cab6 <decode_mcu+0x2ce>
 800ca62:	4443      	add	r3, r8
 800ca64:	ebac 0c02 	sub.w	ip, ip, r2
 800ca68:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800ca6c:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800ca70:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800ca74:	d021      	beq.n	800caba <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ca76:	45dc      	cmp	ip, fp
	  k += r;
 800ca78:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ca7a:	da0a      	bge.n	800ca92 <decode_mcu+0x2aa>
 800ca7c:	465b      	mov	r3, fp
 800ca7e:	4662      	mov	r2, ip
 800ca80:	4671      	mov	r1, lr
 800ca82:	a806      	add	r0, sp, #24
 800ca84:	f7ff f978 	bl	800bd78 <jpeg_fill_bit_buffer>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	f43f aec5 	beq.w	800c818 <decode_mcu+0x30>
 800ca8e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800ca92:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800ca96:	3401      	adds	r4, #1
 800ca98:	e744      	b.n	800c924 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	4662      	mov	r2, ip
 800caa0:	4643      	mov	r3, r8
 800caa2:	4671      	mov	r1, lr
 800caa4:	a806      	add	r0, sp, #24
 800caa6:	f7ff f9c5 	bl	800be34 <jpeg_huff_decode>
 800caaa:	2800      	cmp	r0, #0
 800caac:	f6ff aeb4 	blt.w	800c818 <decode_mcu+0x30>
 800cab0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cab4:	e7da      	b.n	800ca6c <decode_mcu+0x284>
 800cab6:	2309      	movs	r3, #9
 800cab8:	e7f0      	b.n	800ca9c <decode_mcu+0x2b4>
	  if (r != 15)
 800caba:	2b0f      	cmp	r3, #15
 800cabc:	f47f af35 	bne.w	800c92a <decode_mcu+0x142>
	  k += 15;
 800cac0:	340f      	adds	r4, #15
 800cac2:	e7e8      	b.n	800ca96 <decode_mcu+0x2ae>
 800cac4:	0802f230 	.word	0x0802f230
 800cac8:	0802d958 	.word	0x0802d958

0800cacc <jpeg_make_d_derived_tbl>:
{
 800cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800cad0:	2a03      	cmp	r2, #3
{
 800cad2:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800cad6:	4604      	mov	r4, r0
 800cad8:	4616      	mov	r6, r2
 800cada:	461f      	mov	r7, r3
 800cadc:	9102      	str	r1, [sp, #8]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800cade:	d905      	bls.n	800caec <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800cae0:	6803      	ldr	r3, [r0, #0]
 800cae2:	2234      	movs	r2, #52	; 0x34
 800cae4:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d044      	beq.n	800cb7c <jpeg_make_d_derived_tbl+0xb0>
 800caf2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800caf6:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800cafa:	b935      	cbnz	r5, 800cb0a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	2234      	movs	r2, #52	; 0x34
 800cb00:	4620      	mov	r0, r4
 800cb02:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4798      	blx	r3
  if (*pdtbl == NULL)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	b93b      	cbnz	r3, 800cb1e <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800cb14:	2101      	movs	r1, #1
 800cb16:	4620      	mov	r0, r4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800cb1c:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800cb1e:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800cb22:	2601      	movs	r6, #1
  p = 0;
 800cb24:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cb26:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800cb2a:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800cb2e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800cb32:	46ba      	mov	sl, r7
 800cb34:	444f      	add	r7, r9
 800cb36:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800cb3a:	dd05      	ble.n	800cb48 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f8c3 b014 	str.w	fp, [r3, #20]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4798      	blx	r3
 800cb48:	f10a 0318 	add.w	r3, sl, #24
 800cb4c:	446b      	add	r3, sp
    while (i--)
 800cb4e:	f1b9 0901 	subs.w	r9, r9, #1
 800cb52:	d218      	bcs.n	800cb86 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800cb54:	3601      	adds	r6, #1
 800cb56:	2e11      	cmp	r6, #17
 800cb58:	d1e9      	bne.n	800cb2e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800cb5e:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800cb62:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800cb66:	55da      	strb	r2, [r3, r7]
  p = 0;
 800cb68:	4691      	mov	r9, r2
  si = huffsize[0];
 800cb6a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800cb6e:	ab06      	add	r3, sp, #24
 800cb70:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cb74:	b313      	cbz	r3, 800cbbc <jpeg_make_d_derived_tbl+0xf0>
 800cb76:	4649      	mov	r1, r9
 800cb78:	1a52      	subs	r2, r2, r1
 800cb7a:	e00a      	b.n	800cb92 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800cb7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cb80:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800cb84:	e7b9      	b.n	800cafa <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800cb86:	f803 6b01 	strb.w	r6, [r3], #1
 800cb8a:	e7e0      	b.n	800cb4e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800cb8c:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800cb90:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800cb92:	a806      	add	r0, sp, #24
 800cb94:	1853      	adds	r3, r2, r1
 800cb96:	4689      	mov	r9, r1
 800cb98:	5c40      	ldrb	r0, [r0, r1]
 800cb9a:	42b0      	cmp	r0, r6
 800cb9c:	d0f6      	beq.n	800cb8c <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800cb9e:	fa0b f206 	lsl.w	r2, fp, r6
 800cba2:	429a      	cmp	r2, r3
 800cba4:	dc07      	bgt.n	800cbb6 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cba6:	6822      	ldr	r2, [r4, #0]
 800cba8:	2109      	movs	r1, #9
 800cbaa:	4620      	mov	r0, r4
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	6151      	str	r1, [r2, #20]
 800cbb0:	6812      	ldr	r2, [r2, #0]
 800cbb2:	4790      	blx	r2
 800cbb4:	9b00      	ldr	r3, [sp, #0]
    code <<= 1;
 800cbb6:	005a      	lsls	r2, r3, #1
    si++;
 800cbb8:	3601      	adds	r6, #1
 800cbba:	e7d8      	b.n	800cb6e <jpeg_make_d_derived_tbl+0xa2>
 800cbbc:	f105 0210 	add.w	r2, r5, #16
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	4646      	mov	r6, r8
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800cbc4:	f50d 7c8e 	add.w	ip, sp, #284	; 0x11c
 800cbc8:	9201      	str	r2, [sp, #4]
    if (htbl->bits[l]) {
 800cbca:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800cbce:	b349      	cbz	r1, 800cc24 <jpeg_make_d_derived_tbl+0x158>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800cbd0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800cbd4:	1a9a      	subs	r2, r3, r2
      p += htbl->bits[l];
 800cbd6:	440b      	add	r3, r1
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800cbd8:	64f2      	str	r2, [r6, #76]	; 0x4c
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800cbda:	1e5a      	subs	r2, r3, #1
 800cbdc:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800cbe0:	f846 2f04 	str.w	r2, [r6, #4]!
  for (l = 1; l <= 16; l++) {
 800cbe4:	9a01      	ldr	r2, [sp, #4]
 800cbe6:	4282      	cmp	r2, r0
 800cbe8:	d1ef      	bne.n	800cbca <jpeg_make_d_derived_tbl+0xfe>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800cbea:	4b2d      	ldr	r3, [pc, #180]	; (800cca0 <jpeg_make_d_derived_tbl+0x1d4>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800cbec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800cbf6:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800cbfa:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800cbfc:	f01d fd98 	bl	802a730 <memset>
  p = 0;
 800cc00:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800cc04:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cc06:	5daa      	ldrb	r2, [r5, r6]
 800cc08:	f1c6 0b08 	rsb	fp, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cc0c:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cc0e:	9200      	str	r2, [sp, #0]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cc10:	2201      	movs	r2, #1
 800cc12:	9900      	ldr	r1, [sp, #0]
 800cc14:	fa02 f20b 	lsl.w	r2, r2, fp
 800cc18:	4451      	add	r1, sl
 800cc1a:	9103      	str	r1, [sp, #12]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cc1c:	f105 0111 	add.w	r1, r5, #17
 800cc20:	9104      	str	r1, [sp, #16]
 800cc22:	e01f      	b.n	800cc64 <jpeg_make_d_derived_tbl+0x198>
 800cc24:	f04f 32ff 	mov.w	r2, #4294967295
 800cc28:	e7da      	b.n	800cbe0 <jpeg_make_d_derived_tbl+0x114>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800cc2a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cc2e:	4696      	mov	lr, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cc30:	9904      	ldr	r1, [sp, #16]
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800cc32:	fa00 f00b 	lsl.w	r0, r0, fp
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cc36:	f811 1009 	ldrb.w	r1, [r1, r9]
 800cc3a:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 800cc3e:	f10c 0c23 	add.w	ip, ip, #35	; 0x23
 800cc42:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cc46:	f1be 0e01 	subs.w	lr, lr, #1
	dtbl->look_nbits[lookbits] = l;
 800cc4a:	f84c 6f04 	str.w	r6, [ip, #4]!
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cc4e:	d1fa      	bne.n	800cc46 <jpeg_make_d_derived_tbl+0x17a>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cc50:	f500 6092 	add.w	r0, r0, #1168	; 0x490
 800cc54:	9205      	str	r2, [sp, #20]
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cc56:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cc5a:	4440      	add	r0, r8
 800cc5c:	f01d fd68 	bl	802a730 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cc60:	ab47      	add	r3, sp, #284	; 0x11c
 800cc62:	9a05      	ldr	r2, [sp, #20]
 800cc64:	9903      	ldr	r1, [sp, #12]
 800cc66:	4589      	cmp	r9, r1
 800cc68:	d1df      	bne.n	800cc2a <jpeg_make_d_derived_tbl+0x15e>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800cc6a:	3601      	adds	r6, #1
 800cc6c:	9a00      	ldr	r2, [sp, #0]
 800cc6e:	2e09      	cmp	r6, #9
 800cc70:	4492      	add	sl, r2
 800cc72:	d1c8      	bne.n	800cc06 <jpeg_make_d_derived_tbl+0x13a>
  if (isDC) {
 800cc74:	9b02      	ldr	r3, [sp, #8]
 800cc76:	b123      	cbz	r3, 800cc82 <jpeg_make_d_derived_tbl+0x1b6>
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	3510      	adds	r5, #16
 800cc7c:	441f      	add	r7, r3
    for (i = 0; i < numsymbols; i++) {
 800cc7e:	42af      	cmp	r7, r5
 800cc80:	d103      	bne.n	800cc8a <jpeg_make_d_derived_tbl+0x1be>
}
 800cc82:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sym < 0 || sym > 15)
 800cc8a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800cc8e:	2b0f      	cmp	r3, #15
 800cc90:	d9f5      	bls.n	800cc7e <jpeg_make_d_derived_tbl+0x1b2>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	4620      	mov	r0, r4
 800cc96:	615e      	str	r6, [r3, #20]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800cc9c:	e7ef      	b.n	800cc7e <jpeg_make_d_derived_tbl+0x1b2>
 800cc9e:	bf00      	nop
 800cca0:	000fffff 	.word	0x000fffff

0800cca4 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800cca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800cca8:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800ccac:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ccae:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800ccb2:	f500 74a8 	add.w	r4, r0, #336	; 0x150
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800ccb6:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800ccba:	2d00      	cmp	r5, #0
 800ccbc:	f000 80af 	beq.w	800ce1e <start_pass_huff_decoder+0x17a>
    if (cinfo->Ss == 0) {
 800ccc0:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800ccc4:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800ccc8:	b962      	cbnz	r2, 800cce4 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800ccca:	b1a9      	cbz	r1, 800ccf8 <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800cccc:	f8da 3000 	ldr.w	r3, [sl]
 800ccd0:	2711      	movs	r7, #17
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	625d      	str	r5, [r3, #36]	; 0x24
 800ccd6:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800ccda:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4798      	blx	r3
 800cce2:	e00f      	b.n	800cd04 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800cce4:	428a      	cmp	r2, r1
 800cce6:	dcf1      	bgt.n	800cccc <start_pass_huff_decoder+0x28>
 800cce8:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800ccec:	428b      	cmp	r3, r1
 800ccee:	dbed      	blt.n	800cccc <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800ccf0:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d1e9      	bne.n	800cccc <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800ccf8:	b116      	cbz	r6, 800cd00 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800ccfa:	1e73      	subs	r3, r6, #1
 800ccfc:	42ab      	cmp	r3, r5
 800ccfe:	d1e5      	bne.n	800cccc <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800cd00:	2d0d      	cmp	r5, #13
 800cd02:	dce3      	bgt.n	800cccc <start_pass_huff_decoder+0x28>
{
 800cd04:	46a1      	mov	r9, r4
 800cd06:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd08:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800cd0c:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd10:	42bb      	cmp	r3, r7
 800cd12:	dc20      	bgt.n	800cd56 <start_pass_huff_decoder+0xb2>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800cd14:	f8da 31a0 	ldr.w	r3, [sl, #416]	; 0x1a0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d158      	bne.n	800cdce <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800cd1c:	4bbb      	ldr	r3, [pc, #748]	; (800d00c <start_pass_huff_decoder+0x368>)
 800cd1e:	49bc      	ldr	r1, [pc, #752]	; (800d010 <start_pass_huff_decoder+0x36c>)
	entropy->pub.decode_mcu = decode_mcu_DC_first;
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800cd20:	2600      	movs	r6, #0
    } else {
      if (cinfo->Ss == 0)
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	bf08      	it	eq
 800cd26:	460b      	moveq	r3, r1
 800cd28:	f10b 0710 	add.w	r7, fp, #16
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cd2c:	46b0      	mov	r8, r6
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800cd2e:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd32:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800cd36:	42b3      	cmp	r3, r6
 800cd38:	dc4c      	bgt.n	800cdd4 <start_pass_huff_decoder+0x130>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800cd40:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800cd42:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800cd46:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800cd4a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800cd4e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800cd52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800cd56:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800cd5a:	f8d3 8004 	ldr.w	r8, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800cd5e:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 800cd62:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800cd66:	eb03 2608 	add.w	r6, r3, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800cd6a:	b172      	cbz	r2, 800cd8a <start_pass_huff_decoder+0xe6>
 800cd6c:	585b      	ldr	r3, [r3, r1]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	da0b      	bge.n	800cd8a <start_pass_huff_decoder+0xe6>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800cd72:	f8da 3000 	ldr.w	r3, [sl]
 800cd76:	2276      	movs	r2, #118	; 0x76
 800cd78:	f04f 31ff 	mov.w	r1, #4294967295
 800cd7c:	4650      	mov	r0, sl
 800cd7e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800cd82:	2200      	movs	r2, #0
 800cd84:	61da      	str	r2, [r3, #28]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cd8a:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800cd8e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800cd92:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800cd96:	42ab      	cmp	r3, r5
 800cd98:	da01      	bge.n	800cd9e <start_pass_huff_decoder+0xfa>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd9a:	3701      	adds	r7, #1
 800cd9c:	e7b4      	b.n	800cd08 <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800cd9e:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800cda0:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800cda4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d00a      	beq.n	800cdc2 <start_pass_huff_decoder+0x11e>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800cdac:	f8da 3000 	ldr.w	r3, [sl]
 800cdb0:	2276      	movs	r2, #118	; 0x76
 800cdb2:	f04f 31ff 	mov.w	r1, #4294967295
 800cdb6:	4650      	mov	r0, sl
 800cdb8:	61dd      	str	r5, [r3, #28]
 800cdba:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800cdc2:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cdc6:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800cdc8:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cdcc:	e7e1      	b.n	800cd92 <start_pass_huff_decoder+0xee>
      if (cinfo->Ss == 0)
 800cdce:	4b91      	ldr	r3, [pc, #580]	; (800d014 <start_pass_huff_decoder+0x370>)
 800cdd0:	4991      	ldr	r1, [pc, #580]	; (800d018 <start_pass_huff_decoder+0x374>)
 800cdd2:	e7a5      	b.n	800cd20 <start_pass_huff_decoder+0x7c>
      if (cinfo->Ss == 0) {
 800cdd4:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800cdd8:	f854 3f04 	ldr.w	r3, [r4, #4]!
      if (cinfo->Ss == 0) {
 800cddc:	b97a      	cbnz	r2, 800cdfe <start_pass_huff_decoder+0x15a>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800cdde:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800cde2:	b942      	cbnz	r2, 800cdf6 <start_pass_huff_decoder+0x152>
	  tbl = compptr->dc_tbl_no;
 800cde4:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cde6:	2101      	movs	r1, #1
 800cde8:	4650      	mov	r0, sl
 800cdea:	f102 030b 	add.w	r3, r2, #11
 800cdee:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cdf2:	f7ff fe6b 	bl	800cacc <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cdf6:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cdf8:	f847 8f04 	str.w	r8, [r7, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cdfc:	e799      	b.n	800cd32 <start_pass_huff_decoder+0x8e>
	tbl = compptr->ac_tbl_no;
 800cdfe:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ce00:	2100      	movs	r1, #0
 800ce02:	4650      	mov	r0, sl
 800ce04:	f105 030b 	add.w	r3, r5, #11
 800ce08:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800ce0a:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ce0e:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800ce12:	f7ff fe5b 	bl	800cacc <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800ce16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ce18:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800ce1c:	e7eb      	b.n	800cdf6 <start_pass_huff_decoder+0x152>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800ce1e:	b982      	cbnz	r2, 800ce42 <start_pass_huff_decoder+0x19e>
 800ce20:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800ce24:	b96b      	cbnz	r3, 800ce42 <start_pass_huff_decoder+0x19e>
 800ce26:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800ce2a:	b953      	cbnz	r3, 800ce42 <start_pass_huff_decoder+0x19e>
 800ce2c:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800ce30:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800ce34:	b90a      	cbnz	r2, 800ce3a <start_pass_huff_decoder+0x196>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800ce36:	2b3f      	cmp	r3, #63	; 0x3f
 800ce38:	dc0c      	bgt.n	800ce54 <start_pass_huff_decoder+0x1b0>
 800ce3a:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d008      	beq.n	800ce54 <start_pass_huff_decoder+0x1b0>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800ce42:	f8da 3000 	ldr.w	r3, [sl]
 800ce46:	227d      	movs	r2, #125	; 0x7d
 800ce48:	f04f 31ff 	mov.w	r1, #4294967295
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	615a      	str	r2, [r3, #20]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800ce54:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800ce58:	2600      	movs	r6, #0
 800ce5a:	4b70      	ldr	r3, [pc, #448]	; (800d01c <start_pass_huff_decoder+0x378>)
 800ce5c:	f10b 0710 	add.w	r7, fp, #16
 800ce60:	4a6f      	ldr	r2, [pc, #444]	; (800d020 <start_pass_huff_decoder+0x37c>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ce62:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800ce64:	293f      	cmp	r1, #63	; 0x3f
 800ce66:	bf08      	it	eq
 800ce68:	4613      	moveq	r3, r2
 800ce6a:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ce6e:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800ce72:	42b3      	cmp	r3, r6
 800ce74:	dc3d      	bgt.n	800cef2 <start_pass_huff_decoder+0x24e>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ce76:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800ce7a:	f10b 045c 	add.w	r4, fp, #92	; 0x5c
 800ce7e:	f50a 76b6 	add.w	r6, sl, #364	; 0x16c
 800ce82:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800ce86:	4f67      	ldr	r7, [pc, #412]	; (800d024 <start_pass_huff_decoder+0x380>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800ce88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d03c <start_pass_huff_decoder+0x398>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ce8c:	42a8      	cmp	r0, r5
 800ce8e:	f77f af57 	ble.w	800cd40 <start_pass_huff_decoder+0x9c>
      compptr = cinfo->cur_comp_info[ci];
 800ce92:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800ce96:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800ce9a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800ce9e:	6953      	ldr	r3, [r2, #20]
 800cea0:	3310      	adds	r3, #16
 800cea2:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cea6:	f844 3f04 	str.w	r3, [r4, #4]!
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800ceaa:	6993      	ldr	r3, [r2, #24]
 800ceac:	3314      	adds	r3, #20
 800ceae:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800ceb2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (compptr->component_needed) {
 800ceb4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d076      	beq.n	800cfa8 <start_pass_huff_decoder+0x304>
	switch (cinfo->lim_Se) {
 800ceba:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
 800cebe:	290f      	cmp	r1, #15
	i = compptr->DCT_h_scaled_size;
 800cec0:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800cec4:	d073      	beq.n	800cfae <start_pass_huff_decoder+0x30a>
 800cec6:	dc31      	bgt.n	800cf2c <start_pass_huff_decoder+0x288>
 800cec8:	2903      	cmp	r1, #3
 800ceca:	d04b      	beq.n	800cf64 <start_pass_huff_decoder+0x2c0>
 800cecc:	2908      	cmp	r1, #8
 800cece:	d059      	beq.n	800cf84 <start_pass_huff_decoder+0x2e0>
 800ced0:	2900      	cmp	r1, #0
 800ced2:	f000 8099 	beq.w	800d008 <start_pass_huff_decoder+0x364>
	  if (ci <= 0 || ci > 8) ci = 8;
 800ced6:	1e59      	subs	r1, r3, #1
 800ced8:	2908      	cmp	r1, #8
	  if (i <= 0 || i > 8) i = 8;
 800ceda:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800cede:	bf28      	it	cs
 800cee0:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800cee2:	2908      	cmp	r1, #8
 800cee4:	bf28      	it	cs
 800cee6:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cee8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ceec:	4b4e      	ldr	r3, [pc, #312]	; (800d028 <start_pass_huff_decoder+0x384>)
 800ceee:	3a09      	subs	r2, #9
 800cef0:	e045      	b.n	800cf7e <start_pass_huff_decoder+0x2da>
      compptr = cinfo->cur_comp_info[ci];
 800cef2:	f854 9f04 	ldr.w	r9, [r4, #4]!
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cef6:	2101      	movs	r1, #1
 800cef8:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800cefa:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cefe:	f102 0310 	add.w	r3, r2, #16
 800cf02:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cf06:	f7ff fde1 	bl	800cacc <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800cf0a:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800cf0e:	b14b      	cbz	r3, 800cf24 <start_pass_huff_decoder+0x280>
	tbl = compptr->ac_tbl_no;
 800cf10:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cf14:	2100      	movs	r1, #0
 800cf16:	4650      	mov	r0, sl
 800cf18:	f102 0314 	add.w	r3, r2, #20
 800cf1c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cf20:	f7ff fdd4 	bl	800cacc <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cf24:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cf26:	f847 8f04 	str.w	r8, [r7, #4]!
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cf2a:	e7a0      	b.n	800ce6e <start_pass_huff_decoder+0x1ca>
	switch (cinfo->lim_Se) {
 800cf2c:	2923      	cmp	r1, #35	; 0x23
 800cf2e:	f103 3eff 	add.w	lr, r3, #4294967295
 800cf32:	f102 39ff 	add.w	r9, r2, #4294967295
 800cf36:	d048      	beq.n	800cfca <start_pass_huff_decoder+0x326>
 800cf38:	2930      	cmp	r1, #48	; 0x30
 800cf3a:	d054      	beq.n	800cfe6 <start_pass_huff_decoder+0x342>
 800cf3c:	2918      	cmp	r1, #24
 800cf3e:	d1ca      	bne.n	800ced6 <start_pass_huff_decoder+0x232>
	  if (ci <= 0 || ci > 5) ci = 5;
 800cf40:	f1be 0f05 	cmp.w	lr, #5
 800cf44:	bf28      	it	cs
 800cf46:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800cf48:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cf4c:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800cf50:	bf28      	it	cs
 800cf52:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cf54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cf58:	3a01      	subs	r2, #1
 800cf5a:	4413      	add	r3, r2
 800cf5c:	4a33      	ldr	r2, [pc, #204]	; (800d02c <start_pass_huff_decoder+0x388>)
 800cf5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf62:	e020      	b.n	800cfa6 <start_pass_huff_decoder+0x302>
	  if (ci <= 0 || ci > 2) ci = 2;
 800cf64:	1e59      	subs	r1, r3, #1
 800cf66:	2902      	cmp	r1, #2
	  if (i <= 0 || i > 2) i = 2;
 800cf68:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800cf6c:	bf28      	it	cs
 800cf6e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800cf70:	2902      	cmp	r1, #2
 800cf72:	bf28      	it	cs
 800cf74:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800cf76:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800cf7a:	4b2d      	ldr	r3, [pc, #180]	; (800d030 <start_pass_huff_decoder+0x38c>)
 800cf7c:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cf7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf82:	e010      	b.n	800cfa6 <start_pass_huff_decoder+0x302>
	  if (ci <= 0 || ci > 3) ci = 3;
 800cf84:	1e59      	subs	r1, r3, #1
 800cf86:	2903      	cmp	r1, #3
	  if (i <= 0 || i > 3) i = 3;
 800cf88:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800cf8c:	bf28      	it	cs
 800cf8e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800cf90:	2903      	cmp	r1, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cf92:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800cf96:	bf28      	it	cs
 800cf98:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cf9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf9e:	3a01      	subs	r2, #1
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cfa6:	3301      	adds	r3, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cfa8:	3501      	adds	r5, #1
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800cfaa:	6523      	str	r3, [r4, #80]	; 0x50
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cfac:	e76e      	b.n	800ce8c <start_pass_huff_decoder+0x1e8>
	  if (ci <= 0 || ci > 4) ci = 4;
 800cfae:	1e59      	subs	r1, r3, #1
 800cfb0:	2904      	cmp	r1, #4
	  if (i <= 0 || i > 4) i = 4;
 800cfb2:	f102 31ff 	add.w	r1, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800cfb6:	bf28      	it	cs
 800cfb8:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800cfba:	2904      	cmp	r1, #4
 800cfbc:	bf28      	it	cs
 800cfbe:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800cfc0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cfc4:	4b1b      	ldr	r3, [pc, #108]	; (800d034 <start_pass_huff_decoder+0x390>)
 800cfc6:	3a05      	subs	r2, #5
 800cfc8:	e7d9      	b.n	800cf7e <start_pass_huff_decoder+0x2da>
	  if (ci <= 0 || ci > 6) ci = 6;
 800cfca:	f1be 0f06 	cmp.w	lr, #6
 800cfce:	bf28      	it	cs
 800cfd0:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800cfd2:	f1b9 0f06 	cmp.w	r9, #6
 800cfd6:	bf28      	it	cs
 800cfd8:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	3a01      	subs	r2, #1
 800cfde:	fb0c 2203 	mla	r2, ip, r3, r2
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <start_pass_huff_decoder+0x394>)
 800cfe4:	e7cb      	b.n	800cf7e <start_pass_huff_decoder+0x2da>
	  if (ci <= 0 || ci > 7) ci = 7;
 800cfe6:	f1be 0f07 	cmp.w	lr, #7
 800cfea:	bf28      	it	cs
 800cfec:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800cfee:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cff2:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800cff6:	bf28      	it	cs
 800cff8:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800cffa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cffe:	3a01      	subs	r2, #1
 800d000:	4413      	add	r3, r2
 800d002:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d006:	e7ce      	b.n	800cfa6 <start_pass_huff_decoder+0x302>
	switch (cinfo->lim_Se) {
 800d008:	2301      	movs	r3, #1
 800d00a:	e7cd      	b.n	800cfa8 <start_pass_huff_decoder+0x304>
 800d00c:	0800c08d 	.word	0x0800c08d
 800d010:	0800bf19 	.word	0x0800bf19
 800d014:	0800c281 	.word	0x0800c281
 800d018:	0800c1ed 	.word	0x0800c1ed
 800d01c:	0800c4f9 	.word	0x0800c4f9
 800d020:	0800c7e9 	.word	0x0800c7e9
 800d024:	0802dc00 	.word	0x0802dc00
 800d028:	0802d998 	.word	0x0802d998
 800d02c:	0802db0c 	.word	0x0802db0c
 800d030:	0802da98 	.word	0x0802da98
 800d034:	0802dacc 	.word	0x0802dacc
 800d038:	0802db70 	.word	0x0802db70
 800d03c:	0802daa8 	.word	0x0802daa8

0800d040 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d042:	6843      	ldr	r3, [r0, #4]
 800d044:	22d8      	movs	r2, #216	; 0xd8
 800d046:	2101      	movs	r1, #1
{
 800d048:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800d04e:	4b17      	ldr	r3, [pc, #92]	; (800d0ac <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800d050:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d054:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800d056:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800d058:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800d05c:	b943      	cbnz	r3, 800d070 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800d05e:	6503      	str	r3, [r0, #80]	; 0x50
 800d060:	6403      	str	r3, [r0, #64]	; 0x40
 800d062:	6543      	str	r3, [r0, #84]	; 0x54
 800d064:	6443      	str	r3, [r0, #68]	; 0x44
 800d066:	6583      	str	r3, [r0, #88]	; 0x58
 800d068:	6483      	str	r3, [r0, #72]	; 0x48
 800d06a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800d06c:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800d06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d070:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800d072:	2101      	movs	r1, #1
 800d074:	686b      	ldr	r3, [r5, #4]
 800d076:	4628      	mov	r0, r5
 800d078:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d07a:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4798      	blx	r3
 800d080:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800d082:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d088:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800d08c:	42b3      	cmp	r3, r6
 800d08e:	dc05      	bgt.n	800d09c <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800d090:	2300      	movs	r3, #0
 800d092:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800d096:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800d09a:	e7e8      	b.n	800d06e <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800d09c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0a0:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d0a2:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800d0a4:	f01d fb44 	bl	802a730 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d0a8:	e7ed      	b.n	800d086 <jinit_huff_decoder+0x46>
 800d0aa:	bf00      	nop
 800d0ac:	0800cca5 	.word	0x0800cca5

0800d0b0 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800d0b0:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800d0b4:	4a01      	ldr	r2, [pc, #4]	; (800d0bc <finish_input_pass+0xc>)
 800d0b6:	601a      	str	r2, [r3, #0]
}
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	0800d279 	.word	0x0800d279

0800d0c0 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800d0c0:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800d0c2:	4a0a      	ldr	r2, [pc, #40]	; (800d0ec <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d0c4:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800d0c6:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800d0ca:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800d0cc:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800d0ce:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800d0d0:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800d0d4:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800d0d6:	6803      	ldr	r3, [r0, #0]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800d0dc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800d0e6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800d0ea:	bd38      	pop	{r3, r4, r5, pc}
 800d0ec:	0800d279 	.word	0x0800d279

0800d0f0 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800d0f0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800d0f4:	2a01      	cmp	r2, #1
{
 800d0f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	f500 76a8 	add.w	r6, r0, #336	; 0x150
  if (cinfo->comps_in_scan == 1) {
 800d100:	d135      	bne.n	800d16e <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800d102:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800d106:	69d9      	ldr	r1, [r3, #28]
 800d108:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800d10c:	6a19      	ldr	r1, [r3, #32]
 800d10e:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800d112:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800d114:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800d116:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800d11a:	68d8      	ldr	r0, [r3, #12]
 800d11c:	fbb1 f5f0 	udiv	r5, r1, r0
 800d120:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800d124:	2900      	cmp	r1, #0
 800d126:	bf08      	it	eq
 800d128:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800d12a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800d12e:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800d130:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800d132:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800d136:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800d13a:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d13c:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800d13e:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d142:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d146:	429f      	cmp	r7, r3
 800d148:	db71      	blt.n	800d22e <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800d14a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800d14e:	4620      	mov	r0, r4
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800d154:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800d158:	4620      	mov	r0, r4
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800d15e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800d162:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d166:	6852      	ldr	r2, [r2, #4]
 800d168:	601a      	str	r2, [r3, #0]
}
 800d16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800d16e:	1e53      	subs	r3, r2, #1
 800d170:	2b03      	cmp	r3, #3
 800d172:	d907      	bls.n	800d184 <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800d174:	6803      	ldr	r3, [r0, #0]
 800d176:	211b      	movs	r1, #27
 800d178:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d17c:	2204      	movs	r2, #4
 800d17e:	61da      	str	r2, [r3, #28]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d184:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800d188:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d18a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d18e:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800d190:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d192:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800d196:	4359      	muls	r1, r3
 800d198:	f009 fd9a 	bl	8016cd0 <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d19c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800d1a0:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800d1a4:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800d1a8:	4359      	muls	r1, r3
 800d1aa:	6a20      	ldr	r0, [r4, #32]
 800d1ac:	f009 fd90 	bl	8016cd0 <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800d1b0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800d1b4:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d1b8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d1bc:	429d      	cmp	r5, r3
 800d1be:	dabc      	bge.n	800d13a <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800d1c0:	f858 3f04 	ldr.w	r3, [r8, #4]!
      compptr->MCU_width = compptr->h_samp_factor;
 800d1c4:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d1c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800d1c8:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d1ca:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d1cc:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d1d0:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d1d2:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800d1d4:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800d1d6:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d1d8:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d1da:	fbb2 fcf1 	udiv	ip, r2, r1
 800d1de:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800d1e2:	2a00      	cmp	r2, #0
 800d1e4:	bf08      	it	eq
 800d1e6:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800d1e8:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800d1ea:	6a1a      	ldr	r2, [r3, #32]
 800d1ec:	fbb2 f1f0 	udiv	r1, r2, r0
 800d1f0:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800d1f4:	2a00      	cmp	r2, #0
 800d1f6:	bf08      	it	eq
 800d1f8:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800d1fa:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800d1fc:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d200:	443b      	add	r3, r7
 800d202:	2b0a      	cmp	r3, #10
 800d204:	dd05      	ble.n	800d212 <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	4620      	mov	r0, r4
 800d20a:	f8c3 9014 	str.w	r9, [r3, #20]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4798      	blx	r3
      while (mcublks-- > 0) {
 800d212:	2f00      	cmp	r7, #0
 800d214:	dc01      	bgt.n	800d21a <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d216:	3501      	adds	r5, #1
 800d218:	e7ce      	b.n	800d1b8 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800d21a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d21e:	3f01      	subs	r7, #1
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	335c      	adds	r3, #92	; 0x5c
 800d224:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800d228:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800d22c:	e7f1      	b.n	800d212 <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800d22e:	f859 6f04 	ldr.w	r6, [r9, #4]!
    if (compptr->quant_table != NULL)
 800d232:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800d234:	b9eb      	cbnz	r3, 800d272 <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800d236:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d238:	2a03      	cmp	r2, #3
 800d23a:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800d23e:	d803      	bhi.n	800d248 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800d240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	b92b      	cbnz	r3, 800d254 <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	4620      	mov	r0, r4
 800d24c:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d254:	6863      	ldr	r3, [r4, #4]
 800d256:	2284      	movs	r2, #132	; 0x84
 800d258:	2101      	movs	r1, #1
 800d25a:	4620      	mov	r0, r4
 800d25c:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d25e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d262:	4798      	blx	r3
 800d264:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d266:	2284      	movs	r2, #132	; 0x84
 800d268:	6869      	ldr	r1, [r5, #4]
 800d26a:	f01d fb42 	bl	802a8f2 <memcpy>
    compptr->quant_table = qtbl;
 800d26e:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d272:	3701      	adds	r7, #1
 800d274:	e765      	b.n	800d142 <start_input_pass+0x52>
	...

0800d278 <consume_markers>:
{
 800d278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800d27c:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800d280:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800d282:	6973      	ldr	r3, [r6, #20]
 800d284:	b9eb      	cbnz	r3, 800d2c2 <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800d286:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800d28a:	4db0      	ldr	r5, [pc, #704]	; (800d54c <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800d28c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d290:	4620      	mov	r0, r4
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	4798      	blx	r3
    switch (val) {
 800d296:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800d298:	4607      	mov	r7, r0
    switch (val) {
 800d29a:	d016      	beq.n	800d2ca <consume_markers+0x52>
 800d29c:	2802      	cmp	r0, #2
 800d29e:	d111      	bne.n	800d2c4 <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800d2a4:	69b3      	ldr	r3, [r6, #24]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f000 8174 	beq.w	800d594 <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800d2ac:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	b133      	cbz	r3, 800d2c2 <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	223d      	movs	r2, #61	; 0x3d
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	615a      	str	r2, [r3, #20]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4798      	blx	r3
 800d2c0:	e000      	b.n	800d2c4 <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800d2c2:	2702      	movs	r7, #2
}
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800d2ca:	69b3      	ldr	r3, [r6, #24]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 8150 	beq.w	800d572 <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	f040 80d8 	bne.w	800d488 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800d2d8:	6a22      	ldr	r2, [r4, #32]
 800d2da:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	dc02      	bgt.n	800d2e8 <consume_markers+0x70>
 800d2e2:	69e2      	ldr	r2, [r4, #28]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	dd08      	ble.n	800d2fa <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	212a      	movs	r1, #42	; 0x2a
 800d2ec:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800d2fa:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800d2fe:	2a08      	cmp	r2, #8
 800d300:	d006      	beq.n	800d310 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	2110      	movs	r1, #16
 800d306:	4620      	mov	r0, r4
 800d308:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800d310:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d312:	2a0a      	cmp	r2, #10
 800d314:	dd08      	ble.n	800d328 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	211b      	movs	r1, #27
 800d31a:	4620      	mov	r0, r4
 800d31c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d320:	220a      	movs	r2, #10
 800d322:	61da      	str	r2, [r3, #28]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d328:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800d32c:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d330:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800d334:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d33a:	459a      	cmp	sl, r3
 800d33c:	db0d      	blt.n	800d35a <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800d33e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800d342:	b92b      	cbnz	r3, 800d350 <consume_markers+0xd8>
 800d344:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d348:	b383      	cbz	r3, 800d3ac <consume_markers+0x134>
 800d34a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d34e:	b36b      	cbz	r3, 800d3ac <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800d350:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800d352:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800d356:	233f      	movs	r3, #63	; 0x3f
 800d358:	e071      	b.n	800d43e <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800d35a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d35e:	3b01      	subs	r3, #1
 800d360:	2b03      	cmp	r3, #3
 800d362:	d804      	bhi.n	800d36e <consume_markers+0xf6>
 800d364:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d368:	3b01      	subs	r3, #1
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	d905      	bls.n	800d37a <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	4620      	mov	r0, r4
 800d372:	f8c3 b014 	str.w	fp, [r3, #20]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800d37e:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d382:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800d386:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d38a:	429a      	cmp	r2, r3
 800d38c:	bfac      	ite	ge
 800d38e:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800d392:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800d396:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800d39a:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	bfac      	ite	ge
 800d3a2:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800d3a6:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800d3aa:	e7c5      	b.n	800d338 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800d3ac:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800d3b0:	2b50      	cmp	r3, #80	; 0x50
 800d3b2:	f000 808a 	beq.w	800d4ca <consume_markers+0x252>
 800d3b6:	dc2b      	bgt.n	800d410 <consume_markers+0x198>
 800d3b8:	2b18      	cmp	r3, #24
 800d3ba:	d078      	beq.n	800d4ae <consume_markers+0x236>
 800d3bc:	dc1d      	bgt.n	800d3fa <consume_markers+0x182>
 800d3be:	2b08      	cmp	r3, #8
 800d3c0:	d070      	beq.n	800d4a4 <consume_markers+0x22c>
 800d3c2:	dc13      	bgt.n	800d3ec <consume_markers+0x174>
 800d3c4:	b3bb      	cbz	r3, 800d436 <consume_markers+0x1be>
 800d3c6:	2b03      	cmp	r3, #3
 800d3c8:	d065      	beq.n	800d496 <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800d3ca:	6822      	ldr	r2, [r4, #0]
 800d3cc:	2111      	movs	r1, #17
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	6151      	str	r1, [r2, #20]
 800d3d2:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800d3d6:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800d3da:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800d3de:	6213      	str	r3, [r2, #32]
 800d3e0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800d3e4:	6253      	str	r3, [r2, #36]	; 0x24
 800d3e6:	6813      	ldr	r3, [r2, #0]
 800d3e8:	4798      	blx	r3
      break;
 800d3ea:	e02a      	b.n	800d442 <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800d3ec:	2b0f      	cmp	r3, #15
 800d3ee:	d1ec      	bne.n	800d3ca <consume_markers+0x152>
      cinfo->block_size = 4;
 800d3f0:	2204      	movs	r2, #4
 800d3f2:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800d3f6:	4a56      	ldr	r2, [pc, #344]	; (800d550 <consume_markers+0x2d8>)
 800d3f8:	e051      	b.n	800d49e <consume_markers+0x226>
    switch (cinfo->Se) {
 800d3fa:	2b30      	cmp	r3, #48	; 0x30
 800d3fc:	d05c      	beq.n	800d4b8 <consume_markers+0x240>
 800d3fe:	2b3f      	cmp	r3, #63	; 0x3f
 800d400:	d05f      	beq.n	800d4c2 <consume_markers+0x24a>
 800d402:	2b23      	cmp	r3, #35	; 0x23
 800d404:	d1e1      	bne.n	800d3ca <consume_markers+0x152>
      cinfo->block_size = 6;
 800d406:	2206      	movs	r2, #6
 800d408:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800d40c:	4a51      	ldr	r2, [pc, #324]	; (800d554 <consume_markers+0x2dc>)
 800d40e:	e046      	b.n	800d49e <consume_markers+0x226>
    switch (cinfo->Se) {
 800d410:	2ba8      	cmp	r3, #168	; 0xa8
 800d412:	d060      	beq.n	800d4d6 <consume_markers+0x25e>
 800d414:	dc07      	bgt.n	800d426 <consume_markers+0x1ae>
 800d416:	2b78      	cmp	r3, #120	; 0x78
 800d418:	d059      	beq.n	800d4ce <consume_markers+0x256>
 800d41a:	2b8f      	cmp	r3, #143	; 0x8f
 800d41c:	d059      	beq.n	800d4d2 <consume_markers+0x25a>
 800d41e:	2b63      	cmp	r3, #99	; 0x63
 800d420:	d1d3      	bne.n	800d3ca <consume_markers+0x152>
      cinfo->block_size = 10;
 800d422:	230a      	movs	r3, #10
 800d424:	e795      	b.n	800d352 <consume_markers+0xda>
    switch (cinfo->Se) {
 800d426:	2be0      	cmp	r3, #224	; 0xe0
 800d428:	d057      	beq.n	800d4da <consume_markers+0x262>
 800d42a:	2bff      	cmp	r3, #255	; 0xff
 800d42c:	d057      	beq.n	800d4de <consume_markers+0x266>
 800d42e:	2bc3      	cmp	r3, #195	; 0xc3
 800d430:	d1cb      	bne.n	800d3ca <consume_markers+0x152>
      cinfo->block_size = 14;
 800d432:	230e      	movs	r3, #14
 800d434:	e78d      	b.n	800d352 <consume_markers+0xda>
      cinfo->block_size = 1;
 800d436:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800d43a:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d43e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d442:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800d446:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d44a:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800d44e:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800d450:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d454:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800d456:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d45a:	459a      	cmp	sl, r3
 800d45c:	db41      	blt.n	800d4e2 <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d45e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800d462:	6a20      	ldr	r0, [r4, #32]
 800d464:	4359      	muls	r1, r3
 800d466:	f009 fc33 	bl	8016cd0 <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d46c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800d470:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d474:	429a      	cmp	r2, r3
 800d476:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d47a:	db03      	blt.n	800d484 <consume_markers+0x20c>
 800d47c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800d480:	2a00      	cmp	r2, #0
 800d482:	d071      	beq.n	800d568 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800d484:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800d488:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d16d      	bne.n	800d56c <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800d490:	2302      	movs	r3, #2
 800d492:	61b3      	str	r3, [r6, #24]
	  break;
 800d494:	e6fa      	b.n	800d28c <consume_markers+0x14>
      cinfo->block_size = 2;
 800d496:	2202      	movs	r2, #2
 800d498:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800d49c:	4a2e      	ldr	r2, [pc, #184]	; (800d558 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800d49e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d4a2:	e7cc      	b.n	800d43e <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800d4a4:	2203      	movs	r2, #3
 800d4a6:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800d4aa:	4a2c      	ldr	r2, [pc, #176]	; (800d55c <consume_markers+0x2e4>)
 800d4ac:	e7f7      	b.n	800d49e <consume_markers+0x226>
      cinfo->block_size = 5;
 800d4ae:	2205      	movs	r2, #5
 800d4b0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800d4b4:	4a2a      	ldr	r2, [pc, #168]	; (800d560 <consume_markers+0x2e8>)
 800d4b6:	e7f2      	b.n	800d49e <consume_markers+0x226>
      cinfo->block_size = 7;
 800d4b8:	2207      	movs	r2, #7
 800d4ba:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800d4be:	4a29      	ldr	r2, [pc, #164]	; (800d564 <consume_markers+0x2ec>)
 800d4c0:	e7ed      	b.n	800d49e <consume_markers+0x226>
      cinfo->block_size = 8;
 800d4c2:	2208      	movs	r2, #8
 800d4c4:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800d4c8:	e7b7      	b.n	800d43a <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800d4ca:	2309      	movs	r3, #9
 800d4cc:	e741      	b.n	800d352 <consume_markers+0xda>
      cinfo->block_size = 11;
 800d4ce:	230b      	movs	r3, #11
 800d4d0:	e73f      	b.n	800d352 <consume_markers+0xda>
      cinfo->block_size = 12;
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	e73d      	b.n	800d352 <consume_markers+0xda>
      cinfo->block_size = 13;
 800d4d6:	230d      	movs	r3, #13
 800d4d8:	e73b      	b.n	800d352 <consume_markers+0xda>
      cinfo->block_size = 15;
 800d4da:	230f      	movs	r3, #15
 800d4dc:	e739      	b.n	800d352 <consume_markers+0xda>
      cinfo->block_size = 16;
 800d4de:	2310      	movs	r3, #16
 800d4e0:	e737      	b.n	800d352 <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800d4e2:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d4e6:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800d4ea:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d4ee:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d4f2:	69e3      	ldr	r3, [r4, #28]
 800d4f4:	4351      	muls	r1, r2
 800d4f6:	4358      	muls	r0, r3
 800d4f8:	f009 fbea 	bl	8016cd0 <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800d4fc:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d500:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d504:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d508:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d50a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d50e:	4358      	muls	r0, r3
 800d510:	4351      	muls	r1, r2
 800d512:	f009 fbdd 	bl	8016cd0 <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800d516:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d51a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800d51e:	69e3      	ldr	r3, [r4, #28]
 800d520:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800d524:	4358      	muls	r0, r3
 800d526:	f009 fbd3 	bl	8016cd0 <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800d52a:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d52e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d532:	6a23      	ldr	r3, [r4, #32]
 800d534:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800d538:	4358      	muls	r0, r3
 800d53a:	f009 fbc9 	bl	8016cd0 <jdiv_round_up>
    compptr->quant_table = NULL;
 800d53e:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800d542:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800d546:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d54a:	e783      	b.n	800d454 <consume_markers+0x1dc>
 800d54c:	0802f230 	.word	0x0802f230
 800d550:	0802f424 	.word	0x0802f424
 800d554:	0802f548 	.word	0x0802f548
 800d558:	0802f370 	.word	0x0802f370
 800d55c:	0802f3c0 	.word	0x0802f3c0
 800d560:	0802f4a4 	.word	0x0802f4a4
 800d564:	0802f618 	.word	0x0802f618
    cinfo->inputctl->has_multiple_scans = FALSE;
 800d568:	611a      	str	r2, [r3, #16]
 800d56a:	e78d      	b.n	800d488 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	61b3      	str	r3, [r6, #24]
 800d570:	e6a8      	b.n	800d2c4 <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800d572:	6933      	ldr	r3, [r6, #16]
 800d574:	b92b      	cbnz	r3, 800d582 <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	2224      	movs	r2, #36	; 0x24
 800d57a:	4620      	mov	r0, r4
 800d57c:	615a      	str	r2, [r3, #20]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800d582:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d586:	2b00      	cmp	r3, #0
 800d588:	f43f ae80 	beq.w	800d28c <consume_markers+0x14>
	start_input_pass(cinfo);
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7ff fdaf 	bl	800d0f0 <start_input_pass>
 800d592:	e697      	b.n	800d2c4 <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800d594:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d598:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800d59c:	429a      	cmp	r2, r3
 800d59e:	f77f ae90 	ble.w	800d2c2 <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800d5a2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800d5a6:	e68d      	b.n	800d2c4 <consume_markers+0x4c>

0800d5a8 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d5a8:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800d5ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d5ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d5b0:	434a      	muls	r2, r1
 800d5b2:	429a      	cmp	r2, r3
{
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d5b8:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d5ba:	d813      	bhi.n	800d5e4 <jpeg_core_output_dimensions+0x3c>
    cinfo->output_width = (JDIMENSION)
 800d5bc:	2501      	movs	r5, #1
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d5be:	f009 fb87 	bl	8016cd0 <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d5c2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800d5c6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d5c8:	6a20      	ldr	r0, [r4, #32]
 800d5ca:	f009 fb81 	bl	8016cd0 <jdiv_round_up>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d5ce:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    cinfo->output_height = (JDIMENSION)
 800d5d6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 1;
 800d5d8:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d5dc:	4291      	cmp	r1, r2
 800d5de:	f300 80bf 	bgt.w	800d760 <jpeg_core_output_dimensions+0x1b8>
}
 800d5e2:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800d5e4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d5e8:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d5ec:	d80b      	bhi.n	800d606 <jpeg_core_output_dimensions+0x5e>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800d5ee:	0040      	lsls	r0, r0, #1
 800d5f0:	2502      	movs	r5, #2
 800d5f2:	f009 fb6d 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d5f6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800d5f8:	6a20      	ldr	r0, [r4, #32]
 800d5fa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d5fe:	0040      	lsls	r0, r0, #1
 800d600:	f009 fb66 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 2;
 800d604:	e7e3      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800d606:	441d      	add	r5, r3
 800d608:	42aa      	cmp	r2, r5
 800d60a:	d80d      	bhi.n	800d628 <jpeg_core_output_dimensions+0x80>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800d60c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d610:	2503      	movs	r5, #3
 800d612:	f009 fb5d 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d616:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800d618:	6a20      	ldr	r0, [r4, #32]
 800d61a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d61e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d622:	f009 fb55 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 3;
 800d626:	e7d2      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800d628:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800d62c:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800d630:	d80b      	bhi.n	800d64a <jpeg_core_output_dimensions+0xa2>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800d632:	0080      	lsls	r0, r0, #2
 800d634:	2504      	movs	r5, #4
 800d636:	f009 fb4b 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d63a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800d63c:	6a20      	ldr	r0, [r4, #32]
 800d63e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d642:	0080      	lsls	r0, r0, #2
 800d644:	f009 fb44 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 4;
 800d648:	e7c1      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800d64a:	441d      	add	r5, r3
 800d64c:	42aa      	cmp	r2, r5
 800d64e:	d80d      	bhi.n	800d66c <jpeg_core_output_dimensions+0xc4>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800d650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d654:	2505      	movs	r5, #5
 800d656:	f009 fb3b 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d65a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800d65c:	6a20      	ldr	r0, [r4, #32]
 800d65e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d666:	f009 fb33 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 5;
 800d66a:	e7b0      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800d66c:	2506      	movs	r5, #6
 800d66e:	fb05 f603 	mul.w	r6, r5, r3
 800d672:	42b2      	cmp	r2, r6
 800d674:	d80a      	bhi.n	800d68c <jpeg_core_output_dimensions+0xe4>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800d676:	4368      	muls	r0, r5
 800d678:	f009 fb2a 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d67c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800d67e:	6a20      	ldr	r0, [r4, #32]
 800d680:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d684:	4368      	muls	r0, r5
 800d686:	f009 fb23 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 14;
 800d68a:	e7a0      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800d68c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d690:	00dd      	lsls	r5, r3, #3
 800d692:	42b2      	cmp	r2, r6
 800d694:	d80d      	bhi.n	800d6b2 <jpeg_core_output_dimensions+0x10a>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800d696:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d69a:	2507      	movs	r5, #7
 800d69c:	f009 fb18 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d6a0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800d6a2:	6a20      	ldr	r0, [r4, #32]
 800d6a4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d6a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d6ac:	f009 fb10 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 7;
 800d6b0:	e78d      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800d6b2:	42aa      	cmp	r2, r5
 800d6b4:	d80b      	bhi.n	800d6ce <jpeg_core_output_dimensions+0x126>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800d6b6:	00c0      	lsls	r0, r0, #3
 800d6b8:	2508      	movs	r5, #8
 800d6ba:	f009 fb09 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d6be:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800d6c0:	6a20      	ldr	r0, [r4, #32]
 800d6c2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d6c6:	00c0      	lsls	r0, r0, #3
 800d6c8:	f009 fb02 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 8;
 800d6cc:	e77f      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800d6ce:	441d      	add	r5, r3
 800d6d0:	42aa      	cmp	r2, r5
 800d6d2:	d80d      	bhi.n	800d6f0 <jpeg_core_output_dimensions+0x148>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800d6d4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d6d8:	2509      	movs	r5, #9
 800d6da:	f009 faf9 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d6de:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800d6e0:	6a20      	ldr	r0, [r4, #32]
 800d6e2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d6e6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d6ea:	f009 faf1 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 9;
 800d6ee:	e76e      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800d6f0:	250a      	movs	r5, #10
 800d6f2:	fb05 f603 	mul.w	r6, r5, r3
 800d6f6:	42b2      	cmp	r2, r6
 800d6f8:	d9bd      	bls.n	800d676 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800d6fa:	250b      	movs	r5, #11
 800d6fc:	fb05 f603 	mul.w	r6, r5, r3
 800d700:	42b2      	cmp	r2, r6
 800d702:	d9b8      	bls.n	800d676 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800d704:	250c      	movs	r5, #12
 800d706:	fb05 f603 	mul.w	r6, r5, r3
 800d70a:	42b2      	cmp	r2, r6
 800d70c:	d9b3      	bls.n	800d676 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800d70e:	250d      	movs	r5, #13
 800d710:	fb05 f603 	mul.w	r6, r5, r3
 800d714:	42b2      	cmp	r2, r6
 800d716:	d9ae      	bls.n	800d676 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800d718:	250e      	movs	r5, #14
 800d71a:	fb05 f603 	mul.w	r6, r5, r3
 800d71e:	42b2      	cmp	r2, r6
 800d720:	d9a9      	bls.n	800d676 <jpeg_core_output_dimensions+0xce>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800d722:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800d726:	429a      	cmp	r2, r3
 800d728:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800d72c:	d80c      	bhi.n	800d748 <jpeg_core_output_dimensions+0x1a0>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800d72e:	1a18      	subs	r0, r3, r0
 800d730:	250f      	movs	r5, #15
 800d732:	f009 facd 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d736:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800d738:	6a20      	ldr	r0, [r4, #32]
 800d73a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d73e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800d742:	f009 fac5 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 15;
 800d746:	e742      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800d748:	4618      	mov	r0, r3
    cinfo->output_height = (JDIMENSION)
 800d74a:	2510      	movs	r5, #16
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800d74c:	f009 fac0 	bl	8016cd0 <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d750:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800d752:	6a20      	ldr	r0, [r4, #32]
 800d754:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d758:	0100      	lsls	r0, r0, #4
 800d75a:	f009 fab9 	bl	8016cd0 <jdiv_round_up>
    cinfo->min_DCT_v_scaled_size = 16;
 800d75e:	e736      	b.n	800d5ce <jpeg_core_output_dimensions+0x26>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d760:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800d764:	3201      	adds	r2, #1
 800d766:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d768:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800d76c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800d770:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800d774:	e732      	b.n	800d5dc <jpeg_core_output_dimensions+0x34>
	...

0800d778 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d778:	6843      	ldr	r3, [r0, #4]
 800d77a:	221c      	movs	r2, #28
 800d77c:	2100      	movs	r1, #0
 800d77e:	681b      	ldr	r3, [r3, #0]
{
 800d780:	b510      	push	{r4, lr}
 800d782:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d784:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800d786:	4b08      	ldr	r3, [pc, #32]	; (800d7a8 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800d788:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800d78c:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800d78e:	4b07      	ldr	r3, [pc, #28]	; (800d7ac <jinit_input_controller+0x34>)
 800d790:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800d792:	4b07      	ldr	r3, [pc, #28]	; (800d7b0 <jinit_input_controller+0x38>)
 800d794:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800d796:	4b07      	ldr	r3, [pc, #28]	; (800d7b4 <jinit_input_controller+0x3c>)
 800d798:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d79a:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800d79c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	6183      	str	r3, [r0, #24]
}
 800d7a4:	bd10      	pop	{r4, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0800d279 	.word	0x0800d279
 800d7ac:	0800d0c1 	.word	0x0800d0c1
 800d7b0:	0800d0f1 	.word	0x0800d0f1
 800d7b4:	0800d0b1 	.word	0x0800d0b1

0800d7b8 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800d7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d7bc:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800d7c0:	4602      	mov	r2, r0

  switch (pass_mode) {
 800d7c2:	b149      	cbz	r1, 800d7d8 <start_pass_main+0x20>
 800d7c4:	2902      	cmp	r1, #2
 800d7c6:	d071      	beq.n	800d8ac <start_pass_main+0xf4>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d7c8:	6803      	ldr	r3, [r0, #0]
 800d7ca:	2203      	movs	r2, #3
 800d7cc:	615a      	str	r2, [r3, #20]
 800d7ce:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800d7d0:	b003      	add	sp, #12
 800d7d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d7d6:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800d7d8:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800d7dc:	6880      	ldr	r0, [r0, #8]
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d061      	beq.n	800d8a6 <start_pass_main+0xee>
  int M = cinfo->min_DCT_v_scaled_size;
 800d7e2:	f8d2 c144 	ldr.w	ip, [r2, #324]	; 0x144
      main->pub.process_data = process_data_context_main;
 800d7e6:	461f      	mov	r7, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7e8:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800d7ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800d7ee:	4831      	ldr	r0, [pc, #196]	; (800d8b4 <start_pass_main+0xfc>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7f0:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d7f2:	f10c 0202 	add.w	r2, ip, #2
      main->pub.process_data = process_data_context_main;
 800d7f6:	f847 0f04 	str.w	r0, [r7, #4]!
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d7fa:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7fc:	9a00      	ldr	r2, [sp, #0]
 800d7fe:	4291      	cmp	r1, r2
 800d800:	db09      	blt.n	800d816 <start_pass_main+0x5e>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d802:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d804:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800d808:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d80a:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800d80c:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800d810:	b003      	add	sp, #12
 800d812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d816:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800d818:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d81a:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d81c:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d81e:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800d820:	f857 4f04 	ldr.w	r4, [r7, #4]!
    xbuf0 = main->xbuffer[0][ci];
 800d824:	f850 e021 	ldr.w	lr, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d828:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d82a:	fb92 f2fc 	sdiv	r2, r2, ip
    xbuf1 = main->xbuffer[1][ci];
 800d82e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d832:	fb02 f905 	mul.w	r9, r2, r5
 800d836:	2500      	movs	r5, #0
 800d838:	454d      	cmp	r5, r9
 800d83a:	db1c      	blt.n	800d876 <start_pass_main+0xbe>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d83c:	fb02 fb0c 	mul.w	fp, r2, ip
 800d840:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800d844:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d848:	fb05 b502 	mla	r5, r5, r2, fp
 800d84c:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800d850:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800d854:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d858:	2400      	movs	r4, #0
 800d85a:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d85e:	4554      	cmp	r4, sl
 800d860:	db11      	blt.n	800d886 <start_pass_main+0xce>
 800d862:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800d866:	2400      	movs	r4, #0
 800d868:	fb00 e502 	mla	r5, r0, r2, lr
 800d86c:	42a2      	cmp	r2, r4
 800d86e:	dc14      	bgt.n	800d89a <start_pass_main+0xe2>
       ci++, compptr++) {
 800d870:	3101      	adds	r1, #1
 800d872:	3658      	adds	r6, #88	; 0x58
 800d874:	e7c2      	b.n	800d7fc <start_pass_main+0x44>
      xbuf0[i] = xbuf1[i] = buf[i];
 800d876:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800d87a:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800d87e:	f84e 8025 	str.w	r8, [lr, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d882:	3501      	adds	r5, #1
 800d884:	e7d8      	b.n	800d838 <start_pass_main+0x80>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d886:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d88a:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d88c:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800d890:	f855 bb04 	ldr.w	fp, [r5], #4
 800d894:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d898:	e7e1      	b.n	800d85e <start_pass_main+0xa6>
      xbuf0[i - rgroup] = xbuf0[0];
 800d89a:	f8de 0000 	ldr.w	r0, [lr]
 800d89e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d8a2:	3401      	adds	r4, #1
 800d8a4:	e7e2      	b.n	800d86c <start_pass_main+0xb4>
      main->pub.process_data = process_data_simple_main;
 800d8a6:	4a04      	ldr	r2, [pc, #16]	; (800d8b8 <start_pass_main+0x100>)
 800d8a8:	605a      	str	r2, [r3, #4]
 800d8aa:	e7ae      	b.n	800d80a <start_pass_main+0x52>
    main->pub.process_data = process_data_crank_post;
 800d8ac:	4a03      	ldr	r2, [pc, #12]	; (800d8bc <start_pass_main+0x104>)
 800d8ae:	605a      	str	r2, [r3, #4]
    break;
 800d8b0:	e7ae      	b.n	800d810 <start_pass_main+0x58>
 800d8b2:	bf00      	nop
 800d8b4:	0800d919 	.word	0x0800d919
 800d8b8:	0800d8c1 	.word	0x0800d8c1
 800d8bc:	0800db0d 	.word	0x0800db0d

0800d8c0 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d8c4:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d8c8:	4698      	mov	r8, r3
 800d8ca:	460e      	mov	r6, r1
 800d8cc:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d8ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d8d4:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800d8d8:	b943      	cbnz	r3, 800d8ec <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d8da:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800d8de:	9105      	str	r1, [sp, #20]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	4798      	blx	r3
 800d8e4:	b1a8      	cbz	r0, 800d912 <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	9905      	ldr	r1, [sp, #20]
 800d8ea:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d8ec:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d8f0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d8f4:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	9600      	str	r6, [sp, #0]
 800d8fc:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d900:	685e      	ldr	r6, [r3, #4]
 800d902:	464b      	mov	r3, r9
 800d904:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d908:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800d90a:	bf24      	itt	cs
 800d90c:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800d90e:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800d912:	b007      	add	sp, #28
 800d914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d918 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d91c:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d920:	4698      	mov	r8, r3
 800d922:	b08b      	sub	sp, #44	; 0x2c
 800d924:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d926:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d928:	4689      	mov	r9, r1
 800d92a:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800d92c:	b973      	cbnz	r3, 800d94c <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d92e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d930:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800d934:	330e      	adds	r3, #14
 800d936:	68d2      	ldr	r2, [r2, #12]
 800d938:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d93c:	4790      	blx	r2
 800d93e:	2800      	cmp	r0, #0
 800d940:	d05a      	beq.n	800d9f8 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d942:	2301      	movs	r3, #1
 800d944:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d946:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d948:	3301      	adds	r3, #1
 800d94a:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d94c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d011      	beq.n	800d976 <process_data_context_main+0x5e>
 800d952:	2b02      	cmp	r3, #2
 800d954:	d036      	beq.n	800d9c4 <process_data_context_main+0xac>
 800d956:	2b00      	cmp	r3, #0
 800d958:	d14e      	bne.n	800d9f8 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d95a:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800d95e:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d960:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d962:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800d966:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d968:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d96a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d96e:	429a      	cmp	r2, r3
 800d970:	d045      	beq.n	800d9fe <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800d972:	2301      	movs	r3, #1
 800d974:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d978:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d97c:	4628      	mov	r0, r5
 800d97e:	f103 010e 	add.w	r1, r3, #14
 800d982:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d986:	f8cd 9000 	str.w	r9, [sp]
 800d98a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d98e:	685e      	ldr	r6, [r3, #4]
 800d990:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d994:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d996:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d998:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d99a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d32b      	bcc.n	800d9f8 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d9a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800d9a2:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d063      	beq.n	800da72 <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d9aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9ac:	f083 0301 	eor.w	r3, r3, #1
 800d9b0:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d9b6:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d9b8:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d9ba:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800d9bc:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d9be:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d9c0:	6463      	str	r3, [r4, #68]	; 0x44
 800d9c2:	e019      	b.n	800d9f8 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d9c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9c6:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f103 010e 	add.w	r1, r3, #14
 800d9d0:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d9d4:	f8cd 9000 	str.w	r9, [sp]
 800d9d8:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d9dc:	685e      	ldr	r6, [r3, #4]
 800d9de:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d9e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d9e4:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d9e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d9e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d304      	bcc.n	800d9f8 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	4543      	cmp	r3, r8
 800d9f6:	d3b0      	bcc.n	800d95a <process_data_context_main+0x42>
  }
}
 800d9f8:	b00b      	add	sp, #44	; 0x2c
 800d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d9fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800da00:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800da04:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da08:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800da0c:	9206      	str	r2, [sp, #24]
 800da0e:	9a06      	ldr	r2, [sp, #24]
 800da10:	4296      	cmp	r6, r2
 800da12:	daae      	bge.n	800d972 <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800da14:	68d8      	ldr	r0, [r3, #12]
 800da16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da18:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800da1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da1c:	fbb0 fbf2 	udiv	fp, r0, r2
 800da20:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800da24:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800da28:	2800      	cmp	r0, #0
 800da2a:	bf08      	it	eq
 800da2c:	4610      	moveq	r0, r2
    if (ci == 0) {
 800da2e:	b926      	cbnz	r6, 800da3a <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800da30:	1e42      	subs	r2, r0, #1
 800da32:	fb92 f2fa 	sdiv	r2, r2, sl
 800da36:	3201      	adds	r2, #1
 800da38:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800da3a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800da3c:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800da3e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800da42:	320e      	adds	r2, #14
 800da44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800da48:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800da4c:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800da50:	2000      	movs	r0, #0
 800da52:	465a      	mov	r2, fp
 800da54:	3204      	adds	r2, #4
 800da56:	9005      	str	r0, [sp, #20]
 800da58:	9805      	ldr	r0, [sp, #20]
 800da5a:	4550      	cmp	r0, sl
 800da5c:	db02      	blt.n	800da64 <process_data_context_main+0x14c>
       ci++, compptr++) {
 800da5e:	3601      	adds	r6, #1
 800da60:	3358      	adds	r3, #88	; 0x58
 800da62:	e7d4      	b.n	800da0e <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800da64:	f8db 0000 	ldr.w	r0, [fp]
 800da68:	f842 0b04 	str.w	r0, [r2], #4
    for (i = 0; i < rgroup * 2; i++) {
 800da6c:	9805      	ldr	r0, [sp, #20]
 800da6e:	3001      	adds	r0, #1
 800da70:	e7f1      	b.n	800da56 <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da72:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800da76:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da7a:	9305      	str	r3, [sp, #20]
 800da7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da7e:	2500      	movs	r5, #0
 800da80:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800da82:	1c43      	adds	r3, r0, #1
 800da84:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da86:	9b08      	ldr	r3, [sp, #32]
 800da88:	429d      	cmp	r5, r3
 800da8a:	da8e      	bge.n	800d9aa <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da8c:	9b05      	ldr	r3, [sp, #20]
 800da8e:	68da      	ldr	r2, [r3, #12]
 800da90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da92:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800da94:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da98:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800da9c:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800daa0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800daa4:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800daa8:	9b07      	ldr	r3, [sp, #28]
 800daaa:	4353      	muls	r3, r2
 800daac:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800dab0:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800dab4:	4413      	add	r3, r2
 800dab6:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800dab8:	2100      	movs	r1, #0
 800daba:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800dabe:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800dac2:	461e      	mov	r6, r3
 800dac4:	f06f 0303 	mvn.w	r3, #3
 800dac8:	fb03 fe02 	mul.w	lr, r3, r2
 800dacc:	eb07 030e 	add.w	r3, r7, lr
 800dad0:	44e6      	add	lr, ip
 800dad2:	9309      	str	r3, [sp, #36]	; 0x24
 800dad4:	428a      	cmp	r2, r1
 800dad6:	dc04      	bgt.n	800dae2 <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800dad8:	9b05      	ldr	r3, [sp, #20]
 800dada:	3501      	adds	r5, #1
 800dadc:	3358      	adds	r3, #88	; 0x58
 800dade:	9305      	str	r3, [sp, #20]
 800dae0:	e7d1      	b.n	800da86 <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800dae2:	9b06      	ldr	r3, [sp, #24]
 800dae4:	f853 bb04 	ldr.w	fp, [r3], #4
 800dae8:	9306      	str	r3, [sp, #24]
 800daea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daec:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800daf0:	f85a bb04 	ldr.w	fp, [sl], #4
 800daf4:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800daf8:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800dafc:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800db00:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800db04:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800db06:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800db0a:	e7e3      	b.n	800dad4 <process_data_context_main+0x1bc>

0800db0c <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800db0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800db0e:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800db12:	9100      	str	r1, [sp, #0]
 800db14:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800db18:	2300      	movs	r3, #0
 800db1a:	6864      	ldr	r4, [r4, #4]
 800db1c:	461a      	mov	r2, r3
 800db1e:	4619      	mov	r1, r3
 800db20:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800db22:	b004      	add	sp, #16
 800db24:	bd10      	pop	{r4, pc}
	...

0800db28 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800db28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db2c:	6843      	ldr	r3, [r0, #4]
{
 800db2e:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db30:	2250      	movs	r2, #80	; 0x50
 800db32:	2101      	movs	r1, #1
 800db34:	681b      	ldr	r3, [r3, #0]
{
 800db36:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db38:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800db3a:	4b3a      	ldr	r3, [pc, #232]	; (800dc24 <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800db3c:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db40:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800db42:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800db44:	b12d      	cbz	r5, 800db52 <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	2203      	movs	r2, #3
 800db4a:	4620      	mov	r0, r4
 800db4c:	615a      	str	r2, [r3, #20]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800db52:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800db56:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	b31b      	cbz	r3, 800dba6 <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800db5e:	2d01      	cmp	r5, #1
 800db60:	dc05      	bgt.n	800db6e <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	2230      	movs	r2, #48	; 0x30
 800db66:	4620      	mov	r0, r4
 800db68:	615a      	str	r2, [r3, #20]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db70:	2101      	movs	r1, #1
 800db72:	6863      	ldr	r3, [r4, #4]
 800db74:	4620      	mov	r0, r4
 800db76:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800db78:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db7c:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db7e:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800db82:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db86:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800db88:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800db8a:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800db8c:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800db90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db94:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800db98:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800db9c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dba0:	4590      	cmp	r8, r2
 800dba2:	db0a      	blt.n	800dbba <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800dba4:	1c9d      	adds	r5, r3, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dba6:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800dbaa:	3604      	adds	r6, #4
 800dbac:	f04f 0800 	mov.w	r8, #0
 800dbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbb2:	4543      	cmp	r3, r8
 800dbb4:	dc1d      	bgt.n	800dbf2 <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800dbb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dbba:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dbbc:	4620      	mov	r0, r4
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dbbe:	68ea      	ldr	r2, [r5, #12]
       ci++, compptr++) {
 800dbc0:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dbc2:	434a      	muls	r2, r1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dbc4:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dbc6:	fb92 fbf3 	sdiv	fp, r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dbca:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800dbcc:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dbd6:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800dbda:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800dbde:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800dbe2:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800dbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe8:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800dbec:	f108 0801 	add.w	r8, r8, #1
 800dbf0:	e7d3      	b.n	800db9a <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dbf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800dbf4:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dbf8:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800dbfa:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800dbfc:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dc00:	4353      	muls	r3, r2
 800dc02:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800dc06:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dc08:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800dc0c:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800dc10:	436b      	muls	r3, r5
 800dc12:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800dc16:	4620      	mov	r0, r4
 800dc18:	434a      	muls	r2, r1
 800dc1a:	2101      	movs	r1, #1
 800dc1c:	47c8      	blx	r9
 800dc1e:	f846 0f04 	str.w	r0, [r6, #4]!
       ci++, compptr++) {
 800dc22:	e7c5      	b.n	800dbb0 <jinit_d_main_controller+0x88>
 800dc24:	0800d7b9 	.word	0x0800d7b9

0800dc28 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800dc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800dc2c:	6986      	ldr	r6, [r0, #24]
{
 800dc2e:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800dc30:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800dc34:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800dc38:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc3c:	b93d      	cbnz	r5, 800dc4e <get_sof+0x26>
 800dc3e:	68f3      	ldr	r3, [r6, #12]
 800dc40:	4798      	blx	r3
 800dc42:	b910      	cbnz	r0, 800dc4a <get_sof+0x22>
 800dc44:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800dc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc4a:	e9d6 c500 	ldrd	ip, r5, [r6]
 800dc4e:	1e6b      	subs	r3, r5, #1
 800dc50:	f89c 7000 	ldrb.w	r7, [ip]
 800dc54:	f000 8088 	beq.w	800dd68 <get_sof+0x140>
 800dc58:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dc5c:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc5e:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dc62:	f000 808a 	beq.w	800dd7a <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc66:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dc68:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dc6a:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dc6c:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dc70:	f000 808c 	beq.w	800dd8c <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dc74:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dc76:	782a      	ldrb	r2, [r5, #0]
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800dc7e:	6222      	str	r2, [r4, #32]
 800dc80:	f000 808d 	beq.w	800dd9e <get_sof+0x176>
 800dc84:	3501      	adds	r5, #1
 800dc86:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dc88:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dc8a:	6a22      	ldr	r2, [r4, #32]
 800dc8c:	440a      	add	r2, r1
 800dc8e:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dc90:	f000 808e 	beq.w	800ddb0 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dc94:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dc96:	782a      	ldrb	r2, [r5, #0]
 800dc98:	3b01      	subs	r3, #1
 800dc9a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800dc9e:	61e2      	str	r2, [r4, #28]
 800dca0:	f000 808f 	beq.w	800ddc2 <get_sof+0x19a>
 800dca4:	3501      	adds	r5, #1
 800dca6:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dca8:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dcaa:	69e2      	ldr	r2, [r4, #28]
 800dcac:	440a      	add	r2, r1
 800dcae:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dcb0:	f000 8090 	beq.w	800ddd4 <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dcb4:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dcb6:	f103 39ff 	add.w	r9, r3, #4294967295
 800dcba:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dcbe:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800dcc2:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dcc4:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dcca:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dcce:	619a      	str	r2, [r3, #24]
  length -= 8;
 800dcd0:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800dcd4:	69e2      	ldr	r2, [r4, #28]
 800dcd6:	61da      	str	r2, [r3, #28]
 800dcd8:	6a22      	ldr	r2, [r4, #32]
 800dcda:	621a      	str	r2, [r3, #32]
 800dcdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dcde:	625a      	str	r2, [r3, #36]	; 0x24
 800dce0:	2266      	movs	r2, #102	; 0x66
 800dce2:	615a      	str	r2, [r3, #20]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800dce8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	b12b      	cbz	r3, 800dcfc <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	223c      	movs	r2, #60	; 0x3c
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	615a      	str	r2, [r3, #20]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800dcfc:	6a23      	ldr	r3, [r4, #32]
 800dcfe:	b123      	cbz	r3, 800dd0a <get_sof+0xe2>
 800dd00:	69e3      	ldr	r3, [r4, #28]
 800dd02:	b113      	cbz	r3, 800dd0a <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800dd04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	dc05      	bgt.n	800dd16 <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	2221      	movs	r2, #33	; 0x21
 800dd0e:	4620      	mov	r0, r4
 800dd10:	615a      	str	r2, [r3, #20]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800dd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dd1c:	4543      	cmp	r3, r8
 800dd1e:	d005      	beq.n	800dd2c <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	220c      	movs	r2, #12
 800dd24:	4620      	mov	r0, r4
 800dd26:	615a      	str	r2, [r3, #20]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800dd2c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800dd30:	b94b      	cbnz	r3, 800dd46 <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800dd32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dd34:	2158      	movs	r1, #88	; 0x58
 800dd36:	6863      	ldr	r3, [r4, #4]
 800dd38:	4620      	mov	r0, r4
 800dd3a:	434a      	muls	r2, r1
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4798      	blx	r3
 800dd42:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dd46:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800dd4a:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dd4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dd52:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dd54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd56:	4543      	cmp	r3, r8
 800dd58:	dc45      	bgt.n	800dde6 <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800dd5a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dd5e:	2001      	movs	r0, #1
 800dd60:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800dd62:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800dd66:	e76e      	b.n	800dc46 <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dd68:	68f3      	ldr	r3, [r6, #12]
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	4798      	blx	r3
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	f43f af68 	beq.w	800dc44 <get_sof+0x1c>
 800dd74:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd78:	e770      	b.n	800dc5c <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dd7a:	68f3      	ldr	r3, [r6, #12]
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4798      	blx	r3
 800dd80:	2800      	cmp	r0, #0
 800dd82:	f43f af5f 	beq.w	800dc44 <get_sof+0x1c>
 800dd86:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd8a:	e76d      	b.n	800dc68 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dd8c:	68f3      	ldr	r3, [r6, #12]
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4798      	blx	r3
 800dd92:	2800      	cmp	r0, #0
 800dd94:	f43f af56 	beq.w	800dc44 <get_sof+0x1c>
 800dd98:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd9c:	e76b      	b.n	800dc76 <get_sof+0x4e>
 800dd9e:	68f3      	ldr	r3, [r6, #12]
 800dda0:	4620      	mov	r0, r4
 800dda2:	4798      	blx	r3
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f43f af4d 	beq.w	800dc44 <get_sof+0x1c>
 800ddaa:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ddae:	e76a      	b.n	800dc86 <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800ddb0:	68f3      	ldr	r3, [r6, #12]
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	4798      	blx	r3
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	f43f af44 	beq.w	800dc44 <get_sof+0x1c>
 800ddbc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ddc0:	e769      	b.n	800dc96 <get_sof+0x6e>
 800ddc2:	68f3      	ldr	r3, [r6, #12]
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	4798      	blx	r3
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	f43f af3b 	beq.w	800dc44 <get_sof+0x1c>
 800ddce:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ddd2:	e768      	b.n	800dca6 <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800ddd4:	68f3      	ldr	r3, [r6, #12]
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	4798      	blx	r3
 800ddda:	2800      	cmp	r0, #0
 800dddc:	f43f af32 	beq.w	800dc44 <get_sof+0x1c>
 800dde0:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dde4:	e767      	b.n	800dcb6 <get_sof+0x8e>
    compptr->component_index = ci;
 800dde6:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800ddea:	f1b9 0f00 	cmp.w	r9, #0
 800ddee:	d107      	bne.n	800de00 <get_sof+0x1d8>
 800ddf0:	68f3      	ldr	r3, [r6, #12]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	4798      	blx	r3
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	f43f af24 	beq.w	800dc44 <get_sof+0x1c>
 800ddfc:	e9d6 5900 	ldrd	r5, r9, [r6]
 800de00:	782b      	ldrb	r3, [r5, #0]
 800de02:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800de06:	f1b9 0301 	subs.w	r3, r9, #1
 800de0a:	d029      	beq.n	800de60 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800de0c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800de0e:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800de10:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800de12:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800de16:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800de1a:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800de1e:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800de22:	d026      	beq.n	800de72 <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800de24:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800de26:	f103 39ff 	add.w	r9, r3, #4294967295
 800de2a:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800de2e:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800de32:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800de34:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800de38:	4620      	mov	r0, r4
 800de3a:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800de3c:	f108 0801 	add.w	r8, r8, #1
 800de40:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800de42:	619a      	str	r2, [r3, #24]
 800de44:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800de48:	61da      	str	r2, [r3, #28]
 800de4a:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800de4e:	621a      	str	r2, [r3, #32]
 800de50:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800de54:	f8c3 a014 	str.w	sl, [r3, #20]
 800de58:	625a      	str	r2, [r3, #36]	; 0x24
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	4798      	blx	r3
       ci++, compptr++) {
 800de5e:	e779      	b.n	800dd54 <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800de60:	68f3      	ldr	r3, [r6, #12]
 800de62:	4620      	mov	r0, r4
 800de64:	4798      	blx	r3
 800de66:	2800      	cmp	r0, #0
 800de68:	f43f aeec 	beq.w	800dc44 <get_sof+0x1c>
 800de6c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800de70:	e7cd      	b.n	800de0e <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800de72:	68f3      	ldr	r3, [r6, #12]
 800de74:	4620      	mov	r0, r4
 800de76:	4798      	blx	r3
 800de78:	2800      	cmp	r0, #0
 800de7a:	f43f aee3 	beq.w	800dc44 <get_sof+0x1c>
 800de7e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800de82:	e7d0      	b.n	800de26 <get_sof+0x1fe>

0800de84 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800de88:	2a0d      	cmp	r2, #13
{
 800de8a:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800de8c:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800de8e:	eb02 0603 	add.w	r6, r2, r3
{
 800de92:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800de94:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800de96:	d96d      	bls.n	800df74 <examine_app0+0xf0>
 800de98:	7822      	ldrb	r2, [r4, #0]
 800de9a:	2a4a      	cmp	r2, #74	; 0x4a
 800de9c:	f040 808f 	bne.w	800dfbe <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800dea0:	7862      	ldrb	r2, [r4, #1]
 800dea2:	2a46      	cmp	r2, #70	; 0x46
 800dea4:	f040 808b 	bne.w	800dfbe <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800dea8:	78a2      	ldrb	r2, [r4, #2]
 800deaa:	2a49      	cmp	r2, #73	; 0x49
 800deac:	d16a      	bne.n	800df84 <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800deae:	78e2      	ldrb	r2, [r4, #3]
 800deb0:	2a46      	cmp	r2, #70	; 0x46
 800deb2:	d167      	bne.n	800df84 <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800deb4:	7922      	ldrb	r2, [r4, #4]
 800deb6:	2a00      	cmp	r2, #0
 800deb8:	d164      	bne.n	800df84 <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800deba:	2201      	movs	r2, #1
 800debc:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800dec0:	7962      	ldrb	r2, [r4, #5]
 800dec2:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800dec6:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800dec8:	f894 c006 	ldrb.w	ip, [r4, #6]
 800decc:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800ded0:	79e7      	ldrb	r7, [r4, #7]
 800ded2:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800ded6:	f894 e008 	ldrb.w	lr, [r4, #8]
 800deda:	7a67      	ldrb	r7, [r4, #9]
 800dedc:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800dee0:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800dee4:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800dee8:	7ae7      	ldrb	r7, [r4, #11]
 800deea:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800deee:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800def2:	d007      	beq.n	800df04 <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800def4:	277a      	movs	r7, #122	; 0x7a
 800def6:	f8c1 c01c 	str.w	ip, [r1, #28]
 800defa:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800defe:	f04f 31ff 	mov.w	r1, #4294967295
 800df02:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	2101      	movs	r1, #1
 800df08:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800df0c:	4628      	mov	r0, r5
 800df0e:	619a      	str	r2, [r3, #24]
 800df10:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800df14:	61da      	str	r2, [r3, #28]
 800df16:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800df1a:	621a      	str	r2, [r3, #32]
 800df1c:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800df20:	625a      	str	r2, [r3, #36]	; 0x24
 800df22:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800df26:	629a      	str	r2, [r3, #40]	; 0x28
 800df28:	2259      	movs	r2, #89	; 0x59
 800df2a:	615a      	str	r2, [r3, #20]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800df30:	7b23      	ldrb	r3, [r4, #12]
 800df32:	7b62      	ldrb	r2, [r4, #13]
 800df34:	4313      	orrs	r3, r2
 800df36:	d00a      	beq.n	800df4e <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	225c      	movs	r2, #92	; 0x5c
 800df3c:	2101      	movs	r1, #1
 800df3e:	4628      	mov	r0, r5
 800df40:	615a      	str	r2, [r3, #20]
 800df42:	7b22      	ldrb	r2, [r4, #12]
 800df44:	619a      	str	r2, [r3, #24]
 800df46:	7b62      	ldrb	r2, [r4, #13]
 800df48:	61da      	str	r2, [r3, #28]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800df4e:	7b23      	ldrb	r3, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800df50:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800df52:	7b62      	ldrb	r2, [r4, #13]
 800df54:	fb13 f302 	smulbb	r3, r3, r2
 800df58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (totallen !=
 800df5c:	42b3      	cmp	r3, r6
 800df5e:	d030      	beq.n	800dfc2 <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	225a      	movs	r2, #90	; 0x5a
 800df64:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800df68:	685b      	ldr	r3, [r3, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800df6a:	4628      	mov	r0, r5
 800df6c:	2101      	movs	r1, #1
  }
}
 800df6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800df72:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800df74:	2a05      	cmp	r2, #5
 800df76:	d922      	bls.n	800dfbe <examine_app0+0x13a>
 800df78:	7822      	ldrb	r2, [r4, #0]
 800df7a:	2a4a      	cmp	r2, #74	; 0x4a
 800df7c:	d11f      	bne.n	800dfbe <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800df7e:	7862      	ldrb	r2, [r4, #1]
 800df80:	2a46      	cmp	r2, #70	; 0x46
 800df82:	d11c      	bne.n	800dfbe <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800df84:	78a2      	ldrb	r2, [r4, #2]
 800df86:	2a58      	cmp	r2, #88	; 0x58
 800df88:	d119      	bne.n	800dfbe <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800df8a:	78e2      	ldrb	r2, [r4, #3]
 800df8c:	2a58      	cmp	r2, #88	; 0x58
 800df8e:	d116      	bne.n	800dfbe <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800df90:	7922      	ldrb	r2, [r4, #4]
 800df92:	b9a2      	cbnz	r2, 800dfbe <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800df94:	7962      	ldrb	r2, [r4, #5]
 800df96:	2a11      	cmp	r2, #17
 800df98:	d007      	beq.n	800dfaa <examine_app0+0x126>
 800df9a:	2a13      	cmp	r2, #19
 800df9c:	d007      	beq.n	800dfae <examine_app0+0x12a>
 800df9e:	2a10      	cmp	r2, #16
 800dfa0:	d107      	bne.n	800dfb2 <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800dfa2:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800dfa4:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800dfa8:	e7df      	b.n	800df6a <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800dfaa:	226f      	movs	r2, #111	; 0x6f
 800dfac:	e7fa      	b.n	800dfa4 <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800dfae:	2270      	movs	r2, #112	; 0x70
 800dfb0:	e7f8      	b.n	800dfa4 <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800dfb2:	225b      	movs	r2, #91	; 0x5b
 800dfb4:	614a      	str	r2, [r1, #20]
 800dfb6:	7962      	ldrb	r2, [r4, #5]
 800dfb8:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800dfbc:	e7d5      	b.n	800df6a <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800dfbe:	224f      	movs	r2, #79	; 0x4f
 800dfc0:	e7f0      	b.n	800dfa4 <examine_app0+0x120>
}
 800dfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dfc6 <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800dfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800dfca:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dfcc:	6804      	ldr	r4, [r0, #0]
{
 800dfce:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800dfd0:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800dfd2:	d92b      	bls.n	800e02c <examine_app14+0x66>
 800dfd4:	780f      	ldrb	r7, [r1, #0]
 800dfd6:	2f41      	cmp	r7, #65	; 0x41
 800dfd8:	d128      	bne.n	800e02c <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800dfda:	784f      	ldrb	r7, [r1, #1]
 800dfdc:	2f64      	cmp	r7, #100	; 0x64
 800dfde:	d125      	bne.n	800e02c <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800dfe0:	788f      	ldrb	r7, [r1, #2]
 800dfe2:	2f6f      	cmp	r7, #111	; 0x6f
 800dfe4:	d122      	bne.n	800e02c <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800dfe6:	78cf      	ldrb	r7, [r1, #3]
 800dfe8:	2f62      	cmp	r7, #98	; 0x62
 800dfea:	d11f      	bne.n	800e02c <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800dfec:	790f      	ldrb	r7, [r1, #4]
 800dfee:	2f65      	cmp	r7, #101	; 0x65
 800dff0:	d11c      	bne.n	800e02c <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800dff2:	79cb      	ldrb	r3, [r1, #7]
 800dff4:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dff6:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800dff8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dffc:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dffe:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800e002:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800e006:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e008:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e00a:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e00e:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e012:	234e      	movs	r3, #78	; 0x4e
 800e014:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800e018:	6163      	str	r3, [r4, #20]
 800e01a:	2101      	movs	r1, #1
 800e01c:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800e01e:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800e020:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800e024:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800e028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800e02c:	2150      	movs	r1, #80	; 0x50
 800e02e:	441a      	add	r2, r3
 800e030:	4628      	mov	r0, r5
 800e032:	4633      	mov	r3, r6
 800e034:	6161      	str	r1, [r4, #20]
 800e036:	2101      	movs	r1, #1
 800e038:	61a2      	str	r2, [r4, #24]
}
 800e03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800e03e:	4718      	bx	r3

0800e040 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800e040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800e044:	6986      	ldr	r6, [r0, #24]
{
 800e046:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800e048:	e9d6 4700 	ldrd	r4, r7, [r6]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e04c:	b947      	cbnz	r7, 800e060 <get_interesting_appn+0x20>
 800e04e:	68f3      	ldr	r3, [r6, #12]
 800e050:	4798      	blx	r3
 800e052:	b918      	cbnz	r0, 800e05c <get_interesting_appn+0x1c>
 800e054:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800e056:	b004      	add	sp, #16
 800e058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e05c:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e060:	f894 9000 	ldrb.w	r9, [r4]
 800e064:	3f01      	subs	r7, #1
 800e066:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e06a:	d02e      	beq.n	800e0ca <get_interesting_appn+0x8a>
 800e06c:	3401      	adds	r4, #1
 800e06e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e072:	3f01      	subs	r7, #1
 800e074:	444d      	add	r5, r9
  length -= 2;
 800e076:	3d02      	subs	r5, #2
  if (length >= APPN_DATA_LEN)
 800e078:	2d0d      	cmp	r5, #13
 800e07a:	dc2e      	bgt.n	800e0da <get_interesting_appn+0x9a>
  else if (length > 0)
 800e07c:	2d00      	cmp	r5, #0
 800e07e:	dd2f      	ble.n	800e0e0 <get_interesting_appn+0xa0>
    numtoread = (unsigned int) length;
 800e080:	46a9      	mov	r9, r5
  for (i = 0; i < numtoread; i++)
 800e082:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800e086:	b937      	cbnz	r7, 800e096 <get_interesting_appn+0x56>
 800e088:	68f3      	ldr	r3, [r6, #12]
 800e08a:	4640      	mov	r0, r8
 800e08c:	4798      	blx	r3
 800e08e:	2800      	cmp	r0, #0
 800e090:	d0e0      	beq.n	800e054 <get_interesting_appn+0x14>
 800e092:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e096:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e09a:	3f01      	subs	r7, #1
 800e09c:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800e0a0:	f10a 0a01 	add.w	sl, sl, #1
 800e0a4:	45d1      	cmp	r9, sl
 800e0a6:	d1ee      	bne.n	800e086 <get_interesting_appn+0x46>
  switch (cinfo->unread_marker) {
 800e0a8:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800e0ac:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800e0b0:	2ae0      	cmp	r2, #224	; 0xe0
 800e0b2:	d018      	beq.n	800e0e6 <get_interesting_appn+0xa6>
 800e0b4:	2aee      	cmp	r2, #238	; 0xee
 800e0b6:	d028      	beq.n	800e10a <get_interesting_appn+0xca>
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e0b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e0bc:	2146      	movs	r1, #70	; 0x46
 800e0be:	4640      	mov	r0, r8
 800e0c0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4798      	blx	r3
    break;
 800e0c8:	e013      	b.n	800e0f2 <get_interesting_appn+0xb2>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0ca:	68f3      	ldr	r3, [r6, #12]
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	4798      	blx	r3
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0bf      	beq.n	800e054 <get_interesting_appn+0x14>
 800e0d4:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e0d8:	e7c9      	b.n	800e06e <get_interesting_appn+0x2e>
    numtoread = APPN_DATA_LEN;
 800e0da:	f04f 090e 	mov.w	r9, #14
 800e0de:	e7d0      	b.n	800e082 <get_interesting_appn+0x42>
    numtoread = 0;
 800e0e0:	f04f 0900 	mov.w	r9, #0
 800e0e4:	e7e0      	b.n	800e0a8 <get_interesting_appn+0x68>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	464a      	mov	r2, r9
 800e0ea:	4669      	mov	r1, sp
 800e0ec:	4640      	mov	r0, r8
 800e0ee:	f7ff fec9 	bl	800de84 <examine_app0>
  if (length > 0)
 800e0f2:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800e0f4:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800e0f8:	dd05      	ble.n	800e106 <get_interesting_appn+0xc6>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800e0fa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e0fe:	4629      	mov	r1, r5
 800e100:	4640      	mov	r0, r8
 800e102:	691b      	ldr	r3, [r3, #16]
 800e104:	4798      	blx	r3
  return TRUE;
 800e106:	2001      	movs	r0, #1
 800e108:	e7a5      	b.n	800e056 <get_interesting_appn+0x16>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800e10a:	462b      	mov	r3, r5
 800e10c:	464a      	mov	r2, r9
 800e10e:	4669      	mov	r1, sp
 800e110:	4640      	mov	r0, r8
 800e112:	f7ff ff58 	bl	800dfc6 <examine_app14>
    break;
 800e116:	e7ec      	b.n	800e0f2 <get_interesting_appn+0xb2>

0800e118 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800e118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800e11c:	6984      	ldr	r4, [r0, #24]
{
 800e11e:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800e120:	e9d4 5300 	ldrd	r5, r3, [r4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e124:	b93b      	cbnz	r3, 800e136 <skip_variable+0x1e>
 800e126:	68e3      	ldr	r3, [r4, #12]
 800e128:	4798      	blx	r3
 800e12a:	b910      	cbnz	r0, 800e132 <skip_variable+0x1a>
 800e12c:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800e12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e132:	e9d4 5300 	ldrd	r5, r3, [r4]
 800e136:	f895 9000 	ldrb.w	r9, [r5]
 800e13a:	f1b3 0801 	subs.w	r8, r3, #1
 800e13e:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e142:	d01c      	beq.n	800e17e <skip_variable+0x66>
 800e144:	3501      	adds	r5, #1
 800e146:	f815 6b01 	ldrb.w	r6, [r5], #1
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e14a:	235d      	movs	r3, #93	; 0x5d
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e150:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e152:	4638      	mov	r0, r7
 800e154:	6153      	str	r3, [r2, #20]
  length -= 2;
 800e156:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e158:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e15c:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800e160:	6853      	ldr	r3, [r2, #4]
 800e162:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e164:	f108 33ff 	add.w	r3, r8, #4294967295
  if (length > 0)
 800e168:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800e16a:	6025      	str	r5, [r4, #0]
 800e16c:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800e16e:	dd04      	ble.n	800e17a <skip_variable+0x62>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	4631      	mov	r1, r6
 800e174:	4638      	mov	r0, r7
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	4798      	blx	r3
  return TRUE;
 800e17a:	2001      	movs	r0, #1
 800e17c:	e7d7      	b.n	800e12e <skip_variable+0x16>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e17e:	68e3      	ldr	r3, [r4, #12]
 800e180:	4638      	mov	r0, r7
 800e182:	4798      	blx	r3
 800e184:	2800      	cmp	r0, #0
 800e186:	d0d1      	beq.n	800e12c <skip_variable+0x14>
 800e188:	e9d4 5800 	ldrd	r5, r8, [r4]
 800e18c:	e7db      	b.n	800e146 <skip_variable+0x2e>

0800e18e <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800e18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800e192:	6986      	ldr	r6, [r0, #24]
{
 800e194:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800e196:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800e19a:	b987      	cbnz	r7, 800e1be <next_marker+0x30>
 800e19c:	68f3      	ldr	r3, [r6, #12]
 800e19e:	4640      	mov	r0, r8
 800e1a0:	4798      	blx	r3
 800e1a2:	b950      	cbnz	r0, 800e1ba <next_marker+0x2c>
 800e1a4:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800e1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800e1aa:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800e1ae:	6993      	ldr	r3, [r2, #24]
 800e1b0:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800e1b2:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800e1b4:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e1b8:	e7ef      	b.n	800e19a <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800e1ba:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e1be:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1c2:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800e1c4:	2bff      	cmp	r3, #255	; 0xff
 800e1c6:	d1f0      	bne.n	800e1aa <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800e1c8:	b937      	cbnz	r7, 800e1d8 <next_marker+0x4a>
 800e1ca:	68f3      	ldr	r3, [r6, #12]
 800e1cc:	4640      	mov	r0, r8
 800e1ce:	4798      	blx	r3
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d0e7      	beq.n	800e1a4 <next_marker+0x16>
 800e1d4:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e1d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e1dc:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800e1de:	2dff      	cmp	r5, #255	; 0xff
 800e1e0:	d0f2      	beq.n	800e1c8 <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800e1e2:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800e1e6:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800e1e8:	b90d      	cbnz	r5, 800e1ee <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800e1ea:	3302      	adds	r3, #2
 800e1ec:	e7e1      	b.n	800e1b2 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800e1ee:	b173      	cbz	r3, 800e20e <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800e1f0:	f8d8 2000 	ldr.w	r2, [r8]
 800e1f4:	2177      	movs	r1, #119	; 0x77
 800e1f6:	4640      	mov	r0, r8
 800e1f8:	61d5      	str	r5, [r2, #28]
 800e1fa:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e1fe:	6853      	ldr	r3, [r2, #4]
 800e200:	f04f 31ff 	mov.w	r1, #4294967295
 800e204:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800e206:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800e20a:	2200      	movs	r2, #0
 800e20c:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800e20e:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800e212:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e214:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800e218:	e7c5      	b.n	800e1a6 <next_marker+0x18>

0800e21a <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800e21a:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800e21e:	b510      	push	{r4, lr}
 800e220:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800e222:	b1e3      	cbz	r3, 800e25e <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e224:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800e228:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e22c:	6959      	ldr	r1, [r3, #20]
 800e22e:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800e232:	429a      	cmp	r2, r3
 800e234:	d119      	bne.n	800e26a <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800e236:	6823      	ldr	r3, [r4, #0]
 800e238:	2264      	movs	r2, #100	; 0x64
 800e23a:	4620      	mov	r0, r4
 800e23c:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	2103      	movs	r1, #3
 800e244:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800e24c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800e250:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800e252:	6953      	ldr	r3, [r2, #20]
 800e254:	3301      	adds	r3, #1
 800e256:	f003 0307 	and.w	r3, r3, #7
 800e25a:	6153      	str	r3, [r2, #20]
  return TRUE;
 800e25c:	e004      	b.n	800e268 <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800e25e:	f7ff ff96 	bl	800e18e <next_marker>
 800e262:	2800      	cmp	r0, #0
 800e264:	d1de      	bne.n	800e224 <read_restart_marker+0xa>
      return FALSE;
 800e266:	2000      	movs	r0, #0
}
 800e268:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800e26a:	69a3      	ldr	r3, [r4, #24]
 800e26c:	4620      	mov	r0, r4
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	4798      	blx	r3
 800e272:	2800      	cmp	r0, #0
 800e274:	d1ea      	bne.n	800e24c <read_restart_marker+0x32>
 800e276:	e7f6      	b.n	800e266 <read_restart_marker+0x4c>

0800e278 <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800e278:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800e27a:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800e27e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800e282:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800e286:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800e28a:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800e28c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800e290:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800e294:	4770      	bx	lr

0800e296 <get_dht>:
{
 800e296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800e29a:	6987      	ldr	r7, [r0, #24]
{
 800e29c:	b0c9      	sub	sp, #292	; 0x124
 800e29e:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800e2a0:	e9d7 4600 	ldrd	r4, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e2a4:	b946      	cbnz	r6, 800e2b8 <get_dht+0x22>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	4798      	blx	r3
 800e2aa:	b918      	cbnz	r0, 800e2b4 <get_dht+0x1e>
 800e2ac:	2000      	movs	r0, #0
}
 800e2ae:	b049      	add	sp, #292	; 0x124
 800e2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e2b4:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e2b8:	f894 8000 	ldrb.w	r8, [r4]
 800e2bc:	3e01      	subs	r6, #1
 800e2be:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e2c2:	d018      	beq.n	800e2f6 <get_dht+0x60>
 800e2c4:	3401      	adds	r4, #1
 800e2c6:	f814 9b01 	ldrb.w	r9, [r4], #1
 800e2ca:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e2cc:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e2d0:	44c1      	add	r9, r8
  length -= 2;
 800e2d2:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800e2d6:	f1b9 0f10 	cmp.w	r9, #16
 800e2da:	dc14      	bgt.n	800e306 <get_dht+0x70>
  if (length != 0)
 800e2dc:	f1b9 0f00 	cmp.w	r9, #0
 800e2e0:	d005      	beq.n	800e2ee <get_dht+0x58>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e2e2:	682b      	ldr	r3, [r5, #0]
 800e2e4:	220c      	movs	r2, #12
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	615a      	str	r2, [r3, #20]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4798      	blx	r3
  return TRUE;
 800e2ee:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e2f0:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800e2f4:	e7db      	b.n	800e2ae <get_dht+0x18>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	4798      	blx	r3
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d0d5      	beq.n	800e2ac <get_dht+0x16>
 800e300:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e304:	e7df      	b.n	800e2c6 <get_dht+0x30>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e306:	b936      	cbnz	r6, 800e316 <get_dht+0x80>
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4628      	mov	r0, r5
 800e30c:	4790      	blx	r2
 800e30e:	2800      	cmp	r0, #0
 800e310:	d0cc      	beq.n	800e2ac <get_dht+0x16>
 800e312:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e316:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e31a:	2152      	movs	r1, #82	; 0x52
 800e31c:	682a      	ldr	r2, [r5, #0]
 800e31e:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800e320:	f8cd 8000 	str.w	r8, [sp]
 800e324:	3e01      	subs	r6, #1
    count = 0;
 800e326:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e32a:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800e32e:	6852      	ldr	r2, [r2, #4]
 800e330:	2101      	movs	r1, #1
 800e332:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800e334:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e336:	b946      	cbnz	r6, 800e34a <get_dht+0xb4>
 800e338:	68f9      	ldr	r1, [r7, #12]
 800e33a:	4628      	mov	r0, r5
 800e33c:	9201      	str	r2, [sp, #4]
 800e33e:	4788      	blx	r1
 800e340:	2800      	cmp	r0, #0
 800e342:	d0b3      	beq.n	800e2ac <get_dht+0x16>
 800e344:	9a01      	ldr	r2, [sp, #4]
 800e346:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e34e:	3e01      	subs	r6, #1
 800e350:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800e354:	3201      	adds	r2, #1
      count += bits[i];
 800e356:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800e358:	2a11      	cmp	r2, #17
 800e35a:	d1ec      	bne.n	800e336 <get_dht+0xa0>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e35c:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800e35e:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e362:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800e366:	f04f 0958 	mov.w	r9, #88	; 0x58
 800e36a:	4628      	mov	r0, r5
    length -= 1 + 16;
 800e36c:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e36e:	6191      	str	r1, [r2, #24]
 800e370:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800e374:	f8c2 9014 	str.w	r9, [r2, #20]
 800e378:	61d1      	str	r1, [r2, #28]
 800e37a:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800e37e:	6211      	str	r1, [r2, #32]
 800e380:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800e384:	6251      	str	r1, [r2, #36]	; 0x24
 800e386:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800e38a:	6291      	str	r1, [r2, #40]	; 0x28
 800e38c:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800e390:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e392:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800e396:	6311      	str	r1, [r2, #48]	; 0x30
 800e398:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800e39c:	6351      	str	r1, [r2, #52]	; 0x34
 800e39e:	2102      	movs	r1, #2
 800e3a0:	6852      	ldr	r2, [r2, #4]
 800e3a2:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e3a4:	682a      	ldr	r2, [r5, #0]
 800e3a6:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	f8c2 9014 	str.w	r9, [r2, #20]
 800e3b0:	6191      	str	r1, [r2, #24]
 800e3b2:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800e3b6:	61d1      	str	r1, [r2, #28]
 800e3b8:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800e3bc:	6211      	str	r1, [r2, #32]
 800e3be:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800e3c2:	6251      	str	r1, [r2, #36]	; 0x24
 800e3c4:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800e3c8:	6291      	str	r1, [r2, #40]	; 0x28
 800e3ca:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e3ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e3d0:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800e3d4:	6311      	str	r1, [r2, #48]	; 0x30
 800e3d6:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800e3da:	6351      	str	r1, [r2, #52]	; 0x34
 800e3dc:	2102      	movs	r1, #2
 800e3de:	6852      	ldr	r2, [r2, #4]
 800e3e0:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800e3e2:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800e3e6:	dc02      	bgt.n	800e3ee <get_dht+0x158>
 800e3e8:	9b01      	ldr	r3, [sp, #4]
 800e3ea:	4553      	cmp	r3, sl
 800e3ec:	da05      	bge.n	800e3fa <get_dht+0x164>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e3ee:	682a      	ldr	r2, [r5, #0]
 800e3f0:	2109      	movs	r1, #9
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	6151      	str	r1, [r2, #20]
 800e3f6:	6812      	ldr	r2, [r2, #0]
 800e3f8:	4790      	blx	r2
 800e3fa:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e3fe:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800e400:	45d1      	cmp	r9, sl
 800e402:	d13f      	bne.n	800e484 <get_dht+0x1ee>
    if (index & 0x10) {		/* AC table definition */
 800e404:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800e408:	9b01      	ldr	r3, [sp, #4]
 800e40a:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800e40e:	bf17      	itett	ne
 800e410:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e414:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800e418:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800e41c:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e41e:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e420:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e424:	2b03      	cmp	r3, #3
 800e426:	d906      	bls.n	800e436 <get_dht+0x1a0>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800e428:	682a      	ldr	r2, [r5, #0]
 800e42a:	211f      	movs	r1, #31
 800e42c:	4628      	mov	r0, r5
 800e42e:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e432:	6812      	ldr	r2, [r2, #0]
 800e434:	4790      	blx	r2
    if (*htblptr == NULL)
 800e436:	f8d8 2000 	ldr.w	r2, [r8]
 800e43a:	b922      	cbnz	r2, 800e446 <get_dht+0x1b0>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800e43c:	4628      	mov	r0, r5
 800e43e:	f7fb fbb4 	bl	8009baa <jpeg_alloc_huff_table>
 800e442:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800e446:	2200      	movs	r2, #0
 800e448:	46de      	mov	lr, fp
 800e44a:	f10d 0a1c 	add.w	sl, sp, #28
 800e44e:	f88b 2000 	strb.w	r2, [fp]
 800e452:	f8d8 2000 	ldr.w	r2, [r8]
 800e456:	46f4      	mov	ip, lr
 800e458:	3208      	adds	r2, #8
 800e45a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800e45e:	45d4      	cmp	ip, sl
 800e460:	f842 0c08 	str.w	r0, [r2, #-8]
 800e464:	f842 1c04 	str.w	r1, [r2, #-4]
 800e468:	46e6      	mov	lr, ip
 800e46a:	d1f4      	bne.n	800e456 <get_dht+0x1c0>
 800e46c:	f89c 1000 	ldrb.w	r1, [ip]
 800e470:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800e472:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e476:	f8d8 0000 	ldr.w	r0, [r8]
 800e47a:	a908      	add	r1, sp, #32
 800e47c:	3011      	adds	r0, #17
 800e47e:	f01c fa38 	bl	802a8f2 <memcpy>
 800e482:	e728      	b.n	800e2d6 <get_dht+0x40>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e484:	b946      	cbnz	r6, 800e498 <get_dht+0x202>
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	4628      	mov	r0, r5
 800e48a:	4790      	blx	r2
 800e48c:	2800      	cmp	r0, #0
 800e48e:	f43f af0d 	beq.w	800e2ac <get_dht+0x16>
 800e492:	a908      	add	r1, sp, #32
 800e494:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e498:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e49c:	3e01      	subs	r6, #1
 800e49e:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800e4a2:	f109 0901 	add.w	r9, r9, #1
 800e4a6:	e7ab      	b.n	800e400 <get_dht+0x16a>

0800e4a8 <read_markers>:
{
 800e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800e4b0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e4b4:	bb5b      	cbnz	r3, 800e50e <read_markers+0x66>
      if (! cinfo->marker->saw_SOI) {
 800e4b6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d17b      	bne.n	800e5b8 <read_markers+0x110>
  INPUT_VARS(cinfo);
 800e4c0:	69a7      	ldr	r7, [r4, #24]
 800e4c2:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4c6:	b933      	cbnz	r3, 800e4d6 <read_markers+0x2e>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	4798      	blx	r3
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d077      	beq.n	800e5c2 <read_markers+0x11a>
 800e4d2:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e4d6:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4d8:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e4dc:	d065      	beq.n	800e5aa <read_markers+0x102>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e4de:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e4e0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e4e4:	f103 36ff 	add.w	r6, r3, #4294967295
 800e4e8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e4ec:	d102      	bne.n	800e4f4 <read_markers+0x4c>
 800e4ee:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800e4f2:	d008      	beq.n	800e506 <read_markers+0x5e>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800e4f4:	6823      	ldr	r3, [r4, #0]
 800e4f6:	2237      	movs	r2, #55	; 0x37
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f8c3 901c 	str.w	r9, [r3, #28]
 800e4fe:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800e506:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800e50a:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800e50e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e512:	2b01      	cmp	r3, #1
 800e514:	f000 83ba 	beq.w	800ec8c <read_markers+0x7e4>
 800e518:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800e51c:	2a3e      	cmp	r2, #62	; 0x3e
 800e51e:	f200 83c2 	bhi.w	800eca6 <read_markers+0x7fe>
 800e522:	2a3e      	cmp	r2, #62	; 0x3e
 800e524:	f200 83bf 	bhi.w	800eca6 <read_markers+0x7fe>
 800e528:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e52c:	0094008b 	.word	0x0094008b
 800e530:	00a00097 	.word	0x00a00097
 800e534:	00a00232 	.word	0x00a00232
 800e538:	00a000a0 	.word	0x00a000a0
 800e53c:	009b00a0 	.word	0x009b00a0
 800e540:	00a0009d 	.word	0x00a0009d
 800e544:	00a001b9 	.word	0x00a001b9
 800e548:	00a000a0 	.word	0x00a000a0
 800e54c:	03b003b0 	.word	0x03b003b0
 800e550:	03b003b0 	.word	0x03b003b0
 800e554:	03b003b0 	.word	0x03b003b0
 800e558:	03b003b0 	.word	0x03b003b0
 800e55c:	01ad004d 	.word	0x01ad004d
 800e560:	023600a8 	.word	0x023600a8
 800e564:	035203b9 	.word	0x035203b9
 800e568:	03bd03bd 	.word	0x03bd03bd
 800e56c:	03a403a4 	.word	0x03a403a4
 800e570:	03a403a4 	.word	0x03a403a4
 800e574:	03a403a4 	.word	0x03a403a4
 800e578:	03a403a4 	.word	0x03a403a4
 800e57c:	03a403a4 	.word	0x03a403a4
 800e580:	03a403a4 	.word	0x03a403a4
 800e584:	03a403a4 	.word	0x03a403a4
 800e588:	03a403a4 	.word	0x03a403a4
 800e58c:	03bd03bd 	.word	0x03bd03bd
 800e590:	03bd03bd 	.word	0x03bd03bd
 800e594:	03bd03bd 	.word	0x03bd03bd
 800e598:	03bd03bd 	.word	0x03bd03bd
 800e59c:	03bd03bd 	.word	0x03bd03bd
 800e5a0:	03bd03bd 	.word	0x03bd03bd
 800e5a4:	03bd03bd 	.word	0x03bd03bd
 800e5a8:	03ac      	.short	0x03ac
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	4798      	blx	r3
 800e5b0:	b138      	cbz	r0, 800e5c2 <read_markers+0x11a>
 800e5b2:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e5b6:	e793      	b.n	800e4e0 <read_markers+0x38>
	if (! next_marker(cinfo))
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7ff fde8 	bl	800e18e <next_marker>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d1a5      	bne.n	800e50e <read_markers+0x66>
	  return JPEG_SUSPENDED;
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e0ea      	b.n	800e79c <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800e5c6:	6823      	ldr	r3, [r4, #0]
 800e5c8:	2268      	movs	r2, #104	; 0x68
 800e5ca:	2101      	movs	r1, #1
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	615a      	str	r2, [r3, #20]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800e5d4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	b12b      	cbz	r3, 800e5e8 <read_markers+0x140>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	223f      	movs	r2, #63	; 0x3f
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	615a      	str	r2, [r3, #20]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800e5e8:	2210      	movs	r2, #16
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e5f0:	f01c f89e 	bl	802a730 <memset>
    cinfo->arith_dc_U[i] = 1;
 800e5f4:	2210      	movs	r2, #16
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800e5fc:	f01c f898 	bl	802a730 <memset>
    cinfo->arith_ac_K[i] = 5;
 800e600:	2210      	movs	r2, #16
 800e602:	2105      	movs	r1, #5
 800e604:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800e608:	f01c f892 	bl	802a730 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e60c:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e610:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e612:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800e616:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e61a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800e61e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800e622:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800e626:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800e62a:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800e62e:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800e632:	2201      	movs	r2, #1
 800e634:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e638:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800e640:	e736      	b.n	800e4b0 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800e642:	2300      	movs	r3, #0
 800e644:	2101      	movs	r1, #1
 800e646:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e648:	4620      	mov	r0, r4
 800e64a:	f7ff faed 	bl	800dc28 <get_sof>
      if (! skip_variable(cinfo))
 800e64e:	2800      	cmp	r0, #0
 800e650:	d1f3      	bne.n	800e63a <read_markers+0x192>
 800e652:	e7b6      	b.n	800e5c2 <read_markers+0x11a>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800e654:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e656:	2200      	movs	r2, #0
 800e658:	e001      	b.n	800e65e <read_markers+0x1b6>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800e65a:	2300      	movs	r3, #0
 800e65c:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e65e:	2100      	movs	r1, #0
 800e660:	e7f2      	b.n	800e648 <read_markers+0x1a0>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e662:	2301      	movs	r3, #1
 800e664:	e7f7      	b.n	800e656 <read_markers+0x1ae>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e666:	2301      	movs	r3, #1
 800e668:	461a      	mov	r2, r3
 800e66a:	e7f8      	b.n	800e65e <read_markers+0x1b6>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800e66c:	6822      	ldr	r2, [r4, #0]
 800e66e:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e670:	4620      	mov	r0, r4
 800e672:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e676:	6813      	ldr	r3, [r2, #0]
 800e678:	4798      	blx	r3
      break;
 800e67a:	e7de      	b.n	800e63a <read_markers+0x192>
  if (! cinfo->marker->saw_SOF)
 800e67c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800e680:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800e682:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800e684:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800e688:	b92b      	cbnz	r3, 800e696 <read_markers+0x1ee>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800e68a:	6823      	ldr	r3, [r4, #0]
 800e68c:	2240      	movs	r2, #64	; 0x40
 800e68e:	4620      	mov	r0, r4
 800e690:	615a      	str	r2, [r3, #20]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e696:	b936      	cbnz	r6, 800e6a6 <read_markers+0x1fe>
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	4620      	mov	r0, r4
 800e69c:	4798      	blx	r3
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d08f      	beq.n	800e5c2 <read_markers+0x11a>
 800e6a2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e6a6:	f895 9000 	ldrb.w	r9, [r5]
 800e6aa:	3e01      	subs	r6, #1
 800e6ac:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e6b0:	d077      	beq.n	800e7a2 <read_markers+0x2fa>
 800e6b2:	3501      	adds	r5, #1
 800e6b4:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e6b8:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e6ba:	44c8      	add	r8, r9
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e6bc:	d07a      	beq.n	800e7b4 <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e6be:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e6c0:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e6c4:	2269      	movs	r2, #105	; 0x69
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e6cc:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e6ce:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800e6d6:	f109 0303 	add.w	r3, r9, #3
 800e6da:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800e6de:	d108      	bne.n	800e6f2 <read_markers+0x24a>
 800e6e0:	f1b9 0f04 	cmp.w	r9, #4
 800e6e4:	dc05      	bgt.n	800e6f2 <read_markers+0x24a>
 800e6e6:	f1b9 0f00 	cmp.w	r9, #0
 800e6ea:	d108      	bne.n	800e6fe <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800e6ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e6f0:	b92b      	cbnz	r3, 800e6fe <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	220c      	movs	r2, #12
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	615a      	str	r2, [r3, #20]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800e6fe:	f504 73a8 	add.w	r3, r4, #336	; 0x150
  for (i = 0; i < n; i++) {
 800e702:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800e706:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800e70a:	9301      	str	r3, [sp, #4]
 800e70c:	45d1      	cmp	r9, sl
 800e70e:	dc5a      	bgt.n	800e7c6 <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e710:	b93e      	cbnz	r6, 800e722 <read_markers+0x27a>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	4620      	mov	r0, r4
 800e716:	4798      	blx	r3
 800e718:	2800      	cmp	r0, #0
 800e71a:	f43f af52 	beq.w	800e5c2 <read_markers+0x11a>
 800e71e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e722:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e724:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e726:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800e72a:	f000 809a 	beq.w	800e862 <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e72e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e730:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e732:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e734:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800e738:	f000 809c 	beq.w	800e874 <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e73c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e73e:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e742:	2101      	movs	r1, #1
 800e744:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800e746:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800e748:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800e74a:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800e74e:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800e752:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e756:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800e75a:	6823      	ldr	r3, [r4, #0]
 800e75c:	619a      	str	r2, [r3, #24]
 800e75e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800e762:	61da      	str	r2, [r3, #28]
 800e764:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800e768:	621a      	str	r2, [r3, #32]
 800e76a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800e76e:	625a      	str	r2, [r3, #36]	; 0x24
 800e770:	226b      	movs	r2, #107	; 0x6b
 800e772:	615a      	str	r2, [r3, #20]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800e778:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e77c:	2200      	movs	r2, #0
 800e77e:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800e780:	f1b9 0f00 	cmp.w	r9, #0
 800e784:	d004      	beq.n	800e790 <read_markers+0x2e8>
 800e786:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e78a:	3301      	adds	r3, #1
 800e78c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800e790:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800e792:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e794:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800e798:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800e79c:	b005      	add	sp, #20
 800e79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	4798      	blx	r3
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	f43f af0a 	beq.w	800e5c2 <read_markers+0x11a>
 800e7ae:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e7b2:	e77f      	b.n	800e6b4 <read_markers+0x20c>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	4798      	blx	r3
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	f43f af01 	beq.w	800e5c2 <read_markers+0x11a>
 800e7c0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e7c4:	e77c      	b.n	800e6c0 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e7c6:	b93e      	cbnz	r6, 800e7d8 <read_markers+0x330>
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	4798      	blx	r3
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	f43f aef7 	beq.w	800e5c2 <read_markers+0x11a>
 800e7d4:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e7d8:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e7da:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e7de:	d02f      	beq.n	800e840 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e7e0:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e7e2:	3e01      	subs	r6, #1
 800e7e4:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e7e8:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e7f0:	4290      	cmp	r0, r2
 800e7f2:	db2e      	blt.n	800e852 <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800e7f4:	6821      	ldr	r1, [r4, #0]
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	9302      	str	r3, [sp, #8]
 800e7fa:	2304      	movs	r3, #4
 800e7fc:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800e800:	6809      	ldr	r1, [r1, #0]
 800e802:	4788      	blx	r1
 800e804:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800e806:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e808:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800e80a:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e80e:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800e810:	f842 8f04 	str.w	r8, [r2, #4]!
  for (i = 0; i < n; i++) {
 800e814:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e818:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e81c:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800e81e:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e822:	f8c1 b018 	str.w	fp, [r1, #24]
 800e826:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800e82a:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e82c:	61cb      	str	r3, [r1, #28]
 800e82e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e832:	620b      	str	r3, [r1, #32]
 800e834:	236a      	movs	r3, #106	; 0x6a
 800e836:	614b      	str	r3, [r1, #20]
 800e838:	684b      	ldr	r3, [r1, #4]
 800e83a:	2101      	movs	r1, #1
 800e83c:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800e83e:	e765      	b.n	800e70c <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4620      	mov	r0, r4
 800e844:	4798      	blx	r3
 800e846:	2800      	cmp	r0, #0
 800e848:	f43f aebb 	beq.w	800e5c2 <read_markers+0x11a>
 800e84c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e850:	e7c7      	b.n	800e7e2 <read_markers+0x33a>
      if (cc == compptr->component_id)
 800e852:	f8d8 1000 	ldr.w	r1, [r8]
 800e856:	458b      	cmp	fp, r1
 800e858:	d0d5      	beq.n	800e806 <read_markers+0x35e>
	 ci++, compptr++) {
 800e85a:	3001      	adds	r0, #1
 800e85c:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e860:	e7c6      	b.n	800e7f0 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	4620      	mov	r0, r4
 800e866:	4798      	blx	r3
 800e868:	2800      	cmp	r0, #0
 800e86a:	f43f aeaa 	beq.w	800e5c2 <read_markers+0x11a>
 800e86e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e872:	e75d      	b.n	800e730 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	4620      	mov	r0, r4
 800e878:	4798      	blx	r3
 800e87a:	2800      	cmp	r0, #0
 800e87c:	f43f aea1 	beq.w	800e5c2 <read_markers+0x11a>
 800e880:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e884:	e75b      	b.n	800e73e <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	2257      	movs	r2, #87	; 0x57
 800e88a:	4620      	mov	r0, r4
 800e88c:	2101      	movs	r1, #1
 800e88e:	615a      	str	r2, [r3, #20]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800e894:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800e896:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800e898:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800e89c:	e77e      	b.n	800e79c <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800e89e:	69a7      	ldr	r7, [r4, #24]
 800e8a0:	e9d7 5600 	ldrd	r5, r6, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e8a4:	b93e      	cbnz	r6, 800e8b6 <read_markers+0x40e>
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	4798      	blx	r3
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	f43f ae88 	beq.w	800e5c2 <read_markers+0x11a>
 800e8b2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e8b6:	f895 8000 	ldrb.w	r8, [r5]
 800e8ba:	3e01      	subs	r6, #1
 800e8bc:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e8c0:	d015      	beq.n	800e8ee <read_markers+0x446>
 800e8c2:	3501      	adds	r5, #1
 800e8c4:	f815 9b01 	ldrb.w	r9, [r5], #1
 800e8c8:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e8ca:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e8ce:	44c1      	add	r9, r8
  length -= 2;
 800e8d0:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800e8d4:	f1b9 0f00 	cmp.w	r9, #0
 800e8d8:	dc12      	bgt.n	800e900 <read_markers+0x458>
  if (length != 0)
 800e8da:	d005      	beq.n	800e8e8 <read_markers+0x440>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	220c      	movs	r2, #12
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	615a      	str	r2, [r3, #20]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800e8e8:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800e8ea:	607e      	str	r6, [r7, #4]
  return TRUE;
 800e8ec:	e6a5      	b.n	800e63a <read_markers+0x192>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	4798      	blx	r3
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	f43f ae64 	beq.w	800e5c2 <read_markers+0x11a>
 800e8fa:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e8fe:	e7e1      	b.n	800e8c4 <read_markers+0x41c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e900:	b93e      	cbnz	r6, 800e912 <read_markers+0x46a>
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	4620      	mov	r0, r4
 800e906:	4798      	blx	r3
 800e908:	2800      	cmp	r0, #0
 800e90a:	f43f ae5a 	beq.w	800e5c2 <read_markers+0x11a>
 800e90e:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e912:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800e914:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e918:	d01f      	beq.n	800e95a <read_markers+0x4b2>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e91a:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e91c:	6822      	ldr	r2, [r4, #0]
 800e91e:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800e920:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e924:	2101      	movs	r1, #1
 800e926:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800e928:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e92a:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800e92e:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e932:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800e936:	6852      	ldr	r2, [r2, #4]
 800e938:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800e93a:	f1b8 0f1f 	cmp.w	r8, #31
 800e93e:	d905      	bls.n	800e94c <read_markers+0x4a4>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e940:	6822      	ldr	r2, [r4, #0]
 800e942:	4620      	mov	r0, r4
 800e944:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800e948:	6812      	ldr	r2, [r2, #0]
 800e94a:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800e94c:	f1b8 0f0f 	cmp.w	r8, #15
 800e950:	44a0      	add	r8, r4
 800e952:	dd0b      	ble.n	800e96c <read_markers+0x4c4>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800e954:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800e958:	e7bc      	b.n	800e8d4 <read_markers+0x42c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	4620      	mov	r0, r4
 800e95e:	4798      	blx	r3
 800e960:	2800      	cmp	r0, #0
 800e962:	f43f ae2e 	beq.w	800e5c2 <read_markers+0x11a>
 800e966:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e96a:	e7d7      	b.n	800e91c <read_markers+0x474>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e96c:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e970:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e974:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e976:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e97a:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e97e:	d9a9      	bls.n	800e8d4 <read_markers+0x42c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800e980:	6822      	ldr	r2, [r4, #0]
 800e982:	211e      	movs	r1, #30
 800e984:	4620      	mov	r0, r4
 800e986:	6813      	ldr	r3, [r2, #0]
 800e988:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800e98c:	4798      	blx	r3
 800e98e:	e7a1      	b.n	800e8d4 <read_markers+0x42c>
      if (! get_dht(cinfo))
 800e990:	4620      	mov	r0, r4
 800e992:	f7ff fc80 	bl	800e296 <get_dht>
 800e996:	e65a      	b.n	800e64e <read_markers+0x1a6>
  INPUT_VARS(cinfo);
 800e998:	69a6      	ldr	r6, [r4, #24]
 800e99a:	e9d6 5300 	ldrd	r5, r3, [r6]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e99e:	b93b      	cbnz	r3, 800e9b0 <read_markers+0x508>
 800e9a0:	68f3      	ldr	r3, [r6, #12]
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	4798      	blx	r3
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f43f ae0b 	beq.w	800e5c2 <read_markers+0x11a>
 800e9ac:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e9b0:	782f      	ldrb	r7, [r5, #0]
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	ea4f 2707 	mov.w	r7, r7, lsl #8
 800e9b8:	d014      	beq.n	800e9e4 <read_markers+0x53c>
 800e9ba:	3501      	adds	r5, #1
 800e9bc:	f815 8b01 	ldrb.w	r8, [r5], #1
 800e9c0:	f103 3aff 	add.w	sl, r3, #4294967295
 800e9c4:	44b8      	add	r8, r7
  length -= 2;
 800e9c6:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800e9ca:	f1b8 0f00 	cmp.w	r8, #0
 800e9ce:	dc12      	bgt.n	800e9f6 <read_markers+0x54e>
  if (length != 0)
 800e9d0:	d005      	beq.n	800e9de <read_markers+0x536>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e9d2:	6822      	ldr	r2, [r4, #0]
 800e9d4:	210c      	movs	r1, #12
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	6151      	str	r1, [r2, #20]
 800e9da:	6812      	ldr	r2, [r2, #0]
 800e9dc:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800e9de:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800e9e2:	e62a      	b.n	800e63a <read_markers+0x192>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e9e4:	68f3      	ldr	r3, [r6, #12]
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	4798      	blx	r3
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	f43f ade9 	beq.w	800e5c2 <read_markers+0x11a>
 800e9f0:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e9f4:	e7e2      	b.n	800e9bc <read_markers+0x514>
    length--;
 800e9f6:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800e9fa:	f1ba 0f00 	cmp.w	sl, #0
 800e9fe:	d107      	bne.n	800ea10 <read_markers+0x568>
 800ea00:	68f3      	ldr	r3, [r6, #12]
 800ea02:	4620      	mov	r0, r4
 800ea04:	4798      	blx	r3
 800ea06:	2800      	cmp	r0, #0
 800ea08:	f43f addb 	beq.w	800e5c2 <read_markers+0x11a>
 800ea0c:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800ea10:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800ea14:	2153      	movs	r1, #83	; 0x53
 800ea16:	6822      	ldr	r2, [r4, #0]
 800ea18:	4620      	mov	r0, r4
    prec = n >> 4;
 800ea1a:	ea4f 1329 	mov.w	r3, r9, asr #4
 800ea1e:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800ea22:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800ea26:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800ea28:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800ea2a:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800ea2e:	6852      	ldr	r2, [r2, #4]
 800ea30:	2101      	movs	r1, #1
 800ea32:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800ea34:	f019 0f0c 	tst.w	r9, #12
 800ea38:	d006      	beq.n	800ea48 <read_markers+0x5a0>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800ea3a:	6822      	ldr	r2, [r4, #0]
 800ea3c:	2120      	movs	r1, #32
 800ea3e:	4620      	mov	r0, r4
 800ea40:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800ea44:	6812      	ldr	r2, [r2, #0]
 800ea46:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800ea48:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800ea4c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ea50:	b922      	cbnz	r2, 800ea5c <read_markers+0x5b4>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7fb f89f 	bl	8009b96 <jpeg_alloc_quant_table>
 800ea58:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800ea5c:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800ea5e:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d057      	beq.n	800eb16 <read_markers+0x66e>
      if (length < DCTSIZE2 * 2) {
 800ea66:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800ea6a:	dc6c      	bgt.n	800eb46 <read_markers+0x69e>
 800ea6c:	f1ab 0202 	sub.w	r2, fp, #2
 800ea70:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800ea74:	2001      	movs	r0, #1
 800ea76:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800ea7a:	4291      	cmp	r1, r2
 800ea7c:	d1fb      	bne.n	800ea76 <read_markers+0x5ce>
	count = length >> 1;
 800ea7e:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800ea82:	f1b9 0f19 	cmp.w	r9, #25
 800ea86:	d062      	beq.n	800eb4e <read_markers+0x6a6>
 800ea88:	dc53      	bgt.n	800eb32 <read_markers+0x68a>
 800ea8a:	f1b9 0f09 	cmp.w	r9, #9
 800ea8e:	d060      	beq.n	800eb52 <read_markers+0x6aa>
 800ea90:	f1b9 0f10 	cmp.w	r9, #16
 800ea94:	d05f      	beq.n	800eb56 <read_markers+0x6ae>
    default:    natural_order = jpeg_natural_order;  break;
 800ea96:	4f85      	ldr	r7, [pc, #532]	; (800ecac <read_markers+0x804>)
 800ea98:	4a85      	ldr	r2, [pc, #532]	; (800ecb0 <read_markers+0x808>)
 800ea9a:	f1b9 0f04 	cmp.w	r9, #4
 800ea9e:	bf18      	it	ne
 800eaa0:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800eaa2:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800eaa6:	9302      	str	r3, [sp, #8]
 800eaa8:	9b02      	ldr	r3, [sp, #8]
 800eaaa:	42bb      	cmp	r3, r7
 800eaac:	d157      	bne.n	800eb5e <read_markers+0x6b6>
    if (cinfo->err->trace_level >= 2) {
 800eaae:	6822      	ldr	r2, [r4, #0]
 800eab0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800eab2:	2a01      	cmp	r2, #1
 800eab4:	dd26      	ble.n	800eb04 <read_markers+0x65c>
 800eab6:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800eaba:	275f      	movs	r7, #95	; 0x5f
 800eabc:	f8bb 1000 	ldrh.w	r1, [fp]
 800eac0:	4620      	mov	r0, r4
 800eac2:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800eac4:	f10b 0b10 	add.w	fp, fp, #16
 800eac8:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800eaca:	6191      	str	r1, [r2, #24]
 800eacc:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800ead0:	61d1      	str	r1, [r2, #28]
 800ead2:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800ead6:	6211      	str	r1, [r2, #32]
 800ead8:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800eadc:	6251      	str	r1, [r2, #36]	; 0x24
 800eade:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800eae2:	6291      	str	r1, [r2, #40]	; 0x28
 800eae4:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800eae8:	62d1      	str	r1, [r2, #44]	; 0x2c
 800eaea:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800eaee:	6311      	str	r1, [r2, #48]	; 0x30
 800eaf0:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800eaf4:	6157      	str	r7, [r2, #20]
 800eaf6:	6351      	str	r1, [r2, #52]	; 0x34
 800eaf8:	2102      	movs	r1, #2
 800eafa:	6852      	ldr	r2, [r2, #4]
 800eafc:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800eafe:	9b02      	ldr	r3, [sp, #8]
 800eb00:	459b      	cmp	fp, r3
 800eb02:	d1db      	bne.n	800eabc <read_markers+0x614>
    if (prec) length -= count;
 800eb04:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800eb06:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f43f af5d 	beq.w	800e9ca <read_markers+0x522>
 800eb10:	eba8 0809 	sub.w	r8, r8, r9
 800eb14:	e759      	b.n	800e9ca <read_markers+0x522>
      if (length < DCTSIZE2) {
 800eb16:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800eb1a:	dc14      	bgt.n	800eb46 <read_markers+0x69e>
 800eb1c:	f1ab 0202 	sub.w	r2, fp, #2
 800eb20:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800eb24:	2001      	movs	r0, #1
 800eb26:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800eb2a:	4291      	cmp	r1, r2
 800eb2c:	d1fb      	bne.n	800eb26 <read_markers+0x67e>
 800eb2e:	46c1      	mov	r9, r8
 800eb30:	e7a7      	b.n	800ea82 <read_markers+0x5da>
    switch (count) {
 800eb32:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800eb36:	d010      	beq.n	800eb5a <read_markers+0x6b2>
    default:    natural_order = jpeg_natural_order;  break;
 800eb38:	4f5d      	ldr	r7, [pc, #372]	; (800ecb0 <read_markers+0x808>)
 800eb3a:	4b5e      	ldr	r3, [pc, #376]	; (800ecb4 <read_markers+0x80c>)
 800eb3c:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800eb40:	bf08      	it	eq
 800eb42:	461f      	moveq	r7, r3
 800eb44:	e7ad      	b.n	800eaa2 <read_markers+0x5fa>
	count = DCTSIZE2;
 800eb46:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800eb4a:	4f59      	ldr	r7, [pc, #356]	; (800ecb0 <read_markers+0x808>)
 800eb4c:	e7a9      	b.n	800eaa2 <read_markers+0x5fa>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800eb4e:	4f5a      	ldr	r7, [pc, #360]	; (800ecb8 <read_markers+0x810>)
 800eb50:	e7a7      	b.n	800eaa2 <read_markers+0x5fa>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800eb52:	4f5a      	ldr	r7, [pc, #360]	; (800ecbc <read_markers+0x814>)
 800eb54:	e7a5      	b.n	800eaa2 <read_markers+0x5fa>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800eb56:	4f5a      	ldr	r7, [pc, #360]	; (800ecc0 <read_markers+0x818>)
 800eb58:	e7a3      	b.n	800eaa2 <read_markers+0x5fa>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800eb5a:	4f5a      	ldr	r7, [pc, #360]	; (800ecc4 <read_markers+0x81c>)
 800eb5c:	e7a1      	b.n	800eaa2 <read_markers+0x5fa>
      if (prec)
 800eb5e:	9b01      	ldr	r3, [sp, #4]
 800eb60:	b333      	cbz	r3, 800ebb0 <read_markers+0x708>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eb62:	f1ba 0f00 	cmp.w	sl, #0
 800eb66:	d107      	bne.n	800eb78 <read_markers+0x6d0>
 800eb68:	68f3      	ldr	r3, [r6, #12]
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	4798      	blx	r3
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	f43f ad27 	beq.w	800e5c2 <read_markers+0x11a>
 800eb74:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800eb78:	782a      	ldrb	r2, [r5, #0]
 800eb7a:	f1ba 0301 	subs.w	r3, sl, #1
 800eb7e:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800eb82:	d00a      	beq.n	800eb9a <read_markers+0x6f2>
 800eb84:	3501      	adds	r5, #1
 800eb86:	f815 1b01 	ldrb.w	r1, [r5], #1
 800eb8a:	f103 3aff 	add.w	sl, r3, #4294967295
 800eb8e:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800eb90:	f857 1b04 	ldr.w	r1, [r7], #4
 800eb94:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800eb98:	e786      	b.n	800eaa8 <read_markers+0x600>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eb9a:	68f3      	ldr	r3, [r6, #12]
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	9203      	str	r2, [sp, #12]
 800eba0:	4798      	blx	r3
 800eba2:	2800      	cmp	r0, #0
 800eba4:	f43f ad0d 	beq.w	800e5c2 <read_markers+0x11a>
 800eba8:	9a03      	ldr	r2, [sp, #12]
 800ebaa:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ebae:	e7ea      	b.n	800eb86 <read_markers+0x6de>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800ebb0:	f1ba 0f00 	cmp.w	sl, #0
 800ebb4:	d107      	bne.n	800ebc6 <read_markers+0x71e>
 800ebb6:	68f3      	ldr	r3, [r6, #12]
 800ebb8:	4620      	mov	r0, r4
 800ebba:	4798      	blx	r3
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	f43f ad00 	beq.w	800e5c2 <read_markers+0x11a>
 800ebc2:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800ebc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebca:	f815 2b01 	ldrb.w	r2, [r5], #1
 800ebce:	e7df      	b.n	800eb90 <read_markers+0x6e8>
  INPUT_VARS(cinfo);
 800ebd0:	69a7      	ldr	r7, [r4, #24]
 800ebd2:	e9d7 5300 	ldrd	r5, r3, [r7]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ebd6:	b93b      	cbnz	r3, 800ebe8 <read_markers+0x740>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	4620      	mov	r0, r4
 800ebdc:	4798      	blx	r3
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	f43f acef 	beq.w	800e5c2 <read_markers+0x11a>
 800ebe4:	e9d7 5300 	ldrd	r5, r3, [r7]
 800ebe8:	f895 8000 	ldrb.w	r8, [r5]
 800ebec:	3b01      	subs	r3, #1
 800ebee:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800ebf2:	d024      	beq.n	800ec3e <read_markers+0x796>
 800ebf4:	3501      	adds	r5, #1
 800ebf6:	782a      	ldrb	r2, [r5, #0]
 800ebf8:	1e5e      	subs	r6, r3, #1
 800ebfa:	4442      	add	r2, r8
  if (length != 4)
 800ebfc:	2a04      	cmp	r2, #4
 800ebfe:	d005      	beq.n	800ec0c <read_markers+0x764>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ec00:	6823      	ldr	r3, [r4, #0]
 800ec02:	220c      	movs	r2, #12
 800ec04:	4620      	mov	r0, r4
 800ec06:	615a      	str	r2, [r3, #20]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ec0c:	b306      	cbz	r6, 800ec50 <read_markers+0x7a8>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ec0e:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ec10:	f895 9000 	ldrb.w	r9, [r5]
 800ec14:	3e01      	subs	r6, #1
 800ec16:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800ec1a:	d022      	beq.n	800ec62 <read_markers+0x7ba>
 800ec1c:	3501      	adds	r5, #1
 800ec1e:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800ec22:	2254      	movs	r2, #84	; 0x54
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ec28:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800ec2a:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ec2c:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800ec2e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800ec36:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800ec3a:	603d      	str	r5, [r7, #0]
 800ec3c:	e655      	b.n	800e8ea <read_markers+0x442>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	4620      	mov	r0, r4
 800ec42:	4798      	blx	r3
 800ec44:	2800      	cmp	r0, #0
 800ec46:	f43f acbc 	beq.w	800e5c2 <read_markers+0x11a>
 800ec4a:	e9d7 5300 	ldrd	r5, r3, [r7]
 800ec4e:	e7d2      	b.n	800ebf6 <read_markers+0x74e>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4620      	mov	r0, r4
 800ec54:	4798      	blx	r3
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f43f acb3 	beq.w	800e5c2 <read_markers+0x11a>
 800ec5c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ec60:	e7d6      	b.n	800ec10 <read_markers+0x768>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	4620      	mov	r0, r4
 800ec66:	4798      	blx	r3
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	f43f acaa 	beq.w	800e5c2 <read_markers+0x11a>
 800ec6e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ec72:	e7d4      	b.n	800ec1e <read_markers+0x776>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800ec74:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800ec78:	3bd8      	subs	r3, #216	; 0xd8
 800ec7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800ec7e:	4620      	mov	r0, r4
 800ec80:	4798      	blx	r3
 800ec82:	e4e4      	b.n	800e64e <read_markers+0x1a6>
 800ec84:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ec88:	69db      	ldr	r3, [r3, #28]
 800ec8a:	e7f8      	b.n	800ec7e <read_markers+0x7d6>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800ec8c:	6822      	ldr	r2, [r4, #0]
 800ec8e:	215e      	movs	r1, #94	; 0x5e
 800ec90:	4620      	mov	r0, r4
 800ec92:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800ec96:	6853      	ldr	r3, [r2, #4]
 800ec98:	2101      	movs	r1, #1
 800ec9a:	4798      	blx	r3
      break;
 800ec9c:	e4cd      	b.n	800e63a <read_markers+0x192>
      if (! skip_variable(cinfo))
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f7ff fa3a 	bl	800e118 <skip_variable>
 800eca4:	e4d3      	b.n	800e64e <read_markers+0x1a6>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800eca6:	6822      	ldr	r2, [r4, #0]
 800eca8:	2146      	movs	r1, #70	; 0x46
 800ecaa:	e4e1      	b.n	800e670 <read_markers+0x1c8>
 800ecac:	0802f370 	.word	0x0802f370
 800ecb0:	0802f230 	.word	0x0802f230
 800ecb4:	0802f618 	.word	0x0802f618
 800ecb8:	0802f4a4 	.word	0x0802f4a4
 800ecbc:	0802f3c0 	.word	0x0802f3c0
 800ecc0:	0802f424 	.word	0x0802f424
 800ecc4:	0802f548 	.word	0x0802f548

0800ecc8 <jpeg_resync_to_restart>:
{
 800ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eccc:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ecce:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800ecd0:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ecd4:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ecd6:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ecda:	61d9      	str	r1, [r3, #28]
 800ecdc:	f04f 31ff 	mov.w	r1, #4294967295
{
 800ece0:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ece2:	f008 0807 	and.w	r8, r8, #7
 800ece6:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800ecea:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800ecf2:	2dbf      	cmp	r5, #191	; 0xbf
 800ecf4:	dd2e      	ble.n	800ed54 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800ecf6:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800ecfa:	2b07      	cmp	r3, #7
 800ecfc:	d828      	bhi.n	800ed50 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ecfe:	4545      	cmp	r5, r8
 800ed00:	d026      	beq.n	800ed50 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800ed02:	1cbb      	adds	r3, r7, #2
 800ed04:	f003 0307 	and.w	r3, r3, #7
 800ed08:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800ed0a:	429d      	cmp	r5, r3
 800ed0c:	d020      	beq.n	800ed50 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800ed0e:	1e7b      	subs	r3, r7, #1
 800ed10:	f003 0307 	and.w	r3, r3, #7
 800ed14:	33d0      	adds	r3, #208	; 0xd0
 800ed16:	429d      	cmp	r5, r3
 800ed18:	d01c      	beq.n	800ed54 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800ed1a:	1ebc      	subs	r4, r7, #2
 800ed1c:	f004 0407 	and.w	r4, r4, #7
 800ed20:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800ed22:	42a5      	cmp	r5, r4
 800ed24:	bf14      	ite	ne
 800ed26:	2401      	movne	r4, #1
 800ed28:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800ed2a:	6833      	ldr	r3, [r6, #0]
 800ed2c:	2263      	movs	r2, #99	; 0x63
 800ed2e:	2104      	movs	r1, #4
 800ed30:	4630      	mov	r0, r6
 800ed32:	61dc      	str	r4, [r3, #28]
 800ed34:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	4798      	blx	r3
    switch (action) {
 800ed3c:	2c02      	cmp	r4, #2
 800ed3e:	d00b      	beq.n	800ed58 <jpeg_resync_to_restart+0x90>
 800ed40:	2c03      	cmp	r4, #3
 800ed42:	d002      	beq.n	800ed4a <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800ed4a:	2001      	movs	r0, #1
}
 800ed4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800ed50:	2403      	movs	r4, #3
 800ed52:	e7ea      	b.n	800ed2a <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800ed54:	2402      	movs	r4, #2
 800ed56:	e7e8      	b.n	800ed2a <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7ff fa18 	bl	800e18e <next_marker>
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	d0f4      	beq.n	800ed4c <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800ed62:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800ed66:	e7c4      	b.n	800ecf2 <jpeg_resync_to_restart+0x2a>

0800ed68 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800ed68:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ed6a:	6843      	ldr	r3, [r0, #4]
 800ed6c:	22ac      	movs	r2, #172	; 0xac
 800ed6e:	2100      	movs	r1, #0
{
 800ed70:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800ed76:	4b11      	ldr	r3, [pc, #68]	; (800edbc <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800ed78:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ed7c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800ed7e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800ed80:	f100 015c 	add.w	r1, r0, #92	; 0x5c
 800ed84:	4b0e      	ldr	r3, [pc, #56]	; (800edc0 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800ed86:	4a0f      	ldr	r2, [pc, #60]	; (800edc4 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800ed88:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800ed8a:	4b0f      	ldr	r3, [pc, #60]	; (800edc8 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800ed8c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800ed8e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800ed94:	f100 031c 	add.w	r3, r0, #28
    marker->process_APPn[i] = skip_variable;
 800ed98:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0; i < 16; i++) {
 800ed9c:	4299      	cmp	r1, r3
 800ed9e:	d1fb      	bne.n	800ed98 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800eda0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800eda4:	2240      	movs	r2, #64	; 0x40
 800eda6:	2100      	movs	r1, #0
 800eda8:	f01b fcc2 	bl	802a730 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800edac:	4b07      	ldr	r3, [pc, #28]	; (800edcc <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800edae:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800edb0:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800edb2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800edb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800edb8:	f7ff ba5e 	b.w	800e278 <reset_marker_reader>
 800edbc:	0800e279 	.word	0x0800e279
 800edc0:	0800e4a9 	.word	0x0800e4a9
 800edc4:	0800e119 	.word	0x0800e119
 800edc8:	0800e21b 	.word	0x0800e21b
 800edcc:	0800e041 	.word	0x0800e041

0800edd0 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800edd0:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800edd2:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800edd6:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800edd8:	68ab      	ldr	r3, [r5, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d02a      	beq.n	800ee34 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800edde:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800ede0:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800ede4:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800edea:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800edee:	2102      	movs	r1, #2
 800edf0:	4620      	mov	r0, r4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800edf6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800edfa:	2102      	movs	r1, #2
 800edfc:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800edfe:	4620      	mov	r0, r4
 800ee00:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800ee02:	68a2      	ldr	r2, [r4, #8]
 800ee04:	b1aa      	cbz	r2, 800ee32 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ee06:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800ee08:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ee0a:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800ee0c:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ee0e:	bf14      	ite	ne
 800ee10:	2102      	movne	r1, #2
 800ee12:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800ee14:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800ee16:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800ee18:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800ee1a:	b151      	cbz	r1, 800ee32 <prepare_for_output_pass+0x62>
 800ee1c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800ee20:	6949      	ldr	r1, [r1, #20]
 800ee22:	b931      	cbnz	r1, 800ee32 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800ee24:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ee26:	2900      	cmp	r1, #0
 800ee28:	bf14      	ite	ne
 800ee2a:	2102      	movne	r1, #2
 800ee2c:	2101      	moveq	r1, #1
 800ee2e:	440b      	add	r3, r1
 800ee30:	6113      	str	r3, [r2, #16]
    }
  }
}
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800ee34:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ee36:	b16b      	cbz	r3, 800ee54 <prepare_for_output_pass+0x84>
 800ee38:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800ee3c:	b953      	cbnz	r3, 800ee54 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800ee3e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d037      	beq.n	800eeb4 <prepare_for_output_pass+0xe4>
 800ee44:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d034      	beq.n	800eeb4 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800ee4a:	69ab      	ldr	r3, [r5, #24]
 800ee4c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800ee50:	2301      	movs	r3, #1
 800ee52:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800ee54:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800ee58:	4620      	mov	r0, r4
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800ee5e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800ee62:	4620      	mov	r0, r4
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800ee68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1c9      	bne.n	800ee02 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800ee6e:	692b      	ldr	r3, [r5, #16]
 800ee70:	b923      	cbnz	r3, 800ee7c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800ee72:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800ee76:	4620      	mov	r0, r4
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800ee7c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800ee80:	4620      	mov	r0, r4
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800ee86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ee88:	b12b      	cbz	r3, 800ee96 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800ee8a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ee8e:	4620      	mov	r0, r4
 800ee90:	68a9      	ldr	r1, [r5, #8]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800ee96:	68aa      	ldr	r2, [r5, #8]
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800ee9e:	2a00      	cmp	r2, #0
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	bf14      	ite	ne
 800eea4:	2103      	movne	r1, #3
 800eea6:	2100      	moveq	r1, #0
 800eea8:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800eeaa:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800eeae:	2100      	movs	r1, #0
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	e7a4      	b.n	800edfe <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800eeb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeb6:	b11b      	cbz	r3, 800eec0 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800eeb8:	696b      	ldr	r3, [r5, #20]
 800eeba:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800eebe:	e7c9      	b.n	800ee54 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	222f      	movs	r2, #47	; 0x2f
 800eec4:	4620      	mov	r0, r4
 800eec6:	615a      	str	r2, [r3, #20]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4798      	blx	r3
 800eecc:	e7c2      	b.n	800ee54 <prepare_for_output_pass+0x84>

0800eece <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800eece:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800eed0:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800eed2:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800eed6:	b11a      	cbz	r2, 800eee0 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800eed8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	4798      	blx	r3
  master->pass_number++;
 800eee0:	68e3      	ldr	r3, [r4, #12]
 800eee2:	3301      	adds	r3, #1
 800eee4:	60e3      	str	r3, [r4, #12]
}
 800eee6:	bd10      	pop	{r4, pc}

0800eee8 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800eee8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800eeea:	4602      	mov	r2, r0
 800eeec:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d142      	bne.n	800ef78 <use_merged_upsample+0x90>
 800eef2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 800eef6:	2800      	cmp	r0, #0
 800eef8:	d140      	bne.n	800ef7c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800eefa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800eefe:	2b03      	cmp	r3, #3
 800ef00:	d139      	bne.n	800ef76 <use_merged_upsample+0x8e>
 800ef02:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d136      	bne.n	800ef76 <use_merged_upsample+0x8e>
 800ef08:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	d132      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->out_color_space != JCS_RGB ||
 800ef10:	6f93      	ldr	r3, [r2, #120]	; 0x78
 800ef12:	2b03      	cmp	r3, #3
 800ef14:	d12f      	bne.n	800ef76 <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800ef16:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 800ef1a:	6899      	ldr	r1, [r3, #8]
 800ef1c:	2902      	cmp	r1, #2
 800ef1e:	d12a      	bne.n	800ef76 <use_merged_upsample+0x8e>
 800ef20:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800ef22:	2901      	cmp	r1, #1
 800ef24:	d127      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800ef26:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ef2a:	2901      	cmp	r1, #1
 800ef2c:	d123      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800ef2e:	68d9      	ldr	r1, [r3, #12]
 800ef30:	2902      	cmp	r1, #2
 800ef32:	dc20      	bgt.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800ef34:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ef36:	2901      	cmp	r1, #1
 800ef38:	d11d      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800ef3a:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ef3e:	2901      	cmp	r1, #1
 800ef40:	d119      	bne.n	800ef76 <use_merged_upsample+0x8e>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800ef42:	f8d2 4140 	ldr.w	r4, [r2, #320]	; 0x140
 800ef46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ef48:	42a1      	cmp	r1, r4
 800ef4a:	d114      	bne.n	800ef76 <use_merged_upsample+0x8e>
 800ef4c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800ef4e:	42a1      	cmp	r1, r4
 800ef50:	d111      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800ef52:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800ef56:	42a1      	cmp	r1, r4
 800ef58:	d10d      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800ef5a:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800ef5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef60:	428a      	cmp	r2, r1
 800ef62:	d108      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800ef64:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800ef68:	428a      	cmp	r2, r1
 800ef6a:	d104      	bne.n	800ef76 <use_merged_upsample+0x8e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800ef6c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 800ef70:	1a83      	subs	r3, r0, r2
 800ef72:	4258      	negs	r0, r3
 800ef74:	4158      	adcs	r0, r3
}
 800ef76:	bd10      	pop	{r4, pc}
    return FALSE;
 800ef78:	2000      	movs	r0, #0
 800ef7a:	e7fc      	b.n	800ef76 <use_merged_upsample+0x8e>
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	e7fa      	b.n	800ef76 <use_merged_upsample+0x8e>

0800ef80 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800ef80:	6942      	ldr	r2, [r0, #20]
 800ef82:	2aca      	cmp	r2, #202	; 0xca
{
 800ef84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef88:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800ef8a:	d005      	beq.n	800ef98 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ef8c:	6803      	ldr	r3, [r0, #0]
 800ef8e:	2115      	movs	r1, #21
 800ef90:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800ef98:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ef9a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800ef9c:	f7fe fb04 	bl	800d5a8 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800efa0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800efa4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800efa8:	462b      	mov	r3, r5
 800efaa:	45b4      	cmp	ip, r6
 800efac:	dd7a      	ble.n	800f0a4 <jpeg_calc_output_dimensions+0x124>
 800efae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800efb0:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800efb2:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	bf14      	ite	ne
 800efba:	2708      	movne	r7, #8
 800efbc:	2704      	moveq	r7, #4
 800efbe:	e000      	b.n	800efc2 <jpeg_calc_output_dimensions+0x42>
      ssize = ssize * 2;
 800efc0:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800efc2:	fb01 f008 	mul.w	r0, r1, r8
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800efc6:	42b8      	cmp	r0, r7
 800efc8:	dc0a      	bgt.n	800efe0 <jpeg_calc_output_dimensions+0x60>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800efca:	689a      	ldr	r2, [r3, #8]
 800efcc:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800efd0:	434a      	muls	r2, r1
 800efd2:	0052      	lsls	r2, r2, #1
 800efd4:	fb9e f9f2 	sdiv	r9, lr, r2
 800efd8:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800efdc:	2a00      	cmp	r2, #0
 800efde:	d0ef      	beq.n	800efc0 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800efe0:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800efe2:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800efe6:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800efea:	fb08 f109 	mul.w	r1, r8, r9
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800efee:	42b9      	cmp	r1, r7
 800eff0:	dc0a      	bgt.n	800f008 <jpeg_calc_output_dimensions+0x88>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800eff8:	fb02 f208 	mul.w	r2, r2, r8
 800effc:	0052      	lsls	r2, r2, #1
 800effe:	fb9e faf2 	sdiv	sl, lr, r2
 800f002:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800f006:	b14a      	cbz	r2, 800f01c <jpeg_calc_output_dimensions+0x9c>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800f008:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800f00c:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800f00e:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800f012:	dd06      	ble.n	800f022 <jpeg_calc_output_dimensions+0xa2>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800f014:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800f016:	3601      	adds	r6, #1
 800f018:	3358      	adds	r3, #88	; 0x58
 800f01a:	e7c6      	b.n	800efaa <jpeg_calc_output_dimensions+0x2a>
      ssize = ssize * 2;
 800f01c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f020:	e7e3      	b.n	800efea <jpeg_calc_output_dimensions+0x6a>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800f022:	0042      	lsls	r2, r0, #1
 800f024:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800f028:	bfc8      	it	gt
 800f02a:	629a      	strgt	r2, [r3, #40]	; 0x28
 800f02c:	e7f3      	b.n	800f016 <jpeg_calc_output_dimensions+0x96>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800f02e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800f030:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800f032:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800f034:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800f036:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800f03a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800f03e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800f040:	69e3      	ldr	r3, [r4, #28]
 800f042:	4351      	muls	r1, r2
 800f044:	4358      	muls	r0, r3
 800f046:	f007 fe43 	bl	8016cd0 <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800f04a:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800f04e:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800f052:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800f056:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800f05a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800f05e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800f060:	6a23      	ldr	r3, [r4, #32]
 800f062:	4351      	muls	r1, r2
 800f064:	4358      	muls	r0, r3
 800f066:	f007 fe33 	bl	8016cd0 <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800f06a:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f06e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f070:	42b3      	cmp	r3, r6
 800f072:	dcdc      	bgt.n	800f02e <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800f074:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800f078:	2a03      	cmp	r2, #3
 800f07a:	d815      	bhi.n	800f0a8 <jpeg_calc_output_dimensions+0x128>
 800f07c:	2a01      	cmp	r2, #1
 800f07e:	d818      	bhi.n	800f0b2 <jpeg_calc_output_dimensions+0x132>
 800f080:	d100      	bne.n	800f084 <jpeg_calc_output_dimensions+0x104>
 800f082:	4613      	mov	r3, r2
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f084:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (use_merged_upsample(cinfo))
 800f086:	4620      	mov	r0, r4
    cinfo->out_color_components = 1;
 800f088:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f08a:	2a00      	cmp	r2, #0
 800f08c:	bf18      	it	ne
 800f08e:	2301      	movne	r3, #1
 800f090:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800f092:	f7ff ff29 	bl	800eee8 <use_merged_upsample>
 800f096:	b170      	cbz	r0, 800f0b6 <jpeg_calc_output_dimensions+0x136>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800f098:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800f09c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800f0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f0a4:	2600      	movs	r6, #0
 800f0a6:	e7e2      	b.n	800f06e <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800f0a8:	3a04      	subs	r2, #4
 800f0aa:	2a01      	cmp	r2, #1
 800f0ac:	bf98      	it	ls
 800f0ae:	2304      	movls	r3, #4
 800f0b0:	e7e8      	b.n	800f084 <jpeg_calc_output_dimensions+0x104>
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	e7e6      	b.n	800f084 <jpeg_calc_output_dimensions+0x104>
    cinfo->rec_outbuf_height = 1;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e7f0      	b.n	800f09c <jpeg_calc_output_dimensions+0x11c>
	...

0800f0bc <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0be:	6843      	ldr	r3, [r0, #4]
 800f0c0:	221c      	movs	r2, #28
 800f0c2:	2101      	movs	r1, #1
{
 800f0c4:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0c6:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800f0c8:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0ca:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800f0cc:	4b6d      	ldr	r3, [pc, #436]	; (800f284 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800f0ce:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0d2:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800f0d4:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800f0d6:	4b6c      	ldr	r3, [pc, #432]	; (800f288 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800f0d8:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800f0da:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f7ff ff4f 	bl	800ef80 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0e2:	6863      	ldr	r3, [r4, #4]
 800f0e4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800f0f0:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0f4:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800f0f6:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800f0f8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800f0fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f100:	f01b fb16 	bl	802a730 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800f104:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800f108:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800f10a:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800f10e:	3101      	adds	r1, #1
 800f110:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f114:	d1f9      	bne.n	800f10a <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800f116:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800f11a:	21ff      	movs	r1, #255	; 0xff
 800f11c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800f120:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800f122:	f01b fb05 	bl	802a730 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800f126:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800f12a:	2100      	movs	r1, #0
 800f12c:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800f130:	f01b fafe 	bl	802a730 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800f134:	2280      	movs	r2, #128	; 0x80
 800f136:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800f13a:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800f13e:	f01b fbd8 	bl	802a8f2 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800f142:	4620      	mov	r0, r4
  master->pass_number = 0;
 800f144:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800f146:	f7ff fecf 	bl	800eee8 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800f14a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800f14c:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800f14e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800f152:	b1b3      	cbz	r3, 800f182 <jinit_master_decompress+0xc6>
 800f154:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f156:	b1a2      	cbz	r2, 800f182 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800f158:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d166      	bne.n	800f22c <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800f15e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f160:	2b03      	cmp	r3, #3
 800f162:	f04f 0301 	mov.w	r3, #1
 800f166:	d068      	beq.n	800f23a <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800f168:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800f16a:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800f16c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800f170:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800f174:	4620      	mov	r0, r4
 800f176:	f006 feb9 	bl	8015eec <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800f17a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f17e:	616b      	str	r3, [r5, #20]
 800f180:	e062      	b.n	800f248 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800f182:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800f186:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1e5      	bne.n	800f158 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800f18c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f18e:	b94b      	cbnz	r3, 800f1a4 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800f190:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800f192:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800f194:	2b00      	cmp	r3, #0
 800f196:	d069      	beq.n	800f26c <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800f198:	f000 fa1e 	bl	800f5d8 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800f19c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f000 fb9a 	bl	800f8d8 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f7fc fdbd 	bl	800bd24 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800f1aa:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800f1ae:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d061      	beq.n	800f278 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800f1b4:	f7fb fc2c 	bl	800aa10 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f1b8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d15d      	bne.n	800f27e <jinit_master_decompress+0x1c2>
 800f1c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f1c4:	3900      	subs	r1, #0
 800f1c6:	bf18      	it	ne
 800f1c8:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f7fc f916 	bl	800b3fc <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800f1d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f1d2:	b911      	cbnz	r1, 800f1da <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f7fe fca7 	bl	800db28 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800f1da:	6863      	ldr	r3, [r4, #4]
 800f1dc:	4620      	mov	r0, r4
 800f1de:	699b      	ldr	r3, [r3, #24]
 800f1e0:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800f1e2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f1ec:	68a2      	ldr	r2, [r4, #8]
 800f1ee:	b1e2      	cbz	r2, 800f22a <jinit_master_decompress+0x16e>
 800f1f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1f2:	b9d3      	cbnz	r3, 800f22a <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800f1f4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f1f8:	691b      	ldr	r3, [r3, #16]
 800f1fa:	b1b3      	cbz	r3, 800f22a <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800f1fc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800f200:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800f202:	b111      	cbz	r1, 800f20a <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800f204:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f208:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f20a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800f20e:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f210:	4359      	muls	r1, r3
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800f212:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    cinfo->progress->pass_counter = 0L;
 800f214:	6050      	str	r0, [r2, #4]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800f216:	4283      	cmp	r3, r0
 800f218:	bf14      	ite	ne
 800f21a:	2303      	movne	r3, #3
 800f21c:	2302      	moveq	r3, #2
 800f21e:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800f220:	68eb      	ldr	r3, [r5, #12]
 800f222:	3301      	adds	r3, #1
    cinfo->progress->completed_passes = 0;
 800f224:	e9c2 1002 	strd	r1, r0, [r2, #8]
    master->pass_number++;
 800f228:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800f22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	2230      	movs	r2, #48	; 0x30
 800f230:	4620      	mov	r0, r4
 800f232:	615a      	str	r2, [r3, #20]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4798      	blx	r3
 800f238:	e791      	b.n	800f15e <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800f23a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800f23e:	b17a      	cbz	r2, 800f260 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800f240:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800f242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f244:	2b00      	cmp	r3, #0
 800f246:	d195      	bne.n	800f174 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800f248:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f24a:	b913      	cbnz	r3, 800f252 <jinit_master_decompress+0x196>
 800f24c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d09c      	beq.n	800f18c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800f252:	4620      	mov	r0, r4
 800f254:	f007 fcd0 	bl	8016bf8 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800f258:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f25c:	61ab      	str	r3, [r5, #24]
 800f25e:	e795      	b.n	800f18c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800f260:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f262:	b10a      	cbz	r2, 800f268 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800f264:	66e3      	str	r3, [r4, #108]	; 0x6c
 800f266:	e7ec      	b.n	800f242 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800f268:	6663      	str	r3, [r4, #100]	; 0x64
 800f26a:	e783      	b.n	800f174 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800f26c:	f7fc faea 	bl	800b844 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800f270:	4620      	mov	r0, r4
 800f272:	f000 fc4f 	bl	800fb14 <jinit_upsampler>
 800f276:	e791      	b.n	800f19c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800f278:	f7fd fee2 	bl	800d040 <jinit_huff_decoder>
 800f27c:	e79c      	b.n	800f1b8 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f27e:	2101      	movs	r1, #1
 800f280:	e7a3      	b.n	800f1ca <jinit_master_decompress+0x10e>
 800f282:	bf00      	nop
 800f284:	0800edd1 	.word	0x0800edd1
 800f288:	0800eecf 	.word	0x0800eecf

0800f28c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f28c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800f290:	2200      	movs	r2, #0
 800f292:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f294:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f296:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f298:	4770      	bx	lr

0800f29a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800f29a:	b570      	push	{r4, r5, r6, lr}
 800f29c:	9d05      	ldr	r5, [sp, #20]
 800f29e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f2a0:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800f2a4:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f2a6:	68de      	ldr	r6, [r3, #12]
 800f2a8:	9b04      	ldr	r3, [sp, #16]
 800f2aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f2ae:	6822      	ldr	r2, [r4, #0]
 800f2b0:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800f2b2:	682b      	ldr	r3, [r5, #0]
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800f2b8:	6823      	ldr	r3, [r4, #0]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	6023      	str	r3, [r4, #0]
}
 800f2be:	bd70      	pop	{r4, r5, r6, pc}

0800f2c0 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f2c4:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f2c8:	b089      	sub	sp, #36	; 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800f2ca:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800f2ce:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f2d0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800f2d4:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800f2d6:	9601      	str	r6, [sp, #4]
  int * Cbbtab = upsample->Cb_b_tab;
 800f2d8:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f2da:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800f2de:	9602      	str	r6, [sp, #8]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f2e0:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f2e2:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f2e4:	9603      	str	r6, [sp, #12]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f2e6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800f2ea:	9504      	str	r5, [sp, #16]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f2ec:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f2ee:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f2f0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f2f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f2f8:	9904      	ldr	r1, [sp, #16]
 800f2fa:	9205      	str	r2, [sp, #20]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f2fc:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f2fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f302:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800f306:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800f30a:	9206      	str	r2, [sp, #24]
 800f30c:	9a06      	ldr	r2, [sp, #24]
 800f30e:	3306      	adds	r3, #6
 800f310:	3102      	adds	r1, #2
 800f312:	4295      	cmp	r5, r2
 800f314:	d128      	bne.n	800f368 <h2v1_merged_upsample+0xa8>
 800f316:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f318:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800f31a:	fb03 f30e 	mul.w	r3, r3, lr
 800f31e:	07d2      	lsls	r2, r2, #31
 800f320:	eb0c 0103 	add.w	r1, ip, r3
 800f324:	d51d      	bpl.n	800f362 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f326:	9a05      	ldr	r2, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800f328:	9f01      	ldr	r7, [sp, #4]
    cred = Crrtab[cr];
 800f32a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f32e:	782a      	ldrb	r2, [r5, #0]
 800f330:	9d03      	ldr	r5, [sp, #12]
 800f332:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800f336:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f33a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f33e:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800f340:	9d02      	ldr	r5, [sp, #8]
 800f342:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f346:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800f34a:	9a04      	ldr	r2, [sp, #16]
 800f34c:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f350:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f352:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800f354:	5dbe      	ldrb	r6, [r7, r6]
 800f356:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f358:	5c80      	ldrb	r0, [r0, r2]
 800f35a:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f35c:	5ca2      	ldrb	r2, [r4, r2]
 800f35e:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800f362:	b009      	add	sp, #36	; 0x24
 800f364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f368:	f815 ab01 	ldrb.w	sl, [r5], #1
    cred = Crrtab[cr];
 800f36c:	f819 2b01 	ldrb.w	r2, [r9], #1
 800f370:	9e01      	ldr	r6, [sp, #4]
 800f372:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f376:	f858 602a 	ldr.w	r6, [r8, sl, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f37a:	4427      	add	r7, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f37c:	9607      	str	r6, [sp, #28]
 800f37e:	9e03      	ldr	r6, [sp, #12]
 800f380:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800f384:	9e07      	ldr	r6, [sp, #28]
 800f386:	4432      	add	r2, r6
    cblue = Cbbtab[cb];
 800f388:	9e02      	ldr	r6, [sp, #8]
 800f38a:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f38e:	eb04 4222 	add.w	r2, r4, r2, asr #16
    y  = GETJSAMPLE(*inptr0++);
 800f392:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f396:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800f398:	f817 b00a 	ldrb.w	fp, [r7, sl]
 800f39c:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f3a0:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800f3a4:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f3a8:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800f3ac:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800f3b0:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f3b4:	f817 700a 	ldrb.w	r7, [r7, sl]
 800f3b8:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f3bc:	f812 200a 	ldrb.w	r2, [r2, sl]
 800f3c0:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f3c4:	f816 200a 	ldrb.w	r2, [r6, sl]
 800f3c8:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f3cc:	e79e      	b.n	800f30c <h2v1_merged_upsample+0x4c>

0800f3ce <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f3ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f3d2:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f3d6:	b08d      	sub	sp, #52	; 0x34
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f3d8:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800f3dc:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f3de:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800f3e2:	9604      	str	r6, [sp, #16]
  int * Cbbtab = upsample->Cb_b_tab;
 800f3e4:	696e      	ldr	r6, [r5, #20]
 800f3e6:	9605      	str	r6, [sp, #20]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f3e8:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f3ea:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f3ec:	9606      	str	r6, [sp, #24]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f3ee:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f3f2:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f3f6:	686d      	ldr	r5, [r5, #4]
 800f3f8:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f3fa:	9607      	str	r6, [sp, #28]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f3fc:	9508      	str	r5, [sp, #32]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f3fe:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f400:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f402:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f406:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f40a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f40c:	9209      	str	r2, [sp, #36]	; 0x24
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f40e:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f41c:	910a      	str	r1, [sp, #40]	; 0x28
  inptr2 = input_buf[2][in_row_group_ctr];
 800f41e:	9909      	ldr	r1, [sp, #36]	; 0x24
  outptr0 = output_buf[0];
 800f420:	9201      	str	r2, [sp, #4]
  outptr1 = output_buf[1];
 800f422:	9302      	str	r3, [sp, #8]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f424:	9103      	str	r1, [sp, #12]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f426:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f428:	3206      	adds	r2, #6
 800f42a:	3306      	adds	r3, #6
 800f42c:	f10e 0e02 	add.w	lr, lr, #2
 800f430:	4588      	cmp	r8, r1
 800f432:	f10c 0c02 	add.w	ip, ip, #2
 800f436:	d139      	bne.n	800f4ac <h2v2_merged_upsample+0xde>
 800f438:	2306      	movs	r3, #6
 800f43a:	9a01      	ldr	r2, [sp, #4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f43c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f43e:	437b      	muls	r3, r7
 800f440:	07c0      	lsls	r0, r0, #31
 800f442:	eb02 0103 	add.w	r1, r2, r3
 800f446:	9a02      	ldr	r2, [sp, #8]
 800f448:	441a      	add	r2, r3
 800f44a:	d52c      	bpl.n	800f4a6 <h2v2_merged_upsample+0xd8>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f44c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f44e:	9d04      	ldr	r5, [sp, #16]
 800f450:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f452:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800f456:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f45a:	9d06      	ldr	r5, [sp, #24]
 800f45c:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800f460:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
 800f464:	9d05      	ldr	r5, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f466:	4460      	add	r0, ip
    cblue = Cbbtab[cb];
 800f468:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
    y  = GETJSAMPLE(*inptr00);
 800f46c:	9d07      	ldr	r5, [sp, #28]
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f46e:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr00);
 800f472:	f815 6017 	ldrb.w	r6, [r5, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f476:	eb0e 0504 	add.w	r5, lr, r4
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f47a:	4464      	add	r4, ip
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f47c:	f815 e006 	ldrb.w	lr, [r5, r6]
 800f480:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f484:	f810 e006 	ldrb.w	lr, [r0, r6]
 800f488:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f48c:	5da1      	ldrb	r1, [r4, r6]
 800f48e:	9e01      	ldr	r6, [sp, #4]
 800f490:	54f1      	strb	r1, [r6, r3]
    y  = GETJSAMPLE(*inptr01);
 800f492:	9908      	ldr	r1, [sp, #32]
 800f494:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f498:	5c6d      	ldrb	r5, [r5, r1]
 800f49a:	7095      	strb	r5, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f49c:	5c40      	ldrb	r0, [r0, r1]
 800f49e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f4a0:	5c62      	ldrb	r2, [r4, r1]
 800f4a2:	9902      	ldr	r1, [sp, #8]
 800f4a4:	54ca      	strb	r2, [r1, r3]
  }
}
 800f4a6:	b00d      	add	sp, #52	; 0x34
 800f4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f4ac:	9d03      	ldr	r5, [sp, #12]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f4ae:	f818 9b01 	ldrb.w	r9, [r8], #1
    cred = Crrtab[cr];
 800f4b2:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f4b6:	9503      	str	r5, [sp, #12]
 800f4b8:	9d04      	ldr	r5, [sp, #16]
 800f4ba:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f4be:	f85a 5029 	ldr.w	r5, [sl, r9, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f4c2:	4426      	add	r6, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f4c4:	950b      	str	r5, [sp, #44]	; 0x2c
 800f4c6:	9d06      	ldr	r5, [sp, #24]
 800f4c8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800f4cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f4ce:	4429      	add	r1, r5
    cblue = Cbbtab[cb];
 800f4d0:	9d05      	ldr	r5, [sp, #20]
 800f4d2:	f855 5029 	ldr.w	r5, [r5, r9, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f4d6:	eb04 4121 	add.w	r1, r4, r1, asr #16
    y  = GETJSAMPLE(*inptr00++);
 800f4da:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f4de:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f4e0:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f4e4:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f4e8:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f4ec:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f4f0:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f4f4:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800f4f8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f4fc:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f500:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f504:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f508:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f50c:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f510:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800f514:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f518:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f51c:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f520:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f524:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f528:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f52c:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800f530:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f534:	f816 6009 	ldrb.w	r6, [r6, r9]
 800f538:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f53c:	f811 1009 	ldrb.w	r1, [r1, r9]
 800f540:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f544:	f815 1009 	ldrb.w	r1, [r5, r9]
 800f548:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f54c:	e76b      	b.n	800f426 <h2v2_merged_upsample+0x58>

0800f54e <merged_2v_upsample>:
{
 800f54e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f552:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f556:	4616      	mov	r6, r2
 800f558:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800f55c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f55e:	f8d8 3000 	ldr.w	r3, [r8]
 800f562:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800f566:	b1dd      	cbz	r5, 800f5a0 <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f568:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f56a:	2501      	movs	r5, #1
 800f56c:	f104 0020 	add.w	r0, r4, #32
 800f570:	9301      	str	r3, [sp, #4]
 800f572:	2300      	movs	r3, #0
 800f574:	9500      	str	r5, [sp, #0]
 800f576:	4619      	mov	r1, r3
 800f578:	f007 fbb7 	bl	8016cea <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800f57c:	2300      	movs	r3, #0
 800f57e:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800f580:	f8d8 3000 	ldr.w	r3, [r8]
 800f584:	442b      	add	r3, r5
 800f586:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800f58a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f58c:	1b5b      	subs	r3, r3, r5
 800f58e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800f590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f592:	b913      	cbnz	r3, 800f59a <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800f594:	6833      	ldr	r3, [r6, #0]
 800f596:	3301      	adds	r3, #1
 800f598:	6033      	str	r3, [r6, #0]
}
 800f59a:	b004      	add	sp, #16
 800f59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800f5a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800f5a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800f5a4:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800f5a6:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f5aa:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800f5ae:	bf28      	it	cs
 800f5b0:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f5b2:	9302      	str	r3, [sp, #8]
 800f5b4:	42bd      	cmp	r5, r7
 800f5b6:	bf28      	it	cs
 800f5b8:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f5ba:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800f5bc:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800f5be:	bf17      	itett	ne
 800f5c0:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f5c2:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800f5c4:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f5c6:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f5c8:	bf0c      	ite	eq
 800f5ca:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f5cc:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f5ce:	ab02      	add	r3, sp, #8
 800f5d0:	6832      	ldr	r2, [r6, #0]
 800f5d2:	47b8      	blx	r7
 800f5d4:	e7d4      	b.n	800f580 <merged_2v_upsample+0x32>
	...

0800f5d8 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5d8:	6843      	ldr	r3, [r0, #4]
 800f5da:	2230      	movs	r2, #48	; 0x30
 800f5dc:	2101      	movs	r1, #1
 800f5de:	681b      	ldr	r3, [r3, #0]
{
 800f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e4:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5e6:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f5e8:	4b37      	ldr	r3, [pc, #220]	; (800f6c8 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f5ea:	4605      	mov	r5, r0
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f5ec:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f5f0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f5f2:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800f5f4:	2000      	movs	r0, #0
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f5f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  upsample->pub.need_context_rows = FALSE;
 800f5f8:	60a8      	str	r0, [r5, #8]
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f5fa:	435a      	muls	r2, r3

  if (cinfo->max_v_samp_factor == 2) {
 800f5fc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800f600:	2b02      	cmp	r3, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f602:	62aa      	str	r2, [r5, #40]	; 0x28
  if (cinfo->max_v_samp_factor == 2) {
 800f604:	d15a      	bne.n	800f6bc <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800f606:	4b31      	ldr	r3, [pc, #196]	; (800f6cc <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f608:	2101      	movs	r1, #1
 800f60a:	4620      	mov	r0, r4
    upsample->pub.upsample = merged_2v_upsample;
 800f60c:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800f60e:	4b30      	ldr	r3, [pc, #192]	; (800f6d0 <jinit_merged_upsampler+0xf8>)
 800f610:	60eb      	str	r3, [r5, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f612:	6863      	ldr	r3, [r4, #4]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f618:	6863      	ldr	r3, [r4, #4]
 800f61a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    upsample->spare_row = (JSAMPROW)
 800f61e:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f620:	2101      	movs	r1, #1
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4620      	mov	r0, r4
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f626:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f62a:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f62c:	6863      	ldr	r3, [r4, #4]
 800f62e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800f632:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f634:	2101      	movs	r1, #1
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4620      	mov	r0, r4
 800f63a:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f63c:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800f63e:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2101      	movs	r1, #1
 800f648:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f64a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800f6e8 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f64e:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f650:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800f652:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f654:	2101      	movs	r1, #1
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4620      	mov	r0, r4
 800f65a:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f65e:	4f1d      	ldr	r7, [pc, #116]	; (800f6d4 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f660:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f662:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800f664:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f666:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f668:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f6ec <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f66c:	491a      	ldr	r1, [pc, #104]	; (800f6d8 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800f66e:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f672:	4d1a      	ldr	r5, [pc, #104]	; (800f6dc <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f674:	fb08 e203 	mla	r2, r8, r3, lr
 800f678:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800f67a:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f67e:	fb07 f203 	mul.w	r2, r7, r3
 800f682:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800f686:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800f68a:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800f68c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f690:	fb05 f203 	mul.w	r2, r5, r3
 800f694:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800f698:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800f69c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f6a0:	fb01 f203 	mul.w	r2, r1, r3
 800f6a4:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800f6a8:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800f6ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6b6:	d1dd      	bne.n	800f674 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800f6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800f6bc:	4b08      	ldr	r3, [pc, #32]	; (800f6e0 <jinit_merged_upsampler+0x108>)
 800f6be:	606b      	str	r3, [r5, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800f6c0:	4b08      	ldr	r3, [pc, #32]	; (800f6e4 <jinit_merged_upsampler+0x10c>)
 800f6c2:	60eb      	str	r3, [r5, #12]
    upsample->spare_row = NULL;
 800f6c4:	e7a8      	b.n	800f618 <jinit_merged_upsampler+0x40>
 800f6c6:	bf00      	nop
 800f6c8:	0800f28d 	.word	0x0800f28d
 800f6cc:	0800f54f 	.word	0x0800f54f
 800f6d0:	0800f3cf 	.word	0x0800f3cf
 800f6d4:	0001c5a2 	.word	0x0001c5a2
 800f6d8:	ffffa7e6 	.word	0xffffa7e6
 800f6dc:	ffff492e 	.word	0xffff492e
 800f6e0:	0800f29b 	.word	0x0800f29b
 800f6e4:	0800f2c1 	.word	0x0800f2c1
 800f6e8:	000166e9 	.word	0x000166e9
 800f6ec:	ff4d0b80 	.word	0xff4d0b80

0800f6f0 <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800f6f0:	2902      	cmp	r1, #2
{
 800f6f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f6f4:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800f6f8:	d023      	beq.n	800f742 <start_pass_dpost+0x52>
 800f6fa:	2903      	cmp	r1, #3
 800f6fc:	d019      	beq.n	800f732 <start_pass_dpost+0x42>
 800f6fe:	2900      	cmp	r1, #0
 800f700:	d128      	bne.n	800f754 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800f702:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f704:	b182      	cbz	r2, 800f728 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800f706:	4a16      	ldr	r2, [pc, #88]	; (800f760 <start_pass_dpost+0x70>)
 800f708:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800f70a:	68e2      	ldr	r2, [r4, #12]
 800f70c:	b93a      	cbnz	r2, 800f71e <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800f70e:	6843      	ldr	r3, [r0, #4]
 800f710:	2101      	movs	r1, #1
 800f712:	9100      	str	r1, [sp, #0]
 800f714:	69dd      	ldr	r5, [r3, #28]
 800f716:	68a1      	ldr	r1, [r4, #8]
 800f718:	6923      	ldr	r3, [r4, #16]
 800f71a:	47a8      	blx	r5
 800f71c:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800f71e:	2300      	movs	r3, #0
 800f720:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800f724:	b003      	add	sp, #12
 800f726:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800f728:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800f72c:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800f72e:	6063      	str	r3, [r4, #4]
    break;
 800f730:	e7f5      	b.n	800f71e <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800f732:	68a2      	ldr	r2, [r4, #8]
 800f734:	b91a      	cbnz	r2, 800f73e <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f736:	6803      	ldr	r3, [r0, #0]
 800f738:	6159      	str	r1, [r3, #20]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800f73e:	4b09      	ldr	r3, [pc, #36]	; (800f764 <start_pass_dpost+0x74>)
 800f740:	e7f5      	b.n	800f72e <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800f742:	68a2      	ldr	r2, [r4, #8]
 800f744:	b922      	cbnz	r2, 800f750 <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f746:	6803      	ldr	r3, [r0, #0]
 800f748:	2203      	movs	r2, #3
 800f74a:	615a      	str	r2, [r3, #20]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800f750:	4b05      	ldr	r3, [pc, #20]	; (800f768 <start_pass_dpost+0x78>)
 800f752:	e7ec      	b.n	800f72e <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f754:	6803      	ldr	r3, [r0, #0]
 800f756:	2203      	movs	r2, #3
 800f758:	615a      	str	r2, [r3, #20]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4798      	blx	r3
    break;
 800f75e:	e7de      	b.n	800f71e <start_pass_dpost+0x2e>
 800f760:	0800f76d 	.word	0x0800f76d
 800f764:	0800f7cd 	.word	0x0800f7cd
 800f768:	0800f85b 	.word	0x0800f85b

0800f76c <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f770:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f772:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800f776:	4604      	mov	r4, r0
 800f778:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800f77a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f77c:	682f      	ldr	r7, [r5, #0]
 800f77e:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800f780:	2700      	movs	r7, #0
 800f782:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800f784:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800f788:	9705      	str	r7, [sp, #20]
 800f78a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f78e:	42be      	cmp	r6, r7
 800f790:	bf94      	ite	ls
 800f792:	9602      	strls	r6, [sp, #8]
 800f794:	9702      	strhi	r7, [sp, #8]
 800f796:	ae07      	add	r6, sp, #28
 800f798:	9601      	str	r6, [sp, #4]
 800f79a:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f79e:	9600      	str	r6, [sp, #0]
 800f7a0:	9e05      	ldr	r6, [sp, #20]
 800f7a2:	6876      	ldr	r6, [r6, #4]
 800f7a4:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800f7a6:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f7a8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7b0:	685e      	ldr	r6, [r3, #4]
 800f7b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f7b6:	9b07      	ldr	r3, [sp, #28]
 800f7b8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f7bc:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800f7be:	682b      	ldr	r3, [r5, #0]
 800f7c0:	9a07      	ldr	r2, [sp, #28]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	602b      	str	r3, [r5, #0]
}
 800f7c6:	b008      	add	sp, #32
 800f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f7cc <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f7d0:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f7d4:	b085      	sub	sp, #20
 800f7d6:	469a      	mov	sl, r3
 800f7d8:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f7da:	69a3      	ldr	r3, [r4, #24]
{
 800f7dc:	460e      	mov	r6, r1
 800f7de:	4691      	mov	r9, r2
 800f7e0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800f7e4:	b943      	cbnz	r3, 800f7f8 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f7e6:	6843      	ldr	r3, [r0, #4]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	9200      	str	r2, [sp, #0]
 800f7ec:	69df      	ldr	r7, [r3, #28]
 800f7ee:	68a1      	ldr	r1, [r4, #8]
 800f7f0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f7f4:	47b8      	blx	r7
 800f7f6:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800f7f8:	6922      	ldr	r2, [r4, #16]
 800f7fa:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800f7fc:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800f7fe:	4628      	mov	r0, r5
 800f800:	9202      	str	r2, [sp, #8]
 800f802:	f104 0218 	add.w	r2, r4, #24
 800f806:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800f80a:	9201      	str	r2, [sp, #4]
 800f80c:	68e2      	ldr	r2, [r4, #12]
 800f80e:	9200      	str	r2, [sp, #0]
 800f810:	464a      	mov	r2, r9
 800f812:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f816:	4653      	mov	r3, sl
 800f818:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800f81a:	69a6      	ldr	r6, [r4, #24]
 800f81c:	42be      	cmp	r6, r7
 800f81e:	d910      	bls.n	800f842 <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f820:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800f824:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f826:	68e1      	ldr	r1, [r4, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f82e:	4628      	mov	r0, r5
 800f830:	4633      	mov	r3, r6
 800f832:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800f836:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800f838:	f8d8 3000 	ldr.w	r3, [r8]
 800f83c:	4433      	add	r3, r6
 800f83e:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800f842:	6922      	ldr	r2, [r4, #16]
 800f844:	69a3      	ldr	r3, [r4, #24]
 800f846:	4293      	cmp	r3, r2
 800f848:	d304      	bcc.n	800f854 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800f84a:	6963      	ldr	r3, [r4, #20]
 800f84c:	4413      	add	r3, r2
 800f84e:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	61a3      	str	r3, [r4, #24]
  }
}
 800f854:	b005      	add	sp, #20
 800f856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f85a <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f85a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f85e:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f862:	4606      	mov	r6, r0
 800f864:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f866:	69a3      	ldr	r3, [r4, #24]
 800f868:	b93b      	cbnz	r3, 800f87a <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f86a:	6842      	ldr	r2, [r0, #4]
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	69d5      	ldr	r5, [r2, #28]
 800f870:	68a1      	ldr	r1, [r4, #8]
 800f872:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f876:	47a8      	blx	r5
 800f878:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800f87a:	6963      	ldr	r3, [r4, #20]
 800f87c:	6f75      	ldr	r5, [r6, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f87e:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800f880:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f882:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f884:	683a      	ldr	r2, [r7, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f886:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f888:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f88a:	429d      	cmp	r5, r3
 800f88c:	bf28      	it	cs
 800f88e:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f892:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f894:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f898:	429d      	cmp	r5, r3
 800f89a:	bf28      	it	cs
 800f89c:	461d      	movcs	r5, r3
 800f89e:	68e3      	ldr	r3, [r4, #12]
 800f8a0:	9303      	str	r3, [sp, #12]
 800f8a2:	9803      	ldr	r0, [sp, #12]
 800f8a4:	f8d6 31e0 	ldr.w	r3, [r6, #480]	; 0x1e0
 800f8a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f8b2:	462b      	mov	r3, r5
 800f8b4:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	442b      	add	r3, r5
 800f8ba:	603b      	str	r3, [r7, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800f8bc:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f8be:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800f8c0:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800f8c2:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800f8c4:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f8c6:	d304      	bcc.n	800f8d2 <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800f8c8:	6963      	ldr	r3, [r4, #20]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	61a3      	str	r3, [r4, #24]
  }
}
 800f8d2:	b004      	add	sp, #16
 800f8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8d8 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f8d8:	6843      	ldr	r3, [r0, #4]
 800f8da:	221c      	movs	r2, #28
{
 800f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f8de:	681b      	ldr	r3, [r3, #0]
{
 800f8e0:	b085      	sub	sp, #20
 800f8e2:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f8e4:	2101      	movs	r1, #1
{
 800f8e6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f8e8:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800f8ea:	4b15      	ldr	r3, [pc, #84]	; (800f940 <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800f8ec:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800f8ee:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f8f2:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800f8f4:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800f8f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800f8f8:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800f8fc:	b1bb      	cbz	r3, 800f92e <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f8fe:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f902:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f904:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f906:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f908:	6861      	ldr	r1, [r4, #4]
 800f90a:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800f90c:	b18f      	cbz	r7, 800f932 <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f90e:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800f910:	4619      	mov	r1, r3
 800f912:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f914:	9203      	str	r2, [sp, #12]
 800f916:	f007 f9e0 	bl	8016cda <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f91a:	692b      	ldr	r3, [r5, #16]
 800f91c:	2101      	movs	r1, #1
 800f91e:	9a03      	ldr	r2, [sp, #12]
 800f920:	e9cd 0300 	strd	r0, r3, [sp]
 800f924:	4613      	mov	r3, r2
 800f926:	4620      	mov	r0, r4
 800f928:	4632      	mov	r2, r6
 800f92a:	47b8      	blx	r7
 800f92c:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800f92e:	b005      	add	sp, #20
 800f930:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800f932:	688e      	ldr	r6, [r1, #8]
 800f934:	4620      	mov	r0, r4
 800f936:	2101      	movs	r1, #1
 800f938:	47b0      	blx	r6
 800f93a:	60e8      	str	r0, [r5, #12]
}
 800f93c:	e7f7      	b.n	800f92e <jinit_d_post_controller+0x56>
 800f93e:	bf00      	nop
 800f940:	0800f6f1 	.word	0x0800f6f1

0800f944 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f944:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f948:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f94c:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f94e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f950:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f952:	4770      	bx	lr

0800f954 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f958:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f95c:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f95e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800f962:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f964:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800f966:	4683      	mov	fp, r0
 800f968:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f96a:	429a      	cmp	r2, r3
 800f96c:	db10      	blt.n	800f990 <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f96e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f972:	2600      	movs	r6, #0
 800f974:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800f978:	9303      	str	r3, [sp, #12]
 800f97a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f97e:	9a03      	ldr	r2, [sp, #12]
 800f980:	fb0a 2106 	mla	r1, sl, r6, r2
 800f984:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800f988:	42b2      	cmp	r2, r6
 800f98a:	dc31      	bgt.n	800f9f0 <sep_upsample+0x9c>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800f98c:	2300      	movs	r3, #0
 800f98e:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800f990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f992:	4658      	mov	r0, fp
  out_rows_avail -= *out_row_ctr;
 800f994:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f99a:	1af6      	subs	r6, r6, r3
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f99c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  if (num_rows > out_rows_avail)
 800f99e:	428e      	cmp	r6, r1
 800f9a0:	bf28      	it	cs
 800f9a2:	460e      	movcs	r6, r1
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f9a4:	f8db 113c 	ldr.w	r1, [fp, #316]	; 0x13c
 800f9a8:	1a89      	subs	r1, r1, r2
 800f9aa:	428e      	cmp	r6, r1
 800f9ac:	bf28      	it	cs
 800f9ae:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f9b0:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800f9b4:	9600      	str	r6, [sp, #0]
 800f9b6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f9ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f9bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f9c0:	f104 010c 	add.w	r1, r4, #12
 800f9c4:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800f9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4433      	add	r3, r6
 800f9ce:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800f9d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f9d2:	1b9b      	subs	r3, r3, r6
 800f9d4:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800f9d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f9d8:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800f9da:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800f9de:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800f9e0:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800f9e2:	bfa2      	ittt	ge
 800f9e4:	682b      	ldrge	r3, [r5, #0]
 800f9e6:	3301      	addge	r3, #1
 800f9e8:	602b      	strge	r3, [r5, #0]
}
 800f9ea:	b005      	add	sp, #20
 800f9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f9f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
      (*upsample->methods[ci]) (cinfo, compptr,
 800f9f2:	f103 0904 	add.w	r9, r3, #4
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f9f6:	682a      	ldr	r2, [r5, #0]
      (*upsample->methods[ci]) (cinfo, compptr,
 800f9f8:	3b24      	subs	r3, #36	; 0x24
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f9fa:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800f9fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f9fe:	4607      	mov	r7, r0
 800fa00:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800fa04:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800fa06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fa0a:	4658      	mov	r0, fp
 800fa0c:	47b8      	blx	r7
	 ci++, compptr++) {
 800fa0e:	464b      	mov	r3, r9
 800fa10:	e7b5      	b.n	800f97e <sep_upsample+0x2a>

0800fa12 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800fa12:	601a      	str	r2, [r3, #0]
}
 800fa14:	4770      	bx	lr

0800fa16 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800fa16:	2200      	movs	r2, #0
 800fa18:	601a      	str	r2, [r3, #0]
}
 800fa1a:	4770      	bx	lr

0800fa1c <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800fa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800fa1e:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800fa20:	2300      	movs	r3, #0
 800fa22:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800fa26:	4299      	cmp	r1, r3
 800fa28:	dc00      	bgt.n	800fa2c <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800fa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800fa2c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800fa30:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800fa32:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800fa36:	440c      	add	r4, r1
    while (outptr < outend) {
 800fa38:	42a1      	cmp	r1, r4
 800fa3a:	d301      	bcc.n	800fa40 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	e7f0      	b.n	800fa22 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800fa40:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800fa44:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800fa48:	f801 6c01 	strb.w	r6, [r1, #-1]
 800fa4c:	e7f4      	b.n	800fa38 <h2v1_upsample+0x1c>

0800fa4e <int_upsample>:
{
 800fa4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa52:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800fa54:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800fa56:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800fa5a:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800fa5c:	684b      	ldr	r3, [r1, #4]
 800fa5e:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800fa60:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800fa62:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800fa64:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800fa68:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fa6c:	f108 33ff 	add.w	r3, r8, #4294967295
 800fa70:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800fa72:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800fa76:	42a3      	cmp	r3, r4
 800fa78:	dc02      	bgt.n	800fa80 <int_upsample+0x32>
}
 800fa7a:	b005      	add	sp, #20
 800fa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800fa80:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800fa84:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800fa86:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800fa8a:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800fa8e:	454b      	cmp	r3, r9
 800fa90:	d30e      	bcc.n	800fab0 <int_upsample+0x62>
    if (v_expand > 1) {
 800fa92:	f1b8 0f01 	cmp.w	r8, #1
 800fa96:	dd09      	ble.n	800faac <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fa98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fa9a:	463a      	mov	r2, r7
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	4638      	mov	r0, r7
 800faa0:	9301      	str	r3, [sp, #4]
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	1c63      	adds	r3, r4, #1
 800faa8:	f007 f91f 	bl	8016cea <jcopy_sample_rows>
    outrow += v_expand;
 800faac:	4444      	add	r4, r8
 800faae:	e7e0      	b.n	800fa72 <int_upsample+0x24>
	*outptr++ = invalue;
 800fab0:	4618      	mov	r0, r3
 800fab2:	4652      	mov	r2, sl
 800fab4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800fab8:	f01a fe3a 	bl	802a730 <memset>
 800fabc:	4603      	mov	r3, r0
 800fabe:	4453      	add	r3, sl
 800fac0:	e7e5      	b.n	800fa8e <int_upsample+0x40>

0800fac2 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800fac2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fac6:	4605      	mov	r5, r0
 800fac8:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800faca:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800facc:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800face:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800fad2:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800fad6:	42a3      	cmp	r3, r4
 800fad8:	dc02      	bgt.n	800fae0 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800fada:	b002      	add	sp, #8
 800fadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800fae0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800fae4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800fae6:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800faea:	441a      	add	r2, r3
    while (outptr < outend) {
 800faec:	4293      	cmp	r3, r2
 800faee:	d30a      	bcc.n	800fb06 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800faf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800faf2:	4621      	mov	r1, r4
 800faf4:	4632      	mov	r2, r6
 800faf6:	4630      	mov	r0, r6
 800faf8:	e9cd 8300 	strd	r8, r3, [sp]
 800fafc:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800fafe:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fb00:	f007 f8f3 	bl	8016cea <jcopy_sample_rows>
    outrow += 2;
 800fb04:	e7e5      	b.n	800fad2 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800fb06:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800fb0a:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800fb0e:	f803 0c01 	strb.w	r0, [r3, #-1]
 800fb12:	e7eb      	b.n	800faec <h2v2_upsample+0x2a>

0800fb14 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800fb14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fb18:	6843      	ldr	r3, [r0, #4]
 800fb1a:	22a0      	movs	r2, #160	; 0xa0
 800fb1c:	2101      	movs	r1, #1
{
 800fb1e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800fb24:	4b3f      	ldr	r3, [pc, #252]	; (800fc24 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800fb26:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fb2a:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800fb2c:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800fb2e:	4b3e      	ldr	r3, [pc, #248]	; (800fc28 <jinit_upsampler+0x114>)
 800fb30:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800fb32:	2300      	movs	r3, #0
 800fb34:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800fb36:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800fb3a:	b12b      	cbz	r3, 800fb48 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	221a      	movs	r2, #26
 800fb40:	4620      	mov	r0, r4
 800fb42:	615a      	str	r2, [r3, #20]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fb48:	f105 060c 	add.w	r6, r5, #12
 800fb4c:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800fb50:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800fb54:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800fb58:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800fc38 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fb5c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800fb60:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fc3c <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fb64:	3574      	adds	r5, #116	; 0x74
 800fb66:	eb05 0308 	add.w	r3, r5, r8
 800fb6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	dc01      	bgt.n	800fb74 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800fb70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800fb74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb76:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800fb78:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800fb7c:	4343      	muls	r3, r0
 800fb7e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800fb82:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800fb86:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800fb8a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800fb8e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800fb92:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800fb94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb96:	b932      	cbnz	r2, 800fba6 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800fb98:	4b24      	ldr	r3, [pc, #144]	; (800fc2c <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800fb9a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800fb9c:	3758      	adds	r7, #88	; 0x58
 800fb9e:	3604      	adds	r6, #4
 800fba0:	f108 0801 	add.w	r8, r8, #1
 800fba4:	e7df      	b.n	800fb66 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800fba6:	fb0c f20e 	mul.w	r2, ip, lr
 800fbaa:	fb92 f2f1 	sdiv	r2, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800fbae:	455a      	cmp	r2, fp
 800fbb0:	d103      	bne.n	800fbba <jinit_upsampler+0xa6>
 800fbb2:	4283      	cmp	r3, r0
 800fbb4:	d101      	bne.n	800fbba <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800fbb6:	4b1e      	ldr	r3, [pc, #120]	; (800fc30 <jinit_upsampler+0x11c>)
 800fbb8:	e7ef      	b.n	800fb9a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800fbba:	ebbb 0f42 	cmp.w	fp, r2, lsl #1
 800fbbe:	d119      	bne.n	800fbf4 <jinit_upsampler+0xe0>
 800fbc0:	4283      	cmp	r3, r0
 800fbc2:	d111      	bne.n	800fbe8 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800fbc4:	4b1b      	ldr	r3, [pc, #108]	; (800fc34 <jinit_upsampler+0x120>)
 800fbc6:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fbc8:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fbca:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800fbce:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fbd0:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fbd4:	f007 f881 	bl	8016cda <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fbd8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fbdc:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fbde:	2101      	movs	r1, #1
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	47d8      	blx	fp
 800fbe4:	6030      	str	r0, [r6, #0]
 800fbe6:	e7d9      	b.n	800fb9c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800fbe8:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800fbec:	d102      	bne.n	800fbf4 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800fbee:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800fbf2:	e7e9      	b.n	800fbc8 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800fbf4:	fb9b f1f2 	sdiv	r1, fp, r2
 800fbf8:	fb02 b211 	mls	r2, r2, r1, fp
 800fbfc:	b95a      	cbnz	r2, 800fc16 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800fbfe:	fb90 f2f3 	sdiv	r2, r0, r3
 800fc02:	fb03 0312 	mls	r3, r3, r2, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800fc06:	b933      	cbnz	r3, 800fc16 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800fc08:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800fc0c:	f888 1000 	strb.w	r1, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800fc10:	f888 200a 	strb.w	r2, [r8, #10]
    if (need_buffer) {
 800fc14:	e7d8      	b.n	800fbc8 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	2227      	movs	r2, #39	; 0x27
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	615a      	str	r2, [r3, #20]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4798      	blx	r3
    if (need_buffer) {
 800fc22:	e7d1      	b.n	800fbc8 <jinit_upsampler+0xb4>
 800fc24:	0800f945 	.word	0x0800f945
 800fc28:	0800f955 	.word	0x0800f955
 800fc2c:	0800fa17 	.word	0x0800fa17
 800fc30:	0800fa13 	.word	0x0800fa13
 800fc34:	0800fa1d 	.word	0x0800fa1d
 800fc38:	0800fa4f 	.word	0x0800fa4f
 800fc3c:	0800fac3 	.word	0x0800fac3

0800fc40 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800fc40:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800fc42:	6803      	ldr	r3, [r0, #0]
{
 800fc44:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	4669      	mov	r1, sp
 800fc4a:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800fc4c:	b033      	add	sp, #204	; 0xcc
 800fc4e:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc52 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800fc52:	2900      	cmp	r1, #0
{
 800fc54:	4603      	mov	r3, r0
 800fc56:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800fc58:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800fc5a:	da0b      	bge.n	800fc74 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800fc5c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800fc5e:	b112      	cbz	r2, 800fc66 <emit_message+0x14>
 800fc60:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800fc62:	2a02      	cmp	r2, #2
 800fc64:	dd02      	ble.n	800fc6c <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800fc66:	68a2      	ldr	r2, [r4, #8]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800fc6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fc6e:	3301      	adds	r3, #1
 800fc70:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800fc72:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800fc74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fc76:	428b      	cmp	r3, r1
 800fc78:	dbfb      	blt.n	800fc72 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800fc7a:	68a3      	ldr	r3, [r4, #8]
}
 800fc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800fc80:	4718      	bx	r3

0800fc82 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800fc82:	6803      	ldr	r3, [r0, #0]
 800fc84:	2200      	movs	r2, #0
 800fc86:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800fc88:	615a      	str	r2, [r3, #20]
}
 800fc8a:	4770      	bx	lr

0800fc8c <format_message>:
{
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800fc90:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800fc92:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800fc94:	2b00      	cmp	r3, #0
{
 800fc96:	b530      	push	{r4, r5, lr}
 800fc98:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800fc9a:	dd1f      	ble.n	800fcdc <format_message+0x50>
 800fc9c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800fc9e:	4299      	cmp	r1, r3
 800fca0:	db1c      	blt.n	800fcdc <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800fca2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fca4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800fca8:	b911      	cbnz	r1, 800fcb0 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800fcaa:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800fcac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fcae:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800fcb0:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800fcb2:	f813 4b01 	ldrb.w	r4, [r3], #1
 800fcb6:	b9fc      	cbnz	r4, 800fcf8 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800fcb8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fcba:	9305      	str	r3, [sp, #20]
 800fcbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800fcbe:	9304      	str	r3, [sp, #16]
 800fcc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fcc2:	9303      	str	r3, [sp, #12]
 800fcc4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fcc6:	9302      	str	r3, [sp, #8]
 800fcc8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fcca:	9301      	str	r3, [sp, #4]
 800fccc:	6a13      	ldr	r3, [r2, #32]
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800fcd4:	f01a fc34 	bl	802a540 <siprintf>
}
 800fcd8:	b007      	add	sp, #28
 800fcda:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800fcdc:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800fcde:	2c00      	cmp	r4, #0
 800fce0:	d0e3      	beq.n	800fcaa <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fce2:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800fce4:	4299      	cmp	r1, r3
 800fce6:	dce0      	bgt.n	800fcaa <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fce8:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800fcec:	429d      	cmp	r5, r3
 800fcee:	dbdc      	blt.n	800fcaa <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800fcf0:	1a59      	subs	r1, r3, r1
 800fcf2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800fcf6:	e7d7      	b.n	800fca8 <format_message+0x1c>
    if (ch == '%') {
 800fcf8:	2c25      	cmp	r4, #37	; 0x25
 800fcfa:	d1da      	bne.n	800fcb2 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	2b73      	cmp	r3, #115	; 0x73
 800fd00:	d1da      	bne.n	800fcb8 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fd02:	3218      	adds	r2, #24
}
 800fd04:	b007      	add	sp, #28
 800fd06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fd0a:	f01a bc19 	b.w	802a540 <siprintf>

0800fd0e <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800fd0e:	6803      	ldr	r3, [r0, #0]
{
 800fd10:	b510      	push	{r4, lr}
 800fd12:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800fd18:	4620      	mov	r0, r4
}
 800fd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800fd1e:	f7f9 bf30 	b.w	8009b82 <jpeg_destroy>
	...

0800fd24 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800fd24:	4a0a      	ldr	r2, [pc, #40]	; (800fd50 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800fd26:	490b      	ldr	r1, [pc, #44]	; (800fd54 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800fd28:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800fd2a:	4a0b      	ldr	r2, [pc, #44]	; (800fd58 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800fd2c:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800fd2e:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800fd30:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800fd32:	4a0a      	ldr	r2, [pc, #40]	; (800fd5c <jpeg_std_error+0x38>)
 800fd34:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800fd36:	4a0a      	ldr	r2, [pc, #40]	; (800fd60 <jpeg_std_error+0x3c>)
 800fd38:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800fd3a:	4a0a      	ldr	r2, [pc, #40]	; (800fd64 <jpeg_std_error+0x40>)
 800fd3c:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800fd3e:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800fd40:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800fd44:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800fd46:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800fd4a:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800fd4e:	4770      	bx	lr
 800fd50:	0800fd0f 	.word	0x0800fd0f
 800fd54:	0802ef14 	.word	0x0802ef14
 800fd58:	0800fc53 	.word	0x0800fc53
 800fd5c:	0800fc41 	.word	0x0800fc41
 800fd60:	0800fc8d 	.word	0x0800fc8d
 800fd64:	0800fc83 	.word	0x0800fc83

0800fd68 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800fd6c:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800fd70:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800fd72:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fd76:	3a02      	subs	r2, #2
 800fd78:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800fd7c:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fd7e:	ed9f 5abc 	vldr	s10, [pc, #752]	; 8010070 <jpeg_idct_float+0x308>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fd82:	ed9f 4abc 	vldr	s8, [pc, #752]	; 8010074 <jpeg_idct_float+0x30c>
 800fd86:	eddf 4abc 	vldr	s9, [pc, #752]	; 8010078 <jpeg_idct_float+0x310>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fd8a:	eddf 3abc 	vldr	s7, [pc, #752]	; 801007c <jpeg_idct_float+0x314>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fd8e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800fd92:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fd94:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fd98:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800fd9c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fda0:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800fda4:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fda8:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fdac:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800fdb0:	ecbc 7a01 	vldmia	ip!, {s14}
 800fdb4:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fdb8:	ea4e 0b09 	orr.w	fp, lr, r9
 800fdbc:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fdc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fdc4:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fdc8:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fdcc:	ea41 0b0b 	orr.w	fp, r1, fp
 800fdd0:	ea45 0b0b 	orr.w	fp, r5, fp
 800fdd4:	ea50 0b0b 	orrs.w	fp, r0, fp
 800fdd8:	f040 80bf 	bne.w	800ff5a <jpeg_idct_float+0x1f2>
      wsptr[DCTSIZE*0] = dcval;
 800fddc:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fde0:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fde4:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fde8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fdec:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fdf0:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fdf4:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fdf8:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fdfc:	45e2      	cmp	sl, ip
 800fdfe:	d1c6      	bne.n	800fd8e <jpeg_idct_float+0x26>
 800fe00:	1f1c      	subs	r4, r3, #4
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800fe02:	4669      	mov	r1, sp
 800fe04:	331c      	adds	r3, #28
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fe06:	eddf 2a9e 	vldr	s5, [pc, #632]	; 8010080 <jpeg_idct_float+0x318>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fe0a:	eddf 4a99 	vldr	s9, [pc, #612]	; 8010070 <jpeg_idct_float+0x308>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fe0e:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8010074 <jpeg_idct_float+0x30c>
 800fe12:	ed9f 4a99 	vldr	s8, [pc, #612]	; 8010078 <jpeg_idct_float+0x310>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fe16:	eddf 3a99 	vldr	s7, [pc, #612]	; 801007c <jpeg_idct_float+0x314>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fe1a:	edd1 6a00 	vldr	s13, [r1]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fe1e:	3120      	adds	r1, #32
    tmp10 = z5 + wsptr[4];
 800fe20:	ed11 7a04 	vldr	s14, [r1, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fe24:	ee76 6aa2 	vadd.f32	s13, s13, s5
    tmp13 = wsptr[2] + wsptr[6];
 800fe28:	ed51 5a02 	vldr	s11, [r1, #-8]
    z11 = wsptr[1] + wsptr[7];
 800fe2c:	ed11 1a01 	vldr	s2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 800fe30:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800fe34:	ee77 7a26 	vadd.f32	s15, s14, s13
    outptr = output_buf[ctr] + output_col;
 800fe38:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800fe3a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    tmp13 = wsptr[2] + wsptr[6];
 800fe3e:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800fe42:	18a8      	adds	r0, r5, r2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fe44:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800fe46:	ee37 6a25 	vadd.f32	s12, s14, s11
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fe4a:	42a3      	cmp	r3, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fe4c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fe50:	eeb0 2a46 	vmov.f32	s4, s12
    tmp0 = tmp10 + tmp13;
 800fe54:	ee77 5a86 	vadd.f32	s11, s15, s12
    tmp3 = tmp10 - tmp13;
 800fe58:	ee37 5ac6 	vsub.f32	s10, s15, s12
    z13 = wsptr[5] + wsptr[3];
 800fe5c:	ed51 7a03 	vldr	s15, [r1, #-12]
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fe60:	ee97 2a24 	vfnms.f32	s4, s14, s9
    z13 = wsptr[5] + wsptr[3];
 800fe64:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 800fe68:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800fe6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800fe70:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800fe74:	ee36 6a82 	vadd.f32	s12, s13, s4
    tmp2 = tmp11 - tmp12;
 800fe78:	ee76 6ac2 	vsub.f32	s13, s13, s4
    z11 = wsptr[1] + wsptr[7];
 800fe7c:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800fe80:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800fe84:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800fe88:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fe8c:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fe90:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fe94:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fe98:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fe9c:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800fea0:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800fea4:	eef0 1a67 	vmov.f32	s3, s15
 800fea8:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800feac:	ee35 2a81 	vadd.f32	s4, s11, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800feb0:	ee75 5ac1 	vsub.f32	s11, s11, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800feb4:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800feb8:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tmp4 = tmp10 - tmp5;
 800febc:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fec0:	ee12 2a10 	vmov	r2, s4
 800fec4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fec8:	5cb2      	ldrb	r2, [r6, r2]
 800feca:	55ea      	strb	r2, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fecc:	ee15 2a90 	vmov	r2, s11
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fed0:	ee76 5a27 	vadd.f32	s11, s12, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fed4:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fed8:	ee36 6a67 	vsub.f32	s12, s12, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fedc:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fee0:	5cb2      	ldrb	r2, [r6, r2]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fee2:	eefd 7ac6 	vcvt.s32.f32	s15, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fee6:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fee8:	ee15 2a90 	vmov	r2, s11
 800feec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fef0:	5cb2      	ldrb	r2, [r6, r2]
 800fef2:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fef4:	ee17 2a90 	vmov	r2, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fef8:	ee76 7aa1 	vadd.f32	s15, s13, s3
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fefc:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800ff00:	ee76 6ae1 	vsub.f32	s13, s13, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800ff04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800ff08:	5cb2      	ldrb	r2, [r6, r2]
 800ff0a:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800ff0c:	ee17 2a90 	vmov	r2, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800ff10:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800ff14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ff18:	5cb2      	ldrb	r2, [r6, r2]
 800ff1a:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800ff1c:	ee17 2a90 	vmov	r2, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800ff20:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800ff24:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800ff28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800ff2c:	5cb2      	ldrb	r2, [r6, r2]
 800ff2e:	7142      	strb	r2, [r0, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800ff30:	ee17 2a90 	vmov	r2, s15
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800ff34:	ee75 7a47 	vsub.f32	s15, s10, s14
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800ff38:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800ff3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800ff40:	5cb2      	ldrb	r2, [r6, r2]
 800ff42:	70c2      	strb	r2, [r0, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800ff44:	ee17 2a90 	vmov	r2, s15
 800ff48:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ff4c:	5cb2      	ldrb	r2, [r6, r2]
 800ff4e:	7102      	strb	r2, [r0, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800ff50:	f47f af63 	bne.w	800fe1a <jpeg_idct_float+0xb2>
  }
}
 800ff54:	b041      	add	sp, #260	; 0x104
 800ff56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ff5a:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ff5e:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ff62:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ff66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ff6a:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ff6e:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ff72:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ff76:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800ff7a:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ff7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ff82:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ff86:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ff8a:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800ff8e:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800ff92:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800ff96:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800ff9a:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800ff9e:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800ffa2:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800ffa6:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800ffaa:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800ffae:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800ffb2:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ffb6:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800ffba:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800ffbe:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ffc2:	ee07 ea90 	vmov	s15, lr
 800ffc6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ffca:	ee07 8a90 	vmov	s15, r8
 800ffce:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ffd2:	ee07 1a90 	vmov	s15, r1
 800ffd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffda:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800ffde:	ee07 0a10 	vmov	s14, r0
 800ffe2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ffe6:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800ffea:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800ffee:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fff2:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800fff6:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800fffa:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800fffe:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8010002:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010006:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 801000a:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 801000e:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010012:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 8010016:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 801001a:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 801001e:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 8010022:	eeb0 6a67 	vmov.f32	s12, s15
 8010026:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 801002a:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 801002e:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8010032:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8010036:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 801003a:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 801003e:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8010042:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 8010046:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 801004a:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 801004e:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8010052:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8010056:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 801005a:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 801005e:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8010062:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 8010066:	ee73 7a47 	vsub.f32	s15, s6, s14
 801006a:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
    wsptr++;
 801006e:	e6c5      	b.n	800fdfc <jpeg_idct_float+0x94>
 8010070:	3fb504f3 	.word	0x3fb504f3
 8010074:	3f8a8bd4 	.word	0x3f8a8bd4
 8010078:	3fec835e 	.word	0x3fec835e
 801007c:	40273d75 	.word	0x40273d75
 8010080:	43008000 	.word	0x43008000

08010084 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 801008a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801008c:	3a02      	subs	r2, #2
{
 801008e:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010090:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010094:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010098:	f105 0320 	add.w	r3, r5, #32
 801009c:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 801009e:	ab04      	add	r3, sp, #16
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80100a0:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80100a4:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80100a6:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80100aa:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 80100ae:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80100b2:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 80100b6:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80100ba:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80100be:	f855 0b04 	ldr.w	r0, [r5], #4
 80100c2:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80100c6:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80100c8:	ea46 000c 	orr.w	r0, r6, ip
 80100cc:	4338      	orrs	r0, r7
 80100ce:	ea4a 0000 	orr.w	r0, sl, r0
 80100d2:	4308      	orrs	r0, r1
 80100d4:	ea4e 0000 	orr.w	r0, lr, r0
 80100d8:	ea58 0000 	orrs.w	r0, r8, r0
 80100dc:	d13f      	bne.n	801015e <jpeg_idct_ifast+0xda>
      wsptr[DCTSIZE*0] = dcval;
 80100de:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80100e2:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 80100e4:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80100e6:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80100e8:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 80100ea:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 80100ee:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 80100f2:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80100f6:	9903      	ldr	r1, [sp, #12]
 80100f8:	42a9      	cmp	r1, r5
 80100fa:	d1d1      	bne.n	80100a0 <jpeg_idct_ifast+0x1c>
 80100fc:	9b02      	ldr	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80100fe:	ad04      	add	r5, sp, #16
 8010100:	f1a3 0b04 	sub.w	fp, r3, #4
 8010104:	331c      	adds	r3, #28
 8010106:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010108:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 801010a:	f85b af04 	ldr.w	sl, [fp, #4]!
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801010e:	69ea      	ldr	r2, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 8010110:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8010114:	e9d5 e801 	ldrd	lr, r8, [r5, #4]
 8010118:	e9d5 4703 	ldrd	r4, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801011c:	ea4e 0608 	orr.w	r6, lr, r8
 8010120:	4326      	orrs	r6, r4
 8010122:	e9d5 3c05 	ldrd	r3, ip, [r5, #20]
 8010126:	433e      	orrs	r6, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8010128:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801012c:	431e      	orrs	r6, r3
 801012e:	ea46 060c 	orr.w	r6, r6, ip
 8010132:	4316      	orrs	r6, r2
 8010134:	d17e      	bne.n	8010234 <jpeg_idct_ifast+0x1b0>
				  & RANGE_MASK];
 8010136:	f3c1 1149 	ubfx	r1, r1, #5, #10
      
      outptr[0] = dcval;
 801013a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801013c:	f819 3001 	ldrb.w	r3, [r9, r1]
      outptr[0] = dcval;
 8010140:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 8010144:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 8010146:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 8010148:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 801014a:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 801014c:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 801014e:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 8010150:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010152:	9b03      	ldr	r3, [sp, #12]
 8010154:	455b      	cmp	r3, fp
 8010156:	d1d7      	bne.n	8010108 <jpeg_idct_ifast+0x84>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8010158:	b045      	add	sp, #276	; 0x114
 801015a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801015e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8010160:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010164:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8010166:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801016a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 801016e:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010172:	eb0a 0004 	add.w	r0, sl, r4
    tmp11 = tmp0 - tmp2;
 8010176:	eba4 040a 	sub.w	r4, r4, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 801017a:	ebac 0b0e 	sub.w	fp, ip, lr
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 801017e:	eb0c 0a0e 	add.w	sl, ip, lr
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010182:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8010186:	eb00 0e0a 	add.w	lr, r0, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 801018a:	fb0c fb0b 	mul.w	fp, ip, fp
 801018e:	ebca 2b2b 	rsb	fp, sl, fp, asr #8
    tmp3 = tmp10 - tmp13;
 8010192:	eba0 0a0a 	sub.w	sl, r0, sl
    tmp2 = tmp11 - tmp12;
 8010196:	eba4 000b 	sub.w	r0, r4, fp
    tmp1 = tmp11 + tmp12;
 801019a:	eb04 0c0b 	add.w	ip, r4, fp
    tmp2 = tmp11 - tmp12;
 801019e:	9001      	str	r0, [sp, #4]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101a0:	69e8      	ldr	r0, [r5, #28]
 80101a2:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80101a4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80101a6:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80101a8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80101ac:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80101ae:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 80101b2:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 80101b6:	eb07 0801 	add.w	r8, r7, r1
    z10 = tmp6 - tmp5;
 80101ba:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 80101bc:	1837      	adds	r7, r6, r0
    z12 = tmp4 - tmp7;
 80101be:	1a30      	subs	r0, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80101c0:	180e      	adds	r6, r1, r0
    z12 = tmp4 - tmp7;
 80101c2:	4604      	mov	r4, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80101c4:	f240 10d9 	movw	r0, #473	; 0x1d9
    tmp7 = z11 + z13;		/* phase 5 */
 80101c8:	eb08 0b07 	add.w	fp, r8, r7
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80101cc:	eba7 0708 	sub.w	r7, r7, r8
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80101d0:	4346      	muls	r6, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80101d2:	f46f 7027 	mvn.w	r0, #668	; 0x29c
 80101d6:	4341      	muls	r1, r0
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80101d8:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80101dc:	4347      	muls	r7, r0
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80101de:	f240 1015 	movw	r0, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80101e2:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80101e4:	4344      	muls	r4, r0
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80101e6:	eb01 2126 	add.w	r1, r1, r6, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80101ea:	1220      	asrs	r0, r4, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 80101ec:	eba1 010b 	sub.w	r1, r1, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80101f0:	eba0 2026 	sub.w	r0, r0, r6, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 80101f4:	eb0e 060b 	add.w	r6, lr, fp
    tmp5 = tmp11 - tmp6;
 80101f8:	ebc1 2727 	rsb	r7, r1, r7, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 80101fc:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8010200:	ebae 060b 	sub.w	r6, lr, fp
    tmp4 = tmp10 + tmp5;
 8010204:	4438      	add	r0, r7
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8010206:	f8c3 60dc 	str.w	r6, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 801020a:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 801020e:	ebac 0101 	sub.w	r1, ip, r1
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8010212:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8010214:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8010218:	9901      	ldr	r1, [sp, #4]
 801021a:	4439      	add	r1, r7
 801021c:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 801021e:	9901      	ldr	r1, [sp, #4]
 8010220:	1bcc      	subs	r4, r1, r7
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8010222:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8010226:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 801022a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 801022e:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8010230:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 8010232:	e760      	b.n	80100f6 <jpeg_idct_ifast+0x72>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 8010234:	187e      	adds	r6, r7, r1
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 8010236:	1bc9      	subs	r1, r1, r7
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 8010238:	eb08 070c 	add.w	r7, r8, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 801023c:	eba8 080c 	sub.w	r8, r8, ip
 8010240:	f44f 7cb5 	mov.w	ip, #362	; 0x16a
 8010244:	fb0c f808 	mul.w	r8, ip, r8
    tmp0 = tmp10 + tmp13;
 8010248:	eb06 0c07 	add.w	ip, r6, r7
    tmp3 = tmp10 - tmp13;
 801024c:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 801024e:	ebc7 2828 	rsb	r8, r7, r8, asr #8
    tmp1 = tmp11 + tmp12;
 8010252:	eb01 0708 	add.w	r7, r1, r8
    tmp2 = tmp11 - tmp12;
 8010256:	eba1 0108 	sub.w	r1, r1, r8
 801025a:	9101      	str	r1, [sp, #4]
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 801025c:	18e1      	adds	r1, r4, r3
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 801025e:	1b1b      	subs	r3, r3, r4
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 8010260:	eb0e 0402 	add.w	r4, lr, r2
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 8010264:	ebae 0202 	sub.w	r2, lr, r2
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8010268:	9102      	str	r1, [sp, #8]
    tmp7 = z11 + z13;		/* phase 5 */
 801026a:	eb01 0804 	add.w	r8, r1, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 801026e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010272:	eb03 0e02 	add.w	lr, r3, r2
 8010276:	fb01 fe0e 	mul.w	lr, r1, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801027a:	f46f 7127 	mvn.w	r1, #668	; 0x29c
 801027e:	434b      	muls	r3, r1
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010280:	9902      	ldr	r1, [sp, #8]
 8010282:	1a64      	subs	r4, r4, r1
 8010284:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010288:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801028a:	434c      	muls	r4, r1
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801028c:	f240 1115 	movw	r1, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010290:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010294:	434a      	muls	r2, r1
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8010296:	994e      	ldr	r1, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010298:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801029c:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 801029e:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80102a2:	eba2 222e 	sub.w	r2, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 80102a6:	eb0c 0e08 	add.w	lr, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 80102aa:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 80102ae:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    tmp4 = tmp10 + tmp5;
 80102b2:	4422      	add	r2, r4
			    & RANGE_MASK];
 80102b4:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 80102b8:	f819 e00e 	ldrb.w	lr, [r9, lr]
 80102bc:	f80a e001 	strb.w	lr, [sl, r1]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 80102c0:	f819 c00c 	ldrb.w	ip, [r9, ip]
 80102c4:	f880 c007 	strb.w	ip, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 80102c8:	eb07 0c03 	add.w	ip, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80102cc:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 80102ce:	f3cc 1c49 	ubfx	ip, ip, #5, #10
			    & RANGE_MASK];
 80102d2:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 80102d6:	f819 c00c 	ldrb.w	ip, [r9, ip]
 80102da:	f880 c001 	strb.w	ip, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80102de:	f819 3007 	ldrb.w	r3, [r9, r7]
 80102e2:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80102e4:	9b01      	ldr	r3, [sp, #4]
 80102e6:	4423      	add	r3, r4
			    & RANGE_MASK];
 80102e8:	f3c3 1349 	ubfx	r3, r3, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80102ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80102f0:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80102f2:	9b01      	ldr	r3, [sp, #4]
 80102f4:	1b19      	subs	r1, r3, r4
			    & RANGE_MASK];
 80102f6:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80102fa:	f819 3001 	ldrb.w	r3, [r9, r1]
 80102fe:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8010300:	18b3      	adds	r3, r6, r2
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8010302:	1ab6      	subs	r6, r6, r2
			    & RANGE_MASK];
 8010304:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8010308:	f3c6 1649 	ubfx	r6, r6, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 801030c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010310:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8010312:	f819 3006 	ldrb.w	r3, [r9, r6]
 8010316:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010318:	e71b      	b.n	8010152 <jpeg_idct_ifast+0xce>
	...

0801031c <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010320:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8010322:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 8010324:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8010326:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010328:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801032c:	3380      	adds	r3, #128	; 0x80
 801032e:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010330:	1e93      	subs	r3, r2, #2
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	f105 0320 	add.w	r3, r5, #32
 8010338:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801033a:	9b00      	ldr	r3, [sp, #0]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 801033c:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801033e:	f855 0b04 	ldr.w	r0, [r5], #4
 8010342:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010344:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8010348:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801034c:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 8010350:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010354:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 8010358:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801035c:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8010360:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8010364:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010366:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801036a:	9200      	str	r2, [sp, #0]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801036c:	ea4e 0000 	orr.w	r0, lr, r0
 8010370:	4330      	orrs	r0, r6
 8010372:	ea48 0000 	orr.w	r0, r8, r0
 8010376:	4320      	orrs	r0, r4
 8010378:	ea59 0000 	orrs.w	r0, r9, r0
 801037c:	d146      	bne.n	801040c <jpeg_idct_islow+0xf0>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801037e:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 8010380:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010384:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8010386:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8010388:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801038a:	67cb      	str	r3, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 801038c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010390:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010394:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010398:	9b04      	ldr	r3, [sp, #16]
 801039a:	42ab      	cmp	r3, r5
 801039c:	d1cd      	bne.n	801033a <jpeg_idct_islow+0x1e>
 801039e:	9b03      	ldr	r3, [sp, #12]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80103a0:	ad06      	add	r5, sp, #24
 80103a2:	f1a3 0904 	sub.w	r9, r3, #4
 80103a6:	331c      	adds	r3, #28
 80103a8:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80103aa:	f859 3f04 	ldr.w	r3, [r9, #4]!
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80103ae:	f8d5 b01c 	ldr.w	fp, [r5, #28]
    outptr = output_buf[ctr] + output_col;
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	9a00      	ldr	r2, [sp, #0]
 80103b6:	9b50      	ldr	r3, [sp, #320]	; 0x140
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80103b8:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 80103bc:	e9d5 e603 	ldrd	lr, r6, [r5, #12]
    outptr = output_buf[ctr] + output_col;
 80103c0:	4413      	add	r3, r2
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80103c2:	ea4a 0200 	orr.w	r2, sl, r0
 80103c6:	ea42 020e 	orr.w	r2, r2, lr
 80103ca:	e9d5 8405 	ldrd	r8, r4, [r5, #20]
 80103ce:	4332      	orrs	r2, r6
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80103d0:	f855 1b20 	ldr.w	r1, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80103d4:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80103d8:	3110      	adds	r1, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80103da:	4322      	orrs	r2, r4
 80103dc:	ea52 020b 	orrs.w	r2, r2, fp
 80103e0:	f040 8092 	bne.w	8010508 <jpeg_idct_islow+0x1ec>
				  & RANGE_MASK];
 80103e4:	f3c1 1149 	ubfx	r1, r1, #5, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80103e8:	9a01      	ldr	r2, [sp, #4]

      outptr[0] = dcval;
 80103ea:	9800      	ldr	r0, [sp, #0]
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80103ec:	5c52      	ldrb	r2, [r2, r1]
      outptr[0] = dcval;
 80103ee:	9950      	ldr	r1, [sp, #320]	; 0x140
 80103f0:	5442      	strb	r2, [r0, r1]
      outptr[1] = dcval;
 80103f2:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 80103f4:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 80103f6:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 80103f8:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 80103fa:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 80103fc:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 80103fe:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010400:	9b05      	ldr	r3, [sp, #20]
 8010402:	454b      	cmp	r3, r9
 8010404:	d1d1      	bne.n	80103aa <jpeg_idct_islow+0x8e>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8010406:	b047      	add	sp, #284	; 0x11c
 8010408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801040c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801040e:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 8010412:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010414:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010416:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 801041a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801041e:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8010420:	183c      	adds	r4, r7, r0
 8010422:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8010424:	f641 027e 	movw	r2, #6270	; 0x187e
 8010428:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801042c:	4a74      	ldr	r2, [pc, #464]	; (8010600 <jpeg_idct_islow+0x2e4>)
 801042e:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010432:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8010434:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8010436:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 801043a:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 801043e:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8010442:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010444:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 8010448:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 801044a:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801044c:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801044e:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010452:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010456:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801045a:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801045e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 8010460:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8010462:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010466:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 801046a:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 801046e:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8010472:	1930      	adds	r0, r6, r4
 8010474:	4350      	muls	r0, r2
    z2 += z1;
 8010476:	4a63      	ldr	r2, [pc, #396]	; (8010604 <jpeg_idct_islow+0x2e8>)
 8010478:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 801047c:	4a62      	ldr	r2, [pc, #392]	; (8010608 <jpeg_idct_islow+0x2ec>)
 801047e:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8010482:	eb09 040a 	add.w	r4, r9, sl
 8010486:	4a61      	ldr	r2, [pc, #388]	; (801060c <jpeg_idct_islow+0x2f0>)
 8010488:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 801048a:	f640 128e 	movw	r2, #2446	; 0x98e
 801048e:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8010492:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8010494:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 8010498:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801049c:	4a5c      	ldr	r2, [pc, #368]	; (8010610 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 801049e:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80104a2:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80104a6:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80104aa:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 80104ae:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 80104b0:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 80104b2:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 80104b6:	f246 2854 	movw	r8, #25172	; 0x6254
 80104ba:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80104be:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80104c2:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80104c6:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80104c8:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80104cc:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80104d0:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80104d4:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80104d8:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80104dc:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80104de:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80104e0:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80104e2:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80104e4:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80104e6:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80104ea:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80104ec:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80104ee:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80104f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80104f4:	9b02      	ldr	r3, [sp, #8]
 80104f6:	444b      	add	r3, r9
 80104f8:	12db      	asrs	r3, r3, #11
 80104fa:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80104fc:	9b02      	ldr	r3, [sp, #8]
 80104fe:	eba3 0309 	sub.w	r3, r3, r9
 8010502:	12db      	asrs	r3, r3, #11
 8010504:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8010506:	e747      	b.n	8010398 <jpeg_idct_islow+0x7c>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8010508:	1902      	adds	r2, r0, r4
 801050a:	f241 1751 	movw	r7, #4433	; 0x1151
 801050e:	437a      	muls	r2, r7
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8010510:	f641 077e 	movw	r7, #6270	; 0x187e
 8010514:	fb07 2000 	mla	r0, r7, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8010518:	4f39      	ldr	r7, [pc, #228]	; (8010600 <jpeg_idct_islow+0x2e4>)
 801051a:	fb07 2204 	mla	r2, r7, r4, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 801051e:	1874      	adds	r4, r6, r1
    tmp1 = (z2 - z3) << CONST_BITS;
 8010520:	1b89      	subs	r1, r1, r6
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8010522:	f242 57a1 	movw	r7, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8010526:	eb00 3644 	add.w	r6, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 801052a:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 801052e:	eb0e 040b 	add.w	r4, lr, fp
    tmp10 = tmp0 + tmp2;
 8010532:	9602      	str	r6, [sp, #8]
    tmp11 = tmp1 + tmp3;
 8010534:	eb02 3641 	add.w	r6, r2, r1, lsl #13
    tmp13 = tmp0 - tmp2;
 8010538:	9003      	str	r0, [sp, #12]
    z3 = tmp1 + tmp3;
 801053a:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 801053e:	ebc2 3241 	rsb	r2, r2, r1, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8010542:	1821      	adds	r1, r4, r0
    tmp12 = tmp1 - tmp3;
 8010544:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8010546:	4379      	muls	r1, r7
    z2 += z1;
 8010548:	4f2e      	ldr	r7, [pc, #184]	; (8010604 <jpeg_idct_islow+0x2e8>)
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801054a:	9a00      	ldr	r2, [sp, #0]
    z2 += z1;
 801054c:	fb07 1404 	mla	r4, r7, r4, r1
    z3 += z1;
 8010550:	4f2d      	ldr	r7, [pc, #180]	; (8010608 <jpeg_idct_islow+0x2ec>)
 8010552:	fb07 1100 	mla	r1, r7, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8010556:	eb0a 000b 	add.w	r0, sl, fp
 801055a:	4f2c      	ldr	r7, [pc, #176]	; (801060c <jpeg_idct_islow+0x2f0>)
 801055c:	4378      	muls	r0, r7
    tmp0 += z1 + z2;
 801055e:	f640 178e 	movw	r7, #2446	; 0x98e
 8010562:	eb04 0c00 	add.w	ip, r4, r0
    tmp3 += z1 + z3;
 8010566:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 8010568:	fb07 cc0b 	mla	ip, r7, fp, ip
    tmp3 += z1 + z3;
 801056c:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010570:	4f27      	ldr	r7, [pc, #156]	; (8010610 <jpeg_idct_islow+0x2f4>)
    tmp3 += z1 + z3;
 8010572:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010576:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 801057a:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801057e:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010582:	9f02      	ldr	r7, [sp, #8]
    tmp1 += z1 + z3;
 8010584:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8010586:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 8010588:	fb0b 1108 	mla	r1, fp, r8, r1
    tmp2 += z1 + z2;
 801058c:	f246 2854 	movw	r8, #25172	; 0x6254
 8010590:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010594:	eb07 0e00 	add.w	lr, r7, r0
 8010598:	9f01      	ldr	r7, [sp, #4]
			    & RANGE_MASK];
 801059a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801059e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80105a2:	9f50      	ldr	r7, [sp, #320]	; 0x140
 80105a4:	f802 e007 	strb.w	lr, [r2, r7]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80105a8:	9f02      	ldr	r7, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80105aa:	9a04      	ldr	r2, [sp, #16]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80105ac:	1a3f      	subs	r7, r7, r0
 80105ae:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 80105b0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80105b4:	5dc0      	ldrb	r0, [r0, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80105b6:	9f01      	ldr	r7, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80105b8:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80105ba:	1930      	adds	r0, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80105bc:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 80105be:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80105c2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80105c6:	5c38      	ldrb	r0, [r7, r0]
 80105c8:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80105ca:	5db8      	ldrb	r0, [r7, r6]
 80105cc:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80105ce:	1850      	adds	r0, r2, r1
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80105d0:	1a52      	subs	r2, r2, r1
			    & RANGE_MASK];
 80105d2:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80105d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80105da:	5c38      	ldrb	r0, [r7, r0]
 80105dc:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80105de:	5cba      	ldrb	r2, [r7, r2]
 80105e0:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80105e2:	9a03      	ldr	r2, [sp, #12]
 80105e4:	4462      	add	r2, ip
			    & RANGE_MASK];
 80105e6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80105ea:	5cba      	ldrb	r2, [r7, r2]
 80105ec:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80105ee:	9a03      	ldr	r2, [sp, #12]
 80105f0:	eba2 020c 	sub.w	r2, r2, ip
			    & RANGE_MASK];
 80105f4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80105f8:	5cba      	ldrb	r2, [r7, r2]
 80105fa:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80105fc:	e700      	b.n	8010400 <jpeg_idct_islow+0xe4>
 80105fe:	bf00      	nop
 8010600:	ffffc4df 	.word	0xffffc4df
 8010604:	ffffc13b 	.word	0xffffc13b
 8010608:	fffff384 	.word	0xfffff384
 801060c:	ffffe333 	.word	0xffffe333
 8010610:	ffffadfd 	.word	0xffffadfd

08010614 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010618:	b0b9      	sub	sp, #228	; 0xe4
 801061a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801061c:	1e96      	subs	r6, r2, #2
 801061e:	9303      	str	r3, [sp, #12]
 8010620:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010622:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010626:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801062a:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801062e:	f102 030c 	add.w	r3, r2, #12
 8010632:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010634:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010638:	f640 2112 	movw	r1, #2578	; 0xa12
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801063c:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010640:	f642 09c6 	movw	r9, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010644:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010648:	f10c 0c04 	add.w	ip, ip, #4
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801064c:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801064e:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010652:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 8010656:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801065c:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801065e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010660:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010662:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8010666:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801066a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 801066e:	435a      	muls	r2, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010670:	f641 4337 	movw	r3, #7223	; 0x1c37
 8010674:	ebae 0702 	sub.w	r7, lr, r2
 8010678:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801067a:	eba4 030e 	sub.w	r3, r4, lr
 801067e:	434b      	muls	r3, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010680:	9901      	ldr	r1, [sp, #4]
 8010682:	18f8      	adds	r0, r7, r3
 8010684:	4408      	add	r0, r1
 8010686:	4985      	ldr	r1, [pc, #532]	; (801089c <jpeg_idct_7x7+0x288>)
 8010688:	fb01 010e 	mla	r1, r1, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801068c:	18a0      	adds	r0, r4, r2
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801068e:	9102      	str	r1, [sp, #8]
    tmp0 = z1 + z3;
 8010690:	18a1      	adds	r1, r4, r2
 8010692:	9104      	str	r1, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010694:	9901      	ldr	r1, [sp, #4]
 8010696:	fb09 1100 	mla	r1, r9, r0, r1
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801069a:	f46f 701f 	mvn.w	r0, #636	; 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801069e:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80106a2:	fb00 1202 	mla	r2, r0, r2, r1
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80106a6:	487e      	ldr	r0, [pc, #504]	; (80108a0 <jpeg_idct_7x7+0x28c>)
 80106a8:	fb00 1104 	mla	r1, r0, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106ac:	6a2c      	ldr	r4, [r5, #32]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80106ae:	443a      	add	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80106b0:	6e2f      	ldr	r7, [r5, #96]	; 0x60
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80106b2:	4419      	add	r1, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106b4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80106b8:	f641 50ef 	movw	r0, #7663	; 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80106bc:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80106be:	f9b6 4030 	ldrsh.w	r4, [r6, #48]	; 0x30
 80106c2:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80106c4:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80106c8:	eb03 0b04 	add.w	fp, r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80106cc:	fb07 f909 	mul.w	r9, r7, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80106d0:	1b1f      	subs	r7, r3, r4
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80106d2:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80106d6:	f240 5073 	movw	r0, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80106da:	444b      	add	r3, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80106dc:	444c      	add	r4, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80106de:	4347      	muls	r7, r0
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80106e0:	4870      	ldr	r0, [pc, #448]	; (80108a4 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 80106e2:	ebab 0a07 	sub.w	sl, fp, r7
    tmp1 += tmp2;
 80106e6:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80106e8:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80106ec:	4344      	muls	r4, r0
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80106ee:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80106f2:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 80106f6:	4427      	add	r7, r4
    tmp0 += z2;
 80106f8:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80106fa:	fb0b 3309 	mla	r3, fp, r9, r3
 80106fe:	4423      	add	r3, r4

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010700:	eb02 040a 	add.w	r4, r2, sl
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010704:	eba2 020a 	sub.w	r2, r2, sl
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010708:	12e4      	asrs	r4, r4, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801070a:	12d2      	asrs	r2, r2, #11
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801070c:	f84c 4c04 	str.w	r4, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010710:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010714:	9a02      	ldr	r2, [sp, #8]
 8010716:	443a      	add	r2, r7
 8010718:	12d2      	asrs	r2, r2, #11
 801071a:	f8cc 2018 	str.w	r2, [ip, #24]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801071e:	9a02      	ldr	r2, [sp, #8]
 8010720:	1bd0      	subs	r0, r2, r7
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010722:	18ca      	adds	r2, r1, r3
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010724:	1ac9      	subs	r1, r1, r3
    z2 -= tmp0;
 8010726:	9b04      	ldr	r3, [sp, #16]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010728:	12d2      	asrs	r2, r2, #11
    z2 -= tmp0;
 801072a:	ebae 0e03 	sub.w	lr, lr, r3
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801072e:	f642 5341 	movw	r3, #11585	; 0x2d41
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010732:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010736:	12c0      	asrs	r0, r0, #11
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010738:	9a01      	ldr	r2, [sp, #4]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801073a:	12c9      	asrs	r1, r1, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801073c:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010740:	fb03 230e 	mla	r3, r3, lr, r2
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010744:	f8cc 106c 	str.w	r1, [ip, #108]	; 0x6c
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 8010748:	12db      	asrs	r3, r3, #11
 801074a:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801074e:	9b05      	ldr	r3, [sp, #20]
 8010750:	42b3      	cmp	r3, r6
 8010752:	f47f af6f 	bne.w	8010634 <jpeg_idct_7x7+0x20>
 8010756:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 8010758:	ac07      	add	r4, sp, #28
 801075a:	f1a3 0904 	sub.w	r9, r3, #4
 801075e:	3318      	adds	r3, #24
 8010760:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010762:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8010766:	341c      	adds	r4, #28
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010768:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 801076c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801076e:	9303      	str	r3, [sp, #12]
 8010770:	189e      	adds	r6, r3, r2
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010772:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 8010776:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801077a:	9301      	str	r3, [sp, #4]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801077c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 8010780:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010784:	eba3 0c01 	sub.w	ip, r3, r1
 8010788:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801078c:	4f43      	ldr	r7, [pc, #268]	; (801089c <jpeg_idct_7x7+0x288>)
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801078e:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010792:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8010796:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 801079a:	1aea      	subs	r2, r5, r3
 801079c:	f640 2312 	movw	r3, #2578	; 0xa12
    z3 = (INT32) wsptr[5];
 80107a0:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80107a4:	435a      	muls	r2, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	eb0c 0002 	add.w	r0, ip, r2
 80107ac:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 80107b0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80107b4:	fb07 0003 	mla	r0, r7, r3, r0
    tmp0 = z1 + z3;
 80107b8:	186b      	adds	r3, r5, r1
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80107ba:	f642 07c6 	movw	r7, #10438	; 0x28c6
    tmp0 = z1 + z3;
 80107be:	9304      	str	r3, [sp, #16]
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80107c0:	437b      	muls	r3, r7
 80107c2:	9f01      	ldr	r7, [sp, #4]
 80107c4:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80107c8:	f46f 771f 	mvn.w	r7, #636	; 0x27c
 80107cc:	fb07 3101 	mla	r1, r7, r1, r3
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80107d0:	4f33      	ldr	r7, [pc, #204]	; (80108a0 <jpeg_idct_7x7+0x28c>)
 80107d2:	fb07 3305 	mla	r3, r7, r5, r3
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80107d6:	f240 5773 	movw	r7, #1395	; 0x573
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80107da:	4461      	add	r1, ip
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80107dc:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 80107de:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80107e2:	9302      	str	r3, [sp, #8]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80107e4:	eb02 0b0a 	add.w	fp, r2, sl
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80107e8:	eba2 050a 	sub.w	r5, r2, sl
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80107ec:	f641 53ef 	movw	r3, #7663	; 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80107f0:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80107f2:	44f2      	add	sl, lr
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80107f4:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80107f8:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80107fa:	437d      	muls	r5, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80107fc:	4f29      	ldr	r7, [pc, #164]	; (80108a4 <jpeg_idct_7x7+0x290>)
    tmp0 = tmp1 - tmp2;
 80107fe:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 8010802:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010804:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010808:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801080c:	9f03      	ldr	r7, [sp, #12]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 801080e:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010812:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010816:	4455      	add	r5, sl
    tmp0 += z2;
 8010818:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801081a:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801081e:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010822:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010826:	4452      	add	r2, sl
			    & RANGE_MASK];
 8010828:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 801082c:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010830:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8010834:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010838:	f818 1001 	ldrb.w	r1, [r8, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801083c:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801083e:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010840:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010842:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8010844:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8010848:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801084c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8010850:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010852:	f818 1000 	ldrb.w	r1, [r8, r0]
 8010856:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010858:	1899      	adds	r1, r3, r2
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801085a:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 801085c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8010860:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010864:	f818 1001 	ldrb.w	r1, [r8, r1]
 8010868:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801086a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801086e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 8010870:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8010874:	9a04      	ldr	r2, [sp, #16]
 8010876:	1a9b      	subs	r3, r3, r2
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010878:	f642 5241 	movw	r2, #11585	; 0x2d41
 801087c:	4353      	muls	r3, r2
 801087e:	9a01      	ldr	r2, [sp, #4]
 8010880:	eb03 3342 	add.w	r3, r3, r2, lsl #13
			    & RANGE_MASK];
 8010884:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010888:	f818 3003 	ldrb.w	r3, [r8, r3]
 801088c:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 801088e:	9b05      	ldr	r3, [sp, #20]
 8010890:	454b      	cmp	r3, r9
 8010892:	f47f af66 	bne.w	8010762 <jpeg_idct_7x7+0x14e>
  }
}
 8010896:	b039      	add	sp, #228	; 0xe4
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	ffffc515 	.word	0xffffc515
 80108a0:	ffffb0f1 	.word	0xffffb0f1
 80108a4:	ffffd3e1 	.word	0xffffd3e1

080108a8 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108ac:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80108b0:	b0a7      	sub	sp, #156	; 0x9c
 80108b2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80108b4:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108b6:	3080      	adds	r0, #128	; 0x80
 80108b8:	320a      	adds	r2, #10
 80108ba:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80108bc:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108be:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80108c0:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80108c2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80108c6:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80108ca:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80108ce:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108d0:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80108d4:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108d6:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80108da:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108de:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 80108e0:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80108e2:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80108e6:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80108ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80108ee:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80108f2:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 80108f4:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80108f6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80108fa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80108fc:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010900:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010902:	6a28      	ldr	r0, [r5, #32]
    tmp10 = tmp1 + tmp0;
 8010904:	eb04 0e02 	add.w	lr, r4, r2
    tmp12 = tmp1 - tmp0;
 8010908:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801090a:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 801090e:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010910:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8010912:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010916:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 801091a:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801091e:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010922:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010926:	eb02 0c08 	add.w	ip, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801092a:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801092e:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010932:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8010936:	eba2 0208 	sub.w	r2, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801093a:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801093e:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010940:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010944:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010948:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801094c:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010950:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010954:	f8c7 e074 	str.w	lr, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010958:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801095c:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010960:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010964:	f8c7 e014 	str.w	lr, [r7, #20]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8010968:	65fa      	str	r2, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801096a:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801096e:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010972:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010974:	12e4      	asrs	r4, r4, #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010976:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010978:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801097a:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801097c:	42b2      	cmp	r2, r6
 801097e:	d1a0      	bne.n	80108c2 <jpeg_idct_6x6+0x1a>
 8010980:	f1a3 0e04 	sub.w	lr, r3, #4
 8010984:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010988:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801098a:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801098e:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8010992:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8010994:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010996:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 801099a:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 801099c:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80109a0:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80109a4:	fb00 f402 	mul.w	r4, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80109a8:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80109ac:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80109b0:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = tmp0 + tmp10;
 80109b4:	eb04 3243 	add.w	r2, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 80109b8:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 80109bc:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80109c0:	f851 4c10 	ldr.w	r4, [r1, #-16]
 80109c4:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80109c8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp1 + tmp0;
 80109cc:	eb02 0604 	add.w	r6, r2, r4
    tmp12 = tmp1 - tmp0;
 80109d0:	eba2 0204 	sub.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 80109d4:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80109d8:	eb04 0508 	add.w	r5, r4, r8
 80109dc:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80109e0:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 80109e4:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80109e8:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80109ec:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80109f0:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80109f2:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80109f6:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80109fa:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80109fe:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010a02:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8010a06:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8010a0a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010a0e:	f810 8008 	ldrb.w	r8, [r0, r8]
 8010a12:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010a14:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010a18:	9800      	ldr	r0, [sp, #0]
 8010a1a:	5d86      	ldrb	r6, [r0, r6]
 8010a1c:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010a1e:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010a22:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 8010a26:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8010a2a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010a2e:	5d86      	ldrb	r6, [r0, r6]
 8010a30:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010a32:	5cc3      	ldrb	r3, [r0, r3]
 8010a34:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010a36:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010a3a:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8010a3e:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8010a42:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010a46:	5cc3      	ldrb	r3, [r0, r3]
 8010a48:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010a4a:	5c83      	ldrb	r3, [r0, r2]
 8010a4c:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 8010a4e:	d19c      	bne.n	801098a <jpeg_idct_6x6+0xe2>
  }
}
 8010a50:	b027      	add	sp, #156	; 0x9c
 8010a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010a58 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a5c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010a60:	b09d      	sub	sp, #116	; 0x74
 8010a62:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010a64:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a66:	3080      	adds	r0, #128	; 0x80
 8010a68:	3208      	adds	r2, #8
 8010a6a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010a6c:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010a6e:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010a72:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a76:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010a78:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a7a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010a7e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a80:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a84:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a88:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a8a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8010a8c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a90:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8010a92:	0352      	lsls	r2, r2, #13
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010a94:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010a96:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a9a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010aa2:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010aa6:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010aaa:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010aae:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010ab0:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010ab4:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010ab6:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010aba:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010abe:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010ac2:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 8010ac6:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 8010ac8:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8010acc:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8010ad0:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010ad4:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010ad8:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010ada:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010ade:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010ae2:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010ae4:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010ae8:	483a      	ldr	r0, [pc, #232]	; (8010bd4 <jpeg_idct_5x5+0x17c>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010aea:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010aec:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010af0:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010af4:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010af8:	42b2      	cmp	r2, r6
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010afa:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010afe:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010b02:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010b06:	f8c7 904c 	str.w	r9, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010b0a:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010b0e:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010b12:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010b16:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010b1a:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010b1e:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010b20:	d1ab      	bne.n	8010a7a <jpeg_idct_5x5+0x22>
 8010b22:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8010b26:	a903      	add	r1, sp, #12
 8010b28:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010b2a:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010b2e:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8010b32:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8010b34:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010b38:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8010b3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8010b3e:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 8010b40:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8010b44:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b48:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 8010b4c:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b50:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8010b54:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8010b58:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010b5c:	189c      	adds	r4, r3, r2
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010b5e:	1a9b      	subs	r3, r3, r2
 8010b60:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010b64:	fb0a f404 	mul.w	r4, sl, r4
    z3 = tmp12 + z2;
 8010b68:	eb03 324c 	add.w	r2, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 8010b6c:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 8010b6e:	18a5      	adds	r5, r4, r2
    tmp11 = z3 - z1;
 8010b70:	1b12      	subs	r2, r2, r4
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010b72:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8010b76:	ebc3 334c 	rsb	r3, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010b7a:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010b7c:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 8010b80:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010b84:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010b88:	4812      	ldr	r0, [pc, #72]	; (8010bd4 <jpeg_idct_5x5+0x17c>)
 8010b8a:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b8e:	eb05 0b06 	add.w	fp, r5, r6
 8010b92:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b94:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8010b96:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8010b9a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b9e:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8010ba2:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010ba4:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010ba8:	9800      	ldr	r0, [sp, #0]
 8010baa:	5d45      	ldrb	r5, [r0, r5]
 8010bac:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010bae:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010bb0:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8010bb2:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8010bb6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010bba:	5d45      	ldrb	r5, [r0, r5]
 8010bbc:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010bbe:	5c82      	ldrb	r2, [r0, r2]
 8010bc0:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8010bc2:	5cc3      	ldrb	r3, [r0, r3]
 8010bc4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8010bc6:	9b01      	ldr	r3, [sp, #4]
 8010bc8:	4573      	cmp	r3, lr
 8010bca:	d1b3      	bne.n	8010b34 <jpeg_idct_5x5+0xdc>
  }
}
 8010bcc:	b01d      	add	sp, #116	; 0x74
 8010bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd2:	bf00      	nop
 8010bd4:	ffffba5c 	.word	0xffffba5c

08010bd8 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010bdc:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
{
 8010be0:	b093      	sub	sp, #76	; 0x4c
 8010be2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010be4:	1e97      	subs	r7, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010be6:	3680      	adds	r6, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010be8:	3206      	adds	r2, #6
 8010bea:	3d04      	subs	r5, #4
  wsptr = workspace;
 8010bec:	a802      	add	r0, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010bee:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010bf2:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010bf6:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010d00 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bfa:	f937 4f02 	ldrsh.w	r4, [r7, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010bfe:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c00:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c04:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010c08:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c0a:	fb01 f404 	mul.w	r4, r1, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c0e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c10:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c14:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010c18:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8010c1c:	eb04 0901 	add.w	r9, r4, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8010c20:	eba4 0401 	sub.w	r4, r4, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c24:	6a29      	ldr	r1, [r5, #32]
 8010c26:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010c2a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8010c2c:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010c30:	eb0a 010b 	add.w	r1, sl, fp
 8010c34:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010c38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010c3c:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010c40:	fb0c 110b 	mla	r1, ip, fp, r1
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010c44:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010c48:	ea4f 21e1 	mov.w	r1, r1, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010c4c:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010c50:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010c54:	eb01 0984 	add.w	r9, r1, r4, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010c58:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010c5c:	ebc1 0184 	rsb	r1, r1, r4, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010c60:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010c64:	f8c0 900c 	str.w	r9, [r0, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010c68:	61c1      	str	r1, [r0, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010c6a:	d1c6      	bne.n	8010bfa <jpeg_idct_4x4+0x22>
 8010c6c:	1f1d      	subs	r5, r3, #4
 8010c6e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8010c72:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010c74:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010c78:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010c7c:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010d00 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8010c80:	f855 3f04 	ldr.w	r3, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8010c84:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8010c86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c88:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 8010c8c:	45ac      	cmp	ip, r5
    outptr = output_buf[ctr] + output_col;
 8010c8e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8010c92:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8010c96:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c9a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8010c9e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010ca2:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8010ca6:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010caa:	eb01 020b 	add.w	r2, r1, fp
 8010cae:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010cb2:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010cb6:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cba:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010cbe:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010cc2:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8010cc4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 8010cca:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cce:	f816 b00b 	ldrb.w	fp, [r6, fp]
 8010cd2:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010cd6:	5c73      	ldrb	r3, [r6, r1]
 8010cd8:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010cda:	9b01      	ldr	r3, [sp, #4]
 8010cdc:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8010ce0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010ce4:	5cf3      	ldrb	r3, [r6, r3]
 8010ce6:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010ce8:	9b01      	ldr	r3, [sp, #4]
 8010cea:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 8010cee:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010cf2:	5cb3      	ldrb	r3, [r6, r2]
 8010cf4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8010cf6:	d1c3      	bne.n	8010c80 <jpeg_idct_4x4+0xa8>
  }
}
 8010cf8:	b013      	add	sp, #76	; 0x4c
 8010cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfe:	bf00      	nop
 8010d00:	ffffc4df 	.word	0xffffc4df

08010d04 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d08:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d0a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8010d0e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010d10:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010d14:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d16:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010d1a:	f1a1 0c04 	sub.w	ip, r1, #4
 8010d1e:	3204      	adds	r2, #4
 8010d20:	4620      	mov	r0, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010d22:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010d26:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d2a:	f938 1f02 	ldrsh.w	r1, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010d2e:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d30:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010d34:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010d38:	4542      	cmp	r2, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d3a:	fb05 f101 	mul.w	r1, r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d3e:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
 8010d42:	f9b8 5020 	ldrsh.w	r5, [r8, #32]
    tmp0 <<= CONST_BITS;
 8010d46:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010d4a:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d4e:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010d52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010d56:	fb07 f70b 	mul.w	r7, r7, fp
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010d5a:	fb0a f505 	mul.w	r5, sl, r5
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010d5e:	fb09 f707 	mul.w	r7, r9, r7
    tmp10 = tmp0 + tmp12;
 8010d62:	eb01 0605 	add.w	r6, r1, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8010d66:	eba1 0145 	sub.w	r1, r1, r5, lsl #1

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d6a:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d6e:	eba6 0607 	sub.w	r6, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010d72:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d76:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d7a:	ea4f 26e6 	mov.w	r6, r6, asr #11
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010d7e:	60a1      	str	r1, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010d80:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010d84:	6166      	str	r6, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010d86:	d1d0      	bne.n	8010d2a <jpeg_idct_3x3+0x26>
 8010d88:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010d8a:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 8010d8e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010d90:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8010d94:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8010d98:	300c      	adds	r0, #12
    outptr = output_buf[ctr] + output_col;
 8010d9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010d9c:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010da0:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010da2:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010da6:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010daa:	fb0c f101 	mul.w	r1, ip, r1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010dae:	f850 4c08 	ldr.w	r4, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010db2:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010db6:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010db8:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8010dbc:	eb01 3842 	add.w	r8, r1, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8010dc0:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010dc4:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010dc8:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8010dcc:	eba2 0201 	sub.w	r2, r2, r1
			    & RANGE_MASK];
 8010dd0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010dd4:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8010dd8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010ddc:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8010de0:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010de4:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8010de8:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8010dea:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8010dee:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8010df0:	d1d0      	bne.n	8010d94 <jpeg_idct_3x3+0x90>
  }
}
 8010df2:	b00b      	add	sp, #44	; 0x2c
 8010df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010df8 <jpeg_idct_2x2>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8010df8:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010dfc:	f9b2 1000 	ldrsh.w	r1, [r2]
{
 8010e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010e02:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010e06:	f8dc 0000 	ldr.w	r0, [ip]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e0a:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010e0e:	3680      	adds	r6, #128	; 0x80
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010e10:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e12:	f8dc 0020 	ldr.w	r0, [ip, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010e16:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e1a:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8010e1c:	3104      	adds	r1, #4
{
 8010e1e:	9f05      	ldr	r7, [sp, #20]
  tmp0 = tmp4 + tmp5;
 8010e20:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8010e22:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010e24:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010e28:	4365      	muls	r5, r4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010e2a:	f9b2 4012 	ldrsh.w	r4, [r2, #18]
 8010e2e:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8010e32:	4354      	muls	r4, r2

  tmp1 = tmp4 + tmp5;
 8010e34:	eb05 0c04 	add.w	ip, r5, r4
  tmp3 = tmp4 - tmp5;
 8010e38:	1b2a      	subs	r2, r5, r4

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8010e3a:	681d      	ldr	r5, [r3, #0]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010e3c:	eb00 040c 	add.w	r4, r0, ip
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010e40:	eba0 000c 	sub.w	r0, r0, ip
  outptr = output_buf[0] + output_col;
 8010e44:	eb05 0e07 	add.w	lr, r5, r7
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010e48:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010e4c:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010e50:	5d34      	ldrb	r4, [r6, r4]
 8010e52:	55ec      	strb	r4, [r5, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010e54:	5c30      	ldrb	r0, [r6, r0]
 8010e56:	f88e 0001 	strb.w	r0, [lr, #1]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 8010e5a:	6858      	ldr	r0, [r3, #4]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010e5c:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010e5e:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010e60:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr = output_buf[1] + output_col;
 8010e64:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010e66:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010e6a:	5cf3      	ldrb	r3, [r6, r3]
 8010e6c:	55c3      	strb	r3, [r0, r7]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010e6e:	5c73      	ldrb	r3, [r6, r1]
 8010e70:	7063      	strb	r3, [r4, #1]
}
 8010e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e74 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8010e74:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010e7a:	6809      	ldr	r1, [r1, #0]
 8010e7c:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010e7e:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8010e82:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010e84:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8010e88:	440a      	add	r2, r1
 8010e8a:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	9b00      	ldr	r3, [sp, #0]
 8010e92:	54d1      	strb	r1, [r2, r3]
}
 8010e94:	4770      	bx	lr
	...

08010e98 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	b0d1      	sub	sp, #324	; 0x144
 8010e9e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010ea0:	f1a2 0e02 	sub.w	lr, r2, #2
 8010ea4:	9306      	str	r3, [sp, #24]
 8010ea6:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010ea8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010eac:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010eae:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010eb2:	f102 030e 	add.w	r3, r2, #14
 8010eb6:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010eb8:	f93e 5f02 	ldrsh.w	r5, [lr, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010ebc:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ebe:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ec2:	f9be 1020 	ldrsh.w	r1, [lr, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ec6:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010eca:	f9be 2040 	ldrsh.w	r2, [lr, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ece:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010ed0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ed4:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp0 <<= CONST_BITS;
 8010ed8:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010eda:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010edc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010ee0:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010ee4:	f9be c050 	ldrsh.w	ip, [lr, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ee8:	4373      	muls	r3, r6
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010eea:	f241 66a1 	movw	r6, #5793	; 0x16a1
 8010eee:	4373      	muls	r3, r6
    tmp1 = tmp0 + tmp3;
 8010ef0:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ef2:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8010ef6:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010ef8:	1a8b      	subs	r3, r1, r2
 8010efa:	4373      	muls	r3, r6
 8010efc:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010efe:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8010f02:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010f04:	188b      	adds	r3, r1, r2
 8010f06:	f642 2587 	movw	r5, #10887	; 0x2a87
 8010f0a:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010f0c:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010f10:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010f12:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010f16:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010f18:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010f1a:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 8010f1c:	1a7f      	subs	r7, r7, r1
    tmp10 = tmp1 + tmp0 - tmp3;
 8010f1e:	1aad      	subs	r5, r5, r2
    tmp13 = tmp1 - tmp2 + tmp3;
 8010f20:	18ba      	adds	r2, r7, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8010f22:	440b      	add	r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010f24:	f9be 1010 	ldrsh.w	r1, [lr, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8010f28:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010f2a:	6a22      	ldr	r2, [r4, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f2c:	6e27      	ldr	r7, [r4, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010f2e:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f30:	f9be 2030 	ldrsh.w	r2, [lr, #48]	; 0x30
    tmp12 = tmp1 - tmp0 + tmp2;
 8010f34:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f36:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010f38:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010f3c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010f40:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010f44:	f9be 7070 	ldrsh.w	r7, [lr, #112]	; 0x70
    tmp10 = tmp1 + tmp0 - tmp3;
 8010f48:	9503      	str	r5, [sp, #12]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f4a:	f642 4591 	movw	r5, #11409	; 0x2c91
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010f4e:	435f      	muls	r7, r3
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010f50:	4b81      	ldr	r3, [pc, #516]	; (8011158 <jpeg_idct_9x9+0x2c0>)
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010f52:	eb01 0b0c 	add.w	fp, r1, ip
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010f56:	435a      	muls	r2, r3
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010f58:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010f5c:	eb01 0907 	add.w	r9, r1, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f60:	eba1 010c 	sub.w	r1, r1, ip
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010f64:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010f68:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f6c:	1bc9      	subs	r1, r1, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010f6e:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f72:	ebac 0307 	sub.w	r3, ip, r7
 8010f76:	436b      	muls	r3, r5
    tmp0 = tmp2 + tmp3 - z2;
 8010f78:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f7c:	461d      	mov	r5, r3
    tmp2 += z2 - tmp1;
 8010f7e:	1ad3      	subs	r3, r2, r3
    tmp0 = tmp2 + tmp3 - z2;
 8010f80:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8010f84:	449b      	add	fp, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f86:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp3 += z2 + tmp1;
 8010f8a:	442a      	add	r2, r5
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f8c:	4359      	muls	r1, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010f8e:	9b03      	ldr	r3, [sp, #12]
    tmp3 += z2 + tmp1;
 8010f90:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010f92:	eba3 0508 	sub.w	r5, r3, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010f96:	eb03 0708 	add.w	r7, r3, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010f9a:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010f9c:	12ed      	asrs	r5, r5, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010f9e:	12ff      	asrs	r7, r7, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010fa0:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010fa4:	1875      	adds	r5, r6, r1
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010fa6:	1a76      	subs	r6, r6, r1
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010fa8:	eb03 010b 	add.w	r1, r3, fp
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010fac:	eba3 030b 	sub.w	r3, r3, fp
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010fb0:	12ed      	asrs	r5, r5, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010fb2:	12f6      	asrs	r6, r6, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010fb4:	f840 7c04 	str.w	r7, [r0, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010fb8:	12db      	asrs	r3, r3, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010fba:	61c5      	str	r5, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010fbc:	12c9      	asrs	r1, r1, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010fbe:	f8c0 60dc 	str.w	r6, [r0, #220]	; 0xdc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010fc2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8010fc6:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010fc8:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8010fca:	4413      	add	r3, r2
 8010fcc:	12db      	asrs	r3, r3, #11
 8010fce:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010fd0:	9b05      	ldr	r3, [sp, #20]
 8010fd2:	1a9b      	subs	r3, r3, r2
 8010fd4:	12db      	asrs	r3, r3, #11
 8010fd6:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8010fda:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8010fde:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010fe2:	12db      	asrs	r3, r3, #11
 8010fe4:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010fe6:	9b07      	ldr	r3, [sp, #28]
 8010fe8:	4573      	cmp	r3, lr
 8010fea:	f47f af65 	bne.w	8010eb8 <jpeg_idct_9x9+0x20>
 8010fee:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010ff0:	aa08      	add	r2, sp, #32
 8010ff2:	f1a3 0904 	sub.w	r9, r3, #4
 8010ff6:	3320      	adds	r3, #32
 8010ff8:	9306      	str	r3, [sp, #24]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010ffa:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010ffe:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8011002:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011004:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8011006:	9305      	str	r3, [sp, #20]
 8011008:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801100a:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z1 = (INT32) wsptr[2];
 801100e:	f852 0c18 	ldr.w	r0, [r2, #-24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011012:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011016:	f852 3c08 	ldr.w	r3, [r2, #-8]
    z2 = (INT32) wsptr[4];
 801101a:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 801101e:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8011022:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 8011026:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp2 = tmp0 - tmp3 - tmp3;
 801102a:	1b9b      	subs	r3, r3, r6
 801102c:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 801102e:	1a43      	subs	r3, r0, r1
 8011030:	fb0c f303 	mul.w	r3, ip, r3
 8011034:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8011036:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 801103a:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 801103c:	1843      	adds	r3, r0, r1
 801103e:	f642 2587 	movw	r5, #10887	; 0x2a87
 8011042:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011044:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8011048:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 801104a:	f240 75dc 	movw	r5, #2012	; 0x7dc
 801104e:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8011050:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8011052:	1afb      	subs	r3, r7, r3
    tmp13 = tmp1 - tmp2 + tmp3;
 8011054:	1a3f      	subs	r7, r7, r0
    tmp10 = tmp1 + tmp0 - tmp3;
 8011056:	1a6d      	subs	r5, r5, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8011058:	1879      	adds	r1, r7, r1
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801105a:	4f3f      	ldr	r7, [pc, #252]	; (8011158 <jpeg_idct_9x9+0x2c0>)
    tmp12 = tmp1 - tmp0 + tmp2;
 801105c:	4403      	add	r3, r0
    z1 = (INT32) wsptr[1];
 801105e:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp13 = tmp1 - tmp2 + tmp3;
 8011062:	9104      	str	r1, [sp, #16]
    z2 = (INT32) wsptr[3];
 8011064:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp12 = tmp1 - tmp0 + tmp2;
 8011068:	9303      	str	r3, [sp, #12]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801106a:	f641 5317 	movw	r3, #7447	; 0x1d17
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801106e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011070:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8011074:	eb00 0b07 	add.w	fp, r0, r7
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011078:	f852 7c04 	ldr.w	r7, [r2, #-4]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801107c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011080:	eb00 0e07 	add.w	lr, r0, r7
 8011084:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011088:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801108c:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011090:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8011094:	eba7 0803 	sub.w	r8, r7, r3
 8011098:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 801109c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80110a0:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80110a4:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 80110a8:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 80110ac:	eba1 0708 	sub.w	r7, r1, r8
    tmp3 += z2 + tmp1;
 80110b0:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80110b2:	1ac0      	subs	r0, r0, r3
 80110b4:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp3 += z2 + tmp1;
 80110b8:	eb01 080e 	add.w	r8, r1, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80110bc:	eb05 0e0c 	add.w	lr, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80110c0:	1ac0      	subs	r0, r0, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80110c2:	eba5 050c 	sub.w	r5, r5, ip
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80110c6:	f242 7331 	movw	r3, #10033	; 0x2731
			    & RANGE_MASK];
 80110ca:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80110ce:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 80110d0:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80110d4:	f81a e00e 	ldrb.w	lr, [sl, lr]
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80110d8:	4358      	muls	r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80110da:	9b05      	ldr	r3, [sp, #20]
    tmp2 += z2 - tmp1;
 80110dc:	445f      	add	r7, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80110de:	f803 e001 	strb.w	lr, [r3, r1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80110e2:	f81a 5005 	ldrb.w	r5, [sl, r5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80110e6:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80110e8:	7225      	strb	r5, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80110ea:	1835      	adds	r5, r6, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80110ec:	1a36      	subs	r6, r6, r0
			    & RANGE_MASK];
 80110ee:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80110f2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80110f6:	f81a 5005 	ldrb.w	r5, [sl, r5]
 80110fa:	7065      	strb	r5, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80110fc:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8011100:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8011102:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011104:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 8011106:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 801110a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801110e:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8011112:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8011114:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011118:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 801111a:	9b04      	ldr	r3, [sp, #16]
 801111c:	4443      	add	r3, r8
			    & RANGE_MASK];
 801111e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8011122:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011126:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8011128:	9b04      	ldr	r3, [sp, #16]
 801112a:	eba3 0308 	sub.w	r3, r3, r8
			    & RANGE_MASK];
 801112e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8011132:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011136:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8011138:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801113c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
			    & RANGE_MASK];
 8011140:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8011144:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011148:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 801114a:	9b06      	ldr	r3, [sp, #24]
 801114c:	454b      	cmp	r3, r9
 801114e:	f47f af54 	bne.w	8010ffa <jpeg_idct_9x9+0x162>
  }
}
 8011152:	b051      	add	sp, #324	; 0x144
 8011154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011158:	ffffd8cf 	.word	0xffffd8cf

0801115c <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011160:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8011164:	b0d9      	sub	sp, #356	; 0x164
 8011166:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8011168:	f1a2 0b02 	sub.w	fp, r2, #2
 801116c:	9304      	str	r3, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801116e:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8011172:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011174:	a908      	add	r1, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011176:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011178:	f102 030e 	add.w	r3, r2, #14
 801117c:	9306      	str	r3, [sp, #24]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801117e:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011182:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011186:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801118a:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801118c:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011190:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011192:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011196:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801119a:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801119c:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 80111a0:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80111a2:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80111a6:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80111aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80111ae:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 80111b0:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80111b2:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 80111b4:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80111b6:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80111ba:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80111be:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80111c2:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80111c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111c6:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80111c8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80111cc:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80111ce:	19f3      	adds	r3, r6, r7
 80111d0:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80111d2:	f241 0071 	movw	r0, #4209	; 0x1071
 80111d6:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80111da:	48a0      	ldr	r0, [pc, #640]	; (801145c <jpeg_idct_10x10+0x300>)
 80111dc:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 80111e0:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 80111e4:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80111e6:	6e25      	ldr	r5, [r4, #96]	; 0x60
    tmp21 = tmp11 + tmp13;
 80111e8:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80111ea:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80111ec:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 80111f0:	9303      	str	r3, [sp, #12]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80111f2:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80111f4:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80111f8:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80111fa:	f9bb 3030 	ldrsh.w	r3, [fp, #48]	; 0x30
    tmp24 = tmp10 - tmp12;
 80111fe:	9002      	str	r0, [sp, #8]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8011200:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011204:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011206:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 801120a:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801120e:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8011212:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8011214:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8011218:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801121a:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801121e:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8011222:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011226:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 801122a:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801122e:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011232:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011236:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801123a:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801123c:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801123e:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011242:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011244:	1b86      	subs	r6, r0, r6

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011246:	9805      	ldr	r0, [sp, #20]
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011248:	eba3 030e 	sub.w	r3, r3, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801124c:	f642 0e53 	movw	lr, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011250:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011252:	f241 2acf 	movw	sl, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011256:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801125a:	009b      	lsls	r3, r3, #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801125c:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011260:	f241 4a8c 	movw	sl, #5260	; 0x148c
 8011264:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011268:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801126c:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011270:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011274:	442a      	add	r2, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011276:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801127a:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801127e:	12ed      	asrs	r5, r5, #11
 8011280:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011284:	ea4f 25ec 	mov.w	r5, ip, asr #11
 8011288:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801128c:	eb07 050e 	add.w	r5, r7, lr
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011290:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011294:	12ed      	asrs	r5, r5, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011296:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011298:	61cd      	str	r5, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801129a:	eb03 25e0 	add.w	r5, r3, r0, asr #11
    wsptr[8*7] = (int) (tmp22 - tmp12);
 801129e:	ebc3 23e0 	rsb	r3, r3, r0, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80112a2:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*2] = (int) (tmp22 + tmp12);
 80112a6:	63cd      	str	r5, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 80112a8:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80112ac:	9b03      	ldr	r3, [sp, #12]
 80112ae:	4413      	add	r3, r2
 80112b0:	12db      	asrs	r3, r3, #11
 80112b2:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80112b4:	9b03      	ldr	r3, [sp, #12]
 80112b6:	1a9b      	subs	r3, r3, r2
 80112b8:	12db      	asrs	r3, r3, #11
 80112ba:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80112be:	9b02      	ldr	r3, [sp, #8]
 80112c0:	4433      	add	r3, r6
 80112c2:	12db      	asrs	r3, r3, #11
 80112c4:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80112c6:	9b02      	ldr	r3, [sp, #8]
 80112c8:	1b9b      	subs	r3, r3, r6
 80112ca:	12db      	asrs	r3, r3, #11
 80112cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80112d0:	9b06      	ldr	r3, [sp, #24]
 80112d2:	455b      	cmp	r3, fp
 80112d4:	f47f af53 	bne.w	801117e <jpeg_idct_10x10+0x22>
 80112d8:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 80112da:	a908      	add	r1, sp, #32
 80112dc:	f1a3 0b04 	sub.w	fp, r3, #4
 80112e0:	3324      	adds	r3, #36	; 0x24
 80112e2:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80112e4:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80112e8:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80112ec:	9a62      	ldr	r2, [sp, #392]	; 0x188
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80112ee:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 80112f0:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80112f4:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80112f6:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80112fa:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80112fc:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011300:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011304:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011308:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801130a:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 801130c:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8011310:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8011312:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8011316:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801131a:	006d      	lsls	r5, r5, #1
 801131c:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8011320:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8011324:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011326:	19eb      	adds	r3, r5, r7
 8011328:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801132a:	f241 0071 	movw	r0, #4209	; 0x1071
 801132e:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8011332:	484a      	ldr	r0, [pc, #296]	; (801145c <jpeg_idct_10x10+0x300>)
 8011334:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8011338:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 801133c:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 801133e:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 8011342:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8011344:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8011346:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8011348:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 801134c:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 801134e:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 8011352:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8011356:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 801135a:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801135c:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8011360:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8011364:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8011368:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 801136c:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011370:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8011374:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011378:	f240 7014 	movw	r0, #1812	; 0x714
 801137c:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011380:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011382:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011386:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801138a:	f642 0853 	movw	r8, #10323	; 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801138e:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011392:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011394:	f241 2acf 	movw	sl, #4815	; 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011398:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801139c:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80113a0:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80113a4:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80113a8:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80113aa:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80113ae:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80113b2:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80113b4:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80113b8:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80113bc:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113c0:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80113c2:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113c4:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80113c8:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113ca:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113ce:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80113d0:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80113d4:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113d8:	5d5d      	ldrb	r5, [r3, r5]
 80113da:	9b62      	ldr	r3, [sp, #392]	; 0x188
 80113dc:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113de:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80113e0:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113e2:	f813 500c 	ldrb.w	r5, [r3, ip]
 80113e6:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80113e8:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80113ec:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 80113f0:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80113f4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80113f8:	5d5d      	ldrb	r5, [r3, r5]
 80113fa:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80113fc:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80113fe:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011400:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011402:	181d      	adds	r5, r3, r0
 8011404:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8011406:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801140a:	5d5d      	ldrb	r5, [r3, r5]
 801140c:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801140e:	9b02      	ldr	r3, [sp, #8]
 8011410:	1a1b      	subs	r3, r3, r0
 8011412:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8011414:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011418:	5cc3      	ldrb	r3, [r0, r3]
 801141a:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801141c:	9b04      	ldr	r3, [sp, #16]
 801141e:	4413      	add	r3, r2
			    & RANGE_MASK];
 8011420:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011424:	5cc3      	ldrb	r3, [r0, r3]
 8011426:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011428:	9b04      	ldr	r3, [sp, #16]
 801142a:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 801142c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011430:	5cc3      	ldrb	r3, [r0, r3]
 8011432:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011434:	9b03      	ldr	r3, [sp, #12]
 8011436:	4433      	add	r3, r6
			    & RANGE_MASK];
 8011438:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801143c:	5cc3      	ldrb	r3, [r0, r3]
 801143e:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011440:	9b03      	ldr	r3, [sp, #12]
 8011442:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 8011444:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011448:	5cc3      	ldrb	r3, [r0, r3]
 801144a:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 801144c:	9b07      	ldr	r3, [sp, #28]
 801144e:	455b      	cmp	r3, fp
 8011450:	f47f af48 	bne.w	80112e4 <jpeg_idct_10x10+0x188>
  }
}
 8011454:	b059      	add	sp, #356	; 0x164
 8011456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801145a:	bf00      	nop
 801145c:	ffffba5c 	.word	0xffffba5c

08011460 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011464:	b0e5      	sub	sp, #404	; 0x194
 8011466:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011468:	f1a2 0b02 	sub.w	fp, r2, #2
 801146c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801146e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011472:	3380      	adds	r3, #128	; 0x80
 8011474:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011476:	1f0b      	subs	r3, r1, #4
 8011478:	9302      	str	r3, [sp, #8]
 801147a:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 801147e:	aa0c      	add	r2, sp, #48	; 0x30
 8011480:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011482:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011484:	f642 3e6c 	movw	lr, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011488:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801148c:	f244 2958 	movw	r9, #16984	; 0x4258
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011490:	f851 0f04 	ldr.w	r0, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011494:	3204      	adds	r2, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011496:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801149a:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801149c:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801149e:	f9bb 0020 	ldrsh.w	r0, [fp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114a2:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
    tmp10 <<= CONST_BITS;
 80114a6:	035b      	lsls	r3, r3, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80114a8:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114aa:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114ae:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80114b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114b4:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80114b6:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
 80114ba:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80114bc:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80114c0:	1a27      	subs	r7, r4, r0
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80114c2:	eba4 0c06 	sub.w	ip, r4, r6
 80114c6:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80114ca:	f640 55c9 	movw	r5, #3529	; 0xdc9
 80114ce:	436f      	muls	r7, r5
    z4 = z1 + z3;
 80114d0:	1985      	adds	r5, r0, r6
    z4 -= z2;
 80114d2:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80114d4:	fb0e 3301 	mla	r3, lr, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80114d8:	eb0c 0e07 	add.w	lr, ip, r7
    z4 -= z2;
 80114dc:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 80114de:	449e      	add	lr, r3
 80114e0:	49d0      	ldr	r1, [pc, #832]	; (8011824 <jpeg_idct_11x11+0x3c4>)
 80114e2:	fb01 e104 	mla	r1, r1, r4, lr
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80114e6:	f244 3eb5 	movw	lr, #17333	; 0x43b5
 80114ea:	fb0e 3e06 	mla	lr, lr, r6, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80114ee:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80114f0:	eb0e 010c 	add.w	r1, lr, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80114f4:	f44f 6e4c 	mov.w	lr, #3264	; 0xcc0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80114f8:	9104      	str	r1, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80114fa:	49cb      	ldr	r1, [pc, #812]	; (8011828 <jpeg_idct_11x11+0x3c8>)
 80114fc:	fb01 3c00 	mla	ip, r1, r0, r3
 8011500:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011504:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011508:	f9bb c050 	ldrsh.w	ip, [fp, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801150c:	9105      	str	r1, [sp, #20]
    tmp24 += tmp25;
 801150e:	49c7      	ldr	r1, [pc, #796]	; (801182c <jpeg_idct_11x11+0x3cc>)
 8011510:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011514:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 8011518:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801151c:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011520:	9106      	str	r1, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8011522:	49c3      	ldr	r1, [pc, #780]	; (8011830 <jpeg_idct_11x11+0x3d0>)
 8011524:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011526:	fb06 0004 	mla	r0, r6, r4, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801152a:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801152e:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011532:	1941      	adds	r1, r0, r5
 8011534:	9107      	str	r1, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011536:	9902      	ldr	r1, [sp, #8]
 8011538:	6a08      	ldr	r0, [r1, #32]
 801153a:	4344      	muls	r4, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801153c:	6e08      	ldr	r0, [r1, #96]	; 0x60
 801153e:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011540:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8011544:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011548:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    tmp10 = tmp11 + tmp12 + tmp13 -
 801154c:	49b9      	ldr	r1, [pc, #740]	; (8011834 <jpeg_idct_11x11+0x3d4>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801154e:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8011550:	19e0      	adds	r0, r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011552:	eb04 0a0c 	add.w	sl, r4, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011556:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801155a:	eb04 0806 	add.w	r8, r4, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801155e:	4435      	add	r5, r6
 8011560:	fb0e f505 	mul.w	r5, lr, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011564:	f641 4e6a 	movw	lr, #7274	; 0x1c6a
 8011568:	fb0e f000 	mul.w	r0, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801156c:	f241 5e74 	movw	lr, #5492	; 0x1574
 8011570:	fb0e fa0a 	mul.w	sl, lr, sl
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011574:	f640 3eb8 	movw	lr, #3000	; 0xbb8
 8011578:	fb0e 5808 	mla	r8, lr, r8, r5
    tmp10 = tmp11 + tmp12 + tmp13 -
 801157c:	eb00 0e0a 	add.w	lr, r0, sl
 8011580:	44c6      	add	lr, r8
 8011582:	fb01 ee04 	mla	lr, r1, r4, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011586:	eb07 040c 	add.w	r4, r7, ip
 801158a:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
 801158e:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011592:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011594:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011598:	fb01 440c 	mla	r4, r1, ip, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801159c:	49a6      	ldr	r1, [pc, #664]	; (8011838 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801159e:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80115a0:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80115a2:	4454      	add	r4, sl
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80115a4:	f244 3a47 	movw	sl, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80115a8:	4348      	muls	r0, r1
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80115aa:	9904      	ldr	r1, [sp, #16]
    tmp11 += z1;
 80115ac:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80115ae:	fb0a 0006 	mla	r0, sl, r6, r0
 80115b2:	4440      	add	r0, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80115b4:	f242 080b 	movw	r8, #8203	; 0x200b
 80115b8:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80115bc:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8011840 <jpeg_idct_11x11+0x3e0>
 80115c0:	fb08 cc07 	mla	ip, r8, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80115c4:	4f9d      	ldr	r7, [pc, #628]	; (801183c <jpeg_idct_11x11+0x3dc>)
 80115c6:	fb07 cc06 	mla	ip, r7, r6, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80115ca:	44ac      	add	ip, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80115cc:	eb01 050e 	add.w	r5, r1, lr
 80115d0:	12ed      	asrs	r5, r5, #11
 80115d2:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80115d6:	eba1 050e 	sub.w	r5, r1, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80115da:	9903      	ldr	r1, [sp, #12]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80115dc:	12ed      	asrs	r5, r5, #11
 80115de:	f8c2 513c 	str.w	r5, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80115e2:	eb01 0509 	add.w	r5, r1, r9
 80115e6:	12ed      	asrs	r5, r5, #11
 80115e8:	61d5      	str	r5, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80115ea:	eba1 0509 	sub.w	r5, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80115ee:	9906      	ldr	r1, [sp, #24]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80115f0:	12ed      	asrs	r5, r5, #11
 80115f2:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80115f6:	190d      	adds	r5, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80115f8:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80115fa:	12ed      	asrs	r5, r5, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80115fc:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80115fe:	63d5      	str	r5, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011600:	9905      	ldr	r1, [sp, #20]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011602:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011606:	180c      	adds	r4, r1, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011608:	1a08      	subs	r0, r1, r0
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801160a:	9907      	ldr	r1, [sp, #28]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801160c:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801160e:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011610:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011614:	eb01 000c 	add.w	r0, r1, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011618:	65d4      	str	r4, [r2, #92]	; 0x5c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801161a:	12c0      	asrs	r0, r0, #11
 801161c:	67d0      	str	r0, [r2, #124]	; 0x7c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801161e:	eba1 000c 	sub.w	r0, r1, ip
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011622:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011624:	12c0      	asrs	r0, r0, #11
 8011626:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 801162a:	f645 00ad 	movw	r0, #22701	; 0x58ad
 801162e:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8011632:	12db      	asrs	r3, r3, #11
 8011634:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801163a:	455b      	cmp	r3, fp
 801163c:	f47f af21 	bne.w	8011482 <jpeg_idct_11x11+0x22>
 8011640:	9b08      	ldr	r3, [sp, #32]
 8011642:	3b04      	subs	r3, #4
 8011644:	9303      	str	r3, [sp, #12]
 8011646:	9b08      	ldr	r3, [sp, #32]
 8011648:	3328      	adds	r3, #40	; 0x28
 801164a:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 801164c:	ab0c      	add	r3, sp, #48	; 0x30
 801164e:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011650:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011652:	f245 107e 	movw	r0, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8011656:	9a02      	ldr	r2, [sp, #8]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011658:	f244 2a58 	movw	sl, #16984	; 0x4258
    outptr = output_buf[ctr] + output_col;
 801165c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z2 = (INT32) wsptr[4];
 8011660:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8011662:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8011664:	9109      	str	r1, [sp, #36]	; 0x24
 8011666:	9303      	str	r3, [sp, #12]
 8011668:	460b      	mov	r3, r1
 801166a:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801166c:	eba6 0e07 	sub.w	lr, r6, r7
    z1 = (INT32) wsptr[2];
 8011670:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 8011672:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011674:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8011676:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011678:	fb00 fe0e 	mul.w	lr, r0, lr
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801167c:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011680:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011682:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011686:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011688:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801168a:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 801168e:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8011690:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 8011692:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011694:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8011698:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 801169c:	eb0e 000c 	add.w	r0, lr, ip
 80116a0:	4a60      	ldr	r2, [pc, #384]	; (8011824 <jpeg_idct_11x11+0x3c4>)
 80116a2:	4418      	add	r0, r3
 80116a4:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80116a8:	f244 30b5 	movw	r0, #17333	; 0x43b5
 80116ac:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80116b0:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80116b2:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80116b6:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80116b8:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80116ba:	4a5b      	ldr	r2, [pc, #364]	; (8011828 <jpeg_idct_11x11+0x3c8>)
 80116bc:	fb02 3e04 	mla	lr, r2, r4, r3
 80116c0:	eb0e 020c 	add.w	r2, lr, ip
 80116c4:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 80116c6:	4a59      	ldr	r2, [pc, #356]	; (801182c <jpeg_idct_11x11+0x3cc>)
 80116c8:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80116cc:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 80116d0:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80116d4:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80116d8:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80116da:	4a55      	ldr	r2, [pc, #340]	; (8011830 <jpeg_idct_11x11+0x3d0>)
 80116dc:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80116de:	fb07 4406 	mla	r4, r7, r6, r4
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80116e2:	f44f 674c 	mov.w	r7, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80116e6:	1962      	adds	r2, r4, r5
 80116e8:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 80116ea:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 80116ec:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 80116f0:	6855      	ldr	r5, [r2, #4]
    z3 = (INT32) wsptr[5];
 80116f2:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 80116f6:	eb05 040e 	add.w	r4, r5, lr
    z4 = (INT32) wsptr[7];
 80116fa:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80116fe:	eb05 0b08 	add.w	fp, r5, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011702:	4a4c      	ldr	r2, [pc, #304]	; (8011834 <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011704:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011708:	eb05 090c 	add.w	r9, r5, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801170c:	4466      	add	r6, ip
 801170e:	437e      	muls	r6, r7
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011710:	f641 476a 	movw	r7, #7274	; 0x1c6a
 8011714:	437c      	muls	r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011716:	f241 5774 	movw	r7, #5492	; 0x1574
 801171a:	fb07 fb0b 	mul.w	fp, r7, fp
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801171e:	f640 37b8 	movw	r7, #3000	; 0xbb8
 8011722:	fb07 6909 	mla	r9, r7, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011726:	eb04 070b 	add.w	r7, r4, fp
 801172a:	444f      	add	r7, r9
 801172c:	fb02 7705 	mla	r7, r2, r5, r7
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011730:	eb0e 0508 	add.w	r5, lr, r8
 8011734:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8011738:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801173c:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801173e:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011742:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011746:	4a3c      	ldr	r2, [pc, #240]	; (8011838 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011748:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801174a:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801174e:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011750:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011754:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011756:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8011758:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801175a:	fb0b 440c 	mla	r4, fp, ip, r4
 801175e:	444c      	add	r4, r9
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011760:	f242 090b 	movw	r9, #8203	; 0x200b
 8011764:	fb09 f808 	mul.w	r8, r9, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011768:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8011840 <jpeg_idct_11x11+0x3e0>
 801176c:	fb09 880e 	mla	r8, r9, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011770:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 801183c <jpeg_idct_11x11+0x3dc>
 8011774:	fb0e 880c 	mla	r8, lr, ip, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011778:	44b0      	add	r8, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801177a:	19d6      	adds	r6, r2, r7
 801177c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801177e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011782:	5d96      	ldrb	r6, [r2, r6]
 8011784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011786:	5416      	strb	r6, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011788:	9a05      	ldr	r2, [sp, #20]
 801178a:	1bd0      	subs	r0, r2, r7
 801178c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801178e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011792:	5c10      	ldrb	r0, [r2, r0]
 8011794:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	eb02 000a 	add.w	r0, r2, sl
 801179c:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801179e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80117a2:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80117a4:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80117a6:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80117a8:	eba2 000a 	sub.w	r0, r2, sl
 80117ac:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117ae:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80117b2:	5c10      	ldrb	r0, [r2, r0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80117b4:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80117b6:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80117b8:	1950      	adds	r0, r2, r5
 80117ba:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117bc:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80117c0:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80117c2:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80117c4:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80117c6:	1b50      	subs	r0, r2, r5
 80117c8:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117ca:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80117ce:	5c10      	ldrb	r0, [r2, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80117d0:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80117d2:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80117d4:	1910      	adds	r0, r2, r4
 80117d6:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117d8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80117dc:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80117de:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80117e0:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80117e2:	1b10      	subs	r0, r2, r4
 80117e4:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117e6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80117ea:	5c10      	ldrb	r0, [r2, r0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80117ec:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80117ee:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80117f0:	eb02 0008 	add.w	r0, r2, r8
 80117f4:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117f6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80117fa:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80117fc:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80117fe:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011800:	eba2 0008 	sub.w	r0, r2, r8
 8011804:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011806:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801180a:	5c10      	ldrb	r0, [r2, r0]
 801180c:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 801180e:	f645 00ad 	movw	r0, #22701	; 0x58ad
 8011812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011814:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8011818:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801181a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 801181e:	5cd3      	ldrb	r3, [r2, r3]
 8011820:	e010      	b.n	8011844 <jpeg_idct_11x11+0x3e4>
 8011822:	bf00      	nop
 8011824:	ffffc5b4 	.word	0xffffc5b4
 8011828:	ffffcf91 	.word	0xffffcf91
 801182c:	ffffdb05 	.word	0xffffdb05
 8011830:	ffffd37d 	.word	0xffffd37d
 8011834:	ffffe276 	.word	0xffffe276
 8011838:	ffffc675 	.word	0xffffc675
 801183c:	ffffca16 	.word	0xffffca16
 8011840:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 8011844:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8011846:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 8011848:	9b02      	ldr	r3, [sp, #8]
 801184a:	3320      	adds	r3, #32
 801184c:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 801184e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011850:	4293      	cmp	r3, r2
 8011852:	f47f aefd 	bne.w	8011650 <jpeg_idct_11x11+0x1f0>
  }
}
 8011856:	b065      	add	sp, #404	; 0x194
 8011858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801185c <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011860:	b0eb      	sub	sp, #428	; 0x1ac
 8011862:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011864:	f1a2 0802 	sub.w	r8, r2, #2
 8011868:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801186a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801186e:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011872:	1f0b      	subs	r3, r1, #4
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	f102 030e 	add.w	r3, r2, #14
 801187a:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 801187c:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801187e:	9900      	ldr	r1, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011880:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011882:	f938 cf02 	ldrsh.w	ip, [r8, #2]!
 8011886:	f851 2f04 	ldr.w	r2, [r1, #4]!
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801188a:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801188e:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011892:	fb02 fc0c 	mul.w	ip, r2, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011896:	f9b8 2040 	ldrsh.w	r2, [r8, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801189a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 801189c:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80118a0:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80118a2:	f242 7031 	movw	r0, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80118a6:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80118aa:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80118ae:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80118b0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80118b2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80118b6:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 80118b8:	eb0c 0702 	add.w	r7, ip, r2
    tmp11 = z3 - z4;
 80118bc:	ebac 0202 	sub.w	r2, ip, r2
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80118c0:	fb01 f006 	mul.w	r0, r1, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80118c4:	9900      	ldr	r1, [sp, #0]
 80118c6:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
 80118ca:	436c      	muls	r4, r5
    z2 <<= CONST_BITS;
 80118cc:	0364      	lsls	r4, r4, #13

    tmp12 = z1 - z2;
 80118ce:	ebc4 3546 	rsb	r5, r4, r6, lsl #13

    tmp21 = z3 + tmp12;
 80118d2:	eb0c 0105 	add.w	r1, ip, r5
 80118d6:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 80118d8:	ebac 0105 	sub.w	r1, ip, r5

    tmp12 = z4 + z2;
 80118dc:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 80118de:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 80118e2:	9102      	str	r1, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80118e4:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp25 = tmp10 - tmp12;
 80118e8:	1b79      	subs	r1, r7, r5
    tmp12 = z4 - z1 - z2;
 80118ea:	1b00      	subs	r0, r0, r4
    tmp20 = tmp10 + tmp12;
 80118ec:	eb07 0b05 	add.w	fp, r7, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80118f0:	f9b8 7010 	ldrsh.w	r7, [r8, #16]
    tmp25 = tmp10 - tmp12;
 80118f4:	9103      	str	r1, [sp, #12]
    tmp22 = tmp11 + tmp12;
 80118f6:	1811      	adds	r1, r2, r0
    tmp23 = tmp11 - tmp12;
 80118f8:	1a12      	subs	r2, r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80118fa:	f9b8 c030 	ldrsh.w	ip, [r8, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80118fe:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp23 = tmp11 - tmp12;
 8011902:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011904:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8011906:	9104      	str	r1, [sp, #16]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011908:	6a12      	ldr	r2, [r2, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801190a:	9900      	ldr	r1, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801190c:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801190e:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011910:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011914:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011918:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801191a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801191e:	9a00      	ldr	r2, [sp, #0]
 8011920:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011924:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011928:	49b9      	ldr	r1, [pc, #740]	; (8011c10 <jpeg_idct_12x12+0x3b4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801192a:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801192c:	f9b8 2070 	ldrsh.w	r2, [r8, #112]	; 0x70
    tmp10 = z1 + z3;
 8011930:	eb07 0a05 	add.w	sl, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011934:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011936:	fb01 f00c 	mul.w	r0, r1, ip
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801193a:	eb02 0e0a 	add.w	lr, r2, sl
 801193e:	fb06 fe0e 	mul.w	lr, r6, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011942:	f640 065b 	movw	r6, #2139	; 0x85b
 8011946:	fb06 ea0a 	mla	sl, r6, sl, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801194a:	f640 06f7 	movw	r6, #2295	; 0x8f7
 801194e:	eb04 010a 	add.w	r1, r4, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011952:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011956:	fb06 1107 	mla	r1, r6, r7, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801195a:	18ae      	adds	r6, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801195c:	9106      	str	r1, [sp, #24]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801195e:	49ad      	ldr	r1, [pc, #692]	; (8011c14 <jpeg_idct_12x12+0x3b8>)
 8011960:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011962:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011964:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011966:	49ac      	ldr	r1, [pc, #688]	; (8011c18 <jpeg_idct_12x12+0x3bc>)
 8011968:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801196c:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 801196e:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011972:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011976:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011978:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 801197c:	fb0a 4402 	mla	r4, sl, r2, r4
 8011980:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011982:	49a6      	ldr	r1, [pc, #664]	; (8011c1c <jpeg_idct_12x12+0x3c0>)
 8011984:	fb01 0007 	mla	r0, r1, r7, r0
 8011988:	49a5      	ldr	r1, [pc, #660]	; (8011c20 <jpeg_idct_12x12+0x3c4>)
 801198a:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 801198e:	1aba      	subs	r2, r7, r2
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011990:	1957      	adds	r7, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011992:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011994:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011998:	f641 0c7e 	movw	ip, #6270	; 0x187e
 801199c:	fb0c 7c02 	mla	ip, ip, r2, r7
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80119a0:	4aa0      	ldr	r2, [pc, #640]	; (8011c24 <jpeg_idct_12x12+0x3c8>)
 80119a2:	fb02 7705 	mla	r7, r2, r5, r7

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80119a6:	9a06      	ldr	r2, [sp, #24]
 80119a8:	445a      	add	r2, fp
 80119aa:	12d2      	asrs	r2, r2, #11
 80119ac:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80119b0:	9a06      	ldr	r2, [sp, #24]
 80119b2:	ebab 0b02 	sub.w	fp, fp, r2
 80119b6:	ea4f 22eb 	mov.w	r2, fp, asr #11
 80119ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80119be:	9a01      	ldr	r2, [sp, #4]
 80119c0:	4462      	add	r2, ip
 80119c2:	12d2      	asrs	r2, r2, #11
 80119c4:	61da      	str	r2, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80119c6:	9a01      	ldr	r2, [sp, #4]
 80119c8:	eba2 020c 	sub.w	r2, r2, ip
 80119cc:	12d2      	asrs	r2, r2, #11
 80119ce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80119d2:	9a04      	ldr	r2, [sp, #16]
 80119d4:	4432      	add	r2, r6
 80119d6:	12d2      	asrs	r2, r2, #11
 80119d8:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80119da:	9a04      	ldr	r2, [sp, #16]
 80119dc:	1b92      	subs	r2, r2, r6
 80119de:	12d2      	asrs	r2, r2, #11
 80119e0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80119e4:	9a05      	ldr	r2, [sp, #20]
 80119e6:	4422      	add	r2, r4
 80119e8:	12d2      	asrs	r2, r2, #11
 80119ea:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80119ec:	9a05      	ldr	r2, [sp, #20]
 80119ee:	1b12      	subs	r2, r2, r4
 80119f0:	12d2      	asrs	r2, r2, #11
 80119f2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80119f6:	9a02      	ldr	r2, [sp, #8]
 80119f8:	443a      	add	r2, r7
 80119fa:	12d2      	asrs	r2, r2, #11
 80119fc:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80119fe:	9a02      	ldr	r2, [sp, #8]
 8011a00:	1bd2      	subs	r2, r2, r7
 8011a02:	12d2      	asrs	r2, r2, #11
 8011a04:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011a08:	9a03      	ldr	r2, [sp, #12]
 8011a0a:	4402      	add	r2, r0
 8011a0c:	12d2      	asrs	r2, r2, #11
 8011a0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011a12:	9a03      	ldr	r2, [sp, #12]
 8011a14:	1a12      	subs	r2, r2, r0
 8011a16:	12d2      	asrs	r2, r2, #11
 8011a18:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a1e:	4542      	cmp	r2, r8
 8011a20:	f47f af2d 	bne.w	801187e <jpeg_idct_12x12+0x22>
 8011a24:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8011a26:	aa0a      	add	r2, sp, #40	; 0x28
 8011a28:	f1a3 0a04 	sub.w	sl, r3, #4
 8011a2c:	332c      	adds	r3, #44	; 0x2c
 8011a2e:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011a30:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011a34:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8011a36:	9974      	ldr	r1, [sp, #464]	; 0x1d0
    z2 = (INT32) wsptr[6];
 8011a38:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 8011a3c:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 8011a40:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8011a42:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a44:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8011a48:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8011a4a:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 8011a4e:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011a52:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8011a54:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011a56:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011a5a:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011a5e:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011a60:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8011a64:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8011a68:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 8011a6c:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 8011a6e:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8011a72:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8011a76:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8011a7a:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 8011a7e:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 8011a80:	1b09      	subs	r1, r1, r4
    tmp25 = tmp10 - tmp12;
 8011a82:	eba6 030c 	sub.w	r3, r6, ip
    z3 = (INT32) wsptr[5];
 8011a86:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp20 = tmp10 + tmp12;
 8011a8a:	eb06 070c 	add.w	r7, r6, ip
    tmp25 = tmp10 - tmp12;
 8011a8e:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8011a90:	1843      	adds	r3, r0, r1
    z4 = (INT32) wsptr[7];
 8011a92:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011a96:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp22 = tmp11 + tmp12;
 8011a9a:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8011a9c:	1a43      	subs	r3, r0, r1
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011a9e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    tmp23 = tmp11 - tmp12;
 8011aa2:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011aa4:	f852 3c14 	ldr.w	r3, [r2, #-20]
 8011aa8:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011aac:	4958      	ldr	r1, [pc, #352]	; (8011c10 <jpeg_idct_12x12+0x3b4>)
 8011aae:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 8011ab0:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011ab4:	eb03 0b05 	add.w	fp, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011ab8:	eb04 0c0b 	add.w	ip, r4, fp
 8011abc:	fb06 fc0c 	mul.w	ip, r6, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011ac0:	f640 065b 	movw	r6, #2139	; 0x85b
 8011ac4:	fb06 cb0b 	mla	fp, r6, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011ac8:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011acc:	eb00 0e0b 	add.w	lr, r0, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011ad0:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011ad4:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011ad8:	192e      	adds	r6, r5, r4
 8011ada:	4b4e      	ldr	r3, [pc, #312]	; (8011c14 <jpeg_idct_12x12+0x3b8>)
 8011adc:	fb03 f806 	mul.w	r8, r3, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011ae0:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 8011ae4:	eb01 0608 	add.w	r6, r1, r8
 8011ae8:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011aec:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011af0:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011af2:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 8011af6:	fb0b 0004 	mla	r0, fp, r4, r0
 8011afa:	eb00 0b08 	add.w	fp, r0, r8
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011afe:	4847      	ldr	r0, [pc, #284]	; (8011c1c <jpeg_idct_12x12+0x3c0>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011b00:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011b04:	fb00 1103 	mla	r1, r0, r3, r1
 8011b08:	4b45      	ldr	r3, [pc, #276]	; (8011c20 <jpeg_idct_12x12+0x3c4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011b0a:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011b0c:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8011b10:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011b14:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 8011b16:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011b1a:	4461      	add	r1, ip
    z2 -= z3;
 8011b1c:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011b1e:	4b41      	ldr	r3, [pc, #260]	; (8011c24 <jpeg_idct_12x12+0x3c8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011b20:	eb04 0c05 	add.w	ip, r4, r5
 8011b24:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011b28:	f641 087e 	movw	r8, #6270	; 0x187e
 8011b2c:	fb08 c804 	mla	r8, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011b30:	eb07 040e 	add.w	r4, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011b34:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011b38:	fb03 cc05 	mla	ip, r3, r5, ip
			     & RANGE_MASK];
 8011b3c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011b40:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8011b42:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011b46:	f819 4004 	ldrb.w	r4, [r9, r4]
 8011b4a:	541c      	strb	r4, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011b4c:	9b00      	ldr	r3, [sp, #0]
 8011b4e:	f819 4007 	ldrb.w	r4, [r9, r7]
 8011b52:	72dc      	strb	r4, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011b54:	9b01      	ldr	r3, [sp, #4]
 8011b56:	eb03 0408 	add.w	r4, r3, r8
 8011b5a:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b5c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011b60:	f819 4004 	ldrb.w	r4, [r9, r4]
 8011b64:	705c      	strb	r4, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011b66:	9b01      	ldr	r3, [sp, #4]
 8011b68:	eba3 0408 	sub.w	r4, r3, r8
			     & RANGE_MASK];
 8011b6c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011b70:	f819 4004 	ldrb.w	r4, [r9, r4]
 8011b74:	9b00      	ldr	r3, [sp, #0]
 8011b76:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011b78:	9b04      	ldr	r3, [sp, #16]
 8011b7a:	199c      	adds	r4, r3, r6
 8011b7c:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b7e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011b82:	f819 4004 	ldrb.w	r4, [r9, r4]
 8011b86:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011b88:	9b04      	ldr	r3, [sp, #16]
 8011b8a:	1b9c      	subs	r4, r3, r6
 8011b8c:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011b8e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011b92:	f819 4004 	ldrb.w	r4, [r9, r4]
 8011b96:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011b98:	9b05      	ldr	r3, [sp, #20]
 8011b9a:	eb03 040b 	add.w	r4, r3, fp
 8011b9e:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011ba0:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011ba4:	f819 4004 	ldrb.w	r4, [r9, r4]
 8011ba8:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011baa:	9b05      	ldr	r3, [sp, #20]
 8011bac:	eba3 000b 	sub.w	r0, r3, fp
 8011bb0:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011bb2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011bb6:	f819 0000 	ldrb.w	r0, [r9, r0]
 8011bba:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011bbc:	9b02      	ldr	r3, [sp, #8]
 8011bbe:	eb03 000c 	add.w	r0, r3, ip
 8011bc2:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011bc4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011bc8:	f819 0000 	ldrb.w	r0, [r9, r0]
 8011bcc:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011bce:	9b02      	ldr	r3, [sp, #8]
 8011bd0:	eba3 000c 	sub.w	r0, r3, ip
 8011bd4:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011bd6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011bda:	f819 0000 	ldrb.w	r0, [r9, r0]
 8011bde:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011be0:	9b03      	ldr	r3, [sp, #12]
 8011be2:	1858      	adds	r0, r3, r1
 8011be4:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011be6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011bea:	f819 0000 	ldrb.w	r0, [r9, r0]
 8011bee:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011bf0:	9b03      	ldr	r3, [sp, #12]
 8011bf2:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011bf4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011bf8:	f819 1001 	ldrb.w	r1, [r9, r1]
 8011bfc:	9b00      	ldr	r3, [sp, #0]
 8011bfe:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8011c00:	9b07      	ldr	r3, [sp, #28]
 8011c02:	4553      	cmp	r3, sl
 8011c04:	f47f af14 	bne.w	8011a30 <jpeg_idct_12x12+0x1d4>
  }
}
 8011c08:	b06b      	add	sp, #428	; 0x1ac
 8011c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0e:	bf00      	nop
 8011c10:	ffffeeaf 	.word	0xffffeeaf
 8011c14:	ffffde8b 	.word	0xffffde8b
 8011c18:	ffffd0b0 	.word	0xffffd0b0
 8011c1c:	ffffea5c 	.word	0xffffea5c
 8011c20:	ffffc08c 	.word	0xffffc08c
 8011c24:	ffffc4df 	.word	0xffffc4df

08011c28 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2c:	b0f7      	sub	sp, #476	; 0x1dc
 8011c2e:	f1a2 0902 	sub.w	r9, r2, #2
 8011c32:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011c34:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011c38:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011c3c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8011c3e:	f1a3 0e04 	sub.w	lr, r3, #4
 8011c42:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011c46:	aa0e      	add	r2, sp, #56	; 0x38
 8011c48:	930d      	str	r3, [sp, #52]	; 0x34
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011c4a:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011c4e:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011c52:	f85e 1f04 	ldr.w	r1, [lr, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011c56:	3204      	adds	r2, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011c58:	f9b9 4020 	ldrsh.w	r4, [r9, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011c5c:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011c5e:	f9b9 1040 	ldrsh.w	r1, [r9, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011c62:	f9b9 0060 	ldrsh.w	r0, [r9, #96]	; 0x60
    z1 <<= CONST_BITS;
 8011c66:	035b      	lsls	r3, r3, #13

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011c68:	f9b9 7050 	ldrsh.w	r7, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011c6c:	f9b9 c070 	ldrsh.w	ip, [r9, #112]	; 0x70
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011c74:	9303      	str	r3, [sp, #12]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011c76:	f8de 3040 	ldr.w	r3, [lr, #64]	; 0x40
 8011c7a:	4363      	muls	r3, r4
 8011c7c:	9301      	str	r3, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011c7e:	f8de 3080 	ldr.w	r3, [lr, #128]	; 0x80
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011c82:	9c01      	ldr	r4, [sp, #4]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011c84:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011c86:	f8de 30c0 	ldr.w	r3, [lr, #192]	; 0xc0
 8011c8a:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8011c8c:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8011c8e:	1a09      	subs	r1, r1, r0
 8011c90:	9102      	str	r1, [sp, #8]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011c92:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011c96:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011c98:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
 8011c9c:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011ca0:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011ca4:	fb00 5004 	mla	r0, r0, r4, r5
 8011ca8:	4408      	add	r0, r1
 8011caa:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011cac:	f241 000c 	movw	r0, #4108	; 0x100c
 8011cb0:	4360      	muls	r0, r4
 8011cb2:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011cb4:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011cb8:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011cba:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011cbe:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011cc2:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011cc4:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011cc8:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011cca:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011ccc:	1a2d      	subs	r5, r5, r0
 8011cce:	440d      	add	r5, r1
 8011cd0:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011cd2:	4dd9      	ldr	r5, [pc, #868]	; (8012038 <jpeg_idct_13x13+0x410>)
 8011cd4:	fb05 0004 	mla	r0, r5, r4, r0
 8011cd8:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011cda:	9803      	ldr	r0, [sp, #12]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011cdc:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011cde:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011ce2:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011ce4:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011ce8:	4371      	muls	r1, r6

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011cea:	4ed4      	ldr	r6, [pc, #848]	; (801203c <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011cec:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011cee:	48d4      	ldr	r0, [pc, #848]	; (8012040 <jpeg_idct_13x13+0x418>)
 8011cf0:	4360      	muls	r0, r4
 8011cf2:	1ac0      	subs	r0, r0, r3
 8011cf4:	1a40      	subs	r0, r0, r1
 8011cf6:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011cf8:	48d2      	ldr	r0, [pc, #840]	; (8012044 <jpeg_idct_13x13+0x41c>)
 8011cfa:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011cfe:	f8de 0060 	ldr.w	r0, [lr, #96]	; 0x60
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011d02:	f641 6402 	movw	r4, #7682	; 0x1e02
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011d06:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d08:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011d0c:	9309      	str	r3, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011d0e:	f8de 3020 	ldr.w	r3, [lr, #32]
 8011d12:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d14:	f9b9 3030 	ldrsh.w	r3, [r9, #48]	; 0x30
 8011d18:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011d1a:	f8de 00a0 	ldr.w	r0, [lr, #160]	; 0xa0
 8011d1e:	4347      	muls	r7, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011d20:	f8de 00e0 	ldr.w	r0, [lr, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011d24:	eb01 0b03 	add.w	fp, r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011d28:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011d2c:	f642 2050 	movw	r0, #10832	; 0x2a50
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011d30:	19cd      	adds	r5, r1, r7
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011d32:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011d36:	f242 503e 	movw	r0, #9534	; 0x253e
 8011d3a:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011d3c:	eb01 000c 	add.w	r0, r1, ip
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011d40:	fb04 fa00 	mul.w	sl, r4, r0
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011d44:	4cc0      	ldr	r4, [pc, #768]	; (8012048 <jpeg_idct_13x13+0x420>)
    tmp15 = z1 + z4;
 8011d46:	900a      	str	r0, [sp, #40]	; 0x28
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011d48:	eb0b 0005 	add.w	r0, fp, r5
 8011d4c:	4450      	add	r0, sl
 8011d4e:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011d52:	4ebe      	ldr	r6, [pc, #760]	; (801204c <jpeg_idct_13x13+0x424>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011d54:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011d56:	19d8      	adds	r0, r3, r7
 8011d58:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011d5a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8011d5e:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011d62:	fb04 0007 	mla	r0, r4, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011d66:	f604 5411 	addw	r4, r4, #3345	; 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011d6a:	445e      	add	r6, fp
    tmp11 += tmp14;
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d6c:	f244 6b94 	movw	fp, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011d70:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011d72:	eb03 050c 	add.w	r5, r3, ip
 8011d76:	4365      	muls	r5, r4
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011d78:	4cb5      	ldr	r4, [pc, #724]	; (8012050 <jpeg_idct_13x13+0x428>)
    tmp11 += tmp14;
 8011d7a:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d7c:	fb0b 550c 	mla	r5, fp, ip, r5
    tmp12 += tmp14;
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011d80:	f640 2b33 	movw	fp, #2611	; 0xa33
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011d84:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011d86:	eb07 0a0c 	add.w	sl, r7, ip
 8011d8a:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011d8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp12 += tmp14;
 8011d90:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011d92:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011d94:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011d98:	4365      	muls	r5, r4
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011d9a:	4cae      	ldr	r4, [pc, #696]	; (8012054 <jpeg_idct_13x13+0x42c>)
 8011d9c:	fb0b 5101 	mla	r1, fp, r1, r5
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011da0:	f640 4b4e 	movw	fp, #3150	; 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011da4:	fb04 1103 	mla	r1, r4, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011da8:	1afb      	subs	r3, r7, r3
 8011daa:	f641 6402 	movw	r4, #7682	; 0x1e02
 8011dae:	4363      	muls	r3, r4
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011db0:	9c04      	ldr	r4, [sp, #16]
    tmp14 += z1;
 8011db2:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011db4:	fb0b 3307 	mla	r3, fp, r7, r3
 8011db8:	f46f 575f 	mvn.w	r7, #14272	; 0x37c0
 8011dbc:	fb07 330c 	mla	r3, r7, ip, r3
 8011dc0:	442b      	add	r3, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011dc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011dc4:	1965      	adds	r5, r4, r5
 8011dc6:	12ed      	asrs	r5, r5, #11
 8011dc8:	f842 5c04 	str.w	r5, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011dcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011dce:	1b65      	subs	r5, r4, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011dd0:	9c06      	ldr	r4, [sp, #24]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011dd2:	12ed      	asrs	r5, r5, #11
 8011dd4:	f8c2 517c 	str.w	r5, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011dd8:	19a5      	adds	r5, r4, r6
 8011dda:	12ed      	asrs	r5, r5, #11
 8011ddc:	61d5      	str	r5, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011dde:	1ba5      	subs	r5, r4, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011de0:	9c05      	ldr	r4, [sp, #20]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011de2:	12ed      	asrs	r5, r5, #11
 8011de4:	f8c2 515c 	str.w	r5, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011de8:	1825      	adds	r5, r4, r0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011dea:	1a20      	subs	r0, r4, r0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011dec:	12ed      	asrs	r5, r5, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011dee:	12c0      	asrs	r0, r0, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011df0:	63d5      	str	r5, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011df2:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011df6:	9808      	ldr	r0, [sp, #32]
 8011df8:	4450      	add	r0, sl
 8011dfa:	12c0      	asrs	r0, r0, #11
 8011dfc:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011dfe:	9808      	ldr	r0, [sp, #32]
 8011e00:	eba0 000a 	sub.w	r0, r0, sl
 8011e04:	12c0      	asrs	r0, r0, #11
 8011e06:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011e0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e0c:	4408      	add	r0, r1
 8011e0e:	12c0      	asrs	r0, r0, #11
 8011e10:	67d0      	str	r0, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011e12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e14:	1a41      	subs	r1, r0, r1
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011e16:	9803      	ldr	r0, [sp, #12]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011e18:	12c9      	asrs	r1, r1, #11
 8011e1a:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011e1e:	9907      	ldr	r1, [sp, #28]
 8011e20:	4419      	add	r1, r3
 8011e22:	12c9      	asrs	r1, r1, #11
 8011e24:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011e28:	9907      	ldr	r1, [sp, #28]
 8011e2a:	1acb      	subs	r3, r1, r3
 8011e2c:	12db      	asrs	r3, r3, #11
 8011e2e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011e32:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8011e36:	1a5b      	subs	r3, r3, r1
 8011e38:	f642 5141 	movw	r1, #11585	; 0x2d41
 8011e3c:	fb01 0303 	mla	r3, r1, r3, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011e40:	12db      	asrs	r3, r3, #11
 8011e42:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e48:	454b      	cmp	r3, r9
 8011e4a:	f47f aefe 	bne.w	8011c4a <jpeg_idct_13x13+0x22>
 8011e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8011e50:	ac0e      	add	r4, sp, #56	; 0x38
 8011e52:	3b04      	subs	r3, #4
 8011e54:	9303      	str	r3, [sp, #12]
 8011e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e58:	3330      	adds	r3, #48	; 0x30
 8011e5a:	930c      	str	r3, [sp, #48]	; 0x30
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011e5c:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011e5e:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8011e62:	6920      	ldr	r0, [r4, #16]
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011e64:	f641 6702 	movw	r7, #7682	; 0x1e02
    outptr = output_buf[ctr] + output_col;
 8011e68:	f853 2f04 	ldr.w	r2, [r3, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011e6c:	3420      	adds	r4, #32
    z4 = (INT32) wsptr[6];
 8011e6e:	f854 1c08 	ldr.w	r1, [r4, #-8]
    outptr = output_buf[ctr] + output_col;
 8011e72:	920b      	str	r2, [sp, #44]	; 0x2c
 8011e74:	9303      	str	r3, [sp, #12]
 8011e76:	4613      	mov	r3, r2
 8011e78:	9a80      	ldr	r2, [sp, #512]	; 0x200
    z2 = (INT32) wsptr[2];
 8011e7a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 8011e7e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011e80:	f854 3c20 	ldr.w	r3, [r4, #-32]
    z3 = (INT32) wsptr[5];
 8011e84:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011e88:	3310      	adds	r3, #16
 8011e8a:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8011e8c:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 8011e8e:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011e90:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 8011e92:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011e94:	f240 3119 	movw	r1, #793	; 0x319
 8011e98:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011e9a:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011e9c:	4341      	muls	r1, r0
 8011e9e:	9802      	ldr	r0, [sp, #8]
 8011ea0:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011ea4:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8011ea8:	fb00 500e 	mla	r0, r0, lr, r5
 8011eac:	4408      	add	r0, r1
 8011eae:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011eb0:	f241 000c 	movw	r0, #4108	; 0x100c
 8011eb4:	fb00 f00e 	mul.w	r0, r0, lr
 8011eb8:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011eba:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011ebe:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011ec0:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011ec4:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011ec8:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011eca:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011ece:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011ed2:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011ed4:	1a2d      	subs	r5, r5, r0
 8011ed6:	440d      	add	r5, r1
 8011ed8:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011eda:	4d57      	ldr	r5, [pc, #348]	; (8012038 <jpeg_idct_13x13+0x410>)
 8011edc:	fb05 000e 	mla	r0, r5, lr, r0
 8011ee0:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011ee2:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011ee4:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011ee6:	f640 51f2 	movw	r1, #3570	; 0xdf2
 8011eea:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011eec:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011ef0:	4371      	muls	r1, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011ef2:	4e56      	ldr	r6, [pc, #344]	; (801204c <jpeg_idct_13x13+0x424>)
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011ef4:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011ef8:	4851      	ldr	r0, [pc, #324]	; (8012040 <jpeg_idct_13x13+0x418>)
 8011efa:	fb00 f00e 	mul.w	r0, r0, lr
 8011efe:	1ac0      	subs	r0, r0, r3
 8011f00:	1a40      	subs	r0, r0, r1
 8011f02:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011f04:	484f      	ldr	r0, [pc, #316]	; (8012044 <jpeg_idct_13x13+0x41c>)
 8011f06:	fb00 330e 	mla	r3, r0, lr, r3
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011f0a:	f642 2050 	movw	r0, #10832	; 0x2a50
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011f0e:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 8011f10:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011f14:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011f16:	eb01 050c 	add.w	r5, r1, ip
    z2 = (INT32) wsptr[3];
 8011f1a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011f1e:	eb01 0b03 	add.w	fp, r1, r3
 8011f22:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011f26:	f242 503e 	movw	r0, #9534	; 0x253e
 8011f2a:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 8011f2c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011f30:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011f34:	4841      	ldr	r0, [pc, #260]	; (801203c <jpeg_idct_13x13+0x414>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011f36:	fb07 fa09 	mul.w	sl, r7, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011f3a:	eb0b 0705 	add.w	r7, fp, r5
 8011f3e:	4457      	add	r7, sl
 8011f40:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011f44:	4f40      	ldr	r7, [pc, #256]	; (8012048 <jpeg_idct_13x13+0x420>)
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011f46:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011f48:	eb03 000c 	add.w	r0, r3, ip
 8011f4c:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011f4e:	f641 26cb 	movw	r6, #6859	; 0x1acb
 8011f52:	fb06 0603 	mla	r6, r6, r3, r0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011f56:	fb07 000c 	mla	r0, r7, ip, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011f5a:	f607 5711 	addw	r7, r7, #3345	; 0xd11
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011f5e:	445e      	add	r6, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011f60:	f244 6b94 	movw	fp, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011f64:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011f66:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011f6a:	195d      	adds	r5, r3, r5
 8011f6c:	437d      	muls	r5, r7
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011f6e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp11 += tmp14;
 8011f72:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011f74:	fb0b 5507 	mla	r5, fp, r7, r5
 8011f78:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011f7a:	eb0c 0a07 	add.w	sl, ip, r7
 8011f7e:	4f34      	ldr	r7, [pc, #208]	; (8012050 <jpeg_idct_13x13+0x428>)
 8011f80:	fb07 fa0a 	mul.w	sl, r7, sl
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011f84:	f207 671e 	addw	r7, r7, #1566	; 0x61e
    tmp12 += tmp14;
 8011f88:	4450      	add	r0, sl
    tmp13 += tmp14;
 8011f8a:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011f8c:	f640 25d5 	movw	r5, #2773	; 0xad5
 8011f90:	fb05 f509 	mul.w	r5, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011f94:	f640 2933 	movw	r9, #2611	; 0xa33
 8011f98:	fb09 5101 	mla	r1, r9, r1, r5
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011f9c:	f640 494e 	movw	r9, #3150	; 0xc4e
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011fa0:	fb07 1103 	mla	r1, r7, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011fa4:	ebac 0303 	sub.w	r3, ip, r3
 8011fa8:	f641 6702 	movw	r7, #7682	; 0x1e02
 8011fac:	437b      	muls	r3, r7
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011fae:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp14 += z1;
 8011fb2:	4419      	add	r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011fb4:	fb09 330c 	mla	r3, r9, ip, r3
 8011fb8:	f46f 5c5f 	mvn.w	ip, #14272	; 0x37c0
 8011fbc:	fb0c 3307 	mla	r3, ip, r7, r3
 8011fc0:	eb03 0c05 	add.w	ip, r3, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fc6:	9d04      	ldr	r5, [sp, #16]
 8011fc8:	441d      	add	r5, r3
			     & RANGE_MASK];
 8011fca:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011fce:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011fd2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011fd4:	9b80      	ldr	r3, [sp, #512]	; 0x200
 8011fd6:	54fd      	strb	r5, [r7, r3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011fd8:	9b04      	ldr	r3, [sp, #16]
 8011fda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011fdc:	1b5d      	subs	r5, r3, r5
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011fde:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8011fe0:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011fe4:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011fe8:	7315      	strb	r5, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011fea:	199d      	adds	r5, r3, r6
			     & RANGE_MASK];
 8011fec:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011ff0:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011ff4:	7055      	strb	r5, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011ff6:	1b9d      	subs	r5, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011ff8:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8011ffa:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011ffe:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012002:	72d5      	strb	r5, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012004:	181d      	adds	r5, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012006:	1a18      	subs	r0, r3, r0
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012008:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 801200a:	f3c5 4589 	ubfx	r5, r5, #18, #10
			     & RANGE_MASK];
 801200e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012012:	f818 5005 	ldrb.w	r5, [r8, r5]
 8012016:	7095      	strb	r5, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012018:	f818 0000 	ldrb.w	r0, [r8, r0]
 801201c:	7290      	strb	r0, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801201e:	eb03 000a 	add.w	r0, r3, sl
			     & RANGE_MASK];
 8012022:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012026:	f818 0000 	ldrb.w	r0, [r8, r0]
 801202a:	70d0      	strb	r0, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801202c:	eba3 000a 	sub.w	r0, r3, sl
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012030:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8012032:	f3c0 4089 	ubfx	r0, r0, #18, #10
 8012036:	e00f      	b.n	8012058 <jpeg_idct_13x13+0x430>
 8012038:	ffffd7ee 	.word	0xffffd7ee
 801203c:	ffffbf5b 	.word	0xffffbf5b
 8012040:	fffffa8c 	.word	0xfffffa8c
 8012044:	ffffe64b 	.word	0xffffe64b
 8012048:	ffffcdb1 	.word	0xffffcdb1
 801204c:	fffff52b 	.word	0xfffff52b
 8012050:	ffffeaf8 	.word	0xffffeaf8
 8012054:	fffff116 	.word	0xfffff116
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012058:	f818 0000 	ldrb.w	r0, [r8, r0]
 801205c:	7250      	strb	r0, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801205e:	1858      	adds	r0, r3, r1
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012060:	1a59      	subs	r1, r3, r1
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012062:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012064:	f3c0 4089 	ubfx	r0, r0, #18, #10
			     & RANGE_MASK];
 8012068:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801206c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8012070:	7110      	strb	r0, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012072:	f818 1001 	ldrb.w	r1, [r8, r1]
 8012076:	7211      	strb	r1, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012078:	eb03 010c 	add.w	r1, r3, ip
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801207c:	eba3 030c 	sub.w	r3, r3, ip
			     & RANGE_MASK];
 8012080:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 8012084:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012088:	f818 1001 	ldrb.w	r1, [r8, r1]
 801208c:	7151      	strb	r1, [r2, #5]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801208e:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012092:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012096:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012098:	9b01      	ldr	r3, [sp, #4]
 801209a:	eba3 030e 	sub.w	r3, r3, lr
 801209e:	434b      	muls	r3, r1
 80120a0:	9902      	ldr	r1, [sp, #8]
 80120a2:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 80120a6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 80120aa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80120ae:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 80120b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120b2:	9a03      	ldr	r2, [sp, #12]
 80120b4:	4293      	cmp	r3, r2
 80120b6:	f47f aed1 	bne.w	8011e5c <jpeg_idct_13x13+0x234>
  }
}
 80120ba:	b077      	add	sp, #476	; 0x1dc
 80120bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080120c0 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80120c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c4:	b0fd      	sub	sp, #500	; 0x1f4
 80120c6:	f1a2 0b02 	sub.w	fp, r2, #2
 80120ca:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80120cc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80120d0:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80120d2:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80120d6:	1f03      	subs	r3, r0, #4
 80120d8:	9300      	str	r3, [sp, #0]
 80120da:	f102 030e 	add.w	r3, r2, #14
 80120de:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 80120e0:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120e2:	9900      	ldr	r1, [sp, #0]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80120e4:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120e8:	f93b 4f02 	ldrsh.w	r4, [fp, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80120ec:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120f0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80120f4:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120f6:	9100      	str	r1, [sp, #0]
 80120f8:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80120fa:	9a00      	ldr	r2, [sp, #0]
 80120fc:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
 8012100:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8012104:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012106:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012108:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801210a:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801210e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012112:	fb01 f702 	mul.w	r7, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012116:	f640 2112 	movw	r1, #2578	; 0xa12
 801211a:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801211e:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8012122:	19e6      	adds	r6, r4, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012124:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012126:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8012128:	eb04 050c 	add.w	r5, r4, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801212c:	f9bb c020 	ldrsh.w	ip, [fp, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012130:	1abf      	subs	r7, r7, r2
    tmp12 = z1 - z4;
 8012132:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012134:	eba4 0247 	sub.w	r2, r4, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012138:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801213c:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012140:	48d6      	ldr	r0, [pc, #856]	; (801249c <jpeg_idct_14x14+0x3dc>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012142:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012144:	9a00      	ldr	r2, [sp, #0]
 8012146:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012148:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801214c:	f9bb 2060 	ldrsh.w	r2, [fp, #96]	; 0x60
 8012150:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012152:	eb0c 0402 	add.w	r4, ip, r2
 8012156:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012158:	f640 07bd 	movw	r7, #2237	; 0x8bd
 801215c:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012160:	fb00 4402 	mla	r4, r0, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012164:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8012168:	4342      	muls	r2, r0
    tmp20 = tmp10 + tmp13;
 801216a:	19f0      	adds	r0, r6, r7
 801216c:	9001      	str	r0, [sp, #4]
    tmp26 = tmp10 - tmp13;
 801216e:	1bf0      	subs	r0, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012170:	fb0e 220c 	mla	r2, lr, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012174:	f9bb 7030 	ldrsh.w	r7, [fp, #48]	; 0x30
    tmp26 = tmp10 - tmp13;
 8012178:	9002      	str	r0, [sp, #8]
    tmp21 = tmp11 + tmp14;
 801217a:	1928      	adds	r0, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801217c:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp11 + tmp14;
 8012180:	9003      	str	r0, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8012182:	1b28      	subs	r0, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012184:	f9bb 4010 	ldrsh.w	r4, [fp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012188:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 801218c:	9004      	str	r0, [sp, #16]
    tmp22 = tmp12 + tmp15;
 801218e:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8012190:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012192:	9900      	ldr	r1, [sp, #0]
    tmp22 = tmp12 + tmp15;
 8012194:	9005      	str	r0, [sp, #20]
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012196:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
    tmp24 = tmp12 - tmp15;
 801219a:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801219c:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801219e:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80121a2:	6a12      	ldr	r2, [r2, #32]
 80121a4:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80121a6:	9a00      	ldr	r2, [sp, #0]
 80121a8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80121aa:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80121ac:	9a00      	ldr	r2, [sp, #0]
 80121ae:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80121b2:	eb04 0c07 	add.w	ip, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80121b6:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80121b8:	f9bb 2070 	ldrsh.w	r2, [fp, #112]	; 0x70
    tmp14 = z1 + z3;
 80121bc:	eb04 0a06 	add.w	sl, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80121c0:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80121c2:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80121c6:	fb05 f50a 	mul.w	r5, r5, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80121ca:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80121ce:	49b4      	ldr	r1, [pc, #720]	; (80124a0 <jpeg_idct_14x14+0x3e0>)
 80121d0:	eb0c 0e05 	add.w	lr, ip, r5
 80121d4:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 80121d8:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80121dc:	f641 0114 	movw	r1, #6164	; 0x1814
 80121e0:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80121e4:	49af      	ldr	r1, [pc, #700]	; (80124a4 <jpeg_idct_14x14+0x3e4>)
 80121e6:	fb01 a104 	mla	r1, r1, r4, sl
    z1    -= z2;
 80121ea:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80121ec:	fb08 f804 	mul.w	r8, r8, r4
 80121f0:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 80121f4:	4441      	add	r1, r8
 80121f6:	9107      	str	r1, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80121f8:	19b9      	adds	r1, r7, r6
 80121fa:	4341      	muls	r1, r0
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80121fc:	f6a0 0081 	subw	r0, r0, #2177	; 0x881
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012200:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012204:	fb00 1007 	mla	r0, r0, r7, r1
 8012208:	4460      	add	r0, ip
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801220a:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801220e:	9008      	str	r0, [sp, #32]
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012210:	48a5      	ldr	r0, [pc, #660]	; (80124a8 <jpeg_idct_14x14+0x3e8>)
 8012212:	fb00 1106 	mla	r1, r0, r6, r1
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012216:	48a5      	ldr	r0, [pc, #660]	; (80124ac <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012218:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801221a:	1bf5      	subs	r5, r6, r7
 801221c:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012220:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8012224:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012226:	fb00 cc06 	mla	ip, r0, r6, ip

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801222a:	9801      	ldr	r0, [sp, #4]
    tmp13 = (z1 - z3) << PASS1_BITS;
 801222c:	1b92      	subs	r2, r2, r6
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801222e:	eb00 040e 	add.w	r4, r0, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012232:	44d4      	add	ip, sl
    tmp13 = (z1 - z3) << PASS1_BITS;
 8012234:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012236:	f241 5a99 	movw	sl, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801223a:	12e4      	asrs	r4, r4, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801223c:	fb0a 5507 	mla	r5, sl, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012240:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012244:	eba0 040e 	sub.w	r4, r0, lr
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012248:	9803      	ldr	r0, [sp, #12]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801224a:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801224c:	12e4      	asrs	r4, r4, #11
 801224e:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012252:	9c08      	ldr	r4, [sp, #32]
 8012254:	1904      	adds	r4, r0, r4
 8012256:	12e4      	asrs	r4, r4, #11
 8012258:	61dc      	str	r4, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801225a:	9c08      	ldr	r4, [sp, #32]
 801225c:	1b04      	subs	r4, r0, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801225e:	9805      	ldr	r0, [sp, #20]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012260:	12e4      	asrs	r4, r4, #11
 8012262:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012266:	1844      	adds	r4, r0, r1
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012268:	1a41      	subs	r1, r0, r1
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801226a:	12e4      	asrs	r4, r4, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801226c:	12c9      	asrs	r1, r1, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801226e:	63dc      	str	r4, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012270:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012274:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012276:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 801227a:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 801227c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801227e:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012282:	9907      	ldr	r1, [sp, #28]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012284:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012288:	9a06      	ldr	r2, [sp, #24]
 801228a:	4462      	add	r2, ip
 801228c:	12d2      	asrs	r2, r2, #11
 801228e:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012290:	9a06      	ldr	r2, [sp, #24]
 8012292:	eba2 020c 	sub.w	r2, r2, ip
 8012296:	12d2      	asrs	r2, r2, #11
 8012298:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801229c:	9a04      	ldr	r2, [sp, #16]
 801229e:	442a      	add	r2, r5
 80122a0:	12d2      	asrs	r2, r2, #11
 80122a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80122a6:	9a04      	ldr	r2, [sp, #16]
 80122a8:	1b52      	subs	r2, r2, r5
 80122aa:	12d2      	asrs	r2, r2, #11
 80122ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80122b0:	9a02      	ldr	r2, [sp, #8]
 80122b2:	440a      	add	r2, r1
 80122b4:	12d2      	asrs	r2, r2, #11
 80122b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80122ba:	9a02      	ldr	r2, [sp, #8]
 80122bc:	1a52      	subs	r2, r2, r1
 80122be:	12d2      	asrs	r2, r2, #11
 80122c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80122c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80122c6:	455a      	cmp	r2, fp
 80122c8:	f47f af0b 	bne.w	80120e2 <jpeg_idct_14x14+0x22>
 80122cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 80122ce:	a80c      	add	r0, sp, #48	; 0x30
 80122d0:	3b04      	subs	r3, #4
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d6:	3334      	adds	r3, #52	; 0x34
 80122d8:	930b      	str	r3, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80122da:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80122dc:	f640 2412 	movw	r4, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 80122e0:	6906      	ldr	r6, [r0, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80122e2:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 80122e6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80122ea:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80122ee:	6801      	ldr	r1, [r0, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80122f0:	fb04 f706 	mul.w	r7, r4, r6
    outptr = output_buf[ctr] + output_col;
 80122f4:	920a      	str	r2, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80122f6:	f641 4437 	movw	r4, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 80122fa:	9300      	str	r3, [sp, #0]
 80122fc:	4613      	mov	r3, r2
 80122fe:	9a86      	ldr	r2, [sp, #536]	; 0x218
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012300:	3110      	adds	r1, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012302:	3020      	adds	r0, #32
    outptr = output_buf[ctr] + output_col;
 8012304:	189a      	adds	r2, r3, r2
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012306:	f642 03c6 	movw	r3, #10438	; 0x28c6
    tmp11 = z1 + z3;
 801230a:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801230e:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012310:	4366      	muls	r6, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012312:	4c62      	ldr	r4, [pc, #392]	; (801249c <jpeg_idct_14x14+0x3dc>)
    tmp10 = z1 + z2;
 8012314:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012318:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 801231a:	ebc6 3841 	rsb	r8, r6, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801231e:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012322:	1b9b      	subs	r3, r3, r6
    z1 = (INT32) wsptr[2];
 8012324:	f850 6c18 	ldr.w	r6, [r0, #-24]
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012328:	005b      	lsls	r3, r3, #1
 801232a:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 801232e:	9301      	str	r3, [sp, #4]
    z2 = (INT32) wsptr[6];
 8012330:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012334:	18f1      	adds	r1, r6, r3
 8012336:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012338:	f640 07bd 	movw	r7, #2237	; 0x8bd
 801233c:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012340:	fb04 1103 	mla	r1, r4, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012344:	f604 24e5 	addw	r4, r4, #2789	; 0xae5
 8012348:	4363      	muls	r3, r4
    tmp20 = tmp10 + tmp13;
 801234a:	eb0c 0407 	add.w	r4, ip, r7
 801234e:	9402      	str	r4, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8012350:	ebac 0407 	sub.w	r4, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012354:	fb0e 3306 	mla	r3, lr, r6, r3
    z3 = (INT32) wsptr[5];
 8012358:	f850 cc0c 	ldr.w	ip, [r0, #-12]
    tmp26 = tmp10 - tmp13;
 801235c:	9403      	str	r4, [sp, #12]
    tmp21 = tmp11 + tmp14;
 801235e:	186c      	adds	r4, r5, r1
    tmp25 = tmp11 - tmp14;
 8012360:	1a69      	subs	r1, r5, r1
    z4 = (INT32) wsptr[7];
 8012362:	f850 6c04 	ldr.w	r6, [r0, #-4]
    tmp21 = tmp11 + tmp14;
 8012366:	9404      	str	r4, [sp, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012368:	f242 6452 	movw	r4, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 801236c:	9105      	str	r1, [sp, #20]
    tmp22 = tmp12 + tmp15;
 801236e:	eb08 0103 	add.w	r1, r8, r3
    tmp24 = tmp12 - tmp15;
 8012372:	eba8 0303 	sub.w	r3, r8, r3
    z2 = (INT32) wsptr[3];
 8012376:	f850 8c14 	ldr.w	r8, [r0, #-20]
    tmp22 = tmp12 + tmp15;
 801237a:	9106      	str	r1, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801237c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8012380:	9307      	str	r3, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012382:	f640 6ef2 	movw	lr, #3826	; 0xef2
    z1 = (INT32) wsptr[1];
 8012386:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    tmp14 = z1 + z3;
 801238a:	eb03 0b0c 	add.w	fp, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801238e:	eb03 0508 	add.w	r5, r3, r8
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012392:	fb04 f40b 	mul.w	r4, r4, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012396:	434d      	muls	r5, r1
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012398:	4941      	ldr	r1, [pc, #260]	; (80124a0 <jpeg_idct_14x14+0x3e0>)
 801239a:	192f      	adds	r7, r5, r4
 801239c:	eb07 3746 	add.w	r7, r7, r6, lsl #13
 80123a0:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80123a4:	f641 0114 	movw	r1, #6164	; 0x1814
 80123a8:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80123ac:	493d      	ldr	r1, [pc, #244]	; (80124a4 <jpeg_idct_14x14+0x3e4>)
 80123ae:	fb01 b103 	mla	r1, r1, r3, fp
    z1    -= z2;
 80123b2:	eba3 0308 	sub.w	r3, r3, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80123b6:	fb0e fe03 	mul.w	lr, lr, r3
    z1    -= z2;
 80123ba:	9308      	str	r3, [sp, #32]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80123bc:	ebae 3e46 	sub.w	lr, lr, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80123c0:	4b3b      	ldr	r3, [pc, #236]	; (80124b0 <jpeg_idct_14x14+0x3f0>)
    tmp16 += tmp15;
 80123c2:	4471      	add	r1, lr
 80123c4:	9109      	str	r1, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80123c6:	eb08 010c 	add.w	r1, r8, ip
 80123ca:	fb0a f101 	mul.w	r1, sl, r1
 80123ce:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80123d2:	fb03 1a08 	mla	sl, r3, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80123d6:	4b34      	ldr	r3, [pc, #208]	; (80124a8 <jpeg_idct_14x14+0x3e8>)
 80123d8:	fb03 110c 	mla	r1, r3, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80123dc:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80123de:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123e2:	4b32      	ldr	r3, [pc, #200]	; (80124ac <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80123e4:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80123e6:	ebac 0408 	sub.w	r4, ip, r8
 80123ea:	436c      	muls	r4, r5
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123ec:	eb04 3546 	add.w	r5, r4, r6, lsl #13
 80123f0:	fb03 550c 	mla	r5, r3, ip, r5
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80123f4:	9b08      	ldr	r3, [sp, #32]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80123f6:	445d      	add	r5, fp
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80123f8:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80123fc:	f241 5b99 	movw	fp, #5529	; 0x1599
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012400:	035b      	lsls	r3, r3, #13
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012402:	fb0b 4408 	mla	r4, fp, r8, r4
 8012406:	4474      	add	r4, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012408:	eb03 3e46 	add.w	lr, r3, r6, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801240c:	9e02      	ldr	r6, [sp, #8]
 801240e:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8012410:	eb06 0c07 	add.w	ip, r6, r7
 8012414:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			     & RANGE_MASK];
 8012416:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801241a:	f819 c00c 	ldrb.w	ip, [r9, ip]
 801241e:	f806 c003 	strb.w	ip, [r6, r3]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012422:	9b02      	ldr	r3, [sp, #8]
 8012424:	1bde      	subs	r6, r3, r7
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012426:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012428:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801242c:	f819 6006 	ldrb.w	r6, [r9, r6]
 8012430:	7356      	strb	r6, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012432:	eb03 060a 	add.w	r6, r3, sl
			     & RANGE_MASK];
 8012436:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801243a:	f819 6006 	ldrb.w	r6, [r9, r6]
 801243e:	7056      	strb	r6, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012440:	eba3 060a 	sub.w	r6, r3, sl
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012444:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012446:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801244a:	f819 6006 	ldrb.w	r6, [r9, r6]
 801244e:	7316      	strb	r6, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012450:	185e      	adds	r6, r3, r1
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012452:	1a59      	subs	r1, r3, r1
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012454:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8012456:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 801245a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801245e:	f819 6006 	ldrb.w	r6, [r9, r6]
 8012462:	7096      	strb	r6, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012464:	f819 1001 	ldrb.w	r1, [r9, r1]
 8012468:	72d1      	strb	r1, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801246a:	eb03 010e 	add.w	r1, r3, lr
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801246e:	eba3 030e 	sub.w	r3, r3, lr
			     & RANGE_MASK];
 8012472:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 8012476:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801247a:	f819 1001 	ldrb.w	r1, [r9, r1]
 801247e:	70d1      	strb	r1, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012480:	f819 3003 	ldrb.w	r3, [r9, r3]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012484:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012486:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012488:	9b07      	ldr	r3, [sp, #28]
 801248a:	442b      	add	r3, r5
			     & RANGE_MASK];
 801248c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012490:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012494:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012496:	9b07      	ldr	r3, [sp, #28]
 8012498:	1b5b      	subs	r3, r3, r5
 801249a:	e00b      	b.n	80124b4 <jpeg_idct_14x14+0x3f4>
 801249c:	ffffc8fc 	.word	0xffffc8fc
 80124a0:	ffffdbf0 	.word	0xffffdbf0
 80124a4:	ffffde0b 	.word	0xffffde0b
 80124a8:	ffffb409 	.word	0xffffb409
 80124ac:	ffffc9e6 	.word	0xffffc9e6
 80124b0:	fffff26e 	.word	0xfffff26e
			     & RANGE_MASK];
 80124b4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80124b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80124bc:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80124be:	9b05      	ldr	r3, [sp, #20]
 80124c0:	4423      	add	r3, r4
			     & RANGE_MASK];
 80124c2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80124c6:	f819 3003 	ldrb.w	r3, [r9, r3]
 80124ca:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80124cc:	9b05      	ldr	r3, [sp, #20]
 80124ce:	1b1b      	subs	r3, r3, r4
			     & RANGE_MASK];
 80124d0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80124d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80124d8:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80124da:	9b03      	ldr	r3, [sp, #12]
 80124dc:	440b      	add	r3, r1
			     & RANGE_MASK];
 80124de:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80124e2:	f819 3003 	ldrb.w	r3, [r9, r3]
 80124e6:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80124e8:	9b03      	ldr	r3, [sp, #12]
 80124ea:	1a5b      	subs	r3, r3, r1
			     & RANGE_MASK];
 80124ec:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80124f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80124f4:	71d3      	strb	r3, [r2, #7]
  for (ctr = 0; ctr < 14; ctr++) {
 80124f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124f8:	9a00      	ldr	r2, [sp, #0]
 80124fa:	4293      	cmp	r3, r2
 80124fc:	f47f aeed 	bne.w	80122da <jpeg_idct_14x14+0x21a>
  }
}
 8012500:	b07d      	add	sp, #500	; 0x1f4
 8012502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012506:	bf00      	nop

08012508 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801250c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8012510:	f1a2 0a02 	sub.w	sl, r2, #2
 8012514:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012516:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801251a:	6d48      	ldr	r0, [r1, #84]	; 0x54
 801251c:	f103 0980 	add.w	r9, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012520:	1f03      	subs	r3, r0, #4
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	f102 030e 	add.w	r3, r2, #14
 8012528:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801252a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801252c:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801252e:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012532:	f93a 5f02 	ldrsh.w	r5, [sl, #2]!
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012536:	f241 2b68 	movw	fp, #4712	; 0x1268
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801253a:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801253e:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012542:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012546:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012548:	9100      	str	r1, [sp, #0]
 801254a:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801254c:	9a00      	ldr	r2, [sp, #0]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801254e:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012550:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8012552:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012554:	f9ba 1020 	ldrsh.w	r1, [sl, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012558:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801255c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012560:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012562:	f9ba 2040 	ldrsh.w	r2, [sl, #64]	; 0x40
 8012566:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012568:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801256c:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012570:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012572:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012576:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801257a:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801257e:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8012580:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8012584:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012586:	eba4 040c 	sub.w	r4, r4, ip
 801258a:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 801258e:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8012590:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012592:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012596:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012598:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801259c:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 80125a0:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80125a4:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80125a8:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 80125aa:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80125ae:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80125b0:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 80125b4:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80125b6:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80125b8:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80125bc:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80125c0:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80125c2:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 80125c4:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80125c8:	443c      	add	r4, r7
 80125ca:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 80125ce:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80125d2:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80125d6:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 80125d8:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80125da:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80125dc:	f641 114c 	movw	r1, #6476	; 0x194c
 80125e0:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80125e2:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 80125e6:	440f      	add	r7, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80125e8:	436a      	muls	r2, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 80125ea:	1a76      	subs	r6, r6, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 80125ec:	18b8      	adds	r0, r7, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80125ee:	18b2      	adds	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80125f0:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 80125f4:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80125f6:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80125f8:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 80125fc:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80125fe:	f9ba 5030 	ldrsh.w	r5, [sl, #48]	; 0x30
    tmp11 += tmp11;
 8012602:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012604:	9908      	ldr	r1, [sp, #32]
 8012606:	9a01      	ldr	r2, [sp, #4]
 8012608:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801260a:	9900      	ldr	r1, [sp, #0]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801260c:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801260e:	6a09      	ldr	r1, [r1, #32]
 8012610:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
 8012614:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012616:	9900      	ldr	r1, [sp, #0]
 8012618:	6e09      	ldr	r1, [r1, #96]	; 0x60
 801261a:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801261c:	9900      	ldr	r1, [sp, #0]
 801261e:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012622:	f9ba e070 	ldrsh.w	lr, [sl, #112]	; 0x70
 8012626:	9800      	ldr	r0, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012628:	434e      	muls	r6, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801262a:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801262e:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012632:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012634:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp13 = z2 - z4;
 8012638:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801263c:	1917      	adds	r7, r2, r4
 801263e:	fb0c f707 	mul.w	r7, ip, r7
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012642:	f241 0c71 	movw	ip, #4209	; 0x1071
 8012646:	fb0c 7002 	mla	r0, ip, r2, r7
    z2 = z1 - z4;
 801264a:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801264e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012650:	48cd      	ldr	r0, [pc, #820]	; (8012988 <jpeg_idct_15x15+0x480>)
 8012652:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012656:	48cd      	ldr	r0, [pc, #820]	; (801298c <jpeg_idct_15x15+0x484>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012658:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801265c:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801265e:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012662:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012664:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012668:	48c9      	ldr	r0, [pc, #804]	; (8012990 <jpeg_idct_15x15+0x488>)
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801266a:	eb02 010e 	add.w	r1, r2, lr
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801266e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012672:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012674:	f200 7071 	addw	r0, r0, #1905	; 0x771
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012678:	fb0b f101 	mul.w	r1, fp, r1
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801267c:	f640 7b39 	movw	fp, #3897	; 0xf39
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012680:	fb00 4402 	mla	r4, r0, r2, r4
 8012684:	980b      	ldr	r0, [sp, #44]	; 0x2c
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012686:	fb0b 1202 	mla	r2, fp, r2, r1
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801268a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801268e:	4404      	add	r4, r0
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012690:	ebac 0c06 	sub.w	ip, ip, r6
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012694:	1b92      	subs	r2, r2, r6
 8012696:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012698:	48be      	ldr	r0, [pc, #760]	; (8012994 <jpeg_idct_15x15+0x48c>)
 801269a:	fb00 110e 	mla	r1, r0, lr, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801269e:	9802      	ldr	r0, [sp, #8]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80126a0:	4431      	add	r1, r6
 80126a2:	4429      	add	r1, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80126a4:	eb00 0508 	add.w	r5, r0, r8
 80126a8:	12ed      	asrs	r5, r5, #11
 80126aa:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80126ae:	eba0 0508 	sub.w	r5, r0, r8
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80126b2:	9806      	ldr	r0, [sp, #24]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80126b4:	12ed      	asrs	r5, r5, #11
 80126b6:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80126ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80126bc:	1945      	adds	r5, r0, r5
 80126be:	12ed      	asrs	r5, r5, #11
 80126c0:	61dd      	str	r5, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80126c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80126c4:	1b45      	subs	r5, r0, r5
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80126c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80126c8:	12ed      	asrs	r5, r5, #11
 80126ca:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80126ce:	eb00 050c 	add.w	r5, r0, ip
 80126d2:	12ed      	asrs	r5, r5, #11
 80126d4:	63dd      	str	r5, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80126d6:	eba0 050c 	sub.w	r5, r0, ip
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126da:	9803      	ldr	r0, [sp, #12]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80126dc:	12ed      	asrs	r5, r5, #11
 80126de:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126e2:	1885      	adds	r5, r0, r2
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80126e4:	1a82      	subs	r2, r0, r2
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126e6:	12ed      	asrs	r5, r5, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80126e8:	12d2      	asrs	r2, r2, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80126ea:	65dd      	str	r5, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80126ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80126f0:	9a07      	ldr	r2, [sp, #28]
 80126f2:	443a      	add	r2, r7
 80126f4:	12d2      	asrs	r2, r2, #11
 80126f6:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80126f8:	9a07      	ldr	r2, [sp, #28]
 80126fa:	1bd2      	subs	r2, r2, r7
 80126fc:	12d2      	asrs	r2, r2, #11
 80126fe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012702:	9a04      	ldr	r2, [sp, #16]
 8012704:	440a      	add	r2, r1
 8012706:	12d2      	asrs	r2, r2, #11
 8012708:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801270c:	9a04      	ldr	r2, [sp, #16]
 801270e:	1a52      	subs	r2, r2, r1
 8012710:	12d2      	asrs	r2, r2, #11
 8012712:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012716:	9a05      	ldr	r2, [sp, #20]
 8012718:	4422      	add	r2, r4
 801271a:	12d2      	asrs	r2, r2, #11
 801271c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012720:	9a05      	ldr	r2, [sp, #20]
 8012722:	1b12      	subs	r2, r2, r4
 8012724:	12d2      	asrs	r2, r2, #11
 8012726:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801272a:	9a01      	ldr	r2, [sp, #4]
 801272c:	9908      	ldr	r1, [sp, #32]
 801272e:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012732:	12d2      	asrs	r2, r2, #11
 8012734:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012738:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801273a:	4552      	cmp	r2, sl
 801273c:	f47f aef6 	bne.w	801252c <jpeg_idct_15x15+0x24>
 8012740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012742:	3b04      	subs	r3, #4
 8012744:	9301      	str	r3, [sp, #4]
 8012746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012748:	3338      	adds	r3, #56	; 0x38
 801274a:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 801274c:	ab0e      	add	r3, sp, #56	; 0x38
 801274e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012750:	9b01      	ldr	r3, [sp, #4]

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012752:	f640 51fc 	movw	r1, #3580	; 0xdfc
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012756:	f44f 74bb 	mov.w	r4, #374	; 0x176
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801275a:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 801275e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[5];
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012762:	f242 7a31 	movw	sl, #10033	; 0x2731
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012766:	f241 0871 	movw	r8, #4209	; 0x1071
    outptr = output_buf[ctr] + output_col;
 801276a:	920c      	str	r2, [sp, #48]	; 0x30
 801276c:	9301      	str	r3, [sp, #4]
 801276e:	4613      	mov	r3, r2
 8012770:	9a90      	ldr	r2, [sp, #576]	; 0x240
 8012772:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012774:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[2];
 8012776:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8012778:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801277a:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 801277c:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801277e:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012780:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012784:	f242 419d 	movw	r1, #9373	; 0x249d
 8012788:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 801278a:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 801278e:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012792:	eba2 020c 	sub.w	r2, r2, ip
 8012796:	0052      	lsls	r2, r2, #1
 8012798:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 801279c:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 801279e:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80127a0:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 80127a4:	9202      	str	r2, [sp, #8]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80127a6:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80127aa:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80127ae:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 80127b0:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80127b4:	1a8a      	subs	r2, r1, r2
 80127b6:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 80127b8:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80127bc:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80127c0:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 80127c2:	9403      	str	r4, [sp, #12]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80127c4:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80127c8:	9204      	str	r2, [sp, #16]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80127ca:	f241 1282 	movw	r2, #4482	; 0x1182
 80127ce:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 80127d0:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80127d4:	440a      	add	r2, r1
 80127d6:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 80127da:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80127de:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 80127e0:	9405      	str	r4, [sp, #20]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80127e2:	4c69      	ldr	r4, [pc, #420]	; (8012988 <jpeg_idct_15x15+0x480>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80127e4:	9206      	str	r2, [sp, #24]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80127e6:	f641 124c 	movw	r2, #6476	; 0x194c
 80127ea:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80127ec:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp24 = tmp13 - tmp10 + tmp11;
 80127f0:	1a3f      	subs	r7, r7, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80127f2:	4372      	muls	r2, r6
    tmp21 = tmp12 + tmp10 + tmp11;
 80127f4:	4401      	add	r1, r0
 80127f6:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80127f8:	18ba      	adds	r2, r7, r2
 80127fa:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80127fc:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8012800:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012802:	f641 269a 	movw	r6, #6810	; 0x1a9a
    tmp11 += tmp11;
 8012806:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012808:	9808      	ldr	r0, [sp, #32]
 801280a:	9a02      	ldr	r2, [sp, #8]
 801280c:	eb02 0b00 	add.w	fp, r2, r0
    z2 = (INT32) wsptr[3];
 8012810:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 8012812:	9a00      	ldr	r2, [sp, #0]
    z2 = (INT32) wsptr[3];
 8012814:	68c7      	ldr	r7, [r0, #12]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012816:	6940      	ldr	r0, [r0, #20]
    z1 = (INT32) wsptr[1];
 8012818:	6852      	ldr	r2, [r2, #4]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801281a:	fb0a fc00 	mul.w	ip, sl, r0
    z4 = (INT32) wsptr[7];
 801281e:	9800      	ldr	r0, [sp, #0]
 8012820:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 8012824:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012828:	1950      	adds	r0, r2, r5
 801282a:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801282c:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012830:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012834:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8012838:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801283c:	4c56      	ldr	r4, [pc, #344]	; (8012998 <jpeg_idct_15x15+0x490>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801283e:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012840:	4852      	ldr	r0, [pc, #328]	; (801298c <jpeg_idct_15x15+0x484>)
 8012842:	4378      	muls	r0, r7
 8012844:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012846:	4852      	ldr	r0, [pc, #328]	; (8012990 <jpeg_idct_15x15+0x488>)
 8012848:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801284a:	f642 5002 	movw	r0, #11522	; 0x2d02
 801284e:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012852:	fb0a f505 	mul.w	r5, sl, r5
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012856:	f241 2a68 	movw	sl, #4712	; 0x1268
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801285a:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801285e:	fb04 0002 	mla	r0, r4, r2, r0
 8012862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012864:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012866:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801286a:	4420      	add	r0, r4
 801286c:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801286e:	eb02 000e 	add.w	r0, r2, lr
 8012872:	fb0a f000 	mul.w	r0, sl, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012876:	f640 7a39 	movw	sl, #3897	; 0xf39
 801287a:	fb0a 0202 	mla	r2, sl, r2, r0
 801287e:	eba2 020c 	sub.w	r2, r2, ip
 8012882:	eb02 0a04 	add.w	sl, r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012886:	4c43      	ldr	r4, [pc, #268]	; (8012994 <jpeg_idct_15x15+0x48c>)
 8012888:	fb04 000e 	mla	r0, r4, lr, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801288c:	9c03      	ldr	r4, [sp, #12]
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801288e:	4460      	add	r0, ip
 8012890:	4438      	add	r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012892:	19a7      	adds	r7, r4, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012894:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012898:	f819 7007 	ldrb.w	r7, [r9, r7]
 801289c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801289e:	9a90      	ldr	r2, [sp, #576]	; 0x240
 80128a0:	54a7      	strb	r7, [r4, r2]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80128a2:	9a03      	ldr	r2, [sp, #12]
 80128a4:	1b96      	subs	r6, r2, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128a6:	9a04      	ldr	r2, [sp, #16]
			     & RANGE_MASK];
 80128a8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80128ac:	f819 6006 	ldrb.w	r6, [r9, r6]
 80128b0:	739e      	strb	r6, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80128b2:	eb01 0608 	add.w	r6, r1, r8
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80128b6:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 80128ba:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 80128be:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80128c2:	f819 6006 	ldrb.w	r6, [r9, r6]
 80128c6:	705e      	strb	r6, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80128c8:	f819 1001 	ldrb.w	r1, [r9, r1]
 80128cc:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80128ce:	eb0b 0105 	add.w	r1, fp, r5
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80128d2:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 80128d6:	f3c1 4189 	ubfx	r1, r1, #18, #10
			     & RANGE_MASK];
 80128da:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80128de:	f819 1001 	ldrb.w	r1, [r9, r1]
 80128e2:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80128e4:	f819 100b 	ldrb.w	r1, [r9, fp]
 80128e8:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128ea:	eb02 010a 	add.w	r1, r2, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80128ee:	eba2 020a 	sub.w	r2, r2, sl
			     & RANGE_MASK];
 80128f2:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128f6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80128fa:	f819 1001 	ldrb.w	r1, [r9, r1]
 80128fe:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012900:	f819 2002 	ldrb.w	r2, [r9, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012904:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012906:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012908:	9a07      	ldr	r2, [sp, #28]
 801290a:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801290c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012910:	f819 2002 	ldrb.w	r2, [r9, r2]
 8012914:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012916:	9a07      	ldr	r2, [sp, #28]
 8012918:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801291a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801291e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8012922:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012924:	9a05      	ldr	r2, [sp, #20]
 8012926:	4402      	add	r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012928:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801292c:	f819 2002 	ldrb.w	r2, [r9, r2]
 8012930:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012932:	9a05      	ldr	r2, [sp, #20]
 8012934:	1a12      	subs	r2, r2, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012936:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801293a:	f819 2002 	ldrb.w	r2, [r9, r2]
 801293e:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012940:	9a06      	ldr	r2, [sp, #24]
 8012942:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012944:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012946:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801294a:	f819 2002 	ldrb.w	r2, [r9, r2]
 801294e:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012950:	9a06      	ldr	r2, [sp, #24]
 8012952:	1a52      	subs	r2, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012954:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012956:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801295a:	f819 2002 	ldrb.w	r2, [r9, r2]
 801295e:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012960:	9a02      	ldr	r2, [sp, #8]
 8012962:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012966:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 801296a:	f819 2002 	ldrb.w	r2, [r9, r2]
 801296e:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 8012970:	9b00      	ldr	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8012972:	9a01      	ldr	r2, [sp, #4]
    wsptr += 8;		/* advance pointer to next row */
 8012974:	3320      	adds	r3, #32
 8012976:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8012978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801297a:	4293      	cmp	r3, r2
 801297c:	f47f aee8 	bne.w	8012750 <jpeg_idct_15x15+0x248>
  }
}
 8012980:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8012984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012988:	ffffba5c 	.word	0xffffba5c
 801298c:	ffffe566 	.word	0xffffe566
 8012990:	ffffd4f6 	.word	0xffffd4f6
 8012994:	ffffe42f 	.word	0xffffe42f
 8012998:	ffffdc67 	.word	0xffffdc67

0801299c <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a0:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80129a4:	f1a2 0b02 	sub.w	fp, r2, #2
 80129a8:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80129aa:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80129ae:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129b2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80129b4:	f1a3 0a04 	sub.w	sl, r3, #4
 80129b8:	f102 030e 	add.w	r3, r2, #14
 80129bc:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 80129be:	ab0e      	add	r3, sp, #56	; 0x38
 80129c0:	9300      	str	r3, [sp, #0]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129c2:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129c6:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129ca:	f85a 1f04 	ldr.w	r1, [sl, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80129ce:	f642 4563 	movw	r5, #11363	; 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129d2:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80129d6:	f245 2e03 	movw	lr, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80129da:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129dc:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80129e0:	f9bb c060 	ldrsh.w	ip, [fp, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80129e4:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 80129e6:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129e8:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80129ec:	4bcd      	ldr	r3, [pc, #820]	; (8012d24 <jpeg_idct_16x16+0x388>)
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 80129ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129f2:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129f4:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80129f6:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 80129fa:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 80129fc:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80129fe:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8012a00:	1a52      	subs	r2, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a02:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 8012a06:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a0a:	f8da 10c0 	ldr.w	r1, [sl, #192]	; 0xc0
 8012a0e:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012a12:	f640 01d4 	movw	r1, #2260	; 0x8d4
    z3 = z1 - z2;
 8012a16:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012a1a:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012a1c:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a1e:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012a22:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012a26:	fb03 4409 	mla	r4, r3, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a2a:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a2e:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012a32:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a36:	fb03 110c 	mla	r1, r3, ip, r1
    tmp20 = tmp10 + tmp0;
 8012a3a:	eb07 030e 	add.w	r3, r7, lr
 8012a3e:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012a40:	eba7 030e 	sub.w	r3, r7, lr
 8012a44:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012a46:	1973      	adds	r3, r6, r5
 8012a48:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012a4a:	1b73      	subs	r3, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a4c:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8012a50:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012a52:	1913      	adds	r3, r2, r4
 8012a54:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012a56:	1b13      	subs	r3, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a58:	f8da 2020 	ldr.w	r2, [sl, #32]
    tmp25 = tmp13 - tmp2;
 8012a5c:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012a5e:	1843      	adds	r3, r0, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a60:	f8da 40e0 	ldr.w	r4, [sl, #224]	; 0xe0
    tmp23 = tmp11 + tmp3;
 8012a64:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012a66:	1a43      	subs	r3, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a68:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a6c:	f8da 0060 	ldr.w	r0, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012a70:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a72:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
    tmp24 = tmp11 - tmp3;
 8012a76:	9308      	str	r3, [sp, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012a78:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012a7a:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8012a7e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a80:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a84:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012a86:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a88:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 8012a8c:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a8e:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012a90:	eb01 0e00 	add.w	lr, r1, r0
 8012a94:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012a98:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012a9c:	fb09 f907 	mul.w	r9, r9, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012aa0:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012aa4:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012aa8:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012aac:	f241 5455 	movw	r4, #5461	; 0x1555
 8012ab0:	fb04 f307 	mul.w	r3, r4, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012ab4:	1a8c      	subs	r4, r1, r2
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ab6:	eb06 0709 	add.w	r7, r6, r9
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012aba:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012abc:	f640 5323 	movw	r3, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ac0:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012ac2:	435c      	muls	r4, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012ac4:	4b98      	ldr	r3, [pc, #608]	; (8012d28 <jpeg_idct_16x16+0x38c>)
 8012ac6:	fb03 7701 	mla	r7, r3, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012acc:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012ace:	eb0c 0403 	add.w	r4, ip, r3
 8012ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ad4:	441c      	add	r4, r3
 8012ad6:	4b95      	ldr	r3, [pc, #596]	; (8012d2c <jpeg_idct_16x16+0x390>)
 8012ad8:	fb03 4101 	mla	r1, r3, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012adc:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012ade:	4b94      	ldr	r3, [pc, #592]	; (8012d30 <jpeg_idct_16x16+0x394>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012ae0:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012ae2:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8012ae6:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012ae8:	f240 214d 	movw	r1, #589	; 0x24d
 8012aec:	fb01 4102 	mla	r1, r1, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012af0:	fb03 4405 	mla	r4, r3, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012af4:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012af8:	440e      	add	r6, r1
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012afa:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012afc:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012afe:	f642 5909 	movw	r9, #11529	; 0x2d09
 8012b02:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012b06:	fb03 1905 	mla	r9, r3, r5, r1
 8012b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b0c:	4499      	add	r9, r3
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012b0e:	f643 731a 	movw	r3, #16154	; 0x3f1a
 8012b12:	fb03 1102 	mla	r1, r3, r2, r1
 8012b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    z2    += z4;
 8012b18:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012b1a:	18cb      	adds	r3, r1, r3
 8012b1c:	9309      	str	r3, [sp, #36]	; 0x24
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012b1e:	4b85      	ldr	r3, [pc, #532]	; (8012d34 <jpeg_idct_16x16+0x398>)
 8012b20:	fb03 f102 	mul.w	r1, r3, r2
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b24:	f242 2318 	movw	r3, #8728	; 0x2218
    tmp1  += z1;
 8012b28:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b2a:	fb03 1100 	mla	r1, r3, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012b2e:	4b82      	ldr	r3, [pc, #520]	; (8012d38 <jpeg_idct_16x16+0x39c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b30:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b32:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012b36:	435a      	muls	r2, r3
    tmp12 += z2;
 8012b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b3a:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 8012b3e:	441a      	add	r2, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b40:	4b7e      	ldr	r3, [pc, #504]	; (8012d3c <jpeg_idct_16x16+0x3a0>)
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b42:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b44:	eb05 0c00 	add.w	ip, r5, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b48:	1b40      	subs	r0, r0, r5
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b4a:	fb03 fc0c 	mul.w	ip, r3, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b4e:	f640 5323 	movw	r3, #3363	; 0xd23
 8012b52:	4358      	muls	r0, r3
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b54:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 8012b56:	4464      	add	r4, ip
    tmp3  += z2;
 8012b58:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b5a:	19dd      	adds	r5, r3, r7
 8012b5c:	9b00      	ldr	r3, [sp, #0]
    tmp10 += z2;
 8012b5e:	4486      	add	lr, r0
    tmp11 += z2;
 8012b60:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012b62:	12ed      	asrs	r5, r5, #11
 8012b64:	601d      	str	r5, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012b66:	9b01      	ldr	r3, [sp, #4]
 8012b68:	1bdd      	subs	r5, r3, r7
 8012b6a:	9b00      	ldr	r3, [sp, #0]
 8012b6c:	12ed      	asrs	r5, r5, #11
 8012b6e:	f8c3 51e0 	str.w	r5, [r3, #480]	; 0x1e0
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012b72:	9b03      	ldr	r3, [sp, #12]
 8012b74:	199d      	adds	r5, r3, r6
 8012b76:	9b00      	ldr	r3, [sp, #0]
 8012b78:	12ed      	asrs	r5, r5, #11
 8012b7a:	621d      	str	r5, [r3, #32]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012b7c:	9b03      	ldr	r3, [sp, #12]
 8012b7e:	1b9d      	subs	r5, r3, r6
 8012b80:	9b00      	ldr	r3, [sp, #0]
 8012b82:	12ed      	asrs	r5, r5, #11
 8012b84:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012b88:	9b05      	ldr	r3, [sp, #20]
 8012b8a:	191d      	adds	r5, r3, r4
 8012b8c:	9b00      	ldr	r3, [sp, #0]
 8012b8e:	12ed      	asrs	r5, r5, #11
 8012b90:	641d      	str	r5, [r3, #64]	; 0x40
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012b92:	9b05      	ldr	r3, [sp, #20]
 8012b94:	1b1c      	subs	r4, r3, r4
 8012b96:	9b00      	ldr	r3, [sp, #0]
 8012b98:	12e4      	asrs	r4, r4, #11
 8012b9a:	f8c3 41a0 	str.w	r4, [r3, #416]	; 0x1a0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012b9e:	9b07      	ldr	r3, [sp, #28]
 8012ba0:	185c      	adds	r4, r3, r1
 8012ba2:	9b00      	ldr	r3, [sp, #0]
 8012ba4:	12e4      	asrs	r4, r4, #11
 8012ba6:	661c      	str	r4, [r3, #96]	; 0x60
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8012ba8:	9b07      	ldr	r3, [sp, #28]
 8012baa:	1a59      	subs	r1, r3, r1
 8012bac:	9b00      	ldr	r3, [sp, #0]
 8012bae:	12c9      	asrs	r1, r1, #11
 8012bb0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012bb4:	9b08      	ldr	r3, [sp, #32]
 8012bb6:	eb03 010e 	add.w	r1, r3, lr
 8012bba:	9b00      	ldr	r3, [sp, #0]
 8012bbc:	12c9      	asrs	r1, r1, #11
 8012bbe:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012bc2:	9b08      	ldr	r3, [sp, #32]
 8012bc4:	eba3 010e 	sub.w	r1, r3, lr
 8012bc8:	9b00      	ldr	r3, [sp, #0]
 8012bca:	12c9      	asrs	r1, r1, #11
 8012bcc:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8012bd0:	9b06      	ldr	r3, [sp, #24]
 8012bd2:	1819      	adds	r1, r3, r0
 8012bd4:	9b00      	ldr	r3, [sp, #0]
 8012bd6:	12c9      	asrs	r1, r1, #11
 8012bd8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012bdc:	9b06      	ldr	r3, [sp, #24]
 8012bde:	1a19      	subs	r1, r3, r0
 8012be0:	9b00      	ldr	r3, [sp, #0]
 8012be2:	12c9      	asrs	r1, r1, #11
 8012be4:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012be8:	9b04      	ldr	r3, [sp, #16]
 8012bea:	1899      	adds	r1, r3, r2
 8012bec:	9b00      	ldr	r3, [sp, #0]
 8012bee:	12c9      	asrs	r1, r1, #11
 8012bf0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012bf4:	9b04      	ldr	r3, [sp, #16]
 8012bf6:	1a9a      	subs	r2, r3, r2
 8012bf8:	9b00      	ldr	r3, [sp, #0]
 8012bfa:	12d2      	asrs	r2, r2, #11
 8012bfc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012c00:	9b02      	ldr	r3, [sp, #8]
 8012c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c04:	189a      	adds	r2, r3, r2
 8012c06:	9b00      	ldr	r3, [sp, #0]
 8012c08:	12d2      	asrs	r2, r2, #11
 8012c0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012c0e:	9b02      	ldr	r3, [sp, #8]
 8012c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c12:	1a9a      	subs	r2, r3, r2
 8012c14:	9b00      	ldr	r3, [sp, #0]
 8012c16:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012c18:	3304      	adds	r3, #4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012c1a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012c1e:	9300      	str	r3, [sp, #0]
 8012c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c22:	455b      	cmp	r3, fp
 8012c24:	f47f aecd 	bne.w	80129c2 <jpeg_idct_16x16+0x26>
 8012c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c2a:	3b04      	subs	r3, #4
 8012c2c:	9301      	str	r3, [sp, #4]
 8012c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c30:	333c      	adds	r3, #60	; 0x3c
 8012c32:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8012c34:	ab0e      	add	r3, sp, #56	; 0x38
 8012c36:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012c38:	9b01      	ldr	r3, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012c3a:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012c3e:	f642 14cf 	movw	r4, #10703	; 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012c42:	f642 4663 	movw	r6, #11363	; 0x2c63
    outptr = output_buf[ctr] + output_col;
 8012c46:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012c4a:	f245 2703 	movw	r7, #20995	; 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012c4e:	4d35      	ldr	r5, [pc, #212]	; (8012d24 <jpeg_idct_16x16+0x388>)
    outptr = output_buf[ctr] + output_col;
 8012c50:	920c      	str	r2, [sp, #48]	; 0x30
 8012c52:	9301      	str	r3, [sp, #4]
 8012c54:	4613      	mov	r3, r2
 8012c56:	9a98      	ldr	r2, [sp, #608]	; 0x260
 8012c58:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c5a:	9b00      	ldr	r3, [sp, #0]
    z1 = (INT32) wsptr[4];
 8012c5c:	9a00      	ldr	r2, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c5e:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8012c60:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c62:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012c64:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012c66:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012c68:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp10 = tmp0 + tmp1;
 8012c6c:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8012c70:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8012c74:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8012c78:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 8012c7c:	9b00      	ldr	r3, [sp, #0]
 8012c7e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 8012c82:	f8d3 a018 	ldr.w	sl, [r3, #24]
    z3 = z1 - z2;
 8012c86:	eba9 030a 	sub.w	r3, r9, sl
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012c8a:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012c8c:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012c8e:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012c92:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012c96:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012c9a:	f205 25ee 	addw	r5, r5, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012c9e:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012ca2:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012ca6:	fb05 000a 	mla	r0, r5, sl, r0
    tmp20 = tmp10 + tmp0;
 8012caa:	eb0e 0507 	add.w	r5, lr, r7
 8012cae:	9502      	str	r5, [sp, #8]
    tmp27 = tmp10 - tmp0;
 8012cb0:	ebae 0507 	sub.w	r5, lr, r7
 8012cb4:	9503      	str	r5, [sp, #12]
    tmp21 = tmp12 + tmp1;
 8012cb6:	eb0c 0506 	add.w	r5, ip, r6
 8012cba:	9504      	str	r5, [sp, #16]
    tmp26 = tmp12 - tmp1;
 8012cbc:	ebac 0506 	sub.w	r5, ip, r6
 8012cc0:	9505      	str	r5, [sp, #20]
    tmp22 = tmp13 + tmp2;
 8012cc2:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8012cc4:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 8012cc6:	9506      	str	r5, [sp, #24]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012cc8:	f640 5523 	movw	r5, #3363	; 0xd23
    tmp25 = tmp13 - tmp2;
 8012ccc:	9307      	str	r3, [sp, #28]
    tmp23 = tmp11 + tmp3;
 8012cce:	1823      	adds	r3, r4, r0
 8012cd0:	9308      	str	r3, [sp, #32]
    tmp24 = tmp11 - tmp3;
 8012cd2:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 8012cd4:	9800      	ldr	r0, [sp, #0]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012cd6:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp24 = tmp11 - tmp3;
 8012cda:	9309      	str	r3, [sp, #36]	; 0x24
    z1 = (INT32) wsptr[1];
 8012cdc:	9b00      	ldr	r3, [sp, #0]
    z3 = (INT32) wsptr[5];
 8012cde:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 8012ce0:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 8012ce2:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 8012ce4:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8012ce6:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012cea:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012cec:	eba2 0b03 	sub.w	fp, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012cf0:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012cf4:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012cf8:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012cfa:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012cfe:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012d02:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012d06:	f641 44b6 	movw	r4, #7350	; 0x1cb6
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012d0a:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012d0e:	4d06      	ldr	r5, [pc, #24]	; (8012d28 <jpeg_idct_16x16+0x38c>)
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012d10:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012d14:	f241 5455 	movw	r4, #5461	; 0x1555
 8012d18:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012d1c:	eb06 0409 	add.w	r4, r6, r9
 8012d20:	4474      	add	r4, lr
 8012d22:	e00d      	b.n	8012d40 <jpeg_idct_16x16+0x3a4>
 8012d24:	ffffecc2 	.word	0xffffecc2
 8012d28:	ffffb6d6 	.word	0xffffb6d6
 8012d2c:	ffffc542 	.word	0xffffc542
 8012d30:	ffffdbfa 	.word	0xffffdbfa
 8012d34:	ffffeaab 	.word	0xffffeaab
 8012d38:	ffffd817 	.word	0xffffd817
 8012d3c:	ffffd4b2 	.word	0xffffd4b2
 8012d40:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012d44:	f605 656c 	addw	r5, r5, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012d48:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012d4a:	eb0c 040a 	add.w	r4, ip, sl
 8012d4e:	445c      	add	r4, fp
 8012d50:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012d54:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012d56:	4d5e      	ldr	r5, [pc, #376]	; (8012ed0 <jpeg_idct_16x16+0x534>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012d58:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012d5a:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012d5e:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012d60:	f240 224d 	movw	r2, #589	; 0x24d
 8012d64:	fb02 4203 	mla	r2, r2, r3, r4
 8012d68:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012d6a:	4a5a      	ldr	r2, [pc, #360]	; (8012ed4 <jpeg_idct_16x16+0x538>)
 8012d6c:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012d70:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012d72:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012d74:	f642 5909 	movw	r9, #11529	; 0x2d09
 8012d78:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012d7c:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
    z2    += z4;
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012d80:	f6a5 7563 	subw	r5, r5, #3939	; 0xf63
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012d84:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012d86:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012d8a:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 8012d8e:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012d90:	eb02 0a0b 	add.w	sl, r2, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012d94:	4a50      	ldr	r2, [pc, #320]	; (8012ed8 <jpeg_idct_16x16+0x53c>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012d96:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012d9a:	435a      	muls	r2, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012d9c:	436b      	muls	r3, r5
    tmp1  += z1;
 8012d9e:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012da0:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
    tmp12 += z2;
 8012da4:	449a      	add	sl, r3
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012da6:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012da8:	f246 4e85 	movw	lr, #25733	; 0x6485
 8012dac:	fb0e 3e00 	mla	lr, lr, r0, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012db0:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012db4:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012db6:	441d      	add	r5, r3
 8012db8:	eb07 0c00 	add.w	ip, r7, r0
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012dbc:	1bc0      	subs	r0, r0, r7
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012dbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012dc0:	fb05 fc0c 	mul.w	ip, r5, ip
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012dc4:	f640 5523 	movw	r5, #3363	; 0xd23
 8012dc8:	4368      	muls	r0, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012dca:	9d02      	ldr	r5, [sp, #8]
    tmp2  += z2;
 8012dcc:	4464      	add	r4, ip
    tmp3  += z2;
 8012dce:	4462      	add	r2, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012dd0:	19ef      	adds	r7, r5, r7
 8012dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    tmp10 += z2;
 8012dd4:	4486      	add	lr, r0
    tmp11 += z2;
 8012dd6:	4448      	add	r0, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012dd8:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012ddc:	f818 7007 	ldrb.w	r7, [r8, r7]
 8012de0:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8012de2:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012de8:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012dea:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012dec:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012df0:	f818 7007 	ldrb.w	r7, [r8, r7]
 8012df4:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012df6:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012df8:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012dfa:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012dfc:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8012e00:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012e04:	f818 7007 	ldrb.w	r7, [r8, r7]
 8012e08:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012e0a:	f818 6006 	ldrb.w	r6, [r8, r6]
 8012e0e:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012e10:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012e12:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012e14:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012e16:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8012e1a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012e1e:	f818 6006 	ldrb.w	r6, [r8, r6]
 8012e22:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012e24:	f818 4004 	ldrb.w	r4, [r8, r4]
 8012e28:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012e2a:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012e2c:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8012e30:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 8012e34:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012e38:	f818 4004 	ldrb.w	r4, [r8, r4]
 8012e3c:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012e3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e42:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012e44:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e48:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012e4c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e50:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012e52:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012e56:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012e58:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012e5c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e60:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012e62:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e64:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012e68:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e6c:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012e6e:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012e70:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012e72:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012e76:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e7a:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012e7c:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012e80:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012e84:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e88:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012e8c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012e90:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012e92:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012e98:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012e9a:	9b03      	ldr	r3, [sp, #12]
 8012e9c:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e9e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012ea2:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012ea6:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012ea8:	9b03      	ldr	r3, [sp, #12]
 8012eaa:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8012eac:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012eae:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012eb2:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012eb6:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 8012eb8:	9b00      	ldr	r3, [sp, #0]
 8012eba:	3320      	adds	r3, #32
 8012ebc:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 16; ctr++) {
 8012ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	f47f aeb9 	bne.w	8012c38 <jpeg_idct_16x16+0x29c>
  }
}
 8012ec6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ece:	bf00      	nop
 8012ed0:	ffffe77a 	.word	0xffffe77a
 8012ed4:	ffffdbfa 	.word	0xffffdbfa
 8012ed8:	ffffeaab 	.word	0xffffeaab

08012edc <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee0:	b0d1      	sub	sp, #324	; 0x144
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012ee2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 8012ee4:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8012ee6:	a910      	add	r1, sp, #64	; 0x40
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012ee8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012eec:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012ef0:	1e93      	subs	r3, r2, #2
 8012ef2:	9301      	str	r3, [sp, #4]
 8012ef4:	f105 0320 	add.w	r3, r5, #32
 8012ef8:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012efa:	9b01      	ldr	r3, [sp, #4]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8012efc:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012efe:	f855 0b04 	ldr.w	r0, [r5], #4
 8012f02:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012f04:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8012f08:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8012f0c:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 8012f10:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012f14:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 8012f18:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8012f1c:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012f20:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8012f24:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012f26:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012f2a:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012f2c:	ea4e 0000 	orr.w	r0, lr, r0
 8012f30:	4330      	orrs	r0, r6
 8012f32:	ea48 0000 	orr.w	r0, r8, r0
 8012f36:	4320      	orrs	r0, r4
 8012f38:	ea59 0000 	orrs.w	r0, r9, r0
 8012f3c:	f040 8152 	bne.w	80131e4 <jpeg_idct_16x8+0x308>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012f40:	009b      	lsls	r3, r3, #2
      wsptr[DCTSIZE*0] = dcval;
 8012f42:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8012f46:	61cb      	str	r3, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8012f48:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8012f4a:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8012f4c:	67cb      	str	r3, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8012f4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8012f52:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8012f56:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012f5a:	9b05      	ldr	r3, [sp, #20]
 8012f5c:	42ab      	cmp	r3, r5
 8012f5e:	d1cc      	bne.n	8012efa <jpeg_idct_16x8+0x1e>
 8012f60:	9b04      	ldr	r3, [sp, #16]
 8012f62:	3b04      	subs	r3, #4
 8012f64:	9302      	str	r3, [sp, #8]
 8012f66:	9b04      	ldr	r3, [sp, #16]
 8012f68:	331c      	adds	r3, #28
 8012f6a:	930f      	str	r3, [sp, #60]	; 0x3c
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8012f6c:	ab10      	add	r3, sp, #64	; 0x40
 8012f6e:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012f70:	9b02      	ldr	r3, [sp, #8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012f72:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012f76:	f642 14cf 	movw	r4, #10703	; 0x29cf

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012f7a:	f642 4663 	movw	r6, #11363	; 0x2c63
    outptr = output_buf[ctr] + output_col;
 8012f7e:	f853 2f04 	ldr.w	r2, [r3, #4]!

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012f82:	f245 2703 	movw	r7, #20995	; 0x5203
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012f86:	4dd7      	ldr	r5, [pc, #860]	; (80132e4 <jpeg_idct_16x8+0x408>)
    outptr = output_buf[ctr] + output_col;
 8012f88:	920e      	str	r2, [sp, #56]	; 0x38
 8012f8a:	9302      	str	r3, [sp, #8]
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 8012f90:	1899      	adds	r1, r3, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f92:	9b01      	ldr	r3, [sp, #4]
    z1 = (INT32) wsptr[4];
 8012f94:	9a01      	ldr	r2, [sp, #4]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f96:	681b      	ldr	r3, [r3, #0]
    z1 = (INT32) wsptr[4];
 8012f98:	6912      	ldr	r2, [r2, #16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012f9a:	3310      	adds	r3, #16
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012f9c:	4354      	muls	r4, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012f9e:	4342      	muls	r2, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012fa0:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp10 = tmp0 + tmp1;
 8012fa4:	eb04 3e43 	add.w	lr, r4, r3, lsl #13
    tmp12 = tmp0 + tmp2;
 8012fa8:	eb02 3c43 	add.w	ip, r2, r3, lsl #13
    tmp11 = tmp0 - tmp1;
 8012fac:	ebc4 3443 	rsb	r4, r4, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8012fb0:	ebc2 3243 	rsb	r2, r2, r3, lsl #13
    z1 = (INT32) wsptr[2];
 8012fb4:	9b01      	ldr	r3, [sp, #4]
 8012fb6:	f8d3 9008 	ldr.w	r9, [r3, #8]
    z2 = (INT32) wsptr[6];
 8012fba:	f8d3 8018 	ldr.w	r8, [r3, #24]
    z3 = z1 - z2;
 8012fbe:	eba9 0308 	sub.w	r3, r9, r8
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012fc2:	4358      	muls	r0, r3
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012fc4:	4373      	muls	r3, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012fc6:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012fca:	fb07 3708 	mla	r7, r7, r8, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012fce:	fb05 3309 	mla	r3, r5, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012fd2:	f205 25ee 	addw	r5, r5, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012fd6:	fb06 0609 	mla	r6, r6, r9, r0
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012fda:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012fde:	fb05 0008 	mla	r0, r5, r8, r0
    tmp20 = tmp10 + tmp0;
 8012fe2:	eb0e 0507 	add.w	r5, lr, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012fe6:	f640 5823 	movw	r8, #3363	; 0xd23
    tmp20 = tmp10 + tmp0;
 8012fea:	9503      	str	r5, [sp, #12]
    tmp27 = tmp10 - tmp0;
 8012fec:	ebae 0507 	sub.w	r5, lr, r7
 8012ff0:	9504      	str	r5, [sp, #16]
    tmp21 = tmp12 + tmp1;
 8012ff2:	eb0c 0506 	add.w	r5, ip, r6
 8012ff6:	9505      	str	r5, [sp, #20]
    tmp26 = tmp12 - tmp1;
 8012ff8:	ebac 0506 	sub.w	r5, ip, r6
 8012ffc:	9506      	str	r5, [sp, #24]
    tmp22 = tmp13 + tmp2;
 8012ffe:	18d5      	adds	r5, r2, r3
    tmp25 = tmp13 - tmp2;
 8013000:	1ad3      	subs	r3, r2, r3
    tmp22 = tmp13 + tmp2;
 8013002:	9507      	str	r5, [sp, #28]
    tmp25 = tmp13 - tmp2;
 8013004:	9308      	str	r3, [sp, #32]
    tmp23 = tmp11 + tmp3;
 8013006:	1823      	adds	r3, r4, r0
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013008:	4db7      	ldr	r5, [pc, #732]	; (80132e8 <jpeg_idct_16x8+0x40c>)
    tmp23 = tmp11 + tmp3;
 801300a:	9309      	str	r3, [sp, #36]	; 0x24
    tmp24 = tmp11 - tmp3;
 801300c:	1a23      	subs	r3, r4, r0
    z3 = (INT32) wsptr[5];
 801300e:	9801      	ldr	r0, [sp, #4]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013010:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp24 = tmp11 - tmp3;
 8013014:	930a      	str	r3, [sp, #40]	; 0x28
    z1 = (INT32) wsptr[1];
 8013016:	9b01      	ldr	r3, [sp, #4]
    z3 = (INT32) wsptr[5];
 8013018:	6947      	ldr	r7, [r0, #20]
    z1 = (INT32) wsptr[1];
 801301a:	685a      	ldr	r2, [r3, #4]
    z2 = (INT32) wsptr[3];
 801301c:	68db      	ldr	r3, [r3, #12]
    z4 = (INT32) wsptr[7];
 801301e:	69c0      	ldr	r0, [r0, #28]
    tmp11 = z1 + z3;
 8013020:	eb02 0a07 	add.w	sl, r2, r7
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013024:	18d6      	adds	r6, r2, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013026:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801302a:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801302e:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013030:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013034:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013038:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801303c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013040:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013044:	f241 5455 	movw	r4, #5461	; 0x1555
 8013048:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801304c:	1ad4      	subs	r4, r2, r3
 801304e:	fb08 f404 	mul.w	r4, r8, r4
 8013052:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013054:	eb06 0409 	add.w	r4, r6, r9
 8013058:	4474      	add	r4, lr
 801305a:	fb05 4402 	mla	r4, r5, r2, r4
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801305e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013060:	940c      	str	r4, [sp, #48]	; 0x30
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013062:	eb0c 040a 	add.w	r4, ip, sl
 8013066:	442c      	add	r4, r5
 8013068:	4da0      	ldr	r5, [pc, #640]	; (80132ec <jpeg_idct_16x8+0x410>)
 801306a:	fb05 4202 	mla	r2, r5, r2, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801306e:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013070:	4d9f      	ldr	r5, [pc, #636]	; (80132f0 <jpeg_idct_16x8+0x414>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013072:	920d      	str	r2, [sp, #52]	; 0x34
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013074:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8013078:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801307a:	f240 224d 	movw	r2, #589	; 0x24d
 801307e:	fb02 4203 	mla	r2, r2, r3, r4
 8013082:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013084:	4a9b      	ldr	r2, [pc, #620]	; (80132f4 <jpeg_idct_16x8+0x418>)
 8013086:	fb02 4407 	mla	r4, r2, r7, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801308a:	1afa      	subs	r2, r7, r3
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801308c:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801308e:	f642 5909 	movw	r9, #11529	; 0x2d09
 8013092:	fb09 f202 	mul.w	r2, r9, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013096:	fb05 2907 	mla	r9, r5, r7, r2
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801309a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801309c:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801309e:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80130a2:	fb0a 2203 	mla	r2, sl, r3, r2
    z2    += z4;
 80130a6:	4403      	add	r3, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80130a8:	eb02 0a05 	add.w	sl, r2, r5
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80130ac:	4a92      	ldr	r2, [pc, #584]	; (80132f8 <jpeg_idct_16x8+0x41c>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80130ae:	f242 2518 	movw	r5, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80130b2:	435a      	muls	r2, r3
    tmp1  += z1;
 80130b4:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80130b6:	fb05 2200 	mla	r2, r5, r0, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80130ba:	4d90      	ldr	r5, [pc, #576]	; (80132fc <jpeg_idct_16x8+0x420>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80130bc:	4472      	add	r2, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80130be:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80130c2:	436b      	muls	r3, r5
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80130c4:	fb0e 3e00 	mla	lr, lr, r0, r3
    tmp12 += z2;
 80130c8:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80130ca:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80130ce:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80130d0:	eb07 0c00 	add.w	ip, r7, r0
 80130d4:	441d      	add	r5, r3
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80130d6:	1bc0      	subs	r0, r0, r7
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80130d8:	fb05 fc0c 	mul.w	ip, r5, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80130dc:	9d03      	ldr	r5, [sp, #12]
 80130de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80130e0:	fb08 f000 	mul.w	r0, r8, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80130e4:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    tmp2  += z2;
 80130e6:	4464      	add	r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80130e8:	19ef      	adds	r7, r5, r7
 80130ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    tmp3  += z2;
 80130ec:	4462      	add	r2, ip
    tmp10 += z2;
 80130ee:	4486      	add	lr, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80130f0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp11 += z2;
 80130f4:	4448      	add	r0, r9
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80130f6:	f81b 7007 	ldrb.w	r7, [fp, r7]
 80130fa:	54ef      	strb	r7, [r5, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80130fc:	9b03      	ldr	r3, [sp, #12]
 80130fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013100:	1b5f      	subs	r7, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8013102:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8013104:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8013108:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801310c:	73cf      	strb	r7, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801310e:	199f      	adds	r7, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013110:	1b9e      	subs	r6, r3, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013112:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8013114:	f3c7 4789 	ubfx	r7, r7, #18, #10
			     & RANGE_MASK];
 8013118:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801311c:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8013120:	704f      	strb	r7, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013122:	f81b 6006 	ldrb.w	r6, [fp, r6]
 8013126:	738e      	strb	r6, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013128:	191e      	adds	r6, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801312a:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801312c:	9b09      	ldr	r3, [sp, #36]	; 0x24
			     & RANGE_MASK];
 801312e:	f3c6 4689 	ubfx	r6, r6, #18, #10
			     & RANGE_MASK];
 8013132:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013136:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801313a:	708e      	strb	r6, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801313c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8013140:	734c      	strb	r4, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013142:	189c      	adds	r4, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013144:	1a9a      	subs	r2, r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			     & RANGE_MASK];
 8013148:	f3c4 4489 	ubfx	r4, r4, #18, #10
			     & RANGE_MASK];
 801314c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013150:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8013154:	70cc      	strb	r4, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013156:	f81b 2002 	ldrb.w	r2, [fp, r2]
 801315a:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801315c:	eb03 020e 	add.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013160:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013164:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013168:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801316a:	eba3 020e 	sub.w	r2, r3, lr
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801316e:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8013170:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013174:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013178:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801317a:	181a      	adds	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801317c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013180:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8013184:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013186:	1a1a      	subs	r2, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013188:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801318c:	f81b 2002 	ldrb.w	r2, [fp, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013190:	9b06      	ldr	r3, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013192:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013194:	eb03 020a 	add.w	r2, r3, sl
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013198:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 801319c:	f3c2 4289 	ubfx	r2, r2, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80131a0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80131a4:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80131a8:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80131aa:	f81b 3003 	ldrb.w	r3, [fp, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80131ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80131b0:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80131b2:	9b04      	ldr	r3, [sp, #16]
 80131b4:	4413      	add	r3, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80131b6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80131ba:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80131be:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80131c0:	9b04      	ldr	r3, [sp, #16]
 80131c2:	1a9b      	subs	r3, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 80131c4:	9a02      	ldr	r2, [sp, #8]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80131c6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80131ca:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80131ce:	720b      	strb	r3, [r1, #8]

    wsptr += 8;		/* advance pointer to next row */
 80131d0:	9b01      	ldr	r3, [sp, #4]
 80131d2:	3320      	adds	r3, #32
 80131d4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++) {
 80131d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131d8:	4293      	cmp	r3, r2
 80131da:	f47f aec9 	bne.w	8012f70 <jpeg_idct_16x8+0x94>
  }
}
 80131de:	b051      	add	sp, #324	; 0x144
 80131e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80131e4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80131e6:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 80131ea:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80131ec:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80131ee:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80131f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80131f6:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80131f8:	183c      	adds	r4, r7, r0
 80131fa:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80131fc:	f641 027e 	movw	r2, #6270	; 0x187e
 8013200:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013204:	4a3e      	ldr	r2, [pc, #248]	; (8013300 <jpeg_idct_16x8+0x424>)
 8013206:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801320a:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 801320c:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 801320e:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8013212:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 8013216:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 801321a:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801321c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 8013220:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8013222:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013224:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013226:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801322a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801322e:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013232:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013236:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 8013238:	9202      	str	r2, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801323a:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801323e:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8013242:	eb08 040a 	add.w	r4, r8, sl
    tmp12 = tmp1 - tmp3;
 8013246:	9303      	str	r3, [sp, #12]
    tmp0 += z1 + z2;
 8013248:	f640 138e 	movw	r3, #2446	; 0x98e
    z2 = tmp0 + tmp2;
 801324c:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013250:	1930      	adds	r0, r6, r4
 8013252:	4350      	muls	r0, r2
    z2 += z1;
 8013254:	4a2b      	ldr	r2, [pc, #172]	; (8013304 <jpeg_idct_16x8+0x428>)
 8013256:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 801325a:	4a2b      	ldr	r2, [pc, #172]	; (8013308 <jpeg_idct_16x8+0x42c>)
 801325c:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013260:	eb09 040a 	add.w	r4, r9, sl
 8013264:	4a29      	ldr	r2, [pc, #164]	; (801330c <jpeg_idct_16x8+0x430>)
 8013266:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8013268:	1932      	adds	r2, r6, r4
    tmp3 += z1 + z3;
 801326a:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801326c:	fb03 2909 	mla	r9, r3, r9, r2
    tmp3 += z1 + z3;
 8013270:	f243 030b 	movw	r3, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013274:	4a26      	ldr	r2, [pc, #152]	; (8013310 <jpeg_idct_16x8+0x434>)
    tmp3 += z1 + z3;
 8013276:	fb03 440a 	mla	r4, r3, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801327a:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 801327e:	f244 13b3 	movw	r3, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013282:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8013286:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8013288:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801328a:	fb03 0008 	mla	r0, r3, r8, r0
    tmp2 += z1 + z2;
 801328e:	f246 2854 	movw	r8, #25172	; 0x6254
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013292:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 8013294:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013298:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801329c:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80132a0:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80132a2:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80132a6:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80132aa:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80132ae:	eb07 040e 	add.w	r4, r7, lr
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80132b2:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80132b6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80132b8:	12ff      	asrs	r7, r7, #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80132ba:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80132bc:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80132be:	1a1b      	subs	r3, r3, r0
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80132c0:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80132c4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80132c6:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80132c8:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80132ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80132ce:	9b02      	ldr	r3, [sp, #8]
 80132d0:	444b      	add	r3, r9
 80132d2:	12db      	asrs	r3, r3, #11
 80132d4:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80132d6:	9b02      	ldr	r3, [sp, #8]
 80132d8:	eba3 0309 	sub.w	r3, r3, r9
 80132dc:	12db      	asrs	r3, r3, #11
 80132de:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 80132e0:	e63b      	b.n	8012f5a <jpeg_idct_16x8+0x7e>
 80132e2:	bf00      	nop
 80132e4:	ffffecc2 	.word	0xffffecc2
 80132e8:	ffffb6d6 	.word	0xffffb6d6
 80132ec:	ffffc542 	.word	0xffffc542
 80132f0:	ffffe77a 	.word	0xffffe77a
 80132f4:	ffffdbfa 	.word	0xffffdbfa
 80132f8:	ffffeaab 	.word	0xffffeaab
 80132fc:	ffffd817 	.word	0xffffd817
 8013300:	ffffc4df 	.word	0xffffc4df
 8013304:	ffffc13b 	.word	0xffffc13b
 8013308:	fffff384 	.word	0xfffff384
 801330c:	ffffe333 	.word	0xffffe333
 8013310:	ffffadfd 	.word	0xffffadfd

08013314 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013318:	b0c5      	sub	sp, #276	; 0x114
 801331a:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 801331c:	f1a2 0c02 	sub.w	ip, r2, #2
 8013320:	320e      	adds	r2, #14
 8013322:	9303      	str	r3, [sp, #12]
 8013324:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013326:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801332a:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801332e:	9205      	str	r2, [sp, #20]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013330:	3380      	adds	r3, #128	; 0x80
 8013332:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013334:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013338:	f640 2012 	movw	r0, #2578	; 0xa12
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801333c:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013340:	f642 09c6 	movw	r9, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013344:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013348:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801334c:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801334e:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013352:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8013356:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013358:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801335c:	9202      	str	r2, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801335e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013360:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013362:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8013366:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801336a:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 801336e:	4351      	muls	r1, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013370:	f641 4237 	movw	r2, #7223	; 0x1c37
 8013374:	eba8 0701 	sub.w	r7, r8, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013378:	186b      	adds	r3, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801337a:	4357      	muls	r7, r2
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801337c:	eba5 0208 	sub.w	r2, r5, r8
 8013380:	4342      	muls	r2, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013382:	9802      	ldr	r0, [sp, #8]
 8013384:	18bc      	adds	r4, r7, r2
 8013386:	4404      	add	r4, r0
 8013388:	48bd      	ldr	r0, [pc, #756]	; (8013680 <jpeg_idct_14x7+0x36c>)
 801338a:	fb00 4408 	mla	r4, r0, r8, r4
    tmp10 = z1 + z3;
 801338e:	1868      	adds	r0, r5, r1
 8013390:	9004      	str	r0, [sp, #16]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013392:	9802      	ldr	r0, [sp, #8]
 8013394:	fb09 0003 	mla	r0, r9, r3, r0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013398:	f46f 731f 	mvn.w	r3, #636	; 0x27c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801339c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80133a0:	fb03 0101 	mla	r1, r3, r1, r0
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80133a4:	4bb7      	ldr	r3, [pc, #732]	; (8013684 <jpeg_idct_14x7+0x370>)
 80133a6:	fb03 0005 	mla	r0, r3, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80133aa:	6a35      	ldr	r5, [r6, #32]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80133ac:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80133ae:	6e37      	ldr	r7, [r6, #96]	; 0x60
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80133b0:	4410      	add	r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80133b2:	f9bc 2010 	ldrsh.w	r2, [ip, #16]

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80133b6:	f641 53ef 	movw	r3, #7663	; 0x1def
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80133ba:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80133bc:	f9bc 5030 	ldrsh.w	r5, [ip, #48]	; 0x30
 80133c0:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80133c2:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80133c6:	eb02 0b05 	add.w	fp, r2, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80133ca:	fb07 f909 	mul.w	r9, r7, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80133ce:	1b57      	subs	r7, r2, r5
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80133d0:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80133d4:	f240 5373 	movw	r3, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80133d8:	444a      	add	r2, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80133da:	444d      	add	r5, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80133dc:	435f      	muls	r7, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80133de:	4baa      	ldr	r3, [pc, #680]	; (8013688 <jpeg_idct_14x7+0x374>)
    tmp10 = tmp11 - tmp12;
 80133e0:	ebab 0a07 	sub.w	sl, fp, r7
    tmp11 += tmp12;
 80133e4:	445f      	add	r7, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80133e6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80133ea:	435d      	muls	r5, r3
    z2 -= tmp10;
 80133ec:	9b04      	ldr	r3, [sp, #16]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80133ee:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80133f2:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80133f6:	442f      	add	r7, r5
    z2 -= tmp10;
 80133f8:	eba8 0803 	sub.w	r8, r8, r3
    tmp10 += z2;
 80133fc:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80133fe:	fb0b 2209 	mla	r2, fp, r9, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013402:	9b02      	ldr	r3, [sp, #8]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013404:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013406:	eb01 050a 	add.w	r5, r1, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801340a:	eba1 010a 	sub.w	r1, r1, sl
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801340e:	12ed      	asrs	r5, r5, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013410:	12c9      	asrs	r1, r1, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013412:	f84e 5c04 	str.w	r5, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013416:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801341a:	19e1      	adds	r1, r4, r7
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801341c:	1be4      	subs	r4, r4, r7
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801341e:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013420:	12e4      	asrs	r4, r4, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013422:	f8ce 101c 	str.w	r1, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013426:	1881      	adds	r1, r0, r2
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013428:	1a80      	subs	r0, r0, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801342a:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801342e:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013430:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013434:	fb02 3208 	mla	r2, r2, r8, r3
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013438:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801343a:	12c0      	asrs	r0, r0, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801343c:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8013440:	12d2      	asrs	r2, r2, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013442:	4563      	cmp	r3, ip
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013444:	f8ce 007c 	str.w	r0, [lr, #124]	; 0x7c
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8013448:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801344c:	f47f af72 	bne.w	8013334 <jpeg_idct_14x7+0x20>
 8013450:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8013452:	ac0c      	add	r4, sp, #48	; 0x30
 8013454:	f1a3 0904 	sub.w	r9, r3, #4
 8013458:	3318      	adds	r3, #24
 801345a:	930b      	str	r3, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801345c:	f859 3f04 	ldr.w	r3, [r9, #4]!
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013460:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8013464:	9a4e      	ldr	r2, [sp, #312]	; 0x138

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013466:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z4 = (INT32) wsptr[4];
 801346a:	6927      	ldr	r7, [r4, #16]
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801346c:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    outptr = output_buf[ctr] + output_col;
 8013470:	1899      	adds	r1, r3, r2
 8013472:	930a      	str	r3, [sp, #40]	; 0x28
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013474:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013478:	6820      	ldr	r0, [r4, #0]
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801347a:	3420      	adds	r4, #32
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801347c:	fb03 f207 	mul.w	r2, r3, r7
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013480:	f640 2312 	movw	r3, #2578	; 0xa12
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013484:	3010      	adds	r0, #16
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013486:	fb03 fe07 	mul.w	lr, r3, r7
    tmp10 = z1 + z2;
 801348a:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801348e:	436f      	muls	r7, r5
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013490:	4472      	add	r2, lr
    tmp11 = z1 + z3;
 8013492:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z1 = (INT32) wsptr[2];
 8013496:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 801349a:	ebc7 3540 	rsb	r5, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801349e:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80134a0:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80134a4:	0052      	lsls	r2, r2, #1
 80134a6:	ebc2 3340 	rsb	r3, r2, r0, lsl #13
    z2 = (INT32) wsptr[6];
 80134aa:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80134ae:	eb0e 0002 	add.w	r0, lr, r2
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80134b2:	9302      	str	r3, [sp, #8]
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80134b4:	4b75      	ldr	r3, [pc, #468]	; (801368c <jpeg_idct_14x7+0x378>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80134b6:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80134b8:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80134bc:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80134c0:	fb03 0002 	mla	r0, r3, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80134c4:	f603 23e5 	addw	r3, r3, #2789	; 0xae5
 80134c8:	435a      	muls	r2, r3
    tmp20 = tmp10 + tmp13;
 80134ca:	eb0c 0307 	add.w	r3, ip, r7
 80134ce:	9303      	str	r3, [sp, #12]
    tmp26 = tmp10 - tmp13;
 80134d0:	ebac 0307 	sub.w	r3, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80134d4:	fb08 220e 	mla	r2, r8, lr, r2
    z3 = (INT32) wsptr[5];
 80134d8:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp26 = tmp10 - tmp13;
 80134dc:	9304      	str	r3, [sp, #16]
    tmp21 = tmp11 + tmp14;
 80134de:	1833      	adds	r3, r6, r0
    z2 = (INT32) wsptr[3];
 80134e0:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80134e4:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 80134e8:	9305      	str	r3, [sp, #20]
    tmp25 = tmp11 - tmp14;
 80134ea:	1a33      	subs	r3, r6, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80134ec:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp25 = tmp11 - tmp14;
 80134f0:	9306      	str	r3, [sp, #24]
    tmp22 = tmp12 + tmp15;
 80134f2:	18ab      	adds	r3, r5, r2
 80134f4:	9307      	str	r3, [sp, #28]
    tmp24 = tmp12 - tmp15;
 80134f6:	1aab      	subs	r3, r5, r2
    z1 = (INT32) wsptr[1];
 80134f8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80134fc:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp24 = tmp12 - tmp15;
 8013500:	9308      	str	r3, [sp, #32]
    tmp14 = z1 + z3;
 8013502:	eb02 0b0c 	add.w	fp, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013506:	eb02 0608 	add.w	r6, r2, r8
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801350a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801350e:	4346      	muls	r6, r0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013510:	f641 0014 	movw	r0, #6164	; 0x1814
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013514:	fb05 f50b 	mul.w	r5, r5, fp
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013518:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801351c:	1977      	adds	r7, r6, r5
 801351e:	eb07 3743 	add.w	r7, r7, r3, lsl #13
 8013522:	4b5b      	ldr	r3, [pc, #364]	; (8013690 <jpeg_idct_14x7+0x37c>)
 8013524:	fb03 7702 	mla	r7, r3, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013528:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801352c:	fb03 b002 	mla	r0, r3, r2, fp
    z1    -= z2;
 8013530:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013534:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013538:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801353c:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013540:	ebae 3e43 	sub.w	lr, lr, r3, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013544:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8013546:	eb00 030e 	add.w	r3, r0, lr
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801354a:	eb08 000c 	add.w	r0, r8, ip
    tmp16 += tmp15;
 801354e:	9309      	str	r3, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013550:	fb0a f000 	mul.w	r0, sl, r0
 8013554:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013558:	eba0 3043 	sub.w	r0, r0, r3, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801355c:	4b4d      	ldr	r3, [pc, #308]	; (8013694 <jpeg_idct_14x7+0x380>)
 801355e:	fb03 0a08 	mla	sl, r3, r8, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013562:	4b4d      	ldr	r3, [pc, #308]	; (8013698 <jpeg_idct_14x7+0x384>)
 8013564:	fb03 000c 	mla	r0, r3, ip, r0
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013568:	44b2      	add	sl, r6
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801356a:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801356e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013572:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013574:	ebac 0508 	sub.w	r5, ip, r8
 8013578:	4375      	muls	r5, r6
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801357a:	eb05 3643 	add.w	r6, r5, r3, lsl #13
 801357e:	4b47      	ldr	r3, [pc, #284]	; (801369c <jpeg_idct_14x7+0x388>)
 8013580:	fb03 660c 	mla	r6, r3, ip, r6
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013584:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013588:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801358a:	f241 5b99 	movw	fp, #5529	; 0x1599
 801358e:	fb0b 5508 	mla	r5, fp, r8, r5
 8013592:	4475      	add	r5, lr
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013594:	eb02 3e43 	add.w	lr, r2, r3, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013598:	9b03      	ldr	r3, [sp, #12]
 801359a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 801359c:	eb03 0c07 	add.w	ip, r3, r7
 80135a0:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80135a2:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80135a6:	f813 c00c 	ldrb.w	ip, [r3, ip]
 80135aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ac:	f803 c002 	strb.w	ip, [r3, r2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80135b0:	9b03      	ldr	r3, [sp, #12]
 80135b2:	1bdf      	subs	r7, r3, r7
 80135b4:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80135b6:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80135ba:	5ddf      	ldrb	r7, [r3, r7]
 80135bc:	734f      	strb	r7, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80135be:	9b05      	ldr	r3, [sp, #20]
 80135c0:	eb03 070a 	add.w	r7, r3, sl
 80135c4:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80135c6:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80135ca:	5ddf      	ldrb	r7, [r3, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80135cc:	9b05      	ldr	r3, [sp, #20]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80135ce:	704f      	strb	r7, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80135d0:	eba3 070a 	sub.w	r7, r3, sl
 80135d4:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80135d6:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80135da:	5ddf      	ldrb	r7, [r3, r7]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80135dc:	9b07      	ldr	r3, [sp, #28]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80135de:	730f      	strb	r7, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80135e0:	181f      	adds	r7, r3, r0
 80135e2:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80135e4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80135e8:	5ddf      	ldrb	r7, [r3, r7]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135ea:	9b07      	ldr	r3, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80135ec:	708f      	strb	r7, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135ee:	1a18      	subs	r0, r3, r0
 80135f0:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 80135f2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135f6:	5c18      	ldrb	r0, [r3, r0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80135f8:	9b02      	ldr	r3, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135fa:	72c8      	strb	r0, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80135fc:	eb03 000e 	add.w	r0, r3, lr
 8013600:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8013602:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013606:	5c18      	ldrb	r0, [r3, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013608:	9b02      	ldr	r3, [sp, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801360a:	70c8      	strb	r0, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801360c:	eba3 020e 	sub.w	r2, r3, lr
 8013610:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8013612:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013616:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013618:	9b08      	ldr	r3, [sp, #32]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801361a:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801361c:	199a      	adds	r2, r3, r6
 801361e:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 8013620:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013624:	5c9a      	ldrb	r2, [r3, r2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013626:	9b08      	ldr	r3, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013628:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801362a:	1b9a      	subs	r2, r3, r6
 801362c:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801362e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013632:	5c9a      	ldrb	r2, [r3, r2]
 8013634:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013636:	9b06      	ldr	r3, [sp, #24]
 8013638:	195a      	adds	r2, r3, r5
 801363a:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801363c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013640:	5c9a      	ldrb	r2, [r3, r2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013642:	9b06      	ldr	r3, [sp, #24]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013644:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013646:	1b5a      	subs	r2, r3, r5
 8013648:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801364a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801364e:	5c9a      	ldrb	r2, [r3, r2]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013650:	9b04      	ldr	r3, [sp, #16]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013652:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013656:	189a      	adds	r2, r3, r2
 8013658:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801365a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801365e:	5c9a      	ldrb	r2, [r3, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013660:	9b04      	ldr	r3, [sp, #16]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013662:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013666:	1a9a      	subs	r2, r3, r2
 8013668:	9b01      	ldr	r3, [sp, #4]
			     & RANGE_MASK];
 801366a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801366e:	5c9a      	ldrb	r2, [r3, r2]
  for (ctr = 0; ctr < 7; ctr++) {
 8013670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013672:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8013674:	454b      	cmp	r3, r9
 8013676:	f47f aef1 	bne.w	801345c <jpeg_idct_14x7+0x148>
  }
}
 801367a:	b045      	add	sp, #276	; 0x114
 801367c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013680:	ffffc515 	.word	0xffffc515
 8013684:	ffffb0f1 	.word	0xffffb0f1
 8013688:	ffffd3e1 	.word	0xffffd3e1
 801368c:	ffffc8fc 	.word	0xffffc8fc
 8013690:	ffffdbf0 	.word	0xffffdbf0
 8013694:	fffff26e 	.word	0xfffff26e
 8013698:	ffffb409 	.word	0xffffb409
 801369c:	ffffc9e6 	.word	0xffffc9e6

080136a0 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80136a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80136a4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80136a8:	b0bb      	sub	sp, #236	; 0xec
 80136aa:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80136ac:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80136ae:	3080      	adds	r0, #128	; 0x80
 80136b0:	320e      	adds	r2, #14
 80136b2:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80136b4:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80136b6:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80136b8:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80136ba:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80136be:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80136c2:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80136c6:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136c8:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80136cc:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136ce:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136d2:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136d6:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 80136d8:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80136da:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80136de:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80136e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80136e6:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80136ea:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 80136ec:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 80136ee:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136f2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80136f4:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80136f8:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136fa:	6a28      	ldr	r0, [r5, #32]
    tmp20 = tmp11 + tmp10;
 80136fc:	eb04 0e02 	add.w	lr, r4, r2
    tmp22 = tmp11 - tmp10;
 8013700:	1aa4      	subs	r4, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013702:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
 8013706:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013708:	6e28      	ldr	r0, [r5, #96]	; 0x60
 801370a:	fb00 f909 	mul.w	r9, r0, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801370e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 8013712:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013716:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801371a:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801371e:	eb02 0c08 	add.w	ip, r2, r8
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013722:	eba2 0209 	sub.w	r2, r2, r9
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013726:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801372a:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 801372e:	eba2 0208 	sub.w	r2, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013732:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013736:	0092      	lsls	r2, r2, #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013738:	eb0e 080a 	add.w	r8, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801373c:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013740:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013744:	ea4f 2eee 	mov.w	lr, lr, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013748:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801374c:	f8c7 e09c 	str.w	lr, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013750:	eb02 2ee1 	add.w	lr, r2, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013754:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013758:	f847 8c04 	str.w	r8, [r7, #-4]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801375c:	f8c7 e01c 	str.w	lr, [r7, #28]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013760:	67fa      	str	r2, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013762:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013766:	eba4 040c 	sub.w	r4, r4, ip
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801376a:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801376c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801376e:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013770:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013772:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013774:	42b2      	cmp	r2, r6
 8013776:	d1a0      	bne.n	80136ba <jpeg_idct_12x6+0x1a>
 8013778:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 801377c:	aa0a      	add	r2, sp, #40	; 0x28
 801377e:	3314      	adds	r3, #20
 8013780:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013782:	f85a 3f04 	ldr.w	r3, [sl, #4]!
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013786:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013788:	9944      	ldr	r1, [sp, #272]	; 0x110
 801378a:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 801378c:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8013790:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013792:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8013796:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 801379a:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801379c:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 80137a0:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80137a4:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 80137a8:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 80137ac:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80137b0:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80137b2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 80137b6:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80137ba:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 80137bc:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 80137c0:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 80137c2:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 80137c6:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 80137ca:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 80137ce:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 80137d2:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 80137d6:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 80137d8:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 80137dc:	1b49      	subs	r1, r1, r5
    tmp10 = z1 + z3;
 80137de:	eb08 0b06 	add.w	fp, r8, r6
    tmp20 = tmp10 + tmp12;
 80137e2:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 80137e4:	eba7 000c 	sub.w	r0, r7, ip
    z4 = (INT32) wsptr[7];
 80137e8:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80137ec:	f641 378d 	movw	r7, #7053	; 0x1b8d
    tmp25 = tmp10 - tmp12;
 80137f0:	9005      	str	r0, [sp, #20]
    tmp22 = tmp11 + tmp12;
 80137f2:	1860      	adds	r0, r4, r1
    tmp23 = tmp11 - tmp12;
 80137f4:	1a61      	subs	r1, r4, r1
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80137f6:	eb05 0c0b 	add.w	ip, r5, fp
    tmp22 = tmp11 + tmp12;
 80137fa:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80137fc:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp23 = tmp11 - tmp12;
 8013800:	9107      	str	r1, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013802:	eb06 0905 	add.w	r9, r6, r5
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013806:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801380a:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801380e:	f640 075b 	movw	r7, #2139	; 0x85b
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013812:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013816:	484b      	ldr	r0, [pc, #300]	; (8013944 <jpeg_idct_12x6+0x2a4>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013818:	fb07 cb0b 	mla	fp, r7, fp, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801381c:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013820:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013822:	4849      	ldr	r0, [pc, #292]	; (8013948 <jpeg_idct_12x6+0x2a8>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013824:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013828:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801382c:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013830:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013834:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013838:	eb01 0709 	add.w	r7, r1, r9
 801383c:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013840:	4842      	ldr	r0, [pc, #264]	; (801394c <jpeg_idct_12x6+0x2ac>)
 8013842:	fb00 1108 	mla	r1, r0, r8, r1
 8013846:	4842      	ldr	r0, [pc, #264]	; (8013950 <jpeg_idct_12x6+0x2b0>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013848:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801384a:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801384e:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 8013852:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013856:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 801385a:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 801385e:	1b86      	subs	r6, r0, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013860:	4461      	add	r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013862:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013866:	483b      	ldr	r0, [pc, #236]	; (8013954 <jpeg_idct_12x6+0x2b4>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013868:	eb05 0c06 	add.w	ip, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801386c:	444c      	add	r4, r9
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801386e:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013872:	f641 087e 	movw	r8, #6270	; 0x187e
 8013876:	fb08 c805 	mla	r8, r8, r5, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801387a:	fb00 cc06 	mla	ip, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801387e:	9804      	ldr	r0, [sp, #16]
 8013880:	9e44      	ldr	r6, [sp, #272]	; 0x110
 8013882:	eb00 050e 	add.w	r5, r0, lr
 8013886:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8013888:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801388c:	5d45      	ldrb	r5, [r0, r5]
 801388e:	9808      	ldr	r0, [sp, #32]
 8013890:	5585      	strb	r5, [r0, r6]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013892:	9804      	ldr	r0, [sp, #16]
 8013894:	eba0 050e 	sub.w	r5, r0, lr
 8013898:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801389a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801389e:	5d45      	ldrb	r5, [r0, r5]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80138a0:	9802      	ldr	r0, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80138a2:	72dd      	strb	r5, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80138a4:	eb00 0508 	add.w	r5, r0, r8
 80138a8:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80138aa:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80138ae:	5d45      	ldrb	r5, [r0, r5]
 80138b0:	705d      	strb	r5, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80138b2:	9802      	ldr	r0, [sp, #8]
 80138b4:	eba0 0508 	sub.w	r5, r0, r8
 80138b8:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80138ba:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80138be:	5d45      	ldrb	r5, [r0, r5]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80138c0:	9806      	ldr	r0, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80138c2:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80138c4:	19c5      	adds	r5, r0, r7
 80138c6:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80138c8:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80138cc:	5d45      	ldrb	r5, [r0, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138ce:	9806      	ldr	r0, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80138d0:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138d2:	1bc5      	subs	r5, r0, r7
 80138d4:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80138d6:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138da:	5d45      	ldrb	r5, [r0, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138dc:	9807      	ldr	r0, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80138de:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138e0:	1905      	adds	r5, r0, r4
 80138e2:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80138e4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138e8:	5d45      	ldrb	r5, [r0, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138ea:	9807      	ldr	r0, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80138ec:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138ee:	1b04      	subs	r4, r0, r4
 80138f0:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80138f2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138f6:	5d04      	ldrb	r4, [r0, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138f8:	9803      	ldr	r0, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80138fa:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80138fc:	eb00 040c 	add.w	r4, r0, ip
 8013900:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8013902:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013906:	5d04      	ldrb	r4, [r0, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013908:	9803      	ldr	r0, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801390a:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801390c:	eba0 040c 	sub.w	r4, r0, ip
 8013910:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8013912:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013916:	5d04      	ldrb	r4, [r0, r4]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013918:	9805      	ldr	r0, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801391a:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801391c:	1844      	adds	r4, r0, r1
 801391e:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8013920:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013924:	5d04      	ldrb	r4, [r0, r4]
 8013926:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013928:	9805      	ldr	r0, [sp, #20]
 801392a:	1a41      	subs	r1, r0, r1
 801392c:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 801392e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013932:	5c41      	ldrb	r1, [r0, r1]
 8013934:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8013936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013938:	4553      	cmp	r3, sl
 801393a:	f47f af22 	bne.w	8013782 <jpeg_idct_12x6+0xe2>
  }
}
 801393e:	b03b      	add	sp, #236	; 0xec
 8013940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013944:	ffffeeaf 	.word	0xffffeeaf
 8013948:	ffffde8b 	.word	0xffffde8b
 801394c:	ffffea5c 	.word	0xffffea5c
 8013950:	ffffc08c 	.word	0xffffc08c
 8013954:	ffffc4df 	.word	0xffffc4df

08013958 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801395c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013960:	b0b1      	sub	sp, #196	; 0xc4
 8013962:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013964:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013966:	3080      	adds	r0, #128	; 0x80
 8013968:	320e      	adds	r2, #14
 801396a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801396c:	af08      	add	r7, sp, #32
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801396e:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013972:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013976:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013978:	9202      	str	r2, [sp, #8]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801397a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801397e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013980:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013984:	f9b6 8040 	ldrsh.w	r8, [r6, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013988:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801398a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 801398c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013990:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8013992:	0352      	lsls	r2, r2, #13
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013994:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013996:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801399a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801399e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80139a2:	fb04 f408 	mul.w	r4, r4, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139a6:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139aa:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139ae:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80139b0:	eb01 0804 	add.w	r8, r1, r4
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80139b4:	1b09      	subs	r1, r1, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139b6:	fb00 fb0b 	mul.w	fp, r0, fp

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80139ba:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80139be:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80139c2:	fb0e f808 	mul.w	r8, lr, r8
    z3 = tmp12 + z2;
 80139c6:	1854      	adds	r4, r2, r1
    tmp12 -= z2 << 2;
 80139c8:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 80139cc:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 80139d0:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80139d4:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80139d8:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80139da:	fb00 f808 	mul.w	r8, r0, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80139de:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80139e2:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80139e4:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80139e8:	486e      	ldr	r0, [pc, #440]	; (8013ba4 <jpeg_idct_10x5+0x24c>)
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80139ea:	9a02      	ldr	r2, [sp, #8]
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80139ec:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80139f0:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80139f4:	eba9 090a 	sub.w	r9, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80139f8:	42b2      	cmp	r2, r6
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80139fa:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80139fe:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8013a02:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013a06:	f8c7 907c 	str.w	r9, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013a0a:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013a0e:	eba4 0408 	sub.w	r4, r4, r8
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013a12:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013a16:	ea4f 24e4 	mov.w	r4, r4, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013a1a:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013a1e:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013a20:	d1ab      	bne.n	801397a <jpeg_idct_10x5+0x22>
 8013a22:	f1a3 0b04 	sub.w	fp, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8013a26:	a908      	add	r1, sp, #32
 8013a28:	3310      	adds	r3, #16
 8013a2a:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013a2c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013a30:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8013a34:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013a36:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8013a38:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8013a3c:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013a3e:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8013a42:	9306      	str	r3, [sp, #24]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013a44:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a48:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013a4c:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a50:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013a52:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8013a54:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013a58:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8013a5a:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8013a5e:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013a62:	006d      	lsls	r5, r5, #1
 8013a64:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8013a68:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013a6c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013a6e:	19eb      	adds	r3, r5, r7
 8013a70:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013a72:	f241 0071 	movw	r0, #4209	; 0x1071
 8013a76:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8013a7a:	484a      	ldr	r0, [pc, #296]	; (8013ba4 <jpeg_idct_10x5+0x24c>)
 8013a7c:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8013a80:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8013a84:	1b70      	subs	r0, r6, r5
    z4 = (INT32) wsptr[7];
 8013a86:	f851 5c04 	ldr.w	r5, [r1, #-4]
    tmp21 = tmp11 + tmp13;
 8013a8a:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8013a8c:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8013a8e:	9003      	str	r0, [sp, #12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013a90:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 8013a94:	9304      	str	r3, [sp, #16]
    z2 = (INT32) wsptr[3];
 8013a96:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z1 = (INT32) wsptr[1];
 8013a9a:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8013a9e:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8013aa2:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013aa4:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013aa8:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8013aac:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8013ab0:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8013ab4:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013ab8:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8013abc:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013ac0:	f240 7014 	movw	r0, #1812	; 0x714
 8013ac4:	fb00 f602 	mul.w	r6, r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013ac8:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013aca:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013ace:	eba6 0608 	sub.w	r6, r6, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013ad2:	f642 0853 	movw	r8, #10323	; 0x2853
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013ad6:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013ada:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013adc:	f241 2acf 	movw	sl, #4815	; 0x12cf
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013ae0:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013ae4:	fb08 f802 	mul.w	r8, r8, r2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013ae8:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013aec:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013af0:	1ad3      	subs	r3, r2, r3
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013af2:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013af6:	eba8 0809 	sub.w	r8, r8, r9
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013afa:	035b      	lsls	r3, r3, #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013afc:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013b00:	eba8 0805 	sub.w	r8, r8, r5
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013b04:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013b08:	9806      	ldr	r0, [sp, #24]
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013b0a:	442a      	add	r2, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013b0c:	eb0c 050e 	add.w	r5, ip, lr
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013b10:	9305      	str	r3, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013b12:	ebac 0c0e 	sub.w	ip, ip, lr
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013b16:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8013b18:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8013b1c:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013b20:	5d5d      	ldrb	r5, [r3, r5]
 8013b22:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8013b24:	54c5      	strb	r5, [r0, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013b26:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b28:	9805      	ldr	r0, [sp, #20]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013b2a:	f813 500c 	ldrb.w	r5, [r3, ip]
 8013b2e:	7265      	strb	r5, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013b30:	eb07 0508 	add.w	r5, r7, r8
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b34:	eba7 0708 	sub.w	r7, r7, r8
			    & RANGE_MASK];
 8013b38:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8013b3c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013b40:	5d5d      	ldrb	r5, [r3, r5]
 8013b42:	7065      	strb	r5, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b44:	5ddd      	ldrb	r5, [r3, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b46:	9b02      	ldr	r3, [sp, #8]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b48:	7225      	strb	r5, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b4a:	181d      	adds	r5, r3, r0
 8013b4c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8013b4e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b52:	5d5d      	ldrb	r5, [r3, r5]
 8013b54:	70a5      	strb	r5, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b56:	9b02      	ldr	r3, [sp, #8]
 8013b58:	1a1b      	subs	r3, r3, r0
 8013b5a:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8013b5c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b60:	5cc3      	ldrb	r3, [r0, r3]
 8013b62:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013b64:	9b04      	ldr	r3, [sp, #16]
 8013b66:	4413      	add	r3, r2
			    & RANGE_MASK];
 8013b68:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013b6c:	5cc3      	ldrb	r3, [r0, r3]
 8013b6e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013b70:	9b04      	ldr	r3, [sp, #16]
 8013b72:	1a9b      	subs	r3, r3, r2
			    & RANGE_MASK];
 8013b74:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013b78:	5cc3      	ldrb	r3, [r0, r3]
 8013b7a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013b7c:	9b03      	ldr	r3, [sp, #12]
 8013b7e:	4433      	add	r3, r6
			    & RANGE_MASK];
 8013b80:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013b84:	5cc3      	ldrb	r3, [r0, r3]
 8013b86:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013b88:	9b03      	ldr	r3, [sp, #12]
 8013b8a:	1b9b      	subs	r3, r3, r6
			    & RANGE_MASK];
 8013b8c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013b90:	5cc3      	ldrb	r3, [r0, r3]
 8013b92:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8013b94:	9b07      	ldr	r3, [sp, #28]
 8013b96:	455b      	cmp	r3, fp
 8013b98:	f47f af48 	bne.w	8013a2c <jpeg_idct_10x5+0xd4>
  }
}
 8013b9c:	b031      	add	sp, #196	; 0xc4
 8013b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba2:	bf00      	nop
 8013ba4:	ffffba5c 	.word	0xffffba5c

08013ba8 <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	b0a5      	sub	sp, #148	; 0x94
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013bae:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013bb2:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8013bb4:	1e97      	subs	r7, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013bb6:	ac04      	add	r4, sp, #16
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013bb8:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013bbc:	320e      	adds	r2, #14
 8013bbe:	3e04      	subs	r6, #4
 8013bc0:	4620      	mov	r0, r4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013bc2:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013bc6:	f641 0c7e 	movw	ip, #6270	; 0x187e
 8013bca:	9200      	str	r2, [sp, #0]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013bcc:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013bd0:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013bd2:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013bd6:	f9b7 9020 	ldrsh.w	r9, [r7, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013bda:	434d      	muls	r5, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013bdc:	6c31      	ldr	r1, [r6, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bde:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013be2:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013be6:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013bea:	4a65      	ldr	r2, [pc, #404]	; (8013d80 <jpeg_idct_8x4+0x1d8>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8013bec:	eb05 0901 	add.w	r9, r5, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8013bf0:	1a6d      	subs	r5, r5, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bf2:	6a31      	ldr	r1, [r6, #32]
 8013bf4:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013bf8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013bfa:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013bfe:	eb0a 010b 	add.w	r1, sl, fp
 8013c02:	fb08 f101 	mul.w	r1, r8, r1
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013c06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013c0a:	fb0c 1a0a 	mla	sl, ip, sl, r1
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013c0e:	fb02 110b 	mla	r1, r2, fp, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c12:	9a00      	ldr	r2, [sp, #0]
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013c14:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013c18:	12c9      	asrs	r1, r1, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c1a:	42ba      	cmp	r2, r7
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013c1c:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013c20:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013c24:	eb01 0985 	add.w	r9, r1, r5, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013c28:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013c2c:	ebc1 0185 	rsb	r1, r1, r5, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013c30:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013c34:	f8c4 901c 	str.w	r9, [r4, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013c38:	63e1      	str	r1, [r4, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c3a:	d1c7      	bne.n	8013bcc <jpeg_idct_8x4+0x24>
 8013c3c:	f1a3 0804 	sub.w	r8, r3, #4
 8013c40:	330c      	adds	r3, #12
 8013c42:	9303      	str	r3, [sp, #12]
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013c44:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013c48:	f241 1551 	movw	r5, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013c4c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013c4e:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8013c50:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8013c54:	189c      	adds	r4, r3, r2
 8013c56:	9302      	str	r3, [sp, #8]
    z3 = (INT32) wsptr[6];
 8013c58:	f850 3c08 	ldr.w	r3, [r0, #-8]
    z3 = (INT32) wsptr[4];
 8013c5c:	f850 6c10 	ldr.w	r6, [r0, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013c60:	18ca      	adds	r2, r1, r3
    tmp2 = (INT32) wsptr[3];
 8013c62:	f850 cc14 	ldr.w	ip, [r0, #-20]
    tmp3 = (INT32) wsptr[1];
 8013c66:	f850 9c1c 	ldr.w	r9, [r0, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013c6a:	436a      	muls	r2, r5
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013c6c:	f641 057e 	movw	r5, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 8013c70:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013c74:	fb05 2101 	mla	r1, r5, r1, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013c78:	4d41      	ldr	r5, [pc, #260]	; (8013d80 <jpeg_idct_8x4+0x1d8>)
 8013c7a:	fb05 2203 	mla	r2, r5, r3, r2
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c7e:	f850 3c20 	ldr.w	r3, [r0, #-32]
 8013c82:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013c84:	199d      	adds	r5, r3, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8013c86:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8013c88:	eb01 3645 	add.w	r6, r1, r5, lsl #13
    tmp13 = tmp0 - tmp2;
 8013c8c:	ebc1 3145 	rsb	r1, r1, r5, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013c90:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp12 = tmp1 - tmp3;
 8013c94:	ebc2 3b43 	rsb	fp, r2, r3, lsl #13
    tmp13 = tmp0 - tmp2;
 8013c98:	9100      	str	r1, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8013c9a:	eb02 3143 	add.w	r1, r2, r3, lsl #13
    z3 = tmp1 + tmp3;
 8013c9e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    tmp11 = tmp1 + tmp3;
 8013ca2:	9101      	str	r1, [sp, #4]
    z2 = tmp0 + tmp2;
 8013ca4:	eb07 010c 	add.w	r1, r7, ip
    z3 = tmp1 + tmp3;
 8013ca8:	eb03 0209 	add.w	r2, r3, r9
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013cac:	188b      	adds	r3, r1, r2
 8013cae:	436b      	muls	r3, r5
    z2 += z1;
 8013cb0:	4d34      	ldr	r5, [pc, #208]	; (8013d84 <jpeg_idct_8x4+0x1dc>)
 8013cb2:	fb05 3101 	mla	r1, r5, r1, r3
    z3 += z1;
 8013cb6:	4d34      	ldr	r5, [pc, #208]	; (8013d88 <jpeg_idct_8x4+0x1e0>)
 8013cb8:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013cbc:	eb07 0209 	add.w	r2, r7, r9
 8013cc0:	4d32      	ldr	r5, [pc, #200]	; (8013d8c <jpeg_idct_8x4+0x1e4>)
 8013cc2:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 8013cc4:	f640 158e 	movw	r5, #2446	; 0x98e
 8013cc8:	eb01 0a02 	add.w	sl, r1, r2
    tmp3 += z1 + z3;
 8013ccc:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8013cce:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013cd2:	f850 5c0c 	ldr.w	r5, [r0, #-12]
    tmp3 += z1 + z3;
 8013cd6:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8013cda:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013cde:	eb05 090c 	add.w	r9, r5, ip
 8013ce2:	4d2b      	ldr	r5, [pc, #172]	; (8013d90 <jpeg_idct_8x4+0x1e8>)
    tmp1 += z1 + z3;
 8013ce4:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013ce8:	fb05 f909 	mul.w	r9, r5, r9
    tmp1 += z1 + z3;
 8013cec:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8013cf0:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8013cf2:	4449      	add	r1, r9
 8013cf4:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013cf8:	fb0a 3a05 	mla	sl, sl, r5, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013cfc:	9d02      	ldr	r5, [sp, #8]
    tmp2 += z1 + z2;
 8013cfe:	fb09 110c 	mla	r1, r9, ip, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d02:	eb06 0c02 	add.w	ip, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013d06:	1ab6      	subs	r6, r6, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
			    & RANGE_MASK];
 8013d0a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
			    & RANGE_MASK];
 8013d0e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d12:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8013d16:	f805 c003 	strb.w	ip, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013d1a:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013d1c:	f81e 2006 	ldrb.w	r2, [lr, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013d20:	1a5d      	subs	r5, r3, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013d22:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013d24:	185a      	adds	r2, r3, r1
			    & RANGE_MASK];
 8013d26:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8013d2a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013d2e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013d32:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013d34:	f81e 2005 	ldrb.w	r2, [lr, r5]
 8013d38:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013d3a:	eb0b 020a 	add.w	r2, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013d3e:	ebab 0b0a 	sub.w	fp, fp, sl
			    & RANGE_MASK];
 8013d42:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8013d46:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013d4a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013d4e:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013d50:	f81e 300b 	ldrb.w	r3, [lr, fp]
 8013d54:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013d56:	9b00      	ldr	r3, [sp, #0]
 8013d58:	443b      	add	r3, r7
			    & RANGE_MASK];
 8013d5a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013d5e:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8013d62:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013d64:	9b00      	ldr	r3, [sp, #0]
 8013d66:	1bdb      	subs	r3, r3, r7
			    & RANGE_MASK];
 8013d68:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013d6c:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8013d70:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8013d72:	9b03      	ldr	r3, [sp, #12]
 8013d74:	4543      	cmp	r3, r8
 8013d76:	f47f af65 	bne.w	8013c44 <jpeg_idct_8x4+0x9c>
  }
}
 8013d7a:	b025      	add	sp, #148	; 0x94
 8013d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d80:	ffffc4df 	.word	0xffffc4df
 8013d84:	ffffc13b 	.word	0xffffc13b
 8013d88:	fffff384 	.word	0xfffff384
 8013d8c:	ffffe333 	.word	0xffffe333
 8013d90:	ffffadfd 	.word	0xffffadfd

08013d94 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d98:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013d9a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013d9e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013da0:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013da4:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013da6:	3080      	adds	r0, #128	; 0x80
 8013da8:	f102 040a 	add.w	r4, r2, #10
 8013dac:	f1a1 0c04 	sub.w	ip, r1, #4
 8013db0:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013db2:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013db6:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013dba:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013dbc:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013dc0:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013dc2:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013dc6:	f9be a010 	ldrsh.w	sl, [lr, #16]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013dca:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013dcc:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013dd0:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8013dd4:	f9be 6020 	ldrsh.w	r6, [lr, #32]
    tmp0 <<= CONST_BITS;
 8013dd8:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ddc:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013de0:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013de4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013de8:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013dec:	fb09 f606 	mul.w	r6, r9, r6
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013df0:	fb08 fa0a 	mul.w	sl, r8, sl
    tmp10 = tmp0 + tmp12;
 8013df4:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8013df8:	eba1 0146 	sub.w	r1, r1, r6, lsl #1

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013dfc:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013e00:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013e04:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013e08:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013e0c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013e10:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013e12:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013e16:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013e18:	d1d0      	bne.n	8013dbc <jpeg_idct_6x3+0x28>
 8013e1a:	f1a3 0e04 	sub.w	lr, r3, #4
 8013e1e:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013e22:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013e26:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8013e2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013e2c:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013e2e:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8013e32:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013e34:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013e38:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013e3c:	fb00 f401 	mul.w	r4, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013e40:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013e44:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8013e48:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = tmp0 + tmp10;
 8013e4c:	eb04 3143 	add.w	r1, r4, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8013e50:	ebc4 3343 	rsb	r3, r4, r3, lsl #13
 8013e54:	eba3 0304 	sub.w	r3, r3, r4
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013e58:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8013e5c:	fb00 f404 	mul.w	r4, r0, r4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013e60:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp10 = tmp1 + tmp0;
 8013e64:	eb01 0604 	add.w	r6, r1, r4
    tmp12 = tmp1 - tmp0;
 8013e68:	eba1 0104 	sub.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8013e6c:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013e70:	eb04 0508 	add.w	r5, r4, r8
 8013e74:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013e78:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8013e7c:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013e80:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013e84:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e88:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013e8a:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013e8e:	eba4 0408 	sub.w	r4, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013e92:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e96:	eb06 080c 	add.w	r8, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e9a:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8013e9e:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8013ea2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013ea6:	f810 8008 	ldrb.w	r8, [r0, r8]
 8013eaa:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013eac:	f80a 8000 	strb.w	r8, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013eb0:	9801      	ldr	r0, [sp, #4]
 8013eb2:	5d86      	ldrb	r6, [r0, r6]
 8013eb4:	717e      	strb	r6, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013eb6:	eb03 3644 	add.w	r6, r3, r4, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013eba:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
			    & RANGE_MASK];
 8013ebe:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8013ec2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013ec6:	5d86      	ldrb	r6, [r0, r6]
 8013ec8:	707e      	strb	r6, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013eca:	5cc3      	ldrb	r3, [r0, r3]
 8013ecc:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013ece:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013ed2:	eba1 0105 	sub.w	r1, r1, r5
			    & RANGE_MASK];
 8013ed6:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013eda:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013ede:	5cc3      	ldrb	r3, [r0, r3]
 8013ee0:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013ee2:	5c43      	ldrb	r3, [r0, r1]
 8013ee4:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8013ee6:	d19c      	bne.n	8013e22 <jpeg_idct_6x3+0x8e>
  }
}
 8013ee8:	b015      	add	sp, #84	; 0x54
 8013eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013ef0 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef4:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ef6:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8013efa:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8013efc:	1e97      	subs	r7, r2, #2
 8013efe:	f10d 0c08 	add.w	ip, sp, #8
 8013f02:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013f04:	3e04      	subs	r6, #4
 8013f06:	3206      	adds	r2, #6
 8013f08:	4660      	mov	r0, ip
{
 8013f0a:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f0c:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
 8013f10:	f856 4f04 	ldr.w	r4, [r6, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013f14:	42ba      	cmp	r2, r7
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f16:	fb04 f101 	mul.w	r1, r4, r1

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013f1a:	6a33      	ldr	r3, [r6, #32]
 8013f1c:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8013f20:	fb03 f404 	mul.w	r4, r3, r4

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013f24:	eb01 0e04 	add.w	lr, r1, r4
    wsptr[4*1] = tmp10 - tmp0;
 8013f28:	eba1 0104 	sub.w	r1, r1, r4
    wsptr[4*0] = tmp10 + tmp0;
 8013f2c:	f84c eb04 	str.w	lr, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8013f30:	f8cc 100c 	str.w	r1, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013f34:	d1ea      	bne.n	8013f0c <jpeg_idct_4x2+0x1c>
 8013f36:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013f38:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013f3c:	f641 097e 	movw	r9, #6270	; 0x187e
 8013f40:	f1a3 0c04 	sub.w	ip, r3, #4
    tmp0 = wsptr[0] + (ONE << 2);
 8013f44:	6804      	ldr	r4, [r0, #0]
 8013f46:	46e0      	mov	r8, ip
    tmp2 = wsptr[2];
 8013f48:	6882      	ldr	r2, [r0, #8]
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8013f4a:	3010      	adds	r0, #16
    z3 = wsptr[3];
 8013f4c:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp0 = wsptr[0] + (ONE << 2);
 8013f50:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8013f52:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013f56:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013f5a:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013f5c:	19ca      	adds	r2, r1, r7
    outptr = output_buf[ctr] + output_col;
 8013f5e:	f85c ef04 	ldr.w	lr, [ip, #4]!
 8013f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013f64:	fb0a f202 	mul.w	r2, sl, r2
    outptr = output_buf[ctr] + output_col;
 8013f68:	eb0e 0603 	add.w	r6, lr, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013f6c:	4b12      	ldr	r3, [pc, #72]	; (8013fb8 <jpeg_idct_4x2+0xc8>)
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013f6e:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013f72:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013f76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f78:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013f7c:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8013f80:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8013f84:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013f88:	5def      	ldrb	r7, [r5, r7]
 8013f8a:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013f8e:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8013f90:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013f92:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013f94:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013f98:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8013f9c:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013f9e:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013fa2:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013fa6:	5c69      	ldrb	r1, [r5, r1]
 8013fa8:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013faa:	5caa      	ldrb	r2, [r5, r2]
 8013fac:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013fae:	d1c9      	bne.n	8013f44 <jpeg_idct_4x2+0x54>
  }
}
 8013fb0:	b00b      	add	sp, #44	; 0x2c
 8013fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb6:	bf00      	nop
 8013fb8:	ffffc4df 	.word	0xffffc4df

08013fbc <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013fbc:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013fbe:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8013fc4:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013fc6:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013fc8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013fcc:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013fce:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013fd2:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013fd4:	437b      	muls	r3, r7
{
 8013fd6:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8013fd8:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013fda:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8013fdc:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013fde:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013fe0:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013fe2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013fe6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013fea:	5c41      	ldrb	r1, [r0, r1]
 8013fec:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013fee:	5cc3      	ldrb	r3, [r0, r3]
 8013ff0:	7073      	strb	r3, [r6, #1]
}
 8013ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ff4 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013ffc:	f1a2 0b02 	sub.w	fp, r2, #2
 8014000:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014002:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014006:	3380      	adds	r3, #128	; 0x80
 8014008:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801400a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 801400c:	f1a3 0804 	sub.w	r8, r3, #4
 8014010:	f102 030e 	add.w	r3, r2, #14
 8014014:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8014016:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014018:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801401c:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014020:	f858 1f04 	ldr.w	r1, [r8, #4]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014024:	f642 4563 	movw	r5, #11363	; 0x2c63
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014028:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801402c:	f245 2e03 	movw	lr, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014030:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014032:	f8d8 1080 	ldr.w	r1, [r8, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014036:	f9bb c060 	ldrsh.w	ip, [fp, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801403a:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801403c:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 801403e:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014040:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014048:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801404a:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801404c:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
    tmp10 = tmp0 + tmp1;
 8014050:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8014052:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8014054:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8014056:	eba2 0a01 	sub.w	sl, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801405a:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801405e:	4acf      	ldr	r2, [pc, #828]	; (801439c <jpeg_idct_8x16+0x3a8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014060:	fb01 f904 	mul.w	r9, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014064:	f8d8 10c0 	ldr.w	r1, [r8, #192]	; 0xc0
 8014068:	fb01 fc0c 	mul.w	ip, r1, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801406c:	f640 01d4 	movw	r1, #2260	; 0x8d4
    z3 = z1 - z2;
 8014070:	eba9 040c 	sub.w	r4, r9, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014074:	4361      	muls	r1, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014076:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014078:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801407c:	fb0e 4e0c 	mla	lr, lr, ip, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014080:	fb02 4409 	mla	r4, r2, r9, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014084:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014088:	fb05 1509 	mla	r5, r5, r9, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801408c:	f242 79e9 	movw	r9, #10217	; 0x27e9
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014090:	fb02 110c 	mla	r1, r2, ip, r1
    tmp20 = tmp10 + tmp0;
 8014094:	eb07 020e 	add.w	r2, r7, lr
 8014098:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 801409a:	eba7 020e 	sub.w	r2, r7, lr
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801409e:	f640 5723 	movw	r7, #3363	; 0xd23
    tmp27 = tmp10 - tmp0;
 80140a2:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80140a4:	1972      	adds	r2, r6, r5
 80140a6:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80140a8:	1b72      	subs	r2, r6, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140aa:	f9bb 5050 	ldrsh.w	r5, [fp, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 80140ae:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80140b0:	eb0a 0204 	add.w	r2, sl, r4
 80140b4:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80140b6:	ebaa 0204 	sub.w	r2, sl, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140ba:	f8d8 40e0 	ldr.w	r4, [r8, #224]	; 0xe0
    tmp25 = tmp13 - tmp2;
 80140be:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80140c0:	1842      	adds	r2, r0, r1
 80140c2:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80140c4:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140c6:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = tmp11 - tmp3;
 80140ca:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140cc:	f8d8 2020 	ldr.w	r2, [r8, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80140d0:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140d4:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80140d6:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
 80140da:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80140dc:	f8d8 00a0 	ldr.w	r0, [r8, #160]	; 0xa0
 80140e0:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140e2:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80140e6:	188e      	adds	r6, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80140e8:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80140ea:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 80140ee:	eb01 0a05 	add.w	sl, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80140f2:	4366      	muls	r6, r4
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80140f4:	eb01 0e00 	add.w	lr, r1, r0
 80140f8:	f242 24fc 	movw	r4, #8956	; 0x22fc
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80140fc:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8014100:	fb09 f90a 	mul.w	r9, r9, sl
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014104:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8014108:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 801410c:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8014110:	f241 5455 	movw	r4, #5461	; 0x1555
 8014114:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014118:	1a8c      	subs	r4, r1, r2
 801411a:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 801411c:	eb06 0709 	add.w	r7, r6, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014120:	9409      	str	r4, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014122:	4477      	add	r7, lr
 8014124:	4c9e      	ldr	r4, [pc, #632]	; (80143a0 <jpeg_idct_8x16+0x3ac>)
 8014126:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801412a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 801412c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801412e:	eb0c 040a 	add.w	r4, ip, sl
 8014132:	443c      	add	r4, r7
 8014134:	4f9b      	ldr	r7, [pc, #620]	; (80143a4 <jpeg_idct_8x16+0x3b0>)
 8014136:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801413a:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801413c:	4f9a      	ldr	r7, [pc, #616]	; (80143a8 <jpeg_idct_8x16+0x3b4>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801413e:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014140:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8014144:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8014146:	f240 214d 	movw	r1, #589	; 0x24d
 801414a:	fb01 4102 	mla	r1, r1, r2, r4
 801414e:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014150:	4996      	ldr	r1, [pc, #600]	; (80143ac <jpeg_idct_8x16+0x3b8>)
 8014152:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014156:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014158:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801415a:	f642 5909 	movw	r9, #11529	; 0x2d09
 801415e:	fb09 f101 	mul.w	r1, r9, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014162:	fb07 1905 	mla	r9, r7, r5, r1
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014166:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014168:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801416a:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801416e:	fb0a 1102 	mla	r1, sl, r2, r1
    z2    += z4;
 8014172:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014174:	eb01 0a07 	add.w	sl, r1, r7
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014178:	498d      	ldr	r1, [pc, #564]	; (80143b0 <jpeg_idct_8x16+0x3bc>)
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801417a:	f242 2718 	movw	r7, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801417e:	4351      	muls	r1, r2
    tmp1  += z1;
 8014180:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014182:	fb07 1100 	mla	r1, r7, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8014186:	4f8b      	ldr	r7, [pc, #556]	; (80143b4 <jpeg_idct_8x16+0x3c0>)
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014188:	4471      	add	r1, lr
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801418a:	f246 4e85 	movw	lr, #25733	; 0x6485
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801418e:	437a      	muls	r2, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014190:	fb0e 2e00 	mla	lr, lr, r0, r2
    tmp12 += z2;
 8014194:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014196:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801419a:	44e6      	add	lr, ip
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801419c:	eb05 0c00 	add.w	ip, r5, r0
 80141a0:	4457      	add	r7, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80141a2:	1b40      	subs	r0, r0, r5
 80141a4:	f640 5523 	movw	r5, #3363	; 0xd23
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80141a8:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80141ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80141ae:	4368      	muls	r0, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80141b0:	9d01      	ldr	r5, [sp, #4]
    tmp2  += z2;
 80141b2:	4464      	add	r4, ip
    tmp3  += z2;
 80141b4:	4461      	add	r1, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80141b6:	443d      	add	r5, r7
    tmp10 += z2;
 80141b8:	4486      	add	lr, r0
    tmp11 += z2;
 80141ba:	4448      	add	r0, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80141bc:	12ed      	asrs	r5, r5, #11
 80141be:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80141c2:	9d01      	ldr	r5, [sp, #4]
 80141c4:	1bed      	subs	r5, r5, r7
 80141c6:	12ed      	asrs	r5, r5, #11
 80141c8:	f8c3 51dc 	str.w	r5, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80141cc:	9d03      	ldr	r5, [sp, #12]
 80141ce:	4435      	add	r5, r6
 80141d0:	12ed      	asrs	r5, r5, #11
 80141d2:	61dd      	str	r5, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80141d4:	9d03      	ldr	r5, [sp, #12]
 80141d6:	1bad      	subs	r5, r5, r6
 80141d8:	12ed      	asrs	r5, r5, #11
 80141da:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80141de:	9d05      	ldr	r5, [sp, #20]
 80141e0:	4425      	add	r5, r4
 80141e2:	12ed      	asrs	r5, r5, #11
 80141e4:	63dd      	str	r5, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80141e6:	9d05      	ldr	r5, [sp, #20]
 80141e8:	1b2c      	subs	r4, r5, r4
 80141ea:	12e4      	asrs	r4, r4, #11
 80141ec:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80141f0:	9c07      	ldr	r4, [sp, #28]
 80141f2:	440c      	add	r4, r1
 80141f4:	12e4      	asrs	r4, r4, #11
 80141f6:	65dc      	str	r4, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80141f8:	9c07      	ldr	r4, [sp, #28]
 80141fa:	1a61      	subs	r1, r4, r1
 80141fc:	12c9      	asrs	r1, r1, #11
 80141fe:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8014202:	9908      	ldr	r1, [sp, #32]
 8014204:	4471      	add	r1, lr
 8014206:	12c9      	asrs	r1, r1, #11
 8014208:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 801420a:	9908      	ldr	r1, [sp, #32]
 801420c:	eba1 010e 	sub.w	r1, r1, lr
 8014210:	12c9      	asrs	r1, r1, #11
 8014212:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8014216:	9906      	ldr	r1, [sp, #24]
 8014218:	4401      	add	r1, r0
 801421a:	12c9      	asrs	r1, r1, #11
 801421c:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014220:	9906      	ldr	r1, [sp, #24]
 8014222:	1a09      	subs	r1, r1, r0
 8014224:	12c9      	asrs	r1, r1, #11
 8014226:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801422a:	9904      	ldr	r1, [sp, #16]
 801422c:	4411      	add	r1, r2
 801422e:	12c9      	asrs	r1, r1, #11
 8014230:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014234:	9904      	ldr	r1, [sp, #16]
 8014236:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014238:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801423a:	12d2      	asrs	r2, r2, #11
 801423c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014240:	9a02      	ldr	r2, [sp, #8]
 8014242:	440a      	add	r2, r1
 8014244:	12d2      	asrs	r2, r2, #11
 8014246:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801424a:	9a02      	ldr	r2, [sp, #8]
 801424c:	1a52      	subs	r2, r2, r1
 801424e:	12d2      	asrs	r2, r2, #11
 8014250:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014254:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014256:	455a      	cmp	r2, fp
 8014258:	f47f aede 	bne.w	8014018 <jpeg_idct_8x16+0x24>
 801425c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801425e:	a80e      	add	r0, sp, #56	; 0x38
 8014260:	f1a3 0904 	sub.w	r9, r3, #4
 8014264:	333c      	adds	r3, #60	; 0x3c
 8014266:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014268:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801426c:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8014270:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014272:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8014274:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8014278:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 801427a:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 801427e:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014280:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8014282:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp0 = (INT32) wsptr[7];
 8014286:	f850 bc04 	ldr.w	fp, [r0, #-4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801428a:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801428c:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp1 = (INT32) wsptr[5];
 8014290:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014294:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014298:	4c47      	ldr	r4, [pc, #284]	; (80143b8 <jpeg_idct_8x16+0x3c4>)
    tmp2 = (INT32) wsptr[3];
 801429a:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801429e:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80142a2:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp3 = (INT32) wsptr[1];
 80142a6:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80142aa:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 80142ac:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 80142ae:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 80142b0:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80142b4:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 80142b8:	eb0b 040e 	add.w	r4, fp, lr
    tmp11 = tmp1 + tmp3;
 80142bc:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80142c0:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 80142c2:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 80142c6:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 80142ca:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80142cc:	f242 53a1 	movw	r3, #9633	; 0x25a1
 80142d0:	1862      	adds	r2, r4, r1
 80142d2:	435a      	muls	r2, r3
    z2 += z1;
 80142d4:	4b39      	ldr	r3, [pc, #228]	; (80143bc <jpeg_idct_8x16+0x3c8>)
 80142d6:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 80142da:	4b39      	ldr	r3, [pc, #228]	; (80143c0 <jpeg_idct_8x16+0x3cc>)
 80142dc:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80142e0:	eb0b 010a 	add.w	r1, fp, sl
 80142e4:	4b37      	ldr	r3, [pc, #220]	; (80143c4 <jpeg_idct_8x16+0x3d0>)
 80142e6:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 80142e8:	f640 138e 	movw	r3, #2446	; 0x98e
 80142ec:	eb04 0c01 	add.w	ip, r4, r1
    tmp3 += z1 + z3;
 80142f0:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 80142f2:	fb03 cc0b 	mla	ip, r3, fp, ip
    tmp3 += z1 + z3;
 80142f6:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80142fa:	4b33      	ldr	r3, [pc, #204]	; (80143c8 <jpeg_idct_8x16+0x3d4>)
    tmp3 += z1 + z3;
 80142fc:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014300:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8014304:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014308:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801430c:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 801430e:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8014310:	4454      	add	r4, sl
    tmp1 += z1 + z3;
 8014312:	fb0b 2b08 	mla	fp, fp, r8, r2
    tmp2 += z1 + z2;
 8014316:	f246 2854 	movw	r8, #25172	; 0x6254
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801431a:	9a98      	ldr	r2, [sp, #608]	; 0x260
    tmp2 += z1 + z2;
 801431c:	fb08 440e 	mla	r4, r8, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014320:	eb07 0e01 	add.w	lr, r7, r1
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014324:	1a7f      	subs	r7, r7, r1
			    & RANGE_MASK];
 8014326:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 801432a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801432e:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8014332:	9b03      	ldr	r3, [sp, #12]
 8014334:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014338:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801433a:	9a00      	ldr	r2, [sp, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801433c:	5dd9      	ldrb	r1, [r3, r7]
 801433e:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014340:	1931      	adds	r1, r6, r4
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014342:	1b36      	subs	r6, r6, r4
			    & RANGE_MASK];
 8014344:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014348:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801434c:	5c59      	ldrb	r1, [r3, r1]
 801434e:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014350:	5d99      	ldrb	r1, [r3, r6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014352:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014354:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014356:	eb03 010b 	add.w	r1, r3, fp
 801435a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801435c:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014360:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014362:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014364:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014366:	eba3 030b 	sub.w	r3, r3, fp
			    & RANGE_MASK];
 801436a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801436e:	5cd3      	ldrb	r3, [r2, r3]
 8014370:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014372:	9b01      	ldr	r3, [sp, #4]
 8014374:	4463      	add	r3, ip
			    & RANGE_MASK];
 8014376:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801437a:	5cd3      	ldrb	r3, [r2, r3]
 801437c:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801437e:	9b01      	ldr	r3, [sp, #4]
 8014380:	eba3 030c 	sub.w	r3, r3, ip
			    & RANGE_MASK];
 8014384:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014388:	5cd3      	ldrb	r3, [r2, r3]
 801438a:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 801438c:	9b04      	ldr	r3, [sp, #16]
 801438e:	454b      	cmp	r3, r9
 8014390:	f47f af6a 	bne.w	8014268 <jpeg_idct_8x16+0x274>
  }
}
 8014394:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8014398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801439c:	ffffecc2 	.word	0xffffecc2
 80143a0:	ffffb6d6 	.word	0xffffb6d6
 80143a4:	ffffc542 	.word	0xffffc542
 80143a8:	ffffe77a 	.word	0xffffe77a
 80143ac:	ffffdbfa 	.word	0xffffdbfa
 80143b0:	ffffeaab 	.word	0xffffeaab
 80143b4:	ffffd817 	.word	0xffffd817
 80143b8:	ffffc4df 	.word	0xffffc4df
 80143bc:	ffffc13b 	.word	0xffffc13b
 80143c0:	fffff384 	.word	0xfffff384
 80143c4:	ffffe333 	.word	0xffffe333
 80143c8:	ffffadfd 	.word	0xffffadfd

080143cc <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80143cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d0:	b0ef      	sub	sp, #444	; 0x1bc
 80143d2:	f1a2 0e02 	sub.w	lr, r2, #2
 80143d6:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80143d8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80143dc:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80143de:	3380      	adds	r3, #128	; 0x80
 80143e0:	3804      	subs	r0, #4
 80143e2:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80143e4:	f102 030c 	add.w	r3, r2, #12
 80143e8:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 80143ea:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143ec:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80143f0:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143f4:	f850 1f04 	ldr.w	r1, [r0, #4]!
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80143f8:	f46f 6aa2 	mvn.w	sl, #1296	; 0x510
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80143fc:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8014400:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014402:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014404:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014408:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801440a:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 801440e:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014410:	fb01 f704 	mul.w	r7, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014414:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801441c:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014420:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8014424:	19d6      	adds	r6, r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014426:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014428:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 801442a:	eb02 050c 	add.w	r5, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801442e:	f9be c020 	ldrsh.w	ip, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014432:	1b3f      	subs	r7, r7, r4
    tmp12 = z1 - z4;
 8014434:	eba2 0904 	sub.w	r9, r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014438:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801443c:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014440:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014444:	49b4      	ldr	r1, [pc, #720]	; (8014718 <jpeg_idct_7x14+0x34c>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014446:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014448:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801444a:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801444e:	f9be 2060 	ldrsh.w	r2, [lr, #96]	; 0x60
 8014452:	4362      	muls	r2, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014454:	eb0c 0402 	add.w	r4, ip, r2
 8014458:	437c      	muls	r4, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801445a:	f640 07bd 	movw	r7, #2237	; 0x8bd
 801445e:	fb07 470c 	mla	r7, r7, ip, r4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014462:	fb01 4402 	mla	r4, r1, r2, r4
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014466:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 801446a:	434a      	muls	r2, r1
    tmp20 = tmp10 + tmp13;
 801446c:	19f1      	adds	r1, r6, r7
 801446e:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8014470:	1bf1      	subs	r1, r6, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014472:	fb08 220c 	mla	r2, r8, ip, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014476:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp26 = tmp10 - tmp13;
 801447a:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 801447c:	1929      	adds	r1, r5, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801447e:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp21 = tmp11 + tmp14;
 8014482:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8014484:	1b29      	subs	r1, r5, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014486:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801448a:	f242 6552 	movw	r5, #9810	; 0x2652
    tmp25 = tmp11 - tmp14;
 801448e:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8014490:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 8014494:	eba9 0202 	sub.w	r2, r9, r2
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8014498:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 801449c:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 801449e:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80144a0:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80144a2:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80144a6:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80144a8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80144aa:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80144ac:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 80144b0:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80144b2:	f9be 2070 	ldrsh.w	r2, [lr, #112]	; 0x70
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80144b6:	eb04 0c07 	add.w	ip, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80144ba:	434a      	muls	r2, r1
    tmp14 = z1 + z3;
 80144bc:	eb04 0b06 	add.w	fp, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80144c0:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80144c4:	fb05 f50b 	mul.w	r5, r5, fp
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80144c8:	fb01 fc0c 	mul.w	ip, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80144cc:	4993      	ldr	r1, [pc, #588]	; (801471c <jpeg_idct_7x14+0x350>)
 80144ce:	eb0c 0805 	add.w	r8, ip, r5
 80144d2:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 80144d6:	fb01 8804 	mla	r8, r1, r4, r8
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80144da:	f641 0114 	movw	r1, #6164	; 0x1814
 80144de:	fb01 fb0b 	mul.w	fp, r1, fp
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80144e2:	498f      	ldr	r1, [pc, #572]	; (8014720 <jpeg_idct_7x14+0x354>)
 80144e4:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 80144e8:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80144ea:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 80144ee:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80144f0:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80144f4:	4c8b      	ldr	r4, [pc, #556]	; (8014724 <jpeg_idct_7x14+0x358>)
    tmp16 += tmp15;
 80144f6:	4449      	add	r1, r9
 80144f8:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80144fa:	19b9      	adds	r1, r7, r6
 80144fc:	fb0a f101 	mul.w	r1, sl, r1
 8014500:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014504:	fb04 1a07 	mla	sl, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014508:	4c87      	ldr	r4, [pc, #540]	; (8014728 <jpeg_idct_7x14+0x35c>)
 801450a:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801450e:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014510:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014514:	4c85      	ldr	r4, [pc, #532]	; (801472c <jpeg_idct_7x14+0x360>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014516:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014518:	1bf5      	subs	r5, r6, r7
 801451a:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801451e:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8014522:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8014526:	9c07      	ldr	r4, [sp, #28]
 8014528:	4422      	add	r2, r4

    tmp13 = (z1 - z3) << PASS1_BITS;

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801452a:	9c01      	ldr	r4, [sp, #4]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801452c:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801452e:	f241 5b99 	movw	fp, #5529	; 0x1599
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014532:	4444      	add	r4, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8014534:	1b92      	subs	r2, r2, r6
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014536:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801453a:	12e4      	asrs	r4, r4, #11
    tmp13 = (z1 - z3) << PASS1_BITS;
 801453c:	0092      	lsls	r2, r2, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801453e:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014540:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014544:	9c01      	ldr	r4, [sp, #4]
 8014546:	eba4 0408 	sub.w	r4, r4, r8
 801454a:	12e4      	asrs	r4, r4, #11
 801454c:	f8c3 4168 	str.w	r4, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014550:	9c03      	ldr	r4, [sp, #12]
 8014552:	4454      	add	r4, sl
 8014554:	12e4      	asrs	r4, r4, #11
 8014556:	619c      	str	r4, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014558:	9c03      	ldr	r4, [sp, #12]
 801455a:	eba4 040a 	sub.w	r4, r4, sl
 801455e:	12e4      	asrs	r4, r4, #11
 8014560:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014564:	9c05      	ldr	r4, [sp, #20]
 8014566:	440c      	add	r4, r1
 8014568:	12e4      	asrs	r4, r4, #11
 801456a:	635c      	str	r4, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801456c:	9c05      	ldr	r4, [sp, #20]
 801456e:	1a61      	subs	r1, r4, r1
 8014570:	12c9      	asrs	r1, r1, #11
 8014572:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8014576:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014578:	eb02 21e1 	add.w	r1, r2, r1, asr #11
 801457c:	6519      	str	r1, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801457e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014580:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014584:	9908      	ldr	r1, [sp, #32]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8014586:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801458a:	9a06      	ldr	r2, [sp, #24]
 801458c:	4462      	add	r2, ip
 801458e:	12d2      	asrs	r2, r2, #11
 8014590:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014592:	9a06      	ldr	r2, [sp, #24]
 8014594:	eba2 020c 	sub.w	r2, r2, ip
 8014598:	12d2      	asrs	r2, r2, #11
 801459a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801459e:	9a04      	ldr	r2, [sp, #16]
 80145a0:	442a      	add	r2, r5
 80145a2:	12d2      	asrs	r2, r2, #11
 80145a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80145a8:	9a04      	ldr	r2, [sp, #16]
 80145aa:	1b52      	subs	r2, r2, r5
 80145ac:	12d2      	asrs	r2, r2, #11
 80145ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80145b2:	9a02      	ldr	r2, [sp, #8]
 80145b4:	440a      	add	r2, r1
 80145b6:	12d2      	asrs	r2, r2, #11
 80145b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80145bc:	9a02      	ldr	r2, [sp, #8]
 80145be:	1a52      	subs	r2, r2, r1
 80145c0:	12d2      	asrs	r2, r2, #11
 80145c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80145c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80145c8:	4572      	cmp	r2, lr
 80145ca:	f47f af0f 	bne.w	80143ec <jpeg_idct_7x14+0x20>
 80145ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 80145d0:	ac0c      	add	r4, sp, #48	; 0x30
 80145d2:	f1a3 0904 	sub.w	r9, r3, #4
 80145d6:	3334      	adds	r3, #52	; 0x34
 80145d8:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80145da:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 80145de:	341c      	adds	r4, #28
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80145e0:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    outptr = output_buf[ctr] + output_col;
 80145e4:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
 80145e6:	9303      	str	r3, [sp, #12]
 80145e8:	189e      	adds	r6, r3, r2
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80145ea:	f107 0310 	add.w	r3, r7, #16
    z3 = (INT32) wsptr[6];
 80145ee:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80145f2:	9301      	str	r3, [sp, #4]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80145f4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z1 = (INT32) wsptr[2];
 80145f8:	f854 5c14 	ldr.w	r5, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 80145fc:	eba3 0c01 	sub.w	ip, r3, r1
 8014600:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014604:	4f4a      	ldr	r7, [pc, #296]	; (8014730 <jpeg_idct_7x14+0x364>)
    tmp10 = z1 + z3;
 8014606:	eb05 0801 	add.w	r8, r5, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801460a:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801460e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8014612:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014616:	1aea      	subs	r2, r5, r3
 8014618:	f640 2312 	movw	r3, #2578	; 0xa12
    z3 = (INT32) wsptr[5];
 801461c:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014620:	435a      	muls	r2, r3
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014622:	9b01      	ldr	r3, [sp, #4]
 8014624:	eb0c 0002 	add.w	r0, ip, r2
 8014628:	eb00 3043 	add.w	r0, r0, r3, lsl #13
 801462c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8014630:	fb07 0003 	mla	r0, r7, r3, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014634:	f642 03c6 	movw	r3, #10438	; 0x28c6
 8014638:	9f01      	ldr	r7, [sp, #4]
 801463a:	fb03 f308 	mul.w	r3, r3, r8
 801463e:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014642:	f46f 771f 	mvn.w	r7, #636	; 0x27c
 8014646:	fb07 3101 	mla	r1, r7, r1, r3
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801464a:	4f3a      	ldr	r7, [pc, #232]	; (8014734 <jpeg_idct_7x14+0x368>)
 801464c:	fb07 3305 	mla	r3, r7, r5, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014650:	f240 5773 	movw	r7, #1395	; 0x573
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014654:	4461      	add	r1, ip
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014656:	4413      	add	r3, r2
    z1 = (INT32) wsptr[1];
 8014658:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801465c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801465e:	eb02 0b0a 	add.w	fp, r2, sl
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014662:	eba2 050a 	sub.w	r5, r2, sl
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014666:	f641 53ef 	movw	r3, #7663	; 0x1def
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801466a:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801466c:	44f2      	add	sl, lr
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801466e:	fb03 fb0b 	mul.w	fp, r3, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014672:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014674:	437d      	muls	r5, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014676:	4f30      	ldr	r7, [pc, #192]	; (8014738 <jpeg_idct_7x14+0x36c>)
    tmp10 = tmp11 - tmp12;
 8014678:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 801467c:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801467e:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014682:	fb07 fa0a 	mul.w	sl, r7, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014686:	9f00      	ldr	r7, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014688:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801468c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8014690:	4455      	add	r5, sl
    tmp10 += z2;
 8014692:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014694:	fb0b 220e 	mla	r2, fp, lr, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014698:	eb01 0e0c 	add.w	lr, r1, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801469c:	eba1 010c 	sub.w	r1, r1, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80146a0:	4452      	add	r2, sl
			    & RANGE_MASK];
 80146a2:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 80146a6:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80146aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80146ae:	9f03      	ldr	r7, [sp, #12]
 80146b0:	f807 e003 	strb.w	lr, [r7, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80146b4:	9b00      	ldr	r3, [sp, #0]
 80146b6:	5c59      	ldrb	r1, [r3, r1]
 80146b8:	71b1      	strb	r1, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80146ba:	1941      	adds	r1, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146bc:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 80146be:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 80146c2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80146c6:	5c59      	ldrb	r1, [r3, r1]
 80146c8:	7071      	strb	r1, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146ca:	5c19      	ldrb	r1, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146cc:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80146ce:	7171      	strb	r1, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146d0:	1899      	adds	r1, r3, r2
 80146d2:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80146d4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80146d8:	5c59      	ldrb	r1, [r3, r1]
 80146da:	70b1      	strb	r1, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146dc:	9b02      	ldr	r3, [sp, #8]
 80146de:	1a9b      	subs	r3, r3, r2
 80146e0:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 80146e2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146e6:	5cd3      	ldrb	r3, [r2, r3]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80146e8:	f642 5241 	movw	r2, #11585	; 0x2d41
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80146ec:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 80146ee:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80146f2:	eba3 0308 	sub.w	r3, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80146f6:	4353      	muls	r3, r2
 80146f8:	9a01      	ldr	r2, [sp, #4]
 80146fa:	eb03 3342 	add.w	r3, r3, r2, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80146fe:	9a00      	ldr	r2, [sp, #0]
			    & RANGE_MASK];
 8014700:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8014704:	5cd3      	ldrb	r3, [r2, r3]
 8014706:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8014708:	9b04      	ldr	r3, [sp, #16]
 801470a:	454b      	cmp	r3, r9
 801470c:	f47f af65 	bne.w	80145da <jpeg_idct_7x14+0x20e>
  }
}
 8014710:	b06f      	add	sp, #444	; 0x1bc
 8014712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014716:	bf00      	nop
 8014718:	ffffc8fc 	.word	0xffffc8fc
 801471c:	ffffdbf0 	.word	0xffffdbf0
 8014720:	ffffde0b 	.word	0xffffde0b
 8014724:	fffff26e 	.word	0xfffff26e
 8014728:	ffffb409 	.word	0xffffb409
 801472c:	ffffc9e6 	.word	0xffffc9e6
 8014730:	ffffc515 	.word	0xffffc515
 8014734:	ffffb0f1 	.word	0xffffb0f1
 8014738:	ffffd3e1 	.word	0xffffd3e1

0801473c <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014740:	b0d3      	sub	sp, #332	; 0x14c
 8014742:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014744:	f1a2 0902 	sub.w	r9, r2, #2
 8014748:	9308      	str	r3, [sp, #32]
 801474a:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801474c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014750:	3380      	adds	r3, #128	; 0x80
 8014752:	9300      	str	r3, [sp, #0]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014754:	f102 030a 	add.w	r3, r2, #10
 8014758:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 801475a:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801475c:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014760:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014762:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp11 = z3 - z4;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
    z1 <<= CONST_BITS;
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014766:	f9b9 4060 	ldrsh.w	r4, [r9, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801476a:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801476e:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014770:	f9b9 2040 	ldrsh.w	r2, [r9, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014774:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    z3 <<= CONST_BITS;
 8014778:	037f      	lsls	r7, r7, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801477a:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801477c:	f242 7031 	movw	r0, #10033	; 0x2731
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014780:	f9b9 6020 	ldrsh.w	r6, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014784:	436c      	muls	r4, r5
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014786:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014788:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801478a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 <<= CONST_BITS;
 801478e:	0364      	lsls	r4, r4, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014790:	4346      	muls	r6, r0
    tmp10 = z3 + z4;
 8014792:	eb07 0c02 	add.w	ip, r7, r2
    tmp11 = z3 - z4;
 8014796:	eba7 0e02 	sub.w	lr, r7, r2

    tmp12 = z1 - z2;
 801479a:	ebc4 3546 	rsb	r5, r4, r6, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801479e:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 80147a2:	fb02 f006 	mul.w	r0, r2, r6

    tmp21 = z3 + tmp12;
 80147a6:	197a      	adds	r2, r7, r5
 80147a8:	9201      	str	r2, [sp, #4]
    tmp24 = z3 - tmp12;
 80147aa:	1b7a      	subs	r2, r7, r5

    tmp12 = z4 + z2;
 80147ac:	1905      	adds	r5, r0, r4

    tmp20 = tmp10 + tmp12;
    tmp25 = tmp10 - tmp12;

    tmp12 = z4 - z1 - z2;
 80147ae:	eba0 3046 	sub.w	r0, r0, r6, lsl #13
    tmp24 = z3 - tmp12;
 80147b2:	9202      	str	r2, [sp, #8]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80147b4:	f641 368d 	movw	r6, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 80147b8:	eb0c 0205 	add.w	r2, ip, r5
    tmp12 = z4 - z1 - z2;
 80147bc:	1b00      	subs	r0, r0, r4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80147be:	4f87      	ldr	r7, [pc, #540]	; (80149dc <jpeg_idct_6x12+0x2a0>)
    tmp20 = tmp10 + tmp12;
 80147c0:	9203      	str	r2, [sp, #12]
    tmp25 = tmp10 - tmp12;
 80147c2:	ebac 0205 	sub.w	r2, ip, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147c6:	f9b9 c010 	ldrsh.w	ip, [r9, #16]
    tmp25 = tmp10 - tmp12;
 80147ca:	9204      	str	r2, [sp, #16]
    tmp22 = tmp11 + tmp12;
 80147cc:	eb0e 0200 	add.w	r2, lr, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80147d0:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    tmp22 = tmp11 + tmp12;
 80147d4:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 80147d6:	ebae 0200 	sub.w	r2, lr, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80147da:	f9b9 e030 	ldrsh.w	lr, [r9, #48]	; 0x30
    tmp23 = tmp11 - tmp12;
 80147de:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147e0:	6a0a      	ldr	r2, [r1, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147e2:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147e6:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80147ea:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80147ec:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80147f0:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 80147f4:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147f6:	f9b9 2070 	ldrsh.w	r2, [r9, #112]	; 0x70
    tmp10 = z1 + z3;
 80147fa:	eb0c 0b05 	add.w	fp, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147fe:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014800:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014804:	eb02 080b 	add.w	r8, r2, fp
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014808:	fb00 f40e 	mul.w	r4, r0, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801480c:	4874      	ldr	r0, [pc, #464]	; (80149e0 <jpeg_idct_6x12+0x2a4>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801480e:	fb06 f808 	mul.w	r8, r6, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8014812:	f640 065b 	movw	r6, #2139	; 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8014816:	fb00 f00e 	mul.w	r0, r0, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801481a:	fb06 8b0b 	mla	fp, r6, fp, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801481e:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8014822:	eb04 0a0b 	add.w	sl, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014826:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801482a:	fb06 a60c 	mla	r6, r6, ip, sl
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801482e:	eb05 0a02 	add.w	sl, r5, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014832:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014834:	4e6b      	ldr	r6, [pc, #428]	; (80149e4 <jpeg_idct_6x12+0x2a8>)
 8014836:	fb06 fa0a 	mul.w	sl, r6, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801483a:	eb00 060a 	add.w	r6, r0, sl
 801483e:	fb07 6605 	mla	r6, r7, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014842:	4f69      	ldr	r7, [pc, #420]	; (80149e8 <jpeg_idct_6x12+0x2ac>)
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8014844:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014848:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801484c:	445e      	add	r6, fp
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801484e:	fb07 000c 	mla	r0, r7, ip, r0
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014852:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014856:	4f65      	ldr	r7, [pc, #404]	; (80149ec <jpeg_idct_6x12+0x2b0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014858:	fb0b 4402 	mla	r4, fp, r2, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801485c:	fb07 0002 	mla	r0, r7, r2, r0
    z1 -= z4;
 8014860:	ebac 0202 	sub.w	r2, ip, r2
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014864:	4454      	add	r4, sl
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014866:	eb02 0c05 	add.w	ip, r2, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801486a:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801486c:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014870:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014874:	fb0e ce02 	mla	lr, lr, r2, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014878:	4a5d      	ldr	r2, [pc, #372]	; (80149f0 <jpeg_idct_6x12+0x2b4>)
 801487a:	fb02 cc05 	mla	ip, r2, r5, ip

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801487e:	9d03      	ldr	r5, [sp, #12]
 8014880:	9a07      	ldr	r2, [sp, #28]
 8014882:	442a      	add	r2, r5
 8014884:	12d2      	asrs	r2, r2, #11
 8014886:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801488a:	9a07      	ldr	r2, [sp, #28]
 801488c:	1aaf      	subs	r7, r5, r2
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801488e:	9a01      	ldr	r2, [sp, #4]
 8014890:	4472      	add	r2, lr
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014892:	12ff      	asrs	r7, r7, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014894:	12d2      	asrs	r2, r2, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014896:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801489a:	615a      	str	r2, [r3, #20]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801489c:	9a01      	ldr	r2, [sp, #4]
 801489e:	eba2 020e 	sub.w	r2, r2, lr
 80148a2:	12d2      	asrs	r2, r2, #11
 80148a4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80148a8:	9a05      	ldr	r2, [sp, #20]
 80148aa:	4432      	add	r2, r6
 80148ac:	12d2      	asrs	r2, r2, #11
 80148ae:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80148b0:	9a05      	ldr	r2, [sp, #20]
 80148b2:	1b92      	subs	r2, r2, r6
 80148b4:	12d2      	asrs	r2, r2, #11
 80148b6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80148ba:	9a06      	ldr	r2, [sp, #24]
 80148bc:	4422      	add	r2, r4
 80148be:	12d2      	asrs	r2, r2, #11
 80148c0:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80148c2:	9a06      	ldr	r2, [sp, #24]
 80148c4:	1b12      	subs	r2, r2, r4
 80148c6:	12d2      	asrs	r2, r2, #11
 80148c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80148cc:	9a02      	ldr	r2, [sp, #8]
 80148ce:	4462      	add	r2, ip
 80148d0:	12d2      	asrs	r2, r2, #11
 80148d2:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80148d4:	9a02      	ldr	r2, [sp, #8]
 80148d6:	eba2 020c 	sub.w	r2, r2, ip
 80148da:	12d2      	asrs	r2, r2, #11
 80148dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80148e0:	9a04      	ldr	r2, [sp, #16]
 80148e2:	4402      	add	r2, r0
 80148e4:	12d2      	asrs	r2, r2, #11
 80148e6:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80148e8:	9a04      	ldr	r2, [sp, #16]
 80148ea:	1a12      	subs	r2, r2, r0
 80148ec:	12d2      	asrs	r2, r2, #11
 80148ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80148f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148f4:	454a      	cmp	r2, r9
 80148f6:	f47f af31 	bne.w	801475c <jpeg_idct_6x12+0x20>
 80148fa:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80148fc:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80148fe:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 8014902:	f1a3 0c04 	sub.w	ip, r3, #4
 8014906:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 801490a:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    tmp11 = tmp10 + tmp20;
    tmp21 = tmp10 - tmp20 - tmp20;
    tmp20 = (INT32) wsptr[2];
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801490e:	f242 7431 	movw	r4, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8014912:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014914:	f640 37b6 	movw	r7, #2998	; 0xbb6
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014918:	690a      	ldr	r2, [r1, #16]
  for (ctr = 0; ctr < 12; ctr++) {
 801491a:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 801491c:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014920:	680b      	ldr	r3, [r1, #0]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014922:	fb0b f002 	mul.w	r0, fp, r2
    z3 = (INT32) wsptr[5];
 8014926:	f8d1 e014 	ldr.w	lr, [r1, #20]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801492a:	f103 0310 	add.w	r3, r3, #16
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 801492e:	f101 0118 	add.w	r1, r1, #24
    tmp11 = tmp10 + tmp20;
 8014932:	eb00 3243 	add.w	r2, r0, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8014936:	ebc0 3343 	rsb	r3, r0, r3, lsl #13
 801493a:	eba3 0300 	sub.w	r3, r3, r0
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801493e:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8014942:	fb04 f000 	mul.w	r0, r4, r0
    tmp21 = tmp10 - tmp20 - tmp20;
 8014946:	9301      	str	r3, [sp, #4]
    tmp20 = tmp11 + tmp10;
 8014948:	eb02 0500 	add.w	r5, r2, r0
    tmp22 = tmp11 - tmp10;
 801494c:	eba2 0200 	sub.w	r2, r2, r0
    z1 = (INT32) wsptr[1];
 8014950:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014954:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014958:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801495c:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014960:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014964:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8014968:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 801496a:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801496e:	9b00      	ldr	r3, [sp, #0]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014970:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014974:	eba0 000e 	sub.w	r0, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014978:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801497c:	eb05 0e07 	add.w	lr, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014980:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8014984:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8014988:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801498c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8014990:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8014992:	f809 e003 	strb.w	lr, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014996:	9b00      	ldr	r3, [sp, #0]
 8014998:	5d5d      	ldrb	r5, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801499a:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801499c:	7175      	strb	r5, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801499e:	eb03 3540 	add.w	r5, r3, r0, lsl #13
 80149a2:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80149a4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80149a8:	5d5d      	ldrb	r5, [r3, r5]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80149aa:	9b01      	ldr	r3, [sp, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80149ac:	7075      	strb	r5, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80149ae:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
 80149b2:	9800      	ldr	r0, [sp, #0]
			    & RANGE_MASK];
 80149b4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80149b8:	5cc3      	ldrb	r3, [r0, r3]
 80149ba:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149bc:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149c0:	eba2 0204 	sub.w	r2, r2, r4
			    & RANGE_MASK];
 80149c4:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80149c8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80149cc:	5cc3      	ldrb	r3, [r0, r3]
 80149ce:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80149d0:	5c83      	ldrb	r3, [r0, r2]
 80149d2:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 80149d4:	d199      	bne.n	801490a <jpeg_idct_6x12+0x1ce>
  }
}
 80149d6:	b053      	add	sp, #332	; 0x14c
 80149d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149dc:	ffffd0b0 	.word	0xffffd0b0
 80149e0:	ffffeeaf 	.word	0xffffeeaf
 80149e4:	ffffde8b 	.word	0xffffde8b
 80149e8:	ffffea5c 	.word	0xffffea5c
 80149ec:	ffffc08c 	.word	0xffffc08c
 80149f0:	ffffc4df 	.word	0xffffc4df

080149f4 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80149f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f8:	b0b9      	sub	sp, #228	; 0xe4
 80149fa:	1e94      	subs	r4, r2, #2
 80149fc:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80149fe:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014a02:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014a04:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a06:	3380      	adds	r3, #128	; 0x80
 8014a08:	3804      	subs	r0, #4
 8014a0a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014a0c:	f102 0308 	add.w	r3, r2, #8
 8014a10:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a12:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014a16:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a18:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a1c:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a20:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014a22:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8014a26:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014a28:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8014a2c:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014a2e:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014a32:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014a36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014a3a:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014a3c:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 8014a40:	19f5      	adds	r5, r6, r7
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014a42:	1aff      	subs	r7, r7, r3
    tmp11 = z3 - z2;
 8014a44:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014a48:	eba6 0347 	sub.w	r3, r6, r7, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a4c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014a50:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014a54:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014a58:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014a5a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8014a5e:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014a60:	19f3      	adds	r3, r6, r7
 8014a62:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014a64:	f241 0271 	movw	r2, #4209	; 0x1071
 8014a68:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014a6c:	4a6e      	ldr	r2, [pc, #440]	; (8014c28 <jpeg_idct_5x10+0x234>)
 8014a6e:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 8014a72:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8014a74:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a78:	6e05      	ldr	r5, [r0, #96]	; 0x60
    tmp21 = tmp11 + tmp13;
 8014a7a:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 8014a7e:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8014a82:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8014a84:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a86:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8014a8a:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014a8c:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a90:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a92:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014a96:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a9a:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014a9c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 8014aa0:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014aa4:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8014aa8:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014aaa:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 8014aae:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8014ab2:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014ab4:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014ab8:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014abc:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014ac0:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014ac2:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014ac6:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 8014aca:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014ace:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014ad0:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014ad4:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014ad6:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014ada:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014ade:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014ae0:	4456      	add	r6, sl
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014ae2:	f241 2acf 	movw	sl, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014ae6:	eba3 030e 	sub.w	r3, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014aea:	f642 0e53 	movw	lr, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014aee:	fb0a f909 	mul.w	r9, sl, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014af2:	f241 4a8c 	movw	sl, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014af6:	fb0e fe02 	mul.w	lr, lr, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014afa:	009b      	lsls	r3, r3, #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014afc:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014b00:	ebae 0e09 	sub.w	lr, lr, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014b04:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014b08:	ebae 0e05 	sub.w	lr, lr, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014b0c:	442a      	add	r2, r5

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014b0e:	eb0c 0508 	add.w	r5, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014b12:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014b16:	12ed      	asrs	r5, r5, #11
 8014b18:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014b1c:	ea4f 25ec 	mov.w	r5, ip, asr #11
 8014b20:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014b24:	eb07 050e 	add.w	r5, r7, lr
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014b28:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014b2c:	12ed      	asrs	r5, r5, #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014b2e:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014b30:	610d      	str	r5, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014b32:	9d04      	ldr	r5, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014b34:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014b38:	eb03 25e5 	add.w	r5, r3, r5, asr #11
 8014b3c:	624d      	str	r5, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8014b3e:	9d04      	ldr	r5, [sp, #16]
 8014b40:	ebc3 23e5 	rsb	r3, r3, r5, asr #11
 8014b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014b48:	9b02      	ldr	r3, [sp, #8]
 8014b4a:	4413      	add	r3, r2
 8014b4c:	12db      	asrs	r3, r3, #11
 8014b4e:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014b50:	9b02      	ldr	r3, [sp, #8]
 8014b52:	1a9b      	subs	r3, r3, r2
 8014b54:	12db      	asrs	r3, r3, #11
 8014b56:	674b      	str	r3, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014b58:	9b01      	ldr	r3, [sp, #4]
 8014b5a:	4433      	add	r3, r6
 8014b5c:	12db      	asrs	r3, r3, #11
 8014b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014b60:	9b01      	ldr	r3, [sp, #4]
 8014b62:	1b9b      	subs	r3, r3, r6
 8014b64:	12db      	asrs	r3, r3, #11
 8014b66:	660b      	str	r3, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014b68:	9b05      	ldr	r3, [sp, #20]
 8014b6a:	42a3      	cmp	r3, r4
 8014b6c:	f47f af51 	bne.w	8014a12 <jpeg_idct_5x10+0x1e>
 8014b70:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8014b72:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014b74:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014b78:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8014b7c:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014b80:	f641 289a 	movw	r8, #6810	; 0x1a9a
 8014b84:	3324      	adds	r3, #36	; 0x24
 8014b86:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8014b88:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8014b8c:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8014b8e:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8014b90:	f851 2c04 	ldr.w	r2, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8014b94:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8014b98:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b9c:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014ba0:	1898      	adds	r0, r3, r2
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014ba2:	1a9b      	subs	r3, r3, r2
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014ba4:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 8014ba6:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014baa:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8014bae:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014bb2:	fb0a f000 	mul.w	r0, sl, r0
    z3 = tmp12 + z2;
 8014bb6:	eb03 3247 	add.w	r2, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014bba:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014bbc:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8014bc0:	1884      	adds	r4, r0, r2
    tmp11 = z3 - z1;
 8014bc2:	1a12      	subs	r2, r2, r0
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014bc4:	eb05 000b 	add.w	r0, r5, fp
 8014bc8:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014bcc:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014bd0:	4b15      	ldr	r3, [pc, #84]	; (8014c28 <jpeg_idct_5x10+0x234>)
 8014bd2:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8014bd6:	eb04 0b05 	add.w	fp, r4, r5
 8014bda:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014bdc:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8014bde:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8014be2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8014be6:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8014bea:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014bec:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014bf0:	9b00      	ldr	r3, [sp, #0]
 8014bf2:	5d1c      	ldrb	r4, [r3, r4]
 8014bf4:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8014bf6:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014bf8:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8014bfa:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8014bfe:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8014c02:	5d1c      	ldrb	r4, [r3, r4]
 8014c04:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014c06:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8014c08:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014c0a:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014c0c:	009b      	lsls	r3, r3, #2
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014c0e:	9a00      	ldr	r2, [sp, #0]
    tmp12 -= z2 << 2;
 8014c10:	ebc3 3347 	rsb	r3, r3, r7, lsl #13
			    & RANGE_MASK];
 8014c14:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014c18:	5cd3      	ldrb	r3, [r2, r3]
 8014c1a:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014c1c:	9b02      	ldr	r3, [sp, #8]
 8014c1e:	4563      	cmp	r3, ip
 8014c20:	d1b2      	bne.n	8014b88 <jpeg_idct_5x10+0x194>
  }
}
 8014c22:	b039      	add	sp, #228	; 0xe4
 8014c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c28:	ffffba5c 	.word	0xffffba5c

08014c2c <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c30:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014c32:	6d4d      	ldr	r5, [r1, #84]	; 0x54
{
 8014c34:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8014c36:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c38:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014c3c:	3380      	adds	r3, #128	; 0x80
 8014c3e:	9302      	str	r3, [sp, #8]
  for (ctr = 4; ctr > 0; ctr--) {
 8014c40:	1e93      	subs	r3, r2, #2
 8014c42:	9301      	str	r3, [sp, #4]
 8014c44:	f105 0310 	add.w	r3, r5, #16
 8014c48:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014c4a:	9b01      	ldr	r3, [sp, #4]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8014c4c:	3104      	adds	r1, #4
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014c4e:	f855 0b04 	ldr.w	r0, [r5], #4
 8014c52:	461a      	mov	r2, r3
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014c54:	f9b3 a012 	ldrsh.w	sl, [r3, #18]
 8014c58:	f9b3 7022 	ldrsh.w	r7, [r3, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014c5c:	f9b3 e032 	ldrsh.w	lr, [r3, #50]	; 0x32
 8014c60:	f9b3 6042 	ldrsh.w	r6, [r3, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c64:	f9b3 8052 	ldrsh.w	r8, [r3, #82]	; 0x52
 8014c68:	f9b3 4062 	ldrsh.w	r4, [r3, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8014c6c:	f9b3 9072 	ldrsh.w	r9, [r3, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014c70:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8014c74:	4343      	muls	r3, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c76:	ea4a 0007 	orr.w	r0, sl, r7
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014c7a:	9201      	str	r2, [sp, #4]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c7c:	ea4e 0000 	orr.w	r0, lr, r0
 8014c80:	4330      	orrs	r0, r6
 8014c82:	ea48 0000 	orr.w	r0, r8, r0
 8014c86:	4320      	orrs	r0, r4
 8014c88:	ea59 0000 	orrs.w	r0, r9, r0
 8014c8c:	d155      	bne.n	8014d3a <jpeg_idct_4x8+0x10e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014c8e:	009b      	lsls	r3, r3, #2
      wsptr[4*0] = dcval;
 8014c90:	f841 3c04 	str.w	r3, [r1, #-4]
      wsptr[4*1] = dcval;
 8014c94:	60cb      	str	r3, [r1, #12]
      wsptr[4*2] = dcval;
 8014c96:	61cb      	str	r3, [r1, #28]
      wsptr[4*3] = dcval;
 8014c98:	62cb      	str	r3, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 8014c9a:	63cb      	str	r3, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 8014c9c:	64cb      	str	r3, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 8014c9e:	65cb      	str	r3, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014ca0:	66cb      	str	r3, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014ca2:	9b05      	ldr	r3, [sp, #20]
 8014ca4:	42ab      	cmp	r3, r5
 8014ca6:	d1d0      	bne.n	8014c4a <jpeg_idct_4x8+0x1e>
 8014ca8:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 8014caa:	a806      	add	r0, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014cac:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014cb0:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014cb4:	1f1c      	subs	r4, r3, #4
 8014cb6:	f103 0b1c 	add.w	fp, r3, #28
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014cba:	f8df c174 	ldr.w	ip, [pc, #372]	; 8014e30 <jpeg_idct_4x8+0x204>
    outptr = output_buf[ctr] + output_col;
 8014cbe:	f854 6f04 	ldr.w	r6, [r4, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014cc2:	3010      	adds	r0, #16
    outptr = output_buf[ctr] + output_col;
 8014cc4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014cc6:	f850 1c10 	ldr.w	r1, [r0, #-16]
  for (ctr = 0; ctr < 8; ctr++) {
 8014cca:	45a3      	cmp	fp, r4
    outptr = output_buf[ctr] + output_col;
 8014ccc:	eb06 0503 	add.w	r5, r6, r3
    z3 = (INT32) wsptr[3];
 8014cd0:	f850 ac04 	ldr.w	sl, [r0, #-4]
    tmp2 = (INT32) wsptr[2];
 8014cd4:	f850 3c08 	ldr.w	r3, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014cd8:	f101 0110 	add.w	r1, r1, #16
    z2 = (INT32) wsptr[1];
 8014cdc:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014ce0:	eb01 0903 	add.w	r9, r1, r3
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014ce4:	eba1 0103 	sub.w	r1, r1, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014ce8:	eb02 030a 	add.w	r3, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014cec:	9f02      	ldr	r7, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014cee:	fb08 f303 	mul.w	r3, r8, r3
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014cf2:	fb0e 3202 	mla	r2, lr, r2, r3
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014cf6:	fb0c 330a 	mla	r3, ip, sl, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014cfa:	eb02 3a49 	add.w	sl, r2, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014cfe:	ebc2 3249 	rsb	r2, r2, r9, lsl #13
			    & RANGE_MASK];
 8014d02:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014d06:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014d0a:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8014d0e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8014d10:	f806 a007 	strb.w	sl, [r6, r7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014d14:	9e02      	ldr	r6, [sp, #8]
 8014d16:	5cb2      	ldrb	r2, [r6, r2]
 8014d18:	70ea      	strb	r2, [r5, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014d1a:	eb03 3241 	add.w	r2, r3, r1, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014d1e:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
			    & RANGE_MASK];
 8014d22:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8014d26:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014d2a:	5cb2      	ldrb	r2, [r6, r2]
 8014d2c:	706a      	strb	r2, [r5, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014d2e:	5cf3      	ldrb	r3, [r6, r3]
 8014d30:	70ab      	strb	r3, [r5, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8014d32:	d1c4      	bne.n	8014cbe <jpeg_idct_4x8+0x92>
  }
}
 8014d34:	b027      	add	sp, #156	; 0x9c
 8014d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d3a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014d3c:	f241 1251 	movw	r2, #4433	; 0x1151
    z2 <<= CONST_BITS;
 8014d40:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d42:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014d44:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014d4c:	4360      	muls	r0, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014d4e:	183c      	adds	r4, r7, r0
 8014d50:	4354      	muls	r4, r2
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014d52:	f641 027e 	movw	r2, #6270	; 0x187e
 8014d56:	fb02 4707 	mla	r7, r2, r7, r4
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014d5a:	4a35      	ldr	r2, [pc, #212]	; (8014e30 <jpeg_idct_4x8+0x204>)
 8014d5c:	fb02 4400 	mla	r4, r2, r0, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014d60:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8014d62:	4346      	muls	r6, r0
    tmp0 = z2 + z3;
 8014d64:	eb03 3046 	add.w	r0, r3, r6, lsl #13
    tmp1 = z2 - z3;
 8014d68:	eba3 3346 	sub.w	r3, r3, r6, lsl #13
    tmp10 = tmp0 + tmp2;
 8014d6c:	eb07 0c00 	add.w	ip, r7, r0
    tmp13 = tmp0 - tmp2;
 8014d70:	1bc2      	subs	r2, r0, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d72:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp11 = tmp1 + tmp3;
 8014d76:	18e7      	adds	r7, r4, r3
    tmp12 = tmp1 - tmp3;
 8014d78:	1b1b      	subs	r3, r3, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d7a:	69ec      	ldr	r4, [r5, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d7c:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014d80:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014d84:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014d88:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014d8c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp13 = tmp0 - tmp2;
 8014d8e:	9203      	str	r2, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014d90:	f242 52a1 	movw	r2, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014d94:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8014d98:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8014d9c:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014da0:	1930      	adds	r0, r6, r4
 8014da2:	4350      	muls	r0, r2
    z2 += z1;
 8014da4:	4a23      	ldr	r2, [pc, #140]	; (8014e34 <jpeg_idct_4x8+0x208>)
 8014da6:	fb02 0606 	mla	r6, r2, r6, r0
    z3 += z1;
 8014daa:	4a23      	ldr	r2, [pc, #140]	; (8014e38 <jpeg_idct_4x8+0x20c>)
 8014dac:	fb02 0004 	mla	r0, r2, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014db0:	eb09 040a 	add.w	r4, r9, sl
 8014db4:	4a21      	ldr	r2, [pc, #132]	; (8014e3c <jpeg_idct_4x8+0x210>)
 8014db6:	4354      	muls	r4, r2
    tmp0 += z1 + z2;
 8014db8:	f640 128e 	movw	r2, #2446	; 0x98e
 8014dbc:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8014dc0:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8014dc2:	fb02 b909 	mla	r9, r2, r9, fp
    tmp3 += z1 + z3;
 8014dc6:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014dca:	4a1d      	ldr	r2, [pc, #116]	; (8014e40 <jpeg_idct_4x8+0x214>)
    tmp3 += z1 + z3;
 8014dcc:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014dd0:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8014dd4:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014dd8:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp1 += z1 + z3;
 8014ddc:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8014dde:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014de0:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8014de4:	f246 2854 	movw	r8, #25172	; 0x6254
 8014de8:	fb08 6e0e 	mla	lr, r8, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014dec:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014df0:	ebac 0c04 	sub.w	ip, ip, r4
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014df4:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014df6:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014dfa:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014dfe:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014e00:	eb07 040e 	add.w	r4, r7, lr
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014e04:	eba7 070e 	sub.w	r7, r7, lr
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014e08:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014e0a:	12ff      	asrs	r7, r7, #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014e0c:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014e0e:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014e10:	1a1b      	subs	r3, r3, r0
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014e12:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014e14:	12e4      	asrs	r4, r4, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014e16:	12db      	asrs	r3, r3, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014e18:	61cc      	str	r4, [r1, #28]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014e1a:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014e1c:	9b03      	ldr	r3, [sp, #12]
 8014e1e:	444b      	add	r3, r9
 8014e20:	12db      	asrs	r3, r3, #11
 8014e22:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8014e24:	9b03      	ldr	r3, [sp, #12]
 8014e26:	eba3 0309 	sub.w	r3, r3, r9
 8014e2a:	12db      	asrs	r3, r3, #11
 8014e2c:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8014e2e:	e738      	b.n	8014ca2 <jpeg_idct_4x8+0x76>
 8014e30:	ffffc4df 	.word	0xffffc4df
 8014e34:	ffffc13b 	.word	0xffffc13b
 8014e38:	fffff384 	.word	0xfffff384
 8014e3c:	ffffe333 	.word	0xffffe333
 8014e40:	ffffadfd 	.word	0xffffadfd

08014e44 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e48:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014e4c:	b095      	sub	sp, #84	; 0x54
 8014e4e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014e50:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014e52:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014e56:	3204      	adds	r2, #4
 8014e58:	3c04      	subs	r4, #4
  wsptr = workspace;
 8014e5a:	ae02      	add	r6, sp, #8
{
 8014e5c:	9300      	str	r3, [sp, #0]
 8014e5e:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e60:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014e64:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e68:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014e6c:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014e6e:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e72:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014e74:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014e78:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014e7c:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8014e7e:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014e80:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014e84:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014e88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014e8c:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014e90:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8014e92:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014e94:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014e98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014e9a:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014e9c:	f242 7731 	movw	r7, #10033	; 0x2731
 8014ea0:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ea2:	6a27      	ldr	r7, [r4, #32]
    tmp10 = tmp1 + tmp0;
 8014ea4:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8014ea8:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014eaa:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8014eae:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014eb0:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8014eb2:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014eb6:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8014eba:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014ebe:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014ec2:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014ec6:	eba2 0209 	sub.w	r2, r2, r9
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014eca:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014ece:	435f      	muls	r7, r3
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014ed0:	eba2 0208 	sub.w	r2, r2, r8
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014ed4:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014ed6:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014eda:	0092      	lsls	r2, r2, #2
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014edc:	42ab      	cmp	r3, r5

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014ede:	eb0c 080a 	add.w	r8, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014ee2:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014ee6:	eb07 374b 	add.w	r7, r7, fp, lsl #13
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014eea:	ea4f 2cec 	mov.w	ip, ip, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014eee:	ea4f 28e8 	mov.w	r8, r8, asr #11
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014ef2:	f8c6 c038 	str.w	ip, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014ef6:	eb02 2ce1 	add.w	ip, r2, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014efa:	ebc2 22e1 	rsb	r2, r2, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014efe:	f846 8c04 	str.w	r8, [r6, #-4]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014f02:	f8c6 c008 	str.w	ip, [r6, #8]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014f06:	62f2      	str	r2, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014f08:	eb00 0207 	add.w	r2, r0, r7
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014f0c:	eba0 0007 	sub.w	r0, r0, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014f10:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014f14:	ea4f 20e0 	mov.w	r0, r0, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014f18:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014f1a:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014f1c:	d1a0      	bne.n	8014e60 <jpeg_idct_3x6+0x1c>
 8014f1e:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8014f20:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014f22:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014f26:	f242 7b31 	movw	fp, #10033	; 0x2731
 8014f2a:	1f1d      	subs	r5, r3, #4
 8014f2c:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8014f2e:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8014f32:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8014f34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014f36:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8014f3a:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8014f3c:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f40:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014f44:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014f48:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014f4c:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f50:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014f52:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8014f56:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8014f5a:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f5e:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014f62:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8014f66:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8014f6a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014f6e:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8014f72:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014f76:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8014f7a:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014f7e:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8014f82:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014f84:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014f88:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8014f8a:	d1d0      	bne.n	8014f2e <jpeg_idct_3x6+0xea>
  }
}
 8014f8c:	b015      	add	sp, #84	; 0x54
 8014f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014f94 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f98:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014f9c:	b08b      	sub	sp, #44	; 0x2c
 8014f9e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014fa0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014fa2:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014fa6:	ad02      	add	r5, sp, #8
 8014fa8:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014faa:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014fae:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014fb2:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014fb4:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8014fb8:	46b4      	mov	ip, r6
 8014fba:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014fbe:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014fc0:	4f29      	ldr	r7, [pc, #164]	; (8015068 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014fc2:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014fc4:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014fc8:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8014fcc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014fce:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014fd2:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014fd6:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014fda:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014fde:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014fe2:	6a21      	ldr	r1, [r4, #32]
 8014fe4:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014fe8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014fea:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014fee:	eb0a 010b 	add.w	r1, sl, fp
 8014ff2:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014ff6:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014ffa:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8014ffe:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8015002:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8015006:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 801500a:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 801500e:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8015012:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8015016:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 801501a:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801501c:	d1ca      	bne.n	8014fb4 <jpeg_idct_2x4+0x20>
 801501e:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8015020:	a902      	add	r1, sp, #8
 8015022:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8015024:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8015028:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 801502a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 801502c:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8015030:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 8015032:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8015036:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801503a:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801503c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015040:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8015044:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8015048:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 801504c:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015050:	5d3c      	ldrb	r4, [r7, r4]
 8015052:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015054:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8015056:	9c01      	ldr	r4, [sp, #4]
 8015058:	5ca2      	ldrb	r2, [r4, r2]
 801505a:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 801505e:	d1e1      	bne.n	8015024 <jpeg_idct_2x4+0x90>
  }
}
 8015060:	b00b      	add	sp, #44	; 0x2c
 8015062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015066:	bf00      	nop
 8015068:	ffffc4df 	.word	0xffffc4df

0801506c <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801506c:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801506e:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015070:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015074:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015076:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 801507a:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801507c:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801507e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015082:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 8015084:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015086:	3080      	adds	r0, #128	; 0x80
{
 8015088:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801508a:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 801508c:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 801508e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8015092:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8015096:	5d06      	ldrb	r6, [r0, r4]
 8015098:	681c      	ldr	r4, [r3, #0]
 801509a:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 801509c:	5c42      	ldrb	r2, [r0, r1]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	555a      	strb	r2, [r3, r5]
}
 80150a2:	bd70      	pop	{r4, r5, r6, pc}

080150a4 <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 80150a4:	6803      	ldr	r3, [r0, #0]
 80150a6:	2238      	movs	r2, #56	; 0x38
 80150a8:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	4718      	bx	r3

080150b0 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 80150b0:	688b      	ldr	r3, [r1, #8]
{
 80150b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 80150b6:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 80150ba:	698b      	ldr	r3, [r1, #24]
{
 80150bc:	b085      	sub	sp, #20
 80150be:	4681      	mov	r9, r0
 80150c0:	460c      	mov	r4, r1
 80150c2:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 80150c4:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150c8:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80150ca:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80150ce:	6922      	ldr	r2, [r4, #16]
 80150d0:	42b2      	cmp	r2, r6
 80150d2:	dc02      	bgt.n	80150da <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 80150d4:	b005      	add	sp, #20
 80150d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150da:	1b92      	subs	r2, r2, r6
 80150dc:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80150de:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150e0:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150e2:	6865      	ldr	r5, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 80150e4:	4430      	add	r0, r6
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80150e6:	bfa8      	it	ge
 80150e8:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80150ea:	69e1      	ldr	r1, [r4, #28]
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150ec:	1a2d      	subs	r5, r5, r0
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80150ee:	1a09      	subs	r1, r1, r0
 80150f0:	4291      	cmp	r1, r2
 80150f2:	bfa8      	it	ge
 80150f4:	4611      	movge	r1, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80150f6:	428d      	cmp	r5, r1
 80150f8:	bfa8      	it	ge
 80150fa:	460d      	movge	r5, r1
    if (rows <= 0)		/* this chunk might be past end of file! */
 80150fc:	2d00      	cmp	r5, #0
 80150fe:	dde9      	ble.n	80150d4 <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 8015100:	fb05 f308 	mul.w	r3, r5, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015104:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8015106:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015108:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 801510c:	f1ba 0f00 	cmp.w	sl, #0
 8015110:	d00a      	beq.n	8015128 <do_barray_io+0x78>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015112:	9300      	str	r3, [sp, #0]
 8015114:	4659      	mov	r1, fp
 8015116:	463b      	mov	r3, r7
 8015118:	4648      	mov	r0, r9
 801511a:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801511c:	47a8      	blx	r5
    file_offset += byte_count;
 801511e:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015120:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015122:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015124:	4416      	add	r6, r2
 8015126:	e7d2      	b.n	80150ce <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015128:	9b03      	ldr	r3, [sp, #12]
 801512a:	4659      	mov	r1, fp
 801512c:	4648      	mov	r0, r9
 801512e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015130:	9300      	str	r3, [sp, #0]
 8015132:	463b      	mov	r3, r7
 8015134:	e7f2      	b.n	801511c <do_barray_io+0x6c>
	...

08015138 <alloc_small>:
{
 8015138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 801513c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015140:	4606      	mov	r6, r0
 8015142:	460d      	mov	r5, r1
 8015144:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015146:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015148:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 801514a:	d902      	bls.n	8015152 <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 801514c:	2101      	movs	r1, #1
 801514e:	f7ff ffa9 	bl	80150a4 <out_of_memory>
  if (odd_bytes > 0)
 8015152:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8015156:	bf1c      	itt	ne
 8015158:	3408      	addne	r4, #8
 801515a:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801515c:	2d01      	cmp	r5, #1
 801515e:	d906      	bls.n	801516e <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015160:	6833      	ldr	r3, [r6, #0]
 8015162:	220f      	movs	r2, #15
 8015164:	4630      	mov	r0, r6
 8015166:	e9c3 2505 	strd	r2, r5, [r3, #20]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 801516e:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8015172:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8015176:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 801517a:	b9e8      	cbnz	r0, 80151b8 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 801517c:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8015180:	f1ba 0f00 	cmp.w	sl, #0
 8015184:	d11e      	bne.n	80151c4 <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8015186:	4b1d      	ldr	r3, [pc, #116]	; (80151fc <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8015188:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 801518c:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8015190:	429d      	cmp	r5, r3
 8015192:	bf28      	it	cs
 8015194:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8015196:	eb05 0b09 	add.w	fp, r5, r9
 801519a:	4630      	mov	r0, r6
 801519c:	4659      	mov	r1, fp
 801519e:	f000 fbd1 	bl	8015944 <jpeg_get_small>
      if (hdr_ptr != NULL)
 80151a2:	b988      	cbnz	r0, 80151c8 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 80151a4:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 80151a6:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 80151aa:	d803      	bhi.n	80151b4 <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 80151ac:	2102      	movs	r1, #2
 80151ae:	4630      	mov	r0, r6
 80151b0:	f7ff ff78 	bl	80150a4 <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 80151b4:	465d      	mov	r5, fp
 80151b6:	e7ee      	b.n	8015196 <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 80151b8:	6883      	ldr	r3, [r0, #8]
 80151ba:	42a3      	cmp	r3, r4
 80151bc:	d211      	bcs.n	80151e2 <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 80151be:	4682      	mov	sl, r0
 80151c0:	6800      	ldr	r0, [r0, #0]
 80151c2:	e7da      	b.n	801517a <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 80151c4:	4b0e      	ldr	r3, [pc, #56]	; (8015200 <alloc_small+0xc8>)
 80151c6:	e7df      	b.n	8015188 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 80151c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80151ca:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 80151cc:	445b      	add	r3, fp
 80151ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 80151d0:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80151d2:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 80151d4:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80151d8:	f1ba 0f00 	cmp.w	sl, #0
 80151dc:	d10b      	bne.n	80151f6 <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 80151de:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80151e2:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80151e4:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80151e6:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80151e8:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 80151ea:	6882      	ldr	r2, [r0, #8]
 80151ec:	1b12      	subs	r2, r2, r4
 80151ee:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80151f0:	4418      	add	r0, r3
}
 80151f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 80151f6:	f8ca 0000 	str.w	r0, [sl]
 80151fa:	e7f2      	b.n	80151e2 <alloc_small+0xaa>
 80151fc:	0802f11c 	.word	0x0802f11c
 8015200:	0802f114 	.word	0x0802f114

08015204 <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8015204:	2901      	cmp	r1, #1
{
 8015206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801520a:	4604      	mov	r4, r0
 801520c:	460d      	mov	r5, r1
 801520e:	4616      	mov	r6, r2
 8015210:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015212:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015216:	d005      	beq.n	8015224 <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015218:	6803      	ldr	r3, [r0, #0]
 801521a:	220f      	movs	r2, #15
 801521c:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8015224:	223c      	movs	r2, #60	; 0x3c
 8015226:	4629      	mov	r1, r5
 8015228:	4620      	mov	r0, r4
 801522a:	f7ff ff85 	bl	8015138 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801522e:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015230:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015232:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8015234:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015236:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 801523a:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801523c:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 801523e:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8015242:	9a07      	ldr	r2, [sp, #28]
 8015244:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8015246:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 801524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801524e <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 801524e:	2901      	cmp	r1, #1
{
 8015250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015254:	4604      	mov	r4, r0
 8015256:	460d      	mov	r5, r1
 8015258:	4616      	mov	r6, r2
 801525a:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801525c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015260:	d005      	beq.n	801526e <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015262:	6803      	ldr	r3, [r0, #0]
 8015264:	220f      	movs	r2, #15
 8015266:	e9c3 2105 	strd	r2, r1, [r3, #20]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 801526e:	223c      	movs	r2, #60	; 0x3c
 8015270:	4629      	mov	r1, r5
 8015272:	4620      	mov	r0, r4
 8015274:	f7ff ff60 	bl	8015138 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015278:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 801527a:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801527c:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801527e:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8015280:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8015284:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8015286:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8015288:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 801528c:	9a07      	ldr	r2, [sp, #28]
 801528e:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8015290:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8015294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015298 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015298:	2901      	cmp	r1, #1
{
 801529a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801529e:	4606      	mov	r6, r0
 80152a0:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80152a2:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80152a4:	d910      	bls.n	80152c8 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80152a6:	6803      	ldr	r3, [r0, #0]
 80152a8:	220f      	movs	r2, #15
 80152aa:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 80152b2:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 80152b6:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 80152b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 80152ba:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 80152bc:	bb0b      	cbnz	r3, 8015302 <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 80152be:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 80152c0:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 80152c2:	bb69      	cbnz	r1, 8015320 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 80152c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 80152c8:	d1f3      	bne.n	80152b2 <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80152ca:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80152cc:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80152ce:	b924      	cbnz	r4, 80152da <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80152d0:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 80152d2:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80152d4:	b95f      	cbnz	r7, 80152ee <free_pool+0x56>
    mem->virt_barray_list = NULL;
 80152d6:	64af      	str	r7, [r5, #72]	; 0x48
 80152d8:	e7eb      	b.n	80152b2 <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 80152da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80152dc:	b12b      	cbz	r3, 80152ea <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80152de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80152e0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80152e4:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80152e6:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80152e8:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80152ea:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80152ec:	e7ef      	b.n	80152ce <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 80152ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f0:	b12b      	cbz	r3, 80152fe <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80152f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152f4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80152f8:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80152fa:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80152fc:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80152fe:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8015300:	e7e8      	b.n	80152d4 <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8015302:	e9d3 8700 	ldrd	r8, r7, [r3]
 8015306:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015308:	4619      	mov	r1, r3
 801530a:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 801530c:	4417      	add	r7, r2
 801530e:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015310:	463a      	mov	r2, r7
 8015312:	f000 fb20 	bl	8015956 <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8015316:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015318:	1bdb      	subs	r3, r3, r7
 801531a:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 801531c:	4643      	mov	r3, r8
 801531e:	e7cd      	b.n	80152bc <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8015320:	688b      	ldr	r3, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8015322:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8015324:	e9d1 7400 	ldrd	r7, r4, [r1]
 8015328:	441c      	add	r4, r3
 801532a:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801532c:	4622      	mov	r2, r4
 801532e:	f000 fb0c 	bl	801594a <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8015332:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8015334:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8015336:	1b1b      	subs	r3, r3, r4
 8015338:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 801533a:	e7c2      	b.n	80152c2 <free_pool+0x2a>

0801533c <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 801533c:	b510      	push	{r4, lr}
 801533e:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8015340:	2101      	movs	r1, #1
 8015342:	f7ff ffa9 	bl	8015298 <free_pool>
 8015346:	2100      	movs	r1, #0
 8015348:	4620      	mov	r0, r4
 801534a:	f7ff ffa5 	bl	8015298 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 801534e:	4620      	mov	r0, r4
 8015350:	6861      	ldr	r1, [r4, #4]
 8015352:	2254      	movs	r2, #84	; 0x54
 8015354:	f000 faf9 	bl	801594a <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015358:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 801535a:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 801535c:	6063      	str	r3, [r4, #4]
}
 801535e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8015362:	f000 bb04 	b.w	801596e <jpeg_mem_term>

08015366 <access_virt_barray>:
{
 8015366:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 801536a:	18d7      	adds	r7, r2, r3
{
 801536c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801536e:	684a      	ldr	r2, [r1, #4]
{
 8015370:	460c      	mov	r4, r1
 8015372:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015376:	42ba      	cmp	r2, r7
 8015378:	d304      	bcc.n	8015384 <access_virt_barray+0x1e>
 801537a:	68ca      	ldr	r2, [r1, #12]
 801537c:	429a      	cmp	r2, r3
 801537e:	d301      	bcc.n	8015384 <access_virt_barray+0x1e>
 8015380:	680b      	ldr	r3, [r1, #0]
 8015382:	b933      	cbnz	r3, 8015392 <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015384:	6803      	ldr	r3, [r0, #0]
 8015386:	2217      	movs	r2, #23
 8015388:	9001      	str	r0, [sp, #4]
 801538a:	615a      	str	r2, [r3, #20]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4798      	blx	r3
 8015390:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 8015392:	69a3      	ldr	r3, [r4, #24]
 8015394:	42ab      	cmp	r3, r5
 8015396:	d803      	bhi.n	80153a0 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8015398:	6922      	ldr	r2, [r4, #16]
 801539a:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801539c:	42bb      	cmp	r3, r7
 801539e:	d221      	bcs.n	80153e4 <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 80153a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80153a2:	b933      	cbnz	r3, 80153b2 <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80153a4:	6803      	ldr	r3, [r0, #0]
 80153a6:	2247      	movs	r2, #71	; 0x47
 80153a8:	9001      	str	r0, [sp, #4]
 80153aa:	615a      	str	r2, [r3, #20]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4798      	blx	r3
 80153b0:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 80153b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153b4:	b13b      	cbz	r3, 80153c6 <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 80153b6:	2201      	movs	r2, #1
 80153b8:	4621      	mov	r1, r4
 80153ba:	9001      	str	r0, [sp, #4]
 80153bc:	f7ff fe78 	bl	80150b0 <do_barray_io>
      ptr->dirty = FALSE;
 80153c0:	2300      	movs	r3, #0
 80153c2:	9801      	ldr	r0, [sp, #4]
 80153c4:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 80153c6:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80153c8:	2200      	movs	r2, #0
 80153ca:	4621      	mov	r1, r4
 80153cc:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 80153ce:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80153d0:	bf29      	itett	cs
 80153d2:	6923      	ldrcs	r3, [r4, #16]
 80153d4:	462b      	movcc	r3, r5
 80153d6:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80153d8:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80153dc:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80153de:	f7ff fe67 	bl	80150b0 <do_barray_io>
 80153e2:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 80153e4:	69e6      	ldr	r6, [r4, #28]
 80153e6:	42be      	cmp	r6, r7
 80153e8:	d21c      	bcs.n	8015424 <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 80153ea:	42ae      	cmp	r6, r5
 80153ec:	d20c      	bcs.n	8015408 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 80153ee:	f1b8 0f00 	cmp.w	r8, #0
 80153f2:	d01b      	beq.n	801542c <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80153f4:	6803      	ldr	r3, [r0, #0]
 80153f6:	2217      	movs	r2, #23
 80153f8:	9001      	str	r0, [sp, #4]
 80153fa:	462e      	mov	r6, r5
 80153fc:	615a      	str	r2, [r3, #20]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	4798      	blx	r3
    if (writable)
 8015402:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8015404:	61e7      	str	r7, [r4, #28]
 8015406:	e002      	b.n	801540e <access_virt_barray+0xa8>
    if (writable)
 8015408:	f1b8 0f00 	cmp.w	r8, #0
 801540c:	d1fa      	bne.n	8015404 <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 801540e:	6a22      	ldr	r2, [r4, #32]
 8015410:	b1b2      	cbz	r2, 8015440 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8015412:	68a2      	ldr	r2, [r4, #8]
 8015414:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015418:	69a2      	ldr	r2, [r4, #24]
 801541a:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 801541c:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 801541e:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015420:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8015422:	d305      	bcc.n	8015430 <access_virt_barray+0xca>
  if (writable)
 8015424:	f1b8 0f00 	cmp.w	r8, #0
 8015428:	d10d      	bne.n	8015446 <access_virt_barray+0xe0>
 801542a:	e00e      	b.n	801544a <access_virt_barray+0xe4>
 801542c:	462e      	mov	r6, r5
 801542e:	e7ee      	b.n	801540e <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015430:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015434:	464a      	mov	r2, r9
 8015436:	2100      	movs	r1, #0
	undef_row++;
 8015438:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801543a:	f015 f979 	bl	802a730 <memset>
	undef_row++;
 801543e:	e7ee      	b.n	801541e <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8015440:	f1b8 0f00 	cmp.w	r8, #0
 8015444:	d009      	beq.n	801545a <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 8015446:	2301      	movs	r3, #1
 8015448:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801544a:	69a3      	ldr	r3, [r4, #24]
 801544c:	6820      	ldr	r0, [r4, #0]
 801544e:	1aed      	subs	r5, r5, r3
}
 8015450:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015454:	b003      	add	sp, #12
 8015456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801545a:	6803      	ldr	r3, [r0, #0]
 801545c:	2217      	movs	r2, #23
 801545e:	615a      	str	r2, [r3, #20]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	4798      	blx	r3
  if (writable)
 8015464:	e7f1      	b.n	801544a <access_virt_barray+0xe4>

08015466 <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8015466:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 801546a:	429a      	cmp	r2, r3
{
 801546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015470:	4606      	mov	r6, r0
 8015472:	4688      	mov	r8, r1
 8015474:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015476:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8015478:	d902      	bls.n	8015480 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 801547a:	2103      	movs	r1, #3
 801547c:	f7ff fe12 	bl	80150a4 <out_of_memory>
  if (odd_bytes > 0)
 8015480:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8015484:	bf1c      	itt	ne
 8015486:	3408      	addne	r4, #8
 8015488:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801548a:	f1b8 0f01 	cmp.w	r8, #1
 801548e:	d906      	bls.n	801549e <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015490:	6833      	ldr	r3, [r6, #0]
 8015492:	220f      	movs	r2, #15
 8015494:	4630      	mov	r0, r6
 8015496:	e9c3 2805 	strd	r2, r8, [r3, #20]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 801549e:	f104 0110 	add.w	r1, r4, #16
 80154a2:	4630      	mov	r0, r6
 80154a4:	f000 fa54 	bl	8015950 <jpeg_get_large>
  if (hdr_ptr == NULL)
 80154a8:	4605      	mov	r5, r0
 80154aa:	b918      	cbnz	r0, 80154b4 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 80154ac:	2104      	movs	r1, #4
 80154ae:	4630      	mov	r0, r6
 80154b0:	f7ff fdf8 	bl	80150a4 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80154b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154b6:	eb07 0188 	add.w	r1, r7, r8, lsl #2
}
 80154ba:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80154be:	3310      	adds	r3, #16
 80154c0:	4423      	add	r3, r4
 80154c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 80154c4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 80154c6:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 80154ca:	2300      	movs	r3, #0
 80154cc:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 80154ce:	63cd      	str	r5, [r1, #60]	; 0x3c
}
 80154d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154d4 <alloc_barray>:
{
 80154d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 80154d8:	01d7      	lsls	r7, r2, #7
{
 80154da:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80154dc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80154e0:	4680      	mov	r8, r0
 80154e2:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80154e4:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 80154e6:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80154e8:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 80154ec:	d904      	bls.n	80154f8 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80154ee:	6803      	ldr	r3, [r0, #0]
 80154f0:	2248      	movs	r2, #72	; 0x48
 80154f2:	615a      	str	r2, [r3, #20]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	4798      	blx	r3
  if (ltemp < (long) numrows)
 80154f8:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80154fa:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80154fe:	4651      	mov	r1, sl
 8015500:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8015502:	bfa8      	it	ge
 8015504:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8015506:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015508:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 801550a:	f7ff fe15 	bl	8015138 <alloc_small>
 801550e:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015510:	42ae      	cmp	r6, r5
 8015512:	d302      	bcc.n	801551a <alloc_barray+0x46>
}
 8015514:	4648      	mov	r0, r9
 8015516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801551a:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 801551c:	4651      	mov	r1, sl
 801551e:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015520:	429c      	cmp	r4, r3
 8015522:	bf28      	it	cs
 8015524:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015526:	fb04 f207 	mul.w	r2, r4, r7
 801552a:	f7ff ff9c 	bl	8015466 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 801552e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8015532:	4426      	add	r6, r4
 8015534:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015538:	4293      	cmp	r3, r2
 801553a:	d0e9      	beq.n	8015510 <alloc_barray+0x3c>
      result[currow++] = workspace;
 801553c:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8015540:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8015542:	e7f9      	b.n	8015538 <alloc_barray+0x64>

08015544 <alloc_sarray>:
{
 8015544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015548:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 801554a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 801554e:	4607      	mov	r7, r0
 8015550:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8015552:	429a      	cmp	r2, r3
{
 8015554:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015556:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015558:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 801555c:	d904      	bls.n	8015568 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801555e:	6803      	ldr	r3, [r0, #0]
 8015560:	2248      	movs	r2, #72	; 0x48
 8015562:	615a      	str	r2, [r3, #20]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015568:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 801556a:	ea4f 0285 	mov.w	r2, r5, lsl #2
 801556e:	4651      	mov	r1, sl
 8015570:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8015572:	bfa8      	it	ge
 8015574:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8015576:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015578:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 801557a:	f7ff fddd 	bl	8015138 <alloc_small>
 801557e:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015580:	42ae      	cmp	r6, r5
 8015582:	d302      	bcc.n	801558a <alloc_sarray+0x46>
}
 8015584:	4648      	mov	r0, r9
 8015586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801558a:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801558c:	4651      	mov	r1, sl
 801558e:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015590:	429c      	cmp	r4, r3
 8015592:	bf28      	it	cs
 8015594:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8015596:	fb04 f208 	mul.w	r2, r4, r8
 801559a:	f7ff ff64 	bl	8015466 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 801559e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80155a2:	4426      	add	r6, r4
 80155a4:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80155a8:	4293      	cmp	r3, r2
 80155aa:	d0e9      	beq.n	8015580 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 80155ac:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 80155b0:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 80155b2:	e7f9      	b.n	80155a8 <alloc_sarray+0x64>

080155b4 <realize_virt_arrays>:
{
 80155b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80155b8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 80155bc:	2500      	movs	r5, #0
{
 80155be:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155c0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 80155c4:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155c6:	bb03      	cbnz	r3, 801560a <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80155c8:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80155cc:	bb43      	cbnz	r3, 8015620 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 80155ce:	2e00      	cmp	r6, #0
 80155d0:	dd19      	ble.n	8015606 <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 80155d2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80155d6:	462a      	mov	r2, r5
 80155d8:	4631      	mov	r1, r6
 80155da:	4638      	mov	r0, r7
 80155dc:	f000 f9be 	bl	801595c <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 80155e0:	4285      	cmp	r5, r0
 80155e2:	dd2a      	ble.n	801563a <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 80155e4:	fb90 f6f6 	sdiv	r6, r0, r6
 80155e8:	2e01      	cmp	r6, #1
 80155ea:	bfb8      	it	lt
 80155ec:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155ee:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80155f2:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 80155f6:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155f8:	bb0c      	cbnz	r4, 801563e <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80155fa:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80155fe:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015602:	2d00      	cmp	r5, #0
 8015604:	d141      	bne.n	801568a <realize_virt_arrays+0xd6>
}
 8015606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	b932      	cbnz	r2, 801561c <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 801560e:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8015612:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8015616:	6859      	ldr	r1, [r3, #4]
 8015618:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801561e:	e7d2      	b.n	80155c6 <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	b942      	cbnz	r2, 8015636 <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 8015624:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8015628:	4351      	muls	r1, r2
 801562a:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 801562e:	6859      	ldr	r1, [r3, #4]
 8015630:	434a      	muls	r2, r1
 8015632:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015638:	e7c8      	b.n	80155cc <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 801563a:	4e27      	ldr	r6, [pc, #156]	; (80156d8 <realize_virt_arrays+0x124>)
 801563c:	e7d7      	b.n	80155ee <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801563e:	6823      	ldr	r3, [r4, #0]
 8015640:	b9b3      	cbnz	r3, 8015670 <realize_virt_arrays+0xbc>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8015642:	6862      	ldr	r2, [r4, #4]
				(long) sptr->samplesperrow *
 8015644:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8015648:	1e53      	subs	r3, r2, #1
 801564a:	fbb3 f3f1 	udiv	r3, r3, r1
 801564e:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015650:	429e      	cmp	r6, r3
 8015652:	db0f      	blt.n	8015674 <realize_virt_arrays+0xc0>
	sptr->rows_in_mem = sptr->rows_in_array;
 8015654:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8015656:	6923      	ldr	r3, [r4, #16]
 8015658:	2101      	movs	r1, #1
 801565a:	68a2      	ldr	r2, [r4, #8]
 801565c:	4638      	mov	r0, r7
 801565e:	f7ff ff71 	bl	8015544 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8015662:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8015666:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8015668:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 801566a:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 801566c:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015670:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8015672:	e7c1      	b.n	80155f8 <realize_virt_arrays+0x44>
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8015674:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8015676:	4342      	muls	r2, r0
 8015678:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801567a:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801567c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015680:	f000 f96e 	bl	8015960 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8015684:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8015688:	e7e5      	b.n	8015656 <realize_virt_arrays+0xa2>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801568a:	682b      	ldr	r3, [r5, #0]
 801568c:	b9b3      	cbnz	r3, 80156bc <realize_virt_arrays+0x108>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 801568e:	6868      	ldr	r0, [r5, #4]
				(long) bptr->blocksperrow *
 8015690:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8015694:	1e43      	subs	r3, r0, #1
 8015696:	fbb3 f3f1 	udiv	r3, r3, r1
 801569a:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 801569c:	429e      	cmp	r6, r3
 801569e:	db0f      	blt.n	80156c0 <realize_virt_arrays+0x10c>
	bptr->rows_in_mem = bptr->rows_in_array;
 80156a0:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80156a2:	692b      	ldr	r3, [r5, #16]
 80156a4:	2101      	movs	r1, #1
 80156a6:	68aa      	ldr	r2, [r5, #8]
 80156a8:	4638      	mov	r0, r7
 80156aa:	f7ff ff13 	bl	80154d4 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 80156ae:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80156b2:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 80156b4:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 80156b6:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 80156b8:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80156bc:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80156be:	e7a0      	b.n	8015602 <realize_virt_arrays+0x4e>
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80156c0:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 80156c2:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80156c4:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80156c6:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80156c8:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80156cc:	01d2      	lsls	r2, r2, #7
 80156ce:	f000 f947 	bl	8015960 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 80156d2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80156d6:	e7e4      	b.n	80156a2 <realize_virt_arrays+0xee>
 80156d8:	3b9aca00 	.word	0x3b9aca00

080156dc <access_virt_sarray>:
{
 80156dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 80156e0:	eb02 0803 	add.w	r8, r2, r3
{
 80156e4:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80156e6:	684a      	ldr	r2, [r1, #4]
{
 80156e8:	b087      	sub	sp, #28
 80156ea:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80156ec:	4542      	cmp	r2, r8
{
 80156ee:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80156f2:	d304      	bcc.n	80156fe <access_virt_sarray+0x22>
 80156f4:	68ca      	ldr	r2, [r1, #12]
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d301      	bcc.n	80156fe <access_virt_sarray+0x22>
 80156fa:	680b      	ldr	r3, [r1, #0]
 80156fc:	b933      	cbnz	r3, 801570c <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80156fe:	6803      	ldr	r3, [r0, #0]
 8015700:	2217      	movs	r2, #23
 8015702:	9003      	str	r0, [sp, #12]
 8015704:	615a      	str	r2, [r3, #20]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	4798      	blx	r3
 801570a:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 801570c:	69a3      	ldr	r3, [r4, #24]
 801570e:	42ab      	cmp	r3, r5
 8015710:	d80c      	bhi.n	801572c <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8015712:	6922      	ldr	r2, [r4, #16]
 8015714:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8015716:	4543      	cmp	r3, r8
 8015718:	d308      	bcc.n	801572c <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 801571a:	69e6      	ldr	r6, [r4, #28]
 801571c:	4546      	cmp	r6, r8
 801571e:	f0c0 8083 	bcc.w	8015828 <access_virt_sarray+0x14c>
  if (writable)
 8015722:	f1ba 0f00 	cmp.w	sl, #0
 8015726:	f040 80aa 	bne.w	801587e <access_virt_sarray+0x1a2>
 801572a:	e0aa      	b.n	8015882 <access_virt_sarray+0x1a6>
    if (! ptr->b_s_open)
 801572c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801572e:	b933      	cbnz	r3, 801573e <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8015730:	6803      	ldr	r3, [r0, #0]
 8015732:	2247      	movs	r2, #71	; 0x47
 8015734:	9003      	str	r0, [sp, #12]
 8015736:	615a      	str	r2, [r3, #20]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	4798      	blx	r3
 801573c:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 801573e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015740:	b17b      	cbz	r3, 8015762 <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015742:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015746:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 801574a:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801574c:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8015750:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015754:	6922      	ldr	r2, [r4, #16]
 8015756:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015758:	e9d4 7e06 	ldrd	r7, lr, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801575c:	dc3d      	bgt.n	80157da <access_virt_sarray+0xfe>
      ptr->dirty = FALSE;
 801575e:	2300      	movs	r3, #0
 8015760:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8015762:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015764:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015768:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801576a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 801576e:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015770:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015774:	bf2a      	itet	cs
 8015776:	eba8 0303 	subcs.w	r3, r8, r3
 801577a:	462b      	movcc	r3, r5
      ptr->cur_start_row = (JDIMENSION) ltemp;
 801577c:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8015780:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 8015782:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015786:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015788:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801578a:	454a      	cmp	r2, r9
 801578c:	ddc5      	ble.n	801571a <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801578e:	eba2 0209 	sub.w	r2, r2, r9
 8015792:	6967      	ldr	r7, [r4, #20]
 8015794:	42ba      	cmp	r2, r7
 8015796:	bfa8      	it	ge
 8015798:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 801579a:	69a7      	ldr	r7, [r4, #24]
 801579c:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801579e:	eba6 0c07 	sub.w	ip, r6, r7
 80157a2:	4594      	cmp	ip, r2
 80157a4:	bfa8      	it	ge
 80157a6:	4694      	movge	ip, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80157a8:	6862      	ldr	r2, [r4, #4]
 80157aa:	1bd6      	subs	r6, r2, r7
 80157ac:	4566      	cmp	r6, ip
 80157ae:	bfa8      	it	ge
 80157b0:	4666      	movge	r6, ip
    if (rows <= 0)		/* this chunk might be past end of file! */
 80157b2:	2e00      	cmp	r6, #0
 80157b4:	ddb1      	ble.n	801571a <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 80157b6:	fb06 f60b 	mul.w	r6, r6, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80157ba:	6822      	ldr	r2, [r4, #0]
 80157bc:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80157be:	9600      	str	r6, [sp, #0]
 80157c0:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 80157c4:	9305      	str	r3, [sp, #20]
 80157c6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80157ca:	47b8      	blx	r7
    file_offset += byte_count;
 80157cc:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80157ce:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80157d0:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80157d2:	4491      	add	r9, r2
 80157d4:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 80157d8:	e7d5      	b.n	8015786 <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80157da:	eba2 0209 	sub.w	r2, r2, r9
 80157de:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80157e0:	eb07 0c09 	add.w	ip, r7, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80157e4:	42b2      	cmp	r2, r6
 80157e6:	bfa8      	it	ge
 80157e8:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80157ea:	ebae 060c 	sub.w	r6, lr, ip
 80157ee:	4296      	cmp	r6, r2
 80157f0:	bfa8      	it	ge
 80157f2:	4616      	movge	r6, r2
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80157f4:	6862      	ldr	r2, [r4, #4]
 80157f6:	eba2 070c 	sub.w	r7, r2, ip
 80157fa:	42b7      	cmp	r7, r6
 80157fc:	bfa8      	it	ge
 80157fe:	4637      	movge	r7, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015800:	2f00      	cmp	r7, #0
 8015802:	ddac      	ble.n	801575e <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8015804:	fb07 f70b 	mul.w	r7, r7, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015808:	6822      	ldr	r2, [r4, #0]
 801580a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801580c:	9700      	str	r7, [sp, #0]
 801580e:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8015812:	9305      	str	r3, [sp, #20]
 8015814:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015818:	47b0      	blx	r6
    file_offset += byte_count;
 801581a:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801581c:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 801581e:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015820:	4491      	add	r9, r2
 8015822:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8015826:	e795      	b.n	8015754 <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 8015828:	42ae      	cmp	r6, r5
 801582a:	d20d      	bcs.n	8015848 <access_virt_sarray+0x16c>
      if (writable)		/* writer skipped over a section of array */
 801582c:	f1ba 0f00 	cmp.w	sl, #0
 8015830:	d020      	beq.n	8015874 <access_virt_sarray+0x198>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015832:	6803      	ldr	r3, [r0, #0]
 8015834:	2217      	movs	r2, #23
 8015836:	9003      	str	r0, [sp, #12]
 8015838:	462e      	mov	r6, r5
 801583a:	615a      	str	r2, [r3, #20]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	4798      	blx	r3
    if (writable)
 8015840:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8015842:	f8c4 801c 	str.w	r8, [r4, #28]
 8015846:	e002      	b.n	801584e <access_virt_sarray+0x172>
    if (writable)
 8015848:	f1ba 0f00 	cmp.w	sl, #0
 801584c:	d1f9      	bne.n	8015842 <access_virt_sarray+0x166>
    if (ptr->pre_zero) {
 801584e:	6a22      	ldr	r2, [r4, #32]
 8015850:	b192      	cbz	r2, 8015878 <access_virt_sarray+0x19c>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015852:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015854:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015856:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 8015858:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 801585c:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801585e:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8015860:	f4bf af5f 	bcs.w	8015722 <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015864:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015868:	463a      	mov	r2, r7
 801586a:	2100      	movs	r1, #0
	undef_row++;
 801586c:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801586e:	f014 ff5f 	bl	802a730 <memset>
	undef_row++;
 8015872:	e7f3      	b.n	801585c <access_virt_sarray+0x180>
 8015874:	462e      	mov	r6, r5
 8015876:	e7ea      	b.n	801584e <access_virt_sarray+0x172>
      if (! writable)		/* reader looking at undefined data */
 8015878:	f1ba 0f00 	cmp.w	sl, #0
 801587c:	d009      	beq.n	8015892 <access_virt_sarray+0x1b6>
    ptr->dirty = TRUE;
 801587e:	2301      	movs	r3, #1
 8015880:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015882:	69a3      	ldr	r3, [r4, #24]
 8015884:	6820      	ldr	r0, [r4, #0]
 8015886:	1aed      	subs	r5, r5, r3
}
 8015888:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801588c:	b007      	add	sp, #28
 801588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015892:	6803      	ldr	r3, [r0, #0]
 8015894:	2217      	movs	r2, #23
 8015896:	615a      	str	r2, [r3, #20]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	4798      	blx	r3
  if (writable)
 801589c:	e7f1      	b.n	8015882 <access_virt_sarray+0x1a6>
	...

080158a0 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 80158a0:	2300      	movs	r3, #0
{
 80158a2:	b570      	push	{r4, r5, r6, lr}
 80158a4:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 80158a6:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80158a8:	f000 f85f 	bl	801596a <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80158ac:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80158ae:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80158b0:	4628      	mov	r0, r5
 80158b2:	f000 f847 	bl	8015944 <jpeg_get_small>

  if (mem == NULL) {
 80158b6:	4604      	mov	r4, r0
 80158b8:	b948      	cbnz	r0, 80158ce <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 80158ba:	4628      	mov	r0, r5
 80158bc:	f000 f857 	bl	801596e <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 80158c0:	682b      	ldr	r3, [r5, #0]
 80158c2:	2238      	movs	r2, #56	; 0x38
 80158c4:	4628      	mov	r0, r5
 80158c6:	e9c3 2405 	strd	r2, r4, [r3, #20]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 80158ce:	4b12      	ldr	r3, [pc, #72]	; (8015918 <jinit_memory_mgr+0x78>)
 80158d0:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 80158d2:	4b12      	ldr	r3, [pc, #72]	; (801591c <jinit_memory_mgr+0x7c>)
 80158d4:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 80158d6:	4b12      	ldr	r3, [pc, #72]	; (8015920 <jinit_memory_mgr+0x80>)
 80158d8:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 80158da:	4b12      	ldr	r3, [pc, #72]	; (8015924 <jinit_memory_mgr+0x84>)
 80158dc:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 80158de:	4b12      	ldr	r3, [pc, #72]	; (8015928 <jinit_memory_mgr+0x88>)
 80158e0:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 80158e2:	4b12      	ldr	r3, [pc, #72]	; (801592c <jinit_memory_mgr+0x8c>)
 80158e4:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 80158e6:	4b12      	ldr	r3, [pc, #72]	; (8015930 <jinit_memory_mgr+0x90>)
 80158e8:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 80158ea:	4b12      	ldr	r3, [pc, #72]	; (8015934 <jinit_memory_mgr+0x94>)
 80158ec:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 80158ee:	4b12      	ldr	r3, [pc, #72]	; (8015938 <jinit_memory_mgr+0x98>)
 80158f0:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 80158f2:	4b12      	ldr	r3, [pc, #72]	; (801593c <jinit_memory_mgr+0x9c>)
 80158f4:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 80158f6:	4b12      	ldr	r3, [pc, #72]	; (8015940 <jinit_memory_mgr+0xa0>)
 80158f8:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 80158fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 80158fe:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8015902:	2300      	movs	r3, #0
 8015904:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 8015906:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 8015908:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 801590a:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 801590c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8015910:	2354      	movs	r3, #84	; 0x54
 8015912:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8015914:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 8015916:	bd70      	pop	{r4, r5, r6, pc}
 8015918:	08015139 	.word	0x08015139
 801591c:	08015467 	.word	0x08015467
 8015920:	08015545 	.word	0x08015545
 8015924:	080154d5 	.word	0x080154d5
 8015928:	0801524f 	.word	0x0801524f
 801592c:	08015205 	.word	0x08015205
 8015930:	080155b5 	.word	0x080155b5
 8015934:	080156dd 	.word	0x080156dd
 8015938:	08015367 	.word	0x08015367
 801593c:	08015299 	.word	0x08015299
 8015940:	0801533d 	.word	0x0801533d

08015944 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8015944:	4608      	mov	r0, r1
 8015946:	f7f2 b887 	b.w	8007a58 <pvPortMalloc>

0801594a <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 801594a:	4608      	mov	r0, r1
 801594c:	f7f2 b91a 	b.w	8007b84 <vPortFree>

08015950 <jpeg_get_large>:
 8015950:	4608      	mov	r0, r1
 8015952:	f7f2 b881 	b.w	8007a58 <pvPortMalloc>

08015956 <jpeg_free_large>:
 8015956:	4608      	mov	r0, r1
 8015958:	f7f2 b914 	b.w	8007b84 <vPortFree>

0801595c <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 801595c:	4610      	mov	r0, r2
 801595e:	4770      	bx	lr

08015960 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8015960:	6803      	ldr	r3, [r0, #0]
 8015962:	2233      	movs	r2, #51	; 0x33
 8015964:	615a      	str	r2, [r3, #20]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	4718      	bx	r3

0801596a <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 801596a:	2000      	movs	r0, #0
 801596c:	4770      	bx	lr

0801596e <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 801596e:	4770      	bx	lr

08015970 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8015970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015974:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015978:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801597a:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 801597e:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015980:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015982:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 8015986:	bf16      	itet	ne
 8015988:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 801598a:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 801598e:	461e      	movne	r6, r3
 8015990:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015992:	6843      	ldr	r3, [r0, #4]
 8015994:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8015998:	689f      	ldr	r7, [r3, #8]
 801599a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 801599c:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 801599e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80159a2:	f105 0e1c 	add.w	lr, r5, #28

  for (i = 0; i < cinfo->out_color_components; i++) {
 80159a6:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80159a8:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80159aa:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80159ac:	429a      	cmp	r2, r3
 80159ae:	dc01      	bgt.n	80159b4 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 80159b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80159b4:	f85e 1f04 	ldr.w	r1, [lr, #4]!
      cquantize->colorindex[i] += MAXJSAMPLE;
 80159b8:	009f      	lsls	r7, r3, #2
 80159ba:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 80159bc:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 80159c0:	b126      	cbz	r6, 80159cc <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 80159c2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80159c6:	32ff      	adds	r2, #255	; 0xff
 80159c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 80159cc:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159d0:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 80159d4:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 80159d6:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159d8:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80159dc:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159de:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 80159e2:	428f      	cmp	r7, r1
 80159e4:	db0a      	blt.n	80159fc <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 80159e6:	fb10 fb0c 	smulbb	fp, r0, ip
 80159ea:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80159ee:	3101      	adds	r1, #1
 80159f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80159f4:	d1f5      	bne.n	80159e2 <create_colorindex+0x72>
    if (pad)
 80159f6:	b93e      	cbnz	r6, 8015a08 <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80159f8:	3301      	adds	r3, #1
 80159fa:	e7d6      	b.n	80159aa <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 80159fc:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80159fe:	fb08 a700 	mla	r7, r8, r0, sl
 8015a02:	fb97 f7f9 	sdiv	r7, r7, r9
 8015a06:	e7ec      	b.n	80159e2 <create_colorindex+0x72>
 8015a08:	4611      	mov	r1, r2
 8015a0a:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8015a0e:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8015a12:	f892 9000 	ldrb.w	r9, [r2]
 8015a16:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015a1a:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015a1c:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015a20:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015a24:	d1f5      	bne.n	8015a12 <create_colorindex+0xa2>
 8015a26:	e7e7      	b.n	80159f8 <create_colorindex+0x88>

08015a28 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 8015a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8015a2c:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8015a30:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8015a32:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8015a36:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 8015a3a:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8015a3e:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015a40:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8015a42:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015a44:	4540      	cmp	r0, r8
 8015a46:	db02      	blt.n	8015a4e <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015a48:	b003      	add	sp, #12
 8015a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8015a4e:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8015a52:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8015a54:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8015a58:	eb04 0a03 	add.w	sl, r4, r3
 8015a5c:	4554      	cmp	r4, sl
 8015a5e:	d10f      	bne.n	8015a80 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8015a60:	3001      	adds	r0, #1
 8015a62:	e7ef      	b.n	8015a44 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015a64:	f815 b003 	ldrb.w	fp, [r5, r3]
 8015a68:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8015a6c:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015a6e:	f817 700b 	ldrb.w	r7, [r7, fp]
 8015a72:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8015a74:	4563      	cmp	r3, ip
 8015a76:	dbf5      	blt.n	8015a64 <color_quantize+0x3c>
 8015a78:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 8015a7a:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8015a7e:	e7ed      	b.n	8015a5c <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8015a80:	2300      	movs	r3, #0
      pixcode = 0;
 8015a82:	461e      	mov	r6, r3
 8015a84:	e7f6      	b.n	8015a74 <color_quantize+0x4c>

08015a86 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8015a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015a8a:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015a8e:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015a92:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015a94:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015a96:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015a9a:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8015a9e:	4298      	cmp	r0, r3
 8015aa0:	db01      	blt.n	8015aa6 <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8015aa6:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8015aaa:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015aae:	eb05 0a09 	add.w	sl, r5, r9
 8015ab2:	4555      	cmp	r5, sl
 8015ab4:	f104 0403 	add.w	r4, r4, #3
 8015ab8:	d101      	bne.n	8015abe <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 8015aba:	3001      	adds	r0, #1
 8015abc:	e7ef      	b.n	8015a9e <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8015abe:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8015ac2:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8015ac6:	f81c 6006 	ldrb.w	r6, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8015aca:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015ace:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8015ad0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8015ad4:	f818 6006 	ldrb.w	r6, [r8, r6]
 8015ad8:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 8015ada:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8015ade:	e7e8      	b.n	8015ab2 <color_quantize3+0x2c>

08015ae0 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8015ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ae4:	469a      	mov	sl, r3
 8015ae6:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015ae8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015aec:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015af0:	699a      	ldr	r2, [r3, #24]
 8015af2:	6811      	ldr	r1, [r2, #0]
 8015af4:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015af6:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015af8:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015afa:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015afc:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015afe:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8015b00:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8015b02:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015b04:	4551      	cmp	r1, sl
 8015b06:	db02      	blt.n	8015b0e <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 8015b08:	b00b      	add	sp, #44	; 0x2c
 8015b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8015b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8015b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b12:	9c07      	ldr	r4, [sp, #28]
 8015b14:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 8015b18:	0190      	lsls	r0, r2, #6
 8015b1a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8015b1e:	9002      	str	r0, [sp, #8]
 8015b20:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8015b24:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 8015b26:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 8015b28:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8015b2c:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8015b2e:	9808      	ldr	r0, [sp, #32]
 8015b30:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8015b34:	4575      	cmp	r5, lr
 8015b36:	f100 0003 	add.w	r0, r0, #3
 8015b3a:	d106      	bne.n	8015b4a <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015b3c:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015b3e:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015b40:	3201      	adds	r2, #1
 8015b42:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 8015b46:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8015b48:	e7dc      	b.n	8015b04 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015b4a:	9e02      	ldr	r6, [sp, #8]
 8015b4c:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8015b50:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8015b54:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 8015b56:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015b58:	f858 7006 	ldr.w	r7, [r8, r6]
 8015b5c:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b5e:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8015b60:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8015b64:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b68:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8015b6c:	f859 7006 	ldr.w	r7, [r9, r6]
 8015b70:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015b72:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b74:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015b78:	5996      	ldr	r6, [r2, r6]
 8015b7a:	f810 cc01 	ldrb.w	ip, [r0, #-1]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015b7e:	445f      	add	r7, fp
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015b80:	9a06      	ldr	r2, [sp, #24]
 8015b82:	4494      	add	ip, r2
 8015b84:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8015b88:	443e      	add	r6, r7
      *output_ptr++ = (JSAMPLE) pixcode;
 8015b8a:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8015b8e:	e7d1      	b.n	8015b34 <quantize3_ord_dither+0x54>

08015b90 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015b90:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8015b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015b94:	3202      	adds	r2, #2
 8015b96:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 8015b9a:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015b9c:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015b9e:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015ba0:	3640      	adds	r6, #64	; 0x40
 8015ba2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015ba4:	42bb      	cmp	r3, r7
 8015ba6:	dc00      	bgt.n	8015baa <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8015ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015baa:	6863      	ldr	r3, [r4, #4]
 8015bac:	462a      	mov	r2, r5
 8015bae:	2101      	movs	r1, #1
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015bb4:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015bb6:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8015bb8:	f846 0f04 	str.w	r0, [r6, #4]!
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015bbc:	e7f1      	b.n	8015ba2 <alloc_fs_workspace+0x12>

08015bbe <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8015bbe:	4770      	bx	lr

08015bc0 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8015bc0:	6803      	ldr	r3, [r0, #0]
 8015bc2:	222f      	movs	r2, #47	; 0x2f
 8015bc4:	615a      	str	r2, [r3, #20]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	4718      	bx	r3
	...

08015bcc <start_pass_1_quant>:
{
 8015bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015bd0:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015bd4:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8015bd6:	692b      	ldr	r3, [r5, #16]
 8015bd8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 8015bdc:	696b      	ldr	r3, [r5, #20]
 8015bde:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8015be2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8015be6:	2b01      	cmp	r3, #1
 8015be8:	d00b      	beq.n	8015c02 <start_pass_1_quant+0x36>
 8015bea:	2b02      	cmp	r3, #2
 8015bec:	d05e      	beq.n	8015cac <start_pass_1_quant+0xe0>
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d174      	bne.n	8015cdc <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8015bf2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015bf4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8015bf6:	bf0c      	ite	eq
 8015bf8:	4b3c      	ldreq	r3, [pc, #240]	; (8015cec <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 8015bfa:	4b3d      	ldrne	r3, [pc, #244]	; (8015cf0 <start_pass_1_quant+0x124>)
 8015bfc:	606b      	str	r3, [r5, #4]
}
 8015bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8015c02:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8015c04:	4b3b      	ldr	r3, [pc, #236]	; (8015cf4 <start_pass_1_quant+0x128>)
 8015c06:	4a3c      	ldr	r2, [pc, #240]	; (8015cf8 <start_pass_1_quant+0x12c>)
 8015c08:	2903      	cmp	r1, #3
 8015c0a:	bf18      	it	ne
 8015c0c:	4613      	movne	r3, r2
 8015c0e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015c10:	2300      	movs	r3, #0
 8015c12:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015c14:	69eb      	ldr	r3, [r5, #28]
 8015c16:	b90b      	cbnz	r3, 8015c1c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8015c18:	f7ff feaa 	bl	8015970 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 8015c1c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8015c1e:	2d00      	cmp	r5, #0
 8015c20:	d1ed      	bne.n	8015bfe <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015c22:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015c26:	f107 081c 	add.w	r8, r7, #28
 8015c2a:	4646      	mov	r6, r8
 8015c2c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015c2e:	429d      	cmp	r5, r3
 8015c30:	dae5      	bge.n	8015bfe <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015c32:	f856 9f04 	ldr.w	r9, [r6, #4]!
    for (j = 0; j < i; j++) {
 8015c36:	4642      	mov	r2, r8
 8015c38:	2300      	movs	r3, #0
 8015c3a:	429d      	cmp	r5, r3
 8015c3c:	d007      	beq.n	8015c4e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 8015c3e:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8015c42:	4589      	cmp	r9, r1
 8015c44:	d130      	bne.n	8015ca8 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8015c46:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015c4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 8015c4c:	bb48      	cbnz	r0, 8015ca2 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015c4e:	6863      	ldr	r3, [r4, #4]
 8015c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015c54:	2101      	movs	r1, #1
 8015c56:	4620      	mov	r0, r4
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 8015c5c:	f109 32ff 	add.w	r2, r9, #4294967295
 8015c60:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8015c64:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015d00 <start_pass_1_quant+0x134>
 8015c68:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015c6a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015c6e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8015c72:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8015c74:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015c78:	005b      	lsls	r3, r3, #1
 8015c7a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8015c7e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8015c82:	bf45      	ittet	mi
 8015c84:	425b      	negmi	r3, r3
 8015c86:	fb93 f3f2 	sdivmi	r3, r3, r2
 8015c8a:	fb93 f3f2 	sdivpl	r3, r3, r2
 8015c8e:	425b      	negmi	r3, r3
 8015c90:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015c94:	458e      	cmp	lr, r1
 8015c96:	d1ed      	bne.n	8015c74 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015c98:	3140      	adds	r1, #64	; 0x40
 8015c9a:	f10c 0c10 	add.w	ip, ip, #16
 8015c9e:	458a      	cmp	sl, r1
 8015ca0:	d1e5      	bne.n	8015c6e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015ca2:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015ca4:	6170      	str	r0, [r6, #20]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015ca6:	e7c1      	b.n	8015c2c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8015ca8:	3301      	adds	r3, #1
 8015caa:	e7c6      	b.n	8015c3a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8015cac:	4b13      	ldr	r3, [pc, #76]	; (8015cfc <start_pass_1_quant+0x130>)
 8015cae:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015cb4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015cb6:	b90b      	cbnz	r3, 8015cbc <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8015cb8:	f7ff ff6a 	bl	8015b90 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015cbc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015cbe:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < cinfo->out_color_components; i++)
 8015cc0:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015cc2:	3202      	adds	r2, #2
 8015cc4:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8015cc6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015cc8:	42bb      	cmp	r3, r7
 8015cca:	dd98      	ble.n	8015bfe <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015ccc:	4632      	mov	r2, r6
 8015cce:	2100      	movs	r1, #0
 8015cd0:	f855 0f04 	ldr.w	r0, [r5, #4]!
    for (i = 0; i < cinfo->out_color_components; i++)
 8015cd4:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015cd6:	f014 fd2b 	bl	802a730 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8015cda:	e7f4      	b.n	8015cc6 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015cdc:	6803      	ldr	r3, [r0, #0]
 8015cde:	2231      	movs	r2, #49	; 0x31
}
 8015ce0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015ce4:	615a      	str	r2, [r3, #20]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	4718      	bx	r3
 8015cea:	bf00      	nop
 8015cec:	08015a87 	.word	0x08015a87
 8015cf0:	08015a29 	.word	0x08015a29
 8015cf4:	08015ae1 	.word	0x08015ae1
 8015cf8:	08015e3d 	.word	0x08015e3d
 8015cfc:	08015d05 	.word	0x08015d05
 8015d00:	0802f130 	.word	0x0802f130

08015d04 <quantize_fs_dither>:
{
 8015d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d08:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 8015d0a:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015d0c:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8015d10:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015d14:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8015d18:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015d1c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015d20:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015d22:	1e6b      	subs	r3, r5, #1
 8015d24:	9305      	str	r3, [sp, #20]
 8015d26:	fb03 f309 	mul.w	r3, r3, r9
 8015d2a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015d2c:	1c6b      	adds	r3, r5, #1
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8015d32:	2300      	movs	r3, #0
 8015d34:	9300      	str	r3, [sp, #0]
 8015d36:	9a00      	ldr	r2, [sp, #0]
 8015d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	db02      	blt.n	8015d44 <quantize_fs_dither+0x40>
}
 8015d3e:	b011      	add	sp, #68	; 0x44
 8015d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015d44:	2100      	movs	r1, #0
 8015d46:	462a      	mov	r2, r5
 8015d48:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8015d4c:	f014 fcf0 	bl	802a730 <memset>
    for (ci = 0; ci < nc; ci++) {
 8015d50:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8015d54:	2100      	movs	r1, #0
 8015d56:	9304      	str	r3, [sp, #16]
	dirnc = -nc;
 8015d58:	f1c9 0300 	rsb	r3, r9, #0
 8015d5c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 8015d5e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8015d60:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8015d62:	db06      	blt.n	8015d72 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015d64:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8015d68:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015d6a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 8015d6c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015d6e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8015d70:	e7e0      	b.n	8015d34 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8015d72:	9800      	ldr	r0, [sp, #0]
 8015d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 8015d7a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 8015d7e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015d82:	9b04      	ldr	r3, [sp, #16]
 8015d84:	f853 cf04 	ldr.w	ip, [r3, #4]!
 8015d88:	9304      	str	r3, [sp, #16]
      if (cquantize->on_odd_row) {
 8015d8a:	b312      	cbz	r2, 8015dd2 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015d8c:	9b08      	ldr	r3, [sp, #32]
 8015d8e:	449e      	add	lr, r3
	output_ptr += width-1;
 8015d90:	9b05      	ldr	r3, [sp, #20]
 8015d92:	4418      	add	r0, r3
	dirnc = -nc;
 8015d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d96:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d9a:	449c      	add	ip, r3
	dir = -1;
 8015d9c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8015da0:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8015da2:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8015da4:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8015da6:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8015da8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015dac:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 8015dae:	6923      	ldr	r3, [r4, #16]
 8015db0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015db4:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015db6:	9b02      	ldr	r3, [sp, #8]
 8015db8:	005b      	lsls	r3, r3, #1
 8015dba:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 8015dbc:	2300      	movs	r3, #0
      cur = 0;
 8015dbe:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015dc0:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015dc2:	9a03      	ldr	r2, [sp, #12]
 8015dc4:	b94a      	cbnz	r2, 8015dda <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015dc6:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8015dc8:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015dca:	436a      	muls	r2, r5
 8015dcc:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8015dd0:	e7c5      	b.n	8015d5e <quantize_fs_dither+0x5a>
	dir = 1;
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8015dd8:	e7e2      	b.n	8015da0 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015dda:	9a01      	ldr	r2, [sp, #4]
 8015ddc:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015de2:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8015de4:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015de8:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8015dec:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8015df2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015df6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015dfa:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015dfe:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015e00:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015e02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8015e04:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015e08:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015e0c:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015e0e:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015e12:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8015e14:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8015e16:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 8015e1a:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 8015e1c:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015e1e:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8015e20:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015e24:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015e26:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8015e28:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 8015e2a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015e2c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 8015e2e:	4443      	add	r3, r8
	belowerr = bnexterr;
 8015e30:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8015e34:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015e38:	4417      	add	r7, r2
 8015e3a:	e7c2      	b.n	8015dc2 <quantize_fs_dither+0xbe>

08015e3c <quantize_ord_dither>:
{
 8015e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e40:	b089      	sub	sp, #36	; 0x24
 8015e42:	4688      	mov	r8, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015e44:	f8d0 91e0 	ldr.w	r9, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 8015e48:	1f14      	subs	r4, r2, #4
{
 8015e4a:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015e4c:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 8015e4e:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8015e50:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015e54:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015e56:	9b07      	ldr	r3, [sp, #28]
 8015e58:	429f      	cmp	r7, r3
 8015e5a:	db02      	blt.n	8015e62 <quantize_ord_dither+0x26>
}
 8015e5c:	b009      	add	sp, #36	; 0x24
 8015e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015e62:	4652      	mov	r2, sl
 8015e64:	2100      	movs	r1, #0
 8015e66:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015e6a:	f014 fc61 	bl	802a730 <memset>
    row_index = cquantize->row_index;
 8015e6e:	4649      	mov	r1, r9
    for (ci = 0; ci < nc; ci++) {
 8015e70:	2000      	movs	r0, #0
    row_index = cquantize->row_index;
 8015e72:	f851 3f30 	ldr.w	r3, [r1, #48]!
      dither = cquantize->odither[ci][row_index];
 8015e76:	019a      	lsls	r2, r3, #6
 8015e78:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8015e7a:	9a01      	ldr	r2, [sp, #4]
 8015e7c:	4290      	cmp	r0, r2
 8015e7e:	db06      	blt.n	8015e8e <quantize_ord_dither+0x52>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015e80:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8015e82:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8015e84:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8015e88:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8015e8c:	e7e3      	b.n	8015e56 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8015e8e:	f8d9 2018 	ldr.w	r2, [r9, #24]
      col_index = 0;
 8015e92:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8015e94:	f858 5027 	ldr.w	r5, [r8, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 8015e98:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
      input_ptr = input_buf[row] + ci;
 8015e9c:	eb05 0c00 	add.w	ip, r5, r0
      colorindex_ci = cquantize->colorindex[ci];
 8015ea0:	6825      	ldr	r5, [r4, #0]
 8015ea2:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015ea4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8015ea8:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 8015eaa:	eb0a 0205 	add.w	r2, sl, r5
 8015eae:	9206      	str	r2, [sp, #24]
 8015eb0:	9a06      	ldr	r2, [sp, #24]
 8015eb2:	4295      	cmp	r5, r2
 8015eb4:	d101      	bne.n	8015eba <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015eb6:	3001      	adds	r0, #1
 8015eb8:	e7df      	b.n	8015e7a <quantize_ord_dither+0x3e>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015eba:	782a      	ldrb	r2, [r5, #0]
 8015ebc:	f89c e000 	ldrb.w	lr, [ip]
 8015ec0:	9204      	str	r2, [sp, #16]
 8015ec2:	9a02      	ldr	r2, [sp, #8]
 8015ec4:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015ec8:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015eca:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015ecc:	f85b b002 	ldr.w	fp, [fp, r2]
 8015ed0:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015ed2:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015ed6:	4496      	add	lr, r2
 8015ed8:	9a04      	ldr	r2, [sp, #16]
 8015eda:	f81e e00b 	ldrb.w	lr, [lr, fp]
 8015ede:	4472      	add	r2, lr
 8015ee0:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8015ee4:	9a01      	ldr	r2, [sp, #4]
 8015ee6:	4494      	add	ip, r2
      for (col = width; col > 0; col--) {
 8015ee8:	e7e2      	b.n	8015eb0 <quantize_ord_dither+0x74>
	...

08015eec <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015eec:	6843      	ldr	r3, [r0, #4]
 8015eee:	2258      	movs	r2, #88	; 0x58
 8015ef0:	2101      	movs	r1, #1
 8015ef2:	681b      	ldr	r3, [r3, #0]
{
 8015ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef8:	b085      	sub	sp, #20
 8015efa:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015efc:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8015efe:	4b68      	ldr	r3, [pc, #416]	; (80160a0 <jinit_1pass_quantizer+0x1b4>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015f00:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8015f04:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8015f06:	4b67      	ldr	r3, [pc, #412]	; (80160a4 <jinit_1pass_quantizer+0x1b8>)
 8015f08:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8015f0a:	4b67      	ldr	r3, [pc, #412]	; (80160a8 <jinit_1pass_quantizer+0x1bc>)
 8015f0c:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8015f0e:	2300      	movs	r3, #0
 8015f10:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8015f12:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8015f14:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015f16:	2b04      	cmp	r3, #4
 8015f18:	dd07      	ble.n	8015f2a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8015f1a:	6823      	ldr	r3, [r4, #0]
 8015f1c:	2039      	movs	r0, #57	; 0x39
 8015f1e:	2204      	movs	r2, #4
 8015f20:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	4620      	mov	r0, r4
 8015f28:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8015f2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f30:	dd08      	ble.n	8015f44 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8015f32:	6823      	ldr	r3, [r4, #0]
 8015f34:	213b      	movs	r1, #59	; 0x3b
 8015f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015f44:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8015f48:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8015f4a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8015f4e:	f106 0920 	add.w	r9, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8015f52:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    iroot++;
 8015f56:	469b      	mov	fp, r3
 8015f58:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8015f5a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8015f5c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8015f5e:	4588      	cmp	r8, r1
 8015f60:	dc49      	bgt.n	8015ff6 <jinit_1pass_quantizer+0x10a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8015f62:	4592      	cmp	sl, r2
 8015f64:	daf7      	bge.n	8015f56 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8015f66:	f1bb 0f01 	cmp.w	fp, #1
 8015f6a:	d106      	bne.n	8015f7a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8015f6c:	6823      	ldr	r3, [r4, #0]
 8015f6e:	213a      	movs	r1, #58	; 0x3a
 8015f70:	4620      	mov	r0, r4
 8015f72:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	4798      	blx	r3
 8015f7a:	f106 071c 	add.w	r7, r6, #28
    for (i = 1; i < nc; i++)
 8015f7e:	2300      	movs	r3, #0
 8015f80:	2501      	movs	r5, #1
 8015f82:	463a      	mov	r2, r7
  for (i = 0; i < nc; i++) {
 8015f84:	4598      	cmp	r8, r3
 8015f86:	dc39      	bgt.n	8015ffc <jinit_1pass_quantizer+0x110>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015f88:	f8df c120 	ldr.w	ip, [pc, #288]	; 80160ac <jinit_1pass_quantizer+0x1c0>
    changed = FALSE;
 8015f8c:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8015f8e:	460b      	mov	r3, r1
 8015f90:	4598      	cmp	r8, r3
 8015f92:	dc39      	bgt.n	8016008 <jinit_1pass_quantizer+0x11c>
  } while (changed);
 8015f94:	2900      	cmp	r1, #0
 8015f96:	d1f9      	bne.n	8015f8c <jinit_1pass_quantizer+0xa0>
  if (cinfo->out_color_components == 3)
 8015f98:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015f9a:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8015f9c:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015f9e:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8015fa0:	d149      	bne.n	8016036 <jinit_1pass_quantizer+0x14a>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015fa2:	619d      	str	r5, [r3, #24]
 8015fa4:	6a31      	ldr	r1, [r6, #32]
 8015fa6:	61d9      	str	r1, [r3, #28]
 8015fa8:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015faa:	6219      	str	r1, [r3, #32]
 8015fac:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015fae:	6259      	str	r1, [r3, #36]	; 0x24
 8015fb0:	2160      	movs	r1, #96	; 0x60
 8015fb2:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015fb4:	2101      	movs	r1, #1
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015fba:	6863      	ldr	r3, [r4, #4]
 8015fbc:	462a      	mov	r2, r5
 8015fbe:	2101      	movs	r1, #1
 8015fc0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8015fc4:	4620      	mov	r0, r4
 8015fc6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015fc8:	47c0      	blx	r8
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015fca:	46a8      	mov	r8, r5
 8015fcc:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8015fce:	9001      	str	r0, [sp, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015fd0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	db33      	blt.n	801603e <jinit_1pass_quantizer+0x152>
  cquantize->sv_colormap = colormap;
 8015fd6:	9b01      	ldr	r3, [sp, #4]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8015fd8:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8015fda:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015fde:	f7ff fcc7 	bl	8015970 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8015fe2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015fe6:	2b02      	cmp	r3, #2
 8015fe8:	d156      	bne.n	8016098 <jinit_1pass_quantizer+0x1ac>
    alloc_fs_workspace(cinfo);
 8015fea:	4620      	mov	r0, r4
}
 8015fec:	b005      	add	sp, #20
 8015fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8015ff2:	f7ff bdcd 	b.w	8015b90 <alloc_fs_workspace>
      temp *= iroot;
 8015ff6:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8015ff8:	3101      	adds	r1, #1
 8015ffa:	e7b0      	b.n	8015f5e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015ffc:	fb0b f505 	mul.w	r5, fp, r5
  for (i = 0; i < nc; i++) {
 8016000:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8016002:	f842 bf04 	str.w	fp, [r2, #4]!
  for (i = 0; i < nc; i++) {
 8016006:	e7bd      	b.n	8015f84 <jinit_1pass_quantizer+0x98>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8016008:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 801600c:	2a02      	cmp	r2, #2
 801600e:	bf0c      	ite	eq
 8016010:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8016014:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8016016:	f859 b020 	ldr.w	fp, [r9, r0, lsl #2]
 801601a:	fb95 f2fb 	sdiv	r2, r5, fp
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 801601e:	fb0b 2202 	mla	r2, fp, r2, r2
 8016022:	f10b 0e01 	add.w	lr, fp, #1
      if (temp > (long) max_colors)
 8016026:	4592      	cmp	sl, r2
 8016028:	dbb4      	blt.n	8015f94 <jinit_1pass_quantizer+0xa8>
    for (i = 0; i < nc; i++) {
 801602a:	3301      	adds	r3, #1
 801602c:	4615      	mov	r5, r2
      changed = TRUE;
 801602e:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8016030:	f849 e020 	str.w	lr, [r9, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8016034:	e7ac      	b.n	8015f90 <jinit_1pass_quantizer+0xa4>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8016036:	2161      	movs	r1, #97	; 0x61
 8016038:	e9c3 1505 	strd	r1, r5, [r3, #20]
 801603c:	e7ba      	b.n	8015fb4 <jinit_1pass_quantizer+0xc8>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801603e:	f857 af04 	ldr.w	sl, [r7, #4]!
      val = output_value(cinfo, i, j, nci-1);
 8016042:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016046:	9302      	str	r3, [sp, #8]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016048:	105b      	asrs	r3, r3, #1
    blksize = blkdist / nci;
 801604a:	fb98 f9fa 	sdiv	r9, r8, sl
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801604e:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8016050:	2300      	movs	r3, #0
 8016052:	469b      	mov	fp, r3
 8016054:	459a      	cmp	sl, r3
 8016056:	dc02      	bgt.n	801605e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016058:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 801605a:	46c8      	mov	r8, r9
 801605c:	e7b8      	b.n	8015fd0 <jinit_1pass_quantizer+0xe4>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801605e:	9803      	ldr	r0, [sp, #12]
 8016060:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8016064:	46dc      	mov	ip, fp
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016066:	4401      	add	r1, r0
 8016068:	9802      	ldr	r0, [sp, #8]
 801606a:	fb91 f1f0 	sdiv	r1, r1, r0
 801606e:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8016070:	45ac      	cmp	ip, r5
 8016072:	db0e      	blt.n	8016092 <jinit_1pass_quantizer+0x1a6>
    for (j = 0; j < nci; j++) {
 8016074:	3301      	adds	r3, #1
 8016076:	44cb      	add	fp, r9
 8016078:	e7ec      	b.n	8016054 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 801607a:	9901      	ldr	r1, [sp, #4]
 801607c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016080:	4471      	add	r1, lr
	for (k = 0; k < blksize; k++)
 8016082:	f10e 0e01 	add.w	lr, lr, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016086:	f801 000c 	strb.w	r0, [r1, ip]
	for (k = 0; k < blksize; k++)
 801608a:	45f1      	cmp	r9, lr
 801608c:	dcf5      	bgt.n	801607a <jinit_1pass_quantizer+0x18e>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801608e:	44c4      	add	ip, r8
 8016090:	e7ee      	b.n	8016070 <jinit_1pass_quantizer+0x184>
	for (k = 0; k < blksize; k++)
 8016092:	f04f 0e00 	mov.w	lr, #0
 8016096:	e7f8      	b.n	801608a <jinit_1pass_quantizer+0x19e>
}
 8016098:	b005      	add	sp, #20
 801609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801609e:	bf00      	nop
 80160a0:	08015bcd 	.word	0x08015bcd
 80160a4:	08015bbf 	.word	0x08015bbf
 80160a8:	08015bc1 	.word	0x08015bc1
 80160ac:	0802f124 	.word	0x0802f124

080160b0 <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 80160b0:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80160b4:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
{
 80160b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  register hist3d histogram = cquantize->histogram;
 80160bc:	6997      	ldr	r7, [r2, #24]

  for (row = 0; row < num_rows; row++) {
 80160be:	2500      	movs	r5, #0
 80160c0:	f04f 0e02 	mov.w	lr, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
 80160c4:	f64f 78ff 	movw	r8, #65535	; 0xffff
  for (row = 0; row < num_rows; row++) {
 80160c8:	429d      	cmp	r5, r3
 80160ca:	db01      	blt.n	80160d0 <prescan_quantize+0x20>
      ptr += 3;
    }
  }
}
 80160cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (col = width; col > 0; col--) {
 80160d0:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80160d4:	4666      	mov	r6, ip
 80160d6:	3003      	adds	r0, #3
 80160d8:	b90e      	cbnz	r6, 80160de <prescan_quantize+0x2e>
  for (row = 0; row < num_rows; row++) {
 80160da:	3501      	adds	r5, #1
 80160dc:	e7f4      	b.n	80160c8 <prescan_quantize+0x18>
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80160de:	f810 2c02 	ldrb.w	r2, [r0, #-2]
    for (col = width; col > 0; col--) {
 80160e2:	3e01      	subs	r6, #1
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80160e4:	f810 9c03 	ldrb.w	r9, [r0, #-3]
 80160e8:	3003      	adds	r0, #3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80160ea:	f810 4c04 	ldrb.w	r4, [r0, #-4]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80160ee:	0892      	lsrs	r2, r2, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80160f0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80160f4:	0192      	lsls	r2, r2, #6
 80160f6:	08e4      	lsrs	r4, r4, #3
 80160f8:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80160fc:	fb1e 2404 	smlabb	r4, lr, r4, r2
      if (++(*histp) <= 0)
 8016100:	f839 2004 	ldrh.w	r2, [r9, r4]
 8016104:	3201      	adds	r2, #1
 8016106:	b292      	uxth	r2, r2
	(*histp)--;
 8016108:	2a00      	cmp	r2, #0
 801610a:	bf08      	it	eq
 801610c:	4642      	moveq	r2, r8
 801610e:	f829 2004 	strh.w	r2, [r9, r4]
    for (col = width; col > 0; col--) {
 8016112:	e7e1      	b.n	80160d8 <prescan_quantize+0x28>

08016114 <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8016114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016118:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 801611c:	4680      	mov	r8, r0
  for (i = 0; i < numcolors; i++) {
 801611e:	2500      	movs	r5, #0
{
 8016120:	930b      	str	r3, [sp, #44]	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8016122:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8016126:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8016128:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801612a:	0140      	lsls	r0, r0, #5
{
 801612c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  c0 >>= BOX_C0_LOG;
 8016130:	1089      	asrs	r1, r1, #2
  hist3d histogram = cquantize->histogram;
 8016132:	9306      	str	r3, [sp, #24]
  c2 >>= BOX_C2_LOG;
 8016134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8016136:	f100 0a02 	add.w	sl, r0, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 801613a:	0149      	lsls	r1, r1, #5
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 801613c:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 801613e:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8016140:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8016144:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8016148:	311c      	adds	r1, #28
  int numcolors = cinfo->actual_number_of_colors;
 801614a:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 801614c:	0164      	lsls	r4, r4, #5
  centerc0 = (minc0 + maxc0) >> 1;
 801614e:	eb09 0301 	add.w	r3, r9, r1
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016152:	f104 0b04 	add.w	fp, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8016156:	341c      	adds	r4, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8016158:	105b      	asrs	r3, r3, #1
 801615a:	9303      	str	r3, [sp, #12]
  centerc1 = (minc1 + maxc1) >> 1;
 801615c:	eb0a 0300 	add.w	r3, sl, r0
 8016160:	105b      	asrs	r3, r3, #1
 8016162:	9304      	str	r3, [sp, #16]
  centerc2 = (minc2 + maxc2) >> 1;
 8016164:	eb0b 0304 	add.w	r3, fp, r4
 8016168:	105b      	asrs	r3, r3, #1
 801616a:	9305      	str	r3, [sp, #20]
  minmaxdist = 0x7FFFFFFFL;
 801616c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016170:	9301      	str	r3, [sp, #4]
  for (i = 0; i < numcolors; i++) {
 8016172:	9b02      	ldr	r3, [sp, #8]
 8016174:	42ab      	cmp	r3, r5
 8016176:	dc43      	bgt.n	8016200 <fill_inverse_cmap+0xec>
  ncolors = 0;
 8016178:	2200      	movs	r2, #0
 801617a:	a972      	add	r1, sp, #456	; 0x1c8
      colorlist[ncolors++] = (JSAMPLE) i;
 801617c:	a832      	add	r0, sp, #200	; 0xc8
  for (i = 0; i < numcolors; i++) {
 801617e:	4613      	mov	r3, r2
 8016180:	9c02      	ldr	r4, [sp, #8]
 8016182:	429c      	cmp	r4, r3
 8016184:	f300 809d 	bgt.w	80162c2 <fill_inverse_cmap+0x1ae>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016188:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 801618a:	a972      	add	r1, sp, #456	; 0x1c8
    *bptr++ = 0x7FFFFFFFL;
 801618c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016190:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8016192:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016196:	d1fb      	bne.n	8016190 <fill_inverse_cmap+0x7c>
 8016198:	a932      	add	r1, sp, #200	; 0xc8
 801619a:	9108      	str	r1, [sp, #32]
  for (i = 0; i < numcolors; i++) {
 801619c:	9301      	str	r3, [sp, #4]
 801619e:	9b01      	ldr	r3, [sp, #4]
 80161a0:	4293      	cmp	r3, r2
 80161a2:	f040 8097 	bne.w	80162d4 <fill_inverse_cmap+0x1c0>
  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 80161a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
  cptr = bestcolor;
 80161a8:	a912      	add	r1, sp, #72	; 0x48
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 80161aa:	f023 0003 	bic.w	r0, r3, #3
 80161ae:	9b06      	ldr	r3, [sp, #24]
 80161b0:	eb03 0580 	add.w	r5, r3, r0, lsl #2
  c2 <<= BOX_C2_LOG;
 80161b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161b6:	f023 0203 	bic.w	r2, r3, #3
  c1 <<= BOX_C1_LOG;
 80161ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161bc:	4628      	mov	r0, r5
 80161be:	f023 0307 	bic.w	r3, r3, #7
 80161c2:	3010      	adds	r0, #16
 80161c4:	019b      	lsls	r3, r3, #6
 80161c6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 80161ca:	f855 4b04 	ldr.w	r4, [r5], #4
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80161ce:	f101 0720 	add.w	r7, r1, #32
 80161d2:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 80161d4:	4626      	mov	r6, r4
 80161d6:	460a      	mov	r2, r1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80161d8:	f101 0c04 	add.w	ip, r1, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80161dc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80161e0:	3101      	adds	r1, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80161e2:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80161e4:	f826 1b02 	strh.w	r1, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80161e8:	d1f8      	bne.n	80161dc <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80161ea:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80161ec:	4611      	mov	r1, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80161ee:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80161f2:	d1ef      	bne.n	80161d4 <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80161f4:	4285      	cmp	r5, r0
 80161f6:	d1e8      	bne.n	80161ca <fill_inverse_cmap+0xb6>
      }
    }
  }
}
 80161f8:	f20d 5dcc 	addw	sp, sp, #1484	; 0x5cc
 80161fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8016200:	f8d8 7088 	ldr.w	r7, [r8, #136]	; 0x88
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8016208:	4591      	cmp	r9, r2
 801620a:	dd2b      	ble.n	8016264 <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 801620c:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8016210:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8016212:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8016216:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 801621c:	459a      	cmp	sl, r3
 801621e:	dd34      	ble.n	801628a <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8016220:	eba3 0e0a 	sub.w	lr, r3, sl
 8016224:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016228:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 801622c:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 801622e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8016232:	fb03 2303 	mla	r3, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8016236:	68ba      	ldr	r2, [r7, #8]
 8016238:	5d52      	ldrb	r2, [r2, r5]
    if (x < minc2) {
 801623a:	4593      	cmp	fp, r2
 801623c:	dd34      	ble.n	80162a8 <fill_inverse_cmap+0x194>
      tdist = (x - minc2) * C2_SCALE;
 801623e:	eba2 070b 	sub.w	r7, r2, fp
 8016242:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016244:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8016248:	1b12      	subs	r2, r2, r4
	tdist = (x - minc2) * C2_SCALE;
 801624a:	0052      	lsls	r2, r2, #1
	max_dist += tdist*tdist;
 801624c:	fb02 3302 	mla	r3, r2, r2, r3
    mindist[i] = min_dist;	/* save away the results */
 8016250:	aa72      	add	r2, sp, #456	; 0x1c8
 8016252:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8016256:	3501      	adds	r5, #1
 8016258:	9a01      	ldr	r2, [sp, #4]
 801625a:	429a      	cmp	r2, r3
 801625c:	bfa8      	it	ge
 801625e:	461a      	movge	r2, r3
 8016260:	9201      	str	r2, [sp, #4]
 8016262:	e786      	b.n	8016172 <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8016264:	4291      	cmp	r1, r2
 8016266:	da06      	bge.n	8016276 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8016268:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 801626c:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8016270:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8016274:	e7cf      	b.n	8016216 <fill_inverse_cmap+0x102>
      if (x <= centerc0) {
 8016276:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 8016278:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 801627c:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 801627e:	bfac      	ite	ge
 8016280:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8016282:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8016286:	4352      	muls	r2, r2
 8016288:	e7c6      	b.n	8016218 <fill_inverse_cmap+0x104>
    } else if (x > maxc1) {
 801628a:	4298      	cmp	r0, r3
 801628c:	da08      	bge.n	80162a0 <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 801628e:	eba3 0e00 	sub.w	lr, r3, r0
 8016292:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016296:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 801629a:	eba3 030a 	sub.w	r3, r3, sl
 801629e:	e7c6      	b.n	801622e <fill_inverse_cmap+0x11a>
      if (x <= centerc1) {
 80162a0:	9e04      	ldr	r6, [sp, #16]
 80162a2:	429e      	cmp	r6, r3
 80162a4:	dbf9      	blt.n	801629a <fill_inverse_cmap+0x186>
 80162a6:	e7c1      	b.n	801622c <fill_inverse_cmap+0x118>
    } else if (x > maxc2) {
 80162a8:	4294      	cmp	r4, r2
 80162aa:	da06      	bge.n	80162ba <fill_inverse_cmap+0x1a6>
      tdist = (x - maxc2) * C2_SCALE;
 80162ac:	1b17      	subs	r7, r2, r4
 80162ae:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 80162b0:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 80162b4:	eba2 020b 	sub.w	r2, r2, fp
 80162b8:	e7c7      	b.n	801624a <fill_inverse_cmap+0x136>
      if (x <= centerc2) {
 80162ba:	9e05      	ldr	r6, [sp, #20]
 80162bc:	4296      	cmp	r6, r2
 80162be:	dbf9      	blt.n	80162b4 <fill_inverse_cmap+0x1a0>
 80162c0:	e7c2      	b.n	8016248 <fill_inverse_cmap+0x134>
    if (mindist[i] <= minmaxdist)
 80162c2:	f851 4b04 	ldr.w	r4, [r1], #4
 80162c6:	9d01      	ldr	r5, [sp, #4]
 80162c8:	42a5      	cmp	r5, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 80162ca:	bfa4      	itt	ge
 80162cc:	5483      	strbge	r3, [r0, r2]
 80162ce:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 80162d0:	3301      	adds	r3, #1
 80162d2:	e755      	b.n	8016180 <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 80162d4:	9b08      	ldr	r3, [sp, #32]
    cptr = bestcolor;
 80162d6:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80162da:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
    icolor = GETJSAMPLE(colorlist[i]);
 80162de:	f813 4b01 	ldrb.w	r4, [r3], #1
 80162e2:	9308      	str	r3, [sp, #32]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80162e4:	680b      	ldr	r3, [r1, #0]
 80162e6:	5d1d      	ldrb	r5, [r3, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162e8:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80162ea:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80162ec:	eba9 0505 	sub.w	r5, r9, r5
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162f0:	5d18      	ldrb	r0, [r3, r4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80162f2:	5d09      	ldrb	r1, [r1, r4]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162f4:	ebaa 0000 	sub.w	r0, sl, r0
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80162f8:	ebab 0101 	sub.w	r1, fp, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80162fc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8016300:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8016302:	435b      	muls	r3, r3
 8016304:	fb05 3305 	mla	r3, r5, r5, r3
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8016308:	3504      	adds	r5, #4
    dist0 += inc2*inc2;
 801630a:	fb01 3301 	mla	r3, r1, r1, r3
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 801630e:	3108      	adds	r1, #8
    dist0 += inc2*inc2;
 8016310:	9304      	str	r3, [sp, #16]
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8016312:	012b      	lsls	r3, r5, #4
 8016314:	930c      	str	r3, [sp, #48]	; 0x30
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8016316:	2348      	movs	r3, #72	; 0x48
 8016318:	4358      	muls	r0, r3
 801631a:	f100 0390 	add.w	r3, r0, #144	; 0x90
 801631e:	930d      	str	r3, [sp, #52]	; 0x34
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8016320:	014b      	lsls	r3, r1, #5
 8016322:	2100      	movs	r1, #0
 8016324:	9307      	str	r3, [sp, #28]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016326:	f500 6319 	add.w	r3, r0, #2448	; 0x990
 801632a:	930f      	str	r3, [sp, #60]	; 0x3c
 801632c:	9b07      	ldr	r3, [sp, #28]
 801632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016332:	930e      	str	r3, [sp, #56]	; 0x38
 8016334:	ab72      	add	r3, sp, #456	; 0x1c8
	xx2 = inc2;
 8016336:	46f4      	mov	ip, lr
      xx1 = inc1;
 8016338:	980d      	ldr	r0, [sp, #52]	; 0x34
 801633a:	440b      	add	r3, r1
 801633c:	9305      	str	r3, [sp, #20]
 801633e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016340:	440b      	add	r3, r1
 8016342:	9310      	str	r3, [sp, #64]	; 0x40
 8016344:	9b04      	ldr	r3, [sp, #16]
 8016346:	9303      	str	r3, [sp, #12]
 8016348:	e023      	b.n	8016392 <fill_inverse_cmap+0x27e>
	  if (dist2 < *bptr) {
 801634a:	463b      	mov	r3, r7
 801634c:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8016350:	9711      	str	r7, [sp, #68]	; 0x44
 8016352:	461f      	mov	r7, r3
 8016354:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016356:	42ab      	cmp	r3, r5
	    *bptr = dist2;
 8016358:	bfc4      	itt	gt
 801635a:	463b      	movgt	r3, r7
 801635c:	601d      	strgt	r5, [r3, #0]
	  dist2 += xx2;
 801635e:	4435      	add	r5, r6
	    *cptr = (JSAMPLE) icolor;
 8016360:	bfc8      	it	gt
 8016362:	9b02      	ldrgt	r3, [sp, #8]
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8016364:	f506 7600 	add.w	r6, r6, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8016368:	bfc8      	it	gt
 801636a:	701c      	strbgt	r4, [r3, #0]
	  cptr++;
 801636c:	9b02      	ldr	r3, [sp, #8]
 801636e:	3301      	adds	r3, #1
 8016370:	9302      	str	r3, [sp, #8]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016374:	42b3      	cmp	r3, r6
 8016376:	d1e8      	bne.n	801634a <fill_inverse_cmap+0x236>
	  bptr++;
 8016378:	9b05      	ldr	r3, [sp, #20]
	  cptr++;
 801637a:	f10c 0c04 	add.w	ip, ip, #4
	  bptr++;
 801637e:	3310      	adds	r3, #16
 8016380:	9305      	str	r3, [sp, #20]
	dist1 += xx1;
 8016382:	9b03      	ldr	r3, [sp, #12]
 8016384:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8016386:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 801638a:	9303      	str	r3, [sp, #12]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 801638c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801638e:	4298      	cmp	r0, r3
 8016390:	d007      	beq.n	80163a2 <fill_inverse_cmap+0x28e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016392:	9b05      	ldr	r3, [sp, #20]
	xx2 = inc2;
 8016394:	9e07      	ldr	r6, [sp, #28]
 8016396:	3b04      	subs	r3, #4
 8016398:	9d03      	ldr	r5, [sp, #12]
 801639a:	f8cd c008 	str.w	ip, [sp, #8]
 801639e:	461f      	mov	r7, r3
 80163a0:	e7d3      	b.n	801634a <fill_inverse_cmap+0x236>
      dist0 += xx0;
 80163a2:	9804      	ldr	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80163a4:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 80163a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	  cptr++;
 80163a8:	f10e 0e20 	add.w	lr, lr, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80163ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
      dist0 += xx0;
 80163b0:	4418      	add	r0, r3
 80163b2:	9004      	str	r0, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80163b4:	d1be      	bne.n	8016334 <fill_inverse_cmap+0x220>
  for (i = 0; i < numcolors; i++) {
 80163b6:	9b01      	ldr	r3, [sp, #4]
 80163b8:	3301      	adds	r3, #1
 80163ba:	e6ef      	b.n	801619c <fill_inverse_cmap+0x88>

080163bc <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 80163bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c0:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 80163c2:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80163c6:	b085      	sub	sp, #20
 80163c8:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 80163ca:	699b      	ldr	r3, [r3, #24]
{
 80163cc:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 80163ce:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 80163d0:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 80163d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80163d4:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80163d6:	4555      	cmp	r5, sl
 80163d8:	db02      	blt.n	80163e0 <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 80163da:	b005      	add	sp, #20
 80163dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 80163e0:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 80163e4:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 80163e8:	9b01      	ldr	r3, [sp, #4]
 80163ea:	3403      	adds	r4, #3
 80163ec:	eb06 0b03 	add.w	fp, r6, r3
 80163f0:	455e      	cmp	r6, fp
 80163f2:	d101      	bne.n	80163f8 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 80163f4:	3501      	adds	r5, #1
 80163f6:	e7ee      	b.n	80163d6 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80163f8:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80163fc:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8016400:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8016404:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8016406:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 801640a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 801640e:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8016412:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8016414:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8016418:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 801641c:	f1bc 0f00 	cmp.w	ip, #0
 8016420:	d106      	bne.n	8016430 <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8016422:	4672      	mov	r2, lr
 8016424:	9303      	str	r3, [sp, #12]
 8016426:	9002      	str	r0, [sp, #8]
 8016428:	f7ff fe74 	bl	8016114 <fill_inverse_cmap>
 801642c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8016430:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016434:	3403      	adds	r4, #3
 8016436:	3b01      	subs	r3, #1
 8016438:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 801643c:	e7d8      	b.n	80163f0 <pass2_no_dither+0x34>

0801643e <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 801643e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016442:	f8d0 a1e0 	ldr.w	sl, [r0, #480]	; 0x1e0
{
 8016446:	b09f      	sub	sp, #124	; 0x7c
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8016448:	f8d0 b070 	ldr.w	fp, [r0, #112]	; 0x70
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 801644c:	f04f 0900 	mov.w	r9, #0
{
 8016450:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8016452:	f8da 3018 	ldr.w	r3, [sl, #24]
 8016456:	9315      	str	r3, [sp, #84]	; 0x54
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016458:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801645c:	9308      	str	r3, [sp, #32]
  int *error_limit = cquantize->error_limiter;
 801645e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8016462:	9309      	str	r3, [sp, #36]	; 0x24
  JSAMPROW colormap0 = cinfo->colormap[0];
 8016464:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8016468:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 801646c:	681a      	ldr	r2, [r3, #0]
 801646e:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8016470:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8016472:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8016474:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 8016476:	9318      	str	r3, [sp, #96]	; 0x60
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016478:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801647c:	3b03      	subs	r3, #3
 801647e:	9310      	str	r3, [sp, #64]	; 0x40
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016480:	2306      	movs	r3, #6
 8016482:	fb0b 3303 	mla	r3, fp, r3, r3
 8016486:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8016488:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801648a:	4599      	cmp	r9, r3
 801648c:	db02      	blt.n	8016494 <pass2_fs_dither+0x56>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 801648e:	b01f      	add	sp, #124	; 0x7c
 8016490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8016494:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016496:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 801649a:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 801649c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801649e:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80164a2:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80164a4:	f8da 3020 	ldr.w	r3, [sl, #32]
 80164a8:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 80164aa:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d036      	beq.n	8016520 <pass2_fs_dither+0xe2>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80164b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164b4:	9a01      	ldr	r2, [sp, #4]
 80164b6:	441a      	add	r2, r3
      outptr += width-1;
 80164b8:	f10b 33ff 	add.w	r3, fp, #4294967295
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80164bc:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 80164be:	9a03      	ldr	r2, [sp, #12]
 80164c0:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80164c2:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 80164c4:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80164c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164c8:	4413      	add	r3, r2
      dir3 = -3;
 80164ca:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80164ce:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 80164d0:	2300      	movs	r3, #0
      dir3 = -3;
 80164d2:	9206      	str	r2, [sp, #24]
      dir = -1;
 80164d4:	f04f 32ff 	mov.w	r2, #4294967295
 80164d8:	920d      	str	r2, [sp, #52]	; 0x34
 80164da:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80164de:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80164e0:	9b06      	ldr	r3, [sp, #24]
 80164e2:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 80164e4:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80164e6:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 80164e8:	4622      	mov	r2, r4
    for (col = width; col > 0; col--) {
 80164ea:	f8cd b01c 	str.w	fp, [sp, #28]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80164ee:	1cab      	adds	r3, r5, #2
    belowerr0 = belowerr1 = belowerr2 = 0;
 80164f0:	940a      	str	r4, [sp, #40]	; 0x28
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80164f2:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80164f4:	1d2b      	adds	r3, r5, #4
 80164f6:	9314      	str	r3, [sp, #80]	; 0x50
    cur0 = cur1 = cur2 = 0;
 80164f8:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80164fa:	e9cd 4404 	strd	r4, r4, [sp, #16]
    belowerr0 = belowerr1 = belowerr2 = 0;
 80164fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    for (col = width; col > 0; col--) {
 8016502:	9f07      	ldr	r7, [sp, #28]
 8016504:	b98f      	cbnz	r7, 801652a <pass2_fs_dither+0xec>
 8016506:	fb0b f505 	mul.w	r5, fp, r5
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 801650a:	9a02      	ldr	r2, [sp, #8]
 801650c:	9b02      	ldr	r3, [sp, #8]
  for (row = 0; row < num_rows; row++) {
 801650e:	f109 0901 	add.w	r9, r9, #1
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8016512:	9904      	ldr	r1, [sp, #16]
 8016514:	442b      	add	r3, r5
 8016516:	5351      	strh	r1, [r2, r5]
    errorptr[1] = (FSERROR) bpreverr1;
 8016518:	9a05      	ldr	r2, [sp, #20]
    errorptr[2] = (FSERROR) bpreverr2;
 801651a:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 801651c:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 801651e:	e7b3      	b.n	8016488 <pass2_fs_dither+0x4a>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8016520:	2301      	movs	r3, #1
      dir3 = 3;
 8016522:	2203      	movs	r2, #3
      dir = 1;
 8016524:	930d      	str	r3, [sp, #52]	; 0x34
      dir3 = 3;
 8016526:	9206      	str	r2, [sp, #24]
 8016528:	e7d7      	b.n	80164da <pass2_fs_dither+0x9c>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801652a:	f936 c005 	ldrsh.w	ip, [r6, r5]
 801652e:	1977      	adds	r7, r6, r5
 8016530:	449c      	add	ip, r3
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016534:	9711      	str	r7, [sp, #68]	; 0x44
 8016536:	5ef3      	ldrsh	r3, [r6, r3]
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8016538:	f10c 0c08 	add.w	ip, ip, #8
      cur0 = error_limit[cur0];
 801653c:	9f09      	ldr	r7, [sp, #36]	; 0x24
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801653e:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016542:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016544:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016546:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016548:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801654a:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801654e:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8016550:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8016554:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016558:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 801655a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 801655e:	9f01      	ldr	r7, [sp, #4]
 8016560:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016564:	9f08      	ldr	r7, [sp, #32]
 8016566:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016568:	443a      	add	r2, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 801656a:	f811 100c 	ldrb.w	r1, [r1, ip]
 801656e:	910e      	str	r1, [sp, #56]	; 0x38
      cur1 += GETJSAMPLE(inptr[1]);
 8016570:	9901      	ldr	r1, [sp, #4]
 8016572:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016574:	5c52      	ldrb	r2, [r2, r1]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016576:	9908      	ldr	r1, [sp, #32]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016578:	4617      	mov	r7, r2
      cur2 += GETJSAMPLE(inptr[2]);
 801657a:	9a01      	ldr	r2, [sp, #4]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 801657c:	440b      	add	r3, r1
      cur2 += GETJSAMPLE(inptr[2]);
 801657e:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016580:	5c9b      	ldrb	r3, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016582:	10ba      	asrs	r2, r7, #2
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016584:	930f      	str	r3, [sp, #60]	; 0x3c
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016588:	10d9      	asrs	r1, r3, #3
 801658a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801658c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016590:	eb03 1882 	add.w	r8, r3, r2, lsl #6
 8016594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016596:	10db      	asrs	r3, r3, #3
      if (*cachep == 0)
 8016598:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801659c:	f1bc 0f00 	cmp.w	ip, #0
 80165a0:	d105      	bne.n	80165ae <pass2_fs_dither+0x170>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 80165a2:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 80165a6:	f7ff fdb5 	bl	8016114 <fill_inverse_cmap>
 80165aa:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 80165ae:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 80165b2:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 80165b4:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80165b6:	9905      	ldr	r1, [sp, #20]
	*outptr = (JSAMPLE) pixcode;
 80165b8:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 80165ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80165bc:	f812 c003 	ldrb.w	ip, [r2, r3]
 80165c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80165c2:	eba2 0c0c 	sub.w	ip, r2, ip
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 80165c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80165c8:	f812 e003 	ldrb.w	lr, [r2, r3]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80165cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 80165ce:	eba7 0e0e 	sub.w	lr, r7, lr
      inptr += dir3;		/* Advance pixel pointers to next column */
 80165d2:	9f01      	ldr	r7, [sp, #4]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80165d4:	f812 8003 	ldrb.w	r8, [r2, r3]
 80165d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80165da:	9a04      	ldr	r2, [sp, #16]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80165dc:	eba3 0808 	sub.w	r8, r3, r8
	cur0 += delta;		/* form error * 3 */
 80165e0:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80165e4:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 80165e6:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80165ea:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 80165ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165ee:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 80165f0:	eb03 034c 	add.w	r3, r3, ip, lsl #1
	bpreverr0 = belowerr0 + cur0;
 80165f4:	9204      	str	r2, [sp, #16]
	cur1 += delta;		/* form error * 3 */
 80165f6:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80165fa:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 80165fc:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8016600:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8016602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016604:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8016606:	eb02 024e 	add.w	r2, r2, lr, lsl #1
	bpreverr1 = belowerr1 + cur1;
 801660a:	9105      	str	r1, [sp, #20]
	cur2 += delta;		/* form error * 3 */
 801660c:	eb08 0148 	add.w	r1, r8, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8016610:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8016612:	eb01 0148 	add.w	r1, r1, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8016616:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016618:	9e06      	ldr	r6, [sp, #24]
	bpreverr2 = belowerr2 + cur2;
 801661a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      inptr += dir3;		/* Advance pixel pointers to next column */
 801661c:	4437      	add	r7, r6
      outptr += dir;
 801661e:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8016620:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8016622:	eb01 0148 	add.w	r1, r1, r8, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016626:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8016628:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801662a:	443e      	add	r6, r7
 801662c:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 801662e:	9e07      	ldr	r6, [sp, #28]
 8016630:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8016632:	e9cd e80b 	strd	lr, r8, [sp, #44]	; 0x2c
    for (col = width; col > 0; col--) {
 8016636:	9607      	str	r6, [sp, #28]
 8016638:	9e11      	ldr	r6, [sp, #68]	; 0x44
	belowerr0 = bnexterr;
 801663a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 801663e:	e760      	b.n	8016502 <pass2_fs_dither+0xc4>

08016640 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8016640:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8016642:	6843      	ldr	r3, [r0, #4]
 8016644:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8016648:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801664a:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8016652:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8016656:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 801665a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 801665e:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016660:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8016662:	425c      	negs	r4, r3
 8016664:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016668:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 801666a:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 801666e:	2b10      	cmp	r3, #16
 8016670:	d1f7      	bne.n	8016662 <init_error_limit+0x22>
 8016672:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8016676:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 801667a:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 801667e:	425d      	negs	r5, r3
 8016680:	f844 3f04 	str.w	r3, [r4, #4]!
 8016684:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8016688:	f002 0501 	and.w	r5, r2, #1
 801668c:	3a01      	subs	r2, #1
 801668e:	442b      	add	r3, r5
 8016690:	f112 0f32 	cmn.w	r2, #50	; 0x32
 8016694:	d1f3      	bne.n	801667e <init_error_limit+0x3e>
 8016696:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 801669a:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 801669e:	425c      	negs	r4, r3
 80166a0:	f841 3f04 	str.w	r3, [r1, #4]!
 80166a4:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 80166a8:	4282      	cmp	r2, r0
 80166aa:	d1f9      	bne.n	80166a0 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 80166ac:	bd38      	pop	{r3, r4, r5, pc}

080166ae <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 80166ae:	4770      	bx	lr

080166b0 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 80166b0:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80166b4:	2201      	movs	r2, #1
 80166b6:	61da      	str	r2, [r3, #28]
}
 80166b8:	4770      	bx	lr
	...

080166bc <start_pass_2_quant>:
{
 80166bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80166be:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80166c2:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 80166c4:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 80166c8:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d050      	beq.n	8016770 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 80166ce:	2302      	movs	r3, #2
 80166d0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 80166d4:	b189      	cbz	r1, 80166fa <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 80166d6:	4b28      	ldr	r3, [pc, #160]	; (8016778 <start_pass_2_quant+0xbc>)
 80166d8:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 80166da:	4b28      	ldr	r3, [pc, #160]	; (801677c <start_pass_2_quant+0xc0>)
 80166dc:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 80166de:	1f34      	subs	r4, r6, #4
 80166e0:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 80166e2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80166e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80166ea:	2100      	movs	r1, #0
 80166ec:	f014 f820 	bl	802a730 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 80166f0:	42a6      	cmp	r6, r4
 80166f2:	d1f6      	bne.n	80166e2 <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 80166f4:	2300      	movs	r3, #0
 80166f6:	61eb      	str	r3, [r5, #28]
}
 80166f8:	e02f      	b.n	801675a <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 80166fa:	4b21      	ldr	r3, [pc, #132]	; (8016780 <start_pass_2_quant+0xc4>)
 80166fc:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 80166fe:	4b21      	ldr	r3, [pc, #132]	; (8016784 <start_pass_2_quant+0xc8>)
 8016700:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 8016702:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 8016706:	2b00      	cmp	r3, #0
 8016708:	dc29      	bgt.n	801675e <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 801670a:	223a      	movs	r2, #58	; 0x3a
 801670c:	6823      	ldr	r3, [r4, #0]
 801670e:	615a      	str	r2, [r3, #20]
 8016710:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016712:	619a      	str	r2, [r3, #24]
 8016714:	4620      	mov	r0, r4
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 801671a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801671e:	2b02      	cmp	r3, #2
 8016720:	d118      	bne.n	8016754 <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8016722:	2306      	movs	r3, #6
 8016724:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016726:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8016728:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801672a:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 801672c:	b93b      	cbnz	r3, 801673e <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801672e:	6863      	ldr	r3, [r4, #4]
 8016730:	2101      	movs	r1, #1
 8016732:	4620      	mov	r0, r4
 8016734:	9201      	str	r2, [sp, #4]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	4798      	blx	r3
 801673a:	9a01      	ldr	r2, [sp, #4]
 801673c:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 801673e:	2100      	movs	r1, #0
 8016740:	6a28      	ldr	r0, [r5, #32]
 8016742:	f013 fff5 	bl	802a730 <memset>
      if (cquantize->error_limiter == NULL)
 8016746:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016748:	b913      	cbnz	r3, 8016750 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 801674a:	4620      	mov	r0, r4
 801674c:	f7ff ff78 	bl	8016640 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8016750:	2300      	movs	r3, #0
 8016752:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 8016754:	69eb      	ldr	r3, [r5, #28]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d1c1      	bne.n	80166de <start_pass_2_quant+0x22>
}
 801675a:	b002      	add	sp, #8
 801675c:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 801675e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016762:	ddda      	ble.n	801671a <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016764:	223b      	movs	r2, #59	; 0x3b
 8016766:	6823      	ldr	r3, [r4, #0]
 8016768:	615a      	str	r2, [r3, #20]
 801676a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801676e:	e7d0      	b.n	8016712 <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8016770:	2900      	cmp	r1, #0
 8016772:	d1b0      	bne.n	80166d6 <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 8016774:	4b04      	ldr	r3, [pc, #16]	; (8016788 <start_pass_2_quant+0xcc>)
 8016776:	e7c1      	b.n	80166fc <start_pass_2_quant+0x40>
 8016778:	080160b1 	.word	0x080160b1
 801677c:	080169b7 	.word	0x080169b7
 8016780:	0801643f 	.word	0x0801643f
 8016784:	080166af 	.word	0x080166af
 8016788:	080163bd 	.word	0x080163bd

0801678c <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 801678c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hist3d histogram = cquantize->histogram;
 8016790:	f8d0 c018 	ldr.w	ip, [r0, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016794:	690b      	ldr	r3, [r1, #16]
 8016796:	694d      	ldr	r5, [r1, #20]
 8016798:	ea4f 0843 	mov.w	r8, r3, lsl #1
 801679c:	9301      	str	r3, [sp, #4]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 801679e:	e9d1 7000 	ldrd	r7, r0, [r1]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80167a2:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
  if (c0max > c0min)
 80167a6:	4287      	cmp	r7, r0
 80167a8:	463b      	mov	r3, r7
 80167aa:	db34      	blt.n	8016816 <update_box.isra.0+0x8a>
  if (c1max > c1min)
 80167ac:	45a6      	cmp	lr, r4
 80167ae:	4672      	mov	r2, lr
 80167b0:	db6e      	blt.n	8016890 <update_box.isra.0+0x104>
  if (c2max > c2min)
 80167b2:	9e01      	ldr	r6, [sp, #4]
 80167b4:	42ae      	cmp	r6, r5
 80167b6:	f2c0 80c1 	blt.w	801693c <update_box.isra.0+0x1b0>
 have_c2min:
 80167ba:	46b6      	mov	lr, r6
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80167bc:	1aa6      	subs	r6, r4, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80167be:	1ac7      	subs	r7, r0, r3
 80167c0:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80167c4:	ea4f 08c6 	mov.w	r8, r6, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80167c8:	00ff      	lsls	r7, r7, #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 80167ca:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80167ce:	eba5 060e 	sub.w	r6, r5, lr
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80167d2:	fb08 f808 	mul.w	r8, r8, r8
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 80167d6:	0136      	lsls	r6, r6, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80167d8:	fb07 8707 	mla	r7, r7, r7, r8
  ccount = 0;
 80167dc:	f04f 0800 	mov.w	r8, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 80167e0:	fb06 7606 	mla	r6, r6, r6, r7
 80167e4:	618e      	str	r6, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 80167e6:	4298      	cmp	r0, r3
 80167e8:	f280 80e3 	bge.w	80169b2 <update_box.isra.0+0x226>
  boxp->colorcount = ccount;
 80167ec:	f8c1 801c 	str.w	r8, [r1, #28]
}
 80167f0:	b003      	add	sp, #12
 80167f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	histp = & histogram[c0][c1][c2min];
 80167f6:	eb08 1a89 	add.w	sl, r8, r9, lsl #6
 80167fa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80167fe:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016800:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (c2 = c2min; c2 <= c2max; c2++)
 8016804:	4555      	cmp	r5, sl
 8016806:	da08      	bge.n	801681a <update_box.isra.0+0x8e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016808:	f109 0901 	add.w	r9, r9, #1
 801680c:	454c      	cmp	r4, r9
 801680e:	daf2      	bge.n	80167f6 <update_box.isra.0+0x6a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8016810:	3301      	adds	r3, #1
 8016812:	4298      	cmp	r0, r3
 8016814:	db0f      	blt.n	8016836 <update_box.isra.0+0xaa>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016816:	46f1      	mov	r9, lr
 8016818:	e7f8      	b.n	801680c <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 801681a:	f832 bb02 	ldrh.w	fp, [r2], #2
 801681e:	f1bb 0f00 	cmp.w	fp, #0
 8016822:	d005      	beq.n	8016830 <update_box.isra.0+0xa4>
  if (c0max > c0min)
 8016824:	4298      	cmp	r0, r3
	    boxp->c0min = c0min = c0;
 8016826:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8016828:	ddc0      	ble.n	80167ac <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801682a:	4607      	mov	r7, r0
 801682c:	46f1      	mov	r9, lr
 801682e:	e00f      	b.n	8016850 <update_box.isra.0+0xc4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016830:	f10a 0a01 	add.w	sl, sl, #1
 8016834:	e7e6      	b.n	8016804 <update_box.isra.0+0x78>
 have_c0min:
 8016836:	463b      	mov	r3, r7
 8016838:	e7f7      	b.n	801682a <update_box.isra.0+0x9e>
	histp = & histogram[c0][c1][c2min];
 801683a:	eb08 1a89 	add.w	sl, r8, r9, lsl #6
 801683e:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 8016842:	4452      	add	r2, sl
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016844:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (c2 = c2min; c2 <= c2max; c2++)
 8016848:	4555      	cmp	r5, sl
 801684a:	da07      	bge.n	801685c <update_box.isra.0+0xd0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 801684c:	f109 0901 	add.w	r9, r9, #1
 8016850:	454c      	cmp	r4, r9
 8016852:	daf2      	bge.n	801683a <update_box.isra.0+0xae>
    for (c0 = c0max; c0 >= c0min; c0--)
 8016854:	3f01      	subs	r7, #1
 8016856:	429f      	cmp	r7, r3
 8016858:	dba8      	blt.n	80167ac <update_box.isra.0+0x20>
 801685a:	e7e7      	b.n	801682c <update_box.isra.0+0xa0>
	  if (*histp++ != 0) {
 801685c:	f832 bb02 	ldrh.w	fp, [r2], #2
 8016860:	f1bb 0f00 	cmp.w	fp, #0
 8016864:	d002      	beq.n	801686c <update_box.isra.0+0xe0>
	    goto have_c0max;
 8016866:	4638      	mov	r0, r7
	    boxp->c0max = c0max = c0;
 8016868:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 801686a:	e79f      	b.n	80167ac <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 801686c:	f10a 0a01 	add.w	sl, sl, #1
 8016870:	e7ea      	b.n	8016848 <update_box.isra.0+0xbc>
	histp = & histogram[c0][c1][c2min];
 8016872:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016876:	f8dd a004 	ldr.w	sl, [sp, #4]
	histp = & histogram[c0][c1][c2min];
 801687a:	eb07 060b 	add.w	r6, r7, fp
	for (c2 = c2min; c2 <= c2max; c2++)
 801687e:	4555      	cmp	r5, sl
 8016880:	da0a      	bge.n	8016898 <update_box.isra.0+0x10c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016882:	f109 0901 	add.w	r9, r9, #1
 8016886:	4581      	cmp	r9, r0
 8016888:	ddf3      	ble.n	8016872 <update_box.isra.0+0xe6>
    for (c1 = c1min; c1 <= c1max; c1++)
 801688a:	3201      	adds	r2, #1
 801688c:	4294      	cmp	r4, r2
 801688e:	db11      	blt.n	80168b4 <update_box.isra.0+0x128>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016890:	4699      	mov	r9, r3
	histp = & histogram[c0][c1][c2min];
 8016892:	eb08 1b82 	add.w	fp, r8, r2, lsl #6
 8016896:	e7f6      	b.n	8016886 <update_box.isra.0+0xfa>
	  if (*histp++ != 0) {
 8016898:	f836 7b02 	ldrh.w	r7, [r6], #2
 801689c:	b13f      	cbz	r7, 80168ae <update_box.isra.0+0x122>
  if (c1max > c1min)
 801689e:	4294      	cmp	r4, r2
	    boxp->c1min = c1min = c1;
 80168a0:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 80168a2:	dd86      	ble.n	80167b2 <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80168a4:	46a6      	mov	lr, r4
 80168a6:	4699      	mov	r9, r3
	histp = & histogram[c0][c1][c2min];
 80168a8:	eb08 1b8e 	add.w	fp, r8, lr, lsl #6
 80168ac:	e00e      	b.n	80168cc <update_box.isra.0+0x140>
	for (c2 = c2min; c2 <= c2max; c2++)
 80168ae:	f10a 0a01 	add.w	sl, sl, #1
 80168b2:	e7e4      	b.n	801687e <update_box.isra.0+0xf2>
 have_c1min:
 80168b4:	4672      	mov	r2, lr
 80168b6:	e7f5      	b.n	80168a4 <update_box.isra.0+0x118>
	histp = & histogram[c0][c1][c2min];
 80168b8:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80168bc:	f8dd a004 	ldr.w	sl, [sp, #4]
	histp = & histogram[c0][c1][c2min];
 80168c0:	eb07 060b 	add.w	r6, r7, fp
	for (c2 = c2min; c2 <= c2max; c2++)
 80168c4:	4555      	cmp	r5, sl
 80168c6:	da09      	bge.n	80168dc <update_box.isra.0+0x150>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80168c8:	f109 0901 	add.w	r9, r9, #1
 80168cc:	4548      	cmp	r0, r9
 80168ce:	daf3      	bge.n	80168b8 <update_box.isra.0+0x12c>
    for (c1 = c1max; c1 >= c1min; c1--)
 80168d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80168d4:	4596      	cmp	lr, r2
 80168d6:	f6ff af6c 	blt.w	80167b2 <update_box.isra.0+0x26>
 80168da:	e7e4      	b.n	80168a6 <update_box.isra.0+0x11a>
	  if (*histp++ != 0) {
 80168dc:	f836 7b02 	ldrh.w	r7, [r6], #2
 80168e0:	b11f      	cbz	r7, 80168ea <update_box.isra.0+0x15e>
	    goto have_c1max;
 80168e2:	4674      	mov	r4, lr
	    boxp->c1max = c1max = c1;
 80168e4:	f8c1 e00c 	str.w	lr, [r1, #12]
	    goto have_c1max;
 80168e8:	e763      	b.n	80167b2 <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 80168ea:	f10a 0a01 	add.w	sl, sl, #1
 80168ee:	e7e9      	b.n	80168c4 <update_box.isra.0+0x138>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80168f0:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
 80168f4:	4691      	mov	r9, r2
 80168f6:	4457      	add	r7, sl
 80168f8:	45a1      	cmp	r9, r4
 80168fa:	dd0b      	ble.n	8016914 <update_box.isra.0+0x188>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80168fc:	f108 0801 	add.w	r8, r8, #1
 8016900:	4540      	cmp	r0, r8
 8016902:	daf5      	bge.n	80168f0 <update_box.isra.0+0x164>
    for (c2 = c2min; c2 <= c2max; c2++)
 8016904:	f10e 0e01 	add.w	lr, lr, #1
 8016908:	4575      	cmp	r5, lr
 801690a:	db1a      	blt.n	8016942 <update_box.isra.0+0x1b6>
 801690c:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016910:	4698      	mov	r8, r3
 8016912:	e7f5      	b.n	8016900 <update_box.isra.0+0x174>
	  if (*histp != 0) {
 8016914:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 8016918:	f837 b00b 	ldrh.w	fp, [r7, fp]
 801691c:	f1bb 0f00 	cmp.w	fp, #0
 8016920:	d009      	beq.n	8016936 <update_box.isra.0+0x1aa>
  if (c2max > c2min)
 8016922:	4575      	cmp	r5, lr
	    boxp->c2min = c2min = c2;
 8016924:	f8c1 e010 	str.w	lr, [r1, #16]
  if (c2max > c2min)
 8016928:	f77f af48 	ble.w	80167bc <update_box.isra.0+0x30>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801692c:	462f      	mov	r7, r5
 801692e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8016932:	4698      	mov	r8, r3
 8016934:	e010      	b.n	8016958 <update_box.isra.0+0x1cc>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016936:	f109 0901 	add.w	r9, r9, #1
 801693a:	e7dd      	b.n	80168f8 <update_box.isra.0+0x16c>
 801693c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016940:	e7e4      	b.n	801690c <update_box.isra.0+0x180>
 have_c2min:
 8016942:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016946:	e7f1      	b.n	801692c <update_box.isra.0+0x1a0>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016948:	f85c 6028 	ldr.w	r6, [ip, r8, lsl #2]
 801694c:	4691      	mov	r9, r2
 801694e:	4456      	add	r6, sl
 8016950:	454c      	cmp	r4, r9
 8016952:	da08      	bge.n	8016966 <update_box.isra.0+0x1da>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016954:	f108 0801 	add.w	r8, r8, #1
 8016958:	4540      	cmp	r0, r8
 801695a:	daf5      	bge.n	8016948 <update_box.isra.0+0x1bc>
    for (c2 = c2max; c2 >= c2min; c2--)
 801695c:	3f01      	subs	r7, #1
 801695e:	4577      	cmp	r7, lr
 8016960:	f6ff af2c 	blt.w	80167bc <update_box.isra.0+0x30>
 8016964:	e7e3      	b.n	801692e <update_box.isra.0+0x1a2>
	  if (*histp != 0) {
 8016966:	ea4f 1b89 	mov.w	fp, r9, lsl #6
 801696a:	f836 b00b 	ldrh.w	fp, [r6, fp]
 801696e:	f1bb 0f00 	cmp.w	fp, #0
 8016972:	d002      	beq.n	801697a <update_box.isra.0+0x1ee>
	    goto have_c2max;
 8016974:	463d      	mov	r5, r7
	    boxp->c2max = c2max = c2;
 8016976:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 8016978:	e720      	b.n	80167bc <update_box.isra.0+0x30>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801697a:	f109 0901 	add.w	r9, r9, #1
 801697e:	e7e7      	b.n	8016950 <update_box.isra.0+0x1c4>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8016980:	eb0a 1987 	add.w	r9, sl, r7, lsl #6
 8016984:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8016988:	f1a9 0902 	sub.w	r9, r9, #2
 801698c:	444e      	add	r6, r9
 801698e:	46f1      	mov	r9, lr
 8016990:	454d      	cmp	r5, r9
 8016992:	da04      	bge.n	801699e <update_box.isra.0+0x212>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016994:	3701      	adds	r7, #1
 8016996:	42bc      	cmp	r4, r7
 8016998:	daf2      	bge.n	8016980 <update_box.isra.0+0x1f4>
  for (c0 = c0min; c0 <= c0max; c0++)
 801699a:	3301      	adds	r3, #1
 801699c:	e723      	b.n	80167e6 <update_box.isra.0+0x5a>
	if (*histp != 0) {
 801699e:	f836 bf02 	ldrh.w	fp, [r6, #2]!
 80169a2:	f1bb 0f00 	cmp.w	fp, #0
 80169a6:	d001      	beq.n	80169ac <update_box.isra.0+0x220>
	  ccount++;
 80169a8:	f108 0801 	add.w	r8, r8, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80169ac:	f109 0901 	add.w	r9, r9, #1
 80169b0:	e7ee      	b.n	8016990 <update_box.isra.0+0x204>
 80169b2:	4617      	mov	r7, r2
 80169b4:	e7ef      	b.n	8016996 <update_box.isra.0+0x20a>

080169b6 <finish_pass1>:
{
 80169b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80169ba:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80169be:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80169c0:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 80169c2:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80169c6:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 80169c8:	691b      	ldr	r3, [r3, #16]
{
 80169ca:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 80169cc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 80169d0:	9b02      	ldr	r3, [sp, #8]
 80169d2:	695b      	ldr	r3, [r3, #20]
 80169d4:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80169d6:	9a01      	ldr	r2, [sp, #4]
 80169d8:	6843      	ldr	r3, [r0, #4]
 80169da:	0152      	lsls	r2, r2, #5
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80169e0:	2300      	movs	r3, #0
 80169e2:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 80169e4:	213f      	movs	r1, #63	; 0x3f
  boxlist[0].c1min = 0;
 80169e6:	6083      	str	r3, [r0, #8]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 80169e8:	4604      	mov	r4, r0
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 80169ea:	6142      	str	r2, [r0, #20]
 80169ec:	46a0      	mov	r8, r4
  update_box(cinfo, & boxlist[0]);
 80169ee:	4627      	mov	r7, r4
  boxlist[0].c2min = 0;
 80169f0:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 80169f4:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 80169f8:	9b00      	ldr	r3, [sp, #0]
 80169fa:	4601      	mov	r1, r0
 80169fc:	f8d3 a1e0 	ldr.w	sl, [r3, #480]	; 0x1e0
 8016a00:	4650      	mov	r0, sl
 8016a02:	f7ff fec3 	bl	801678c <update_box.isra.0>
  while (numboxes < desired_colors) {
 8016a06:	9b01      	ldr	r3, [sp, #4]
 8016a08:	455b      	cmp	r3, fp
 8016a0a:	dc24      	bgt.n	8016a56 <finish_pass1+0xa0>
 8016a0c:	2100      	movs	r1, #0
  hist3d histogram = cquantize->histogram;
 8016a0e:	9b00      	ldr	r3, [sp, #0]
 8016a10:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8016a14:	699b      	ldr	r3, [r3, #24]
 8016a16:	9303      	str	r3, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016a18:	e9d8 7300 	ldrd	r7, r3, [r8]
 8016a1c:	9304      	str	r3, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a22:	9305      	str	r3, [sp, #20]
 8016a24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a28:	9306      	str	r3, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016a2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016a2e:	9301      	str	r3, [sp, #4]
 8016a30:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016a34:	9307      	str	r3, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 8016a36:	9b01      	ldr	r3, [sp, #4]
 8016a38:	005b      	lsls	r3, r3, #1
 8016a3a:	9309      	str	r3, [sp, #36]	; 0x24
  long c2total = 0;
 8016a3c:	2300      	movs	r3, #0
  long c1total = 0;
 8016a3e:	469a      	mov	sl, r3
  long c0total = 0;
 8016a40:	4699      	mov	r9, r3
  long total = 0;
 8016a42:	461a      	mov	r2, r3
  for (c0 = c0min; c0 <= c0max; c0++)
 8016a44:	9804      	ldr	r0, [sp, #16]
 8016a46:	42b8      	cmp	r0, r7
 8016a48:	f2c0 8097 	blt.w	8016b7a <finish_pass1+0x1c4>
 8016a4c:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016a4e:	9e05      	ldr	r6, [sp, #20]
 8016a50:	3004      	adds	r0, #4
 8016a52:	9008      	str	r0, [sp, #32]
 8016a54:	e07b      	b.n	8016b4e <finish_pass1+0x198>
    if (numboxes*2 <= desired_colors) {
 8016a56:	9b01      	ldr	r3, [sp, #4]
 8016a58:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8016a5c:	db4e      	blt.n	8016afc <finish_pass1+0x146>
  boxptr which = NULL;
 8016a5e:	2100      	movs	r1, #0
 8016a60:	4622      	mov	r2, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016a62:	4608      	mov	r0, r1
  register long maxc = 0;
 8016a64:	460e      	mov	r6, r1
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 8016a66:	69d3      	ldr	r3, [r2, #28]
 8016a68:	42b3      	cmp	r3, r6
 8016a6a:	dd04      	ble.n	8016a76 <finish_pass1+0xc0>
 8016a6c:	6995      	ldr	r5, [r2, #24]
 8016a6e:	2d00      	cmp	r5, #0
 8016a70:	bfc4      	itt	gt
 8016a72:	4611      	movgt	r1, r2
 8016a74:	461e      	movgt	r6, r3
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016a76:	3001      	adds	r0, #1
 8016a78:	3220      	adds	r2, #32
 8016a7a:	4583      	cmp	fp, r0
 8016a7c:	d1f3      	bne.n	8016a66 <finish_pass1+0xb0>
    if (b1 == NULL)		/* no splittable boxes left! */
 8016a7e:	2900      	cmp	r1, #0
 8016a80:	d0c5      	beq.n	8016a0e <finish_pass1+0x58>
    b2 = &boxlist[numboxes];	/* where new box will go */
 8016a82:	f107 0320 	add.w	r3, r7, #32
 8016a86:	ee07 3a90 	vmov	s15, r3
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 8016a8a:	684b      	ldr	r3, [r1, #4]
 8016a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8016a8e:	68ca      	ldr	r2, [r1, #12]
 8016a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016a92:	694a      	ldr	r2, [r1, #20]
 8016a94:	637a      	str	r2, [r7, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8016a96:	680a      	ldr	r2, [r1, #0]
 8016a98:	623a      	str	r2, [r7, #32]
 8016a9a:	688a      	ldr	r2, [r1, #8]
 8016a9c:	62ba      	str	r2, [r7, #40]	; 0x28
 8016a9e:	6908      	ldr	r0, [r1, #16]
 8016aa0:	6338      	str	r0, [r7, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8016aa2:	680a      	ldr	r2, [r1, #0]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016aa4:	688e      	ldr	r6, [r1, #8]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8016aa6:	9203      	str	r2, [sp, #12]
 8016aa8:	1a9a      	subs	r2, r3, r2
 8016aaa:	ea4f 09c2 	mov.w	r9, r2, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016aae:	68ca      	ldr	r2, [r1, #12]
 8016ab0:	9204      	str	r2, [sp, #16]
 8016ab2:	1b92      	subs	r2, r2, r6
 8016ab4:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8016ab8:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016abc:	694a      	ldr	r2, [r1, #20]
 8016abe:	eba2 0e00 	sub.w	lr, r2, r0
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016ac2:	ebbc 1f0e 	cmp.w	ip, lr, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016ac6:	ea4f 150e 	mov.w	r5, lr, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016aca:	f2c0 808a 	blt.w	8016be2 <finish_pass1+0x22c>
    if (c0 > cmax) { n = 0; }
 8016ace:	45e1      	cmp	r9, ip
 8016ad0:	dd23      	ble.n	8016b1a <finish_pass1+0x164>
      lb = (b1->c0max + b1->c0min) / 2;
 8016ad2:	9a03      	ldr	r2, [sp, #12]
 8016ad4:	4413      	add	r3, r2
 8016ad6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016ada:	105b      	asrs	r3, r3, #1
      b1->c0max = lb;
 8016adc:	604b      	str	r3, [r1, #4]
      b2->c0min = lb+1;
 8016ade:	3301      	adds	r3, #1
 8016ae0:	623b      	str	r3, [r7, #32]
    update_box(cinfo, b1);
 8016ae2:	4650      	mov	r0, sl
    numboxes++;
 8016ae4:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8016ae8:	f7ff fe50 	bl	801678c <update_box.isra.0>
    update_box(cinfo, b2);
 8016aec:	ee17 1a90 	vmov	r1, s15
 8016af0:	4650      	mov	r0, sl
    numboxes++;
 8016af2:	ee17 7a90 	vmov	r7, s15
    update_box(cinfo, b2);
 8016af6:	f7ff fe49 	bl	801678c <update_box.isra.0>
    numboxes++;
 8016afa:	e784      	b.n	8016a06 <finish_pass1+0x50>
  boxptr which = NULL;
 8016afc:	2100      	movs	r1, #0
 8016afe:	4623      	mov	r3, r4
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016b00:	460a      	mov	r2, r1
  register INT32 maxv = 0;
 8016b02:	4608      	mov	r0, r1
    if (boxp->volume > maxv) {
 8016b04:	699e      	ldr	r6, [r3, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016b06:	3201      	adds	r2, #1
    if (boxp->volume > maxv) {
 8016b08:	4286      	cmp	r6, r0
 8016b0a:	bfc4      	itt	gt
 8016b0c:	4619      	movgt	r1, r3
 8016b0e:	4630      	movgt	r0, r6
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016b10:	4593      	cmp	fp, r2
 8016b12:	f103 0320 	add.w	r3, r3, #32
 8016b16:	d1f5      	bne.n	8016b04 <finish_pass1+0x14e>
 8016b18:	e7b1      	b.n	8016a7e <finish_pass1+0xc8>
      lb = (b1->c1max + b1->c1min) / 2;
 8016b1a:	9b04      	ldr	r3, [sp, #16]
 8016b1c:	4433      	add	r3, r6
 8016b1e:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 8016b22:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 8016b24:	60ce      	str	r6, [r1, #12]
      b2->c1min = lb+1;
 8016b26:	3601      	adds	r6, #1
 8016b28:	62be      	str	r6, [r7, #40]	; 0x28
      break;
 8016b2a:	e7da      	b.n	8016ae2 <finish_pass1+0x12c>
      histp = & histogram[c0][c1][c2min];
 8016b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b2e:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8016b32:	9c03      	ldr	r4, [sp, #12]
 8016b34:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8016b38:	f10e 0e02 	add.w	lr, lr, #2
 8016b3c:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016b40:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 8016b44:	4420      	add	r0, r4
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016b46:	9c07      	ldr	r4, [sp, #28]
 8016b48:	4564      	cmp	r4, ip
 8016b4a:	da05      	bge.n	8016b58 <finish_pass1+0x1a2>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016b4c:	3601      	adds	r6, #1
 8016b4e:	9806      	ldr	r0, [sp, #24]
 8016b50:	42b0      	cmp	r0, r6
 8016b52:	daeb      	bge.n	8016b2c <finish_pass1+0x176>
  for (c0 = c0min; c0 <= c0max; c0++)
 8016b54:	3701      	adds	r7, #1
 8016b56:	e775      	b.n	8016a44 <finish_pass1+0x8e>
	if ((count = *histp++) != 0) {
 8016b58:	f830 4b02 	ldrh.w	r4, [r0], #2
 8016b5c:	b154      	cbz	r4, 8016b74 <finish_pass1+0x1be>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016b5e:	9d08      	ldr	r5, [sp, #32]
	  total += count;
 8016b60:	4422      	add	r2, r4
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8016b62:	fb0e aa04 	mla	sl, lr, r4, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016b66:	fb05 9904 	mla	r9, r5, r4, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8016b6a:	ea4f 05cc 	mov.w	r5, ip, lsl #3
 8016b6e:	3504      	adds	r5, #4
 8016b70:	fb04 3305 	mla	r3, r4, r5, r3
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016b74:	f10c 0c01 	add.w	ip, ip, #1
 8016b78:	e7e5      	b.n	8016b46 <finish_pass1+0x190>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016b7a:	9800      	ldr	r0, [sp, #0]
 8016b7c:	eb09 0962 	add.w	r9, r9, r2, asr #1
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016b80:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
  for (i = 0; i < numboxes; i++)
 8016b84:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016b88:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016b8c:	eb03 0362 	add.w	r3, r3, r2, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016b90:	fb99 f9f2 	sdiv	r9, r9, r2
 8016b94:	6800      	ldr	r0, [r0, #0]
 8016b96:	f800 9001 	strb.w	r9, [r0, r1]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016b9a:	9800      	ldr	r0, [sp, #0]
 8016b9c:	fb9a faf2 	sdiv	sl, sl, r2
 8016ba0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016ba4:	6840      	ldr	r0, [r0, #4]
 8016ba6:	f800 a001 	strb.w	sl, [r0, r1]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016baa:	9800      	ldr	r0, [sp, #0]
 8016bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8016bb0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016bb4:	6880      	ldr	r0, [r0, #8]
 8016bb6:	5443      	strb	r3, [r0, r1]
  for (i = 0; i < numboxes; i++)
 8016bb8:	3101      	adds	r1, #1
 8016bba:	4559      	cmp	r1, fp
 8016bbc:	f47f af27 	bne.w	8016a0e <finish_pass1+0x58>
  cinfo->actual_number_of_colors = numboxes;
 8016bc0:	9b00      	ldr	r3, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016bc2:	2262      	movs	r2, #98	; 0x62
 8016bc4:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8016bc6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	2101      	movs	r1, #1
 8016bd4:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8016bd6:	2301      	movs	r3, #1
 8016bd8:	9a02      	ldr	r2, [sp, #8]
 8016bda:	61d3      	str	r3, [r2, #28]
}
 8016bdc:	b00b      	add	sp, #44	; 0x2c
 8016bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8016be2:	45a9      	cmp	r9, r5
 8016be4:	f73f af75 	bgt.w	8016ad2 <finish_pass1+0x11c>
      lb = (b1->c2max + b1->c2min) / 2;
 8016be8:	4402      	add	r2, r0
 8016bea:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016bee:	1052      	asrs	r2, r2, #1
      b1->c2max = lb;
 8016bf0:	614a      	str	r2, [r1, #20]
      b2->c2min = lb+1;
 8016bf2:	3201      	adds	r2, #1
 8016bf4:	633a      	str	r2, [r7, #48]	; 0x30
      break;
 8016bf6:	e774      	b.n	8016ae2 <finish_pass1+0x12c>

08016bf8 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8016bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016bfa:	6843      	ldr	r3, [r0, #4]
 8016bfc:	222c      	movs	r2, #44	; 0x2c
 8016bfe:	2101      	movs	r1, #1
{
 8016c00:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8016c06:	4b30      	ldr	r3, [pc, #192]	; (8016cc8 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016c08:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016c0c:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 8016c0e:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8016c10:	4b2e      	ldr	r3, [pc, #184]	; (8016ccc <jinit_2pass_quantizer+0xd4>)
 8016c12:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8016c14:	2300      	movs	r3, #0
 8016c16:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8016c18:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8016c1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016c1c:	2b03      	cmp	r3, #3
 8016c1e:	d005      	beq.n	8016c2c <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8016c20:	6823      	ldr	r3, [r4, #0]
 8016c22:	2230      	movs	r2, #48	; 0x30
 8016c24:	4620      	mov	r0, r4
 8016c26:	615a      	str	r2, [r3, #20]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8016c2c:	6863      	ldr	r3, [r4, #4]
 8016c2e:	2600      	movs	r6, #0
 8016c30:	2280      	movs	r2, #128	; 0x80
 8016c32:	2101      	movs	r1, #1
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	4620      	mov	r0, r4
 8016c38:	4798      	blx	r3
 8016c3a:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8016c3c:	6863      	ldr	r3, [r4, #4]
 8016c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016c42:	69af      	ldr	r7, [r5, #24]
 8016c44:	2101      	movs	r1, #1
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	4620      	mov	r0, r4
 8016c4a:	4798      	blx	r3
 8016c4c:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8016c4e:	3604      	adds	r6, #4
 8016c50:	2e80      	cmp	r6, #128	; 0x80
 8016c52:	d1f3      	bne.n	8016c3c <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8016c54:	2301      	movs	r3, #1
 8016c56:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8016c58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d031      	beq.n	8016cc2 <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8016c5e:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8016c60:	2e07      	cmp	r6, #7
 8016c62:	dc25      	bgt.n	8016cb0 <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8016c64:	223a      	movs	r2, #58	; 0x3a
 8016c66:	6823      	ldr	r3, [r4, #0]
 8016c68:	615a      	str	r2, [r3, #20]
 8016c6a:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016c6c:	619a      	str	r2, [r3, #24]
 8016c6e:	4620      	mov	r0, r4
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8016c74:	6863      	ldr	r3, [r4, #4]
 8016c76:	4632      	mov	r2, r6
 8016c78:	2101      	movs	r1, #1
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	689f      	ldr	r7, [r3, #8]
 8016c7e:	2303      	movs	r3, #3
 8016c80:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8016c82:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8016c86:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016c8a:	b1e3      	cbz	r3, 8016cc6 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8016c8c:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016c8e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016c90:	4620      	mov	r0, r4
 8016c92:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8016c94:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016c98:	2306      	movs	r3, #6
 8016c9a:	435a      	muls	r2, r3
 8016c9c:	6863      	ldr	r3, [r4, #4]
 8016c9e:	320c      	adds	r2, #12
 8016ca0:	685b      	ldr	r3, [r3, #4]
 8016ca2:	4798      	blx	r3
 8016ca4:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8016ca6:	4620      	mov	r0, r4
  }
}
 8016ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016cac:	f7ff bcc8 	b.w	8016640 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8016cb0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016cb4:	ddde      	ble.n	8016c74 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016cb6:	223b      	movs	r2, #59	; 0x3b
 8016cb8:	6823      	ldr	r3, [r4, #0]
 8016cba:	615a      	str	r2, [r3, #20]
 8016cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016cc0:	e7d4      	b.n	8016c6c <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8016cc2:	612b      	str	r3, [r5, #16]
 8016cc4:	e7df      	b.n	8016c86 <jinit_2pass_quantizer+0x8e>
}
 8016cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cc8:	080166bd 	.word	0x080166bd
 8016ccc:	080166b1 	.word	0x080166b1

08016cd0 <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8016cd0:	1843      	adds	r3, r0, r1
 8016cd2:	3b01      	subs	r3, #1
}
 8016cd4:	fb93 f0f1 	sdiv	r0, r3, r1
 8016cd8:	4770      	bx	lr

08016cda <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8016cda:	1e4b      	subs	r3, r1, #1
 8016cdc:	4418      	add	r0, r3
  return a - (a % b);
 8016cde:	fb90 f3f1 	sdiv	r3, r0, r1
 8016ce2:	fb01 0313 	mls	r3, r1, r3, r0
}
 8016ce6:	1ac0      	subs	r0, r0, r3
 8016ce8:	4770      	bx	lr

08016cea <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8016cea:	b570      	push	{r4, r5, r6, lr}
 8016cec:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8016cee:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8016cf2:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8016cf6:	2e00      	cmp	r6, #0
 8016cf8:	dc00      	bgt.n	8016cfc <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8016cfa:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016cfc:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8016cfe:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8016d00:	f854 1b04 	ldr.w	r1, [r4], #4
 8016d04:	f855 0b04 	ldr.w	r0, [r5], #4
 8016d08:	f013 fdf3 	bl	802a8f2 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016d0c:	e7f3      	b.n	8016cf6 <jcopy_sample_rows+0xc>

08016d0e <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8016d0e:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8016d10:	01d2      	lsls	r2, r2, #7
 8016d12:	4601      	mov	r1, r0
 8016d14:	4618      	mov	r0, r3
 8016d16:	f013 bdec 	b.w	802a8f2 <memcpy>

08016d1a <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016d1a:	8880      	ldrh	r0, [r0, #4]
 8016d1c:	4770      	bx	lr

08016d1e <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016d1e:	b570      	push	{r4, r5, r6, lr}
 8016d20:	6803      	ldr	r3, [r0, #0]
 8016d22:	460c      	mov	r4, r1
 8016d24:	2100      	movs	r1, #0
 8016d26:	4605      	mov	r5, r0
 8016d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d2a:	4798      	blx	r3
 8016d2c:	4606      	mov	r6, r0
 8016d2e:	682b      	ldr	r3, [r5, #0]
 8016d30:	4628      	mov	r0, r5
 8016d32:	1ba4      	subs	r4, r4, r6
 8016d34:	6a1b      	ldr	r3, [r3, #32]
 8016d36:	b2a4      	uxth	r4, r4
 8016d38:	4798      	blx	r3
 8016d3a:	fbb4 f0f0 	udiv	r0, r4, r0
 8016d3e:	bd70      	pop	{r4, r5, r6, pc}

08016d40 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016d40:	2300      	movs	r3, #0
 8016d42:	8083      	strh	r3, [r0, #4]
 8016d44:	4770      	bx	lr

08016d46 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016d46:	b510      	push	{r4, lr}
 8016d48:	6803      	ldr	r3, [r0, #0]
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	8881      	ldrh	r1, [r0, #4]
 8016d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d50:	4798      	blx	r3
 8016d52:	88a3      	ldrh	r3, [r4, #4]
 8016d54:	3301      	adds	r3, #1
 8016d56:	80a3      	strh	r3, [r4, #4]
 8016d58:	bd10      	pop	{r4, pc}

08016d5a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016d5a:	6803      	ldr	r3, [r0, #0]
 8016d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d5e:	4718      	bx	r3

08016d60 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016d60:	4770      	bx	lr
	...

08016d64 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016d64:	4a02      	ldr	r2, [pc, #8]	; (8016d70 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016d66:	6002      	str	r2, [r0, #0]
 8016d68:	2200      	movs	r2, #0
 8016d6a:	8082      	strh	r2, [r0, #4]
 8016d6c:	4770      	bx	lr
 8016d6e:	bf00      	nop
 8016d70:	0802f724 	.word	0x0802f724

08016d74 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016d74:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016d76:	4770      	bx	lr

08016d78 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016d78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016d7a:	2000      	movs	r0, #0
 8016d7c:	b12b      	cbz	r3, 8016d8a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016d7e:	b920      	cbnz	r0, 8016d8a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016d80:	1a5a      	subs	r2, r3, r1
 8016d82:	699b      	ldr	r3, [r3, #24]
 8016d84:	4250      	negs	r0, r2
 8016d86:	4150      	adcs	r0, r2
 8016d88:	e7f8      	b.n	8016d7c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016d8a:	4770      	bx	lr

08016d8c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	6148      	str	r0, [r1, #20]
 8016d90:	618b      	str	r3, [r1, #24]
 8016d92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016d94:	b913      	cbnz	r3, 8016d9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8016d96:	6281      	str	r1, [r0, #40]	; 0x28
 8016d98:	4770      	bx	lr
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	699a      	ldr	r2, [r3, #24]
 8016d9e:	2a00      	cmp	r2, #0
 8016da0:	d1fb      	bne.n	8016d9a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016da2:	6199      	str	r1, [r3, #24]
 8016da4:	4770      	bx	lr

08016da6 <_ZN8touchgfx9Container9removeAllEv>:
 8016da6:	2200      	movs	r2, #0
 8016da8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016daa:	b123      	cbz	r3, 8016db6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016dac:	6999      	ldr	r1, [r3, #24]
 8016dae:	6281      	str	r1, [r0, #40]	; 0x28
 8016db0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016db4:	e7f8      	b.n	8016da8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016db6:	4770      	bx	lr

08016db8 <_ZN8touchgfx9Container6unlinkEv>:
 8016db8:	2300      	movs	r3, #0
 8016dba:	6283      	str	r3, [r0, #40]	; 0x28
 8016dbc:	4770      	bx	lr

08016dbe <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	8002      	strh	r2, [r0, #0]
 8016dc2:	8042      	strh	r2, [r0, #2]
 8016dc4:	8082      	strh	r2, [r0, #4]
 8016dc6:	80c2      	strh	r2, [r0, #6]
 8016dc8:	4770      	bx	lr

08016dca <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016dca:	b570      	push	{r4, r5, r6, lr}
 8016dcc:	460d      	mov	r5, r1
 8016dce:	4616      	mov	r6, r2
 8016dd0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016dd2:	b13c      	cbz	r4, 8016de4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016dd4:	6823      	ldr	r3, [r4, #0]
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	4632      	mov	r2, r6
 8016dda:	4629      	mov	r1, r5
 8016ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016dde:	4798      	blx	r3
 8016de0:	69a4      	ldr	r4, [r4, #24]
 8016de2:	e7f6      	b.n	8016dd2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016de4:	bd70      	pop	{r4, r5, r6, pc}

08016de6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016de6:	b538      	push	{r3, r4, r5, lr}
 8016de8:	460d      	mov	r5, r1
 8016dea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016dec:	b134      	cbz	r4, 8016dfc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016dee:	682b      	ldr	r3, [r5, #0]
 8016df0:	4621      	mov	r1, r4
 8016df2:	4628      	mov	r0, r5
 8016df4:	689b      	ldr	r3, [r3, #8]
 8016df6:	4798      	blx	r3
 8016df8:	69a4      	ldr	r4, [r4, #24]
 8016dfa:	e7f7      	b.n	8016dec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016dfc:	bd38      	pop	{r3, r4, r5, pc}

08016dfe <_ZN8touchgfx9ContainerD1Ev>:
 8016dfe:	4770      	bx	lr

08016e00 <_ZN8touchgfx9ContainerD0Ev>:
 8016e00:	b510      	push	{r4, lr}
 8016e02:	4604      	mov	r4, r0
 8016e04:	212c      	movs	r1, #44	; 0x2c
 8016e06:	f013 f9ab 	bl	802a160 <_ZdlPvj>
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	bd10      	pop	{r4, pc}

08016e0e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016e0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e10:	b19b      	cbz	r3, 8016e3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016e12:	428b      	cmp	r3, r1
 8016e14:	d109      	bne.n	8016e2a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016e16:	699a      	ldr	r2, [r3, #24]
 8016e18:	2100      	movs	r1, #0
 8016e1a:	6159      	str	r1, [r3, #20]
 8016e1c:	6282      	str	r2, [r0, #40]	; 0x28
 8016e1e:	b902      	cbnz	r2, 8016e22 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016e20:	4770      	bx	lr
 8016e22:	6199      	str	r1, [r3, #24]
 8016e24:	4770      	bx	lr
 8016e26:	4613      	mov	r3, r2
 8016e28:	b13a      	cbz	r2, 8016e3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016e2a:	699a      	ldr	r2, [r3, #24]
 8016e2c:	428a      	cmp	r2, r1
 8016e2e:	d1fa      	bne.n	8016e26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016e30:	698a      	ldr	r2, [r1, #24]
 8016e32:	619a      	str	r2, [r3, #24]
 8016e34:	2300      	movs	r3, #0
 8016e36:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016e3a:	4770      	bx	lr

08016e3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016e3c:	b410      	push	{r4}
 8016e3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e40:	4604      	mov	r4, r0
 8016e42:	b92b      	cbnz	r3, 8016e50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016e44:	6803      	ldr	r3, [r0, #0]
 8016e46:	4611      	mov	r1, r2
 8016e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e4e:	4718      	bx	r3
 8016e50:	b941      	cbnz	r1, 8016e64 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016e52:	6193      	str	r3, [r2, #24]
 8016e54:	6282      	str	r2, [r0, #40]	; 0x28
 8016e56:	6154      	str	r4, [r2, #20]
 8016e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e5c:	4770      	bx	lr
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2800      	cmp	r0, #0
 8016e62:	d0f9      	beq.n	8016e58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016e64:	4299      	cmp	r1, r3
 8016e66:	6998      	ldr	r0, [r3, #24]
 8016e68:	d1f9      	bne.n	8016e5e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016e6a:	6190      	str	r0, [r2, #24]
 8016e6c:	618a      	str	r2, [r1, #24]
 8016e6e:	e7f2      	b.n	8016e56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016e70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e74:	461f      	mov	r7, r3
 8016e76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016e7a:	460d      	mov	r5, r1
 8016e7c:	4616      	mov	r6, r2
 8016e7e:	b103      	cbz	r3, 8016e82 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016e80:	6038      	str	r0, [r7, #0]
 8016e82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016e84:	b314      	cbz	r4, 8016ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016e86:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016e8a:	b1eb      	cbz	r3, 8016ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016e8c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016e90:	428d      	cmp	r5, r1
 8016e92:	db19      	blt.n	8016ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016e94:	b289      	uxth	r1, r1
 8016e96:	8923      	ldrh	r3, [r4, #8]
 8016e98:	440b      	add	r3, r1
 8016e9a:	b21b      	sxth	r3, r3
 8016e9c:	429d      	cmp	r5, r3
 8016e9e:	da13      	bge.n	8016ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016ea0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016ea4:	4296      	cmp	r6, r2
 8016ea6:	db0f      	blt.n	8016ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016ea8:	b292      	uxth	r2, r2
 8016eaa:	8963      	ldrh	r3, [r4, #10]
 8016eac:	4413      	add	r3, r2
 8016eae:	b21b      	sxth	r3, r3
 8016eb0:	429e      	cmp	r6, r3
 8016eb2:	da09      	bge.n	8016ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016eb4:	6823      	ldr	r3, [r4, #0]
 8016eb6:	1ab2      	subs	r2, r6, r2
 8016eb8:	1a69      	subs	r1, r5, r1
 8016eba:	4620      	mov	r0, r4
 8016ebc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016ec0:	b212      	sxth	r2, r2
 8016ec2:	463b      	mov	r3, r7
 8016ec4:	b209      	sxth	r1, r1
 8016ec6:	47c0      	blx	r8
 8016ec8:	69a4      	ldr	r4, [r4, #24]
 8016eca:	e7db      	b.n	8016e84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016ed0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed4:	4c6d      	ldr	r4, [pc, #436]	; (801708c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016ed6:	b0a1      	sub	sp, #132	; 0x84
 8016ed8:	4606      	mov	r6, r0
 8016eda:	6824      	ldr	r4, [r4, #0]
 8016edc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016ede:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016ee2:	2400      	movs	r4, #0
 8016ee4:	9303      	str	r3, [sp, #12]
 8016ee6:	802c      	strh	r4, [r5, #0]
 8016ee8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016eea:	802c      	strh	r4, [r5, #0]
 8016eec:	601c      	str	r4, [r3, #0]
 8016eee:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016ef2:	f7ff ffbd 	bl	8016e70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016ef6:	f1b9 0f03 	cmp.w	r9, #3
 8016efa:	f340 80c1 	ble.w	8017080 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8016efe:	4631      	mov	r1, r6
 8016f00:	a80c      	add	r0, sp, #48	; 0x30
 8016f02:	f004 f907 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f06:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016f0a:	9306      	str	r3, [sp, #24]
 8016f0c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016f10:	9307      	str	r3, [sp, #28]
 8016f12:	9b03      	ldr	r3, [sp, #12]
 8016f14:	f8d3 a000 	ldr.w	sl, [r3]
 8016f18:	f1ba 0f00 	cmp.w	sl, #0
 8016f1c:	f000 80b3 	beq.w	8017086 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8016f20:	4651      	mov	r1, sl
 8016f22:	a810      	add	r0, sp, #64	; 0x40
 8016f24:	f004 f8f6 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f28:	2002      	movs	r0, #2
 8016f2a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8016f2e:	9b01      	ldr	r3, [sp, #4]
 8016f30:	9a06      	ldr	r2, [sp, #24]
 8016f32:	fb91 f1f0 	sdiv	r1, r1, r0
 8016f36:	189d      	adds	r5, r3, r2
 8016f38:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8016f3c:	9a07      	ldr	r2, [sp, #28]
 8016f3e:	4419      	add	r1, r3
 8016f40:	9b02      	ldr	r3, [sp, #8]
 8016f42:	4413      	add	r3, r2
 8016f44:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8016f48:	1a6d      	subs	r5, r5, r1
 8016f4a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016f4e:	fb92 f2f0 	sdiv	r2, r2, r0
 8016f52:	440a      	add	r2, r1
 8016f54:	1a9b      	subs	r3, r3, r2
 8016f56:	435b      	muls	r3, r3
 8016f58:	fb05 3505 	mla	r5, r5, r5, r3
 8016f5c:	4f4c      	ldr	r7, [pc, #304]	; (8017090 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8016f5e:	ac10      	add	r4, sp, #64	; 0x40
 8016f60:	f1b9 0f0c 	cmp.w	r9, #12
 8016f64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f70:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016f78:	f04f 0303 	mov.w	r3, #3
 8016f7c:	bfd8      	it	le
 8016f7e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8016f82:	f04f 0400 	mov.w	r4, #0
 8016f86:	f8cd 9000 	str.w	r9, [sp]
 8016f8a:	bfcc      	ite	gt
 8016f8c:	4698      	movgt	r8, r3
 8016f8e:	fb92 f8f3 	sdivle	r8, r2, r3
 8016f92:	1c63      	adds	r3, r4, #1
 8016f94:	aa10      	add	r2, sp, #64	; 0x40
 8016f96:	f004 0401 	and.w	r4, r4, #1
 8016f9a:	f04f 0b00 	mov.w	fp, #0
 8016f9e:	9308      	str	r3, [sp, #32]
 8016fa0:	9b00      	ldr	r3, [sp, #0]
 8016fa2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8016fa6:	fb93 f3f8 	sdiv	r3, r3, r8
 8016faa:	3404      	adds	r4, #4
 8016fac:	b29b      	uxth	r3, r3
 8016fae:	9304      	str	r3, [sp, #16]
 8016fb0:	9a04      	ldr	r2, [sp, #16]
 8016fb2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016fb6:	fb13 f302 	smulbb	r3, r3, r2
 8016fba:	9a01      	ldr	r2, [sp, #4]
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	1899      	adds	r1, r3, r2
 8016fc0:	9305      	str	r3, [sp, #20]
 8016fc2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016fc6:	b209      	sxth	r1, r1
 8016fc8:	4299      	cmp	r1, r3
 8016fca:	db4d      	blt.n	8017068 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016fcc:	8932      	ldrh	r2, [r6, #8]
 8016fce:	4413      	add	r3, r2
 8016fd0:	b21b      	sxth	r3, r3
 8016fd2:	4299      	cmp	r1, r3
 8016fd4:	da48      	bge.n	8017068 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016fd6:	9b04      	ldr	r3, [sp, #16]
 8016fd8:	6827      	ldr	r7, [r4, #0]
 8016fda:	fb17 f703 	smulbb	r7, r7, r3
 8016fde:	9b02      	ldr	r3, [sp, #8]
 8016fe0:	b2bf      	uxth	r7, r7
 8016fe2:	18fa      	adds	r2, r7, r3
 8016fe4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016fe8:	b212      	sxth	r2, r2
 8016fea:	429a      	cmp	r2, r3
 8016fec:	db3c      	blt.n	8017068 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016fee:	8970      	ldrh	r0, [r6, #10]
 8016ff0:	4403      	add	r3, r0
 8016ff2:	b21b      	sxth	r3, r3
 8016ff4:	429a      	cmp	r2, r3
 8016ff6:	da37      	bge.n	8017068 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ffe:	ab0b      	add	r3, sp, #44	; 0x2c
 8017000:	f7ff ff36 	bl	8016e70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017006:	b37a      	cbz	r2, 8017068 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017008:	4552      	cmp	r2, sl
 801700a:	d02d      	beq.n	8017068 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801700c:	4611      	mov	r1, r2
 801700e:	a80e      	add	r0, sp, #56	; 0x38
 8017010:	9209      	str	r2, [sp, #36]	; 0x24
 8017012:	f004 f87f 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017016:	f04f 0e02 	mov.w	lr, #2
 801701a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801701e:	9a06      	ldr	r2, [sp, #24]
 8017020:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8017024:	9b01      	ldr	r3, [sp, #4]
 8017026:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801702a:	4413      	add	r3, r2
 801702c:	9a07      	ldr	r2, [sp, #28]
 801702e:	fb91 f1fe 	sdiv	r1, r1, lr
 8017032:	fb9c fcfe 	sdiv	ip, ip, lr
 8017036:	4401      	add	r1, r0
 8017038:	1a58      	subs	r0, r3, r1
 801703a:	9b02      	ldr	r3, [sp, #8]
 801703c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017040:	4413      	add	r3, r2
 8017042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017044:	448c      	add	ip, r1
 8017046:	eba3 030c 	sub.w	r3, r3, ip
 801704a:	435b      	muls	r3, r3
 801704c:	fb00 3300 	mla	r3, r0, r0, r3
 8017050:	42ab      	cmp	r3, r5
 8017052:	d208      	bcs.n	8017066 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017056:	461d      	mov	r5, r3
 8017058:	9803      	ldr	r0, [sp, #12]
 801705a:	6001      	str	r1, [r0, #0]
 801705c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801705e:	9805      	ldr	r0, [sp, #20]
 8017060:	8008      	strh	r0, [r1, #0]
 8017062:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017064:	800f      	strh	r7, [r1, #0]
 8017066:	4692      	mov	sl, r2
 8017068:	f10b 0b01 	add.w	fp, fp, #1
 801706c:	3408      	adds	r4, #8
 801706e:	f1bb 0f04 	cmp.w	fp, #4
 8017072:	d19d      	bne.n	8016fb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017074:	9b00      	ldr	r3, [sp, #0]
 8017076:	9c08      	ldr	r4, [sp, #32]
 8017078:	444b      	add	r3, r9
 801707a:	4544      	cmp	r4, r8
 801707c:	9300      	str	r3, [sp, #0]
 801707e:	d188      	bne.n	8016f92 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017080:	b021      	add	sp, #132	; 0x84
 8017082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017086:	f04f 35ff 	mov.w	r5, #4294967295
 801708a:	e767      	b.n	8016f5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801708c:	20015120 	.word	0x20015120
 8017090:	0802b5e0 	.word	0x0802b5e0

08017094 <_ZN8touchgfx4RectaNERKS0_>:
 8017094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017098:	f9b1 7000 	ldrsh.w	r7, [r1]
 801709c:	888c      	ldrh	r4, [r1, #4]
 801709e:	f9b0 9000 	ldrsh.w	r9, [r0]
 80170a2:	443c      	add	r4, r7
 80170a4:	b2a4      	uxth	r4, r4
 80170a6:	fa0f f884 	sxth.w	r8, r4
 80170aa:	45c1      	cmp	r9, r8
 80170ac:	da2f      	bge.n	801710e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80170ae:	8882      	ldrh	r2, [r0, #4]
 80170b0:	444a      	add	r2, r9
 80170b2:	b292      	uxth	r2, r2
 80170b4:	fa0f fe82 	sxth.w	lr, r2
 80170b8:	4577      	cmp	r7, lr
 80170ba:	da28      	bge.n	801710e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80170bc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80170c0:	88cb      	ldrh	r3, [r1, #6]
 80170c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80170c6:	442b      	add	r3, r5
 80170c8:	b21b      	sxth	r3, r3
 80170ca:	429e      	cmp	r6, r3
 80170cc:	da1f      	bge.n	801710e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80170ce:	88c3      	ldrh	r3, [r0, #6]
 80170d0:	4433      	add	r3, r6
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	fa0f fc83 	sxth.w	ip, r3
 80170d8:	4565      	cmp	r5, ip
 80170da:	da18      	bge.n	801710e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80170dc:	454f      	cmp	r7, r9
 80170de:	bfb8      	it	lt
 80170e0:	464f      	movlt	r7, r9
 80170e2:	42b5      	cmp	r5, r6
 80170e4:	bfb8      	it	lt
 80170e6:	4635      	movlt	r5, r6
 80170e8:	45f0      	cmp	r8, lr
 80170ea:	bfd8      	it	le
 80170ec:	4622      	movle	r2, r4
 80170ee:	1bd2      	subs	r2, r2, r7
 80170f0:	8082      	strh	r2, [r0, #4]
 80170f2:	884a      	ldrh	r2, [r1, #2]
 80170f4:	88c9      	ldrh	r1, [r1, #6]
 80170f6:	8007      	strh	r7, [r0, #0]
 80170f8:	440a      	add	r2, r1
 80170fa:	8045      	strh	r5, [r0, #2]
 80170fc:	b292      	uxth	r2, r2
 80170fe:	b211      	sxth	r1, r2
 8017100:	458c      	cmp	ip, r1
 8017102:	bfa8      	it	ge
 8017104:	4613      	movge	r3, r2
 8017106:	1b5b      	subs	r3, r3, r5
 8017108:	80c3      	strh	r3, [r0, #6]
 801710a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801710e:	2300      	movs	r3, #0
 8017110:	8003      	strh	r3, [r0, #0]
 8017112:	8043      	strh	r3, [r0, #2]
 8017114:	8083      	strh	r3, [r0, #4]
 8017116:	80c3      	strh	r3, [r0, #6]
 8017118:	e7f7      	b.n	801710a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801711a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801711a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	dd06      	ble.n	8017130 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017122:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017126:	2800      	cmp	r0, #0
 8017128:	bfcc      	ite	gt
 801712a:	2000      	movgt	r0, #0
 801712c:	2001      	movle	r0, #1
 801712e:	4770      	bx	lr
 8017130:	2001      	movs	r0, #1
 8017132:	4770      	bx	lr

08017134 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017138:	2300      	movs	r3, #0
 801713a:	4604      	mov	r4, r0
 801713c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801713e:	8003      	strh	r3, [r0, #0]
 8017140:	8043      	strh	r3, [r0, #2]
 8017142:	8083      	strh	r3, [r0, #4]
 8017144:	80c3      	strh	r3, [r0, #6]
 8017146:	2d00      	cmp	r5, #0
 8017148:	d040      	beq.n	80171cc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801714a:	1d28      	adds	r0, r5, #4
 801714c:	f7ff ffe5 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017150:	b988      	cbnz	r0, 8017176 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017152:	4620      	mov	r0, r4
 8017154:	f7ff ffe1 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017158:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801715c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017160:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017164:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017168:	b138      	cbz	r0, 801717a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801716a:	8022      	strh	r2, [r4, #0]
 801716c:	8063      	strh	r3, [r4, #2]
 801716e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017172:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017176:	69ad      	ldr	r5, [r5, #24]
 8017178:	e7e5      	b.n	8017146 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801717a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801717e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017182:	4290      	cmp	r0, r2
 8017184:	4607      	mov	r7, r0
 8017186:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801718a:	460e      	mov	r6, r1
 801718c:	bfa8      	it	ge
 801718e:	4617      	movge	r7, r2
 8017190:	4299      	cmp	r1, r3
 8017192:	4472      	add	r2, lr
 8017194:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017198:	bfa8      	it	ge
 801719a:	461e      	movge	r6, r3
 801719c:	4440      	add	r0, r8
 801719e:	4471      	add	r1, lr
 80171a0:	4463      	add	r3, ip
 80171a2:	b200      	sxth	r0, r0
 80171a4:	8027      	strh	r7, [r4, #0]
 80171a6:	b212      	sxth	r2, r2
 80171a8:	8066      	strh	r6, [r4, #2]
 80171aa:	b209      	sxth	r1, r1
 80171ac:	b21b      	sxth	r3, r3
 80171ae:	4290      	cmp	r0, r2
 80171b0:	bfac      	ite	ge
 80171b2:	ebc7 0200 	rsbge	r2, r7, r0
 80171b6:	ebc7 0202 	rsblt	r2, r7, r2
 80171ba:	4299      	cmp	r1, r3
 80171bc:	bfac      	ite	ge
 80171be:	ebc6 0301 	rsbge	r3, r6, r1
 80171c2:	ebc6 0303 	rsblt	r3, r6, r3
 80171c6:	80a2      	strh	r2, [r4, #4]
 80171c8:	80e3      	strh	r3, [r4, #6]
 80171ca:	e7d4      	b.n	8017176 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80171cc:	4620      	mov	r0, r4
 80171ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080171d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80171d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80171d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80171da:	b383      	cbz	r3, 801723e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80171dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80171de:	b374      	cbz	r4, 801723e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80171e0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80171e4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80171e8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80171ec:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80171f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80171f4:	b303      	cbz	r3, 8017238 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80171f6:	4668      	mov	r0, sp
 80171f8:	1d21      	adds	r1, r4, #4
 80171fa:	f8ad 5000 	strh.w	r5, [sp]
 80171fe:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017202:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017206:	f8ad 8006 	strh.w	r8, [sp, #6]
 801720a:	f7ff ff43 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801720e:	4668      	mov	r0, sp
 8017210:	f7ff ff83 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017214:	b980      	cbnz	r0, 8017238 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017216:	f8bd 3000 	ldrh.w	r3, [sp]
 801721a:	4669      	mov	r1, sp
 801721c:	88a2      	ldrh	r2, [r4, #4]
 801721e:	4620      	mov	r0, r4
 8017220:	1a9b      	subs	r3, r3, r2
 8017222:	88e2      	ldrh	r2, [r4, #6]
 8017224:	f8ad 3000 	strh.w	r3, [sp]
 8017228:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801722c:	1a9b      	subs	r3, r3, r2
 801722e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	689b      	ldr	r3, [r3, #8]
 8017236:	4798      	blx	r3
 8017238:	69a4      	ldr	r4, [r4, #24]
 801723a:	2c00      	cmp	r4, #0
 801723c:	d1d8      	bne.n	80171f0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801723e:	b002      	add	sp, #8
 8017240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017244 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017244:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017246:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801724a:	460d      	mov	r5, r1
 801724c:	4616      	mov	r6, r2
 801724e:	b323      	cbz	r3, 801729a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017250:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017252:	b314      	cbz	r4, 801729a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017254:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017258:	b1eb      	cbz	r3, 8017296 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801725a:	6828      	ldr	r0, [r5, #0]
 801725c:	466b      	mov	r3, sp
 801725e:	6869      	ldr	r1, [r5, #4]
 8017260:	c303      	stmia	r3!, {r0, r1}
 8017262:	4668      	mov	r0, sp
 8017264:	1d21      	adds	r1, r4, #4
 8017266:	f7ff ff15 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801726a:	4668      	mov	r0, sp
 801726c:	f7ff ff55 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017270:	b988      	cbnz	r0, 8017296 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017272:	f8bd 3000 	ldrh.w	r3, [sp]
 8017276:	4669      	mov	r1, sp
 8017278:	88a2      	ldrh	r2, [r4, #4]
 801727a:	4620      	mov	r0, r4
 801727c:	1a9b      	subs	r3, r3, r2
 801727e:	88e2      	ldrh	r2, [r4, #6]
 8017280:	f8ad 3000 	strh.w	r3, [sp]
 8017284:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017288:	1a9b      	subs	r3, r3, r2
 801728a:	4632      	mov	r2, r6
 801728c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017290:	6823      	ldr	r3, [r4, #0]
 8017292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017294:	4798      	blx	r3
 8017296:	69a4      	ldr	r4, [r4, #24]
 8017298:	e7db      	b.n	8017252 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801729a:	b002      	add	sp, #8
 801729c:	bd70      	pop	{r4, r5, r6, pc}

0801729e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801729e:	6803      	ldr	r3, [r0, #0]
 80172a0:	b513      	push	{r0, r1, r4, lr}
 80172a2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80172a6:	2300      	movs	r3, #0
 80172a8:	e9cd 3300 	strd	r3, r3, [sp]
 80172ac:	466b      	mov	r3, sp
 80172ae:	47a0      	blx	r4
 80172b0:	b002      	add	sp, #8
 80172b2:	bd10      	pop	{r4, pc}

080172b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80172b4:	2301      	movs	r3, #1
 80172b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80172ba:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80172be:	4770      	bx	lr

080172c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80172c0:	2301      	movs	r3, #1
 80172c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80172c6:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80172ca:	4770      	bx	lr

080172cc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80172cc:	6843      	ldr	r3, [r0, #4]
 80172ce:	2201      	movs	r2, #1
 80172d0:	725a      	strb	r2, [r3, #9]
 80172d2:	6840      	ldr	r0, [r0, #4]
 80172d4:	6803      	ldr	r3, [r0, #0]
 80172d6:	691b      	ldr	r3, [r3, #16]
 80172d8:	4718      	bx	r3

080172da <_ZN8touchgfx3HAL8flushDMAEv>:
 80172da:	6840      	ldr	r0, [r0, #4]
 80172dc:	6803      	ldr	r3, [r0, #0]
 80172de:	689b      	ldr	r3, [r3, #8]
 80172e0:	4718      	bx	r3

080172e2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80172e2:	b530      	push	{r4, r5, lr}
 80172e4:	b08b      	sub	sp, #44	; 0x2c
 80172e6:	6804      	ldr	r4, [r0, #0]
 80172e8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80172ec:	9509      	str	r5, [sp, #36]	; 0x24
 80172ee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80172f2:	9508      	str	r5, [sp, #32]
 80172f4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80172f8:	9507      	str	r5, [sp, #28]
 80172fa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80172fe:	9506      	str	r5, [sp, #24]
 8017300:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017304:	9505      	str	r5, [sp, #20]
 8017306:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801730a:	9504      	str	r5, [sp, #16]
 801730c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017310:	9503      	str	r5, [sp, #12]
 8017312:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017316:	9502      	str	r5, [sp, #8]
 8017318:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801731c:	e9cd 3500 	strd	r3, r5, [sp]
 8017320:	4613      	mov	r3, r2
 8017322:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017324:	2200      	movs	r2, #0
 8017326:	47a0      	blx	r4
 8017328:	b00b      	add	sp, #44	; 0x2c
 801732a:	bd30      	pop	{r4, r5, pc}

0801732c <_ZN8touchgfx3HAL10beginFrameEv>:
 801732c:	4b04      	ldr	r3, [pc, #16]	; (8017340 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	b123      	cbz	r3, 801733c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017332:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8017336:	f080 0001 	eor.w	r0, r0, #1
 801733a:	4770      	bx	lr
 801733c:	2001      	movs	r0, #1
 801733e:	4770      	bx	lr
 8017340:	2001511e 	.word	0x2001511e

08017344 <_ZN8touchgfx3HAL8endFrameEv>:
 8017344:	b510      	push	{r4, lr}
 8017346:	4604      	mov	r4, r0
 8017348:	6840      	ldr	r0, [r0, #4]
 801734a:	6803      	ldr	r3, [r0, #0]
 801734c:	689b      	ldr	r3, [r3, #8]
 801734e:	4798      	blx	r3
 8017350:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8017354:	b113      	cbz	r3, 801735c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017356:	2301      	movs	r3, #1
 8017358:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 801735c:	bd10      	pop	{r4, pc}

0801735e <_ZN8touchgfx3HAL10initializeEv>:
 801735e:	b510      	push	{r4, lr}
 8017360:	4604      	mov	r4, r0
 8017362:	f7ea fed7 	bl	8002114 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017366:	f7ea fdb5 	bl	8001ed4 <_ZN8touchgfx4GPIO4initEv>
 801736a:	6860      	ldr	r0, [r4, #4]
 801736c:	6803      	ldr	r3, [r0, #0]
 801736e:	68db      	ldr	r3, [r3, #12]
 8017370:	4798      	blx	r3
 8017372:	68e0      	ldr	r0, [r4, #12]
 8017374:	6803      	ldr	r3, [r0, #0]
 8017376:	689b      	ldr	r3, [r3, #8]
 8017378:	4798      	blx	r3
 801737a:	6823      	ldr	r3, [r4, #0]
 801737c:	4620      	mov	r0, r4
 801737e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017384:	4718      	bx	r3

08017386 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017386:	b508      	push	{r3, lr}
 8017388:	6803      	ldr	r3, [r0, #0]
 801738a:	4604      	mov	r4, r0
 801738c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017390:	4798      	blx	r3
 8017392:	6823      	ldr	r3, [r4, #0]
 8017394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017396:	4620      	mov	r0, r4
 8017398:	4798      	blx	r3
 801739a:	f7ea ff07 	bl	80021ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801739e:	6823      	ldr	r3, [r4, #0]
 80173a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173a2:	e7f8      	b.n	8017396 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080173a4 <_ZN8touchgfx3HAL4tickEv>:
 80173a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80173a6:	6803      	ldr	r3, [r0, #0]
 80173a8:	4604      	mov	r4, r0
 80173aa:	4d5b      	ldr	r5, [pc, #364]	; (8017518 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80173ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80173b0:	4798      	blx	r3
 80173b2:	2800      	cmp	r0, #0
 80173b4:	f000 8095 	beq.w	80174e2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80173b8:	2001      	movs	r0, #1
 80173ba:	2600      	movs	r6, #0
 80173bc:	f7ea fcf0 	bl	8001da0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80173c0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80173c4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80173c8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80173cc:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80173d0:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 80173d4:	b133      	cbz	r3, 80173e4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80173d6:	6823      	ldr	r3, [r4, #0]
 80173d8:	4620      	mov	r0, r4
 80173da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80173de:	4798      	blx	r3
 80173e0:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 80173e4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80173e8:	2601      	movs	r6, #1
 80173ea:	6862      	ldr	r2, [r4, #4]
 80173ec:	f083 0301 	eor.w	r3, r3, #1
 80173f0:	702e      	strb	r6, [r5, #0]
 80173f2:	7253      	strb	r3, [r2, #9]
 80173f4:	f002 fd7a 	bl	8019eec <_ZN8touchgfx11Application11getInstanceEv>
 80173f8:	6803      	ldr	r3, [r0, #0]
 80173fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173fc:	4798      	blx	r3
 80173fe:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8017402:	b90b      	cbnz	r3, 8017408 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017404:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8017408:	f002 fd70 	bl	8019eec <_ZN8touchgfx11Application11getInstanceEv>
 801740c:	6803      	ldr	r3, [r0, #0]
 801740e:	695b      	ldr	r3, [r3, #20]
 8017410:	4798      	blx	r3
 8017412:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8017414:	6803      	ldr	r3, [r0, #0]
 8017416:	691b      	ldr	r3, [r3, #16]
 8017418:	4798      	blx	r3
 801741a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801741e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8017422:	3b01      	subs	r3, #1
 8017424:	b2db      	uxtb	r3, r3
 8017426:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801742a:	b10a      	cbz	r2, 8017430 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801742c:	2b00      	cmp	r3, #0
 801742e:	d1eb      	bne.n	8017408 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017430:	4a3a      	ldr	r2, [pc, #232]	; (801751c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017432:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8017436:	7813      	ldrb	r3, [r2, #0]
 8017438:	3301      	adds	r3, #1
 801743a:	b25b      	sxtb	r3, r3
 801743c:	4299      	cmp	r1, r3
 801743e:	7013      	strb	r3, [r2, #0]
 8017440:	dc10      	bgt.n	8017464 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017442:	2300      	movs	r3, #0
 8017444:	68e0      	ldr	r0, [r4, #12]
 8017446:	a902      	add	r1, sp, #8
 8017448:	7013      	strb	r3, [r2, #0]
 801744a:	aa03      	add	r2, sp, #12
 801744c:	6803      	ldr	r3, [r0, #0]
 801744e:	68db      	ldr	r3, [r3, #12]
 8017450:	4798      	blx	r3
 8017452:	6823      	ldr	r3, [r4, #0]
 8017454:	2800      	cmp	r0, #0
 8017456:	d050      	beq.n	80174fa <_ZN8touchgfx3HAL4tickEv+0x156>
 8017458:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801745c:	4620      	mov	r0, r4
 801745e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017462:	4798      	blx	r3
 8017464:	2300      	movs	r3, #0
 8017466:	6960      	ldr	r0, [r4, #20]
 8017468:	f88d 3007 	strb.w	r3, [sp, #7]
 801746c:	b158      	cbz	r0, 8017486 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801746e:	6803      	ldr	r3, [r0, #0]
 8017470:	f10d 0107 	add.w	r1, sp, #7
 8017474:	68db      	ldr	r3, [r3, #12]
 8017476:	4798      	blx	r3
 8017478:	b128      	cbz	r0, 8017486 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801747a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801747c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017480:	6803      	ldr	r3, [r0, #0]
 8017482:	68db      	ldr	r3, [r3, #12]
 8017484:	4798      	blx	r3
 8017486:	f104 001c 	add.w	r0, r4, #28
 801748a:	f012 fd95 	bl	8029fb8 <_ZN8touchgfx8Gestures4tickEv>
 801748e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8017492:	b30b      	cbz	r3, 80174d8 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017494:	6920      	ldr	r0, [r4, #16]
 8017496:	6803      	ldr	r3, [r0, #0]
 8017498:	691b      	ldr	r3, [r3, #16]
 801749a:	4798      	blx	r3
 801749c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801749e:	4606      	mov	r6, r0
 80174a0:	b903      	cbnz	r3, 80174a4 <_ZN8touchgfx3HAL4tickEv+0x100>
 80174a2:	6760      	str	r0, [r4, #116]	; 0x74
 80174a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80174a6:	4a1e      	ldr	r2, [pc, #120]	; (8017520 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80174a8:	1af3      	subs	r3, r6, r3
 80174aa:	4293      	cmp	r3, r2
 80174ac:	d914      	bls.n	80174d8 <_ZN8touchgfx3HAL4tickEv+0x134>
 80174ae:	6920      	ldr	r0, [r4, #16]
 80174b0:	6803      	ldr	r3, [r0, #0]
 80174b2:	699b      	ldr	r3, [r3, #24]
 80174b4:	4798      	blx	r3
 80174b6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80174b8:	2264      	movs	r2, #100	; 0x64
 80174ba:	1af3      	subs	r3, r6, r3
 80174bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80174c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80174c4:	2800      	cmp	r0, #0
 80174c6:	dc1d      	bgt.n	8017504 <_ZN8touchgfx3HAL4tickEv+0x160>
 80174c8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 80174cc:	6920      	ldr	r0, [r4, #16]
 80174ce:	2100      	movs	r1, #0
 80174d0:	6803      	ldr	r3, [r0, #0]
 80174d2:	69db      	ldr	r3, [r3, #28]
 80174d4:	4798      	blx	r3
 80174d6:	6766      	str	r6, [r4, #116]	; 0x74
 80174d8:	f002 fd08 	bl	8019eec <_ZN8touchgfx11Application11getInstanceEv>
 80174dc:	6803      	ldr	r3, [r0, #0]
 80174de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174e0:	4798      	blx	r3
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	4620      	mov	r0, r4
 80174e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80174ea:	4798      	blx	r3
 80174ec:	2001      	movs	r0, #1
 80174ee:	f7ea fc87 	bl	8001e00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80174f2:	2300      	movs	r3, #0
 80174f4:	702b      	strb	r3, [r5, #0]
 80174f6:	b004      	add	sp, #16
 80174f8:	bd70      	pop	{r4, r5, r6, pc}
 80174fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80174fe:	4620      	mov	r0, r4
 8017500:	4798      	blx	r3
 8017502:	e7af      	b.n	8017464 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017504:	2863      	cmp	r0, #99	; 0x63
 8017506:	bfcb      	itete	gt
 8017508:	2300      	movgt	r3, #0
 801750a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801750e:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8017512:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8017516:	e7d9      	b.n	80174cc <_ZN8touchgfx3HAL4tickEv+0x128>
 8017518:	20015124 	.word	0x20015124
 801751c:	20015125 	.word	0x20015125
 8017520:	05f5e100 	.word	0x05f5e100

08017524 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017524:	b510      	push	{r4, lr}
 8017526:	4604      	mov	r4, r0
 8017528:	f7ea fe24 	bl	8002174 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801752c:	2200      	movs	r2, #0
 801752e:	6863      	ldr	r3, [r4, #4]
 8017530:	729a      	strb	r2, [r3, #10]
 8017532:	bd10      	pop	{r4, pc}

08017534 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017534:	65c1      	str	r1, [r0, #92]	; 0x5c
 8017536:	301c      	adds	r0, #28
 8017538:	f012 bd3c 	b.w	8029fb4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801753c <_ZN8touchgfx3HAL5touchEll>:
 801753c:	b530      	push	{r4, r5, lr}
 801753e:	b087      	sub	sp, #28
 8017540:	4604      	mov	r4, r0
 8017542:	a804      	add	r0, sp, #16
 8017544:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017548:	f002 fab8 	bl	8019abc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801754c:	9b04      	ldr	r3, [sp, #16]
 801754e:	a906      	add	r1, sp, #24
 8017550:	a803      	add	r0, sp, #12
 8017552:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017556:	9b05      	ldr	r3, [sp, #20]
 8017558:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801755c:	f002 fb00 	bl	8019b60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017560:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8017564:	f104 001c 	add.w	r0, r4, #28
 8017568:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801756c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017570:	b189      	cbz	r1, 8017596 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017572:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8017576:	9300      	str	r3, [sp, #0]
 8017578:	4613      	mov	r3, r2
 801757a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801757e:	462a      	mov	r2, r5
 8017580:	f012 fd28 	bl	8029fd4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017584:	b128      	cbz	r0, 8017592 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017586:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801758a:	6623      	str	r3, [r4, #96]	; 0x60
 801758c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017590:	6663      	str	r3, [r4, #100]	; 0x64
 8017592:	b007      	add	sp, #28
 8017594:	bd30      	pop	{r4, r5, pc}
 8017596:	f012 fd5d 	bl	802a054 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801759a:	2301      	movs	r3, #1
 801759c:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80175a0:	e7f1      	b.n	8017586 <_ZN8touchgfx3HAL5touchEll+0x4a>

080175a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80175a2:	b510      	push	{r4, lr}
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d046      	beq.n	8017636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80175a8:	ea81 0002 	eor.w	r0, r1, r2
 80175ac:	07c4      	lsls	r4, r0, #31
 80175ae:	d508      	bpl.n	80175c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80175b0:	440b      	add	r3, r1
 80175b2:	3a01      	subs	r2, #1
 80175b4:	428b      	cmp	r3, r1
 80175b6:	d93e      	bls.n	8017636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80175b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80175bc:	f801 0b01 	strb.w	r0, [r1], #1
 80175c0:	e7f8      	b.n	80175b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80175c2:	07d0      	lsls	r0, r2, #31
 80175c4:	bf42      	ittt	mi
 80175c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80175ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80175ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80175d2:	2b01      	cmp	r3, #1
 80175d4:	d911      	bls.n	80175fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80175d6:	ea81 0402 	eor.w	r4, r1, r2
 80175da:	4610      	mov	r0, r2
 80175dc:	07a4      	lsls	r4, r4, #30
 80175de:	d022      	beq.n	8017626 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80175e0:	f023 0401 	bic.w	r4, r3, #1
 80175e4:	440c      	add	r4, r1
 80175e6:	428c      	cmp	r4, r1
 80175e8:	4602      	mov	r2, r0
 80175ea:	d904      	bls.n	80175f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80175ec:	8812      	ldrh	r2, [r2, #0]
 80175ee:	3002      	adds	r0, #2
 80175f0:	f821 2b02 	strh.w	r2, [r1], #2
 80175f4:	e7f7      	b.n	80175e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80175f6:	f003 0301 	and.w	r3, r3, #1
 80175fa:	f023 0003 	bic.w	r0, r3, #3
 80175fe:	4408      	add	r0, r1
 8017600:	4288      	cmp	r0, r1
 8017602:	4614      	mov	r4, r2
 8017604:	d904      	bls.n	8017610 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017606:	6824      	ldr	r4, [r4, #0]
 8017608:	3204      	adds	r2, #4
 801760a:	f841 4b04 	str.w	r4, [r1], #4
 801760e:	e7f7      	b.n	8017600 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017610:	f003 0303 	and.w	r3, r3, #3
 8017614:	3a01      	subs	r2, #1
 8017616:	440b      	add	r3, r1
 8017618:	428b      	cmp	r3, r1
 801761a:	d90c      	bls.n	8017636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801761c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017620:	f801 0b01 	strb.w	r0, [r1], #1
 8017624:	e7f8      	b.n	8017618 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017626:	0790      	lsls	r0, r2, #30
 8017628:	d0e7      	beq.n	80175fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801762a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801762e:	3b02      	subs	r3, #2
 8017630:	f821 0b02 	strh.w	r0, [r1], #2
 8017634:	e7e1      	b.n	80175fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017636:	2001      	movs	r0, #1
 8017638:	bd10      	pop	{r4, pc}

0801763a <_ZN8touchgfx3HAL7noTouchEv>:
 801763a:	b510      	push	{r4, lr}
 801763c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8017640:	4604      	mov	r4, r0
 8017642:	b153      	cbz	r3, 801765a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017644:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8017648:	2101      	movs	r1, #1
 801764a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 801764e:	301c      	adds	r0, #28
 8017650:	f012 fd00 	bl	802a054 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017654:	2300      	movs	r3, #0
 8017656:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 801765a:	bd10      	pop	{r4, pc}

0801765c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801765c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017660:	b085      	sub	sp, #20
 8017662:	4604      	mov	r4, r0
 8017664:	2000      	movs	r0, #0
 8017666:	4699      	mov	r9, r3
 8017668:	ad04      	add	r5, sp, #16
 801766a:	460f      	mov	r7, r1
 801766c:	4690      	mov	r8, r2
 801766e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017672:	69a0      	ldr	r0, [r4, #24]
 8017674:	6806      	ldr	r6, [r0, #0]
 8017676:	9501      	str	r5, [sp, #4]
 8017678:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801767c:	9500      	str	r5, [sp, #0]
 801767e:	6835      	ldr	r5, [r6, #0]
 8017680:	47a8      	blx	r5
 8017682:	4d10      	ldr	r5, [pc, #64]	; (80176c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8017684:	4606      	mov	r6, r0
 8017686:	f8a5 9000 	strh.w	r9, [r5]
 801768a:	f7ec f8f7 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 801768e:	6803      	ldr	r3, [r0, #0]
 8017690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017692:	4798      	blx	r3
 8017694:	b128      	cbz	r0, 80176a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8017696:	2801      	cmp	r0, #1
 8017698:	d00b      	beq.n	80176b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801769a:	4630      	mov	r0, r6
 801769c:	b005      	add	sp, #20
 801769e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176a2:	882b      	ldrh	r3, [r5, #0]
 80176a4:	fb08 7203 	mla	r2, r8, r3, r7
 80176a8:	9b03      	ldr	r3, [sp, #12]
 80176aa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80176ae:	63e3      	str	r3, [r4, #60]	; 0x3c
 80176b0:	e7f3      	b.n	801769a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80176b2:	882a      	ldrh	r2, [r5, #0]
 80176b4:	9b03      	ldr	r3, [sp, #12]
 80176b6:	fb08 7202 	mla	r2, r8, r2, r7
 80176ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176be:	1a9a      	subs	r2, r3, r2
 80176c0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80176c2:	e7ea      	b.n	801769a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80176c4:	2001511a 	.word	0x2001511a

080176c8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80176c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ca:	b08b      	sub	sp, #44	; 0x2c
 80176cc:	4617      	mov	r7, r2
 80176ce:	4604      	mov	r4, r0
 80176d0:	460e      	mov	r6, r1
 80176d2:	461d      	mov	r5, r3
 80176d4:	f7ec f8d2 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 80176d8:	6803      	ldr	r3, [r0, #0]
 80176da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176dc:	4798      	blx	r3
 80176de:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80176e2:	9007      	str	r0, [sp, #28]
 80176e4:	4631      	mov	r1, r6
 80176e6:	6822      	ldr	r2, [r4, #0]
 80176e8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80176ec:	4b0c      	ldr	r3, [pc, #48]	; (8017720 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80176ee:	4620      	mov	r0, r4
 80176f0:	881b      	ldrh	r3, [r3, #0]
 80176f2:	9306      	str	r3, [sp, #24]
 80176f4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80176f8:	9305      	str	r3, [sp, #20]
 80176fa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80176fe:	9304      	str	r3, [sp, #16]
 8017700:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017704:	9303      	str	r3, [sp, #12]
 8017706:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801770a:	9302      	str	r3, [sp, #8]
 801770c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017710:	e9cd 5300 	strd	r5, r3, [sp]
 8017714:	463b      	mov	r3, r7
 8017716:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017718:	2200      	movs	r2, #0
 801771a:	47a8      	blx	r5
 801771c:	b00b      	add	sp, #44	; 0x2c
 801771e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017720:	2001511a 	.word	0x2001511a

08017724 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017728:	4698      	mov	r8, r3
 801772a:	6803      	ldr	r3, [r0, #0]
 801772c:	b08b      	sub	sp, #44	; 0x2c
 801772e:	4617      	mov	r7, r2
 8017730:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017732:	460e      	mov	r6, r1
 8017734:	4b13      	ldr	r3, [pc, #76]	; (8017784 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017736:	4604      	mov	r4, r0
 8017738:	f8b3 9000 	ldrh.w	r9, [r3]
 801773c:	f7ec f89e 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 8017740:	6803      	ldr	r3, [r0, #0]
 8017742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017744:	4798      	blx	r3
 8017746:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801774a:	2200      	movs	r2, #0
 801774c:	4631      	mov	r1, r6
 801774e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017752:	2302      	movs	r3, #2
 8017754:	4620      	mov	r0, r4
 8017756:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801775a:	2301      	movs	r3, #1
 801775c:	9305      	str	r3, [sp, #20]
 801775e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017762:	9304      	str	r3, [sp, #16]
 8017764:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017768:	9303      	str	r3, [sp, #12]
 801776a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801776e:	9302      	str	r3, [sp, #8]
 8017770:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017774:	e9cd 8300 	strd	r8, r3, [sp]
 8017778:	463b      	mov	r3, r7
 801777a:	47a8      	blx	r5
 801777c:	b00b      	add	sp, #44	; 0x2c
 801777e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017782:	bf00      	nop
 8017784:	2001511a 	.word	0x2001511a

08017788 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801778c:	4698      	mov	r8, r3
 801778e:	6803      	ldr	r3, [r0, #0]
 8017790:	b087      	sub	sp, #28
 8017792:	460e      	mov	r6, r1
 8017794:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017796:	4617      	mov	r7, r2
 8017798:	4b0f      	ldr	r3, [pc, #60]	; (80177d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801779a:	4604      	mov	r4, r0
 801779c:	f8b3 9000 	ldrh.w	r9, [r3]
 80177a0:	f7ec f86c 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 80177a4:	6803      	ldr	r3, [r0, #0]
 80177a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177a8:	4798      	blx	r3
 80177aa:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80177ae:	463a      	mov	r2, r7
 80177b0:	4631      	mov	r1, r6
 80177b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80177b6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80177ba:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80177be:	4620      	mov	r0, r4
 80177c0:	9302      	str	r3, [sp, #8]
 80177c2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80177c6:	9301      	str	r3, [sp, #4]
 80177c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80177cc:	9300      	str	r3, [sp, #0]
 80177ce:	4643      	mov	r3, r8
 80177d0:	47a8      	blx	r5
 80177d2:	b007      	add	sp, #28
 80177d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177d8:	2001511a 	.word	0x2001511a

080177dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80177dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e0:	4604      	mov	r4, r0
 80177e2:	b08f      	sub	sp, #60	; 0x3c
 80177e4:	4610      	mov	r0, r2
 80177e6:	460d      	mov	r5, r1
 80177e8:	4691      	mov	r9, r2
 80177ea:	461e      	mov	r6, r3
 80177ec:	f004 ffb6 	bl	801c75c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80177f0:	2800      	cmp	r0, #0
 80177f2:	f000 809d 	beq.w	8017930 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80177f6:	6823      	ldr	r3, [r4, #0]
 80177f8:	4620      	mov	r0, r4
 80177fa:	f8df b198 	ldr.w	fp, [pc, #408]	; 8017994 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80177fe:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017804:	4798      	blx	r3
 8017806:	6823      	ldr	r3, [r4, #0]
 8017808:	4620      	mov	r0, r4
 801780a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8017998 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017810:	4798      	blx	r3
 8017812:	f8bb 3000 	ldrh.w	r3, [fp]
 8017816:	4f5c      	ldr	r7, [pc, #368]	; (8017988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017818:	9301      	str	r3, [sp, #4]
 801781a:	f8ba 3000 	ldrh.w	r3, [sl]
 801781e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017822:	4640      	mov	r0, r8
 8017824:	9302      	str	r3, [sp, #8]
 8017826:	883b      	ldrh	r3, [r7, #0]
 8017828:	9303      	str	r3, [sp, #12]
 801782a:	4b58      	ldr	r3, [pc, #352]	; (801798c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801782c:	881a      	ldrh	r2, [r3, #0]
 801782e:	9305      	str	r3, [sp, #20]
 8017830:	9204      	str	r2, [sp, #16]
 8017832:	f005 f827 	bl	801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017836:	8038      	strh	r0, [r7, #0]
 8017838:	4640      	mov	r0, r8
 801783a:	f005 f857 	bl	801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801783e:	9b05      	ldr	r3, [sp, #20]
 8017840:	b280      	uxth	r0, r0
 8017842:	8018      	strh	r0, [r3, #0]
 8017844:	4b52      	ldr	r3, [pc, #328]	; (8017990 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017846:	781b      	ldrb	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d174      	bne.n	8017936 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801784c:	883b      	ldrh	r3, [r7, #0]
 801784e:	f8aa 0000 	strh.w	r0, [sl]
 8017852:	f8ab 3000 	strh.w	r3, [fp]
 8017856:	4648      	mov	r0, r9
 8017858:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801785c:	f004 ff7e 	bl	801c75c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017860:	2200      	movs	r2, #0
 8017862:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017866:	4611      	mov	r1, r2
 8017868:	4628      	mov	r0, r5
 801786a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801786e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017872:	f7ec f8bf 	bl	80039f4 <_ZN8touchgfx8Drawable5setXYEss>
 8017876:	2301      	movs	r3, #1
 8017878:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801787c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017880:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017884:	2b00      	cmp	r3, #0
 8017886:	dd5c      	ble.n	8017942 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017888:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801788c:	2b00      	cmp	r3, #0
 801788e:	dd58      	ble.n	8017942 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017890:	462a      	mov	r2, r5
 8017892:	ab0a      	add	r3, sp, #40	; 0x28
 8017894:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017898:	6851      	ldr	r1, [r2, #4]
 801789a:	c303      	stmia	r3!, {r0, r1}
 801789c:	4631      	mov	r1, r6
 801789e:	a80a      	add	r0, sp, #40	; 0x28
 80178a0:	f7ff fbf8 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 80178a4:	4b38      	ldr	r3, [pc, #224]	; (8017988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80178a6:	2100      	movs	r1, #0
 80178a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178ac:	4b37      	ldr	r3, [pc, #220]	; (801798c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80178ae:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80178b2:	aa0a      	add	r2, sp, #40	; 0x28
 80178b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178b8:	910c      	str	r1, [sp, #48]	; 0x30
 80178ba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80178be:	ab08      	add	r3, sp, #32
 80178c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80178c8:	4618      	mov	r0, r3
 80178ca:	a90c      	add	r1, sp, #48	; 0x30
 80178cc:	f7ff fbe2 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 80178d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d13c      	bne.n	8017950 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80178d6:	2000      	movs	r0, #0
 80178d8:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 80178dc:	2600      	movs	r6, #0
 80178de:	696b      	ldr	r3, [r5, #20]
 80178e0:	a908      	add	r1, sp, #32
 80178e2:	682a      	ldr	r2, [r5, #0]
 80178e4:	4628      	mov	r0, r5
 80178e6:	9305      	str	r3, [sp, #20]
 80178e8:	616e      	str	r6, [r5, #20]
 80178ea:	6892      	ldr	r2, [r2, #8]
 80178ec:	4790      	blx	r2
 80178ee:	9b05      	ldr	r3, [sp, #20]
 80178f0:	4652      	mov	r2, sl
 80178f2:	4649      	mov	r1, r9
 80178f4:	616b      	str	r3, [r5, #20]
 80178f6:	4628      	mov	r0, r5
 80178f8:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 80178fc:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017900:	f7ec f878 	bl	80039f4 <_ZN8touchgfx8Drawable5setXYEss>
 8017904:	9a01      	ldr	r2, [sp, #4]
 8017906:	4b23      	ldr	r3, [pc, #140]	; (8017994 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017908:	4620      	mov	r0, r4
 801790a:	801a      	strh	r2, [r3, #0]
 801790c:	9a02      	ldr	r2, [sp, #8]
 801790e:	4b22      	ldr	r3, [pc, #136]	; (8017998 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017910:	801a      	strh	r2, [r3, #0]
 8017912:	9a03      	ldr	r2, [sp, #12]
 8017914:	4b1c      	ldr	r3, [pc, #112]	; (8017988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017916:	801a      	strh	r2, [r3, #0]
 8017918:	4b1c      	ldr	r3, [pc, #112]	; (801798c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801791a:	9a04      	ldr	r2, [sp, #16]
 801791c:	801a      	strh	r2, [r3, #0]
 801791e:	6823      	ldr	r3, [r4, #0]
 8017920:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017926:	4798      	blx	r3
 8017928:	6823      	ldr	r3, [r4, #0]
 801792a:	4620      	mov	r0, r4
 801792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801792e:	4798      	blx	r3
 8017930:	b00f      	add	sp, #60	; 0x3c
 8017932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017936:	883b      	ldrh	r3, [r7, #0]
 8017938:	f8ab 0000 	strh.w	r0, [fp]
 801793c:	f8aa 3000 	strh.w	r3, [sl]
 8017940:	e789      	b.n	8017856 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8017942:	462a      	mov	r2, r5
 8017944:	ab0a      	add	r3, sp, #40	; 0x28
 8017946:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801794a:	6851      	ldr	r1, [r2, #4]
 801794c:	c303      	stmia	r3!, {r0, r1}
 801794e:	e7a9      	b.n	80178a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017950:	a807      	add	r0, sp, #28
 8017952:	f005 f907 	bl	801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017956:	4606      	mov	r6, r0
 8017958:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801795a:	6803      	ldr	r3, [r0, #0]
 801795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801795e:	4798      	blx	r3
 8017960:	4286      	cmp	r6, r0
 8017962:	d1b8      	bne.n	80178d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017964:	f7eb ff8a 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 8017968:	6803      	ldr	r3, [r0, #0]
 801796a:	4606      	mov	r6, r0
 801796c:	a807      	add	r0, sp, #28
 801796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017970:	9305      	str	r3, [sp, #20]
 8017972:	f005 f8f7 	bl	801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017976:	9b05      	ldr	r3, [sp, #20]
 8017978:	4601      	mov	r1, r0
 801797a:	4630      	mov	r0, r6
 801797c:	4798      	blx	r3
 801797e:	f080 0001 	eor.w	r0, r0, #1
 8017982:	b2c0      	uxtb	r0, r0
 8017984:	e7a8      	b.n	80178d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8017986:	bf00      	nop
 8017988:	20015114 	.word	0x20015114
 801798c:	20015116 	.word	0x20015116
 8017990:	20015118 	.word	0x20015118
 8017994:	2001511a 	.word	0x2001511a
 8017998:	2001511c 	.word	0x2001511c

0801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801799c:	4b07      	ldr	r3, [pc, #28]	; (80179bc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801799e:	b510      	push	{r4, lr}
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	4604      	mov	r4, r0
 80179a4:	b13b      	cbz	r3, 80179b6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80179a6:	6803      	ldr	r3, [r0, #0]
 80179a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179aa:	4798      	blx	r3
 80179ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80179ae:	4283      	cmp	r3, r0
 80179b0:	d101      	bne.n	80179b6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80179b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80179b4:	bd10      	pop	{r4, pc}
 80179b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80179b8:	e7fc      	b.n	80179b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80179ba:	bf00      	nop
 80179bc:	2001511e 	.word	0x2001511e

080179c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80179c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179c4:	461d      	mov	r5, r3
 80179c6:	b08a      	sub	sp, #40	; 0x28
 80179c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179cc:	4690      	mov	r8, r2
 80179ce:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80179d2:	2400      	movs	r4, #0
 80179d4:	4607      	mov	r7, r0
 80179d6:	fb06 8505 	mla	r5, r6, r5, r8
 80179da:	9404      	str	r4, [sp, #16]
 80179dc:	f88d 4020 	strb.w	r4, [sp, #32]
 80179e0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80179e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80179e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80179ec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80179f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80179f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80179f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80179fc:	f7ff ffce 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017a00:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017a04:	6878      	ldr	r0, [r7, #4]
 8017a06:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017a0a:	a901      	add	r1, sp, #4
 8017a0c:	9505      	str	r5, [sp, #20]
 8017a0e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017a12:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8017a16:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017a1a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017a1e:	6803      	ldr	r3, [r0, #0]
 8017a20:	685b      	ldr	r3, [r3, #4]
 8017a22:	4798      	blx	r3
 8017a24:	b00a      	add	sp, #40	; 0x28
 8017a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a2a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a2e:	b08b      	sub	sp, #44	; 0x2c
 8017a30:	2400      	movs	r4, #0
 8017a32:	4691      	mov	r9, r2
 8017a34:	461d      	mov	r5, r3
 8017a36:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8017a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017a3e:	4688      	mov	r8, r1
 8017a40:	4607      	mov	r7, r0
 8017a42:	9404      	str	r4, [sp, #16]
 8017a44:	fb06 9505 	mla	r5, r6, r5, r9
 8017a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017a4c:	f7ff ffa6 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017a50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017a54:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017a58:	6878      	ldr	r0, [r7, #4]
 8017a5a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017a5e:	a901      	add	r1, sp, #4
 8017a60:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017a64:	9505      	str	r5, [sp, #20]
 8017a66:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017a6a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017a6e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017a72:	f8cd 8010 	str.w	r8, [sp, #16]
 8017a76:	f8ad 4020 	strh.w	r4, [sp, #32]
 8017a7a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017a7e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017a82:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017a86:	6803      	ldr	r3, [r0, #0]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	4798      	blx	r3
 8017a8c:	b00b      	add	sp, #44	; 0x2c
 8017a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08017a94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a98:	b08a      	sub	sp, #40	; 0x28
 8017a9a:	4698      	mov	r8, r3
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	4606      	mov	r6, r0
 8017aa0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8017aa4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8017aa8:	2d0b      	cmp	r5, #11
 8017aaa:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8017aae:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8017ab2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8017ab6:	9304      	str	r3, [sp, #16]
 8017ab8:	d137      	bne.n	8017b2a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8017aba:	2380      	movs	r3, #128	; 0x80
 8017abc:	f88d 0020 	strb.w	r0, [sp, #32]
 8017ac0:	4630      	mov	r0, r6
 8017ac2:	9203      	str	r2, [sp, #12]
 8017ac4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017ac8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017acc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017ad0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017ad4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017ad8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017adc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017ae0:	f7ff ff5c 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017ae4:	2c0b      	cmp	r4, #11
 8017ae6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017aea:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017aee:	bf94      	ite	ls
 8017af0:	4b19      	ldrls	r3, [pc, #100]	; (8017b58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8017af2:	2100      	movhi	r1, #0
 8017af4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8017af8:	bf98      	it	ls
 8017afa:	5d19      	ldrbls	r1, [r3, r4]
 8017afc:	fb02 8307 	mla	r3, r2, r7, r8
 8017b00:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017b04:	10c9      	asrs	r1, r1, #3
 8017b06:	fb01 0003 	mla	r0, r1, r3, r0
 8017b0a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017b0e:	a901      	add	r1, sp, #4
 8017b10:	9005      	str	r0, [sp, #20]
 8017b12:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017b16:	2300      	movs	r3, #0
 8017b18:	6870      	ldr	r0, [r6, #4]
 8017b1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017b1e:	6803      	ldr	r3, [r0, #0]
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	4798      	blx	r3
 8017b24:	b00a      	add	sp, #40	; 0x28
 8017b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b2a:	2d02      	cmp	r5, #2
 8017b2c:	d109      	bne.n	8017b42 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8017b2e:	28ff      	cmp	r0, #255	; 0xff
 8017b30:	d105      	bne.n	8017b3e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8017b32:	f1bc 0f00 	cmp.w	ip, #0
 8017b36:	bf14      	ite	ne
 8017b38:	2340      	movne	r3, #64	; 0x40
 8017b3a:	2320      	moveq	r3, #32
 8017b3c:	e7be      	b.n	8017abc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017b3e:	2340      	movs	r3, #64	; 0x40
 8017b40:	e7bc      	b.n	8017abc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017b42:	28ff      	cmp	r0, #255	; 0xff
 8017b44:	d105      	bne.n	8017b52 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8017b46:	f1bc 0f00 	cmp.w	ip, #0
 8017b4a:	bf14      	ite	ne
 8017b4c:	2304      	movne	r3, #4
 8017b4e:	2301      	moveq	r3, #1
 8017b50:	e7b4      	b.n	8017abc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017b52:	2304      	movs	r3, #4
 8017b54:	e7b2      	b.n	8017abc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017b56:	bf00      	nop
 8017b58:	0802f7e0 	.word	0x0802f7e0

08017b5c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8017b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b60:	b08b      	sub	sp, #44	; 0x2c
 8017b62:	461d      	mov	r5, r3
 8017b64:	2400      	movs	r4, #0
 8017b66:	4688      	mov	r8, r1
 8017b68:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8017b6c:	4693      	mov	fp, r2
 8017b6e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8017b72:	4607      	mov	r7, r0
 8017b74:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017b78:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8017b7c:	9404      	str	r4, [sp, #16]
 8017b7e:	bf14      	ite	ne
 8017b80:	2308      	movne	r3, #8
 8017b82:	2302      	moveq	r3, #2
 8017b84:	fb05 b50a 	mla	r5, r5, sl, fp
 8017b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b8c:	f7ff ff06 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017b90:	2e0b      	cmp	r6, #11
 8017b92:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017b96:	a901      	add	r1, sp, #4
 8017b98:	bf98      	it	ls
 8017b9a:	4b13      	ldrls	r3, [pc, #76]	; (8017be8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8017b9c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8017ba0:	bf98      	it	ls
 8017ba2:	5d9c      	ldrbls	r4, [r3, r6]
 8017ba4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017ba8:	10e4      	asrs	r4, r4, #3
 8017baa:	f8cd 8010 	str.w	r8, [sp, #16]
 8017bae:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017bb2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017bb6:	fb04 0405 	mla	r4, r4, r5, r0
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	9405      	str	r4, [sp, #20]
 8017bc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017bc8:	f88d 9020 	strb.w	r9, [sp, #32]
 8017bcc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8017bd0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017bd4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8017bd8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8017bdc:	6803      	ldr	r3, [r0, #0]
 8017bde:	685b      	ldr	r3, [r3, #4]
 8017be0:	4798      	blx	r3
 8017be2:	b00b      	add	sp, #44	; 0x2c
 8017be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017be8:	0802f7e0 	.word	0x0802f7e0

08017bec <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf0:	461e      	mov	r6, r3
 8017bf2:	4b0a      	ldr	r3, [pc, #40]	; (8017c1c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8017bf4:	460f      	mov	r7, r1
 8017bf6:	4690      	mov	r8, r2
 8017bf8:	881d      	ldrh	r5, [r3, #0]
 8017bfa:	f7eb fe3f 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 8017bfe:	6803      	ldr	r3, [r0, #0]
 8017c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c02:	4798      	blx	r3
 8017c04:	280b      	cmp	r0, #11
 8017c06:	bf96      	itet	ls
 8017c08:	4b05      	ldrls	r3, [pc, #20]	; (8017c20 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017c0a:	2400      	movhi	r4, #0
 8017c0c:	5c1c      	ldrbls	r4, [r3, r0]
 8017c0e:	fb08 7005 	mla	r0, r8, r5, r7
 8017c12:	10e4      	asrs	r4, r4, #3
 8017c14:	fb04 6000 	mla	r0, r4, r0, r6
 8017c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c1c:	2001511a 	.word	0x2001511a
 8017c20:	0802f7e0 	.word	0x0802f7e0

08017c24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c26:	b08b      	sub	sp, #44	; 0x2c
 8017c28:	461f      	mov	r7, r3
 8017c2a:	4604      	mov	r4, r0
 8017c2c:	4616      	mov	r6, r2
 8017c2e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017c32:	2500      	movs	r5, #0
 8017c34:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017c38:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017c3c:	9504      	str	r5, [sp, #16]
 8017c3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017c42:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017c46:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017c4a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017c4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017c52:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017c56:	f88d 3020 	strb.w	r3, [sp, #32]
 8017c5a:	f7ff fe9f 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017c5e:	463a      	mov	r2, r7
 8017c60:	4631      	mov	r1, r6
 8017c62:	4603      	mov	r3, r0
 8017c64:	4620      	mov	r0, r4
 8017c66:	f7ff ffc1 	bl	8017bec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017c6a:	4b0e      	ldr	r3, [pc, #56]	; (8017ca4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8017c6c:	9005      	str	r0, [sp, #20]
 8017c6e:	881b      	ldrh	r3, [r3, #0]
 8017c70:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017c74:	f7eb fe02 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 8017c78:	6803      	ldr	r3, [r0, #0]
 8017c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c7c:	4798      	blx	r3
 8017c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017c80:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8017c84:	a901      	add	r1, sp, #4
 8017c86:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017c8a:	9304      	str	r3, [sp, #16]
 8017c8c:	6860      	ldr	r0, [r4, #4]
 8017c8e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017c92:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8017c96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017c9a:	6803      	ldr	r3, [r0, #0]
 8017c9c:	685b      	ldr	r3, [r3, #4]
 8017c9e:	4798      	blx	r3
 8017ca0:	b00b      	add	sp, #44	; 0x2c
 8017ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ca4:	2001511a 	.word	0x2001511a

08017ca8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017caa:	b08d      	sub	sp, #52	; 0x34
 8017cac:	2501      	movs	r5, #1
 8017cae:	4604      	mov	r4, r0
 8017cb0:	466b      	mov	r3, sp
 8017cb2:	9503      	str	r5, [sp, #12]
 8017cb4:	e883 0006 	stmia.w	r3, {r1, r2}
 8017cb8:	2300      	movs	r3, #0
 8017cba:	f8bd 6000 	ldrh.w	r6, [sp]
 8017cbe:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017cc2:	9306      	str	r3, [sp, #24]
 8017cc4:	6803      	ldr	r3, [r0, #0]
 8017cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cc8:	4798      	blx	r3
 8017cca:	463a      	mov	r2, r7
 8017ccc:	4631      	mov	r1, r6
 8017cce:	4603      	mov	r3, r0
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f7ff ff8b 	bl	8017bec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017cd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017cd8:	9004      	str	r0, [sp, #16]
 8017cda:	9307      	str	r3, [sp, #28]
 8017cdc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017ce0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017ce4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017ce8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017cec:	4b0e      	ldr	r3, [pc, #56]	; (8017d28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8017cee:	881b      	ldrh	r3, [r3, #0]
 8017cf0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017cf4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017cf8:	f7eb fdc0 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 8017cfc:	6803      	ldr	r3, [r0, #0]
 8017cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d00:	4798      	blx	r3
 8017d02:	23ff      	movs	r3, #255	; 0xff
 8017d04:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017d08:	a903      	add	r1, sp, #12
 8017d0a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017d0e:	6860      	ldr	r0, [r4, #4]
 8017d10:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017d14:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017d18:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017d1c:	6803      	ldr	r3, [r0, #0]
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	4798      	blx	r3
 8017d22:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017d24:	b00d      	add	sp, #52	; 0x34
 8017d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d28:	2001511a 	.word	0x2001511a

08017d2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d30:	b08c      	sub	sp, #48	; 0x30
 8017d32:	461e      	mov	r6, r3
 8017d34:	2300      	movs	r3, #0
 8017d36:	4604      	mov	r4, r0
 8017d38:	466d      	mov	r5, sp
 8017d3a:	9306      	str	r3, [sp, #24]
 8017d3c:	6803      	ldr	r3, [r0, #0]
 8017d3e:	e885 0006 	stmia.w	r5, {r1, r2}
 8017d42:	2501      	movs	r5, #1
 8017d44:	f8bd 7000 	ldrh.w	r7, [sp]
 8017d48:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8017d4c:	9503      	str	r5, [sp, #12]
 8017d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d50:	4798      	blx	r3
 8017d52:	4642      	mov	r2, r8
 8017d54:	4639      	mov	r1, r7
 8017d56:	4603      	mov	r3, r0
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f7ff ff47 	bl	8017bec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017d5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017d62:	9004      	str	r0, [sp, #16]
 8017d64:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017d68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017d6c:	9607      	str	r6, [sp, #28]
 8017d6e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017d72:	4b10      	ldr	r3, [pc, #64]	; (8017db4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8017d74:	881b      	ldrh	r3, [r3, #0]
 8017d76:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017d7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d7c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017d80:	f7eb fd7c 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 8017d84:	6803      	ldr	r3, [r0, #0]
 8017d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d88:	4798      	blx	r3
 8017d8a:	23ff      	movs	r3, #255	; 0xff
 8017d8c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017d90:	a903      	add	r1, sp, #12
 8017d92:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017d96:	6860      	ldr	r0, [r4, #4]
 8017d98:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017d9c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017da0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017da4:	6803      	ldr	r3, [r0, #0]
 8017da6:	685b      	ldr	r3, [r3, #4]
 8017da8:	4798      	blx	r3
 8017daa:	4630      	mov	r0, r6
 8017dac:	b00c      	add	sp, #48	; 0x30
 8017dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017db2:	bf00      	nop
 8017db4:	2001511a 	.word	0x2001511a

08017db8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8017db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dba:	b085      	sub	sp, #20
 8017dbc:	4605      	mov	r5, r0
 8017dbe:	ac02      	add	r4, sp, #8
 8017dc0:	e884 0006 	stmia.w	r4, {r1, r2}
 8017dc4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8017dc8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017dcc:	f7ff fde6 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017dd0:	4631      	mov	r1, r6
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	463a      	mov	r2, r7
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	f7ff ff08 	bl	8017bec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017ddc:	4a05      	ldr	r2, [pc, #20]	; (8017df4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8017dde:	682b      	ldr	r3, [r5, #0]
 8017de0:	8812      	ldrh	r2, [r2, #0]
 8017de2:	9200      	str	r2, [sp, #0]
 8017de4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017de6:	4603      	mov	r3, r0
 8017de8:	4628      	mov	r0, r5
 8017dea:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017dee:	47b0      	blx	r6
 8017df0:	b005      	add	sp, #20
 8017df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017df4:	2001511a 	.word	0x2001511a

08017df8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017df8:	b570      	push	{r4, r5, r6, lr}
 8017dfa:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8017dfe:	4604      	mov	r4, r0
 8017e00:	b19b      	cbz	r3, 8017e2a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017e02:	2002      	movs	r0, #2
 8017e04:	f7ea f82c 	bl	8001e60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017e08:	2300      	movs	r3, #0
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8017e10:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8017e14:	6823      	ldr	r3, [r4, #0]
 8017e16:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017e1a:	f7ff fdbf 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017e1e:	4601      	mov	r1, r0
 8017e20:	4620      	mov	r0, r4
 8017e22:	462b      	mov	r3, r5
 8017e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e28:	4718      	bx	r3
 8017e2a:	bd70      	pop	{r4, r5, r6, pc}

08017e2c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8017e2c:	b570      	push	{r4, r5, r6, lr}
 8017e2e:	4605      	mov	r5, r0
 8017e30:	460c      	mov	r4, r1
 8017e32:	2003      	movs	r0, #3
 8017e34:	b149      	cbz	r1, 8017e4a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8017e36:	f7e9 ffb3 	bl	8001da0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017e3a:	6928      	ldr	r0, [r5, #16]
 8017e3c:	b168      	cbz	r0, 8017e5a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017e3e:	6803      	ldr	r3, [r0, #0]
 8017e40:	2101      	movs	r1, #1
 8017e42:	695b      	ldr	r3, [r3, #20]
 8017e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e48:	4718      	bx	r3
 8017e4a:	f7e9 ffd9 	bl	8001e00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017e4e:	6928      	ldr	r0, [r5, #16]
 8017e50:	b118      	cbz	r0, 8017e5a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017e52:	6803      	ldr	r3, [r0, #0]
 8017e54:	4621      	mov	r1, r4
 8017e56:	695b      	ldr	r3, [r3, #20]
 8017e58:	e7f4      	b.n	8017e44 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8017e5a:	bd70      	pop	{r4, r5, r6, pc}

08017e5c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017e5c:	b538      	push	{r3, r4, r5, lr}
 8017e5e:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8017e62:	4604      	mov	r4, r0
 8017e64:	460d      	mov	r5, r1
 8017e66:	428b      	cmp	r3, r1
 8017e68:	d006      	beq.n	8017e78 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8017e6a:	6803      	ldr	r3, [r0, #0]
 8017e6c:	b929      	cbnz	r1, 8017e7a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8017e6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017e72:	4798      	blx	r3
 8017e74:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8017e78:	bd38      	pop	{r3, r4, r5, pc}
 8017e7a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017e7e:	e7f8      	b.n	8017e72 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08017e80 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017e80:	4b0d      	ldr	r3, [pc, #52]	; (8017eb8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017e82:	b510      	push	{r4, lr}
 8017e84:	781b      	ldrb	r3, [r3, #0]
 8017e86:	4604      	mov	r4, r0
 8017e88:	b95b      	cbnz	r3, 8017ea2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017e8a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	d007      	beq.n	8017ea2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017e92:	6840      	ldr	r0, [r0, #4]
 8017e94:	f000 f912 	bl	80180bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017e98:	b118      	cbz	r0, 8017ea2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017e9a:	6862      	ldr	r2, [r4, #4]
 8017e9c:	7a53      	ldrb	r3, [r2, #9]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d0fc      	beq.n	8017e9c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017ea2:	f7ea f95f 	bl	8002164 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	2100      	movs	r1, #0
 8017eaa:	f7ff ffd7 	bl	8017e5c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f7ff fd74 	bl	801799c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017eb4:	bd10      	pop	{r4, pc}
 8017eb6:	bf00      	nop
 8017eb8:	2001511e 	.word	0x2001511e

08017ebc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017ebc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017ec0:	1a13      	subs	r3, r2, r0
 8017ec2:	4258      	negs	r0, r3
 8017ec4:	4158      	adcs	r0, r3
 8017ec6:	4770      	bx	lr

08017ec8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017ec8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017ecc:	1a9b      	subs	r3, r3, r2
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	bfdc      	itt	le
 8017ed2:	6882      	ldrle	r2, [r0, #8]
 8017ed4:	189b      	addle	r3, r3, r2
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	bfcc      	ite	gt
 8017eda:	2000      	movgt	r0, #0
 8017edc:	2001      	movle	r0, #1
 8017ede:	4770      	bx	lr

08017ee0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017ee0:	6902      	ldr	r2, [r0, #16]
 8017ee2:	6843      	ldr	r3, [r0, #4]
 8017ee4:	2024      	movs	r0, #36	; 0x24
 8017ee6:	fb00 3002 	mla	r0, r0, r2, r3
 8017eea:	4770      	bx	lr

08017eec <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017eec:	6803      	ldr	r3, [r0, #0]
 8017eee:	691b      	ldr	r3, [r3, #16]
 8017ef0:	4718      	bx	r3

08017ef2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	b570      	push	{r4, r5, r6, lr}
 8017ef6:	7203      	strb	r3, [r0, #8]
 8017ef8:	4604      	mov	r4, r0
 8017efa:	6840      	ldr	r0, [r0, #4]
 8017efc:	6803      	ldr	r3, [r0, #0]
 8017efe:	699b      	ldr	r3, [r3, #24]
 8017f00:	4798      	blx	r3
 8017f02:	6803      	ldr	r3, [r0, #0]
 8017f04:	4605      	mov	r5, r0
 8017f06:	2b40      	cmp	r3, #64	; 0x40
 8017f08:	d00c      	beq.n	8017f24 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017f0a:	d810      	bhi.n	8017f2e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017f0c:	2b04      	cmp	r3, #4
 8017f0e:	d01d      	beq.n	8017f4c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017f10:	d804      	bhi.n	8017f1c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8017f12:	2b01      	cmp	r3, #1
 8017f14:	d006      	beq.n	8017f24 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017f16:	2b02      	cmp	r3, #2
 8017f18:	d02c      	beq.n	8017f74 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8017f1a:	bd70      	pop	{r4, r5, r6, pc}
 8017f1c:	2b08      	cmp	r3, #8
 8017f1e:	d01d      	beq.n	8017f5c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017f20:	2b20      	cmp	r3, #32
 8017f22:	d1fa      	bne.n	8017f1a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8017f24:	6823      	ldr	r3, [r4, #0]
 8017f26:	4620      	mov	r0, r4
 8017f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f2a:	4798      	blx	r3
 8017f2c:	e013      	b.n	8017f56 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f32:	d0f7      	beq.n	8017f24 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017f34:	d804      	bhi.n	8017f40 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8017f36:	2b80      	cmp	r3, #128	; 0x80
 8017f38:	d0f4      	beq.n	8017f24 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017f3e:	e7f0      	b.n	8017f22 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8017f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017f44:	d0ee      	beq.n	8017f24 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017f4a:	e7e5      	b.n	8017f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8017f4c:	6823      	ldr	r3, [r4, #0]
 8017f4e:	7f01      	ldrb	r1, [r0, #28]
 8017f50:	4620      	mov	r0, r4
 8017f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f54:	4798      	blx	r3
 8017f56:	6823      	ldr	r3, [r4, #0]
 8017f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f5a:	e006      	b.n	8017f6a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017f5c:	6823      	ldr	r3, [r4, #0]
 8017f5e:	7f01      	ldrb	r1, [r0, #28]
 8017f60:	4620      	mov	r0, r4
 8017f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f64:	4798      	blx	r3
 8017f66:	6823      	ldr	r3, [r4, #0]
 8017f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f72:	4718      	bx	r3
 8017f74:	6823      	ldr	r3, [r4, #0]
 8017f76:	4620      	mov	r0, r4
 8017f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f7a:	4798      	blx	r3
 8017f7c:	e7f3      	b.n	8017f66 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08017f7e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017f7e:	4770      	bx	lr

08017f80 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017f80:	4770      	bx	lr

08017f82 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8017f82:	4770      	bx	lr

08017f84 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017f84:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8017f88:	b510      	push	{r4, lr}
 8017f8a:	1ad2      	subs	r2, r2, r3
 8017f8c:	2a00      	cmp	r2, #0
 8017f8e:	bfdc      	itt	le
 8017f90:	6884      	ldrle	r4, [r0, #8]
 8017f92:	1912      	addle	r2, r2, r4
 8017f94:	2a01      	cmp	r2, #1
 8017f96:	dd16      	ble.n	8017fc6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8017f98:	6842      	ldr	r2, [r0, #4]
 8017f9a:	2424      	movs	r4, #36	; 0x24
 8017f9c:	fb04 2303 	mla	r3, r4, r3, r2
 8017fa0:	f101 0220 	add.w	r2, r1, #32
 8017fa4:	f851 4b04 	ldr.w	r4, [r1], #4
 8017fa8:	4291      	cmp	r1, r2
 8017faa:	f843 4b04 	str.w	r4, [r3], #4
 8017fae:	d1f9      	bne.n	8017fa4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017fb0:	780a      	ldrb	r2, [r1, #0]
 8017fb2:	701a      	strb	r2, [r3, #0]
 8017fb4:	68c3      	ldr	r3, [r0, #12]
 8017fb6:	6882      	ldr	r2, [r0, #8]
 8017fb8:	f3bf 8f5b 	dmb	ish
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	bfd8      	it	le
 8017fc2:	1a9b      	suble	r3, r3, r2
 8017fc4:	60c3      	str	r3, [r0, #12]
 8017fc6:	bd10      	pop	{r4, pc}

08017fc8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017fc8:	6903      	ldr	r3, [r0, #16]
 8017fca:	6882      	ldr	r2, [r0, #8]
 8017fcc:	f3bf 8f5b 	dmb	ish
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	bfd8      	it	le
 8017fd6:	1a9b      	suble	r3, r3, r2
 8017fd8:	6103      	str	r3, [r0, #16]
 8017fda:	4770      	bx	lr

08017fdc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017fdc:	b570      	push	{r4, r5, r6, lr}
 8017fde:	4604      	mov	r4, r0
 8017fe0:	460e      	mov	r6, r1
 8017fe2:	6860      	ldr	r0, [r4, #4]
 8017fe4:	6803      	ldr	r3, [r0, #0]
 8017fe6:	685b      	ldr	r3, [r3, #4]
 8017fe8:	4798      	blx	r3
 8017fea:	2800      	cmp	r0, #0
 8017fec:	d1f9      	bne.n	8017fe2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017fee:	4d0d      	ldr	r5, [pc, #52]	; (8018024 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017ff0:	6828      	ldr	r0, [r5, #0]
 8017ff2:	6803      	ldr	r3, [r0, #0]
 8017ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ff6:	4798      	blx	r3
 8017ff8:	f7ea f8c2 	bl	8002180 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017ffc:	6828      	ldr	r0, [r5, #0]
 8017ffe:	2101      	movs	r1, #1
 8018000:	f7ff ff2c 	bl	8017e5c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018004:	6860      	ldr	r0, [r4, #4]
 8018006:	4631      	mov	r1, r6
 8018008:	6803      	ldr	r3, [r0, #0]
 801800a:	689b      	ldr	r3, [r3, #8]
 801800c:	4798      	blx	r3
 801800e:	6823      	ldr	r3, [r4, #0]
 8018010:	4620      	mov	r0, r4
 8018012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018014:	4798      	blx	r3
 8018016:	6828      	ldr	r0, [r5, #0]
 8018018:	6803      	ldr	r3, [r0, #0]
 801801a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801801e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018020:	4718      	bx	r3
 8018022:	bf00      	nop
 8018024:	20015120 	.word	0x20015120

08018028 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018028:	b508      	push	{r3, lr}
 801802a:	f7ea f89b 	bl	8002164 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801802e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018032:	f7ea b89f 	b.w	8002174 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018036 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8018036:	b510      	push	{r4, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	2114      	movs	r1, #20
 801803c:	f012 f890 	bl	802a160 <_ZdlPvj>
 8018040:	4620      	mov	r0, r4
 8018042:	bd10      	pop	{r4, pc}

08018044 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018044:	b510      	push	{r4, lr}
 8018046:	4604      	mov	r4, r0
 8018048:	6840      	ldr	r0, [r0, #4]
 801804a:	6803      	ldr	r3, [r0, #0]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	4798      	blx	r3
 8018050:	b948      	cbnz	r0, 8018066 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018052:	7a63      	ldrb	r3, [r4, #9]
 8018054:	b13b      	cbz	r3, 8018066 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018056:	7a23      	ldrb	r3, [r4, #8]
 8018058:	b92b      	cbnz	r3, 8018066 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801805a:	6823      	ldr	r3, [r4, #0]
 801805c:	4620      	mov	r0, r4
 801805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018064:	4718      	bx	r3
 8018066:	bd10      	pop	{r4, pc}

08018068 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018068:	b570      	push	{r4, r5, r6, lr}
 801806a:	4604      	mov	r4, r0
 801806c:	6840      	ldr	r0, [r0, #4]
 801806e:	6803      	ldr	r3, [r0, #0]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	4798      	blx	r3
 8018074:	4605      	mov	r5, r0
 8018076:	b930      	cbnz	r0, 8018086 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018078:	7a23      	ldrb	r3, [r4, #8]
 801807a:	b123      	cbz	r3, 8018086 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801807c:	6860      	ldr	r0, [r4, #4]
 801807e:	6803      	ldr	r3, [r0, #0]
 8018080:	695b      	ldr	r3, [r3, #20]
 8018082:	4798      	blx	r3
 8018084:	7225      	strb	r5, [r4, #8]
 8018086:	6860      	ldr	r0, [r4, #4]
 8018088:	6803      	ldr	r3, [r0, #0]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	4798      	blx	r3
 801808e:	b928      	cbnz	r0, 801809c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018090:	6823      	ldr	r3, [r4, #0]
 8018092:	4620      	mov	r0, r4
 8018094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801809a:	4718      	bx	r3
 801809c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180a0:	f7ea b876 	b.w	8002190 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080180a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80180a4:	b510      	push	{r4, lr}
 80180a6:	6082      	str	r2, [r0, #8]
 80180a8:	2200      	movs	r2, #0
 80180aa:	4c03      	ldr	r4, [pc, #12]	; (80180b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80180ac:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80180b0:	e9c0 4100 	strd	r4, r1, [r0]
 80180b4:	bd10      	pop	{r4, pc}
 80180b6:	bf00      	nop
 80180b8:	0802f7f4 	.word	0x0802f7f4

080180bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80180bc:	6840      	ldr	r0, [r0, #4]
 80180be:	6803      	ldr	r3, [r0, #0]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	4718      	bx	r3

080180c4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80180c4:	2300      	movs	r3, #0
 80180c6:	8083      	strh	r3, [r0, #4]
 80180c8:	80c3      	strh	r3, [r0, #6]
 80180ca:	8003      	strh	r3, [r0, #0]
 80180cc:	8043      	strh	r3, [r0, #2]
 80180ce:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80180d2:	2bff      	cmp	r3, #255	; 0xff
 80180d4:	bf01      	itttt	eq
 80180d6:	890b      	ldrheq	r3, [r1, #8]
 80180d8:	8083      	strheq	r3, [r0, #4]
 80180da:	894b      	ldrheq	r3, [r1, #10]
 80180dc:	80c3      	strheq	r3, [r0, #6]
 80180de:	4770      	bx	lr

080180e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80180e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80180e2:	4604      	mov	r4, r0
 80180e4:	466b      	mov	r3, sp
 80180e6:	6808      	ldr	r0, [r1, #0]
 80180e8:	6849      	ldr	r1, [r1, #4]
 80180ea:	c303      	stmia	r3!, {r0, r1}
 80180ec:	6823      	ldr	r3, [r4, #0]
 80180ee:	4669      	mov	r1, sp
 80180f0:	4620      	mov	r0, r4
 80180f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f4:	4798      	blx	r3
 80180f6:	4b08      	ldr	r3, [pc, #32]	; (8018118 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80180fe:	b10a      	cbz	r2, 8018104 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018100:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018102:	b900      	cbnz	r0, 8018106 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018104:	6898      	ldr	r0, [r3, #8]
 8018106:	6803      	ldr	r3, [r0, #0]
 8018108:	4669      	mov	r1, sp
 801810a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801810c:	6a1d      	ldr	r5, [r3, #32]
 801810e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018112:	47a8      	blx	r5
 8018114:	b003      	add	sp, #12
 8018116:	bd30      	pop	{r4, r5, pc}
 8018118:	20015120 	.word	0x20015120

0801811c <_ZN8touchgfx3BoxD1Ev>:
 801811c:	4770      	bx	lr

0801811e <_ZN8touchgfx3BoxD0Ev>:
 801811e:	b510      	push	{r4, lr}
 8018120:	4604      	mov	r4, r0
 8018122:	212c      	movs	r1, #44	; 0x2c
 8018124:	f012 f81c 	bl	802a160 <_ZdlPvj>
 8018128:	4620      	mov	r0, r4
 801812a:	bd10      	pop	{r4, pc}

0801812c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801812c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8018130:	b12a      	cbz	r2, 801813e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018132:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018136:	b112      	cbz	r2, 801813e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018138:	6803      	ldr	r3, [r0, #0]
 801813a:	695b      	ldr	r3, [r3, #20]
 801813c:	4718      	bx	r3
 801813e:	4770      	bx	lr

08018140 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018140:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018144:	4770      	bx	lr

08018146 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018146:	b570      	push	{r4, r5, r6, lr}
 8018148:	880b      	ldrh	r3, [r1, #0]
 801814a:	4605      	mov	r5, r0
 801814c:	4604      	mov	r4, r0
 801814e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018150:	8813      	ldrh	r3, [r2, #0]
 8018152:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018156:	4628      	mov	r0, r5
 8018158:	f004 fb94 	bl	801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801815c:	4606      	mov	r6, r0
 801815e:	4628      	mov	r0, r5
 8018160:	f004 fbc4 	bl	801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018164:	6823      	ldr	r3, [r4, #0]
 8018166:	4605      	mov	r5, r0
 8018168:	4631      	mov	r1, r6
 801816a:	4620      	mov	r0, r4
 801816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801816e:	4798      	blx	r3
 8018170:	6823      	ldr	r3, [r4, #0]
 8018172:	4629      	mov	r1, r5
 8018174:	4620      	mov	r0, r4
 8018176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801817c:	4718      	bx	r3

0801817e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801817e:	b510      	push	{r4, lr}
 8018180:	4604      	mov	r4, r0
 8018182:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018184:	b150      	cbz	r0, 801819c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018186:	6803      	ldr	r3, [r0, #0]
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	4798      	blx	r3
 801818c:	b130      	cbz	r0, 801819c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801818e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018190:	4621      	mov	r1, r4
 8018192:	6803      	ldr	r3, [r0, #0]
 8018194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018198:	689b      	ldr	r3, [r3, #8]
 801819a:	4718      	bx	r3
 801819c:	bd10      	pop	{r4, pc}

0801819e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801819e:	b510      	push	{r4, lr}
 80181a0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80181a4:	4604      	mov	r4, r0
 80181a6:	2bff      	cmp	r3, #255	; 0xff
 80181a8:	d006      	beq.n	80181b8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80181aa:	2300      	movs	r3, #0
 80181ac:	8003      	strh	r3, [r0, #0]
 80181ae:	8043      	strh	r3, [r0, #2]
 80181b0:	8083      	strh	r3, [r0, #4]
 80181b2:	80c3      	strh	r3, [r0, #6]
 80181b4:	4620      	mov	r0, r4
 80181b6:	bd10      	pop	{r4, pc}
 80181b8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80181bc:	b11b      	cbz	r3, 80181c6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80181be:	3130      	adds	r1, #48	; 0x30
 80181c0:	f004 fbc8 	bl	801c954 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80181c4:	e7f6      	b.n	80181b4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80181c6:	312e      	adds	r1, #46	; 0x2e
 80181c8:	e7fa      	b.n	80181c0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

080181cc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80181cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80181d4:	b08a      	sub	sp, #40	; 0x28
 80181d6:	4604      	mov	r4, r0
 80181d8:	4688      	mov	r8, r1
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d066      	beq.n	80182ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80181de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80181e0:	a805      	add	r0, sp, #20
 80181e2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80181e6:	f004 fb4d 	bl	801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80181ea:	4607      	mov	r7, r0
 80181ec:	a805      	add	r0, sp, #20
 80181ee:	f004 fb7d 	bl	801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 80181f2:	f9b8 6000 	ldrsh.w	r6, [r8]
 80181f6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80181fa:	2300      	movs	r3, #0
 80181fc:	4432      	add	r2, r6
 80181fe:	9306      	str	r3, [sp, #24]
 8018200:	b292      	uxth	r2, r2
 8018202:	fa0f fc82 	sxth.w	ip, r2
 8018206:	459c      	cmp	ip, r3
 8018208:	dd52      	ble.n	80182b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801820a:	42b7      	cmp	r7, r6
 801820c:	dd50      	ble.n	80182b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801820e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8018212:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8018216:	442b      	add	r3, r5
 8018218:	b29b      	uxth	r3, r3
 801821a:	b219      	sxth	r1, r3
 801821c:	2900      	cmp	r1, #0
 801821e:	dd47      	ble.n	80182b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018220:	42a8      	cmp	r0, r5
 8018222:	dd45      	ble.n	80182b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018224:	4567      	cmp	r7, ip
 8018226:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801822a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801822e:	bfb8      	it	lt
 8018230:	b2ba      	uxthlt	r2, r7
 8018232:	4288      	cmp	r0, r1
 8018234:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018238:	bfb8      	it	lt
 801823a:	b283      	uxthlt	r3, r0
 801823c:	1b92      	subs	r2, r2, r6
 801823e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8018242:	1b5b      	subs	r3, r3, r5
 8018244:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018248:	f8ad 301e 	strh.w	r3, [sp, #30]
 801824c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018254:	429a      	cmp	r2, r3
 8018256:	d026      	beq.n	80182a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018258:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801825c:	2b00      	cmp	r3, #0
 801825e:	dd22      	ble.n	80182a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018260:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018264:	2b00      	cmp	r3, #0
 8018266:	dd1e      	ble.n	80182a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018268:	2300      	movs	r3, #0
 801826a:	a908      	add	r1, sp, #32
 801826c:	4620      	mov	r0, r4
 801826e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018272:	6823      	ldr	r3, [r4, #0]
 8018274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018276:	4798      	blx	r3
 8018278:	4b0f      	ldr	r3, [pc, #60]	; (80182b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8018280:	b10a      	cbz	r2, 8018286 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8018282:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018284:	b900      	cbnz	r0, 8018288 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8018286:	6898      	ldr	r0, [r3, #8]
 8018288:	2501      	movs	r5, #1
 801828a:	6801      	ldr	r1, [r0, #0]
 801828c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018290:	9502      	str	r5, [sp, #8]
 8018292:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018296:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801829a:	9401      	str	r4, [sp, #4]
 801829c:	ac06      	add	r4, sp, #24
 801829e:	9400      	str	r4, [sp, #0]
 80182a0:	688c      	ldr	r4, [r1, #8]
 80182a2:	a905      	add	r1, sp, #20
 80182a4:	47a0      	blx	r4
 80182a6:	b00a      	add	sp, #40	; 0x28
 80182a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ac:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80182ae:	e797      	b.n	80181e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80182b0:	2300      	movs	r3, #0
 80182b2:	9307      	str	r3, [sp, #28]
 80182b4:	e7ca      	b.n	801824c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80182b6:	bf00      	nop
 80182b8:	20015120 	.word	0x20015120

080182bc <_ZNK8touchgfx6Button17invalidateContentEv>:
 80182bc:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 80182c0:	b12a      	cbz	r2, 80182ce <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80182c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80182c6:	b112      	cbz	r2, 80182ce <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80182c8:	6803      	ldr	r3, [r0, #0]
 80182ca:	695b      	ldr	r3, [r3, #20]
 80182cc:	4718      	bx	r3
 80182ce:	4770      	bx	lr

080182d0 <_ZN8touchgfx5ImageD1Ev>:
 80182d0:	4770      	bx	lr

080182d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80182d2:	b570      	push	{r4, r5, r6, lr}
 80182d4:	880b      	ldrh	r3, [r1, #0]
 80182d6:	460d      	mov	r5, r1
 80182d8:	4604      	mov	r4, r0
 80182da:	84c3      	strh	r3, [r0, #38]	; 0x26
 80182dc:	4608      	mov	r0, r1
 80182de:	f004 fad1 	bl	801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182e2:	4606      	mov	r6, r0
 80182e4:	4628      	mov	r0, r5
 80182e6:	f004 fb01 	bl	801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182ea:	6823      	ldr	r3, [r4, #0]
 80182ec:	4605      	mov	r5, r0
 80182ee:	4631      	mov	r1, r6
 80182f0:	4620      	mov	r0, r4
 80182f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182f4:	4798      	blx	r3
 80182f6:	6823      	ldr	r3, [r4, #0]
 80182f8:	4629      	mov	r1, r5
 80182fa:	4620      	mov	r0, r4
 80182fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018302:	4718      	bx	r3

08018304 <_ZN8touchgfx5ImageD0Ev>:
 8018304:	b510      	push	{r4, lr}
 8018306:	4604      	mov	r4, r0
 8018308:	212c      	movs	r1, #44	; 0x2c
 801830a:	f011 ff29 	bl	802a160 <_ZdlPvj>
 801830e:	4620      	mov	r0, r4
 8018310:	bd10      	pop	{r4, pc}

08018312 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018312:	b510      	push	{r4, lr}
 8018314:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018318:	4604      	mov	r4, r0
 801831a:	2bff      	cmp	r3, #255	; 0xff
 801831c:	d006      	beq.n	801832c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801831e:	2300      	movs	r3, #0
 8018320:	8003      	strh	r3, [r0, #0]
 8018322:	8043      	strh	r3, [r0, #2]
 8018324:	8083      	strh	r3, [r0, #4]
 8018326:	80c3      	strh	r3, [r0, #6]
 8018328:	4620      	mov	r0, r4
 801832a:	bd10      	pop	{r4, pc}
 801832c:	3126      	adds	r1, #38	; 0x26
 801832e:	f004 fb11 	bl	801c954 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018332:	e7f9      	b.n	8018328 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018334 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8018334:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8018338:	b12a      	cbz	r2, 8018346 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801833a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801833e:	b112      	cbz	r2, 8018346 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8018340:	6803      	ldr	r3, [r0, #0]
 8018342:	695b      	ldr	r3, [r3, #20]
 8018344:	4718      	bx	r3
 8018346:	4770      	bx	lr

08018348 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801834c:	4604      	mov	r4, r0
 801834e:	b088      	sub	sp, #32
 8018350:	2500      	movs	r5, #0
 8018352:	460f      	mov	r7, r1
 8018354:	f854 3b26 	ldr.w	r3, [r4], #38
 8018358:	a904      	add	r1, sp, #16
 801835a:	4606      	mov	r6, r0
 801835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801835e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018362:	4798      	blx	r3
 8018364:	4620      	mov	r0, r4
 8018366:	f004 fa8d 	bl	801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801836a:	4680      	mov	r8, r0
 801836c:	4620      	mov	r0, r4
 801836e:	f004 fabd 	bl	801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018372:	9506      	str	r5, [sp, #24]
 8018374:	ad06      	add	r5, sp, #24
 8018376:	f8ad 001e 	strh.w	r0, [sp, #30]
 801837a:	4639      	mov	r1, r7
 801837c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018380:	4628      	mov	r0, r5
 8018382:	f7fe fe87 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 8018386:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801838a:	2b00      	cmp	r3, #0
 801838c:	dd19      	ble.n	80183c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801838e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018392:	2b00      	cmp	r3, #0
 8018394:	dd15      	ble.n	80183c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018396:	4b0c      	ldr	r3, [pc, #48]	; (80183c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801839e:	b10a      	cbz	r2, 80183a4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80183a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80183a2:	b900      	cbnz	r0, 80183a6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80183a4:	6898      	ldr	r0, [r3, #8]
 80183a6:	2701      	movs	r7, #1
 80183a8:	6801      	ldr	r1, [r0, #0]
 80183aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80183ae:	9702      	str	r7, [sp, #8]
 80183b0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80183b4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80183b8:	e9cd 5600 	strd	r5, r6, [sp]
 80183bc:	688d      	ldr	r5, [r1, #8]
 80183be:	4621      	mov	r1, r4
 80183c0:	47a8      	blx	r5
 80183c2:	b008      	add	sp, #32
 80183c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183c8:	20015120 	.word	0x20015120

080183cc <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 80183cc:	4770      	bx	lr

080183ce <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 80183ce:	b510      	push	{r4, lr}
 80183d0:	4604      	mov	r4, r0
 80183d2:	2148      	movs	r1, #72	; 0x48
 80183d4:	f011 fec4 	bl	802a160 <_ZdlPvj>
 80183d8:	4620      	mov	r0, r4
 80183da:	bd10      	pop	{r4, pc}

080183dc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80183dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183e0:	b08d      	sub	sp, #52	; 0x34
 80183e2:	4604      	mov	r4, r0
 80183e4:	460f      	mov	r7, r1
 80183e6:	f7ff fef1 	bl	80181cc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80183ea:	4a55      	ldr	r2, [pc, #340]	; (8018540 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 80183ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80183ee:	8812      	ldrh	r2, [r2, #0]
 80183f0:	429a      	cmp	r2, r3
 80183f2:	f240 8082 	bls.w	80184fa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80183f6:	4d53      	ldr	r5, [pc, #332]	; (8018544 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 80183f8:	682a      	ldr	r2, [r5, #0]
 80183fa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80183fe:	4b52      	ldr	r3, [pc, #328]	; (8018548 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018406:	2200      	movs	r2, #0
 8018408:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 801840c:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018410:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8018414:	2a03      	cmp	r2, #3
 8018416:	d811      	bhi.n	801843c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8018418:	e8df f002 	tbb	[pc, r2]
 801841c:	89727902 	.word	0x89727902
 8018420:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018424:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018428:	1ad2      	subs	r2, r2, r3
 801842a:	2002      	movs	r0, #2
 801842c:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018430:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018434:	fb92 f2f0 	sdiv	r2, r2, r0
 8018438:	f8ad 200e 	strh.w	r2, [sp, #14]
 801843c:	f10d 080c 	add.w	r8, sp, #12
 8018440:	f10d 0914 	add.w	r9, sp, #20
 8018444:	e898 0003 	ldmia.w	r8, {r0, r1}
 8018448:	e889 0003 	stmia.w	r9, {r0, r1}
 801844c:	4639      	mov	r1, r7
 801844e:	4648      	mov	r0, r9
 8018450:	f7fe fe20 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 8018454:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018458:	2b00      	cmp	r3, #0
 801845a:	dd4e      	ble.n	80184fa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801845c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018460:	2b00      	cmp	r3, #0
 8018462:	dd4a      	ble.n	80184fa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8018464:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018468:	4641      	mov	r1, r8
 801846a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801846e:	4620      	mov	r0, r4
 8018470:	1a9b      	subs	r3, r3, r2
 8018472:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018476:	f8ad 3014 	strh.w	r3, [sp, #20]
 801847a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801847e:	1a9b      	subs	r3, r3, r2
 8018480:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018484:	6823      	ldr	r3, [r4, #0]
 8018486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018488:	4798      	blx	r3
 801848a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801848e:	2b00      	cmp	r3, #0
 8018490:	d053      	beq.n	801853a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8018492:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8018494:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8018496:	682b      	ldr	r3, [r5, #0]
 8018498:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 801849c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80184a0:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 80184a4:	785b      	ldrb	r3, [r3, #1]
 80184a6:	9209      	str	r2, [sp, #36]	; 0x24
 80184a8:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80184ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80184b0:	9607      	str	r6, [sp, #28]
 80184b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80184b6:	2300      	movs	r3, #0
 80184b8:	f88d 5020 	strb.w	r5, [sp, #32]
 80184bc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80184c0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80184c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80184c8:	4b20      	ldr	r3, [pc, #128]	; (801854c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80184ca:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80184d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80184d8:	b10a      	cbz	r2, 80184de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 80184da:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80184dc:	b904      	cbnz	r4, 80184e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 80184de:	689c      	ldr	r4, [r3, #8]
 80184e0:	4b1b      	ldr	r3, [pc, #108]	; (8018550 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80184e2:	6818      	ldr	r0, [r3, #0]
 80184e4:	f7eb fccc 	bl	8003e80 <_ZNK8touchgfx5Texts7getTextEt>
 80184e8:	ab07      	add	r3, sp, #28
 80184ea:	9001      	str	r0, [sp, #4]
 80184ec:	4620      	mov	r0, r4
 80184ee:	9300      	str	r3, [sp, #0]
 80184f0:	464b      	mov	r3, r9
 80184f2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80184f6:	f7eb fc75 	bl	8003de4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80184fa:	b00d      	add	sp, #52	; 0x34
 80184fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018500:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018504:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018508:	1ad2      	subs	r2, r2, r3
 801850a:	3201      	adds	r2, #1
 801850c:	e78d      	b.n	801842a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 801850e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018512:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8018516:	1ad2      	subs	r2, r2, r3
 8018518:	3201      	adds	r2, #1
 801851a:	2002      	movs	r0, #2
 801851c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8018520:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018524:	fb92 f2f0 	sdiv	r2, r2, r0
 8018528:	f8ad 200c 	strh.w	r2, [sp, #12]
 801852c:	e786      	b.n	801843c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801852e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018532:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8018536:	1ad2      	subs	r2, r2, r3
 8018538:	e7ef      	b.n	801851a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 801853a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801853c:	e7aa      	b.n	8018494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 801853e:	bf00      	nop
 8018540:	20015174 	.word	0x20015174
 8018544:	20015170 	.word	0x20015170
 8018548:	20015178 	.word	0x20015178
 801854c:	20015120 	.word	0x20015120
 8018550:	2001517c 	.word	0x2001517c

08018554 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8018554:	2101      	movs	r1, #1
 8018556:	2200      	movs	r2, #0
 8018558:	b510      	push	{r4, lr}
 801855a:	4c13      	ldr	r4, [pc, #76]	; (80185a8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801855c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8018560:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8018564:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018568:	6004      	str	r4, [r0, #0]
 801856a:	4c10      	ldr	r4, [pc, #64]	; (80185ac <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801856c:	8082      	strh	r2, [r0, #4]
 801856e:	80c2      	strh	r2, [r0, #6]
 8018570:	8102      	strh	r2, [r0, #8]
 8018572:	8142      	strh	r2, [r0, #10]
 8018574:	8182      	strh	r2, [r0, #12]
 8018576:	81c2      	strh	r2, [r0, #14]
 8018578:	8202      	strh	r2, [r0, #16]
 801857a:	8242      	strh	r2, [r0, #18]
 801857c:	61c2      	str	r2, [r0, #28]
 801857e:	8402      	strh	r2, [r0, #32]
 8018580:	8442      	strh	r2, [r0, #34]	; 0x22
 8018582:	6282      	str	r2, [r0, #40]	; 0x28
 8018584:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8018588:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801858a:	8601      	strh	r1, [r0, #48]	; 0x30
 801858c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8018590:	6344      	str	r4, [r0, #52]	; 0x34
 8018592:	8701      	strh	r1, [r0, #56]	; 0x38
 8018594:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8018598:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 801859c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80185a0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80185a4:	bd10      	pop	{r4, pc}
 80185a6:	bf00      	nop
 80185a8:	0802f8ec 	.word	0x0802f8ec
 80185ac:	0802ceec 	.word	0x0802ceec

080185b0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80185b0:	b510      	push	{r4, lr}
 80185b2:	6803      	ldr	r3, [r0, #0]
 80185b4:	460c      	mov	r4, r1
 80185b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185b8:	4798      	blx	r3
 80185ba:	1b03      	subs	r3, r0, r4
 80185bc:	4258      	negs	r0, r3
 80185be:	4158      	adcs	r0, r3
 80185c0:	bd10      	pop	{r4, pc}
	...

080185c4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80185c4:	4b01      	ldr	r3, [pc, #4]	; (80185cc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80185c6:	6019      	str	r1, [r3, #0]
 80185c8:	4770      	bx	lr
 80185ca:	bf00      	nop
 80185cc:	20015128 	.word	0x20015128

080185d0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80185d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d4:	4696      	mov	lr, r2
 80185d6:	b097      	sub	sp, #92	; 0x5c
 80185d8:	4605      	mov	r5, r0
 80185da:	4614      	mov	r4, r2
 80185dc:	460e      	mov	r6, r1
 80185de:	461f      	mov	r7, r3
 80185e0:	f10d 0c1c 	add.w	ip, sp, #28
 80185e4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80185e8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80185ec:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80185f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80185f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185f8:	f8de 3000 	ldr.w	r3, [lr]
 80185fc:	f104 0e14 	add.w	lr, r4, #20
 8018600:	f8cc 3000 	str.w	r3, [ip]
 8018604:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018608:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801860c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018610:	f8de 3000 	ldr.w	r3, [lr]
 8018614:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018618:	f8cc 3000 	str.w	r3, [ip]
 801861c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018620:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018624:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018628:	f8de 3000 	ldr.w	r3, [lr]
 801862c:	4631      	mov	r1, r6
 801862e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018630:	4628      	mov	r0, r5
 8018632:	f8cc 3000 	str.w	r3, [ip]
 8018636:	682b      	ldr	r3, [r5, #0]
 8018638:	9201      	str	r2, [sp, #4]
 801863a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801863c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018640:	9200      	str	r2, [sp, #0]
 8018642:	aa07      	add	r2, sp, #28
 8018644:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018648:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801864c:	463b      	mov	r3, r7
 801864e:	47d8      	blx	fp
 8018650:	46a6      	mov	lr, r4
 8018652:	f10d 0c1c 	add.w	ip, sp, #28
 8018656:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801865a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801865e:	f8de 3000 	ldr.w	r3, [lr]
 8018662:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018666:	343c      	adds	r4, #60	; 0x3c
 8018668:	f8cc 3000 	str.w	r3, [ip]
 801866c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018670:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018678:	f8de 3000 	ldr.w	r3, [lr]
 801867c:	f8cc 3000 	str.w	r3, [ip]
 8018680:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801868a:	6823      	ldr	r3, [r4, #0]
 801868c:	4631      	mov	r1, r6
 801868e:	4628      	mov	r0, r5
 8018690:	f8cc 3000 	str.w	r3, [ip]
 8018694:	682b      	ldr	r3, [r5, #0]
 8018696:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801869a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801869c:	f8cd 8008 	str.w	r8, [sp, #8]
 80186a0:	9201      	str	r2, [sp, #4]
 80186a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80186a4:	9200      	str	r2, [sp, #0]
 80186a6:	aa07      	add	r2, sp, #28
 80186a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80186aa:	463b      	mov	r3, r7
 80186ac:	47a0      	blx	r4
 80186ae:	b017      	add	sp, #92	; 0x5c
 80186b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80186b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186b8:	b08d      	sub	sp, #52	; 0x34
 80186ba:	4688      	mov	r8, r1
 80186bc:	f8d3 c000 	ldr.w	ip, [r3]
 80186c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80186c2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80186c6:	680f      	ldr	r7, [r1, #0]
 80186c8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80186cc:	eba7 070c 	sub.w	r7, r7, ip
 80186d0:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80186d4:	edd3 6a07 	vldr	s13, [r3, #28]
 80186d8:	42bc      	cmp	r4, r7
 80186da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80186dc:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80186e0:	bfa8      	it	ge
 80186e2:	463c      	movge	r4, r7
 80186e4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80186e8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80186ec:	ee07 4a90 	vmov	s15, r4
 80186f0:	eb09 0e0c 	add.w	lr, r9, ip
 80186f4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80186f8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80186fc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018700:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8018704:	4571      	cmp	r1, lr
 8018706:	ee25 4a04 	vmul.f32	s8, s10, s8
 801870a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801870e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018712:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018716:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801871a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801871e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018722:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018726:	ee61 1a87 	vmul.f32	s3, s3, s14
 801872a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801872e:	f340 808c 	ble.w	801884a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8018732:	eba1 060e 	sub.w	r6, r1, lr
 8018736:	fb96 f5f4 	sdiv	r5, r6, r4
 801873a:	ee07 5a10 	vmov	s14, r5
 801873e:	2d00      	cmp	r5, #0
 8018740:	fb04 6615 	mls	r6, r4, r5, r6
 8018744:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018748:	eea7 0a04 	vfma.f32	s0, s14, s8
 801874c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018750:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018754:	dd12      	ble.n	801877c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8018756:	ee70 6a44 	vsub.f32	s13, s0, s8
 801875a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801875e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018762:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801876a:	bf14      	ite	ne
 801876c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018770:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018774:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018778:	ee22 2a07 	vmul.f32	s4, s4, s14
 801877c:	fb05 f204 	mul.w	r2, r5, r4
 8018780:	1abf      	subs	r7, r7, r2
 8018782:	4494      	add	ip, r2
 8018784:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018788:	4411      	add	r1, r2
 801878a:	eb09 020c 	add.w	r2, r9, ip
 801878e:	b209      	sxth	r1, r1
 8018790:	443a      	add	r2, r7
 8018792:	428a      	cmp	r2, r1
 8018794:	bfc4      	itt	gt
 8018796:	eba1 0209 	subgt.w	r2, r1, r9
 801879a:	eba2 070c 	subgt.w	r7, r2, ip
 801879e:	2f00      	cmp	r7, #0
 80187a0:	dd50      	ble.n	8018844 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80187a2:	fb97 f1f4 	sdiv	r1, r7, r4
 80187a6:	fb04 7211 	mls	r2, r4, r1, r7
 80187aa:	b90a      	cbnz	r2, 80187b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80187ac:	3901      	subs	r1, #1
 80187ae:	4622      	mov	r2, r4
 80187b0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80187b4:	6840      	ldr	r0, [r0, #4]
 80187b6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80187ba:	44b6      	add	lr, r6
 80187bc:	f8d0 a000 	ldr.w	sl, [r0]
 80187c0:	2900      	cmp	r1, #0
 80187c2:	bfcc      	ite	gt
 80187c4:	46a1      	movgt	r9, r4
 80187c6:	4691      	movle	r9, r2
 80187c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80187ca:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80187cc:	fb04 e505 	mla	r5, r4, r5, lr
 80187d0:	eef0 6a42 	vmov.f32	s13, s4
 80187d4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80187d8:	9008      	str	r0, [sp, #32]
 80187da:	eeb0 7a61 	vmov.f32	s14, s3
 80187de:	9818      	ldr	r0, [sp, #96]	; 0x60
 80187e0:	695b      	ldr	r3, [r3, #20]
 80187e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187e6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80187ea:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80187ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80187f0:	445b      	add	r3, fp
 80187f2:	9307      	str	r3, [sp, #28]
 80187f4:	ee16 3a90 	vmov	r3, s13
 80187f8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80187fc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018800:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018804:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018808:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801880c:	ee17 7a90 	vmov	r7, s15
 8018810:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018814:	fb97 f7f4 	sdiv	r7, r7, r4
 8018818:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801881c:	ee17 ca90 	vmov	ip, s15
 8018820:	fb9c fcf4 	sdiv	ip, ip, r4
 8018824:	fb0c 3306 	mla	r3, ip, r6, r3
 8018828:	9302      	str	r3, [sp, #8]
 801882a:	ee17 3a10 	vmov	r3, s14
 801882e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8018832:	fb07 3706 	mla	r7, r7, r6, r3
 8018836:	eba9 0306 	sub.w	r3, r9, r6
 801883a:	e9cd 4700 	strd	r4, r7, [sp]
 801883e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8018842:	47a0      	blx	r4
 8018844:	b00d      	add	sp, #52	; 0x34
 8018846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801884a:	2500      	movs	r5, #0
 801884c:	462e      	mov	r6, r5
 801884e:	e799      	b.n	8018784 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018854:	b0db      	sub	sp, #364	; 0x16c
 8018856:	461d      	mov	r5, r3
 8018858:	4614      	mov	r4, r2
 801885a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801885e:	910f      	str	r1, [sp, #60]	; 0x3c
 8018860:	4629      	mov	r1, r5
 8018862:	930a      	str	r3, [sp, #40]	; 0x28
 8018864:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018868:	9009      	str	r0, [sp, #36]	; 0x24
 801886a:	930b      	str	r3, [sp, #44]	; 0x2c
 801886c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018870:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8018874:	9310      	str	r3, [sp, #64]	; 0x40
 8018876:	6803      	ldr	r3, [r0, #0]
 8018878:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801887a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801887e:	47b8      	blx	r7
 8018880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018882:	6058      	str	r0, [r3, #4]
 8018884:	2800      	cmp	r0, #0
 8018886:	f000 83a1 	beq.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801888a:	682b      	ldr	r3, [r5, #0]
 801888c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018890:	ed94 7a02 	vldr	s14, [r4, #8]
 8018894:	9314      	str	r3, [sp, #80]	; 0x50
 8018896:	686b      	ldr	r3, [r5, #4]
 8018898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801889c:	9315      	str	r3, [sp, #84]	; 0x54
 801889e:	4bc1      	ldr	r3, [pc, #772]	; (8018ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80188a0:	7819      	ldrb	r1, [r3, #0]
 80188a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80188a6:	2900      	cmp	r1, #0
 80188a8:	bf16      	itet	ne
 80188aa:	4619      	movne	r1, r3
 80188ac:	4611      	moveq	r1, r2
 80188ae:	4613      	movne	r3, r2
 80188b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b4:	9116      	str	r1, [sp, #88]	; 0x58
 80188b6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80188ba:	f240 8387 	bls.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188be:	ed94 7a07 	vldr	s14, [r4, #28]
 80188c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ca:	f240 837f 	bls.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188ce:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80188d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188da:	f240 8377 	bls.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188de:	6822      	ldr	r2, [r4, #0]
 80188e0:	4bb1      	ldr	r3, [pc, #708]	; (8018ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80188e2:	429a      	cmp	r2, r3
 80188e4:	f2c0 8372 	blt.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188e8:	49b0      	ldr	r1, [pc, #704]	; (8018bac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80188ea:	6963      	ldr	r3, [r4, #20]
 80188ec:	428a      	cmp	r2, r1
 80188ee:	f300 836d 	bgt.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188f2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80188f6:	48ae      	ldr	r0, [pc, #696]	; (8018bb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80188f8:	33ff      	adds	r3, #255	; 0xff
 80188fa:	4283      	cmp	r3, r0
 80188fc:	f200 8366 	bhi.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018902:	4dac      	ldr	r5, [pc, #688]	; (8018bb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018904:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018908:	33ff      	adds	r3, #255	; 0xff
 801890a:	42ab      	cmp	r3, r5
 801890c:	f200 835e 	bhi.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018910:	6862      	ldr	r2, [r4, #4]
 8018912:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8018916:	33ff      	adds	r3, #255	; 0xff
 8018918:	4283      	cmp	r3, r0
 801891a:	f200 8357 	bhi.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801891e:	69a1      	ldr	r1, [r4, #24]
 8018920:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8018924:	33ff      	adds	r3, #255	; 0xff
 8018926:	4283      	cmp	r3, r0
 8018928:	f200 8350 	bhi.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801892c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801892e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8018932:	30ff      	adds	r0, #255	; 0xff
 8018934:	42a8      	cmp	r0, r5
 8018936:	f200 8349 	bhi.w	8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801893a:	428a      	cmp	r2, r1
 801893c:	f280 8110 	bge.w	8018b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018940:	429a      	cmp	r2, r3
 8018942:	f300 8119 	bgt.w	8018b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018946:	4299      	cmp	r1, r3
 8018948:	f280 811d 	bge.w	8018b86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801894c:	2502      	movs	r5, #2
 801894e:	2701      	movs	r7, #1
 8018950:	46a9      	mov	r9, r5
 8018952:	46b8      	mov	r8, r7
 8018954:	f04f 0a00 	mov.w	sl, #0
 8018958:	4621      	mov	r1, r4
 801895a:	a849      	add	r0, sp, #292	; 0x124
 801895c:	f003 fcca 	bl	801c2f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018960:	4622      	mov	r2, r4
 8018962:	4653      	mov	r3, sl
 8018964:	a949      	add	r1, sp, #292	; 0x124
 8018966:	f8cd 9000 	str.w	r9, [sp]
 801896a:	a819      	add	r0, sp, #100	; 0x64
 801896c:	f003 fdf2 	bl	801c554 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018970:	4622      	mov	r2, r4
 8018972:	4653      	mov	r3, sl
 8018974:	a949      	add	r1, sp, #292	; 0x124
 8018976:	f8cd 8000 	str.w	r8, [sp]
 801897a:	a829      	add	r0, sp, #164	; 0xa4
 801897c:	f003 fdea 	bl	801c554 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018980:	4643      	mov	r3, r8
 8018982:	4622      	mov	r2, r4
 8018984:	a949      	add	r1, sp, #292	; 0x124
 8018986:	f8cd 9000 	str.w	r9, [sp]
 801898a:	a839      	add	r0, sp, #228	; 0xe4
 801898c:	f003 fde2 	bl	801c554 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018990:	42af      	cmp	r7, r5
 8018992:	af12      	add	r7, sp, #72	; 0x48
 8018994:	bfb7      	itett	lt
 8018996:	2300      	movlt	r3, #0
 8018998:	2301      	movge	r3, #1
 801899a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801899c:	ac19      	addlt	r4, sp, #100	; 0x64
 801899e:	bfb1      	iteee	lt
 80189a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80189a2:	ad19      	addge	r5, sp, #100	; 0x64
 80189a4:	930e      	strge	r3, [sp, #56]	; 0x38
 80189a6:	ac29      	addge	r4, sp, #164	; 0xa4
 80189a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189ae:	e887 0003 	stmia.w	r7, {r0, r1}
 80189b2:	b928      	cbnz	r0, 80189c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80189b4:	4b80      	ldr	r3, [pc, #512]	; (8018bb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80189b6:	6818      	ldr	r0, [r3, #0]
 80189b8:	6803      	ldr	r3, [r0, #0]
 80189ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189bc:	4798      	blx	r3
 80189be:	6038      	str	r0, [r7, #0]
 80189c0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80189c2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80189c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80189ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80189cc:	930c      	str	r3, [sp, #48]	; 0x30
 80189ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80189d0:	6963      	ldr	r3, [r4, #20]
 80189d2:	440b      	add	r3, r1
 80189d4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80189d8:	4408      	add	r0, r1
 80189da:	b200      	sxth	r0, r0
 80189dc:	4283      	cmp	r3, r0
 80189de:	900d      	str	r0, [sp, #52]	; 0x34
 80189e0:	f280 80dd 	bge.w	8018b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80189e4:	428b      	cmp	r3, r1
 80189e6:	da08      	bge.n	80189fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80189e8:	2a00      	cmp	r2, #0
 80189ea:	dd06      	ble.n	80189fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80189ec:	1acb      	subs	r3, r1, r3
 80189ee:	429a      	cmp	r2, r3
 80189f0:	f2c0 80e4 	blt.w	8018bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f300 80e2 	bgt.w	8018bbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80189fa:	6967      	ldr	r7, [r4, #20]
 80189fc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a02:	443b      	add	r3, r7
 8018a04:	461f      	mov	r7, r3
 8018a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a08:	1bdf      	subs	r7, r3, r7
 8018a0a:	4297      	cmp	r7, r2
 8018a0c:	bfa8      	it	ge
 8018a0e:	4617      	movge	r7, r2
 8018a10:	2f00      	cmp	r7, #0
 8018a12:	f340 8166 	ble.w	8018ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018a16:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018a18:	6829      	ldr	r1, [r5, #0]
 8018a1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a1e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018a22:	4411      	add	r1, r2
 8018a24:	6820      	ldr	r0, [r4, #0]
 8018a26:	4299      	cmp	r1, r3
 8018a28:	dd1a      	ble.n	8018a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a2a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018a2e:	4402      	add	r2, r0
 8018a30:	440b      	add	r3, r1
 8018a32:	b21b      	sxth	r3, r3
 8018a34:	429a      	cmp	r2, r3
 8018a36:	dc13      	bgt.n	8018a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a3a:	a912      	add	r1, sp, #72	; 0x48
 8018a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	9206      	str	r2, [sp, #24]
 8018a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a46:	9500      	str	r5, [sp, #0]
 8018a48:	9205      	str	r2, [sp, #20]
 8018a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a4c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018a50:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018a52:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018a56:	aa49      	add	r2, sp, #292	; 0x124
 8018a58:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018a5c:	4623      	mov	r3, r4
 8018a5e:	47c8      	blx	r9
 8018a60:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018a64:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018a68:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a70:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018a74:	68a1      	ldr	r1, [r4, #8]
 8018a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a7a:	ed94 6a08 	vldr	s12, [r4, #32]
 8018a7e:	edd4 6a07 	vldr	s13, [r4, #28]
 8018a82:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018a86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018a8a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018a8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018a92:	edc4 6a07 	vstr	s13, [r4, #28]
 8018a96:	441a      	add	r2, r3
 8018a98:	6963      	ldr	r3, [r4, #20]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	6022      	str	r2, [r4, #0]
 8018a9e:	6163      	str	r3, [r4, #20]
 8018aa0:	69a3      	ldr	r3, [r4, #24]
 8018aa2:	3b01      	subs	r3, #1
 8018aa4:	61a3      	str	r3, [r4, #24]
 8018aa6:	6923      	ldr	r3, [r4, #16]
 8018aa8:	440b      	add	r3, r1
 8018aaa:	68e1      	ldr	r1, [r4, #12]
 8018aac:	428b      	cmp	r3, r1
 8018aae:	6123      	str	r3, [r4, #16]
 8018ab0:	db15      	blt.n	8018ade <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018ab2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018ab6:	3201      	adds	r2, #1
 8018ab8:	1a5b      	subs	r3, r3, r1
 8018aba:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018abe:	6022      	str	r2, [r4, #0]
 8018ac0:	6123      	str	r3, [r4, #16]
 8018ac2:	edc4 6a07 	vstr	s13, [r4, #28]
 8018ac6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018aca:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018ace:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018ad2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ada:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018ade:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018ae2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018ae6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018aee:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018af2:	68a9      	ldr	r1, [r5, #8]
 8018af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018af8:	ed95 6a08 	vldr	s12, [r5, #32]
 8018afc:	edd5 6a07 	vldr	s13, [r5, #28]
 8018b00:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b04:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b08:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b10:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b14:	441a      	add	r2, r3
 8018b16:	696b      	ldr	r3, [r5, #20]
 8018b18:	3301      	adds	r3, #1
 8018b1a:	602a      	str	r2, [r5, #0]
 8018b1c:	616b      	str	r3, [r5, #20]
 8018b1e:	69ab      	ldr	r3, [r5, #24]
 8018b20:	3b01      	subs	r3, #1
 8018b22:	61ab      	str	r3, [r5, #24]
 8018b24:	692b      	ldr	r3, [r5, #16]
 8018b26:	440b      	add	r3, r1
 8018b28:	68e9      	ldr	r1, [r5, #12]
 8018b2a:	428b      	cmp	r3, r1
 8018b2c:	612b      	str	r3, [r5, #16]
 8018b2e:	db15      	blt.n	8018b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018b30:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018b34:	3201      	adds	r2, #1
 8018b36:	1a5b      	subs	r3, r3, r1
 8018b38:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018b3c:	602a      	str	r2, [r5, #0]
 8018b3e:	612b      	str	r3, [r5, #16]
 8018b40:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b44:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018b48:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018b4c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b50:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b58:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b5c:	3f01      	subs	r7, #1
 8018b5e:	e757      	b.n	8018a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018b60:	4299      	cmp	r1, r3
 8018b62:	dc13      	bgt.n	8018b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018b64:	429a      	cmp	r2, r3
 8018b66:	da14      	bge.n	8018b92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018b68:	2502      	movs	r5, #2
 8018b6a:	2703      	movs	r7, #3
 8018b6c:	f04f 0800 	mov.w	r8, #0
 8018b70:	46a9      	mov	r9, r5
 8018b72:	f04f 0a01 	mov.w	sl, #1
 8018b76:	e6ef      	b.n	8018958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018b78:	2501      	movs	r5, #1
 8018b7a:	2700      	movs	r7, #0
 8018b7c:	46a9      	mov	r9, r5
 8018b7e:	46b8      	mov	r8, r7
 8018b80:	f04f 0a02 	mov.w	sl, #2
 8018b84:	e6e8      	b.n	8018958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018b86:	2501      	movs	r5, #1
 8018b88:	2702      	movs	r7, #2
 8018b8a:	e6e1      	b.n	8018950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018b8c:	2500      	movs	r5, #0
 8018b8e:	2701      	movs	r7, #1
 8018b90:	e7f4      	b.n	8018b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018b92:	2702      	movs	r7, #2
 8018b94:	2503      	movs	r5, #3
 8018b96:	f04f 0900 	mov.w	r9, #0
 8018b9a:	46b8      	mov	r8, r7
 8018b9c:	e7e9      	b.n	8018b72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018b9e:	4613      	mov	r3, r2
 8018ba0:	e728      	b.n	80189f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018ba2:	bf00      	nop
 8018ba4:	20015118 	.word	0x20015118
 8018ba8:	fffd8f01 	.word	0xfffd8f01
 8018bac:	00027100 	.word	0x00027100
 8018bb0:	0004e1ff 	.word	0x0004e1ff
 8018bb4:	0004e1fe 	.word	0x0004e1fe
 8018bb8:	20015120 	.word	0x20015120
 8018bbc:	4613      	mov	r3, r2
 8018bbe:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018bc0:	469e      	mov	lr, r3
 8018bc2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8018bc4:	469c      	mov	ip, r3
 8018bc6:	9111      	str	r1, [sp, #68]	; 0x44
 8018bc8:	f04f 0900 	mov.w	r9, #0
 8018bcc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018bd0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018bd4:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018bd8:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018bdc:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018be0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018be4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018be8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018bec:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018bf0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8018bf4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018bf8:	f1bc 0f00 	cmp.w	ip, #0
 8018bfc:	d147      	bne.n	8018c8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018bfe:	eb03 0c07 	add.w	ip, r3, r7
 8018c02:	1ad7      	subs	r7, r2, r3
 8018c04:	f1b9 0f00 	cmp.w	r9, #0
 8018c08:	d009      	beq.n	8018c1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018c0a:	9029      	str	r0, [sp, #164]	; 0xa4
 8018c0c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018c10:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8018c14:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018c18:	912d      	str	r1, [sp, #180]	; 0xb4
 8018c1a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018c1e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018c20:	f04f 0800 	mov.w	r8, #0
 8018c24:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018c28:	9111      	str	r1, [sp, #68]	; 0x44
 8018c2a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018c2e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018c32:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018c36:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018c3a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018c3e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018c42:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018c46:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018c4a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018c4e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018c52:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018c56:	f1be 0f00 	cmp.w	lr, #0
 8018c5a:	d031      	beq.n	8018cc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018c5c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018c5e:	4450      	add	r0, sl
 8018c60:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018c64:	4431      	add	r1, r6
 8018c66:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018c6a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018c6e:	4549      	cmp	r1, r9
 8018c70:	db08      	blt.n	8018c84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018c72:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018c76:	3001      	adds	r0, #1
 8018c78:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018c7c:	eba1 0109 	sub.w	r1, r1, r9
 8018c80:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018c84:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018c88:	f04f 0801 	mov.w	r8, #1
 8018c8c:	e7e3      	b.n	8018c56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018c8e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018c90:	4450      	add	r0, sl
 8018c92:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018c96:	4431      	add	r1, r6
 8018c98:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018c9c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018ca0:	4541      	cmp	r1, r8
 8018ca2:	db08      	blt.n	8018cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018ca4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018ca8:	3001      	adds	r0, #1
 8018caa:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018cae:	eba1 0108 	sub.w	r1, r1, r8
 8018cb2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018cb6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018cba:	f04f 0901 	mov.w	r9, #1
 8018cbe:	e79b      	b.n	8018bf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018cc0:	449c      	add	ip, r3
 8018cc2:	1aff      	subs	r7, r7, r3
 8018cc4:	f1b8 0f00 	cmp.w	r8, #0
 8018cc8:	d009      	beq.n	8018cde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018cca:	9019      	str	r0, [sp, #100]	; 0x64
 8018ccc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018cd0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018cd4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018cd8:	911d      	str	r1, [sp, #116]	; 0x74
 8018cda:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018cde:	1ad2      	subs	r2, r2, r3
 8018ce0:	e68b      	b.n	80189fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ce4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	f000 80d1 	beq.w	8018e8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018cec:	ad19      	add	r5, sp, #100	; 0x64
 8018cee:	ac39      	add	r4, sp, #228	; 0xe4
 8018cf0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018cf2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8018cfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018cfe:	6963      	ldr	r3, [r4, #20]
 8018d00:	440b      	add	r3, r1
 8018d02:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018d06:	4408      	add	r0, r1
 8018d08:	b200      	sxth	r0, r0
 8018d0a:	4283      	cmp	r3, r0
 8018d0c:	900d      	str	r0, [sp, #52]	; 0x34
 8018d0e:	f280 80c1 	bge.w	8018e94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018d12:	428b      	cmp	r3, r1
 8018d14:	da08      	bge.n	8018d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d16:	2a00      	cmp	r2, #0
 8018d18:	dd06      	ble.n	8018d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d1a:	1acb      	subs	r3, r1, r3
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	f2c0 80bb 	blt.w	8018e98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	f300 80b9 	bgt.w	8018e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018d28:	6967      	ldr	r7, [r4, #20]
 8018d2a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d30:	443b      	add	r3, r7
 8018d32:	461f      	mov	r7, r3
 8018d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d36:	1bdf      	subs	r7, r3, r7
 8018d38:	4297      	cmp	r7, r2
 8018d3a:	bfa8      	it	ge
 8018d3c:	4617      	movge	r7, r2
 8018d3e:	2f00      	cmp	r7, #0
 8018d40:	f340 813c 	ble.w	8018fbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018d44:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018d46:	6829      	ldr	r1, [r5, #0]
 8018d48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d4c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018d50:	4411      	add	r1, r2
 8018d52:	6820      	ldr	r0, [r4, #0]
 8018d54:	4299      	cmp	r1, r3
 8018d56:	dd1a      	ble.n	8018d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d58:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018d5c:	4402      	add	r2, r0
 8018d5e:	440b      	add	r3, r1
 8018d60:	b21b      	sxth	r3, r3
 8018d62:	429a      	cmp	r2, r3
 8018d64:	dc13      	bgt.n	8018d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d68:	a912      	add	r1, sp, #72	; 0x48
 8018d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	9206      	str	r2, [sp, #24]
 8018d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d74:	9500      	str	r5, [sp, #0]
 8018d76:	9205      	str	r2, [sp, #20]
 8018d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d7a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018d7e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018d80:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018d84:	aa49      	add	r2, sp, #292	; 0x124
 8018d86:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018d8a:	4623      	mov	r3, r4
 8018d8c:	47c8      	blx	r9
 8018d8e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018d92:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018d96:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d9e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018da2:	68a1      	ldr	r1, [r4, #8]
 8018da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018da8:	ed94 6a08 	vldr	s12, [r4, #32]
 8018dac:	edd4 6a07 	vldr	s13, [r4, #28]
 8018db0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018db4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018db8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018dbc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018dc0:	edc4 6a07 	vstr	s13, [r4, #28]
 8018dc4:	441a      	add	r2, r3
 8018dc6:	6963      	ldr	r3, [r4, #20]
 8018dc8:	3301      	adds	r3, #1
 8018dca:	6022      	str	r2, [r4, #0]
 8018dcc:	6163      	str	r3, [r4, #20]
 8018dce:	69a3      	ldr	r3, [r4, #24]
 8018dd0:	3b01      	subs	r3, #1
 8018dd2:	61a3      	str	r3, [r4, #24]
 8018dd4:	6923      	ldr	r3, [r4, #16]
 8018dd6:	440b      	add	r3, r1
 8018dd8:	68e1      	ldr	r1, [r4, #12]
 8018dda:	428b      	cmp	r3, r1
 8018ddc:	6123      	str	r3, [r4, #16]
 8018dde:	db15      	blt.n	8018e0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018de0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018de4:	3201      	adds	r2, #1
 8018de6:	1a5b      	subs	r3, r3, r1
 8018de8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018dec:	6022      	str	r2, [r4, #0]
 8018dee:	6123      	str	r3, [r4, #16]
 8018df0:	edc4 6a07 	vstr	s13, [r4, #28]
 8018df4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018df8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018dfc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018e00:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e08:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018e0c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018e10:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018e14:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e1c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018e20:	68a9      	ldr	r1, [r5, #8]
 8018e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e26:	ed95 6a08 	vldr	s12, [r5, #32]
 8018e2a:	edd5 6a07 	vldr	s13, [r5, #28]
 8018e2e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018e32:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018e36:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018e3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018e3e:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e42:	441a      	add	r2, r3
 8018e44:	696b      	ldr	r3, [r5, #20]
 8018e46:	3301      	adds	r3, #1
 8018e48:	602a      	str	r2, [r5, #0]
 8018e4a:	616b      	str	r3, [r5, #20]
 8018e4c:	69ab      	ldr	r3, [r5, #24]
 8018e4e:	3b01      	subs	r3, #1
 8018e50:	61ab      	str	r3, [r5, #24]
 8018e52:	692b      	ldr	r3, [r5, #16]
 8018e54:	440b      	add	r3, r1
 8018e56:	68e9      	ldr	r1, [r5, #12]
 8018e58:	428b      	cmp	r3, r1
 8018e5a:	612b      	str	r3, [r5, #16]
 8018e5c:	db15      	blt.n	8018e8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018e5e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018e62:	3201      	adds	r2, #1
 8018e64:	1a5b      	subs	r3, r3, r1
 8018e66:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e6a:	602a      	str	r2, [r5, #0]
 8018e6c:	612b      	str	r3, [r5, #16]
 8018e6e:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e72:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018e76:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e7a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018e7e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e86:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018e8a:	3f01      	subs	r7, #1
 8018e8c:	e757      	b.n	8018d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018e8e:	ad39      	add	r5, sp, #228	; 0xe4
 8018e90:	ac19      	add	r4, sp, #100	; 0x64
 8018e92:	e72d      	b.n	8018cf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018e94:	4613      	mov	r3, r2
 8018e96:	e744      	b.n	8018d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018e98:	4613      	mov	r3, r2
 8018e9a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018e9c:	469e      	mov	lr, r3
 8018e9e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018ea2:	461f      	mov	r7, r3
 8018ea4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018ea8:	f04f 0900 	mov.w	r9, #0
 8018eac:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018eb0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8018eb4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018eb8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018ebc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018ec0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8018ec2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8018ec6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018eca:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018ece:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8018ed2:	960e      	str	r6, [sp, #56]	; 0x38
 8018ed4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018ed8:	2f00      	cmp	r7, #0
 8018eda:	d146      	bne.n	8018f6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018edc:	449c      	add	ip, r3
 8018ede:	1ad7      	subs	r7, r2, r3
 8018ee0:	f1b9 0f00 	cmp.w	r9, #0
 8018ee4:	d009      	beq.n	8018efa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018ee6:	9039      	str	r0, [sp, #228]	; 0xe4
 8018ee8:	913d      	str	r1, [sp, #244]	; 0xf4
 8018eea:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018eee:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018ef2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8018ef6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018efa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018efc:	f04f 0800 	mov.w	r8, #0
 8018f00:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018f04:	910e      	str	r1, [sp, #56]	; 0x38
 8018f06:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018f0a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018f0e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018f12:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018f16:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018f1a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018f1e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018f22:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018f26:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018f2a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018f2e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018f32:	f1be 0f00 	cmp.w	lr, #0
 8018f36:	d030      	beq.n	8018f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018f38:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f3a:	4450      	add	r0, sl
 8018f3c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018f40:	4431      	add	r1, r6
 8018f42:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018f46:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018f4a:	4549      	cmp	r1, r9
 8018f4c:	db08      	blt.n	8018f60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018f4e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018f52:	3001      	adds	r0, #1
 8018f54:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018f58:	eba1 0109 	sub.w	r1, r1, r9
 8018f5c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018f60:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018f64:	f04f 0801 	mov.w	r8, #1
 8018f68:	e7e3      	b.n	8018f32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018f6a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f6c:	4450      	add	r0, sl
 8018f6e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018f72:	4431      	add	r1, r6
 8018f74:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018f78:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018f7c:	4541      	cmp	r1, r8
 8018f7e:	db08      	blt.n	8018f92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018f80:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018f84:	3001      	adds	r0, #1
 8018f86:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018f8a:	eba1 0108 	sub.w	r1, r1, r8
 8018f8e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018f92:	3f01      	subs	r7, #1
 8018f94:	f04f 0901 	mov.w	r9, #1
 8018f98:	e79e      	b.n	8018ed8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018f9a:	449c      	add	ip, r3
 8018f9c:	1aff      	subs	r7, r7, r3
 8018f9e:	f1b8 0f00 	cmp.w	r8, #0
 8018fa2:	d009      	beq.n	8018fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018fa4:	9019      	str	r0, [sp, #100]	; 0x64
 8018fa6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018faa:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018fae:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018fb2:	911d      	str	r1, [sp, #116]	; 0x74
 8018fb4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018fb8:	1ad2      	subs	r2, r2, r3
 8018fba:	e6b5      	b.n	8018d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	b923      	cbnz	r3, 8018fcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fc2:	4b04      	ldr	r3, [pc, #16]	; (8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018fc4:	6818      	ldr	r0, [r3, #0]
 8018fc6:	6803      	ldr	r3, [r0, #0]
 8018fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fca:	4798      	blx	r3
 8018fcc:	b05b      	add	sp, #364	; 0x16c
 8018fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd2:	bf00      	nop
 8018fd4:	20015120 	.word	0x20015120

08018fd8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8018fd8:	b570      	push	{r4, r5, r6, lr}
 8018fda:	4604      	mov	r4, r0
 8018fdc:	2500      	movs	r5, #0
 8018fde:	9805      	ldr	r0, [sp, #20]
 8018fe0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8018fe4:	6061      	str	r1, [r4, #4]
 8018fe6:	8263      	strh	r3, [r4, #18]
 8018fe8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8018fec:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018ff0:	8025      	strh	r5, [r4, #0]
 8018ff2:	7221      	strb	r1, [r4, #8]
 8018ff4:	7266      	strb	r6, [r4, #9]
 8018ff6:	60e0      	str	r0, [r4, #12]
 8018ff8:	8222      	strh	r2, [r4, #16]
 8018ffa:	82a3      	strh	r3, [r4, #20]
 8018ffc:	82e5      	strh	r5, [r4, #22]
 8018ffe:	8325      	strh	r5, [r4, #24]
 8019000:	8365      	strh	r5, [r4, #26]
 8019002:	83a5      	strh	r5, [r4, #28]
 8019004:	83e5      	strh	r5, [r4, #30]
 8019006:	8425      	strh	r5, [r4, #32]
 8019008:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801900c:	b32e      	cbz	r6, 801905a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801900e:	6803      	ldr	r3, [r0, #0]
 8019010:	695b      	ldr	r3, [r3, #20]
 8019012:	4798      	blx	r3
 8019014:	4606      	mov	r6, r0
 8019016:	b300      	cbz	r0, 801905a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019018:	68e0      	ldr	r0, [r4, #12]
 801901a:	4631      	mov	r1, r6
 801901c:	6803      	ldr	r3, [r0, #0]
 801901e:	68db      	ldr	r3, [r3, #12]
 8019020:	4798      	blx	r3
 8019022:	4605      	mov	r5, r0
 8019024:	b1c8      	cbz	r0, 801905a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019026:	7b43      	ldrb	r3, [r0, #13]
 8019028:	7a82      	ldrb	r2, [r0, #10]
 801902a:	005b      	lsls	r3, r3, #1
 801902c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019030:	4313      	orrs	r3, r2
 8019032:	8423      	strh	r3, [r4, #32]
 8019034:	7a63      	ldrb	r3, [r4, #9]
 8019036:	2b06      	cmp	r3, #6
 8019038:	d10f      	bne.n	801905a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801903a:	68e0      	ldr	r0, [r4, #12]
 801903c:	462a      	mov	r2, r5
 801903e:	4631      	mov	r1, r6
 8019040:	6803      	ldr	r3, [r0, #0]
 8019042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019044:	4798      	blx	r3
 8019046:	7b6b      	ldrb	r3, [r5, #13]
 8019048:	005b      	lsls	r3, r3, #1
 801904a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801904e:	7aab      	ldrb	r3, [r5, #10]
 8019050:	4313      	orrs	r3, r2
 8019052:	4418      	add	r0, r3
 8019054:	8c23      	ldrh	r3, [r4, #32]
 8019056:	4418      	add	r0, r3
 8019058:	8420      	strh	r0, [r4, #32]
 801905a:	4620      	mov	r0, r4
 801905c:	bd70      	pop	{r4, r5, r6, pc}

0801905e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801905e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019062:	2400      	movs	r4, #0
 8019064:	b085      	sub	sp, #20
 8019066:	4681      	mov	r9, r0
 8019068:	4688      	mov	r8, r1
 801906a:	4692      	mov	sl, r2
 801906c:	469b      	mov	fp, r3
 801906e:	4627      	mov	r7, r4
 8019070:	4625      	mov	r5, r4
 8019072:	4626      	mov	r6, r4
 8019074:	4554      	cmp	r4, sl
 8019076:	da2a      	bge.n	80190ce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019078:	2300      	movs	r3, #0
 801907a:	9303      	str	r3, [sp, #12]
 801907c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019080:	429d      	cmp	r5, r3
 8019082:	d004      	beq.n	801908e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019084:	f242 030b 	movw	r3, #8203	; 0x200b
 8019088:	429d      	cmp	r5, r3
 801908a:	bf18      	it	ne
 801908c:	462f      	movne	r7, r5
 801908e:	ab03      	add	r3, sp, #12
 8019090:	4642      	mov	r2, r8
 8019092:	4659      	mov	r1, fp
 8019094:	4648      	mov	r0, r9
 8019096:	f002 ff43 	bl	801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801909a:	4605      	mov	r5, r0
 801909c:	b1b8      	cbz	r0, 80190ce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801909e:	280a      	cmp	r0, #10
 80190a0:	d015      	beq.n	80190ce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80190a2:	9a03      	ldr	r2, [sp, #12]
 80190a4:	b18a      	cbz	r2, 80190ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80190a6:	7b50      	ldrb	r0, [r2, #13]
 80190a8:	4639      	mov	r1, r7
 80190aa:	7a93      	ldrb	r3, [r2, #10]
 80190ac:	0040      	lsls	r0, r0, #1
 80190ae:	8895      	ldrh	r5, [r2, #4]
 80190b0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80190b4:	4303      	orrs	r3, r0
 80190b6:	4640      	mov	r0, r8
 80190b8:	9301      	str	r3, [sp, #4]
 80190ba:	f8d8 3000 	ldr.w	r3, [r8]
 80190be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190c0:	4798      	blx	r3
 80190c2:	9b01      	ldr	r3, [sp, #4]
 80190c4:	4418      	add	r0, r3
 80190c6:	4406      	add	r6, r0
 80190c8:	b2b6      	uxth	r6, r6
 80190ca:	3401      	adds	r4, #1
 80190cc:	e7d2      	b.n	8019074 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80190ce:	4630      	mov	r0, r6
 80190d0:	b005      	add	sp, #20
 80190d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80190d6:	2a02      	cmp	r2, #2
 80190d8:	b530      	push	{r4, r5, lr}
 80190da:	d011      	beq.n	8019100 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80190dc:	2a03      	cmp	r2, #3
 80190de:	d01c      	beq.n	801911a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80190e0:	2a01      	cmp	r2, #1
 80190e2:	d10c      	bne.n	80190fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80190e4:	888b      	ldrh	r3, [r1, #4]
 80190e6:	8801      	ldrh	r1, [r0, #0]
 80190e8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80190ec:	1a5b      	subs	r3, r3, r1
 80190ee:	8844      	ldrh	r4, [r0, #2]
 80190f0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80190f4:	1a9b      	subs	r3, r3, r2
 80190f6:	8004      	strh	r4, [r0, #0]
 80190f8:	8081      	strh	r1, [r0, #4]
 80190fa:	8043      	strh	r3, [r0, #2]
 80190fc:	80c2      	strh	r2, [r0, #6]
 80190fe:	bd30      	pop	{r4, r5, pc}
 8019100:	88cb      	ldrh	r3, [r1, #6]
 8019102:	8842      	ldrh	r2, [r0, #2]
 8019104:	1a9b      	subs	r3, r3, r2
 8019106:	88c2      	ldrh	r2, [r0, #6]
 8019108:	1a9b      	subs	r3, r3, r2
 801910a:	888a      	ldrh	r2, [r1, #4]
 801910c:	8801      	ldrh	r1, [r0, #0]
 801910e:	8043      	strh	r3, [r0, #2]
 8019110:	1a52      	subs	r2, r2, r1
 8019112:	8881      	ldrh	r1, [r0, #4]
 8019114:	1a52      	subs	r2, r2, r1
 8019116:	8002      	strh	r2, [r0, #0]
 8019118:	e7f1      	b.n	80190fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801911a:	88cb      	ldrh	r3, [r1, #6]
 801911c:	8841      	ldrh	r1, [r0, #2]
 801911e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019122:	1a5b      	subs	r3, r3, r1
 8019124:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019128:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801912c:	1a9b      	subs	r3, r3, r2
 801912e:	8045      	strh	r5, [r0, #2]
 8019130:	8082      	strh	r2, [r0, #4]
 8019132:	8003      	strh	r3, [r0, #0]
 8019134:	80c4      	strh	r4, [r0, #6]
 8019136:	e7e2      	b.n	80190fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801913c:	b09f      	sub	sp, #124	; 0x7c
 801913e:	9116      	str	r1, [sp, #88]	; 0x58
 8019140:	9317      	str	r3, [sp, #92]	; 0x5c
 8019142:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019144:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019146:	8809      	ldrh	r1, [r1, #0]
 8019148:	889b      	ldrh	r3, [r3, #4]
 801914a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801914e:	440b      	add	r3, r1
 8019150:	9212      	str	r2, [sp, #72]	; 0x48
 8019152:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019156:	b21b      	sxth	r3, r3
 8019158:	9011      	str	r0, [sp, #68]	; 0x44
 801915a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801915e:	9310      	str	r3, [sp, #64]	; 0x40
 8019160:	f8d8 3000 	ldr.w	r3, [r8]
 8019164:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8019168:	7b19      	ldrb	r1, [r3, #12]
 801916a:	7adb      	ldrb	r3, [r3, #11]
 801916c:	9114      	str	r1, [sp, #80]	; 0x50
 801916e:	9315      	str	r3, [sp, #84]	; 0x54
 8019170:	2a00      	cmp	r2, #0
 8019172:	d06a      	beq.n	801924a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019174:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019178:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801917a:	2b06      	cmp	r3, #6
 801917c:	bf14      	ite	ne
 801917e:	2301      	movne	r3, #1
 8019180:	2302      	moveq	r3, #2
 8019182:	4413      	add	r3, r2
 8019184:	f04f 0900 	mov.w	r9, #0
 8019188:	930f      	str	r3, [sp, #60]	; 0x3c
 801918a:	464c      	mov	r4, r9
 801918c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019190:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019194:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019198:	4293      	cmp	r3, r2
 801919a:	f280 808f 	bge.w	80192bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801919e:	2300      	movs	r3, #0
 80191a0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80191a4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80191a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80191ac:	429c      	cmp	r4, r3
 80191ae:	d006      	beq.n	80191be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80191b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191b2:	f242 020b 	movw	r2, #8203	; 0x200b
 80191b6:	4294      	cmp	r4, r2
 80191b8:	bf18      	it	ne
 80191ba:	4623      	movne	r3, r4
 80191bc:	930d      	str	r3, [sp, #52]	; 0x34
 80191be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191c0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80191c2:	f8d8 2000 	ldr.w	r2, [r8]
 80191c6:	428b      	cmp	r3, r1
 80191c8:	db41      	blt.n	801924e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80191ca:	6813      	ldr	r3, [r2, #0]
 80191cc:	4610      	mov	r0, r2
 80191ce:	695b      	ldr	r3, [r3, #20]
 80191d0:	4798      	blx	r3
 80191d2:	4604      	mov	r4, r0
 80191d4:	f8d8 0000 	ldr.w	r0, [r8]
 80191d8:	aa1d      	add	r2, sp, #116	; 0x74
 80191da:	4621      	mov	r1, r4
 80191dc:	6803      	ldr	r3, [r0, #0]
 80191de:	689d      	ldr	r5, [r3, #8]
 80191e0:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80191e4:	47a8      	blx	r5
 80191e6:	901c      	str	r0, [sp, #112]	; 0x70
 80191e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80191ec:	429c      	cmp	r4, r3
 80191ee:	f000 80ec 	beq.w	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80191f2:	f242 030b 	movw	r3, #8203	; 0x200b
 80191f6:	429c      	cmp	r4, r3
 80191f8:	f000 80e7 	beq.w	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80191fc:	2c00      	cmp	r4, #0
 80191fe:	f000 80f9 	beq.w	80193f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019202:	2c0a      	cmp	r4, #10
 8019204:	d060      	beq.n	80192c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019206:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019208:	b36a      	cbz	r2, 8019266 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801920a:	8894      	ldrh	r4, [r2, #4]
 801920c:	f1bb 0f00 	cmp.w	fp, #0
 8019210:	d03b      	beq.n	801928a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019212:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019216:	f1bb 0f01 	cmp.w	fp, #1
 801921a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801921e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019222:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019226:	ea49 0903 	orr.w	r9, r9, r3
 801922a:	d134      	bne.n	8019296 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801922c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801922e:	eba6 0609 	sub.w	r6, r6, r9
 8019232:	2b00      	cmp	r3, #0
 8019234:	d14f      	bne.n	80192d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019236:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019238:	eb09 0306 	add.w	r3, r9, r6
 801923c:	4413      	add	r3, r2
 801923e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019240:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019244:	4293      	cmp	r3, r2
 8019246:	da51      	bge.n	80192ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019248:	e038      	b.n	80192bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801924a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801924c:	e79a      	b.n	8019184 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801924e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019252:	4659      	mov	r1, fp
 8019254:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019256:	9301      	str	r3, [sp, #4]
 8019258:	ab1d      	add	r3, sp, #116	; 0x74
 801925a:	9300      	str	r3, [sp, #0]
 801925c:	ab1c      	add	r3, sp, #112	; 0x70
 801925e:	f002 fea8 	bl	801bfb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019262:	4604      	mov	r4, r0
 8019264:	e7c0      	b.n	80191e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019266:	f8d8 0000 	ldr.w	r0, [r8]
 801926a:	6803      	ldr	r3, [r0, #0]
 801926c:	691b      	ldr	r3, [r3, #16]
 801926e:	4798      	blx	r3
 8019270:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019274:	4298      	cmp	r0, r3
 8019276:	f000 80a8 	beq.w	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801927a:	f242 030b 	movw	r3, #8203	; 0x200b
 801927e:	4298      	cmp	r0, r3
 8019280:	f000 80a3 	beq.w	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019284:	f1bb 0f00 	cmp.w	fp, #0
 8019288:	d100      	bne.n	801928c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801928a:	444e      	add	r6, r9
 801928c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801928e:	2a00      	cmp	r2, #0
 8019290:	d1bf      	bne.n	8019212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019292:	4691      	mov	r9, r2
 8019294:	e099      	b.n	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019298:	2b00      	cmp	r3, #0
 801929a:	f000 80ad 	beq.w	80193f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801929e:	f1bb 0f00 	cmp.w	fp, #0
 80192a2:	d118      	bne.n	80192d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80192a4:	f8d8 0000 	ldr.w	r0, [r8]
 80192a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192aa:	6803      	ldr	r3, [r0, #0]
 80192ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192ae:	4798      	blx	r3
 80192b0:	4406      	add	r6, r0
 80192b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192b6:	1af3      	subs	r3, r6, r3
 80192b8:	4293      	cmp	r3, r2
 80192ba:	dd17      	ble.n	80192ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80192bc:	2c00      	cmp	r4, #0
 80192be:	f000 8099 	beq.w	80193f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80192c2:	2c0a      	cmp	r4, #10
 80192c4:	f040 8087 	bne.w	80193d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 80192c8:	240a      	movs	r4, #10
 80192ca:	fab4 f084 	clz	r0, r4
 80192ce:	0940      	lsrs	r0, r0, #5
 80192d0:	b01f      	add	sp, #124	; 0x7c
 80192d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192d6:	f8d8 0000 	ldr.w	r0, [r8]
 80192da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192dc:	6803      	ldr	r3, [r0, #0]
 80192de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192e0:	4798      	blx	r3
 80192e2:	f1bb 0f01 	cmp.w	fp, #1
 80192e6:	eba6 0600 	sub.w	r6, r6, r0
 80192ea:	d0a4      	beq.n	8019236 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80192ec:	981c      	ldr	r0, [sp, #112]	; 0x70
 80192ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80192f0:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80192f4:	f9b3 7000 	ldrsh.w	r7, [r3]
 80192f8:	7b43      	ldrb	r3, [r0, #13]
 80192fa:	4431      	add	r1, r6
 80192fc:	015b      	lsls	r3, r3, #5
 80192fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019302:	7983      	ldrb	r3, [r0, #6]
 8019304:	4313      	orrs	r3, r2
 8019306:	440b      	add	r3, r1
 8019308:	42bb      	cmp	r3, r7
 801930a:	db5e      	blt.n	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801930c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801930e:	4299      	cmp	r1, r3
 8019310:	da5b      	bge.n	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019312:	f8d8 0000 	ldr.w	r0, [r8]
 8019316:	42b7      	cmp	r7, r6
 8019318:	6803      	ldr	r3, [r0, #0]
 801931a:	bfcc      	ite	gt
 801931c:	1bbf      	subgt	r7, r7, r6
 801931e:	2700      	movle	r7, #0
 8019320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019322:	bfc8      	it	gt
 8019324:	b2bf      	uxthgt	r7, r7
 8019326:	4798      	blx	r3
 8019328:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801932a:	7b5a      	ldrb	r2, [r3, #13]
 801932c:	00d1      	lsls	r1, r2, #3
 801932e:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8019332:	7a19      	ldrb	r1, [r3, #8]
 8019334:	4329      	orrs	r1, r5
 8019336:	0655      	lsls	r5, r2, #25
 8019338:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801933a:	bf48      	it	mi
 801933c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019340:	4405      	add	r5, r0
 8019342:	bf48      	it	mi
 8019344:	b209      	sxthmi	r1, r1
 8019346:	1a6d      	subs	r5, r5, r1
 8019348:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801934a:	b2ad      	uxth	r5, r5
 801934c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019350:	fa0f fa85 	sxth.w	sl, r5
 8019354:	4551      	cmp	r1, sl
 8019356:	dd3c      	ble.n	80193d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8019358:	0112      	lsls	r2, r2, #4
 801935a:	79d8      	ldrb	r0, [r3, #7]
 801935c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019360:	4302      	orrs	r2, r0
 8019362:	4492      	add	sl, r2
 8019364:	4551      	cmp	r1, sl
 8019366:	dc30      	bgt.n	80193ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019368:	1b4d      	subs	r5, r1, r5
 801936a:	468a      	mov	sl, r1
 801936c:	b22d      	sxth	r5, r5
 801936e:	9319      	str	r3, [sp, #100]	; 0x64
 8019370:	b2ad      	uxth	r5, r5
 8019372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019374:	f8d8 0000 	ldr.w	r0, [r8]
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	6801      	ldr	r1, [r0, #0]
 801937c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801937e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019380:	9313      	str	r3, [sp, #76]	; 0x4c
 8019382:	9218      	str	r2, [sp, #96]	; 0x60
 8019384:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019386:	4788      	blx	r1
 8019388:	f898 1006 	ldrb.w	r1, [r8, #6]
 801938c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801938e:	910b      	str	r1, [sp, #44]	; 0x2c
 8019390:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019394:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019396:	910a      	str	r1, [sp, #40]	; 0x28
 8019398:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801939c:	9109      	str	r1, [sp, #36]	; 0x24
 801939e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80193a2:	9305      	str	r3, [sp, #20]
 80193a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80193a6:	9206      	str	r2, [sp, #24]
 80193a8:	9304      	str	r3, [sp, #16]
 80193aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80193ac:	f8cd a004 	str.w	sl, [sp, #4]
 80193b0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80193b4:	4437      	add	r7, r6
 80193b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80193b8:	b23f      	sxth	r7, r7
 80193ba:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80193be:	9700      	str	r7, [sp, #0]
 80193c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80193c2:	681a      	ldr	r2, [r3, #0]
 80193c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80193c6:	685b      	ldr	r3, [r3, #4]
 80193c8:	47a8      	blx	r5
 80193ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193cc:	3301      	adds	r3, #1
 80193ce:	930e      	str	r3, [sp, #56]	; 0x38
 80193d0:	e6e0      	b.n	8019194 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80193d2:	2500      	movs	r5, #0
 80193d4:	e7cb      	b.n	801936e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 80193d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193d8:	3501      	adds	r5, #1
 80193da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80193dc:	429d      	cmp	r5, r3
 80193de:	f6bf af74 	bge.w	80192ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80193e2:	4659      	mov	r1, fp
 80193e4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80193e6:	f7ea fcb9 	bl	8003d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80193ea:	4604      	mov	r4, r0
 80193ec:	b110      	cbz	r0, 80193f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80193ee:	280a      	cmp	r0, #10
 80193f0:	d1f2      	bne.n	80193d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 80193f2:	e769      	b.n	80192c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80193f4:	2400      	movs	r4, #0
 80193f6:	e768      	b.n	80192ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80193f8:	f1bb 0f00 	cmp.w	fp, #0
 80193fc:	f43f af59 	beq.w	80192b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8019400:	e774      	b.n	80192ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08019402 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019402:	b530      	push	{r4, r5, lr}
 8019404:	8ac4      	ldrh	r4, [r0, #22]
 8019406:	8b45      	ldrh	r5, [r0, #26]
 8019408:	8343      	strh	r3, [r0, #26]
 801940a:	442c      	add	r4, r5
 801940c:	1ae4      	subs	r4, r4, r3
 801940e:	8b83      	ldrh	r3, [r0, #28]
 8019410:	82c4      	strh	r4, [r0, #22]
 8019412:	8b04      	ldrh	r4, [r0, #24]
 8019414:	4422      	add	r2, r4
 8019416:	440c      	add	r4, r1
 8019418:	1a59      	subs	r1, r3, r1
 801941a:	83c2      	strh	r2, [r0, #30]
 801941c:	8304      	strh	r4, [r0, #24]
 801941e:	8381      	strh	r1, [r0, #28]
 8019420:	bd30      	pop	{r4, r5, pc}

08019422 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8019422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019426:	4604      	mov	r4, r0
 8019428:	8a47      	ldrh	r7, [r0, #18]
 801942a:	68c0      	ldr	r0, [r0, #12]
 801942c:	b085      	sub	sp, #20
 801942e:	6803      	ldr	r3, [r0, #0]
 8019430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019432:	4798      	blx	r3
 8019434:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8019438:	7a63      	ldrb	r3, [r4, #9]
 801943a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801943e:	3b01      	subs	r3, #1
 8019440:	42b7      	cmp	r7, r6
 8019442:	bfac      	ite	ge
 8019444:	f04f 0900 	movge.w	r9, #0
 8019448:	f04f 0901 	movlt.w	r9, #1
 801944c:	2b05      	cmp	r3, #5
 801944e:	d804      	bhi.n	801945a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8019450:	e8df f003 	tbb	[pc, r3]
 8019454:	470f0854 	.word	0x470f0854
 8019458:	4c4c      	.short	0x4c4c
 801945a:	2500      	movs	r5, #0
 801945c:	46a9      	mov	r9, r5
 801945e:	462e      	mov	r6, r5
 8019460:	462f      	mov	r7, r5
 8019462:	e00e      	b.n	8019482 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019464:	42b7      	cmp	r7, r6
 8019466:	f04f 0500 	mov.w	r5, #0
 801946a:	bfb4      	ite	lt
 801946c:	2600      	movlt	r6, #0
 801946e:	2601      	movge	r6, #1
 8019470:	e7f6      	b.n	8019460 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8019472:	42b7      	cmp	r7, r6
 8019474:	464d      	mov	r5, r9
 8019476:	f04f 0900 	mov.w	r9, #0
 801947a:	bfb4      	ite	lt
 801947c:	2600      	movlt	r6, #0
 801947e:	2601      	movge	r6, #1
 8019480:	464f      	mov	r7, r9
 8019482:	f04f 0800 	mov.w	r8, #0
 8019486:	f8a4 8016 	strh.w	r8, [r4, #22]
 801948a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801948e:	f8cd 8004 	str.w	r8, [sp, #4]
 8019492:	2300      	movs	r3, #0
 8019494:	9303      	str	r3, [sp, #12]
 8019496:	8823      	ldrh	r3, [r4, #0]
 8019498:	2b20      	cmp	r3, #32
 801949a:	d033      	beq.n	8019504 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801949c:	f242 010b 	movw	r1, #8203	; 0x200b
 80194a0:	1a5a      	subs	r2, r3, r1
 80194a2:	f1d2 0a00 	rsbs	sl, r2, #0
 80194a6:	eb4a 0a02 	adc.w	sl, sl, r2
 80194aa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80194ae:	4293      	cmp	r3, r2
 80194b0:	d008      	beq.n	80194c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80194b2:	428b      	cmp	r3, r1
 80194b4:	9a01      	ldr	r2, [sp, #4]
 80194b6:	bf0e      	itee	eq
 80194b8:	f04f 0a01 	moveq.w	sl, #1
 80194bc:	461a      	movne	r2, r3
 80194be:	f04f 0a00 	movne.w	sl, #0
 80194c2:	9201      	str	r2, [sp, #4]
 80194c4:	ab03      	add	r3, sp, #12
 80194c6:	68e2      	ldr	r2, [r4, #12]
 80194c8:	7a21      	ldrb	r1, [r4, #8]
 80194ca:	6860      	ldr	r0, [r4, #4]
 80194cc:	f002 fd28 	bl	801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80194d0:	8020      	strh	r0, [r4, #0]
 80194d2:	b9d8      	cbnz	r0, 801950c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80194d4:	8ba2      	ldrh	r2, [r4, #28]
 80194d6:	2300      	movs	r3, #0
 80194d8:	4611      	mov	r1, r2
 80194da:	4620      	mov	r0, r4
 80194dc:	f7ff ff91 	bl	8019402 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80194e0:	e06e      	b.n	80195c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80194e2:	2500      	movs	r5, #0
 80194e4:	2701      	movs	r7, #1
 80194e6:	46a9      	mov	r9, r5
 80194e8:	462e      	mov	r6, r5
 80194ea:	e7ca      	b.n	8019482 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80194ec:	42b7      	cmp	r7, r6
 80194ee:	f04f 0500 	mov.w	r5, #0
 80194f2:	bfb4      	ite	lt
 80194f4:	2700      	movlt	r7, #0
 80194f6:	2701      	movge	r7, #1
 80194f8:	462e      	mov	r6, r5
 80194fa:	e7c2      	b.n	8019482 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80194fc:	2500      	movs	r5, #0
 80194fe:	2601      	movs	r6, #1
 8019500:	46a9      	mov	r9, r5
 8019502:	e7ad      	b.n	8019460 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8019504:	9301      	str	r3, [sp, #4]
 8019506:	f04f 0a01 	mov.w	sl, #1
 801950a:	e7db      	b.n	80194c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801950c:	8b63      	ldrh	r3, [r4, #26]
 801950e:	280a      	cmp	r0, #10
 8019510:	f103 0301 	add.w	r3, r3, #1
 8019514:	8363      	strh	r3, [r4, #26]
 8019516:	d0dd      	beq.n	80194d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8019518:	9a03      	ldr	r2, [sp, #12]
 801951a:	bb62      	cbnz	r2, 8019576 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801951c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019520:	4298      	cmp	r0, r3
 8019522:	d003      	beq.n	801952c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8019524:	f242 030b 	movw	r3, #8203	; 0x200b
 8019528:	4298      	cmp	r0, r3
 801952a:	d1b2      	bne.n	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801952c:	8823      	ldrh	r3, [r4, #0]
 801952e:	8ba1      	ldrh	r1, [r4, #28]
 8019530:	2b20      	cmp	r3, #32
 8019532:	d003      	beq.n	801953c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8019534:	f242 000b 	movw	r0, #8203	; 0x200b
 8019538:	4283      	cmp	r3, r0
 801953a:	d131      	bne.n	80195a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801953c:	f1ba 0f00 	cmp.w	sl, #0
 8019540:	bf0a      	itet	eq
 8019542:	4688      	moveq	r8, r1
 8019544:	4650      	movne	r0, sl
 8019546:	2001      	moveq	r0, #1
 8019548:	440a      	add	r2, r1
 801954a:	8b23      	ldrh	r3, [r4, #24]
 801954c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019550:	b292      	uxth	r2, r2
 8019552:	83a2      	strh	r2, [r4, #28]
 8019554:	4413      	add	r3, r2
 8019556:	f1b9 0f00 	cmp.w	r9, #0
 801955a:	d102      	bne.n	8019562 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801955c:	2d00      	cmp	r5, #0
 801955e:	d042      	beq.n	80195e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8019560:	b300      	cbz	r0, 80195a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8019562:	8c21      	ldrh	r1, [r4, #32]
 8019564:	4419      	add	r1, r3
 8019566:	458c      	cmp	ip, r1
 8019568:	da37      	bge.n	80195da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801956a:	8ae1      	ldrh	r1, [r4, #22]
 801956c:	2900      	cmp	r1, #0
 801956e:	d034      	beq.n	80195da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8019570:	4563      	cmp	r3, ip
 8019572:	dd8e      	ble.n	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019574:	e01d      	b.n	80195b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8019576:	8893      	ldrh	r3, [r2, #4]
 8019578:	9901      	ldr	r1, [sp, #4]
 801957a:	8023      	strh	r3, [r4, #0]
 801957c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8019580:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8019584:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8019588:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801958c:	ea4b 0b00 	orr.w	fp, fp, r0
 8019590:	68e0      	ldr	r0, [r4, #12]
 8019592:	6803      	ldr	r3, [r0, #0]
 8019594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019596:	4798      	blx	r3
 8019598:	eb0b 0200 	add.w	r2, fp, r0
 801959c:	b292      	uxth	r2, r2
 801959e:	e7c5      	b.n	801952c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80195a0:	2000      	movs	r0, #0
 80195a2:	e7d1      	b.n	8019548 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80195a4:	4563      	cmp	r3, ip
 80195a6:	f77f af74 	ble.w	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80195aa:	8ae3      	ldrh	r3, [r4, #22]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	f43f af70 	beq.w	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80195b2:	2301      	movs	r3, #1
 80195b4:	8c22      	ldrh	r2, [r4, #32]
 80195b6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80195ba:	8be3      	ldrh	r3, [r4, #30]
 80195bc:	4413      	add	r3, r2
 80195be:	83e3      	strh	r3, [r4, #30]
 80195c0:	68e0      	ldr	r0, [r4, #12]
 80195c2:	6803      	ldr	r3, [r0, #0]
 80195c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195c6:	4798      	blx	r3
 80195c8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80195cc:	4418      	add	r0, r3
 80195ce:	8a63      	ldrh	r3, [r4, #18]
 80195d0:	1a18      	subs	r0, r3, r0
 80195d2:	8260      	strh	r0, [r4, #18]
 80195d4:	b005      	add	sp, #20
 80195d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195da:	2300      	movs	r3, #0
 80195dc:	4611      	mov	r1, r2
 80195de:	4620      	mov	r0, r4
 80195e0:	f7ff ff0f 	bl	8019402 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80195e4:	e755      	b.n	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80195e6:	4563      	cmp	r3, ip
 80195e8:	dd14      	ble.n	8019614 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80195ea:	b117      	cbz	r7, 80195f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80195ec:	2301      	movs	r3, #1
 80195ee:	460a      	mov	r2, r1
 80195f0:	e772      	b.n	80194d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80195f2:	2e00      	cmp	r6, #0
 80195f4:	f43f af4d 	beq.w	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80195f8:	2800      	cmp	r0, #0
 80195fa:	f47f af4a 	bne.w	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80195fe:	f1ba 0f00 	cmp.w	sl, #0
 8019602:	d002      	beq.n	801960a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8019604:	2301      	movs	r3, #1
 8019606:	4642      	mov	r2, r8
 8019608:	e767      	b.n	80194da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801960a:	8ae3      	ldrh	r3, [r4, #22]
 801960c:	2b00      	cmp	r3, #0
 801960e:	f43f af40 	beq.w	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019612:	e7d5      	b.n	80195c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8019614:	2800      	cmp	r0, #0
 8019616:	f47f af3c 	bne.w	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801961a:	f1ba 0f00 	cmp.w	sl, #0
 801961e:	f43f af38 	beq.w	8019492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019622:	2301      	movs	r3, #1
 8019624:	4642      	mov	r2, r8
 8019626:	e7da      	b.n	80195de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08019628 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801962c:	b0e3      	sub	sp, #396	; 0x18c
 801962e:	461c      	mov	r4, r3
 8019630:	4683      	mov	fp, r0
 8019632:	4688      	mov	r8, r1
 8019634:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8019636:	2b00      	cmp	r3, #0
 8019638:	f000 8112 	beq.w	8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801963c:	6823      	ldr	r3, [r4, #0]
 801963e:	2b00      	cmp	r3, #0
 8019640:	f000 810e 	beq.w	8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019644:	7ba3      	ldrb	r3, [r4, #14]
 8019646:	2b00      	cmp	r3, #0
 8019648:	f000 810a 	beq.w	8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801964c:	ad0a      	add	r5, sp, #40	; 0x28
 801964e:	6810      	ldr	r0, [r2, #0]
 8019650:	6851      	ldr	r1, [r2, #4]
 8019652:	462b      	mov	r3, r5
 8019654:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8019658:	c303      	stmia	r3!, {r0, r1}
 801965a:	2100      	movs	r1, #0
 801965c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8019660:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019664:	4628      	mov	r0, r5
 8019666:	910c      	str	r1, [sp, #48]	; 0x30
 8019668:	a90c      	add	r1, sp, #48	; 0x30
 801966a:	79a2      	ldrb	r2, [r4, #6]
 801966c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019670:	f7ff fd31 	bl	80190d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019674:	a90c      	add	r1, sp, #48	; 0x30
 8019676:	79a2      	ldrb	r2, [r4, #6]
 8019678:	4608      	mov	r0, r1
 801967a:	f7ff fd2c 	bl	80190d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801967e:	a817      	add	r0, sp, #92	; 0x5c
 8019680:	f002 f906 	bl	801b890 <_ZN8touchgfx12TextProviderC1Ev>
 8019684:	6820      	ldr	r0, [r4, #0]
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801968a:	4798      	blx	r3
 801968c:	4606      	mov	r6, r0
 801968e:	6820      	ldr	r0, [r4, #0]
 8019690:	6803      	ldr	r3, [r0, #0]
 8019692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019694:	4798      	blx	r3
 8019696:	4633      	mov	r3, r6
 8019698:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801969a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801969c:	9000      	str	r0, [sp, #0]
 801969e:	a817      	add	r0, sp, #92	; 0x5c
 80196a0:	f002 f949 	bl	801b936 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80196a4:	6820      	ldr	r0, [r4, #0]
 80196a6:	f894 a004 	ldrb.w	sl, [r4, #4]
 80196aa:	6803      	ldr	r3, [r0, #0]
 80196ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196ae:	4798      	blx	r3
 80196b0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80196b4:	6823      	ldr	r3, [r4, #0]
 80196b6:	4607      	mov	r7, r0
 80196b8:	4406      	add	r6, r0
 80196ba:	a830      	add	r0, sp, #192	; 0xc0
 80196bc:	f893 9009 	ldrb.w	r9, [r3, #9]
 80196c0:	f002 f8e6 	bl	801b890 <_ZN8touchgfx12TextProviderC1Ev>
 80196c4:	7c23      	ldrb	r3, [r4, #16]
 80196c6:	b17b      	cbz	r3, 80196e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80196c8:	6820      	ldr	r0, [r4, #0]
 80196ca:	6803      	ldr	r3, [r0, #0]
 80196cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196ce:	4798      	blx	r3
 80196d0:	9009      	str	r0, [sp, #36]	; 0x24
 80196d2:	6820      	ldr	r0, [r4, #0]
 80196d4:	6802      	ldr	r2, [r0, #0]
 80196d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80196d8:	4790      	blx	r2
 80196da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196dc:	9000      	str	r0, [sp, #0]
 80196de:	a830      	add	r0, sp, #192	; 0xc0
 80196e0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80196e2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80196e4:	f002 f927 	bl	801b936 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80196e8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80196ec:	a80e      	add	r0, sp, #56	; 0x38
 80196ee:	7be2      	ldrb	r2, [r4, #15]
 80196f0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80196f4:	1a8a      	subs	r2, r1, r2
 80196f6:	7c21      	ldrb	r1, [r4, #16]
 80196f8:	9103      	str	r1, [sp, #12]
 80196fa:	b292      	uxth	r2, r2
 80196fc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8019700:	9102      	str	r1, [sp, #8]
 8019702:	6821      	ldr	r1, [r4, #0]
 8019704:	9101      	str	r1, [sp, #4]
 8019706:	7961      	ldrb	r1, [r4, #5]
 8019708:	9100      	str	r1, [sp, #0]
 801970a:	a930      	add	r1, sp, #192	; 0xc0
 801970c:	f7ff fc64 	bl	8018fd8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8019710:	2e00      	cmp	r6, #0
 8019712:	dc5b      	bgt.n	80197cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8019714:	af17      	add	r7, sp, #92	; 0x5c
 8019716:	f04f 0900 	mov.w	r9, #0
 801971a:	7c23      	ldrb	r3, [r4, #16]
 801971c:	2b00      	cmp	r3, #0
 801971e:	f000 80b1 	beq.w	8019884 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8019722:	a80e      	add	r0, sp, #56	; 0x38
 8019724:	f7ff fe7d 	bl	8019422 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8019728:	f1ba 0f00 	cmp.w	sl, #0
 801972c:	f000 80a5 	beq.w	801987a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019730:	7c23      	ldrb	r3, [r4, #16]
 8019732:	2264      	movs	r2, #100	; 0x64
 8019734:	4639      	mov	r1, r7
 8019736:	a849      	add	r0, sp, #292	; 0x124
 8019738:	9309      	str	r3, [sp, #36]	; 0x24
 801973a:	f011 f8da 	bl	802a8f2 <memcpy>
 801973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019740:	2b00      	cmp	r3, #0
 8019742:	f000 80a7 	beq.w	8019894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8019746:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801974a:	7922      	ldrb	r2, [r4, #4]
 801974c:	2a01      	cmp	r2, #1
 801974e:	f040 808a 	bne.w	8019866 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019752:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8019756:	1ac0      	subs	r0, r0, r3
 8019758:	2302      	movs	r3, #2
 801975a:	fb90 f0f3 	sdiv	r0, r0, r3
 801975e:	b200      	sxth	r0, r0
 8019760:	7c23      	ldrb	r3, [r4, #16]
 8019762:	2b00      	cmp	r3, #0
 8019764:	f000 808b 	beq.w	801987e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8019768:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801976c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8019770:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019774:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019778:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801977c:	2100      	movs	r1, #0
 801977e:	4410      	add	r0, r2
 8019780:	4642      	mov	r2, r8
 8019782:	b200      	sxth	r0, r0
 8019784:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8019788:	9000      	str	r0, [sp, #0]
 801978a:	4658      	mov	r0, fp
 801978c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8019790:	f7ff fcd2 	bl	8019138 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019794:	2800      	cmp	r0, #0
 8019796:	d163      	bne.n	8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019798:	b2b2      	uxth	r2, r6
 801979a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801979e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80197a2:	4413      	add	r3, r2
 80197a4:	1a8a      	subs	r2, r1, r2
 80197a6:	b21b      	sxth	r3, r3
 80197a8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80197ac:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 80197b0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80197b4:	2a00      	cmp	r2, #0
 80197b6:	d153      	bne.n	8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80197b8:	6822      	ldr	r2, [r4, #0]
 80197ba:	8869      	ldrh	r1, [r5, #2]
 80197bc:	7a12      	ldrb	r2, [r2, #8]
 80197be:	1a9b      	subs	r3, r3, r2
 80197c0:	88ea      	ldrh	r2, [r5, #6]
 80197c2:	440a      	add	r2, r1
 80197c4:	b212      	sxth	r2, r2
 80197c6:	4293      	cmp	r3, r2
 80197c8:	dda7      	ble.n	801971a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80197ca:	e049      	b.n	8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80197cc:	7c23      	ldrb	r3, [r4, #16]
 80197ce:	444f      	add	r7, r9
 80197d0:	b1c3      	cbz	r3, 8019804 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80197d2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80197d6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80197da:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80197de:	443b      	add	r3, r7
 80197e0:	4293      	cmp	r3, r2
 80197e2:	da97      	bge.n	8019714 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80197e4:	a80e      	add	r0, sp, #56	; 0x38
 80197e6:	f7ff fe1c 	bl	8019422 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80197ea:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80197ee:	3b01      	subs	r3, #1
 80197f0:	b29b      	uxth	r3, r3
 80197f2:	454b      	cmp	r3, r9
 80197f4:	9309      	str	r3, [sp, #36]	; 0x24
 80197f6:	d021      	beq.n	801983c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80197f8:	7961      	ldrb	r1, [r4, #5]
 80197fa:	a817      	add	r0, sp, #92	; 0x5c
 80197fc:	f7ea faae 	bl	8003d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019802:	e7f4      	b.n	80197ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8019804:	fa1f f986 	uxth.w	r9, r6
 8019808:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801980c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019810:	443b      	add	r3, r7
 8019812:	4293      	cmp	r3, r2
 8019814:	f6bf af7e 	bge.w	8019714 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8019818:	a817      	add	r0, sp, #92	; 0x5c
 801981a:	f002 fc4d 	bl	801c0b8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801981e:	b1f8      	cbz	r0, 8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019820:	280a      	cmp	r0, #10
 8019822:	d1f1      	bne.n	8019808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8019824:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8019828:	444b      	add	r3, r9
 801982a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801982e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8019832:	eba3 0309 	sub.w	r3, r3, r9
 8019836:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801983a:	e7e5      	b.n	8019808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801983c:	b2b3      	uxth	r3, r6
 801983e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8019842:	441a      	add	r2, r3
 8019844:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8019848:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801984c:	1ad3      	subs	r3, r2, r3
 801984e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019852:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019856:	b11b      	cbz	r3, 8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019858:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 801985c:	2b00      	cmp	r3, #0
 801985e:	d0ba      	beq.n	80197d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8019860:	b063      	add	sp, #396	; 0x18c
 8019862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019866:	2a02      	cmp	r2, #2
 8019868:	d105      	bne.n	8019876 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801986a:	7be2      	ldrb	r2, [r4, #15]
 801986c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8019870:	1a80      	subs	r0, r0, r2
 8019872:	1ac0      	subs	r0, r0, r3
 8019874:	e773      	b.n	801975e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8019876:	2000      	movs	r0, #0
 8019878:	e772      	b.n	8019760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801987a:	7be0      	ldrb	r0, [r4, #15]
 801987c:	e770      	b.n	8019760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801987e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019882:	e773      	b.n	801976c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8019884:	f1ba 0f00 	cmp.w	sl, #0
 8019888:	d0f7      	beq.n	801987a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801988a:	2264      	movs	r2, #100	; 0x64
 801988c:	4639      	mov	r1, r7
 801988e:	a849      	add	r0, sp, #292	; 0x124
 8019890:	f011 f82f 	bl	802a8f2 <memcpy>
 8019894:	2300      	movs	r3, #0
 8019896:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801989a:	6821      	ldr	r1, [r4, #0]
 801989c:	a849      	add	r0, sp, #292	; 0x124
 801989e:	f7ff fbde 	bl	801905e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80198a2:	b203      	sxth	r3, r0
 80198a4:	e751      	b.n	801974a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080198a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80198a6:	2b03      	cmp	r3, #3
 80198a8:	d818      	bhi.n	80198dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80198aa:	e8df f003 	tbb	[pc, r3]
 80198ae:	0602      	.short	0x0602
 80198b0:	130d      	.short	0x130d
 80198b2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80198b6:	1850      	adds	r0, r2, r1
 80198b8:	4770      	bx	lr
 80198ba:	8803      	ldrh	r3, [r0, #0]
 80198bc:	8880      	ldrh	r0, [r0, #4]
 80198be:	4418      	add	r0, r3
 80198c0:	b200      	sxth	r0, r0
 80198c2:	1a80      	subs	r0, r0, r2
 80198c4:	3801      	subs	r0, #1
 80198c6:	4770      	bx	lr
 80198c8:	8803      	ldrh	r3, [r0, #0]
 80198ca:	8880      	ldrh	r0, [r0, #4]
 80198cc:	4418      	add	r0, r3
 80198ce:	b200      	sxth	r0, r0
 80198d0:	1a40      	subs	r0, r0, r1
 80198d2:	e7f7      	b.n	80198c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80198d4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80198d8:	4410      	add	r0, r2
 80198da:	4770      	bx	lr
 80198dc:	2000      	movs	r0, #0
 80198de:	4770      	bx	lr

080198e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80198e0:	2b03      	cmp	r3, #3
 80198e2:	d817      	bhi.n	8019914 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80198e4:	e8df f003 	tbb	[pc, r3]
 80198e8:	10090602 	.word	0x10090602
 80198ec:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80198f0:	1850      	adds	r0, r2, r1
 80198f2:	4770      	bx	lr
 80198f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80198f8:	e7fa      	b.n	80198f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80198fa:	8843      	ldrh	r3, [r0, #2]
 80198fc:	88c0      	ldrh	r0, [r0, #6]
 80198fe:	4418      	add	r0, r3
 8019900:	b200      	sxth	r0, r0
 8019902:	1a80      	subs	r0, r0, r2
 8019904:	3801      	subs	r0, #1
 8019906:	4770      	bx	lr
 8019908:	8843      	ldrh	r3, [r0, #2]
 801990a:	88c0      	ldrh	r0, [r0, #6]
 801990c:	4418      	add	r0, r3
 801990e:	b200      	sxth	r0, r0
 8019910:	1a40      	subs	r0, r0, r1
 8019912:	e7f7      	b.n	8019904 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019914:	2000      	movs	r0, #0
 8019916:	4770      	bx	lr

08019918 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019918:	4b01      	ldr	r3, [pc, #4]	; (8019920 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801991a:	2200      	movs	r2, #0
 801991c:	601a      	str	r2, [r3, #0]
 801991e:	4770      	bx	lr
 8019920:	20015128 	.word	0x20015128

08019924 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019924:	4603      	mov	r3, r0
 8019926:	b1c8      	cbz	r0, 801995c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019928:	0c02      	lsrs	r2, r0, #16
 801992a:	0412      	lsls	r2, r2, #16
 801992c:	b9a2      	cbnz	r2, 8019958 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801992e:	0403      	lsls	r3, r0, #16
 8019930:	2010      	movs	r0, #16
 8019932:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019936:	bf04      	itt	eq
 8019938:	021b      	lsleq	r3, r3, #8
 801993a:	3008      	addeq	r0, #8
 801993c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019940:	bf04      	itt	eq
 8019942:	011b      	lsleq	r3, r3, #4
 8019944:	3004      	addeq	r0, #4
 8019946:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801994a:	bf04      	itt	eq
 801994c:	009b      	lsleq	r3, r3, #2
 801994e:	3002      	addeq	r0, #2
 8019950:	2b00      	cmp	r3, #0
 8019952:	db04      	blt.n	801995e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019954:	3001      	adds	r0, #1
 8019956:	4770      	bx	lr
 8019958:	2000      	movs	r0, #0
 801995a:	e7ea      	b.n	8019932 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801995c:	2020      	movs	r0, #32
 801995e:	4770      	bx	lr

08019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019964:	b087      	sub	sp, #28
 8019966:	460d      	mov	r5, r1
 8019968:	4616      	mov	r6, r2
 801996a:	4698      	mov	r8, r3
 801996c:	4601      	mov	r1, r0
 801996e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019972:	b120      	cbz	r0, 801997e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019974:	b11a      	cbz	r2, 801997e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019976:	2d1f      	cmp	r5, #31
 8019978:	d801      	bhi.n	801997e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801997a:	2b1f      	cmp	r3, #31
 801997c:	d904      	bls.n	8019988 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801997e:	2000      	movs	r0, #0
 8019980:	6038      	str	r0, [r7, #0]
 8019982:	b007      	add	sp, #28
 8019984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019988:	b97d      	cbnz	r5, 80199aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801998a:	b143      	cbz	r3, 801999e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801998c:	4602      	mov	r2, r0
 801998e:	462b      	mov	r3, r5
 8019990:	4641      	mov	r1, r8
 8019992:	4630      	mov	r0, r6
 8019994:	e9cd 4700 	strd	r4, r7, [sp]
 8019998:	f7ff ffe2 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801999c:	e7f1      	b.n	8019982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801999e:	f04f 33ff 	mov.w	r3, #4294967295
 80199a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80199a6:	603b      	str	r3, [r7, #0]
 80199a8:	e7eb      	b.n	8019982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80199aa:	fa32 fa05 	lsrs.w	sl, r2, r5
 80199ae:	d106      	bne.n	80199be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80199b0:	4346      	muls	r6, r0
 80199b2:	fbb6 f0f4 	udiv	r0, r6, r4
 80199b6:	fb04 6610 	mls	r6, r4, r0, r6
 80199ba:	603e      	str	r6, [r7, #0]
 80199bc:	e7e1      	b.n	8019982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80199be:	2201      	movs	r2, #1
 80199c0:	fa00 fb05 	lsl.w	fp, r0, r5
 80199c4:	40aa      	lsls	r2, r5
 80199c6:	fbbb f9f4 	udiv	r9, fp, r4
 80199ca:	3a01      	subs	r2, #1
 80199cc:	fb0a f309 	mul.w	r3, sl, r9
 80199d0:	fb04 b919 	mls	r9, r4, r9, fp
 80199d4:	4016      	ands	r6, r2
 80199d6:	9303      	str	r3, [sp, #12]
 80199d8:	4630      	mov	r0, r6
 80199da:	f7ff ffa3 	bl	8019924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80199de:	462b      	mov	r3, r5
 80199e0:	460a      	mov	r2, r1
 80199e2:	4601      	mov	r1, r0
 80199e4:	4630      	mov	r0, r6
 80199e6:	e9cd 4700 	strd	r4, r7, [sp]
 80199ea:	f7ff ffb9 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80199ee:	4606      	mov	r6, r0
 80199f0:	4648      	mov	r0, r9
 80199f2:	eb05 0108 	add.w	r1, r5, r8
 80199f6:	f7ff ff95 	bl	8019924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80199fa:	ab05      	add	r3, sp, #20
 80199fc:	464a      	mov	r2, r9
 80199fe:	e9cd 4300 	strd	r4, r3, [sp]
 8019a02:	4603      	mov	r3, r0
 8019a04:	4650      	mov	r0, sl
 8019a06:	f7ff ffab 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019a0a:	6839      	ldr	r1, [r7, #0]
 8019a0c:	9a05      	ldr	r2, [sp, #20]
 8019a0e:	9b03      	ldr	r3, [sp, #12]
 8019a10:	4411      	add	r1, r2
 8019a12:	fbb1 f2f4 	udiv	r2, r1, r4
 8019a16:	18d3      	adds	r3, r2, r3
 8019a18:	fb04 1412 	mls	r4, r4, r2, r1
 8019a1c:	441e      	add	r6, r3
 8019a1e:	603c      	str	r4, [r7, #0]
 8019a20:	4430      	add	r0, r6
 8019a22:	e7ae      	b.n	8019982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08019a24 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a28:	b085      	sub	sp, #20
 8019a2a:	f1b0 0900 	subs.w	r9, r0, #0
 8019a2e:	461d      	mov	r5, r3
 8019a30:	4617      	mov	r7, r2
 8019a32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019a34:	bfbb      	ittet	lt
 8019a36:	f1c9 0900 	rsblt	r9, r9, #0
 8019a3a:	f04f 36ff 	movlt.w	r6, #4294967295
 8019a3e:	2601      	movge	r6, #1
 8019a40:	6823      	ldrlt	r3, [r4, #0]
 8019a42:	bfbc      	itt	lt
 8019a44:	425b      	neglt	r3, r3
 8019a46:	6023      	strlt	r3, [r4, #0]
 8019a48:	2a00      	cmp	r2, #0
 8019a4a:	da04      	bge.n	8019a56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019a4c:	6823      	ldr	r3, [r4, #0]
 8019a4e:	4257      	negs	r7, r2
 8019a50:	4276      	negs	r6, r6
 8019a52:	425b      	negs	r3, r3
 8019a54:	6023      	str	r3, [r4, #0]
 8019a56:	2d00      	cmp	r5, #0
 8019a58:	4638      	mov	r0, r7
 8019a5a:	bfba      	itte	lt
 8019a5c:	426d      	neglt	r5, r5
 8019a5e:	f04f 38ff 	movlt.w	r8, #4294967295
 8019a62:	f04f 0801 	movge.w	r8, #1
 8019a66:	f7ff ff5d 	bl	8019924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019a6a:	ab03      	add	r3, sp, #12
 8019a6c:	463a      	mov	r2, r7
 8019a6e:	e9cd 5300 	strd	r5, r3, [sp]
 8019a72:	4603      	mov	r3, r0
 8019a74:	4648      	mov	r0, r9
 8019a76:	f7ff ff73 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019a7a:	6823      	ldr	r3, [r4, #0]
 8019a7c:	9a03      	ldr	r2, [sp, #12]
 8019a7e:	4546      	cmp	r6, r8
 8019a80:	441a      	add	r2, r3
 8019a82:	fb92 f3f5 	sdiv	r3, r2, r5
 8019a86:	4418      	add	r0, r3
 8019a88:	fb05 2313 	mls	r3, r5, r3, r2
 8019a8c:	bf18      	it	ne
 8019a8e:	4240      	negne	r0, r0
 8019a90:	1c72      	adds	r2, r6, #1
 8019a92:	6023      	str	r3, [r4, #0]
 8019a94:	d105      	bne.n	8019aa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	f1c3 0200 	rsb	r2, r3, #0
 8019a9c:	db0b      	blt.n	8019ab6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019a9e:	6022      	str	r2, [r4, #0]
 8019aa0:	e006      	b.n	8019ab0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019aa2:	2e01      	cmp	r6, #1
 8019aa4:	d104      	bne.n	8019ab0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	da02      	bge.n	8019ab0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019aaa:	442b      	add	r3, r5
 8019aac:	3801      	subs	r0, #1
 8019aae:	6023      	str	r3, [r4, #0]
 8019ab0:	b005      	add	sp, #20
 8019ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ab6:	3801      	subs	r0, #1
 8019ab8:	1b52      	subs	r2, r2, r5
 8019aba:	e7f0      	b.n	8019a9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08019abc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019abc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019ac0:	4c1c      	ldr	r4, [pc, #112]	; (8019b34 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019ac2:	4605      	mov	r5, r0
 8019ac4:	6807      	ldr	r7, [r0, #0]
 8019ac6:	69a3      	ldr	r3, [r4, #24]
 8019ac8:	b92b      	cbnz	r3, 8019ad6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019aca:	6840      	ldr	r0, [r0, #4]
 8019acc:	e9c5 7000 	strd	r7, r0, [r5]
 8019ad0:	b004      	add	sp, #16
 8019ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ad6:	f04f 0802 	mov.w	r8, #2
 8019ada:	68a2      	ldr	r2, [r4, #8]
 8019adc:	ae04      	add	r6, sp, #16
 8019ade:	6820      	ldr	r0, [r4, #0]
 8019ae0:	fb93 f1f8 	sdiv	r1, r3, r8
 8019ae4:	440a      	add	r2, r1
 8019ae6:	69e1      	ldr	r1, [r4, #28]
 8019ae8:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019aec:	463a      	mov	r2, r7
 8019aee:	9600      	str	r6, [sp, #0]
 8019af0:	f7ff ff98 	bl	8019a24 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019af4:	69a3      	ldr	r3, [r4, #24]
 8019af6:	4607      	mov	r7, r0
 8019af8:	686a      	ldr	r2, [r5, #4]
 8019afa:	6a21      	ldr	r1, [r4, #32]
 8019afc:	9600      	str	r6, [sp, #0]
 8019afe:	6860      	ldr	r0, [r4, #4]
 8019b00:	f7ff ff90 	bl	8019a24 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019b04:	69a3      	ldr	r3, [r4, #24]
 8019b06:	6962      	ldr	r2, [r4, #20]
 8019b08:	4407      	add	r7, r0
 8019b0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019b0c:	9600      	str	r6, [sp, #0]
 8019b0e:	68e0      	ldr	r0, [r4, #12]
 8019b10:	fb93 f8f8 	sdiv	r8, r3, r8
 8019b14:	4442      	add	r2, r8
 8019b16:	9203      	str	r2, [sp, #12]
 8019b18:	682a      	ldr	r2, [r5, #0]
 8019b1a:	f7ff ff83 	bl	8019a24 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019b1e:	4680      	mov	r8, r0
 8019b20:	9600      	str	r6, [sp, #0]
 8019b22:	69a3      	ldr	r3, [r4, #24]
 8019b24:	686a      	ldr	r2, [r5, #4]
 8019b26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019b28:	6920      	ldr	r0, [r4, #16]
 8019b2a:	f7ff ff7b 	bl	8019a24 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019b2e:	4440      	add	r0, r8
 8019b30:	e7cc      	b.n	8019acc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019b32:	bf00      	nop
 8019b34:	2001512c 	.word	0x2001512c

08019b38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019b38:	4b07      	ldr	r3, [pc, #28]	; (8019b58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8019b3a:	781b      	ldrb	r3, [r3, #0]
 8019b3c:	2b01      	cmp	r3, #1
 8019b3e:	d109      	bne.n	8019b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019b40:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019b44:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019b48:	8003      	strh	r3, [r0, #0]
 8019b4a:	4b04      	ldr	r3, [pc, #16]	; (8019b5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019b4c:	881b      	ldrh	r3, [r3, #0]
 8019b4e:	3b01      	subs	r3, #1
 8019b50:	1a9b      	subs	r3, r3, r2
 8019b52:	800b      	strh	r3, [r1, #0]
 8019b54:	4770      	bx	lr
 8019b56:	bf00      	nop
 8019b58:	20015118 	.word	0x20015118
 8019b5c:	20015114 	.word	0x20015114

08019b60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019b60:	4b07      	ldr	r3, [pc, #28]	; (8019b80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019b62:	b510      	push	{r4, lr}
 8019b64:	781b      	ldrb	r3, [r3, #0]
 8019b66:	2b01      	cmp	r3, #1
 8019b68:	d108      	bne.n	8019b7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019b6a:	4b06      	ldr	r3, [pc, #24]	; (8019b84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019b6c:	880c      	ldrh	r4, [r1, #0]
 8019b6e:	881b      	ldrh	r3, [r3, #0]
 8019b70:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019b74:	3b01      	subs	r3, #1
 8019b76:	1b1b      	subs	r3, r3, r4
 8019b78:	8003      	strh	r3, [r0, #0]
 8019b7a:	800a      	strh	r2, [r1, #0]
 8019b7c:	bd10      	pop	{r4, pc}
 8019b7e:	bf00      	nop
 8019b80:	20015118 	.word	0x20015118
 8019b84:	20015114 	.word	0x20015114

08019b88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019b88:	4b0a      	ldr	r3, [pc, #40]	; (8019bb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019b8a:	b510      	push	{r4, lr}
 8019b8c:	781b      	ldrb	r3, [r3, #0]
 8019b8e:	2b01      	cmp	r3, #1
 8019b90:	d10e      	bne.n	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019b92:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019b96:	8843      	ldrh	r3, [r0, #2]
 8019b98:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019b9c:	18ca      	adds	r2, r1, r3
 8019b9e:	4b06      	ldr	r3, [pc, #24]	; (8019bb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019ba0:	8044      	strh	r4, [r0, #2]
 8019ba2:	881b      	ldrh	r3, [r3, #0]
 8019ba4:	1a9b      	subs	r3, r3, r2
 8019ba6:	8003      	strh	r3, [r0, #0]
 8019ba8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019bac:	8081      	strh	r1, [r0, #4]
 8019bae:	80c3      	strh	r3, [r0, #6]
 8019bb0:	bd10      	pop	{r4, pc}
 8019bb2:	bf00      	nop
 8019bb4:	20015118 	.word	0x20015118
 8019bb8:	20015114 	.word	0x20015114

08019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019bbc:	4b08      	ldr	r3, [pc, #32]	; (8019be0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019bbe:	781b      	ldrb	r3, [r3, #0]
 8019bc0:	2b01      	cmp	r3, #1
 8019bc2:	d10c      	bne.n	8019bde <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8019bc4:	8803      	ldrh	r3, [r0, #0]
 8019bc6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019bca:	8842      	ldrh	r2, [r0, #2]
 8019bcc:	8002      	strh	r2, [r0, #0]
 8019bce:	185a      	adds	r2, r3, r1
 8019bd0:	4b04      	ldr	r3, [pc, #16]	; (8019be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019bd2:	881b      	ldrh	r3, [r3, #0]
 8019bd4:	1a9b      	subs	r3, r3, r2
 8019bd6:	8043      	strh	r3, [r0, #2]
 8019bd8:	88c3      	ldrh	r3, [r0, #6]
 8019bda:	80c1      	strh	r1, [r0, #6]
 8019bdc:	8083      	strh	r3, [r0, #4]
 8019bde:	4770      	bx	lr
 8019be0:	20015118 	.word	0x20015118
 8019be4:	20015114 	.word	0x20015114

08019be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019be8:	4b07      	ldr	r3, [pc, #28]	; (8019c08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019bea:	b510      	push	{r4, lr}
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	2b01      	cmp	r3, #1
 8019bf0:	d108      	bne.n	8019c04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019bf2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019bf6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019bfa:	8003      	strh	r3, [r0, #0]
 8019bfc:	8893      	ldrh	r3, [r2, #4]
 8019bfe:	3b01      	subs	r3, #1
 8019c00:	1b1b      	subs	r3, r3, r4
 8019c02:	800b      	strh	r3, [r1, #0]
 8019c04:	bd10      	pop	{r4, pc}
 8019c06:	bf00      	nop
 8019c08:	20015118 	.word	0x20015118

08019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019c0c:	4b0a      	ldr	r3, [pc, #40]	; (8019c38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019c0e:	460a      	mov	r2, r1
 8019c10:	b510      	push	{r4, lr}
 8019c12:	781b      	ldrb	r3, [r3, #0]
 8019c14:	2b01      	cmp	r3, #1
 8019c16:	d10d      	bne.n	8019c34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019c18:	8881      	ldrh	r1, [r0, #4]
 8019c1a:	8803      	ldrh	r3, [r0, #0]
 8019c1c:	440b      	add	r3, r1
 8019c1e:	4601      	mov	r1, r0
 8019c20:	3b01      	subs	r3, #1
 8019c22:	f821 3b02 	strh.w	r3, [r1], #2
 8019c26:	f7ff ffdf 	bl	8019be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019c2a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019c2e:	88c2      	ldrh	r2, [r0, #6]
 8019c30:	80c3      	strh	r3, [r0, #6]
 8019c32:	8082      	strh	r2, [r0, #4]
 8019c34:	bd10      	pop	{r4, pc}
 8019c36:	bf00      	nop
 8019c38:	20015118 	.word	0x20015118

08019c3c <_ZN8touchgfx11Application13requestRedrawEv>:
 8019c3c:	4b06      	ldr	r3, [pc, #24]	; (8019c58 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019c3e:	2100      	movs	r1, #0
 8019c40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c44:	4b05      	ldr	r3, [pc, #20]	; (8019c5c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019c46:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8019c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c4e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8019c52:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8019c56:	4770      	bx	lr
 8019c58:	20015114 	.word	0x20015114
 8019c5c:	20015116 	.word	0x20015116

08019c60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019c60:	4b03      	ldr	r3, [pc, #12]	; (8019c70 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019c62:	6818      	ldr	r0, [r3, #0]
 8019c64:	b110      	cbz	r0, 8019c6c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019c66:	6803      	ldr	r3, [r0, #0]
 8019c68:	699b      	ldr	r3, [r3, #24]
 8019c6a:	4718      	bx	r3
 8019c6c:	4770      	bx	lr
 8019c6e:	bf00      	nop
 8019c70:	2001515c 	.word	0x2001515c

08019c74 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019c74:	4770      	bx	lr
	...

08019c78 <_ZN8touchgfx11Application4drawEv>:
 8019c78:	4b09      	ldr	r3, [pc, #36]	; (8019ca0 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019c7a:	b507      	push	{r0, r1, r2, lr}
 8019c7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c80:	2100      	movs	r1, #0
 8019c82:	4b08      	ldr	r3, [pc, #32]	; (8019ca4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019c84:	9100      	str	r1, [sp, #0]
 8019c86:	4669      	mov	r1, sp
 8019c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c8c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019c90:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019c94:	6803      	ldr	r3, [r0, #0]
 8019c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c98:	4798      	blx	r3
 8019c9a:	b003      	add	sp, #12
 8019c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ca0:	20015114 	.word	0x20015114
 8019ca4:	20015116 	.word	0x20015116

08019ca8 <_ZN8touchgfx11Application10invalidateEv>:
 8019ca8:	4b09      	ldr	r3, [pc, #36]	; (8019cd0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019caa:	b082      	sub	sp, #8
 8019cac:	2100      	movs	r1, #0
 8019cae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019cb2:	4b08      	ldr	r3, [pc, #32]	; (8019cd4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8019cb4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019cb8:	aa02      	add	r2, sp, #8
 8019cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cbe:	9100      	str	r1, [sp, #0]
 8019cc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019cc4:	6803      	ldr	r3, [r0, #0]
 8019cc6:	e912 0006 	ldmdb	r2, {r1, r2}
 8019cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ccc:	b002      	add	sp, #8
 8019cce:	4718      	bx	r3
 8019cd0:	20015114 	.word	0x20015114
 8019cd4:	20015116 	.word	0x20015116

08019cd8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019cd8:	4b03      	ldr	r3, [pc, #12]	; (8019ce8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019cda:	6818      	ldr	r0, [r3, #0]
 8019cdc:	b110      	cbz	r0, 8019ce4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019cde:	6803      	ldr	r3, [r0, #0]
 8019ce0:	69db      	ldr	r3, [r3, #28]
 8019ce2:	4718      	bx	r3
 8019ce4:	4770      	bx	lr
 8019ce6:	bf00      	nop
 8019ce8:	2001515c 	.word	0x2001515c

08019cec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019cec:	4b03      	ldr	r3, [pc, #12]	; (8019cfc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019cee:	6818      	ldr	r0, [r3, #0]
 8019cf0:	b110      	cbz	r0, 8019cf8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019cf2:	6803      	ldr	r3, [r0, #0]
 8019cf4:	6a1b      	ldr	r3, [r3, #32]
 8019cf6:	4718      	bx	r3
 8019cf8:	4770      	bx	lr
 8019cfa:	bf00      	nop
 8019cfc:	2001515c 	.word	0x2001515c

08019d00 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019d00:	2300      	movs	r3, #0
 8019d02:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8019d06:	4770      	bx	lr

08019d08 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019d08:	4b03      	ldr	r3, [pc, #12]	; (8019d18 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019d0a:	6818      	ldr	r0, [r3, #0]
 8019d0c:	b110      	cbz	r0, 8019d14 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019d0e:	6803      	ldr	r3, [r0, #0]
 8019d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d12:	4718      	bx	r3
 8019d14:	4770      	bx	lr
 8019d16:	bf00      	nop
 8019d18:	2001515c 	.word	0x2001515c

08019d1c <_ZN8touchgfx11ApplicationD1Ev>:
 8019d1c:	4770      	bx	lr

08019d1e <_ZN8touchgfx11ApplicationD0Ev>:
 8019d1e:	b510      	push	{r4, lr}
 8019d20:	4604      	mov	r4, r0
 8019d22:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8019d26:	f010 fa1b 	bl	802a160 <_ZdlPvj>
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	bd10      	pop	{r4, pc}

08019d2e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019d2e:	b510      	push	{r4, lr}
 8019d30:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019d34:	888a      	ldrh	r2, [r1, #4]
 8019d36:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019d3a:	4422      	add	r2, r4
 8019d3c:	b212      	sxth	r2, r2
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	da15      	bge.n	8019d6e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019d42:	8882      	ldrh	r2, [r0, #4]
 8019d44:	4413      	add	r3, r2
 8019d46:	b21b      	sxth	r3, r3
 8019d48:	429c      	cmp	r4, r3
 8019d4a:	da10      	bge.n	8019d6e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019d4c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019d50:	88c9      	ldrh	r1, [r1, #6]
 8019d52:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019d56:	4419      	add	r1, r3
 8019d58:	b209      	sxth	r1, r1
 8019d5a:	428a      	cmp	r2, r1
 8019d5c:	da07      	bge.n	8019d6e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019d5e:	88c0      	ldrh	r0, [r0, #6]
 8019d60:	4410      	add	r0, r2
 8019d62:	b200      	sxth	r0, r0
 8019d64:	4283      	cmp	r3, r0
 8019d66:	bfac      	ite	ge
 8019d68:	2000      	movge	r0, #0
 8019d6a:	2001      	movlt	r0, #1
 8019d6c:	bd10      	pop	{r4, pc}
 8019d6e:	2000      	movs	r0, #0
 8019d70:	e7fc      	b.n	8019d6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019d72 <_ZN8touchgfx4Rect10restrictToEss>:
 8019d72:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	b510      	push	{r4, lr}
 8019d7a:	da04      	bge.n	8019d86 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019d7c:	8884      	ldrh	r4, [r0, #4]
 8019d7e:	4423      	add	r3, r4
 8019d80:	8083      	strh	r3, [r0, #4]
 8019d82:	2300      	movs	r3, #0
 8019d84:	8003      	strh	r3, [r0, #0]
 8019d86:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019d8a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019d8e:	1b09      	subs	r1, r1, r4
 8019d90:	428b      	cmp	r3, r1
 8019d92:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019d96:	bfc8      	it	gt
 8019d98:	8081      	strhgt	r1, [r0, #4]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	da04      	bge.n	8019da8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019d9e:	88c1      	ldrh	r1, [r0, #6]
 8019da0:	440b      	add	r3, r1
 8019da2:	80c3      	strh	r3, [r0, #6]
 8019da4:	2300      	movs	r3, #0
 8019da6:	8043      	strh	r3, [r0, #2]
 8019da8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019dac:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019db0:	1a52      	subs	r2, r2, r1
 8019db2:	4293      	cmp	r3, r2
 8019db4:	bfc8      	it	gt
 8019db6:	80c2      	strhgt	r2, [r0, #6]
 8019db8:	bd10      	pop	{r4, pc}
	...

08019dbc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019dbc:	4b10      	ldr	r3, [pc, #64]	; (8019e00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019dbe:	b510      	push	{r4, lr}
 8019dc0:	460c      	mov	r4, r1
 8019dc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019dc6:	4b0f      	ldr	r3, [pc, #60]	; (8019e04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019dc8:	4620      	mov	r0, r4
 8019dca:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019dce:	f7ff ffd0 	bl	8019d72 <_ZN8touchgfx4Rect10restrictToEss>
 8019dd2:	4b0d      	ldr	r3, [pc, #52]	; (8019e08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019dd4:	6818      	ldr	r0, [r3, #0]
 8019dd6:	b190      	cbz	r0, 8019dfe <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019dd8:	6803      	ldr	r3, [r0, #0]
 8019dda:	4621      	mov	r1, r4
 8019ddc:	689b      	ldr	r3, [r3, #8]
 8019dde:	4798      	blx	r3
 8019de0:	4b0a      	ldr	r3, [pc, #40]	; (8019e0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8019de2:	6818      	ldr	r0, [r3, #0]
 8019de4:	b118      	cbz	r0, 8019dee <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8019de6:	6803      	ldr	r3, [r0, #0]
 8019de8:	4621      	mov	r1, r4
 8019dea:	689b      	ldr	r3, [r3, #8]
 8019dec:	4798      	blx	r3
 8019dee:	4b08      	ldr	r3, [pc, #32]	; (8019e10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019df0:	4621      	mov	r1, r4
 8019df2:	6818      	ldr	r0, [r3, #0]
 8019df4:	6803      	ldr	r3, [r0, #0]
 8019df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dfa:	69db      	ldr	r3, [r3, #28]
 8019dfc:	4718      	bx	r3
 8019dfe:	bd10      	pop	{r4, pc}
 8019e00:	20015116 	.word	0x20015116
 8019e04:	20015114 	.word	0x20015114
 8019e08:	2001515c 	.word	0x2001515c
 8019e0c:	20015158 	.word	0x20015158
 8019e10:	20015120 	.word	0x20015120

08019e14 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e16:	4606      	mov	r6, r0
 8019e18:	4608      	mov	r0, r1
 8019e1a:	460f      	mov	r7, r1
 8019e1c:	f7fd f97d 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e20:	b9e8      	cbnz	r0, 8019e5e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019e22:	f9b7 5000 	ldrsh.w	r5, [r7]
 8019e26:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019e2a:	42a5      	cmp	r5, r4
 8019e2c:	db17      	blt.n	8019e5e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019e2e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019e32:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019e36:	429a      	cmp	r2, r3
 8019e38:	db11      	blt.n	8019e5e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019e3a:	88b9      	ldrh	r1, [r7, #4]
 8019e3c:	440d      	add	r5, r1
 8019e3e:	88b1      	ldrh	r1, [r6, #4]
 8019e40:	440c      	add	r4, r1
 8019e42:	b22d      	sxth	r5, r5
 8019e44:	b224      	sxth	r4, r4
 8019e46:	42a5      	cmp	r5, r4
 8019e48:	dc09      	bgt.n	8019e5e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019e4a:	88f8      	ldrh	r0, [r7, #6]
 8019e4c:	4410      	add	r0, r2
 8019e4e:	88f2      	ldrh	r2, [r6, #6]
 8019e50:	4413      	add	r3, r2
 8019e52:	b200      	sxth	r0, r0
 8019e54:	b21b      	sxth	r3, r3
 8019e56:	4298      	cmp	r0, r3
 8019e58:	bfcc      	ite	gt
 8019e5a:	2000      	movgt	r0, #0
 8019e5c:	2001      	movle	r0, #1
 8019e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019e60 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e62:	4604      	mov	r4, r0
 8019e64:	4608      	mov	r0, r1
 8019e66:	460d      	mov	r5, r1
 8019e68:	f7fd f957 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e6c:	b978      	cbnz	r0, 8019e8e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019e6e:	4620      	mov	r0, r4
 8019e70:	f7fd f953 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e74:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019e78:	b150      	cbz	r0, 8019e90 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019e7a:	8026      	strh	r6, [r4, #0]
 8019e7c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019e80:	8063      	strh	r3, [r4, #2]
 8019e82:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019e86:	80a3      	strh	r3, [r4, #4]
 8019e88:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019e8c:	80e3      	strh	r3, [r4, #6]
 8019e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e90:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019e94:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019e98:	42b1      	cmp	r1, r6
 8019e9a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019e9e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019ea2:	460f      	mov	r7, r1
 8019ea4:	88ed      	ldrh	r5, [r5, #6]
 8019ea6:	bfa8      	it	ge
 8019ea8:	4637      	movge	r7, r6
 8019eaa:	4293      	cmp	r3, r2
 8019eac:	4618      	mov	r0, r3
 8019eae:	4466      	add	r6, ip
 8019eb0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019eb4:	bfa8      	it	ge
 8019eb6:	4610      	movge	r0, r2
 8019eb8:	442a      	add	r2, r5
 8019eba:	88e5      	ldrh	r5, [r4, #6]
 8019ebc:	4461      	add	r1, ip
 8019ebe:	b236      	sxth	r6, r6
 8019ec0:	8027      	strh	r7, [r4, #0]
 8019ec2:	442b      	add	r3, r5
 8019ec4:	b209      	sxth	r1, r1
 8019ec6:	b212      	sxth	r2, r2
 8019ec8:	8060      	strh	r0, [r4, #2]
 8019eca:	b21b      	sxth	r3, r3
 8019ecc:	428e      	cmp	r6, r1
 8019ece:	bfac      	ite	ge
 8019ed0:	ebc7 0106 	rsbge	r1, r7, r6
 8019ed4:	ebc7 0101 	rsblt	r1, r7, r1
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	bfac      	ite	ge
 8019edc:	ebc0 0202 	rsbge	r2, r0, r2
 8019ee0:	ebc0 0203 	rsblt	r2, r0, r3
 8019ee4:	80a1      	strh	r1, [r4, #4]
 8019ee6:	80e2      	strh	r2, [r4, #6]
 8019ee8:	e7d1      	b.n	8019e8e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019eec <_ZN8touchgfx11Application11getInstanceEv>:
 8019eec:	4b01      	ldr	r3, [pc, #4]	; (8019ef4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019eee:	6818      	ldr	r0, [r3, #0]
 8019ef0:	4770      	bx	lr
 8019ef2:	bf00      	nop
 8019ef4:	2001516c 	.word	0x2001516c

08019ef8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8019ef8:	2300      	movs	r3, #0
 8019efa:	b510      	push	{r4, lr}
 8019efc:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8019f00:	4604      	mov	r4, r0
 8019f02:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8019f06:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8019f0a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8019f0e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8019f12:	429a      	cmp	r2, r3
 8019f14:	d90e      	bls.n	8019f34 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8019f16:	18e2      	adds	r2, r4, r3
 8019f18:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8019f1c:	b122      	cbz	r2, 8019f28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8019f1e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8019f22:	6803      	ldr	r3, [r0, #0]
 8019f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f26:	4798      	blx	r3
 8019f28:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8019f2c:	3301      	adds	r3, #1
 8019f2e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8019f32:	e7ea      	b.n	8019f0a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8019f34:	bd10      	pop	{r4, pc}

08019f36 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8019f36:	2300      	movs	r3, #0
 8019f38:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8019f3c:	30a4      	adds	r0, #164	; 0xa4
 8019f3e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019f42:	f802 3b01 	strb.w	r3, [r2], #1
 8019f46:	4282      	cmp	r2, r0
 8019f48:	d1fb      	bne.n	8019f42 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8019f4a:	4770      	bx	lr

08019f4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019f4c:	b570      	push	{r4, r5, r6, lr}
 8019f4e:	4c0b      	ldr	r4, [pc, #44]	; (8019f7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019f50:	4605      	mov	r5, r0
 8019f52:	460e      	mov	r6, r1
 8019f54:	6820      	ldr	r0, [r4, #0]
 8019f56:	b110      	cbz	r0, 8019f5e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8019f58:	6803      	ldr	r3, [r0, #0]
 8019f5a:	695b      	ldr	r3, [r3, #20]
 8019f5c:	4798      	blx	r3
 8019f5e:	1d28      	adds	r0, r5, #4
 8019f60:	f7ff ffe9 	bl	8019f36 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019f64:	6026      	str	r6, [r4, #0]
 8019f66:	6833      	ldr	r3, [r6, #0]
 8019f68:	4630      	mov	r0, r6
 8019f6a:	68db      	ldr	r3, [r3, #12]
 8019f6c:	4798      	blx	r3
 8019f6e:	682b      	ldr	r3, [r5, #0]
 8019f70:	4628      	mov	r0, r5
 8019f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f78:	4718      	bx	r3
 8019f7a:	bf00      	nop
 8019f7c:	2001515c 	.word	0x2001515c

08019f80 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019f80:	2300      	movs	r3, #0
 8019f82:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8019f86:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8019f8a:	461a      	mov	r2, r3
 8019f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f8e:	461c      	mov	r4, r3
 8019f90:	461d      	mov	r5, r3
 8019f92:	459c      	cmp	ip, r3
 8019f94:	dd1a      	ble.n	8019fcc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8019f96:	18c6      	adds	r6, r0, r3
 8019f98:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8019f9c:	b16e      	cbz	r6, 8019fba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	d008      	beq.n	8019fb4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8019fa2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8019fa6:	fa1f fe82 	uxth.w	lr, r2
 8019faa:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8019fae:	1887      	adds	r7, r0, r2
 8019fb0:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8019fb4:	3201      	adds	r2, #1
 8019fb6:	3301      	adds	r3, #1
 8019fb8:	e7eb      	b.n	8019f92 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8019fba:	4299      	cmp	r1, r3
 8019fbc:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8019fc0:	bfa8      	it	ge
 8019fc2:	3501      	addge	r5, #1
 8019fc4:	429e      	cmp	r6, r3
 8019fc6:	bfc8      	it	gt
 8019fc8:	3401      	addgt	r4, #1
 8019fca:	e7f4      	b.n	8019fb6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8019fcc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8019fd0:	1b49      	subs	r1, r1, r5
 8019fd2:	1b1b      	subs	r3, r3, r4
 8019fd4:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8019fd8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8019fdc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8019fe0:	4293      	cmp	r3, r2
 8019fe2:	dd03      	ble.n	8019fec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8019fe4:	3b01      	subs	r3, #1
 8019fe6:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8019fea:	e7f7      	b.n	8019fdc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8019fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019ff0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019ff0:	b570      	push	{r4, r5, r6, lr}
 8019ff2:	4d16      	ldr	r5, [pc, #88]	; (801a04c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8019ff4:	4604      	mov	r4, r0
 8019ff6:	6828      	ldr	r0, [r5, #0]
 8019ff8:	b140      	cbz	r0, 801a00c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019ffa:	7a03      	ldrb	r3, [r0, #8]
 8019ffc:	b933      	cbnz	r3, 801a00c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019ffe:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801a002:	6803      	ldr	r3, [r0, #0]
 801a004:	689b      	ldr	r3, [r3, #8]
 801a006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a00a:	4718      	bx	r3
 801a00c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801a010:	4e0f      	ldr	r6, [pc, #60]	; (801a050 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801a012:	b973      	cbnz	r3, 801a032 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a014:	b168      	cbz	r0, 801a032 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a016:	7a03      	ldrb	r3, [r0, #8]
 801a018:	b15b      	cbz	r3, 801a032 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a01a:	6830      	ldr	r0, [r6, #0]
 801a01c:	b110      	cbz	r0, 801a024 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a01e:	6803      	ldr	r3, [r0, #0]
 801a020:	691b      	ldr	r3, [r3, #16]
 801a022:	4798      	blx	r3
 801a024:	6828      	ldr	r0, [r5, #0]
 801a026:	6803      	ldr	r3, [r0, #0]
 801a028:	68db      	ldr	r3, [r3, #12]
 801a02a:	4798      	blx	r3
 801a02c:	2301      	movs	r3, #1
 801a02e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801a032:	3404      	adds	r4, #4
 801a034:	4620      	mov	r0, r4
 801a036:	f7ff ff5f 	bl	8019ef8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801a03a:	4620      	mov	r0, r4
 801a03c:	f7ff ffa0 	bl	8019f80 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801a040:	6830      	ldr	r0, [r6, #0]
 801a042:	b110      	cbz	r0, 801a04a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801a044:	6803      	ldr	r3, [r0, #0]
 801a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a048:	e7dd      	b.n	801a006 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a04a:	bd70      	pop	{r4, r5, r6, pc}
 801a04c:	20015160 	.word	0x20015160
 801a050:	2001515c 	.word	0x2001515c

0801a054 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a054:	4603      	mov	r3, r0
 801a056:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a05a:	2200      	movs	r2, #0
 801a05c:	801a      	strh	r2, [r3, #0]
 801a05e:	3308      	adds	r3, #8
 801a060:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a064:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a068:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a06c:	428b      	cmp	r3, r1
 801a06e:	d1f5      	bne.n	801a05c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a070:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a074:	4770      	bx	lr
	...

0801a078 <_ZN8touchgfx11ApplicationC1Ev>:
 801a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a07a:	4b1d      	ldr	r3, [pc, #116]	; (801a0f0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a07c:	4606      	mov	r6, r0
 801a07e:	4604      	mov	r4, r0
 801a080:	2500      	movs	r5, #0
 801a082:	f846 3b04 	str.w	r3, [r6], #4
 801a086:	22a8      	movs	r2, #168	; 0xa8
 801a088:	2100      	movs	r1, #0
 801a08a:	4630      	mov	r0, r6
 801a08c:	f010 fb50 	bl	802a730 <memset>
 801a090:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801a094:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801a098:	4f16      	ldr	r7, [pc, #88]	; (801a0f4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a09a:	f7ff ffdb 	bl	801a054 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a09e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801a0a2:	f7ff ffd7 	bl	801a054 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a0a6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a0aa:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a0ae:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801a0b2:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801a0b6:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801a0ba:	490f      	ldr	r1, [pc, #60]	; (801a0f8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a0bc:	480f      	ldr	r0, [pc, #60]	; (801a0fc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801a0be:	f00f ff27 	bl	8029f10 <CRC_Lock>
 801a0c2:	4b0f      	ldr	r3, [pc, #60]	; (801a100 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801a0c4:	b158      	cbz	r0, 801a0de <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801a0c6:	801d      	strh	r5, [r3, #0]
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	4a0e      	ldr	r2, [pc, #56]	; (801a104 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801a0cc:	4630      	mov	r0, r6
 801a0ce:	6013      	str	r3, [r2, #0]
 801a0d0:	4a0d      	ldr	r2, [pc, #52]	; (801a108 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801a0d2:	603b      	str	r3, [r7, #0]
 801a0d4:	6013      	str	r3, [r2, #0]
 801a0d6:	f7ff ff2e 	bl	8019f36 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801a0da:	4620      	mov	r0, r4
 801a0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a0e2:	2002      	movs	r0, #2
 801a0e4:	801a      	strh	r2, [r3, #0]
 801a0e6:	6038      	str	r0, [r7, #0]
 801a0e8:	f001 fa58 	bl	801b59c <_ZN8touchgfx6Screen4drawEv>
 801a0ec:	e7ec      	b.n	801a0c8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801a0ee:	bf00      	nop
 801a0f0:	0802f960 	.word	0x0802f960
 801a0f4:	2001515c 	.word	0x2001515c
 801a0f8:	b5e8b5cd 	.word	0xb5e8b5cd
 801a0fc:	f407a5c2 	.word	0xf407a5c2
 801a100:	20000044 	.word	0x20000044
 801a104:	2001516c 	.word	0x2001516c
 801a108:	20015160 	.word	0x20015160

0801a10c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a10c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a110:	3b01      	subs	r3, #1
 801a112:	b29b      	uxth	r3, r3
 801a114:	428b      	cmp	r3, r1
 801a116:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a11a:	b510      	push	{r4, lr}
 801a11c:	d908      	bls.n	801a130 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801a11e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a122:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a126:	681a      	ldr	r2, [r3, #0]
 801a128:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a12c:	685a      	ldr	r2, [r3, #4]
 801a12e:	6062      	str	r2, [r4, #4]
 801a130:	bd10      	pop	{r4, pc}
	...

0801a134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a138:	b08f      	sub	sp, #60	; 0x3c
 801a13a:	4b8f      	ldr	r3, [pc, #572]	; (801a378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801a13c:	4683      	mov	fp, r0
 801a13e:	ac0a      	add	r4, sp, #40	; 0x28
 801a140:	e884 0006 	stmia.w	r4, {r1, r2}
 801a144:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a148:	4620      	mov	r0, r4
 801a14a:	4b8c      	ldr	r3, [pc, #560]	; (801a37c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801a14c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a150:	f7ff fe0f 	bl	8019d72 <_ZN8touchgfx4Rect10restrictToEss>
 801a154:	4620      	mov	r0, r4
 801a156:	f7fc ffe0 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a15a:	2800      	cmp	r0, #0
 801a15c:	d16a      	bne.n	801a234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a15e:	9403      	str	r4, [sp, #12]
 801a160:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801a164:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801a168:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801a16c:	9301      	str	r3, [sp, #4]
 801a16e:	35a4      	adds	r5, #164	; 0xa4
 801a170:	b15c      	cbz	r4, 801a18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a172:	4629      	mov	r1, r5
 801a174:	9803      	ldr	r0, [sp, #12]
 801a176:	f7ff fe4d 	bl	8019e14 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a17a:	3c01      	subs	r4, #1
 801a17c:	b118      	cbz	r0, 801a186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801a17e:	b2a1      	uxth	r1, r4
 801a180:	9801      	ldr	r0, [sp, #4]
 801a182:	f7ff ffc3 	bl	801a10c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a186:	3d08      	subs	r5, #8
 801a188:	e7f2      	b.n	801a170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801a18a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801a18e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a192:	f8cd a010 	str.w	sl, [sp, #16]
 801a196:	9302      	str	r3, [sp, #8]
 801a198:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a19c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801a1a0:	9306      	str	r3, [sp, #24]
 801a1a2:	445c      	add	r4, fp
 801a1a4:	2500      	movs	r5, #0
 801a1a6:	4626      	mov	r6, r4
 801a1a8:	f8cd a014 	str.w	sl, [sp, #20]
 801a1ac:	462f      	mov	r7, r5
 801a1ae:	9b05      	ldr	r3, [sp, #20]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d073      	beq.n	801a29c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a1b4:	9903      	ldr	r1, [sp, #12]
 801a1b6:	4630      	mov	r0, r6
 801a1b8:	f7ff fdb9 	bl	8019d2e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a1bc:	b350      	cbz	r0, 801a214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a1be:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801a1c2:	f9b6 c000 	ldrsh.w	ip, [r6]
 801a1c6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801a1ca:	45e6      	cmp	lr, ip
 801a1cc:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801a1d0:	db33      	blt.n	801a23a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a1d2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a1d6:	88b3      	ldrh	r3, [r6, #4]
 801a1d8:	4472      	add	r2, lr
 801a1da:	4463      	add	r3, ip
 801a1dc:	b212      	sxth	r2, r2
 801a1de:	b21b      	sxth	r3, r3
 801a1e0:	429a      	cmp	r2, r3
 801a1e2:	dc2a      	bgt.n	801a23a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a1e4:	fa1f f289 	uxth.w	r2, r9
 801a1e8:	88f3      	ldrh	r3, [r6, #6]
 801a1ea:	45c8      	cmp	r8, r9
 801a1ec:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a1f0:	4413      	add	r3, r2
 801a1f2:	fa1f fc88 	uxth.w	ip, r8
 801a1f6:	b29b      	uxth	r3, r3
 801a1f8:	fa0f fe83 	sxth.w	lr, r3
 801a1fc:	db0f      	blt.n	801a21e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a1fe:	eba3 030c 	sub.w	r3, r3, ip
 801a202:	1ac9      	subs	r1, r1, r3
 801a204:	b209      	sxth	r1, r1
 801a206:	2900      	cmp	r1, #0
 801a208:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a20c:	dd12      	ble.n	801a234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a20e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801a212:	4605      	mov	r5, r0
 801a214:	9b05      	ldr	r3, [sp, #20]
 801a216:	3e08      	subs	r6, #8
 801a218:	3b01      	subs	r3, #1
 801a21a:	9305      	str	r3, [sp, #20]
 801a21c:	e7c7      	b.n	801a1ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801a21e:	4461      	add	r1, ip
 801a220:	b209      	sxth	r1, r1
 801a222:	4571      	cmp	r1, lr
 801a224:	dc38      	bgt.n	801a298 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801a226:	eba2 020c 	sub.w	r2, r2, ip
 801a22a:	b212      	sxth	r2, r2
 801a22c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a230:	2a00      	cmp	r2, #0
 801a232:	dcee      	bgt.n	801a212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a234:	b00f      	add	sp, #60	; 0x3c
 801a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a23a:	45c8      	cmp	r8, r9
 801a23c:	db2c      	blt.n	801a298 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801a23e:	88f3      	ldrh	r3, [r6, #6]
 801a240:	4499      	add	r9, r3
 801a242:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801a246:	4498      	add	r8, r3
 801a248:	fa0f f989 	sxth.w	r9, r9
 801a24c:	fa0f f888 	sxth.w	r8, r8
 801a250:	45c1      	cmp	r9, r8
 801a252:	db21      	blt.n	801a298 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801a254:	fa1f f28c 	uxth.w	r2, ip
 801a258:	88b3      	ldrh	r3, [r6, #4]
 801a25a:	45e6      	cmp	lr, ip
 801a25c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a260:	4413      	add	r3, r2
 801a262:	fa1f f88e 	uxth.w	r8, lr
 801a266:	b29b      	uxth	r3, r3
 801a268:	fa0f f983 	sxth.w	r9, r3
 801a26c:	db0a      	blt.n	801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801a26e:	eba3 0308 	sub.w	r3, r3, r8
 801a272:	1ac9      	subs	r1, r1, r3
 801a274:	b209      	sxth	r1, r1
 801a276:	2900      	cmp	r1, #0
 801a278:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801a27c:	ddda      	ble.n	801a234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a27e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801a282:	e7c6      	b.n	801a212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a284:	4441      	add	r1, r8
 801a286:	b209      	sxth	r1, r1
 801a288:	4549      	cmp	r1, r9
 801a28a:	dc05      	bgt.n	801a298 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801a28c:	eba2 0208 	sub.w	r2, r2, r8
 801a290:	b212      	sxth	r2, r2
 801a292:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a296:	e7cb      	b.n	801a230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801a298:	4607      	mov	r7, r0
 801a29a:	e7bb      	b.n	801a214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a29c:	2d00      	cmp	r5, #0
 801a29e:	d181      	bne.n	801a1a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801a2a0:	2f00      	cmp	r7, #0
 801a2a2:	f000 81dd 	beq.w	801a660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801a2a6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801a2aa:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801a2ae:	b2b3      	uxth	r3, r6
 801a2b0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801a2b4:	9305      	str	r3, [sp, #20]
 801a2b6:	9a05      	ldr	r2, [sp, #20]
 801a2b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801a2bc:	4413      	add	r3, r2
 801a2be:	b2ba      	uxth	r2, r7
 801a2c0:	4492      	add	sl, r2
 801a2c2:	b29b      	uxth	r3, r3
 801a2c4:	fa1f fa8a 	uxth.w	sl, sl
 801a2c8:	fa0f f883 	sxth.w	r8, r3
 801a2cc:	fa0f f98a 	sxth.w	r9, sl
 801a2d0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801a2d4:	9b04      	ldr	r3, [sp, #16]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d052      	beq.n	801a380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801a2da:	9903      	ldr	r1, [sp, #12]
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f7ff fd26 	bl	8019d2e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a2e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a2e6:	b1c0      	cbz	r0, 801a31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a2e8:	f9b4 e000 	ldrsh.w	lr, [r4]
 801a2ec:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a2f0:	4576      	cmp	r6, lr
 801a2f2:	dc22      	bgt.n	801a33a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a2f4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a2f8:	44f4      	add	ip, lr
 801a2fa:	fa0f fc8c 	sxth.w	ip, ip
 801a2fe:	45e0      	cmp	r8, ip
 801a300:	db1b      	blt.n	801a33a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a302:	428f      	cmp	r7, r1
 801a304:	fa1f fc81 	uxth.w	ip, r1
 801a308:	88e1      	ldrh	r1, [r4, #6]
 801a30a:	dc0d      	bgt.n	801a328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801a30c:	ebaa 0c0c 	sub.w	ip, sl, ip
 801a310:	f8a4 9002 	strh.w	r9, [r4, #2]
 801a314:	eba1 010c 	sub.w	r1, r1, ip
 801a318:	80e1      	strh	r1, [r4, #6]
 801a31a:	4628      	mov	r0, r5
 801a31c:	9904      	ldr	r1, [sp, #16]
 801a31e:	3c08      	subs	r4, #8
 801a320:	4605      	mov	r5, r0
 801a322:	3901      	subs	r1, #1
 801a324:	9104      	str	r1, [sp, #16]
 801a326:	e7d3      	b.n	801a2d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801a328:	4461      	add	r1, ip
 801a32a:	b209      	sxth	r1, r1
 801a32c:	4549      	cmp	r1, r9
 801a32e:	dcf5      	bgt.n	801a31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a330:	eba2 0c0c 	sub.w	ip, r2, ip
 801a334:	f8a4 c006 	strh.w	ip, [r4, #6]
 801a338:	e7ef      	b.n	801a31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a33a:	428f      	cmp	r7, r1
 801a33c:	dcee      	bgt.n	801a31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a33e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801a342:	4461      	add	r1, ip
 801a344:	b209      	sxth	r1, r1
 801a346:	4589      	cmp	r9, r1
 801a348:	dbe8      	blt.n	801a31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a34a:	4576      	cmp	r6, lr
 801a34c:	fa1f fc8e 	uxth.w	ip, lr
 801a350:	88a1      	ldrh	r1, [r4, #4]
 801a352:	dc07      	bgt.n	801a364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801a354:	eba3 0c0c 	sub.w	ip, r3, ip
 801a358:	f8a4 8000 	strh.w	r8, [r4]
 801a35c:	eba1 010c 	sub.w	r1, r1, ip
 801a360:	80a1      	strh	r1, [r4, #4]
 801a362:	e7da      	b.n	801a31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a364:	4461      	add	r1, ip
 801a366:	b209      	sxth	r1, r1
 801a368:	4588      	cmp	r8, r1
 801a36a:	dbd7      	blt.n	801a31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a36c:	9905      	ldr	r1, [sp, #20]
 801a36e:	eba1 0c0c 	sub.w	ip, r1, ip
 801a372:	f8a4 c004 	strh.w	ip, [r4, #4]
 801a376:	e7d0      	b.n	801a31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a378:	20015116 	.word	0x20015116
 801a37c:	20015114 	.word	0x20015114
 801a380:	2d00      	cmp	r5, #0
 801a382:	f000 816d 	beq.w	801a660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801a386:	9b06      	ldr	r3, [sp, #24]
 801a388:	445b      	add	r3, fp
 801a38a:	461c      	mov	r4, r3
 801a38c:	9b02      	ldr	r3, [sp, #8]
 801a38e:	3301      	adds	r3, #1
 801a390:	f000 8166 	beq.w	801a660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801a394:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801a398:	9803      	ldr	r0, [sp, #12]
 801a39a:	4629      	mov	r1, r5
 801a39c:	f7ff fd3a 	bl	8019e14 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a3a0:	b120      	cbz	r0, 801a3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801a3a2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a3a6:	9801      	ldr	r0, [sp, #4]
 801a3a8:	f7ff feb0 	bl	801a10c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a3ac:	9903      	ldr	r1, [sp, #12]
 801a3ae:	4628      	mov	r0, r5
 801a3b0:	f7ff fcbd 	bl	8019d2e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a3b4:	2800      	cmp	r0, #0
 801a3b6:	f000 809c 	beq.w	801a4f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801a3ba:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801a3be:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801a3c2:	fa1f f189 	uxth.w	r1, r9
 801a3c6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801a3ca:	9309      	str	r3, [sp, #36]	; 0x24
 801a3cc:	eb01 0c03 	add.w	ip, r1, r3
 801a3d0:	b283      	uxth	r3, r0
 801a3d2:	4548      	cmp	r0, r9
 801a3d4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801a3d8:	fa1f fa8c 	uxth.w	sl, ip
 801a3dc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a3e0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801a3e4:	eb03 050c 	add.w	r5, r3, ip
 801a3e8:	b2ad      	uxth	r5, r5
 801a3ea:	9505      	str	r5, [sp, #20]
 801a3ec:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801a3f0:	9504      	str	r5, [sp, #16]
 801a3f2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801a3f6:	f340 8099 	ble.w	801a52c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801a3fa:	1a5b      	subs	r3, r3, r1
 801a3fc:	4596      	cmp	lr, r2
 801a3fe:	fa0f f08a 	sxth.w	r0, sl
 801a402:	b29b      	uxth	r3, r3
 801a404:	b21e      	sxth	r6, r3
 801a406:	dd2e      	ble.n	801a466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801a408:	9f02      	ldr	r7, [sp, #8]
 801a40a:	fa1f fe8e 	uxth.w	lr, lr
 801a40e:	b292      	uxth	r2, r2
 801a410:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801a414:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801a418:	9f04      	ldr	r7, [sp, #16]
 801a41a:	ebae 0102 	sub.w	r1, lr, r2
 801a41e:	44a6      	add	lr, r4
 801a420:	1a3f      	subs	r7, r7, r0
 801a422:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801a426:	b289      	uxth	r1, r1
 801a428:	4402      	add	r2, r0
 801a42a:	fa0f fe8e 	sxth.w	lr, lr
 801a42e:	b20d      	sxth	r5, r1
 801a430:	b212      	sxth	r2, r2
 801a432:	436f      	muls	r7, r5
 801a434:	ebae 0202 	sub.w	r2, lr, r2
 801a438:	4372      	muls	r2, r6
 801a43a:	4297      	cmp	r7, r2
 801a43c:	db09      	blt.n	801a452 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801a43e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801a442:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801a446:	449c      	add	ip, r3
 801a448:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a44c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a450:	e686      	b.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a452:	4421      	add	r1, r4
 801a454:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801a458:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801a45c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a460:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a464:	e67c      	b.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a466:	9f04      	ldr	r7, [sp, #16]
 801a468:	42b8      	cmp	r0, r7
 801a46a:	da27      	bge.n	801a4bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801a46c:	9902      	ldr	r1, [sp, #8]
 801a46e:	1a3f      	subs	r7, r7, r0
 801a470:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801a474:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801a478:	eb05 010e 	add.w	r1, r5, lr
 801a47c:	fa1f f881 	uxth.w	r8, r1
 801a480:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801a484:	4411      	add	r1, r2
 801a486:	fa0f f988 	sxth.w	r9, r8
 801a48a:	eba2 020e 	sub.w	r2, r2, lr
 801a48e:	eba1 0108 	sub.w	r1, r1, r8
 801a492:	4372      	muls	r2, r6
 801a494:	b289      	uxth	r1, r1
 801a496:	fa0f f881 	sxth.w	r8, r1
 801a49a:	fb08 f707 	mul.w	r7, r8, r7
 801a49e:	42ba      	cmp	r2, r7
 801a4a0:	dc06      	bgt.n	801a4b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801a4a2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801a4a6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801a4aa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801a4ae:	e7ca      	b.n	801a446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801a4b0:	4429      	add	r1, r5
 801a4b2:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801a4b6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a4ba:	e651      	b.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a4bc:	9805      	ldr	r0, [sp, #20]
 801a4be:	2d06      	cmp	r5, #6
 801a4c0:	ebaa 0000 	sub.w	r0, sl, r0
 801a4c4:	b280      	uxth	r0, r0
 801a4c6:	fa0f fe80 	sxth.w	lr, r0
 801a4ca:	d817      	bhi.n	801a4fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801a4cc:	9b04      	ldr	r3, [sp, #16]
 801a4ce:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801a4d2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801a4d6:	1c6b      	adds	r3, r5, #1
 801a4d8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801a4dc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801a4e0:	9b01      	ldr	r3, [sp, #4]
 801a4e2:	9801      	ldr	r0, [sp, #4]
 801a4e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a4e8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801a4ec:	805a      	strh	r2, [r3, #2]
 801a4ee:	809e      	strh	r6, [r3, #4]
 801a4f0:	80d9      	strh	r1, [r3, #6]
 801a4f2:	9b02      	ldr	r3, [sp, #8]
 801a4f4:	3c08      	subs	r4, #8
 801a4f6:	3b01      	subs	r3, #1
 801a4f8:	9302      	str	r3, [sp, #8]
 801a4fa:	e747      	b.n	801a38c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801a4fc:	9a02      	ldr	r2, [sp, #8]
 801a4fe:	45b6      	cmp	lr, r6
 801a500:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a504:	db0d      	blt.n	801a522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a506:	449c      	add	ip, r3
 801a508:	445a      	add	r2, fp
 801a50a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801a50e:	fa1f fc8c 	uxth.w	ip, ip
 801a512:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801a516:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a51a:	448c      	add	ip, r1
 801a51c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801a520:	e61e      	b.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a522:	445a      	add	r2, fp
 801a524:	4484      	add	ip, r0
 801a526:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801a52a:	e78f      	b.n	801a44c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a52c:	fa1f f18e 	uxth.w	r1, lr
 801a530:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801a534:	b293      	uxth	r3, r2
 801a536:	4596      	cmp	lr, r2
 801a538:	eb01 0806 	add.w	r8, r1, r6
 801a53c:	9306      	str	r3, [sp, #24]
 801a53e:	fa1f f888 	uxth.w	r8, r8
 801a542:	9f06      	ldr	r7, [sp, #24]
 801a544:	fa0f f388 	sxth.w	r3, r8
 801a548:	9307      	str	r3, [sp, #28]
 801a54a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801a54e:	443b      	add	r3, r7
 801a550:	b29b      	uxth	r3, r3
 801a552:	9308      	str	r3, [sp, #32]
 801a554:	da24      	bge.n	801a5a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801a556:	9905      	ldr	r1, [sp, #20]
 801a558:	eba3 0308 	sub.w	r3, r3, r8
 801a55c:	eba2 020e 	sub.w	r2, r2, lr
 801a560:	eba9 0000 	sub.w	r0, r9, r0
 801a564:	ebaa 0401 	sub.w	r4, sl, r1
 801a568:	b29b      	uxth	r3, r3
 801a56a:	b2a4      	uxth	r4, r4
 801a56c:	b219      	sxth	r1, r3
 801a56e:	b225      	sxth	r5, r4
 801a570:	4348      	muls	r0, r1
 801a572:	436a      	muls	r2, r5
 801a574:	4282      	cmp	r2, r0
 801a576:	9a02      	ldr	r2, [sp, #8]
 801a578:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a57c:	445a      	add	r2, fp
 801a57e:	dc06      	bgt.n	801a58e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801a580:	9b07      	ldr	r3, [sp, #28]
 801a582:	44a4      	add	ip, r4
 801a584:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801a588:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801a58c:	e75e      	b.n	801a44c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a58e:	9904      	ldr	r1, [sp, #16]
 801a590:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801a594:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801a598:	4433      	add	r3, r6
 801a59a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a59e:	e5df      	b.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a5a0:	9f06      	ldr	r7, [sp, #24]
 801a5a2:	9b04      	ldr	r3, [sp, #16]
 801a5a4:	1bc9      	subs	r1, r1, r7
 801a5a6:	fa0f f78a 	sxth.w	r7, sl
 801a5aa:	b289      	uxth	r1, r1
 801a5ac:	429f      	cmp	r7, r3
 801a5ae:	fa0f fe81 	sxth.w	lr, r1
 801a5b2:	dd23      	ble.n	801a5fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801a5b4:	9a05      	ldr	r2, [sp, #20]
 801a5b6:	eba9 0000 	sub.w	r0, r9, r0
 801a5ba:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a5be:	ebaa 0202 	sub.w	r2, sl, r2
 801a5c2:	9d07      	ldr	r5, [sp, #28]
 801a5c4:	fb0e f000 	mul.w	r0, lr, r0
 801a5c8:	b292      	uxth	r2, r2
 801a5ca:	eba5 0a03 	sub.w	sl, r5, r3
 801a5ce:	9b02      	ldr	r3, [sp, #8]
 801a5d0:	b214      	sxth	r4, r2
 801a5d2:	00db      	lsls	r3, r3, #3
 801a5d4:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5d8:	445b      	add	r3, fp
 801a5da:	4550      	cmp	r0, sl
 801a5dc:	db03      	blt.n	801a5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801a5de:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801a5e2:	4494      	add	ip, r2
 801a5e4:	e732      	b.n	801a44c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a5e6:	9a04      	ldr	r2, [sp, #16]
 801a5e8:	4431      	add	r1, r6
 801a5ea:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801a5ee:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801a5f2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801a5f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a5fa:	e75c      	b.n	801a4b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801a5fc:	9b08      	ldr	r3, [sp, #32]
 801a5fe:	2d06      	cmp	r5, #6
 801a600:	eba3 0308 	sub.w	r3, r3, r8
 801a604:	b29b      	uxth	r3, r3
 801a606:	b218      	sxth	r0, r3
 801a608:	d813      	bhi.n	801a632 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801a60a:	9b07      	ldr	r3, [sp, #28]
 801a60c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801a610:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801a614:	1c6b      	adds	r3, r5, #1
 801a616:	9901      	ldr	r1, [sp, #4]
 801a618:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801a61c:	9b01      	ldr	r3, [sp, #4]
 801a61e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801a622:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a626:	805a      	strh	r2, [r3, #2]
 801a628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a62a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801a62e:	809a      	strh	r2, [r3, #4]
 801a630:	e75f      	b.n	801a4f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801a632:	9c02      	ldr	r4, [sp, #8]
 801a634:	4570      	cmp	r0, lr
 801a636:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801a63a:	db0d      	blt.n	801a658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801a63c:	4431      	add	r1, r6
 801a63e:	9b06      	ldr	r3, [sp, #24]
 801a640:	445c      	add	r4, fp
 801a642:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a646:	b289      	uxth	r1, r1
 801a648:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801a64c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a650:	4419      	add	r1, r3
 801a652:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801a656:	e583      	b.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a658:	445c      	add	r4, fp
 801a65a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801a65e:	e79b      	b.n	801a598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801a660:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801a664:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a668:	1e65      	subs	r5, r4, #1
 801a66a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801a66e:	b2ad      	uxth	r5, r5
 801a670:	42b5      	cmp	r5, r6
 801a672:	d044      	beq.n	801a6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801a674:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a678:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 801a67c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801a680:	4282      	cmp	r2, r0
 801a682:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801a686:	d11f      	bne.n	801a6c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801a688:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801a68c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801a690:	459c      	cmp	ip, r3
 801a692:	d119      	bne.n	801a6c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801a694:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801a698:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a69c:	19d8      	adds	r0, r3, r7
 801a69e:	b200      	sxth	r0, r0
 801a6a0:	4288      	cmp	r0, r1
 801a6a2:	d109      	bne.n	801a6b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801a6a4:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 801a6a8:	4413      	add	r3, r2
 801a6aa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a6ae:	4629      	mov	r1, r5
 801a6b0:	9801      	ldr	r0, [sp, #4]
 801a6b2:	f7ff fd2b 	bl	801a10c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a6b6:	e003      	b.n	801a6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a6b8:	4411      	add	r1, r2
 801a6ba:	b209      	sxth	r1, r1
 801a6bc:	42b9      	cmp	r1, r7
 801a6be:	d0f3      	beq.n	801a6a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801a6c0:	3d01      	subs	r5, #1
 801a6c2:	3c08      	subs	r4, #8
 801a6c4:	b2ad      	uxth	r5, r5
 801a6c6:	e7d3      	b.n	801a670 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801a6c8:	42b9      	cmp	r1, r7
 801a6ca:	d1f9      	bne.n	801a6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a6cc:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801a6d0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801a6d4:	4299      	cmp	r1, r3
 801a6d6:	d1f3      	bne.n	801a6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a6d8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801a6dc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a6e0:	181f      	adds	r7, r3, r0
 801a6e2:	b23f      	sxth	r7, r7
 801a6e4:	42ba      	cmp	r2, r7
 801a6e6:	d105      	bne.n	801a6f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801a6e8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801a6ec:	440b      	add	r3, r1
 801a6ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a6f2:	e7dc      	b.n	801a6ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801a6f4:	440a      	add	r2, r1
 801a6f6:	b212      	sxth	r2, r2
 801a6f8:	4290      	cmp	r0, r2
 801a6fa:	d1e1      	bne.n	801a6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801a6fc:	e7f6      	b.n	801a6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801a6fe:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801a702:	2e07      	cmp	r6, #7
 801a704:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801a708:	d812      	bhi.n	801a730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801a70a:	1c75      	adds	r5, r6, #1
 801a70c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801a710:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801a714:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801a718:	9d01      	ldr	r5, [sp, #4]
 801a71a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a71e:	442c      	add	r4, r5
 801a720:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801a724:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a728:	8061      	strh	r1, [r4, #2]
 801a72a:	80a2      	strh	r2, [r4, #4]
 801a72c:	80e3      	strh	r3, [r4, #6]
 801a72e:	e581      	b.n	801a234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a730:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801a734:	3e01      	subs	r6, #1
 801a736:	445c      	add	r4, fp
 801a738:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801a73c:	f04f 37ff 	mov.w	r7, #4294967295
 801a740:	2500      	movs	r5, #0
 801a742:	9305      	str	r3, [sp, #20]
 801a744:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801a748:	1e72      	subs	r2, r6, #1
 801a74a:	9302      	str	r3, [sp, #8]
 801a74c:	4691      	mov	r9, r2
 801a74e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801a752:	9304      	str	r3, [sp, #16]
 801a754:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801a758:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a75c:	6818      	ldr	r0, [r3, #0]
 801a75e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a762:	9207      	str	r2, [sp, #28]
 801a764:	bf16      	itet	ne
 801a766:	9905      	ldrne	r1, [sp, #20]
 801a768:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a76c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a770:	9306      	str	r3, [sp, #24]
 801a772:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a776:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a77a:	fb18 f801 	smulbb	r8, r8, r1
 801a77e:	6859      	ldr	r1, [r3, #4]
 801a780:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a784:	4671      	mov	r1, lr
 801a786:	a80c      	add	r0, sp, #48	; 0x30
 801a788:	f7ff fb6a 	bl	8019e60 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a78c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801a790:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801a794:	f04f 0c08 	mov.w	ip, #8
 801a798:	9b04      	ldr	r3, [sp, #16]
 801a79a:	9a02      	ldr	r2, [sp, #8]
 801a79c:	fb10 f001 	smulbb	r0, r0, r1
 801a7a0:	fb02 8803 	mla	r8, r2, r3, r8
 801a7a4:	eba0 0108 	sub.w	r1, r0, r8
 801a7a8:	fb90 f0fc 	sdiv	r0, r0, ip
 801a7ac:	4288      	cmp	r0, r1
 801a7ae:	dc20      	bgt.n	801a7f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801a7b0:	4551      	cmp	r1, sl
 801a7b2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a7b6:	da03      	bge.n	801a7c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801a7b8:	b1d9      	cbz	r1, 801a7f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801a7ba:	468a      	mov	sl, r1
 801a7bc:	464f      	mov	r7, r9
 801a7be:	4635      	mov	r5, r6
 801a7c0:	f109 39ff 	add.w	r9, r9, #4294967295
 801a7c4:	f119 0f02 	cmn.w	r9, #2
 801a7c8:	d1c6      	bne.n	801a758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801a7ca:	4616      	mov	r6, r2
 801a7cc:	3201      	adds	r2, #1
 801a7ce:	f1a4 0408 	sub.w	r4, r4, #8
 801a7d2:	d1b7      	bne.n	801a744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801a7d4:	9b01      	ldr	r3, [sp, #4]
 801a7d6:	b2ac      	uxth	r4, r5
 801a7d8:	00ed      	lsls	r5, r5, #3
 801a7da:	1958      	adds	r0, r3, r5
 801a7dc:	1c7b      	adds	r3, r7, #1
 801a7de:	d10b      	bne.n	801a7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801a7e0:	4601      	mov	r1, r0
 801a7e2:	9803      	ldr	r0, [sp, #12]
 801a7e4:	f7ff fb3c 	bl	8019e60 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a7e8:	4621      	mov	r1, r4
 801a7ea:	9801      	ldr	r0, [sp, #4]
 801a7ec:	f7ff fc8e 	bl	801a10c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a7f0:	e4b6      	b.n	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a7f2:	464f      	mov	r7, r9
 801a7f4:	4635      	mov	r5, r6
 801a7f6:	e7ed      	b.n	801a7d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801a7f8:	9b01      	ldr	r3, [sp, #4]
 801a7fa:	00ff      	lsls	r7, r7, #3
 801a7fc:	445d      	add	r5, fp
 801a7fe:	19d9      	adds	r1, r3, r7
 801a800:	445f      	add	r7, fp
 801a802:	f7ff fb2d 	bl	8019e60 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a806:	9b03      	ldr	r3, [sp, #12]
 801a808:	cb03      	ldmia	r3!, {r0, r1}
 801a80a:	9b03      	ldr	r3, [sp, #12]
 801a80c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801a810:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801a814:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801a818:	6869      	ldr	r1, [r5, #4]
 801a81a:	c303      	stmia	r3!, {r0, r1}
 801a81c:	e7e4      	b.n	801a7e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801a81e:	bf00      	nop

0801a820 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a824:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801a828:	b09b      	sub	sp, #108	; 0x6c
 801a82a:	4604      	mov	r4, r0
 801a82c:	4630      	mov	r0, r6
 801a82e:	f7fc fc74 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a832:	4605      	mov	r5, r0
 801a834:	b948      	cbnz	r0, 801a84a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801a836:	6823      	ldr	r3, [r4, #0]
 801a838:	4620      	mov	r0, r4
 801a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a83c:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a840:	4798      	blx	r3
 801a842:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801a846:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801a84a:	4bc5      	ldr	r3, [pc, #788]	; (801ab60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d03f      	beq.n	801a8d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a852:	4dc4      	ldr	r5, [pc, #784]	; (801ab64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801a854:	4628      	mov	r0, r5
 801a856:	f7fc fc60 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a85a:	4606      	mov	r6, r0
 801a85c:	2800      	cmp	r0, #0
 801a85e:	d138      	bne.n	801a8d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a860:	4628      	mov	r0, r5
 801a862:	f7ff f991 	bl	8019b88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a866:	6823      	ldr	r3, [r4, #0]
 801a868:	6829      	ldr	r1, [r5, #0]
 801a86a:	4620      	mov	r0, r4
 801a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a86e:	686a      	ldr	r2, [r5, #4]
 801a870:	4798      	blx	r3
 801a872:	802e      	strh	r6, [r5, #0]
 801a874:	806e      	strh	r6, [r5, #2]
 801a876:	80ae      	strh	r6, [r5, #4]
 801a878:	80ee      	strh	r6, [r5, #6]
 801a87a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801a87e:	4dba      	ldr	r5, [pc, #744]	; (801ab68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801a880:	4640      	mov	r0, r8
 801a882:	f7ff fbe7 	bl	801a054 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a886:	882e      	ldrh	r6, [r5, #0]
 801a888:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801a88c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801a890:	4633      	mov	r3, r6
 801a892:	42bb      	cmp	r3, r7
 801a894:	d224      	bcs.n	801a8e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a896:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801a89a:	2907      	cmp	r1, #7
 801a89c:	d816      	bhi.n	801a8cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801a89e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a8a2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801a8a6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801a8aa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801a8ae:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801a8b2:	1c4a      	adds	r2, r1, #1
 801a8b4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801a8b8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801a8bc:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801a8c0:	f8a2 a002 	strh.w	sl, [r2, #2]
 801a8c4:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a8c8:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a8cc:	3301      	adds	r3, #1
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	e7df      	b.n	801a892 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801a8d2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d1cf      	bne.n	801a87a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801a8da:	b01b      	add	sp, #108	; 0x6c
 801a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8e0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801a8e4:	42b3      	cmp	r3, r6
 801a8e6:	d90c      	bls.n	801a902 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801a8e8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a8ec:	6822      	ldr	r2, [r4, #0]
 801a8ee:	3601      	adds	r6, #1
 801a8f0:	4620      	mov	r0, r4
 801a8f2:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801a8f4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801a8f8:	b2b6      	uxth	r6, r6
 801a8fa:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801a8fe:	47b8      	blx	r7
 801a900:	e7ee      	b.n	801a8e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a902:	4a9a      	ldr	r2, [pc, #616]	; (801ab6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a904:	6813      	ldr	r3, [r2, #0]
 801a906:	4691      	mov	r9, r2
 801a908:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a90c:	2b01      	cmp	r3, #1
 801a90e:	f040 80e0 	bne.w	801aad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801a912:	8829      	ldrh	r1, [r5, #0]
 801a914:	2600      	movs	r6, #0
 801a916:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801a91a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801a91e:	33ae      	adds	r3, #174	; 0xae
 801a920:	428f      	cmp	r7, r1
 801a922:	f103 0308 	add.w	r3, r3, #8
 801a926:	dd0a      	ble.n	801a93e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801a928:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801a92c:	3101      	adds	r1, #1
 801a92e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801a932:	4402      	add	r2, r0
 801a934:	b212      	sxth	r2, r2
 801a936:	4296      	cmp	r6, r2
 801a938:	bfb8      	it	lt
 801a93a:	4616      	movlt	r6, r2
 801a93c:	e7f0      	b.n	801a920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801a93e:	4b8c      	ldr	r3, [pc, #560]	; (801ab70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a940:	f8df 9228 	ldr.w	r9, [pc, #552]	; 801ab6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801a944:	881b      	ldrh	r3, [r3, #0]
 801a946:	2b0f      	cmp	r3, #15
 801a948:	bf8c      	ite	hi
 801a94a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801a94e:	f04f 0b01 	movls.w	fp, #1
 801a952:	2300      	movs	r3, #0
 801a954:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a958:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801a95c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801a960:	4b82      	ldr	r3, [pc, #520]	; (801ab6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a962:	4438      	add	r0, r7
 801a964:	b207      	sxth	r7, r0
 801a966:	6818      	ldr	r0, [r3, #0]
 801a968:	42b7      	cmp	r7, r6
 801a96a:	6803      	ldr	r3, [r0, #0]
 801a96c:	f280 8083 	bge.w	801aa76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801a970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a974:	4798      	blx	r3
 801a976:	eb07 030b 	add.w	r3, r7, fp
 801a97a:	4298      	cmp	r0, r3
 801a97c:	da07      	bge.n	801a98e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801a97e:	42b0      	cmp	r0, r6
 801a980:	da05      	bge.n	801a98e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801a982:	4287      	cmp	r7, r0
 801a984:	dd6c      	ble.n	801aa60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a986:	2f00      	cmp	r7, #0
 801a988:	dd6a      	ble.n	801aa60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a98a:	4630      	mov	r0, r6
 801a98c:	e004      	b.n	801a998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801a98e:	4287      	cmp	r7, r0
 801a990:	dcfb      	bgt.n	801a98a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801a992:	42b0      	cmp	r0, r6
 801a994:	bfa8      	it	ge
 801a996:	4630      	movge	r0, r6
 801a998:	4b76      	ldr	r3, [pc, #472]	; (801ab74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801a99a:	1bc0      	subs	r0, r0, r7
 801a99c:	2200      	movs	r2, #0
 801a99e:	f8ad 7016 	strh.w	r7, [sp, #22]
 801a9a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a9a6:	882f      	ldrh	r7, [r5, #0]
 801a9a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a9ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a9b0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a9b4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801a9b8:	42bb      	cmp	r3, r7
 801a9ba:	d9cd      	bls.n	801a958 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801a9bc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801a9c0:	ab07      	add	r3, sp, #28
 801a9c2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a9c6:	6851      	ldr	r1, [r2, #4]
 801a9c8:	c303      	stmia	r3!, {r0, r1}
 801a9ca:	a905      	add	r1, sp, #20
 801a9cc:	a807      	add	r0, sp, #28
 801a9ce:	f7ff f9ae 	bl	8019d2e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a9d2:	2800      	cmp	r0, #0
 801a9d4:	d04c      	beq.n	801aa70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801a9d6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a9da:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801a9de:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801a9e2:	4686      	mov	lr, r0
 801a9e4:	4290      	cmp	r0, r2
 801a9e6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a9ea:	4450      	add	r0, sl
 801a9ec:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801a9f0:	bfb8      	it	lt
 801a9f2:	4696      	movlt	lr, r2
 801a9f4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a9f8:	4452      	add	r2, sl
 801a9fa:	b280      	uxth	r0, r0
 801a9fc:	4299      	cmp	r1, r3
 801a9fe:	468c      	mov	ip, r1
 801aa00:	b292      	uxth	r2, r2
 801aa02:	9302      	str	r3, [sp, #8]
 801aa04:	bfb8      	it	lt
 801aa06:	469c      	movlt	ip, r3
 801aa08:	b203      	sxth	r3, r0
 801aa0a:	fa0f fa82 	sxth.w	sl, r2
 801aa0e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801aa12:	f8ad c01e 	strh.w	ip, [sp, #30]
 801aa16:	4553      	cmp	r3, sl
 801aa18:	bfb8      	it	lt
 801aa1a:	4602      	movlt	r2, r0
 801aa1c:	9b02      	ldr	r3, [sp, #8]
 801aa1e:	eba2 020e 	sub.w	r2, r2, lr
 801aa22:	f8ad 2020 	strh.w	r2, [sp, #32]
 801aa26:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801aa2a:	4411      	add	r1, r2
 801aa2c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801aa30:	4413      	add	r3, r2
 801aa32:	b289      	uxth	r1, r1
 801aa34:	b29b      	uxth	r3, r3
 801aa36:	b208      	sxth	r0, r1
 801aa38:	b21a      	sxth	r2, r3
 801aa3a:	4290      	cmp	r0, r2
 801aa3c:	bfb8      	it	lt
 801aa3e:	460b      	movlt	r3, r1
 801aa40:	eba3 030c 	sub.w	r3, r3, ip
 801aa44:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aa48:	a807      	add	r0, sp, #28
 801aa4a:	f7fc fb66 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa4e:	b920      	cbnz	r0, 801aa5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801aa50:	6823      	ldr	r3, [r4, #0]
 801aa52:	a907      	add	r1, sp, #28
 801aa54:	4620      	mov	r0, r4
 801aa56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa58:	4798      	blx	r3
 801aa5a:	3701      	adds	r7, #1
 801aa5c:	b2bf      	uxth	r7, r7
 801aa5e:	e7a9      	b.n	801a9b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801aa60:	f8d9 0000 	ldr.w	r0, [r9]
 801aa64:	2101      	movs	r1, #1
 801aa66:	6803      	ldr	r3, [r0, #0]
 801aa68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801aa6c:	4798      	blx	r3
 801aa6e:	e773      	b.n	801a958 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801aa70:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801aa74:	e7e8      	b.n	801aa48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa78:	4798      	blx	r3
 801aa7a:	4b3f      	ldr	r3, [pc, #252]	; (801ab78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801aa7c:	781b      	ldrb	r3, [r3, #0]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	f43f af2b 	beq.w	801a8da <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801aa84:	2300      	movs	r3, #0
 801aa86:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801aa8a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801aa8e:	882b      	ldrh	r3, [r5, #0]
 801aa90:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801aa94:	42ab      	cmp	r3, r5
 801aa96:	f4bf af20 	bcs.w	801a8da <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801aa9a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801aa9e:	2907      	cmp	r1, #7
 801aaa0:	d814      	bhi.n	801aacc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801aaa2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801aaa6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801aaaa:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801aaae:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801aab2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801aab6:	1c4a      	adds	r2, r1, #1
 801aab8:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801aabc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801aac0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801aac4:	f8a2 c002 	strh.w	ip, [r2, #2]
 801aac8:	8097      	strh	r7, [r2, #4]
 801aaca:	80d6      	strh	r6, [r2, #6]
 801aacc:	3301      	adds	r3, #1
 801aace:	b29b      	uxth	r3, r3
 801aad0:	e7e0      	b.n	801aa94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801aad2:	2b02      	cmp	r3, #2
 801aad4:	f040 8133 	bne.w	801ad3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801aad8:	4b28      	ldr	r3, [pc, #160]	; (801ab7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801aada:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	2b01      	cmp	r3, #1
 801aae2:	f000 8098 	beq.w	801ac16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801aae6:	882a      	ldrh	r2, [r5, #0]
 801aae8:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 801aaec:	3201      	adds	r2, #1
 801aaee:	b292      	uxth	r2, r2
 801aaf0:	2900      	cmp	r1, #0
 801aaf2:	d0c2      	beq.n	801aa7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801aaf4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 801aaf8:	4694      	mov	ip, r2
 801aafa:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801aafe:	f04f 0900 	mov.w	r9, #0
 801ab02:	441e      	add	r6, r3
 801ab04:	b236      	sxth	r6, r6
 801ab06:	fa1f f38c 	uxth.w	r3, ip
 801ab0a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801ab0e:	4299      	cmp	r1, r3
 801ab10:	f240 80be 	bls.w	801ac90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801ab14:	4427      	add	r7, r4
 801ab16:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801ab1a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801ab1e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801ab22:	4283      	cmp	r3, r0
 801ab24:	f340 80a0 	ble.w	801ac68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801ab28:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 801ab2c:	46e1      	mov	r9, ip
 801ab2e:	4406      	add	r6, r0
 801ab30:	b236      	sxth	r6, r6
 801ab32:	429e      	cmp	r6, r3
 801ab34:	bfa8      	it	ge
 801ab36:	461e      	movge	r6, r3
 801ab38:	f10c 0c01 	add.w	ip, ip, #1
 801ab3c:	e7e3      	b.n	801ab06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801ab3e:	d10a      	bne.n	801ab56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801ab40:	4562      	cmp	r2, ip
 801ab42:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 801ab46:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 801ab4a:	bfb8      	it	lt
 801ab4c:	4662      	movlt	r2, ip
 801ab4e:	4288      	cmp	r0, r1
 801ab50:	bfb8      	it	lt
 801ab52:	461f      	movlt	r7, r3
 801ab54:	e086      	b.n	801ac64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801ab56:	428a      	cmp	r2, r1
 801ab58:	bfb8      	it	lt
 801ab5a:	460a      	movlt	r2, r1
 801ab5c:	e082      	b.n	801ac64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801ab5e:	bf00      	nop
 801ab60:	20015158 	.word	0x20015158
 801ab64:	20015164 	.word	0x20015164
 801ab68:	20000044 	.word	0x20000044
 801ab6c:	20015120 	.word	0x20015120
 801ab70:	20015116 	.word	0x20015116
 801ab74:	20015114 	.word	0x20015114
 801ab78:	2001511e 	.word	0x2001511e
 801ab7c:	20015118 	.word	0x20015118
 801ab80:	19a1      	adds	r1, r4, r6
 801ab82:	ab07      	add	r3, sp, #28
 801ab84:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801ab88:	6849      	ldr	r1, [r1, #4]
 801ab8a:	c303      	stmia	r3!, {r0, r1}
 801ab8c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ab90:	a807      	add	r0, sp, #28
 801ab92:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ab96:	2b13      	cmp	r3, #19
 801ab98:	440b      	add	r3, r1
 801ab9a:	bfd8      	it	le
 801ab9c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801aba0:	1a9b      	subs	r3, r3, r2
 801aba2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801aba6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801abaa:	f7ff f807 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801abae:	a807      	add	r0, sp, #28
 801abb0:	f7fc fab3 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 801abb4:	bb78      	cbnz	r0, 801ac16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801abb6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801abba:	4426      	add	r6, r4
 801abbc:	f8d9 0000 	ldr.w	r0, [r9]
 801abc0:	f1bc 0f14 	cmp.w	ip, #20
 801abc4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801abc8:	f8d0 e000 	ldr.w	lr, [r0]
 801abcc:	bfa8      	it	ge
 801abce:	f04f 0c14 	movge.w	ip, #20
 801abd2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801abd6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801abda:	fa1f fc8c 	uxth.w	ip, ip
 801abde:	f8cd c000 	str.w	ip, [sp]
 801abe2:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801abe6:	47d8      	blx	fp
 801abe8:	4683      	mov	fp, r0
 801abea:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801abee:	a807      	add	r0, sp, #28
 801abf0:	f7fe ffca 	bl	8019b88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801abf4:	6823      	ldr	r3, [r4, #0]
 801abf6:	4620      	mov	r0, r4
 801abf8:	a907      	add	r1, sp, #28
 801abfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801abfc:	4798      	blx	r3
 801abfe:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801ac02:	eba0 000b 	sub.w	r0, r0, fp
 801ac06:	b200      	sxth	r0, r0
 801ac08:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801ac0c:	b918      	cbnz	r0, 801ac16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801ac0e:	b2b9      	uxth	r1, r7
 801ac10:	4650      	mov	r0, sl
 801ac12:	f7ff fa7b 	bl	801a10c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ac16:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801ac1a:	f1bb 0f00 	cmp.w	fp, #0
 801ac1e:	f43f af2c 	beq.w	801aa7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ac22:	882b      	ldrh	r3, [r5, #0]
 801ac24:	2700      	movs	r7, #0
 801ac26:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801ac2a:	3301      	adds	r3, #1
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	b299      	uxth	r1, r3
 801ac30:	00fe      	lsls	r6, r7, #3
 801ac32:	458b      	cmp	fp, r1
 801ac34:	d9a4      	bls.n	801ab80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801ac36:	4426      	add	r6, r4
 801ac38:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801ac3c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801ac40:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801ac44:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 801ac48:	4408      	add	r0, r1
 801ac4a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801ac4e:	4461      	add	r1, ip
 801ac50:	b200      	sxth	r0, r0
 801ac52:	b209      	sxth	r1, r1
 801ac54:	4288      	cmp	r0, r1
 801ac56:	f6bf af72 	bge.w	801ab3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801ac5a:	4584      	cmp	ip, r0
 801ac5c:	4662      	mov	r2, ip
 801ac5e:	461f      	mov	r7, r3
 801ac60:	bfb8      	it	lt
 801ac62:	4602      	movlt	r2, r0
 801ac64:	3301      	adds	r3, #1
 801ac66:	e7e2      	b.n	801ac2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801ac68:	d10e      	bne.n	801ac88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801ac6a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801ac6e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801ac72:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801ac76:	4473      	add	r3, lr
 801ac78:	b21b      	sxth	r3, r3
 801ac7a:	429e      	cmp	r6, r3
 801ac7c:	bfa8      	it	ge
 801ac7e:	461e      	movge	r6, r3
 801ac80:	4287      	cmp	r7, r0
 801ac82:	bfb8      	it	lt
 801ac84:	46e1      	movlt	r9, ip
 801ac86:	e757      	b.n	801ab38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801ac88:	4286      	cmp	r6, r0
 801ac8a:	bfa8      	it	ge
 801ac8c:	4606      	movge	r6, r0
 801ac8e:	e753      	b.n	801ab38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801ac90:	eb0a 0007 	add.w	r0, sl, r7
 801ac94:	4427      	add	r7, r4
 801ac96:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801ac9a:	f1bb 0f13 	cmp.w	fp, #19
 801ac9e:	bfdc      	itt	le
 801aca0:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 801aca4:	445e      	addle	r6, fp
 801aca6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801acaa:	bfd8      	it	le
 801acac:	b236      	sxthle	r6, r6
 801acae:	f7fc fa34 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 801acb2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801acb6:	2800      	cmp	r0, #0
 801acb8:	f47f af1a 	bne.w	801aaf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801acbc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801acc0:	fa1f fb8b 	uxth.w	fp, fp
 801acc4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801acc8:	1ab6      	subs	r6, r6, r2
 801acca:	4829      	ldr	r0, [pc, #164]	; (801ad70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801accc:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801acd0:	2e14      	cmp	r6, #20
 801acd2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801acd6:	6800      	ldr	r0, [r0, #0]
 801acd8:	bfa8      	it	ge
 801acda:	2614      	movge	r6, #20
 801acdc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ace0:	f8ad 201e 	strh.w	r2, [sp, #30]
 801ace4:	b289      	uxth	r1, r1
 801ace6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801acea:	b2b6      	uxth	r6, r6
 801acec:	f8d0 c000 	ldr.w	ip, [r0]
 801acf0:	b292      	uxth	r2, r2
 801acf2:	455e      	cmp	r6, fp
 801acf4:	bf94      	ite	ls
 801acf6:	9600      	strls	r6, [sp, #0]
 801acf8:	f8cd b000 	strhi.w	fp, [sp]
 801acfc:	b29b      	uxth	r3, r3
 801acfe:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 801ad02:	47b0      	blx	r6
 801ad04:	6823      	ldr	r3, [r4, #0]
 801ad06:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ad0a:	a907      	add	r1, sp, #28
 801ad0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad0e:	4620      	mov	r0, r4
 801ad10:	4798      	blx	r3
 801ad12:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ad16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ad1a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801ad1e:	1a5b      	subs	r3, r3, r1
 801ad20:	440a      	add	r2, r1
 801ad22:	b21b      	sxth	r3, r3
 801ad24:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801ad28:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	f47f aeda 	bne.w	801aae6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801ad32:	fa1f f189 	uxth.w	r1, r9
 801ad36:	4650      	mov	r0, sl
 801ad38:	f7ff f9e8 	bl	801a10c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad3c:	e6d3      	b.n	801aae6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801ad3e:	882e      	ldrh	r6, [r5, #0]
 801ad40:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801ad44:	42b3      	cmp	r3, r6
 801ad46:	f67f ae98 	bls.w	801aa7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ad4a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801ad4e:	ab07      	add	r3, sp, #28
 801ad50:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801ad54:	6851      	ldr	r1, [r2, #4]
 801ad56:	c303      	stmia	r3!, {r0, r1}
 801ad58:	a807      	add	r0, sp, #28
 801ad5a:	f7fc f9de 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ad5e:	b920      	cbnz	r0, 801ad6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801ad60:	6823      	ldr	r3, [r4, #0]
 801ad62:	a907      	add	r1, sp, #28
 801ad64:	4620      	mov	r0, r4
 801ad66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad68:	4798      	blx	r3
 801ad6a:	3601      	adds	r6, #1
 801ad6c:	b2b6      	uxth	r6, r6
 801ad6e:	e7e7      	b.n	801ad40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801ad70:	20015120 	.word	0x20015120

0801ad74 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ad74:	4b03      	ldr	r3, [pc, #12]	; (801ad84 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ad76:	2200      	movs	r2, #0
 801ad78:	801a      	strh	r2, [r3, #0]
 801ad7a:	805a      	strh	r2, [r3, #2]
 801ad7c:	809a      	strh	r2, [r3, #4]
 801ad7e:	80da      	strh	r2, [r3, #6]
 801ad80:	4770      	bx	lr
 801ad82:	bf00      	nop
 801ad84:	20015164 	.word	0x20015164

0801ad88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	b09d      	sub	sp, #116	; 0x74
 801ad8e:	4606      	mov	r6, r0
 801ad90:	4614      	mov	r4, r2
 801ad92:	468a      	mov	sl, r1
 801ad94:	a803      	add	r0, sp, #12
 801ad96:	461d      	mov	r5, r3
 801ad98:	f000 fd7a 	bl	801b890 <_ZN8touchgfx12TextProviderC1Ev>
 801ad9c:	6833      	ldr	r3, [r6, #0]
 801ad9e:	4630      	mov	r0, r6
 801ada0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ada4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ada6:	4798      	blx	r3
 801ada8:	6833      	ldr	r3, [r6, #0]
 801adaa:	4607      	mov	r7, r0
 801adac:	4630      	mov	r0, r6
 801adae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adb0:	4798      	blx	r3
 801adb2:	462a      	mov	r2, r5
 801adb4:	2500      	movs	r5, #0
 801adb6:	4621      	mov	r1, r4
 801adb8:	9000      	str	r0, [sp, #0]
 801adba:	463b      	mov	r3, r7
 801adbc:	462c      	mov	r4, r5
 801adbe:	46a9      	mov	r9, r5
 801adc0:	46a8      	mov	r8, r5
 801adc2:	a803      	add	r0, sp, #12
 801adc4:	f000 fdb7 	bl	801b936 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801adc8:	2300      	movs	r3, #0
 801adca:	9302      	str	r3, [sp, #8]
 801adcc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801add0:	429c      	cmp	r4, r3
 801add2:	d002      	beq.n	801adda <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801add4:	455c      	cmp	r4, fp
 801add6:	bf18      	it	ne
 801add8:	4625      	movne	r5, r4
 801adda:	ab02      	add	r3, sp, #8
 801addc:	4632      	mov	r2, r6
 801adde:	4651      	mov	r1, sl
 801ade0:	a803      	add	r0, sp, #12
 801ade2:	f001 f89d 	bl	801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ade6:	4604      	mov	r4, r0
 801ade8:	b108      	cbz	r0, 801adee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801adea:	280a      	cmp	r0, #10
 801adec:	d10a      	bne.n	801ae04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801adee:	45c1      	cmp	r9, r8
 801adf0:	bf38      	it	cc
 801adf2:	46c1      	movcc	r9, r8
 801adf4:	f04f 0800 	mov.w	r8, #0
 801adf8:	2c00      	cmp	r4, #0
 801adfa:	d1e5      	bne.n	801adc8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801adfc:	4648      	mov	r0, r9
 801adfe:	b01d      	add	sp, #116	; 0x74
 801ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae04:	9a02      	ldr	r2, [sp, #8]
 801ae06:	2a00      	cmp	r2, #0
 801ae08:	d0de      	beq.n	801adc8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ae0a:	7b57      	ldrb	r7, [r2, #13]
 801ae0c:	4629      	mov	r1, r5
 801ae0e:	6833      	ldr	r3, [r6, #0]
 801ae10:	007f      	lsls	r7, r7, #1
 801ae12:	8894      	ldrh	r4, [r2, #4]
 801ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae16:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ae1a:	7a97      	ldrb	r7, [r2, #10]
 801ae1c:	4307      	orrs	r7, r0
 801ae1e:	4630      	mov	r0, r6
 801ae20:	4798      	blx	r3
 801ae22:	4438      	add	r0, r7
 801ae24:	4480      	add	r8, r0
 801ae26:	fa1f f888 	uxth.w	r8, r8
 801ae2a:	e7e5      	b.n	801adf8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ae2c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ae2c:	b508      	push	{r3, lr}
 801ae2e:	6803      	ldr	r3, [r0, #0]
 801ae30:	68db      	ldr	r3, [r3, #12]
 801ae32:	4798      	blx	r3
 801ae34:	b128      	cbz	r0, 801ae42 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ae36:	7b43      	ldrb	r3, [r0, #13]
 801ae38:	7a80      	ldrb	r0, [r0, #10]
 801ae3a:	005b      	lsls	r3, r3, #1
 801ae3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae40:	4318      	orrs	r0, r3
 801ae42:	bd08      	pop	{r3, pc}

0801ae44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ae44:	b40e      	push	{r1, r2, r3}
 801ae46:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae48:	b09e      	sub	sp, #120	; 0x78
 801ae4a:	4605      	mov	r5, r0
 801ae4c:	ab23      	add	r3, sp, #140	; 0x8c
 801ae4e:	a805      	add	r0, sp, #20
 801ae50:	f853 4b04 	ldr.w	r4, [r3], #4
 801ae54:	9303      	str	r3, [sp, #12]
 801ae56:	f000 fd1b 	bl	801b890 <_ZN8touchgfx12TextProviderC1Ev>
 801ae5a:	682b      	ldr	r3, [r5, #0]
 801ae5c:	4628      	mov	r0, r5
 801ae5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ae60:	4798      	blx	r3
 801ae62:	682b      	ldr	r3, [r5, #0]
 801ae64:	4606      	mov	r6, r0
 801ae66:	4628      	mov	r0, r5
 801ae68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae6a:	4798      	blx	r3
 801ae6c:	4633      	mov	r3, r6
 801ae6e:	4621      	mov	r1, r4
 801ae70:	ae1e      	add	r6, sp, #120	; 0x78
 801ae72:	2400      	movs	r4, #0
 801ae74:	9000      	str	r0, [sp, #0]
 801ae76:	9a03      	ldr	r2, [sp, #12]
 801ae78:	a805      	add	r0, sp, #20
 801ae7a:	f000 fd5c 	bl	801b936 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ae7e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ae82:	462a      	mov	r2, r5
 801ae84:	4633      	mov	r3, r6
 801ae86:	4621      	mov	r1, r4
 801ae88:	a805      	add	r0, sp, #20
 801ae8a:	f001 f849 	bl	801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae8e:	b300      	cbz	r0, 801aed2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ae90:	280a      	cmp	r0, #10
 801ae92:	d01a      	beq.n	801aeca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ae94:	9f04      	ldr	r7, [sp, #16]
 801ae96:	b1c7      	cbz	r7, 801aeca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ae98:	7b78      	ldrb	r0, [r7, #13]
 801ae9a:	7a3b      	ldrb	r3, [r7, #8]
 801ae9c:	00c1      	lsls	r1, r0, #3
 801ae9e:	88ea      	ldrh	r2, [r5, #6]
 801aea0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801aea4:	4319      	orrs	r1, r3
 801aea6:	0643      	lsls	r3, r0, #25
 801aea8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801aeac:	bf48      	it	mi
 801aeae:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801aeb2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801aeb6:	bf48      	it	mi
 801aeb8:	b219      	sxthmi	r1, r3
 801aeba:	79fb      	ldrb	r3, [r7, #7]
 801aebc:	4303      	orrs	r3, r0
 801aebe:	4413      	add	r3, r2
 801aec0:	1a5b      	subs	r3, r3, r1
 801aec2:	b21b      	sxth	r3, r3
 801aec4:	429c      	cmp	r4, r3
 801aec6:	bfb8      	it	lt
 801aec8:	461c      	movlt	r4, r3
 801aeca:	4633      	mov	r3, r6
 801aecc:	462a      	mov	r2, r5
 801aece:	2100      	movs	r1, #0
 801aed0:	e7da      	b.n	801ae88 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801aed2:	b2a0      	uxth	r0, r4
 801aed4:	b01e      	add	sp, #120	; 0x78
 801aed6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aeda:	b003      	add	sp, #12
 801aedc:	4770      	bx	lr

0801aede <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801aede:	7a43      	ldrb	r3, [r0, #9]
 801aee0:	8880      	ldrh	r0, [r0, #4]
 801aee2:	4418      	add	r0, r3
 801aee4:	b280      	uxth	r0, r0
 801aee6:	4770      	bx	lr

0801aee8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801aee8:	6803      	ldr	r3, [r0, #0]
 801aeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aeec:	4718      	bx	r3

0801aeee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801aeee:	b40e      	push	{r1, r2, r3}
 801aef0:	b570      	push	{r4, r5, r6, lr}
 801aef2:	b09d      	sub	sp, #116	; 0x74
 801aef4:	4604      	mov	r4, r0
 801aef6:	ab21      	add	r3, sp, #132	; 0x84
 801aef8:	a803      	add	r0, sp, #12
 801aefa:	f853 5b04 	ldr.w	r5, [r3], #4
 801aefe:	9302      	str	r3, [sp, #8]
 801af00:	f000 fcc6 	bl	801b890 <_ZN8touchgfx12TextProviderC1Ev>
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	4620      	mov	r0, r4
 801af08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801af0a:	4798      	blx	r3
 801af0c:	6823      	ldr	r3, [r4, #0]
 801af0e:	4606      	mov	r6, r0
 801af10:	4620      	mov	r0, r4
 801af12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801af14:	2401      	movs	r4, #1
 801af16:	4798      	blx	r3
 801af18:	4633      	mov	r3, r6
 801af1a:	9000      	str	r0, [sp, #0]
 801af1c:	4629      	mov	r1, r5
 801af1e:	9a02      	ldr	r2, [sp, #8]
 801af20:	a803      	add	r0, sp, #12
 801af22:	f000 fd08 	bl	801b936 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801af26:	a803      	add	r0, sp, #12
 801af28:	f001 f8c6 	bl	801c0b8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801af2c:	b2a3      	uxth	r3, r4
 801af2e:	b138      	cbz	r0, 801af40 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801af30:	280a      	cmp	r0, #10
 801af32:	a803      	add	r0, sp, #12
 801af34:	bf04      	itt	eq
 801af36:	3301      	addeq	r3, #1
 801af38:	b21c      	sxtheq	r4, r3
 801af3a:	f001 f8bd 	bl	801c0b8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801af3e:	e7f5      	b.n	801af2c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801af40:	4618      	mov	r0, r3
 801af42:	b01d      	add	sp, #116	; 0x74
 801af44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af48:	b003      	add	sp, #12
 801af4a:	4770      	bx	lr

0801af4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801af4c:	b40e      	push	{r1, r2, r3}
 801af4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af50:	b09e      	sub	sp, #120	; 0x78
 801af52:	4604      	mov	r4, r0
 801af54:	ab23      	add	r3, sp, #140	; 0x8c
 801af56:	a805      	add	r0, sp, #20
 801af58:	f853 5b04 	ldr.w	r5, [r3], #4
 801af5c:	9303      	str	r3, [sp, #12]
 801af5e:	f000 fc97 	bl	801b890 <_ZN8touchgfx12TextProviderC1Ev>
 801af62:	6823      	ldr	r3, [r4, #0]
 801af64:	4620      	mov	r0, r4
 801af66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801af68:	4798      	blx	r3
 801af6a:	6823      	ldr	r3, [r4, #0]
 801af6c:	4606      	mov	r6, r0
 801af6e:	4620      	mov	r0, r4
 801af70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801af72:	4798      	blx	r3
 801af74:	4633      	mov	r3, r6
 801af76:	4629      	mov	r1, r5
 801af78:	9000      	str	r0, [sp, #0]
 801af7a:	9a03      	ldr	r2, [sp, #12]
 801af7c:	a805      	add	r0, sp, #20
 801af7e:	f000 fcda 	bl	801b936 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801af82:	ad1e      	add	r5, sp, #120	; 0x78
 801af84:	2100      	movs	r1, #0
 801af86:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801af8a:	4622      	mov	r2, r4
 801af8c:	a805      	add	r0, sp, #20
 801af8e:	f845 1d68 	str.w	r1, [r5, #-104]!
 801af92:	462b      	mov	r3, r5
 801af94:	f000 ffc4 	bl	801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af98:	b1d8      	cbz	r0, 801afd2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801af9a:	280a      	cmp	r0, #10
 801af9c:	d012      	beq.n	801afc4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801af9e:	9804      	ldr	r0, [sp, #16]
 801afa0:	b180      	cbz	r0, 801afc4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801afa2:	7b47      	ldrb	r7, [r0, #13]
 801afa4:	88e2      	ldrh	r2, [r4, #6]
 801afa6:	00fb      	lsls	r3, r7, #3
 801afa8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801afac:	7a03      	ldrb	r3, [r0, #8]
 801afae:	430b      	orrs	r3, r1
 801afb0:	0679      	lsls	r1, r7, #25
 801afb2:	bf44      	itt	mi
 801afb4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801afb8:	b21b      	sxthmi	r3, r3
 801afba:	1ad3      	subs	r3, r2, r3
 801afbc:	b21b      	sxth	r3, r3
 801afbe:	429e      	cmp	r6, r3
 801afc0:	bfa8      	it	ge
 801afc2:	461e      	movge	r6, r3
 801afc4:	462b      	mov	r3, r5
 801afc6:	4622      	mov	r2, r4
 801afc8:	2100      	movs	r1, #0
 801afca:	a805      	add	r0, sp, #20
 801afcc:	f000 ffa8 	bl	801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801afd0:	e7e2      	b.n	801af98 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801afd2:	4630      	mov	r0, r6
 801afd4:	b01e      	add	sp, #120	; 0x78
 801afd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801afda:	b003      	add	sp, #12
 801afdc:	4770      	bx	lr

0801afde <_ZNK8touchgfx8Drawable10invalidateEv>:
 801afde:	b513      	push	{r0, r1, r4, lr}
 801afe0:	6803      	ldr	r3, [r0, #0]
 801afe2:	2400      	movs	r4, #0
 801afe4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801afe8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801afec:	f8ad 1004 	strh.w	r1, [sp, #4]
 801aff0:	4669      	mov	r1, sp
 801aff2:	691b      	ldr	r3, [r3, #16]
 801aff4:	9400      	str	r4, [sp, #0]
 801aff6:	f8ad 2006 	strh.w	r2, [sp, #6]
 801affa:	4798      	blx	r3
 801affc:	b002      	add	sp, #8
 801affe:	bd10      	pop	{r4, pc}

0801b000 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b000:	b538      	push	{r3, r4, r5, lr}
 801b002:	680b      	ldr	r3, [r1, #0]
 801b004:	460c      	mov	r4, r1
 801b006:	4605      	mov	r5, r0
 801b008:	68db      	ldr	r3, [r3, #12]
 801b00a:	4798      	blx	r3
 801b00c:	6823      	ldr	r3, [r4, #0]
 801b00e:	4620      	mov	r0, r4
 801b010:	4629      	mov	r1, r5
 801b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b014:	4798      	blx	r3
 801b016:	4628      	mov	r0, r5
 801b018:	bd38      	pop	{r3, r4, r5, pc}

0801b01a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b01a:	b410      	push	{r4}
 801b01c:	880a      	ldrh	r2, [r1, #0]
 801b01e:	8884      	ldrh	r4, [r0, #4]
 801b020:	4422      	add	r2, r4
 801b022:	800a      	strh	r2, [r1, #0]
 801b024:	884a      	ldrh	r2, [r1, #2]
 801b026:	88c4      	ldrh	r4, [r0, #6]
 801b028:	4422      	add	r2, r4
 801b02a:	804a      	strh	r2, [r1, #2]
 801b02c:	6940      	ldr	r0, [r0, #20]
 801b02e:	b120      	cbz	r0, 801b03a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b030:	6803      	ldr	r3, [r0, #0]
 801b032:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b038:	4718      	bx	r3
 801b03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b03e:	4770      	bx	lr

0801b040 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b040:	b570      	push	{r4, r5, r6, lr}
 801b042:	8882      	ldrh	r2, [r0, #4]
 801b044:	460c      	mov	r4, r1
 801b046:	880b      	ldrh	r3, [r1, #0]
 801b048:	4605      	mov	r5, r0
 801b04a:	4413      	add	r3, r2
 801b04c:	800b      	strh	r3, [r1, #0]
 801b04e:	884b      	ldrh	r3, [r1, #2]
 801b050:	88c2      	ldrh	r2, [r0, #6]
 801b052:	4413      	add	r3, r2
 801b054:	804b      	strh	r3, [r1, #2]
 801b056:	1d01      	adds	r1, r0, #4
 801b058:	4620      	mov	r0, r4
 801b05a:	f7fc f81b 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801b05e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b062:	2b00      	cmp	r3, #0
 801b064:	dd0b      	ble.n	801b07e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b066:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	dd07      	ble.n	801b07e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b06e:	6968      	ldr	r0, [r5, #20]
 801b070:	b128      	cbz	r0, 801b07e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b072:	6803      	ldr	r3, [r0, #0]
 801b074:	4621      	mov	r1, r4
 801b076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b07c:	4718      	bx	r3
 801b07e:	bd70      	pop	{r4, r5, r6, pc}

0801b080 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b080:	b570      	push	{r4, r5, r6, lr}
 801b082:	8882      	ldrh	r2, [r0, #4]
 801b084:	460c      	mov	r4, r1
 801b086:	880b      	ldrh	r3, [r1, #0]
 801b088:	4605      	mov	r5, r0
 801b08a:	4413      	add	r3, r2
 801b08c:	800b      	strh	r3, [r1, #0]
 801b08e:	884b      	ldrh	r3, [r1, #2]
 801b090:	88c2      	ldrh	r2, [r0, #6]
 801b092:	4413      	add	r3, r2
 801b094:	804b      	strh	r3, [r1, #2]
 801b096:	1d01      	adds	r1, r0, #4
 801b098:	4620      	mov	r0, r4
 801b09a:	f7fb fffb 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801b09e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	dd19      	ble.n	801b0da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801b0a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	dd15      	ble.n	801b0da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801b0ae:	6968      	ldr	r0, [r5, #20]
 801b0b0:	b128      	cbz	r0, 801b0be <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801b0b2:	6803      	ldr	r3, [r0, #0]
 801b0b4:	4621      	mov	r1, r4
 801b0b6:	691b      	ldr	r3, [r3, #16]
 801b0b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0bc:	4718      	bx	r3
 801b0be:	4b07      	ldr	r3, [pc, #28]	; (801b0dc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	3304      	adds	r3, #4
 801b0c4:	429d      	cmp	r5, r3
 801b0c6:	d108      	bne.n	801b0da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801b0c8:	f7fe ff10 	bl	8019eec <_ZN8touchgfx11Application11getInstanceEv>
 801b0cc:	6803      	ldr	r3, [r0, #0]
 801b0ce:	6821      	ldr	r1, [r4, #0]
 801b0d0:	6862      	ldr	r2, [r4, #4]
 801b0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0d8:	4718      	bx	r3
 801b0da:	bd70      	pop	{r4, r5, r6, pc}
 801b0dc:	2001515c 	.word	0x2001515c

0801b0e0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b0e0:	b570      	push	{r4, r5, r6, lr}
 801b0e2:	4604      	mov	r4, r0
 801b0e4:	4616      	mov	r6, r2
 801b0e6:	460d      	mov	r5, r1
 801b0e8:	b901      	cbnz	r1, 801b0ec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b0ea:	b192      	cbz	r2, 801b112 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801b0ec:	6823      	ldr	r3, [r4, #0]
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	699b      	ldr	r3, [r3, #24]
 801b0f2:	4798      	blx	r3
 801b0f4:	88e2      	ldrh	r2, [r4, #6]
 801b0f6:	88a1      	ldrh	r1, [r4, #4]
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	4432      	add	r2, r6
 801b0fc:	4429      	add	r1, r5
 801b0fe:	b212      	sxth	r2, r2
 801b100:	b209      	sxth	r1, r1
 801b102:	f7e8 fc77 	bl	80039f4 <_ZN8touchgfx8Drawable5setXYEss>
 801b106:	6823      	ldr	r3, [r4, #0]
 801b108:	4620      	mov	r0, r4
 801b10a:	699b      	ldr	r3, [r3, #24]
 801b10c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b110:	4718      	bx	r3
 801b112:	bd70      	pop	{r4, r5, r6, pc}

0801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b114:	b510      	push	{r4, lr}
 801b116:	2300      	movs	r3, #0
 801b118:	4604      	mov	r4, r0
 801b11a:	4608      	mov	r0, r1
 801b11c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b120:	8023      	strh	r3, [r4, #0]
 801b122:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b126:	8063      	strh	r3, [r4, #2]
 801b128:	6803      	ldr	r3, [r0, #0]
 801b12a:	80a1      	strh	r1, [r4, #4]
 801b12c:	4621      	mov	r1, r4
 801b12e:	80e2      	strh	r2, [r4, #6]
 801b130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b132:	4798      	blx	r3
 801b134:	4620      	mov	r0, r4
 801b136:	bd10      	pop	{r4, pc}

0801b138 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801b138:	b530      	push	{r4, r5, lr}
 801b13a:	8083      	strh	r3, [r0, #4]
 801b13c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b140:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801b144:	80c3      	strh	r3, [r0, #6]
 801b146:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b14a:	6141      	str	r1, [r0, #20]
 801b14c:	7203      	strb	r3, [r0, #8]
 801b14e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b152:	8302      	strh	r2, [r0, #24]
 801b154:	7243      	strb	r3, [r0, #9]
 801b156:	7a83      	ldrb	r3, [r0, #10]
 801b158:	f365 0306 	bfi	r3, r5, #0, #7
 801b15c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801b160:	f365 13c7 	bfi	r3, r5, #7, #1
 801b164:	7283      	strb	r3, [r0, #10]
 801b166:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801b16a:	72c3      	strb	r3, [r0, #11]
 801b16c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801b170:	7303      	strb	r3, [r0, #12]
 801b172:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b176:	81c3      	strh	r3, [r0, #14]
 801b178:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801b17c:	8203      	strh	r3, [r0, #16]
 801b17e:	4b01      	ldr	r3, [pc, #4]	; (801b184 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801b180:	6003      	str	r3, [r0, #0]
 801b182:	bd30      	pop	{r4, r5, pc}
 801b184:	0802f9b4 	.word	0x0802f9b4

0801b188 <_ZNK8touchgfx9ConstFont4findEt>:
 801b188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b18a:	6944      	ldr	r4, [r0, #20]
 801b18c:	b3bc      	cbz	r4, 801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b18e:	88a3      	ldrh	r3, [r4, #4]
 801b190:	8b02      	ldrh	r2, [r0, #24]
 801b192:	1acb      	subs	r3, r1, r3
 801b194:	f102 32ff 	add.w	r2, r2, #4294967295
 801b198:	d431      	bmi.n	801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b19a:	4293      	cmp	r3, r2
 801b19c:	dd0c      	ble.n	801b1b8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b19e:	230e      	movs	r3, #14
 801b1a0:	fb03 4302 	mla	r3, r3, r2, r4
 801b1a4:	889b      	ldrh	r3, [r3, #4]
 801b1a6:	1a5b      	subs	r3, r3, r1
 801b1a8:	1ad3      	subs	r3, r2, r3
 801b1aa:	429a      	cmp	r2, r3
 801b1ac:	db27      	blt.n	801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	bfbc      	itt	lt
 801b1b2:	2302      	movlt	r3, #2
 801b1b4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b1b8:	2500      	movs	r5, #0
 801b1ba:	260e      	movs	r6, #14
 801b1bc:	4295      	cmp	r5, r2
 801b1be:	dc1e      	bgt.n	801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1c0:	fb06 4003 	mla	r0, r6, r3, r4
 801b1c4:	8887      	ldrh	r7, [r0, #4]
 801b1c6:	42b9      	cmp	r1, r7
 801b1c8:	d01a      	beq.n	801b200 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b1ca:	d20d      	bcs.n	801b1e8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b1cc:	1e5a      	subs	r2, r3, #1
 801b1ce:	4295      	cmp	r5, r2
 801b1d0:	dc15      	bgt.n	801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1d2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b1d6:	1a5b      	subs	r3, r3, r1
 801b1d8:	1ad3      	subs	r3, r2, r3
 801b1da:	429a      	cmp	r2, r3
 801b1dc:	db0f      	blt.n	801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1de:	429d      	cmp	r5, r3
 801b1e0:	ddec      	ble.n	801b1bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b1e2:	1953      	adds	r3, r2, r5
 801b1e4:	105b      	asrs	r3, r3, #1
 801b1e6:	e7e9      	b.n	801b1bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b1e8:	1c5d      	adds	r5, r3, #1
 801b1ea:	42aa      	cmp	r2, r5
 801b1ec:	db07      	blt.n	801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1ee:	8a43      	ldrh	r3, [r0, #18]
 801b1f0:	1acb      	subs	r3, r1, r3
 801b1f2:	442b      	add	r3, r5
 801b1f4:	429d      	cmp	r5, r3
 801b1f6:	dc02      	bgt.n	801b1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1f8:	429a      	cmp	r2, r3
 801b1fa:	dadf      	bge.n	801b1bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b1fc:	e7f1      	b.n	801b1e2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b1fe:	2000      	movs	r0, #0
 801b200:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b202 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b204:	4604      	mov	r4, r0
 801b206:	4617      	mov	r7, r2
 801b208:	461e      	mov	r6, r3
 801b20a:	b911      	cbnz	r1, 801b212 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b20c:	2500      	movs	r5, #0
 801b20e:	4628      	mov	r0, r5
 801b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b212:	290a      	cmp	r1, #10
 801b214:	d0fa      	beq.n	801b20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b216:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b21a:	4291      	cmp	r1, r2
 801b21c:	d0f6      	beq.n	801b20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b21e:	f242 020b 	movw	r2, #8203	; 0x200b
 801b222:	4291      	cmp	r1, r2
 801b224:	d0f2      	beq.n	801b20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b226:	f7ff ffaf 	bl	801b188 <_ZNK8touchgfx9ConstFont4findEt>
 801b22a:	4605      	mov	r5, r0
 801b22c:	b950      	cbnz	r0, 801b244 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b22e:	6823      	ldr	r3, [r4, #0]
 801b230:	4620      	mov	r0, r4
 801b232:	691b      	ldr	r3, [r3, #16]
 801b234:	4798      	blx	r3
 801b236:	4601      	mov	r1, r0
 801b238:	4620      	mov	r0, r4
 801b23a:	f7ff ffa5 	bl	801b188 <_ZNK8touchgfx9ConstFont4findEt>
 801b23e:	4605      	mov	r5, r0
 801b240:	2800      	cmp	r0, #0
 801b242:	d0e3      	beq.n	801b20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b244:	6823      	ldr	r3, [r4, #0]
 801b246:	4629      	mov	r1, r5
 801b248:	4620      	mov	r0, r4
 801b24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b24c:	4798      	blx	r3
 801b24e:	6038      	str	r0, [r7, #0]
 801b250:	6823      	ldr	r3, [r4, #0]
 801b252:	4620      	mov	r0, r4
 801b254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b256:	4798      	blx	r3
 801b258:	7030      	strb	r0, [r6, #0]
 801b25a:	e7d8      	b.n	801b20e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b25c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b25c:	2000      	movs	r0, #0
 801b25e:	4770      	bx	lr

0801b260 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b260:	2001      	movs	r0, #1
 801b262:	4770      	bx	lr

0801b264 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b264:	2002      	movs	r0, #2
 801b266:	4770      	bx	lr

0801b268 <_ZN8touchgfx6ScreenD1Ev>:
 801b268:	4770      	bx	lr

0801b26a <_ZN8touchgfx12GestureEventD1Ev>:
 801b26a:	4770      	bx	lr

0801b26c <_ZN8touchgfx9DragEventD1Ev>:
 801b26c:	4770      	bx	lr

0801b26e <_ZN8touchgfx10ClickEventD1Ev>:
 801b26e:	4770      	bx	lr

0801b270 <_ZN8touchgfx10ClickEventD0Ev>:
 801b270:	b510      	push	{r4, lr}
 801b272:	4604      	mov	r4, r0
 801b274:	210c      	movs	r1, #12
 801b276:	f00e ff73 	bl	802a160 <_ZdlPvj>
 801b27a:	4620      	mov	r0, r4
 801b27c:	bd10      	pop	{r4, pc}

0801b27e <_ZN8touchgfx9DragEventD0Ev>:
 801b27e:	b510      	push	{r4, lr}
 801b280:	4604      	mov	r4, r0
 801b282:	2110      	movs	r1, #16
 801b284:	f00e ff6c 	bl	802a160 <_ZdlPvj>
 801b288:	4620      	mov	r0, r4
 801b28a:	bd10      	pop	{r4, pc}

0801b28c <_ZN8touchgfx12GestureEventD0Ev>:
 801b28c:	b510      	push	{r4, lr}
 801b28e:	4604      	mov	r4, r0
 801b290:	210c      	movs	r1, #12
 801b292:	f00e ff65 	bl	802a160 <_ZdlPvj>
 801b296:	4620      	mov	r0, r4
 801b298:	bd10      	pop	{r4, pc}

0801b29a <_ZN8touchgfx6ScreenD0Ev>:
 801b29a:	b510      	push	{r4, lr}
 801b29c:	4604      	mov	r4, r0
 801b29e:	213c      	movs	r1, #60	; 0x3c
 801b2a0:	f00e ff5e 	bl	802a160 <_ZdlPvj>
 801b2a4:	4620      	mov	r0, r4
 801b2a6:	bd10      	pop	{r4, pc}

0801b2a8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b2a8:	b530      	push	{r4, r5, lr}
 801b2aa:	460d      	mov	r5, r1
 801b2ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b2ae:	b087      	sub	sp, #28
 801b2b0:	4604      	mov	r4, r0
 801b2b2:	b301      	cbz	r1, 801b2f6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b2b4:	a801      	add	r0, sp, #4
 801b2b6:	f7ff ff2d 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2ba:	892a      	ldrh	r2, [r5, #8]
 801b2bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b2c0:	7928      	ldrb	r0, [r5, #4]
 801b2c2:	1ad2      	subs	r2, r2, r3
 801b2c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b2c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b2ca:	441a      	add	r2, r3
 801b2cc:	896b      	ldrh	r3, [r5, #10]
 801b2ce:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b2d2:	f88d 0010 	strb.w	r0, [sp, #16]
 801b2d6:	1b5b      	subs	r3, r3, r5
 801b2d8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b2da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b2dc:	442b      	add	r3, r5
 801b2de:	4d07      	ldr	r5, [pc, #28]	; (801b2fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b2e0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b2e4:	a903      	add	r1, sp, #12
 801b2e6:	9503      	str	r5, [sp, #12]
 801b2e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b2ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b2f0:	6803      	ldr	r3, [r0, #0]
 801b2f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2f4:	4798      	blx	r3
 801b2f6:	b007      	add	sp, #28
 801b2f8:	bd30      	pop	{r4, r5, pc}
 801b2fa:	bf00      	nop
 801b2fc:	0802fa3c 	.word	0x0802fa3c

0801b300 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b304:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b306:	b08a      	sub	sp, #40	; 0x28
 801b308:	4604      	mov	r4, r0
 801b30a:	460d      	mov	r5, r1
 801b30c:	b113      	cbz	r3, 801b314 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b30e:	790b      	ldrb	r3, [r1, #4]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d044      	beq.n	801b39e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b314:	f104 0804 	add.w	r8, r4, #4
 801b318:	a803      	add	r0, sp, #12
 801b31a:	4641      	mov	r1, r8
 801b31c:	f7ff fefa 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b320:	792b      	ldrb	r3, [r5, #4]
 801b322:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b326:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b32a:	b983      	cbnz	r3, 801b34e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b32c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801b330:	892a      	ldrh	r2, [r5, #8]
 801b332:	88e9      	ldrh	r1, [r5, #6]
 801b334:	4640      	mov	r0, r8
 801b336:	1b92      	subs	r2, r2, r6
 801b338:	9301      	str	r3, [sp, #4]
 801b33a:	1bc9      	subs	r1, r1, r7
 801b33c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801b340:	b212      	sxth	r2, r2
 801b342:	9300      	str	r3, [sp, #0]
 801b344:	b209      	sxth	r1, r1
 801b346:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b34a:	f7fb fdc1 	bl	8016ed0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b34e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b350:	b329      	cbz	r1, 801b39e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b352:	a805      	add	r0, sp, #20
 801b354:	f7ff fede 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b358:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b35c:	792b      	ldrb	r3, [r5, #4]
 801b35e:	a907      	add	r1, sp, #28
 801b360:	1abf      	subs	r7, r7, r2
 801b362:	88ea      	ldrh	r2, [r5, #6]
 801b364:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b366:	4417      	add	r7, r2
 801b368:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801b36a:	f88d 3020 	strb.w	r3, [sp, #32]
 801b36e:	4417      	add	r7, r2
 801b370:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b374:	1ab6      	subs	r6, r6, r2
 801b376:	892a      	ldrh	r2, [r5, #8]
 801b378:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801b37c:	4416      	add	r6, r2
 801b37e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b380:	4416      	add	r6, r2
 801b382:	4a08      	ldr	r2, [pc, #32]	; (801b3a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b384:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801b388:	2600      	movs	r6, #0
 801b38a:	9207      	str	r2, [sp, #28]
 801b38c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801b390:	6803      	ldr	r3, [r0, #0]
 801b392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b394:	4798      	blx	r3
 801b396:	792b      	ldrb	r3, [r5, #4]
 801b398:	b10b      	cbz	r3, 801b39e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b39a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b39e:	b00a      	add	sp, #40	; 0x28
 801b3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3a4:	0802fa14 	.word	0x0802fa14

0801b3a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3ac:	460c      	mov	r4, r1
 801b3ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b3b0:	b088      	sub	sp, #32
 801b3b2:	4605      	mov	r5, r0
 801b3b4:	2900      	cmp	r1, #0
 801b3b6:	d06d      	beq.n	801b494 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b3b8:	4668      	mov	r0, sp
 801b3ba:	f7ff feab 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b3be:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801b3c0:	88e3      	ldrh	r3, [r4, #6]
 801b3c2:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b3c6:	440b      	add	r3, r1
 801b3c8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b3cc:	b21b      	sxth	r3, r3
 801b3ce:	4543      	cmp	r3, r8
 801b3d0:	db31      	blt.n	801b436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b3d2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b3d6:	44c4      	add	ip, r8
 801b3d8:	fa0f fc8c 	sxth.w	ip, ip
 801b3dc:	4563      	cmp	r3, ip
 801b3de:	da2a      	bge.n	801b436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b3e0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801b3e2:	8926      	ldrh	r6, [r4, #8]
 801b3e4:	4416      	add	r6, r2
 801b3e6:	b236      	sxth	r6, r6
 801b3e8:	42be      	cmp	r6, r7
 801b3ea:	db24      	blt.n	801b436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b3ec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b3f0:	4438      	add	r0, r7
 801b3f2:	b200      	sxth	r0, r0
 801b3f4:	4286      	cmp	r6, r0
 801b3f6:	da1e      	bge.n	801b436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b3f8:	8963      	ldrh	r3, [r4, #10]
 801b3fa:	4419      	add	r1, r3
 801b3fc:	b209      	sxth	r1, r1
 801b3fe:	4541      	cmp	r1, r8
 801b400:	db08      	blt.n	801b414 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b402:	4561      	cmp	r1, ip
 801b404:	da06      	bge.n	801b414 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b406:	89a3      	ldrh	r3, [r4, #12]
 801b408:	441a      	add	r2, r3
 801b40a:	b212      	sxth	r2, r2
 801b40c:	42ba      	cmp	r2, r7
 801b40e:	db01      	blt.n	801b414 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b410:	4282      	cmp	r2, r0
 801b412:	db10      	blt.n	801b436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b414:	4b21      	ldr	r3, [pc, #132]	; (801b49c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b416:	a904      	add	r1, sp, #16
 801b418:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b41a:	9304      	str	r3, [sp, #16]
 801b41c:	2302      	movs	r3, #2
 801b41e:	f88d 3014 	strb.w	r3, [sp, #20]
 801b422:	2300      	movs	r3, #0
 801b424:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b428:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b42c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b430:	6803      	ldr	r3, [r0, #0]
 801b432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b434:	4798      	blx	r3
 801b436:	1d29      	adds	r1, r5, #4
 801b438:	a802      	add	r0, sp, #8
 801b43a:	f7ff fe6b 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b43e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b442:	88e0      	ldrh	r0, [r4, #6]
 801b444:	eba3 0808 	sub.w	r8, r3, r8
 801b448:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b44c:	7921      	ldrb	r1, [r4, #4]
 801b44e:	fa1f f888 	uxth.w	r8, r8
 801b452:	1bdf      	subs	r7, r3, r7
 801b454:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b458:	b2bb      	uxth	r3, r7
 801b45a:	4440      	add	r0, r8
 801b45c:	8922      	ldrh	r2, [r4, #8]
 801b45e:	8967      	ldrh	r7, [r4, #10]
 801b460:	4460      	add	r0, ip
 801b462:	89a4      	ldrh	r4, [r4, #12]
 801b464:	441a      	add	r2, r3
 801b466:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b468:	44b8      	add	r8, r7
 801b46a:	4423      	add	r3, r4
 801b46c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b470:	4432      	add	r2, r6
 801b472:	44e0      	add	r8, ip
 801b474:	4433      	add	r3, r6
 801b476:	4c0a      	ldr	r4, [pc, #40]	; (801b4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b478:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b47a:	f88d 1014 	strb.w	r1, [sp, #20]
 801b47e:	a904      	add	r1, sp, #16
 801b480:	9404      	str	r4, [sp, #16]
 801b482:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b486:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b48a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b48e:	6803      	ldr	r3, [r0, #0]
 801b490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b492:	4798      	blx	r3
 801b494:	b008      	add	sp, #32
 801b496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b49a:	bf00      	nop
 801b49c:	0802fa14 	.word	0x0802fa14
 801b4a0:	0802fa28 	.word	0x0802fa28

0801b4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b4ac:	3201      	adds	r2, #1
 801b4ae:	d112      	bne.n	801b4d6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b4b0:	2500      	movs	r5, #0
 801b4b2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b4b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b4ba:	6803      	ldr	r3, [r0, #0]
 801b4bc:	9500      	str	r5, [sp, #0]
 801b4be:	466d      	mov	r5, sp
 801b4c0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b4c4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b4c8:	4629      	mov	r1, r5
 801b4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4cc:	4798      	blx	r3
 801b4ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b4d2:	e884 0003 	stmia.w	r4, {r0, r1}
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	b003      	add	sp, #12
 801b4da:	bd30      	pop	{r4, r5, pc}

0801b4dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b4dc:	b513      	push	{r0, r1, r4, lr}
 801b4de:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b4e2:	4604      	mov	r4, r0
 801b4e4:	3301      	adds	r3, #1
 801b4e6:	d109      	bne.n	801b4fc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b4e8:	4601      	mov	r1, r0
 801b4ea:	4668      	mov	r0, sp
 801b4ec:	f7ff fe12 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4f0:	f8bd 3000 	ldrh.w	r3, [sp]
 801b4f4:	8423      	strh	r3, [r4, #32]
 801b4f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b4fa:	8463      	strh	r3, [r4, #34]	; 0x22
 801b4fc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b500:	b002      	add	sp, #8
 801b502:	bd10      	pop	{r4, pc}

0801b504 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b504:	b513      	push	{r0, r1, r4, lr}
 801b506:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b50a:	4604      	mov	r4, r0
 801b50c:	3301      	adds	r3, #1
 801b50e:	d109      	bne.n	801b524 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b510:	4601      	mov	r1, r0
 801b512:	4668      	mov	r0, sp
 801b514:	f7ff fdfe 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b518:	f8bd 3000 	ldrh.w	r3, [sp]
 801b51c:	8423      	strh	r3, [r4, #32]
 801b51e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b522:	8463      	strh	r3, [r4, #34]	; 0x22
 801b524:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b528:	b002      	add	sp, #8
 801b52a:	bd10      	pop	{r4, pc}

0801b52c <_ZN8touchgfx6ScreenC1Ev>:
 801b52c:	b570      	push	{r4, r5, r6, lr}
 801b52e:	4b17      	ldr	r3, [pc, #92]	; (801b58c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b530:	4605      	mov	r5, r0
 801b532:	4a17      	ldr	r2, [pc, #92]	; (801b590 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b534:	2101      	movs	r1, #1
 801b536:	f845 3b04 	str.w	r3, [r5], #4
 801b53a:	2300      	movs	r3, #0
 801b53c:	6042      	str	r2, [r0, #4]
 801b53e:	4604      	mov	r4, r0
 801b540:	8103      	strh	r3, [r0, #8]
 801b542:	8143      	strh	r3, [r0, #10]
 801b544:	8183      	strh	r3, [r0, #12]
 801b546:	81c3      	strh	r3, [r0, #14]
 801b548:	8203      	strh	r3, [r0, #16]
 801b54a:	8243      	strh	r3, [r0, #18]
 801b54c:	8283      	strh	r3, [r0, #20]
 801b54e:	82c3      	strh	r3, [r0, #22]
 801b550:	6203      	str	r3, [r0, #32]
 801b552:	8483      	strh	r3, [r0, #36]	; 0x24
 801b554:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b556:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b55a:	6343      	str	r3, [r0, #52]	; 0x34
 801b55c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b560:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b564:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b568:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b56c:	4b09      	ldr	r3, [pc, #36]	; (801b594 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b56e:	4628      	mov	r0, r5
 801b570:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b574:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801b576:	4a08      	ldr	r2, [pc, #32]	; (801b598 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b578:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b57c:	4798      	blx	r3
 801b57e:	6863      	ldr	r3, [r4, #4]
 801b580:	4628      	mov	r0, r5
 801b582:	4631      	mov	r1, r6
 801b584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b586:	4798      	blx	r3
 801b588:	4620      	mov	r0, r4
 801b58a:	bd70      	pop	{r4, r5, r6, pc}
 801b58c:	0802fa50 	.word	0x0802fa50
 801b590:	0802f758 	.word	0x0802f758
 801b594:	20015116 	.word	0x20015116
 801b598:	20015114 	.word	0x20015114

0801b59c <_ZN8touchgfx6Screen4drawEv>:
 801b59c:	4b09      	ldr	r3, [pc, #36]	; (801b5c4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b59e:	b507      	push	{r0, r1, r2, lr}
 801b5a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b5a4:	2100      	movs	r1, #0
 801b5a6:	4b08      	ldr	r3, [pc, #32]	; (801b5c8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b5a8:	9100      	str	r1, [sp, #0]
 801b5aa:	4669      	mov	r1, sp
 801b5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5b0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b5b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b5b8:	6803      	ldr	r3, [r0, #0]
 801b5ba:	689b      	ldr	r3, [r3, #8]
 801b5bc:	4798      	blx	r3
 801b5be:	b003      	add	sp, #12
 801b5c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b5c4:	20015114 	.word	0x20015114
 801b5c8:	20015116 	.word	0x20015116

0801b5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b5d4:	b089      	sub	sp, #36	; 0x24
 801b5d6:	4680      	mov	r8, r0
 801b5d8:	460c      	mov	r4, r1
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	4615      	mov	r5, r2
 801b5de:	dd0e      	ble.n	801b5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b5e0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	dd0a      	ble.n	801b5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b5e8:	4628      	mov	r0, r5
 801b5ea:	f7ff ff5b 	bl	801b4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b5ee:	4621      	mov	r1, r4
 801b5f0:	f7fe fb9d 	bl	8019d2e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b5f4:	69eb      	ldr	r3, [r5, #28]
 801b5f6:	b928      	cbnz	r0, 801b604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b5f8:	461d      	mov	r5, r3
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d1f4      	bne.n	801b5e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b5fe:	b009      	add	sp, #36	; 0x24
 801b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b604:	ae04      	add	r6, sp, #16
 801b606:	2b00      	cmp	r3, #0
 801b608:	f000 80b5 	beq.w	801b776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b60c:	682b      	ldr	r3, [r5, #0]
 801b60e:	4629      	mov	r1, r5
 801b610:	a802      	add	r0, sp, #8
 801b612:	68db      	ldr	r3, [r3, #12]
 801b614:	4798      	blx	r3
 801b616:	4628      	mov	r0, r5
 801b618:	f7ff ff60 	bl	801b4dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b61c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b620:	4407      	add	r7, r0
 801b622:	4628      	mov	r0, r5
 801b624:	f7ff ff6e 	bl	801b504 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b628:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b62c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b630:	b23f      	sxth	r7, r7
 801b632:	4418      	add	r0, r3
 801b634:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b638:	4621      	mov	r1, r4
 801b63a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b63e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b642:	4630      	mov	r0, r6
 801b644:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b648:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b64c:	f7fb fd22 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801b650:	4628      	mov	r0, r5
 801b652:	f7ff ff27 	bl	801b4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b656:	ab06      	add	r3, sp, #24
 801b658:	4602      	mov	r2, r0
 801b65a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b65e:	e883 0003 	stmia.w	r3, {r0, r1}
 801b662:	4611      	mov	r1, r2
 801b664:	4618      	mov	r0, r3
 801b666:	f7fb fd15 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801b66a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b66e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b672:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b676:	4299      	cmp	r1, r3
 801b678:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b67c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b680:	d10b      	bne.n	801b69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b682:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b686:	4552      	cmp	r2, sl
 801b688:	d107      	bne.n	801b69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b68a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b68e:	455a      	cmp	r2, fp
 801b690:	d103      	bne.n	801b69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b692:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b696:	454a      	cmp	r2, r9
 801b698:	d06d      	beq.n	801b776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b69a:	f1bb 0f00 	cmp.w	fp, #0
 801b69e:	dd65      	ble.n	801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b6a0:	f1b9 0f00 	cmp.w	r9, #0
 801b6a4:	dd62      	ble.n	801b76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b6a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b6aa:	fa1f f08a 	uxth.w	r0, sl
 801b6ae:	4552      	cmp	r2, sl
 801b6b0:	9000      	str	r0, [sp, #0]
 801b6b2:	da12      	bge.n	801b6da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b6b4:	9301      	str	r3, [sp, #4]
 801b6b6:	9b00      	ldr	r3, [sp, #0]
 801b6b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b6bc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b6c0:	1a9a      	subs	r2, r3, r2
 801b6c2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b6c6:	4631      	mov	r1, r6
 801b6c8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b6cc:	4640      	mov	r0, r8
 801b6ce:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b6d2:	69ea      	ldr	r2, [r5, #28]
 801b6d4:	f7ff ff7a 	bl	801b5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b6d8:	9b01      	ldr	r3, [sp, #4]
 801b6da:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b6de:	b29f      	uxth	r7, r3
 801b6e0:	429a      	cmp	r2, r3
 801b6e2:	da0d      	bge.n	801b700 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b6e4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b6e8:	1aba      	subs	r2, r7, r2
 801b6ea:	f8ad a012 	strh.w	sl, [sp, #18]
 801b6ee:	4631      	mov	r1, r6
 801b6f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b6f4:	4640      	mov	r0, r8
 801b6f6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b6fa:	69ea      	ldr	r2, [r5, #28]
 801b6fc:	f7ff ff66 	bl	801b5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b700:	8822      	ldrh	r2, [r4, #0]
 801b702:	445f      	add	r7, fp
 801b704:	88a3      	ldrh	r3, [r4, #4]
 801b706:	b2bf      	uxth	r7, r7
 801b708:	4413      	add	r3, r2
 801b70a:	b23a      	sxth	r2, r7
 801b70c:	b29b      	uxth	r3, r3
 801b70e:	b219      	sxth	r1, r3
 801b710:	4291      	cmp	r1, r2
 801b712:	dd0d      	ble.n	801b730 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b714:	1bdb      	subs	r3, r3, r7
 801b716:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b71a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b71e:	4631      	mov	r1, r6
 801b720:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b724:	4640      	mov	r0, r8
 801b726:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b72a:	69ea      	ldr	r2, [r5, #28]
 801b72c:	f7ff ff4e 	bl	801b5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b730:	88e2      	ldrh	r2, [r4, #6]
 801b732:	8863      	ldrh	r3, [r4, #2]
 801b734:	4413      	add	r3, r2
 801b736:	9a00      	ldr	r2, [sp, #0]
 801b738:	444a      	add	r2, r9
 801b73a:	b29b      	uxth	r3, r3
 801b73c:	fa1f f982 	uxth.w	r9, r2
 801b740:	b219      	sxth	r1, r3
 801b742:	fa0f f289 	sxth.w	r2, r9
 801b746:	428a      	cmp	r2, r1
 801b748:	da15      	bge.n	801b776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b74a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b74e:	eba3 0309 	sub.w	r3, r3, r9
 801b752:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b756:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b75a:	4631      	mov	r1, r6
 801b75c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b760:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b764:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b768:	69ea      	ldr	r2, [r5, #28]
 801b76a:	e001      	b.n	801b770 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b76c:	69ea      	ldr	r2, [r5, #28]
 801b76e:	4621      	mov	r1, r4
 801b770:	4640      	mov	r0, r8
 801b772:	f7ff ff2b 	bl	801b5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b776:	4628      	mov	r0, r5
 801b778:	f7ff fe94 	bl	801b4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b77c:	6861      	ldr	r1, [r4, #4]
 801b77e:	4602      	mov	r2, r0
 801b780:	4633      	mov	r3, r6
 801b782:	6820      	ldr	r0, [r4, #0]
 801b784:	c303      	stmia	r3!, {r0, r1}
 801b786:	4611      	mov	r1, r2
 801b788:	4630      	mov	r0, r6
 801b78a:	f7fb fc83 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801b78e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b792:	2b00      	cmp	r3, #0
 801b794:	f77f af33 	ble.w	801b5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b798:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	f77f af2e 	ble.w	801b5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b7a2:	4628      	mov	r0, r5
 801b7a4:	f7ff fe9a 	bl	801b4dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b7a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b7ac:	1a18      	subs	r0, r3, r0
 801b7ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b7b2:	4628      	mov	r0, r5
 801b7b4:	f7ff fea6 	bl	801b504 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b7b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b7bc:	4631      	mov	r1, r6
 801b7be:	1a18      	subs	r0, r3, r0
 801b7c0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b7c4:	4628      	mov	r0, r5
 801b7c6:	682b      	ldr	r3, [r5, #0]
 801b7c8:	689b      	ldr	r3, [r3, #8]
 801b7ca:	4798      	blx	r3
 801b7cc:	e717      	b.n	801b5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b7ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b7ce:	b570      	push	{r4, r5, r6, lr}
 801b7d0:	1d06      	adds	r6, r0, #4
 801b7d2:	b086      	sub	sp, #24
 801b7d4:	460c      	mov	r4, r1
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	4631      	mov	r1, r6
 801b7da:	4605      	mov	r5, r0
 801b7dc:	a802      	add	r0, sp, #8
 801b7de:	9301      	str	r3, [sp, #4]
 801b7e0:	f7ff fc98 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7e4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b7e8:	8822      	ldrh	r2, [r4, #0]
 801b7ea:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b7ee:	1ad2      	subs	r2, r2, r3
 801b7f0:	8863      	ldrh	r3, [r4, #2]
 801b7f2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b7f6:	1a5b      	subs	r3, r3, r1
 801b7f8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b7fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b800:	aa01      	add	r2, sp, #4
 801b802:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b806:	4630      	mov	r0, r6
 801b808:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b80c:	a904      	add	r1, sp, #16
 801b80e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b812:	f7fb fd17 	bl	8017244 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b816:	9a01      	ldr	r2, [sp, #4]
 801b818:	b11a      	cbz	r2, 801b822 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801b81a:	4621      	mov	r1, r4
 801b81c:	4628      	mov	r0, r5
 801b81e:	f7ff fed5 	bl	801b5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b822:	b006      	add	sp, #24
 801b824:	bd70      	pop	{r4, r5, r6, pc}

0801b826 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b826:	4602      	mov	r2, r0
 801b828:	b530      	push	{r4, r5, lr}
 801b82a:	4604      	mov	r4, r0
 801b82c:	b085      	sub	sp, #20
 801b82e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b832:	460d      	mov	r5, r1
 801b834:	466b      	mov	r3, sp
 801b836:	6851      	ldr	r1, [r2, #4]
 801b838:	c303      	stmia	r3!, {r0, r1}
 801b83a:	4629      	mov	r1, r5
 801b83c:	4668      	mov	r0, sp
 801b83e:	f7fb fc29 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 801b842:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b846:	b12b      	cbz	r3, 801b854 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801b848:	4669      	mov	r1, sp
 801b84a:	4620      	mov	r0, r4
 801b84c:	f7ff ffbf 	bl	801b7ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b850:	b005      	add	sp, #20
 801b852:	bd30      	pop	{r4, r5, pc}
 801b854:	3404      	adds	r4, #4
 801b856:	a802      	add	r0, sp, #8
 801b858:	4621      	mov	r1, r4
 801b85a:	f7ff fc5b 	bl	801b114 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b85e:	f8bd 3000 	ldrh.w	r3, [sp]
 801b862:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b866:	4669      	mov	r1, sp
 801b868:	4620      	mov	r0, r4
 801b86a:	1a9b      	subs	r3, r3, r2
 801b86c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b870:	f8ad 3000 	strh.w	r3, [sp]
 801b874:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b878:	1a9b      	subs	r3, r3, r2
 801b87a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b87e:	f7fb fca8 	bl	80171d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b882:	e7e5      	b.n	801b850 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801b884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b884:	460b      	mov	r3, r1
 801b886:	680a      	ldr	r2, [r1, #0]
 801b888:	1d01      	adds	r1, r0, #4
 801b88a:	6992      	ldr	r2, [r2, #24]
 801b88c:	4618      	mov	r0, r3
 801b88e:	4710      	bx	r2

0801b890 <_ZN8touchgfx12TextProviderC1Ev>:
 801b890:	b538      	push	{r3, r4, r5, lr}
 801b892:	2500      	movs	r5, #0
 801b894:	2302      	movs	r3, #2
 801b896:	4604      	mov	r4, r0
 801b898:	220e      	movs	r2, #14
 801b89a:	7403      	strb	r3, [r0, #16]
 801b89c:	4629      	mov	r1, r5
 801b89e:	6145      	str	r5, [r0, #20]
 801b8a0:	7605      	strb	r5, [r0, #24]
 801b8a2:	83c5      	strh	r5, [r0, #30]
 801b8a4:	8405      	strh	r5, [r0, #32]
 801b8a6:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b8a8:	8705      	strh	r5, [r0, #56]	; 0x38
 801b8aa:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801b8ac:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801b8b0:	e9c0 5500 	strd	r5, r5, [r0]
 801b8b4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801b8b8:	304c      	adds	r0, #76	; 0x4c
 801b8ba:	f00e ff39 	bl	802a730 <memset>
 801b8be:	2301      	movs	r3, #1
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801b8c6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b8ca:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801b8ce:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801b8d2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801b8d6:	f7e8 fa83 	bl	8003de0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b8da:	4620      	mov	r0, r4
 801b8dc:	bd38      	pop	{r3, r4, r5, pc}

0801b8de <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b8de:	b530      	push	{r4, r5, lr}
 801b8e0:	2500      	movs	r5, #0
 801b8e2:	2401      	movs	r4, #1
 801b8e4:	6843      	ldr	r3, [r0, #4]
 801b8e6:	b913      	cbnz	r3, 801b8ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b8e8:	6803      	ldr	r3, [r0, #0]
 801b8ea:	b313      	cbz	r3, 801b932 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b8ec:	6043      	str	r3, [r0, #4]
 801b8ee:	7e03      	ldrb	r3, [r0, #24]
 801b8f0:	b143      	cbz	r3, 801b904 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b8f2:	6943      	ldr	r3, [r0, #20]
 801b8f4:	b12b      	cbz	r3, 801b902 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b8f6:	881a      	ldrh	r2, [r3, #0]
 801b8f8:	b11a      	cbz	r2, 801b902 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b8fa:	1c9a      	adds	r2, r3, #2
 801b8fc:	6142      	str	r2, [r0, #20]
 801b8fe:	8818      	ldrh	r0, [r3, #0]
 801b900:	bd30      	pop	{r4, r5, pc}
 801b902:	7605      	strb	r5, [r0, #24]
 801b904:	6843      	ldr	r3, [r0, #4]
 801b906:	8819      	ldrh	r1, [r3, #0]
 801b908:	b199      	cbz	r1, 801b932 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b90a:	1c9a      	adds	r2, r3, #2
 801b90c:	2902      	cmp	r1, #2
 801b90e:	6042      	str	r2, [r0, #4]
 801b910:	d1f5      	bne.n	801b8fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b912:	7c03      	ldrb	r3, [r0, #16]
 801b914:	2b01      	cmp	r3, #1
 801b916:	d8e5      	bhi.n	801b8e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b918:	1c5a      	adds	r2, r3, #1
 801b91a:	3302      	adds	r3, #2
 801b91c:	7402      	strb	r2, [r0, #16]
 801b91e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801b922:	6143      	str	r3, [r0, #20]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d0dd      	beq.n	801b8e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b928:	881b      	ldrh	r3, [r3, #0]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d0da      	beq.n	801b8e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b92e:	7604      	strb	r4, [r0, #24]
 801b930:	e7d8      	b.n	801b8e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b932:	2000      	movs	r0, #0
 801b934:	e7e4      	b.n	801b900 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b936 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801b936:	6001      	str	r1, [r0, #0]
 801b938:	2100      	movs	r1, #0
 801b93a:	b430      	push	{r4, r5}
 801b93c:	6041      	str	r1, [r0, #4]
 801b93e:	6815      	ldr	r5, [r2, #0]
 801b940:	6085      	str	r5, [r0, #8]
 801b942:	6852      	ldr	r2, [r2, #4]
 801b944:	6443      	str	r3, [r0, #68]	; 0x44
 801b946:	9b02      	ldr	r3, [sp, #8]
 801b948:	60c2      	str	r2, [r0, #12]
 801b94a:	7401      	strb	r1, [r0, #16]
 801b94c:	6141      	str	r1, [r0, #20]
 801b94e:	7601      	strb	r1, [r0, #24]
 801b950:	8701      	strh	r1, [r0, #56]	; 0x38
 801b952:	8401      	strh	r1, [r0, #32]
 801b954:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b958:	6483      	str	r3, [r0, #72]	; 0x48
 801b95a:	bc30      	pop	{r4, r5}
 801b95c:	f7e8 ba40 	b.w	8003de0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801b960 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b960:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b962:	4605      	mov	r5, r0
 801b964:	4608      	mov	r0, r1
 801b966:	b1f1      	cbz	r1, 801b9a6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b968:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801b96c:	460b      	mov	r3, r1
 801b96e:	f101 0708 	add.w	r7, r1, #8
 801b972:	4622      	mov	r2, r4
 801b974:	6818      	ldr	r0, [r3, #0]
 801b976:	3308      	adds	r3, #8
 801b978:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b97c:	4626      	mov	r6, r4
 801b97e:	42bb      	cmp	r3, r7
 801b980:	c603      	stmia	r6!, {r0, r1}
 801b982:	4634      	mov	r4, r6
 801b984:	d1f6      	bne.n	801b974 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b986:	6818      	ldr	r0, [r3, #0]
 801b988:	6030      	str	r0, [r6, #0]
 801b98a:	4610      	mov	r0, r2
 801b98c:	889b      	ldrh	r3, [r3, #4]
 801b98e:	80b3      	strh	r3, [r6, #4]
 801b990:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801b994:	015b      	lsls	r3, r3, #5
 801b996:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b99a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801b99e:	430b      	orrs	r3, r1
 801b9a0:	425b      	negs	r3, r3
 801b9a2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b9a8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b9a8:	b538      	push	{r3, r4, r5, lr}
 801b9aa:	460c      	mov	r4, r1
 801b9ac:	6811      	ldr	r1, [r2, #0]
 801b9ae:	4610      	mov	r0, r2
 801b9b0:	68cd      	ldr	r5, [r1, #12]
 801b9b2:	4619      	mov	r1, r3
 801b9b4:	47a8      	blx	r5
 801b9b6:	2800      	cmp	r0, #0
 801b9b8:	bf08      	it	eq
 801b9ba:	4620      	moveq	r0, r4
 801b9bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b9c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9c2:	4604      	mov	r4, r0
 801b9c4:	4615      	mov	r5, r2
 801b9c6:	4608      	mov	r0, r1
 801b9c8:	b93a      	cbnz	r2, 801b9da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b9ca:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801b9ce:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801b9d2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801b9d6:	4628      	mov	r0, r5
 801b9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9da:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801b9de:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801b9e2:	8893      	ldrh	r3, [r2, #4]
 801b9e4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801b9e8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b9ec:	79ee      	ldrb	r6, [r5, #7]
 801b9ee:	4316      	orrs	r6, r2
 801b9f0:	19da      	adds	r2, r3, r7
 801b9f2:	b291      	uxth	r1, r2
 801b9f4:	b2b7      	uxth	r7, r6
 801b9f6:	291d      	cmp	r1, #29
 801b9f8:	d87b      	bhi.n	801baf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801b9fa:	2201      	movs	r2, #1
 801b9fc:	10f6      	asrs	r6, r6, #3
 801b9fe:	408a      	lsls	r2, r1
 801ba00:	4974      	ldr	r1, [pc, #464]	; (801bbd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ba02:	420a      	tst	r2, r1
 801ba04:	d12e      	bne.n	801ba64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ba06:	f412 7f60 	tst.w	r2, #896	; 0x380
 801ba0a:	d072      	beq.n	801baf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ba0c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801ba10:	462b      	mov	r3, r5
 801ba12:	f105 0e08 	add.w	lr, r5, #8
 801ba16:	4615      	mov	r5, r2
 801ba18:	6818      	ldr	r0, [r3, #0]
 801ba1a:	3308      	adds	r3, #8
 801ba1c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ba20:	4694      	mov	ip, r2
 801ba22:	4573      	cmp	r3, lr
 801ba24:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ba28:	4662      	mov	r2, ip
 801ba2a:	d1f5      	bne.n	801ba18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ba2c:	6818      	ldr	r0, [r3, #0]
 801ba2e:	f8cc 0000 	str.w	r0, [ip]
 801ba32:	889b      	ldrh	r3, [r3, #4]
 801ba34:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ba38:	b2b3      	uxth	r3, r6
 801ba3a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ba3e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801ba42:	1aca      	subs	r2, r1, r3
 801ba44:	1bcf      	subs	r7, r1, r7
 801ba46:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801ba4a:	b292      	uxth	r2, r2
 801ba4c:	1afb      	subs	r3, r7, r3
 801ba4e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801ba52:	10d2      	asrs	r2, r2, #3
 801ba54:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801ba58:	4302      	orrs	r2, r0
 801ba5a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801ba5e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ba62:	e7b8      	b.n	801b9d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ba64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ba66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ba6a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801ba6c:	f640 6333 	movw	r3, #3635	; 0xe33
 801ba70:	4299      	cmp	r1, r3
 801ba72:	d110      	bne.n	801ba96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801ba74:	6803      	ldr	r3, [r0, #0]
 801ba76:	68db      	ldr	r3, [r3, #12]
 801ba78:	4798      	blx	r3
 801ba7a:	7b41      	ldrb	r1, [r0, #13]
 801ba7c:	00cb      	lsls	r3, r1, #3
 801ba7e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ba82:	7a03      	ldrb	r3, [r0, #8]
 801ba84:	0648      	lsls	r0, r1, #25
 801ba86:	ea43 0302 	orr.w	r3, r3, r2
 801ba8a:	bf44      	itt	mi
 801ba8c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ba90:	b21b      	sxthmi	r3, r3
 801ba92:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ba96:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801ba9a:	462a      	mov	r2, r5
 801ba9c:	f105 0c08 	add.w	ip, r5, #8
 801baa0:	443b      	add	r3, r7
 801baa2:	4433      	add	r3, r6
 801baa4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801baa8:	b29b      	uxth	r3, r3
 801baaa:	4635      	mov	r5, r6
 801baac:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bab0:	6810      	ldr	r0, [r2, #0]
 801bab2:	3208      	adds	r2, #8
 801bab4:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801bab8:	4637      	mov	r7, r6
 801baba:	4562      	cmp	r2, ip
 801babc:	c703      	stmia	r7!, {r0, r1}
 801babe:	463e      	mov	r6, r7
 801bac0:	d1f6      	bne.n	801bab0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801bac2:	6810      	ldr	r0, [r2, #0]
 801bac4:	6038      	str	r0, [r7, #0]
 801bac6:	8892      	ldrh	r2, [r2, #4]
 801bac8:	80ba      	strh	r2, [r7, #4]
 801baca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bace:	10db      	asrs	r3, r3, #3
 801bad0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801bad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801badc:	4313      	orrs	r3, r2
 801bade:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801bae2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801bae6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801baea:	1a9b      	subs	r3, r3, r2
 801baec:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801baf0:	e771      	b.n	801b9d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801baf2:	f023 0204 	bic.w	r2, r3, #4
 801baf6:	f640 611b 	movw	r1, #3611	; 0xe1b
 801bafa:	428a      	cmp	r2, r1
 801bafc:	d003      	beq.n	801bb06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801bafe:	f640 621d 	movw	r2, #3613	; 0xe1d
 801bb02:	4293      	cmp	r3, r2
 801bb04:	d120      	bne.n	801bb48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801bb06:	3b01      	subs	r3, #1
 801bb08:	4602      	mov	r2, r0
 801bb0a:	4629      	mov	r1, r5
 801bb0c:	4620      	mov	r0, r4
 801bb0e:	b29b      	uxth	r3, r3
 801bb10:	f7ff ff4a 	bl	801b9a8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bb14:	7b41      	ldrb	r1, [r0, #13]
 801bb16:	00cb      	lsls	r3, r1, #3
 801bb18:	0649      	lsls	r1, r1, #25
 801bb1a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb1e:	7a03      	ldrb	r3, [r0, #8]
 801bb20:	ea43 0302 	orr.w	r3, r3, r2
 801bb24:	bf44      	itt	mi
 801bb26:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bb2a:	b21b      	sxthmi	r3, r3
 801bb2c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bb30:	7b6b      	ldrb	r3, [r5, #13]
 801bb32:	7aaa      	ldrb	r2, [r5, #10]
 801bb34:	005b      	lsls	r3, r3, #1
 801bb36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb3a:	4313      	orrs	r3, r2
 801bb3c:	115a      	asrs	r2, r3, #5
 801bb3e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bb42:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bb46:	e035      	b.n	801bbb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801bb48:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801bb4c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801bb50:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801bb54:	7a2a      	ldrb	r2, [r5, #8]
 801bb56:	ea42 0201 	orr.w	r2, r2, r1
 801bb5a:	f640 6109 	movw	r1, #3593	; 0xe09
 801bb5e:	bf1c      	itt	ne
 801bb60:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801bb64:	b212      	sxthne	r2, r2
 801bb66:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801bb6a:	f023 0210 	bic.w	r2, r3, #16
 801bb6e:	428a      	cmp	r2, r1
 801bb70:	d003      	beq.n	801bb7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801bb72:	f640 6213 	movw	r2, #3603	; 0xe13
 801bb76:	4293      	cmp	r3, r2
 801bb78:	d129      	bne.n	801bbce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801bb7a:	7b6e      	ldrb	r6, [r5, #13]
 801bb7c:	4629      	mov	r1, r5
 801bb7e:	0076      	lsls	r6, r6, #1
 801bb80:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bb84:	7aae      	ldrb	r6, [r5, #10]
 801bb86:	4316      	orrs	r6, r2
 801bb88:	f640 6213 	movw	r2, #3603	; 0xe13
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	4602      	mov	r2, r0
 801bb90:	4620      	mov	r0, r4
 801bb92:	bf16      	itet	ne
 801bb94:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bb98:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bb9c:	b29b      	uxthne	r3, r3
 801bb9e:	f7ff ff03 	bl	801b9a8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bba2:	7b43      	ldrb	r3, [r0, #13]
 801bba4:	7a82      	ldrb	r2, [r0, #10]
 801bba6:	005b      	lsls	r3, r3, #1
 801bba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbac:	4313      	orrs	r3, r2
 801bbae:	1af6      	subs	r6, r6, r3
 801bbb0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801bbb4:	7b69      	ldrb	r1, [r5, #13]
 801bbb6:	00cb      	lsls	r3, r1, #3
 801bbb8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bbbc:	7a2b      	ldrb	r3, [r5, #8]
 801bbbe:	4313      	orrs	r3, r2
 801bbc0:	064a      	lsls	r2, r1, #25
 801bbc2:	bf44      	itt	mi
 801bbc4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bbc8:	b21b      	sxthmi	r3, r3
 801bbca:	1bdb      	subs	r3, r3, r7
 801bbcc:	e747      	b.n	801ba5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801bbce:	2300      	movs	r3, #0
 801bbd0:	e7b7      	b.n	801bb42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801bbd2:	bf00      	nop
 801bbd4:	3fc00079 	.word	0x3fc00079

0801bbd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bbd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bbdc:	4604      	mov	r4, r0
 801bbde:	b942      	cbnz	r2, 801bbf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bbe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bbe4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801bbe8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801bbec:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bbf0:	e047      	b.n	801bc82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bbf2:	7b51      	ldrb	r1, [r2, #13]
 801bbf4:	8893      	ldrh	r3, [r2, #4]
 801bbf6:	010d      	lsls	r5, r1, #4
 801bbf8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801bbfc:	79d5      	ldrb	r5, [r2, #7]
 801bbfe:	4305      	orrs	r5, r0
 801bc00:	2d04      	cmp	r5, #4
 801bc02:	bfcc      	ite	gt
 801bc04:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bc08:	f04f 0e01 	movle.w	lr, #1
 801bc0c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801bc10:	f200 80ab 	bhi.w	801bd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bc14:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801bc18:	4283      	cmp	r3, r0
 801bc1a:	d216      	bcs.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc1c:	f240 605b 	movw	r0, #1627	; 0x65b
 801bc20:	4283      	cmp	r3, r0
 801bc22:	d859      	bhi.n	801bcd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bc24:	f240 6057 	movw	r0, #1623	; 0x657
 801bc28:	4283      	cmp	r3, r0
 801bc2a:	d20e      	bcs.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc2c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bc30:	d24a      	bcs.n	801bcc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bc32:	f240 604e 	movw	r0, #1614	; 0x64e
 801bc36:	4283      	cmp	r3, r0
 801bc38:	d207      	bcs.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc3a:	f240 601a 	movw	r0, #1562	; 0x61a
 801bc3e:	4283      	cmp	r3, r0
 801bc40:	d02a      	beq.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bc42:	d821      	bhi.n	801bc88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bc44:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801bc48:	d35b      	bcc.n	801bd02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bc4a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801bc4e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bc52:	f040 80d0 	bne.w	801bdf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bc56:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801bc5a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bc5e:	f040 80ca 	bne.w	801bdf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bc62:	00cb      	lsls	r3, r1, #3
 801bc64:	0649      	lsls	r1, r1, #25
 801bc66:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bc6a:	7a13      	ldrb	r3, [r2, #8]
 801bc6c:	ea43 0300 	orr.w	r3, r3, r0
 801bc70:	bf44      	itt	mi
 801bc72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc76:	b21b      	sxthmi	r3, r3
 801bc78:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bc7c:	1b5d      	subs	r5, r3, r5
 801bc7e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bc82:	4610      	mov	r0, r2
 801bc84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc88:	f240 604b 	movw	r0, #1611	; 0x64b
 801bc8c:	4283      	cmp	r3, r0
 801bc8e:	d338      	bcc.n	801bd02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bc90:	f240 604c 	movw	r0, #1612	; 0x64c
 801bc94:	4283      	cmp	r3, r0
 801bc96:	d9d8      	bls.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc98:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801bc9c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801bca0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bca4:	f040 80f3 	bne.w	801be8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801bca8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bcac:	f040 80ef 	bne.w	801be8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801bcb0:	00cb      	lsls	r3, r1, #3
 801bcb2:	064e      	lsls	r6, r1, #25
 801bcb4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bcb8:	7a13      	ldrb	r3, [r2, #8]
 801bcba:	ea43 0300 	orr.w	r3, r3, r0
 801bcbe:	bf44      	itt	mi
 801bcc0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bcc4:	b21b      	sxthmi	r3, r3
 801bcc6:	e7d9      	b.n	801bc7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801bcc8:	f240 6054 	movw	r0, #1620	; 0x654
 801bccc:	4283      	cmp	r3, r0
 801bcce:	d8e3      	bhi.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bcd0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bcd4:	d9e0      	bls.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bcd6:	e7b8      	b.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bcd8:	f240 6074 	movw	r0, #1652	; 0x674
 801bcdc:	4283      	cmp	r3, r0
 801bcde:	d0b4      	beq.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bce0:	d82d      	bhi.n	801bd3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801bce2:	f240 605e 	movw	r0, #1630	; 0x65e
 801bce6:	4283      	cmp	r3, r0
 801bce8:	d804      	bhi.n	801bcf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801bcea:	f240 605d 	movw	r0, #1629	; 0x65d
 801bcee:	4283      	cmp	r3, r0
 801bcf0:	d3d2      	bcc.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bcf2:	e7aa      	b.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bcf4:	f240 605f 	movw	r0, #1631	; 0x65f
 801bcf8:	4283      	cmp	r3, r0
 801bcfa:	d0cd      	beq.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bcfc:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801bd00:	d0a3      	beq.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd02:	00cb      	lsls	r3, r1, #3
 801bd04:	0649      	lsls	r1, r1, #25
 801bd06:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bd0a:	7a13      	ldrb	r3, [r2, #8]
 801bd0c:	ea43 0300 	orr.w	r3, r3, r0
 801bd10:	bf44      	itt	mi
 801bd12:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd16:	b21b      	sxthmi	r3, r3
 801bd18:	1b5d      	subs	r5, r3, r5
 801bd1a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bd1e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bd22:	7b53      	ldrb	r3, [r2, #13]
 801bd24:	015b      	lsls	r3, r3, #5
 801bd26:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bd2a:	7993      	ldrb	r3, [r2, #6]
 801bd2c:	430b      	orrs	r3, r1
 801bd2e:	2105      	movs	r1, #5
 801bd30:	005b      	lsls	r3, r3, #1
 801bd32:	fb93 f3f1 	sdiv	r3, r3, r1
 801bd36:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801bd3a:	440b      	add	r3, r1
 801bd3c:	e756      	b.n	801bbec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801bd3e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801bd42:	4283      	cmp	r3, r0
 801bd44:	d809      	bhi.n	801bd5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801bd46:	f240 60df 	movw	r0, #1759	; 0x6df
 801bd4a:	4283      	cmp	r3, r0
 801bd4c:	f4bf af7d 	bcs.w	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd50:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801bd54:	2b05      	cmp	r3, #5
 801bd56:	d8d4      	bhi.n	801bd02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bd58:	e777      	b.n	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd5a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801bd5e:	4283      	cmp	r3, r0
 801bd60:	d09a      	beq.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd62:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801bd66:	4283      	cmp	r3, r0
 801bd68:	e7ca      	b.n	801bd00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bd6a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801bd6e:	d22b      	bcs.n	801bdc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801bd70:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801bd74:	4283      	cmp	r3, r0
 801bd76:	d28f      	bcs.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd78:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bd7c:	4283      	cmp	r3, r0
 801bd7e:	d816      	bhi.n	801bdae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801bd80:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801bd84:	4283      	cmp	r3, r0
 801bd86:	f4bf af60 	bcs.w	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd8a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801bd8e:	4283      	cmp	r3, r0
 801bd90:	d80a      	bhi.n	801bda8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801bd92:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801bd96:	4283      	cmp	r3, r0
 801bd98:	f4bf af57 	bcs.w	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd9c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801bda0:	4283      	cmp	r3, r0
 801bda2:	f43f af79 	beq.w	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bda6:	e7ac      	b.n	801bd02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bda8:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801bdac:	e7f8      	b.n	801bda0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801bdae:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801bdb2:	4283      	cmp	r3, r0
 801bdb4:	d802      	bhi.n	801bdbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801bdb6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801bdba:	e798      	b.n	801bcee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801bdbc:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801bdc0:	4283      	cmp	r3, r0
 801bdc2:	f47f af42 	bne.w	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bdc6:	e767      	b.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdc8:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801bdcc:	4283      	cmp	r3, r0
 801bdce:	f43f af63 	beq.w	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdd2:	d802      	bhi.n	801bdda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801bdd4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801bdd8:	e7f2      	b.n	801bdc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801bdda:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801bdde:	4283      	cmp	r3, r0
 801bde0:	d805      	bhi.n	801bdee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801bde2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801bde6:	4283      	cmp	r3, r0
 801bde8:	f4ff af2f 	bcc.w	801bc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bdec:	e754      	b.n	801bc98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdee:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801bdf2:	4283      	cmp	r3, r0
 801bdf4:	e7af      	b.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801bdf6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801bdfa:	4617      	mov	r7, r2
 801bdfc:	f102 0808 	add.w	r8, r2, #8
 801be00:	4666      	mov	r6, ip
 801be02:	6838      	ldr	r0, [r7, #0]
 801be04:	3708      	adds	r7, #8
 801be06:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801be0a:	46e6      	mov	lr, ip
 801be0c:	4547      	cmp	r7, r8
 801be0e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801be12:	46f4      	mov	ip, lr
 801be14:	d1f5      	bne.n	801be02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801be16:	6838      	ldr	r0, [r7, #0]
 801be18:	f8ce 0000 	str.w	r0, [lr]
 801be1c:	88b9      	ldrh	r1, [r7, #4]
 801be1e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801be22:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801be26:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801be2a:	d009      	beq.n	801be40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801be2c:	7b51      	ldrb	r1, [r2, #13]
 801be2e:	7992      	ldrb	r2, [r2, #6]
 801be30:	0149      	lsls	r1, r1, #5
 801be32:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801be36:	4311      	orrs	r1, r2
 801be38:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801be3c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801be40:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801be44:	b2ad      	uxth	r5, r5
 801be46:	d00d      	beq.n	801be64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801be48:	442b      	add	r3, r5
 801be4a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801be4e:	b29b      	uxth	r3, r3
 801be50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801be54:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801be58:	10db      	asrs	r3, r3, #3
 801be5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801be5e:	4313      	orrs	r3, r2
 801be60:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801be64:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801be68:	00cb      	lsls	r3, r1, #3
 801be6a:	064f      	lsls	r7, r1, #25
 801be6c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801be70:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801be74:	ea43 0302 	orr.w	r3, r3, r2
 801be78:	bf44      	itt	mi
 801be7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801be7e:	b21b      	sxthmi	r3, r3
 801be80:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801be84:	1b5b      	subs	r3, r3, r5
 801be86:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801be8a:	4632      	mov	r2, r6
 801be8c:	e6f9      	b.n	801bc82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801be8e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801be92:	4617      	mov	r7, r2
 801be94:	f102 0908 	add.w	r9, r2, #8
 801be98:	4666      	mov	r6, ip
 801be9a:	6838      	ldr	r0, [r7, #0]
 801be9c:	3708      	adds	r7, #8
 801be9e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801bea2:	46e0      	mov	r8, ip
 801bea4:	454f      	cmp	r7, r9
 801bea6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801beaa:	46c4      	mov	ip, r8
 801beac:	d1f5      	bne.n	801be9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801beae:	6838      	ldr	r0, [r7, #0]
 801beb0:	f8c8 0000 	str.w	r0, [r8]
 801beb4:	88b9      	ldrh	r1, [r7, #4]
 801beb6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801beba:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801bebe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bec2:	d009      	beq.n	801bed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801bec4:	7b51      	ldrb	r1, [r2, #13]
 801bec6:	7992      	ldrb	r2, [r2, #6]
 801bec8:	0149      	lsls	r1, r1, #5
 801beca:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bece:	4311      	orrs	r1, r2
 801bed0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bed4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801bed8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bedc:	d00e      	beq.n	801befc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801bede:	eba3 030e 	sub.w	r3, r3, lr
 801bee2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801bee6:	b29b      	uxth	r3, r3
 801bee8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801beec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bef0:	10db      	asrs	r3, r3, #3
 801bef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bef6:	4313      	orrs	r3, r2
 801bef8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801befc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801bf00:	00cb      	lsls	r3, r1, #3
 801bf02:	0648      	lsls	r0, r1, #25
 801bf04:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bf08:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801bf0c:	ea43 0302 	orr.w	r3, r3, r2
 801bf10:	bf44      	itt	mi
 801bf12:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bf16:	b21b      	sxthmi	r3, r3
 801bf18:	1b5d      	subs	r5, r3, r5
 801bf1a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bf1e:	e7b4      	b.n	801be8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf24:	461e      	mov	r6, r3
 801bf26:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bf28:	4604      	mov	r4, r0
 801bf2a:	4617      	mov	r7, r2
 801bf2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bf30:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bf34:	f7e7 ff12 	bl	8003d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf38:	4605      	mov	r5, r0
 801bf3a:	b918      	cbnz	r0, 801bf44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801bf3c:	6030      	str	r0, [r6, #0]
 801bf3e:	4628      	mov	r0, r5
 801bf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf44:	683b      	ldr	r3, [r7, #0]
 801bf46:	4601      	mov	r1, r0
 801bf48:	4638      	mov	r0, r7
 801bf4a:	68db      	ldr	r3, [r3, #12]
 801bf4c:	4798      	blx	r3
 801bf4e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801bf52:	4602      	mov	r2, r0
 801bf54:	6030      	str	r0, [r6, #0]
 801bf56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bf5a:	d213      	bcs.n	801bf84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801bf5c:	4643      	mov	r3, r8
 801bf5e:	4639      	mov	r1, r7
 801bf60:	4620      	mov	r0, r4
 801bf62:	f7ff fe39 	bl	801bbd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bf66:	6030      	str	r0, [r6, #0]
 801bf68:	6833      	ldr	r3, [r6, #0]
 801bf6a:	b143      	cbz	r3, 801bf7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801bf6c:	7b5a      	ldrb	r2, [r3, #13]
 801bf6e:	7a9b      	ldrb	r3, [r3, #10]
 801bf70:	0052      	lsls	r2, r2, #1
 801bf72:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bf76:	4313      	orrs	r3, r2
 801bf78:	bf0c      	ite	eq
 801bf7a:	2301      	moveq	r3, #1
 801bf7c:	2300      	movne	r3, #0
 801bf7e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801bf82:	e7dc      	b.n	801bf3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801bf84:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801bf88:	b29b      	uxth	r3, r3
 801bf8a:	2b7f      	cmp	r3, #127	; 0x7f
 801bf8c:	d804      	bhi.n	801bf98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801bf8e:	4639      	mov	r1, r7
 801bf90:	4620      	mov	r0, r4
 801bf92:	f7ff fd15 	bl	801b9c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bf96:	e7e6      	b.n	801bf66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801bf98:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d0e3      	beq.n	801bf68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bfa0:	f640 1302 	movw	r3, #2306	; 0x902
 801bfa4:	429d      	cmp	r5, r3
 801bfa6:	d1df      	bne.n	801bf68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bfa8:	4601      	mov	r1, r0
 801bfaa:	4620      	mov	r0, r4
 801bfac:	f7ff fcd8 	bl	801b960 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bfb0:	e7d9      	b.n	801bf66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801bfb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801bfb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bfb6:	461e      	mov	r6, r3
 801bfb8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bfba:	4604      	mov	r4, r0
 801bfbc:	4617      	mov	r7, r2
 801bfbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bfc2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bfc6:	f7e7 fec9 	bl	8003d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bfca:	4605      	mov	r5, r0
 801bfcc:	b918      	cbnz	r0, 801bfd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801bfce:	6030      	str	r0, [r6, #0]
 801bfd0:	4628      	mov	r0, r5
 801bfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	4601      	mov	r1, r0
 801bfda:	4638      	mov	r0, r7
 801bfdc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801bfe0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bfe4:	47c8      	blx	r9
 801bfe6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801bfea:	4602      	mov	r2, r0
 801bfec:	6030      	str	r0, [r6, #0]
 801bfee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bff2:	d213      	bcs.n	801c01c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801bff4:	4643      	mov	r3, r8
 801bff6:	4639      	mov	r1, r7
 801bff8:	4620      	mov	r0, r4
 801bffa:	f7ff fded 	bl	801bbd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bffe:	6030      	str	r0, [r6, #0]
 801c000:	6833      	ldr	r3, [r6, #0]
 801c002:	b143      	cbz	r3, 801c016 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801c004:	7b5a      	ldrb	r2, [r3, #13]
 801c006:	7a9b      	ldrb	r3, [r3, #10]
 801c008:	0052      	lsls	r2, r2, #1
 801c00a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c00e:	4313      	orrs	r3, r2
 801c010:	bf0c      	ite	eq
 801c012:	2301      	moveq	r3, #1
 801c014:	2300      	movne	r3, #0
 801c016:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801c01a:	e7d9      	b.n	801bfd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801c01c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c020:	b29b      	uxth	r3, r3
 801c022:	2b7f      	cmp	r3, #127	; 0x7f
 801c024:	d804      	bhi.n	801c030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801c026:	4639      	mov	r1, r7
 801c028:	4620      	mov	r0, r4
 801c02a:	f7ff fcc9 	bl	801b9c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c02e:	e7e6      	b.n	801bffe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801c030:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801c034:	2b00      	cmp	r3, #0
 801c036:	d0e3      	beq.n	801c000 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c038:	f640 1302 	movw	r3, #2306	; 0x902
 801c03c:	429d      	cmp	r5, r3
 801c03e:	d1df      	bne.n	801c000 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c040:	4601      	mov	r1, r0
 801c042:	4620      	mov	r0, r4
 801c044:	f7ff fc8c 	bl	801b960 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c048:	e7d9      	b.n	801bffe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801c04a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c04a:	b510      	push	{r4, lr}
 801c04c:	4604      	mov	r4, r0
 801c04e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801c052:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c054:	b1e1      	cbz	r1, 801c090 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c056:	2b0a      	cmp	r3, #10
 801c058:	d02d      	beq.n	801c0b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c05a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801c05c:	3901      	subs	r1, #1
 801c05e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c062:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801c064:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801c068:	1c51      	adds	r1, r2, #1
 801c06a:	b289      	uxth	r1, r1
 801c06c:	2901      	cmp	r1, #1
 801c06e:	bf8a      	itet	hi
 801c070:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c074:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801c076:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801c078:	1c5a      	adds	r2, r3, #1
 801c07a:	8722      	strh	r2, [r4, #56]	; 0x38
 801c07c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c07e:	4413      	add	r3, r2
 801c080:	b29b      	uxth	r3, r3
 801c082:	2b09      	cmp	r3, #9
 801c084:	bf88      	it	hi
 801c086:	3b0a      	subhi	r3, #10
 801c088:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c08c:	8458      	strh	r0, [r3, #34]	; 0x22
 801c08e:	e7de      	b.n	801c04e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c090:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c092:	2b0a      	cmp	r3, #10
 801c094:	d00f      	beq.n	801c0b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c096:	4620      	mov	r0, r4
 801c098:	f7ff fc21 	bl	801b8de <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c09c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c09e:	1c5a      	adds	r2, r3, #1
 801c0a0:	8722      	strh	r2, [r4, #56]	; 0x38
 801c0a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c0a4:	4413      	add	r3, r2
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	2b09      	cmp	r3, #9
 801c0aa:	bf88      	it	hi
 801c0ac:	3b0a      	subhi	r3, #10
 801c0ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c0b2:	8458      	strh	r0, [r3, #34]	; 0x22
 801c0b4:	e7ec      	b.n	801c090 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c0b6:	bd10      	pop	{r4, pc}

0801c0b8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c0b8:	b538      	push	{r3, r4, r5, lr}
 801c0ba:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c0bc:	4604      	mov	r4, r0
 801c0be:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c0c2:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801c0c4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801c0c6:	3a01      	subs	r2, #1
 801c0c8:	8702      	strh	r2, [r0, #56]	; 0x38
 801c0ca:	1c5a      	adds	r2, r3, #1
 801c0cc:	b292      	uxth	r2, r2
 801c0ce:	2a09      	cmp	r2, #9
 801c0d0:	bf8a      	itet	hi
 801c0d2:	3b09      	subhi	r3, #9
 801c0d4:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801c0d6:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801c0d8:	f7ff ffb7 	bl	801c04a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c0dc:	8c23      	ldrh	r3, [r4, #32]
 801c0de:	2b01      	cmp	r3, #1
 801c0e0:	bf9c      	itt	ls
 801c0e2:	3301      	addls	r3, #1
 801c0e4:	8423      	strhls	r3, [r4, #32]
 801c0e6:	8be3      	ldrh	r3, [r4, #30]
 801c0e8:	b90b      	cbnz	r3, 801c0ee <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c0ea:	2302      	movs	r3, #2
 801c0ec:	83e3      	strh	r3, [r4, #30]
 801c0ee:	8be3      	ldrh	r3, [r4, #30]
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	3b01      	subs	r3, #1
 801c0f4:	b29b      	uxth	r3, r3
 801c0f6:	83e3      	strh	r3, [r4, #30]
 801c0f8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c0fc:	8365      	strh	r5, [r4, #26]
 801c0fe:	bd38      	pop	{r3, r4, r5, pc}

0801c100 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c100:	428a      	cmp	r2, r1
 801c102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c106:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801c108:	d932      	bls.n	801c170 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801c10a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801c10c:	1a54      	subs	r4, r2, r1
 801c10e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801c112:	19ee      	adds	r6, r5, r7
 801c114:	fa1f fe84 	uxth.w	lr, r4
 801c118:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801c11c:	3e01      	subs	r6, #1
 801c11e:	b2b4      	uxth	r4, r6
 801c120:	eba4 090e 	sub.w	r9, r4, lr
 801c124:	fa1f f989 	uxth.w	r9, r9
 801c128:	2c09      	cmp	r4, #9
 801c12a:	4626      	mov	r6, r4
 801c12c:	bf88      	it	hi
 801c12e:	f1a4 060a 	subhi.w	r6, r4, #10
 801c132:	f1bc 0f00 	cmp.w	ip, #0
 801c136:	f104 34ff 	add.w	r4, r4, #4294967295
 801c13a:	bf08      	it	eq
 801c13c:	f04f 0c02 	moveq.w	ip, #2
 801c140:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c144:	b2a4      	uxth	r4, r4
 801c146:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c14a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801c14e:	454c      	cmp	r4, r9
 801c150:	fa1f fc8c 	uxth.w	ip, ip
 801c154:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c158:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801c15c:	d1e4      	bne.n	801c128 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c15e:	eba5 050e 	sub.w	r5, r5, lr
 801c162:	eb0e 0408 	add.w	r4, lr, r8
 801c166:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801c16a:	8705      	strh	r5, [r0, #56]	; 0x38
 801c16c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801c170:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801c172:	250a      	movs	r5, #10
 801c174:	1a64      	subs	r4, r4, r1
 801c176:	4439      	add	r1, r7
 801c178:	b289      	uxth	r1, r1
 801c17a:	8704      	strh	r4, [r0, #56]	; 0x38
 801c17c:	2909      	cmp	r1, #9
 801c17e:	bf88      	it	hi
 801c180:	390a      	subhi	r1, #10
 801c182:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c184:	b18a      	cbz	r2, 801c1aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c186:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801c188:	3a01      	subs	r2, #1
 801c18a:	3101      	adds	r1, #1
 801c18c:	b292      	uxth	r2, r2
 801c18e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c192:	8701      	strh	r1, [r0, #56]	; 0x38
 801c194:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c196:	b901      	cbnz	r1, 801c19a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801c198:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c19a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c19c:	3901      	subs	r1, #1
 801c19e:	b289      	uxth	r1, r1
 801c1a0:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c1a2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c1a6:	844c      	strh	r4, [r1, #34]	; 0x22
 801c1a8:	e7ec      	b.n	801c184 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801c1aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1ae:	f7ff bf4c 	b.w	801c04a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c1b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c1b2:	b570      	push	{r4, r5, r6, lr}
 801c1b4:	2500      	movs	r5, #0
 801c1b6:	4295      	cmp	r5, r2
 801c1b8:	d011      	beq.n	801c1de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c1ba:	8bc4      	ldrh	r4, [r0, #30]
 801c1bc:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c1c0:	4414      	add	r4, r2
 801c1c2:	3c01      	subs	r4, #1
 801c1c4:	1b64      	subs	r4, r4, r5
 801c1c6:	b2a4      	uxth	r4, r4
 801c1c8:	2c01      	cmp	r4, #1
 801c1ca:	bf88      	it	hi
 801c1cc:	3c02      	subhi	r4, #2
 801c1ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c1d2:	8b64      	ldrh	r4, [r4, #26]
 801c1d4:	42b4      	cmp	r4, r6
 801c1d6:	d117      	bne.n	801c208 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c1d8:	3501      	adds	r5, #1
 801c1da:	b2ad      	uxth	r5, r5
 801c1dc:	e7eb      	b.n	801c1b6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c1de:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c1e2:	2400      	movs	r4, #0
 801c1e4:	4413      	add	r3, r2
 801c1e6:	b2a2      	uxth	r2, r4
 801c1e8:	429a      	cmp	r2, r3
 801c1ea:	da0f      	bge.n	801c20c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c1ec:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801c1ee:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c1f2:	3401      	adds	r4, #1
 801c1f4:	4432      	add	r2, r6
 801c1f6:	b292      	uxth	r2, r2
 801c1f8:	2a09      	cmp	r2, #9
 801c1fa:	bf88      	it	hi
 801c1fc:	3a0a      	subhi	r2, #10
 801c1fe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c202:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801c204:	42aa      	cmp	r2, r5
 801c206:	d0ee      	beq.n	801c1e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c208:	2000      	movs	r0, #0
 801c20a:	bd70      	pop	{r4, r5, r6, pc}
 801c20c:	2001      	movs	r0, #1
 801c20e:	e7fc      	b.n	801c20a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c210 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c214:	4605      	mov	r5, r0
 801c216:	4616      	mov	r6, r2
 801c218:	1c8c      	adds	r4, r1, #2
 801c21a:	8809      	ldrh	r1, [r1, #0]
 801c21c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c220:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c224:	42b3      	cmp	r3, r6
 801c226:	d124      	bne.n	801c272 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c228:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c22c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c230:	f001 070f 	and.w	r7, r1, #15
 801c234:	4652      	mov	r2, sl
 801c236:	f8cd 8000 	str.w	r8, [sp]
 801c23a:	464b      	mov	r3, r9
 801c23c:	4621      	mov	r1, r4
 801c23e:	4628      	mov	r0, r5
 801c240:	f7ff ffb7 	bl	801c1b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c244:	4683      	mov	fp, r0
 801c246:	b168      	cbz	r0, 801c264 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c248:	eb0a 0109 	add.w	r1, sl, r9
 801c24c:	463a      	mov	r2, r7
 801c24e:	4628      	mov	r0, r5
 801c250:	4441      	add	r1, r8
 801c252:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c256:	4649      	mov	r1, r9
 801c258:	f7ff ff52 	bl	801c100 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c25c:	4658      	mov	r0, fp
 801c25e:	b003      	add	sp, #12
 801c260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c264:	eb07 010a 	add.w	r1, r7, sl
 801c268:	4449      	add	r1, r9
 801c26a:	4441      	add	r1, r8
 801c26c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c270:	e7d2      	b.n	801c218 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c272:	f04f 0b00 	mov.w	fp, #0
 801c276:	e7f1      	b.n	801c25c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c278 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c278:	b570      	push	{r4, r5, r6, lr}
 801c27a:	8810      	ldrh	r0, [r2, #0]
 801c27c:	4298      	cmp	r0, r3
 801c27e:	d817      	bhi.n	801c2b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c280:	1e48      	subs	r0, r1, #1
 801c282:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c286:	4298      	cmp	r0, r3
 801c288:	d312      	bcc.n	801c2b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c28a:	2400      	movs	r4, #0
 801c28c:	428c      	cmp	r4, r1
 801c28e:	d20f      	bcs.n	801c2b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c290:	1860      	adds	r0, r4, r1
 801c292:	1040      	asrs	r0, r0, #1
 801c294:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c298:	0085      	lsls	r5, r0, #2
 801c29a:	42b3      	cmp	r3, r6
 801c29c:	d902      	bls.n	801c2a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c29e:	3001      	adds	r0, #1
 801c2a0:	b284      	uxth	r4, r0
 801c2a2:	e7f3      	b.n	801c28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c2a4:	d201      	bcs.n	801c2aa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c2a6:	b281      	uxth	r1, r0
 801c2a8:	e7f0      	b.n	801c28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c2aa:	442a      	add	r2, r5
 801c2ac:	8850      	ldrh	r0, [r2, #2]
 801c2ae:	bd70      	pop	{r4, r5, r6, pc}
 801c2b0:	2000      	movs	r0, #0
 801c2b2:	e7fc      	b.n	801c2ae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c2b4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2b8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801c2ba:	4604      	mov	r4, r0
 801c2bc:	260b      	movs	r6, #11
 801c2be:	886f      	ldrh	r7, [r5, #2]
 801c2c0:	087f      	lsrs	r7, r7, #1
 801c2c2:	3e01      	subs	r6, #1
 801c2c4:	d013      	beq.n	801c2ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c2c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c2c8:	462a      	mov	r2, r5
 801c2ca:	4639      	mov	r1, r7
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c2d2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c2d6:	4643      	mov	r3, r8
 801c2d8:	f7ff ffce 	bl	801c278 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c2dc:	b138      	cbz	r0, 801c2ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c2de:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c2e2:	4642      	mov	r2, r8
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	f7ff ff93 	bl	801c210 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c2ea:	2800      	cmp	r0, #0
 801c2ec:	d1e9      	bne.n	801c2c2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c2f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c2f4:	b570      	push	{r4, r5, r6, lr}
 801c2f6:	694a      	ldr	r2, [r1, #20]
 801c2f8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c2fa:	684b      	ldr	r3, [r1, #4]
 801c2fc:	1b54      	subs	r4, r2, r5
 801c2fe:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c300:	f000 8106 	beq.w	801c510 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c304:	1b9b      	subs	r3, r3, r6
 801c306:	d003      	beq.n	801c310 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c308:	4363      	muls	r3, r4
 801c30a:	2210      	movs	r2, #16
 801c30c:	fb93 f3f2 	sdiv	r3, r3, r2
 801c310:	680c      	ldr	r4, [r1, #0]
 801c312:	698a      	ldr	r2, [r1, #24]
 801c314:	1b65      	subs	r5, r4, r5
 801c316:	f000 80fd 	beq.w	801c514 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c31a:	1b92      	subs	r2, r2, r6
 801c31c:	d003      	beq.n	801c326 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c31e:	436a      	muls	r2, r5
 801c320:	2410      	movs	r4, #16
 801c322:	fb92 f2f4 	sdiv	r2, r2, r4
 801c326:	1a9b      	subs	r3, r3, r2
 801c328:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c550 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c32c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c330:	460a      	mov	r2, r1
 801c332:	ee07 3a90 	vmov	s15, r3
 801c336:	f100 040c 	add.w	r4, r0, #12
 801c33a:	4603      	mov	r3, r0
 801c33c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c340:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c344:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c348:	eeb1 6a43 	vneg.f32	s12, s6
 801c34c:	edd2 7a02 	vldr	s15, [r2, #8]
 801c350:	3214      	adds	r2, #20
 801c352:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c356:	ece3 6a01 	vstmia	r3!, {s13}
 801c35a:	429c      	cmp	r4, r3
 801c35c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c360:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c364:	edc3 7a02 	vstr	s15, [r3, #8]
 801c368:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c36c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c370:	edc3 7a05 	vstr	s15, [r3, #20]
 801c374:	d1ea      	bne.n	801c34c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c376:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c378:	698b      	ldr	r3, [r1, #24]
 801c37a:	edd0 4a02 	vldr	s9, [r0, #8]
 801c37e:	1a9b      	subs	r3, r3, r2
 801c380:	edd0 3a00 	vldr	s7, [r0]
 801c384:	edd0 6a01 	vldr	s13, [r0, #4]
 801c388:	ee07 3a90 	vmov	s15, r3
 801c38c:	684b      	ldr	r3, [r1, #4]
 801c38e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c392:	ed90 5a05 	vldr	s10, [r0, #20]
 801c396:	1a9b      	subs	r3, r3, r2
 801c398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c39c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c3a0:	ed90 2a03 	vldr	s4, [r0, #12]
 801c3a4:	ee07 3a10 	vmov	s14, r3
 801c3a8:	edd0 5a04 	vldr	s11, [r0, #16]
 801c3ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c3b0:	ed90 1a07 	vldr	s2, [r0, #28]
 801c3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3b8:	edd0 2a06 	vldr	s5, [r0, #24]
 801c3bc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c3c0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c3c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3c8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c3cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c3d0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c3d4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c3d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c3da:	694a      	ldr	r2, [r1, #20]
 801c3dc:	1b13      	subs	r3, r2, r4
 801c3de:	ee07 3a10 	vmov	s14, r3
 801c3e2:	680b      	ldr	r3, [r1, #0]
 801c3e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3e8:	1b1b      	subs	r3, r3, r4
 801c3ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3ee:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c3f2:	ee07 3a10 	vmov	s14, r3
 801c3f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3fe:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c402:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c406:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c40a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c40c:	698b      	ldr	r3, [r1, #24]
 801c40e:	1a9b      	subs	r3, r3, r2
 801c410:	ee06 3a90 	vmov	s13, r3
 801c414:	684b      	ldr	r3, [r1, #4]
 801c416:	1a9b      	subs	r3, r3, r2
 801c418:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c41c:	ee07 3a10 	vmov	s14, r3
 801c420:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c428:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c42c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c430:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c434:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c438:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c43c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c43e:	694a      	ldr	r2, [r1, #20]
 801c440:	1b13      	subs	r3, r2, r4
 801c442:	ee07 3a10 	vmov	s14, r3
 801c446:	680b      	ldr	r3, [r1, #0]
 801c448:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c44c:	1b1b      	subs	r3, r3, r4
 801c44e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c452:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c456:	ee07 3a10 	vmov	s14, r3
 801c45a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c45e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c462:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c466:	edd0 5a08 	vldr	s11, [r0, #32]
 801c46a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c46e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c472:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c476:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c47a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c47c:	698b      	ldr	r3, [r1, #24]
 801c47e:	1a9b      	subs	r3, r3, r2
 801c480:	ee07 3a10 	vmov	s14, r3
 801c484:	684b      	ldr	r3, [r1, #4]
 801c486:	1a9b      	subs	r3, r3, r2
 801c488:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c48c:	ee01 3a90 	vmov	s3, r3
 801c490:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c494:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c498:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c49c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c4a0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c4a4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c4a8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c4ac:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c4ae:	694a      	ldr	r2, [r1, #20]
 801c4b0:	1b13      	subs	r3, r2, r4
 801c4b2:	ee03 3a10 	vmov	s6, r3
 801c4b6:	680b      	ldr	r3, [r1, #0]
 801c4b8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c4bc:	1b1b      	subs	r3, r3, r4
 801c4be:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c4c2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c4c6:	ee03 3a10 	vmov	s6, r3
 801c4ca:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c4ce:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c4d2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c4d6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c4da:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c4de:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c4e2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c4e6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ee:	dd13      	ble.n	801c518 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c4f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c4f4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c4f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c4fa:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c4fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c506:	dd15      	ble.n	801c534 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c50c:	6403      	str	r3, [r0, #64]	; 0x40
 801c50e:	bd70      	pop	{r4, r5, r6, pc}
 801c510:	4623      	mov	r3, r4
 801c512:	e6fd      	b.n	801c310 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c514:	462a      	mov	r2, r5
 801c516:	e706      	b.n	801c326 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c518:	d502      	bpl.n	801c520 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c51a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c51e:	e7e9      	b.n	801c4f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c520:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c524:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c528:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c530:	dade      	bge.n	801c4f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c532:	e7f2      	b.n	801c51a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c534:	d502      	bpl.n	801c53c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c536:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c53a:	e7e7      	b.n	801c50c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c53c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c540:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c544:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c54c:	dadc      	bge.n	801c508 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c54e:	e7f2      	b.n	801c536 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c550:	3d800000 	.word	0x3d800000

0801c554 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c558:	2714      	movs	r7, #20
 801c55a:	435f      	muls	r7, r3
 801c55c:	eb02 0c07 	add.w	ip, r2, r7
 801c560:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c564:	f115 0e0f 	adds.w	lr, r5, #15
 801c568:	f100 80a2 	bmi.w	801c6b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c56c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c570:	9c08      	ldr	r4, [sp, #32]
 801c572:	2614      	movs	r6, #20
 801c574:	f8c0 e014 	str.w	lr, [r0, #20]
 801c578:	4366      	muls	r6, r4
 801c57a:	eb02 0806 	add.w	r8, r2, r6
 801c57e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c582:	f115 040f 	adds.w	r4, r5, #15
 801c586:	f100 809f 	bmi.w	801c6c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c58a:	1124      	asrs	r4, r4, #4
 801c58c:	eba4 040e 	sub.w	r4, r4, lr
 801c590:	6184      	str	r4, [r0, #24]
 801c592:	2c00      	cmp	r4, #0
 801c594:	f000 808a 	beq.w	801c6ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c598:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c59c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c5a0:	5995      	ldr	r5, [r2, r6]
 801c5a2:	eba4 0809 	sub.w	r8, r4, r9
 801c5a6:	59d4      	ldr	r4, [r2, r7]
 801c5a8:	eba5 0a04 	sub.w	sl, r5, r4
 801c5ac:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c5b0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c5b4:	fb0e fe05 	mul.w	lr, lr, r5
 801c5b8:	fb0a ee19 	mls	lr, sl, r9, lr
 801c5bc:	fb08 e404 	mla	r4, r8, r4, lr
 801c5c0:	3c01      	subs	r4, #1
 801c5c2:	19a4      	adds	r4, r4, r6
 801c5c4:	f100 808c 	bmi.w	801c6e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c5c8:	fb94 fef6 	sdiv	lr, r4, r6
 801c5cc:	fb06 441e 	mls	r4, r6, lr, r4
 801c5d0:	f8c0 e000 	str.w	lr, [r0]
 801c5d4:	6104      	str	r4, [r0, #16]
 801c5d6:	2d00      	cmp	r5, #0
 801c5d8:	f2c0 8095 	blt.w	801c706 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c5dc:	fb95 f4f6 	sdiv	r4, r5, r6
 801c5e0:	fb06 5514 	mls	r5, r6, r4, r5
 801c5e4:	6044      	str	r4, [r0, #4]
 801c5e6:	6085      	str	r5, [r0, #8]
 801c5e8:	60c6      	str	r6, [r0, #12]
 801c5ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c5ee:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c5f2:	6945      	ldr	r5, [r0, #20]
 801c5f4:	59d2      	ldr	r2, [r2, r7]
 801c5f6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c5fa:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801c728 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c5fe:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c602:	ee07 4a10 	vmov	s14, r4
 801c606:	6804      	ldr	r4, [r0, #0]
 801c608:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c60c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c610:	ee07 2a90 	vmov	s15, r2
 801c614:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c61c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c620:	edd3 6a00 	vldr	s13, [r3]
 801c624:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c628:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801c62c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c630:	edc0 6a07 	vstr	s13, [r0, #28]
 801c634:	edd0 6a01 	vldr	s13, [r0, #4]
 801c638:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801c63c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c640:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c644:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c648:	ed80 6a08 	vstr	s12, [r0, #32]
 801c64c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801c64e:	6242      	str	r2, [r0, #36]	; 0x24
 801c650:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801c654:	ed93 6a03 	vldr	s12, [r3, #12]
 801c658:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c65c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c660:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c664:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801c668:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c66c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801c670:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c674:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801c678:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c67a:	6302      	str	r2, [r0, #48]	; 0x30
 801c67c:	ed93 6a06 	vldr	s12, [r3, #24]
 801c680:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801c684:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c688:	eeb0 7a46 	vmov.f32	s14, s12
 801c68c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801c690:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c694:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c698:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801c69c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801c6a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c6a4:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801c6a8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801c6aa:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6b0:	2410      	movs	r4, #16
 801c6b2:	f1c5 0501 	rsb	r5, r5, #1
 801c6b6:	fb9e fef4 	sdiv	lr, lr, r4
 801c6ba:	f015 050f 	ands.w	r5, r5, #15
 801c6be:	bf18      	it	ne
 801c6c0:	2501      	movne	r5, #1
 801c6c2:	ebae 0e05 	sub.w	lr, lr, r5
 801c6c6:	e753      	b.n	801c570 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c6c8:	f04f 0910 	mov.w	r9, #16
 801c6cc:	f1c5 0501 	rsb	r5, r5, #1
 801c6d0:	fb94 f4f9 	sdiv	r4, r4, r9
 801c6d4:	f015 050f 	ands.w	r5, r5, #15
 801c6d8:	bf18      	it	ne
 801c6da:	2501      	movne	r5, #1
 801c6dc:	1b64      	subs	r4, r4, r5
 801c6de:	e755      	b.n	801c58c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c6e0:	4264      	negs	r4, r4
 801c6e2:	fb94 fef6 	sdiv	lr, r4, r6
 801c6e6:	f1ce 0800 	rsb	r8, lr, #0
 801c6ea:	fb06 441e 	mls	r4, r6, lr, r4
 801c6ee:	f8c0 8000 	str.w	r8, [r0]
 801c6f2:	6104      	str	r4, [r0, #16]
 801c6f4:	2c00      	cmp	r4, #0
 801c6f6:	f43f af6e 	beq.w	801c5d6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c6fa:	ea6f 0e0e 	mvn.w	lr, lr
 801c6fe:	1b34      	subs	r4, r6, r4
 801c700:	f8c0 e000 	str.w	lr, [r0]
 801c704:	e766      	b.n	801c5d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c706:	426d      	negs	r5, r5
 801c708:	fb95 f4f6 	sdiv	r4, r5, r6
 801c70c:	f1c4 0e00 	rsb	lr, r4, #0
 801c710:	fb06 5514 	mls	r5, r6, r4, r5
 801c714:	f8c0 e004 	str.w	lr, [r0, #4]
 801c718:	6085      	str	r5, [r0, #8]
 801c71a:	2d00      	cmp	r5, #0
 801c71c:	f43f af64 	beq.w	801c5e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c720:	43e4      	mvns	r4, r4
 801c722:	1b75      	subs	r5, r6, r5
 801c724:	6044      	str	r4, [r0, #4]
 801c726:	e75e      	b.n	801c5e6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c728:	3d800000 	.word	0x3d800000

0801c72c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c72c:	4b01      	ldr	r3, [pc, #4]	; (801c734 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c72e:	6018      	str	r0, [r3, #0]
 801c730:	4770      	bx	lr
 801c732:	bf00      	nop
 801c734:	20015180 	.word	0x20015180

0801c738 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c738:	4b06      	ldr	r3, [pc, #24]	; (801c754 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c73a:	881a      	ldrh	r2, [r3, #0]
 801c73c:	4282      	cmp	r2, r0
 801c73e:	d807      	bhi.n	801c750 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c740:	4b05      	ldr	r3, [pc, #20]	; (801c758 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c742:	881b      	ldrh	r3, [r3, #0]
 801c744:	4413      	add	r3, r2
 801c746:	4298      	cmp	r0, r3
 801c748:	bfac      	ite	ge
 801c74a:	2000      	movge	r0, #0
 801c74c:	2001      	movlt	r0, #1
 801c74e:	4770      	bx	lr
 801c750:	2000      	movs	r0, #0
 801c752:	4770      	bx	lr
 801c754:	200151a0 	.word	0x200151a0
 801c758:	200151a4 	.word	0x200151a4

0801c75c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c75c:	b508      	push	{r3, lr}
 801c75e:	4601      	mov	r1, r0
 801c760:	f7ff ffea 	bl	801c738 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c764:	b118      	cbz	r0, 801c76e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c766:	4b02      	ldr	r3, [pc, #8]	; (801c770 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c76e:	bd08      	pop	{r3, pc}
 801c770:	20015184 	.word	0x20015184

0801c774 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c774:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c776:	4c24      	ldr	r4, [pc, #144]	; (801c808 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801c778:	6823      	ldr	r3, [r4, #0]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d042      	beq.n	801c804 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c77e:	4a23      	ldr	r2, [pc, #140]	; (801c80c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801c780:	4d23      	ldr	r5, [pc, #140]	; (801c810 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801c782:	8811      	ldrh	r1, [r2, #0]
 801c784:	f8b5 c000 	ldrh.w	ip, [r5]
 801c788:	4822      	ldr	r0, [pc, #136]	; (801c814 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c78a:	4461      	add	r1, ip
 801c78c:	1c4a      	adds	r2, r1, #1
 801c78e:	008f      	lsls	r7, r1, #2
 801c790:	f022 0201 	bic.w	r2, r2, #1
 801c794:	19de      	adds	r6, r3, r7
 801c796:	0412      	lsls	r2, r2, #16
 801c798:	6006      	str	r6, [r0, #0]
 801c79a:	4e1f      	ldr	r6, [pc, #124]	; (801c818 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c79c:	0c12      	lsrs	r2, r2, #16
 801c79e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801c7a2:	19da      	adds	r2, r3, r7
 801c7a4:	6032      	str	r2, [r6, #0]
 801c7a6:	220e      	movs	r2, #14
 801c7a8:	fb02 f20c 	mul.w	r2, r2, ip
 801c7ac:	3203      	adds	r2, #3
 801c7ae:	f022 0203 	bic.w	r2, r2, #3
 801c7b2:	443a      	add	r2, r7
 801c7b4:	4f19      	ldr	r7, [pc, #100]	; (801c81c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c7b6:	4413      	add	r3, r2
 801c7b8:	603b      	str	r3, [r7, #0]
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	4f18      	ldr	r7, [pc, #96]	; (801c820 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c7be:	469c      	mov	ip, r3
 801c7c0:	803b      	strh	r3, [r7, #0]
 801c7c2:	4f18      	ldr	r7, [pc, #96]	; (801c824 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c7c4:	683f      	ldr	r7, [r7, #0]
 801c7c6:	1aba      	subs	r2, r7, r2
 801c7c8:	4f17      	ldr	r7, [pc, #92]	; (801c828 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c7ca:	603a      	str	r2, [r7, #0]
 801c7cc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801c7d0:	4a16      	ldr	r2, [pc, #88]	; (801c82c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c7d2:	8013      	strh	r3, [r2, #0]
 801c7d4:	428b      	cmp	r3, r1
 801c7d6:	d10d      	bne.n	801c7f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801c7d8:	882d      	ldrh	r5, [r5, #0]
 801c7da:	2300      	movs	r3, #0
 801c7dc:	6830      	ldr	r0, [r6, #0]
 801c7de:	240e      	movs	r4, #14
 801c7e0:	429d      	cmp	r5, r3
 801c7e2:	d90f      	bls.n	801c804 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c7e4:	fb04 0203 	mla	r2, r4, r3, r0
 801c7e8:	3301      	adds	r3, #1
 801c7ea:	7b11      	ldrb	r1, [r2, #12]
 801c7ec:	f36f 1145 	bfc	r1, #5, #1
 801c7f0:	7311      	strb	r1, [r2, #12]
 801c7f2:	e7f5      	b.n	801c7e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801c7f4:	6822      	ldr	r2, [r4, #0]
 801c7f6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c7fa:	6802      	ldr	r2, [r0, #0]
 801c7fc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801c800:	3301      	adds	r3, #1
 801c802:	e7e7      	b.n	801c7d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801c804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c806:	bf00      	nop
 801c808:	20015184 	.word	0x20015184
 801c80c:	200151a0 	.word	0x200151a0
 801c810:	200151a4 	.word	0x200151a4
 801c814:	20015198 	.word	0x20015198
 801c818:	20015188 	.word	0x20015188
 801c81c:	20015190 	.word	0x20015190
 801c820:	200151a2 	.word	0x200151a2
 801c824:	2001518c 	.word	0x2001518c
 801c828:	2001519c 	.word	0x2001519c
 801c82c:	20015194 	.word	0x20015194

0801c830 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c830:	4b06      	ldr	r3, [pc, #24]	; (801c84c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	b943      	cbnz	r3, 801c848 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c836:	b139      	cbz	r1, 801c848 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c838:	4b05      	ldr	r3, [pc, #20]	; (801c850 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801c83a:	801a      	strh	r2, [r3, #0]
 801c83c:	4b05      	ldr	r3, [pc, #20]	; (801c854 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801c83e:	6019      	str	r1, [r3, #0]
 801c840:	4b05      	ldr	r3, [pc, #20]	; (801c858 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801c842:	6018      	str	r0, [r3, #0]
 801c844:	f7ff bf96 	b.w	801c774 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c848:	4770      	bx	lr
 801c84a:	bf00      	nop
 801c84c:	20015190 	.word	0x20015190
 801c850:	200151a4 	.word	0x200151a4
 801c854:	2001518c 	.word	0x2001518c
 801c858:	20015184 	.word	0x20015184

0801c85c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c85c:	b470      	push	{r4, r5, r6}
 801c85e:	4c07      	ldr	r4, [pc, #28]	; (801c87c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c860:	4605      	mov	r5, r0
 801c862:	4610      	mov	r0, r2
 801c864:	9a03      	ldr	r2, [sp, #12]
 801c866:	6826      	ldr	r6, [r4, #0]
 801c868:	b936      	cbnz	r6, 801c878 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c86a:	6025      	str	r5, [r4, #0]
 801c86c:	4c04      	ldr	r4, [pc, #16]	; (801c880 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c86e:	8021      	strh	r1, [r4, #0]
 801c870:	4619      	mov	r1, r3
 801c872:	bc70      	pop	{r4, r5, r6}
 801c874:	f7ff bfdc 	b.w	801c830 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c878:	bc70      	pop	{r4, r5, r6}
 801c87a:	4770      	bx	lr
 801c87c:	200151a8 	.word	0x200151a8
 801c880:	200151a0 	.word	0x200151a0

0801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c884:	4a12      	ldr	r2, [pc, #72]	; (801c8d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801c886:	8803      	ldrh	r3, [r0, #0]
 801c888:	8812      	ldrh	r2, [r2, #0]
 801c88a:	4293      	cmp	r3, r2
 801c88c:	d207      	bcs.n	801c89e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801c88e:	4a11      	ldr	r2, [pc, #68]	; (801c8d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801c890:	2114      	movs	r1, #20
 801c892:	6812      	ldr	r2, [r2, #0]
 801c894:	fb01 2303 	mla	r3, r1, r3, r2
 801c898:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801c89c:	4770      	bx	lr
 801c89e:	490e      	ldr	r1, [pc, #56]	; (801c8d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c8a0:	8809      	ldrh	r1, [r1, #0]
 801c8a2:	4411      	add	r1, r2
 801c8a4:	428b      	cmp	r3, r1
 801c8a6:	da04      	bge.n	801c8b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801c8a8:	1a9b      	subs	r3, r3, r2
 801c8aa:	4a0c      	ldr	r2, [pc, #48]	; (801c8dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c8ac:	210e      	movs	r1, #14
 801c8ae:	6812      	ldr	r2, [r2, #0]
 801c8b0:	e7f0      	b.n	801c894 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801c8b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c8b6:	4293      	cmp	r3, r2
 801c8b8:	d108      	bne.n	801c8cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801c8ba:	4b09      	ldr	r3, [pc, #36]	; (801c8e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c8bc:	781b      	ldrb	r3, [r3, #0]
 801c8be:	b91b      	cbnz	r3, 801c8c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801c8c0:	4b08      	ldr	r3, [pc, #32]	; (801c8e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c8c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801c8c6:	4770      	bx	lr
 801c8c8:	4b07      	ldr	r3, [pc, #28]	; (801c8e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c8ca:	e7fa      	b.n	801c8c2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801c8cc:	2000      	movs	r0, #0
 801c8ce:	4770      	bx	lr
 801c8d0:	200151a0 	.word	0x200151a0
 801c8d4:	200151a8 	.word	0x200151a8
 801c8d8:	200151a4 	.word	0x200151a4
 801c8dc:	20015188 	.word	0x20015188
 801c8e0:	20015118 	.word	0x20015118
 801c8e4:	2001511a 	.word	0x2001511a
 801c8e8:	2001511c 	.word	0x2001511c

0801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c8ec:	4a12      	ldr	r2, [pc, #72]	; (801c938 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801c8ee:	8803      	ldrh	r3, [r0, #0]
 801c8f0:	8812      	ldrh	r2, [r2, #0]
 801c8f2:	4293      	cmp	r3, r2
 801c8f4:	d207      	bcs.n	801c906 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801c8f6:	4a11      	ldr	r2, [pc, #68]	; (801c93c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801c8f8:	2114      	movs	r1, #20
 801c8fa:	6812      	ldr	r2, [r2, #0]
 801c8fc:	fb01 2303 	mla	r3, r1, r3, r2
 801c900:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801c904:	4770      	bx	lr
 801c906:	490e      	ldr	r1, [pc, #56]	; (801c940 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c908:	8809      	ldrh	r1, [r1, #0]
 801c90a:	4411      	add	r1, r2
 801c90c:	428b      	cmp	r3, r1
 801c90e:	da04      	bge.n	801c91a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801c910:	1a9b      	subs	r3, r3, r2
 801c912:	4a0c      	ldr	r2, [pc, #48]	; (801c944 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c914:	210e      	movs	r1, #14
 801c916:	6812      	ldr	r2, [r2, #0]
 801c918:	e7f0      	b.n	801c8fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801c91a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c91e:	4293      	cmp	r3, r2
 801c920:	d108      	bne.n	801c934 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801c922:	4b09      	ldr	r3, [pc, #36]	; (801c948 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c924:	781b      	ldrb	r3, [r3, #0]
 801c926:	b91b      	cbnz	r3, 801c930 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801c928:	4b08      	ldr	r3, [pc, #32]	; (801c94c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c92a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801c92e:	4770      	bx	lr
 801c930:	4b07      	ldr	r3, [pc, #28]	; (801c950 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c932:	e7fa      	b.n	801c92a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801c934:	2000      	movs	r0, #0
 801c936:	4770      	bx	lr
 801c938:	200151a0 	.word	0x200151a0
 801c93c:	200151a8 	.word	0x200151a8
 801c940:	200151a4 	.word	0x200151a4
 801c944:	20015188 	.word	0x20015188
 801c948:	20015118 	.word	0x20015118
 801c94c:	2001511c 	.word	0x2001511c
 801c950:	2001511a 	.word	0x2001511a

0801c954 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801c954:	4a1f      	ldr	r2, [pc, #124]	; (801c9d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801c956:	b510      	push	{r4, lr}
 801c958:	880b      	ldrh	r3, [r1, #0]
 801c95a:	8812      	ldrh	r2, [r2, #0]
 801c95c:	4293      	cmp	r3, r2
 801c95e:	d213      	bcs.n	801c988 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801c960:	4a1d      	ldr	r2, [pc, #116]	; (801c9d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801c962:	2114      	movs	r1, #20
 801c964:	6812      	ldr	r2, [r2, #0]
 801c966:	fb01 2303 	mla	r3, r1, r3, r2
 801c96a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801c96e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801c972:	8a1a      	ldrh	r2, [r3, #16]
 801c974:	8a5b      	ldrh	r3, [r3, #18]
 801c976:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c97a:	8004      	strh	r4, [r0, #0]
 801c97c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c980:	8041      	strh	r1, [r0, #2]
 801c982:	8082      	strh	r2, [r0, #4]
 801c984:	80c3      	strh	r3, [r0, #6]
 801c986:	e00e      	b.n	801c9a6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801c988:	4914      	ldr	r1, [pc, #80]	; (801c9dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801c98a:	8809      	ldrh	r1, [r1, #0]
 801c98c:	4411      	add	r1, r2
 801c98e:	428b      	cmp	r3, r1
 801c990:	da0a      	bge.n	801c9a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801c992:	1a9b      	subs	r3, r3, r2
 801c994:	4a12      	ldr	r2, [pc, #72]	; (801c9e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801c996:	210e      	movs	r1, #14
 801c998:	6812      	ldr	r2, [r2, #0]
 801c99a:	fb01 2303 	mla	r3, r1, r3, r2
 801c99e:	681a      	ldr	r2, [r3, #0]
 801c9a0:	6002      	str	r2, [r0, #0]
 801c9a2:	685a      	ldr	r2, [r3, #4]
 801c9a4:	6042      	str	r2, [r0, #4]
 801c9a6:	bd10      	pop	{r4, pc}
 801c9a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c9ac:	4293      	cmp	r3, r2
 801c9ae:	d10b      	bne.n	801c9c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801c9b0:	4b0c      	ldr	r3, [pc, #48]	; (801c9e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801c9b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c9b6:	4b0c      	ldr	r3, [pc, #48]	; (801c9e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801c9b8:	8081      	strh	r1, [r0, #4]
 801c9ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c9be:	2300      	movs	r3, #0
 801c9c0:	80c2      	strh	r2, [r0, #6]
 801c9c2:	8003      	strh	r3, [r0, #0]
 801c9c4:	8043      	strh	r3, [r0, #2]
 801c9c6:	e7ee      	b.n	801c9a6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801c9c8:	2300      	movs	r3, #0
 801c9ca:	8003      	strh	r3, [r0, #0]
 801c9cc:	8043      	strh	r3, [r0, #2]
 801c9ce:	8083      	strh	r3, [r0, #4]
 801c9d0:	e7d8      	b.n	801c984 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801c9d2:	bf00      	nop
 801c9d4:	200151a0 	.word	0x200151a0
 801c9d8:	200151a8 	.word	0x200151a8
 801c9dc:	200151a4 	.word	0x200151a4
 801c9e0:	20015188 	.word	0x20015188
 801c9e4:	20015114 	.word	0x20015114
 801c9e8:	20015116 	.word	0x20015116

0801c9ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801c9ec:	4a17      	ldr	r2, [pc, #92]	; (801ca4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801c9ee:	8803      	ldrh	r3, [r0, #0]
 801c9f0:	8812      	ldrh	r2, [r2, #0]
 801c9f2:	4293      	cmp	r3, r2
 801c9f4:	d213      	bcs.n	801ca1e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801c9f6:	4a16      	ldr	r2, [pc, #88]	; (801ca50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801c9f8:	2114      	movs	r1, #20
 801c9fa:	6812      	ldr	r2, [r2, #0]
 801c9fc:	fb01 2303 	mla	r3, r1, r3, r2
 801ca00:	8a1a      	ldrh	r2, [r3, #16]
 801ca02:	8919      	ldrh	r1, [r3, #8]
 801ca04:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ca08:	428a      	cmp	r2, r1
 801ca0a:	db1d      	blt.n	801ca48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ca0c:	8a58      	ldrh	r0, [r3, #18]
 801ca0e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ca12:	895b      	ldrh	r3, [r3, #10]
 801ca14:	4298      	cmp	r0, r3
 801ca16:	bfac      	ite	ge
 801ca18:	2000      	movge	r0, #0
 801ca1a:	2001      	movlt	r0, #1
 801ca1c:	4770      	bx	lr
 801ca1e:	490d      	ldr	r1, [pc, #52]	; (801ca54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ca20:	8809      	ldrh	r1, [r1, #0]
 801ca22:	4411      	add	r1, r2
 801ca24:	428b      	cmp	r3, r1
 801ca26:	da0d      	bge.n	801ca44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ca28:	1a9b      	subs	r3, r3, r2
 801ca2a:	4a0b      	ldr	r2, [pc, #44]	; (801ca58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ca2c:	210e      	movs	r1, #14
 801ca2e:	6812      	ldr	r2, [r2, #0]
 801ca30:	fb01 2303 	mla	r3, r1, r3, r2
 801ca34:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ca38:	891a      	ldrh	r2, [r3, #8]
 801ca3a:	4291      	cmp	r1, r2
 801ca3c:	db04      	blt.n	801ca48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ca3e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ca42:	e7e6      	b.n	801ca12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ca44:	2000      	movs	r0, #0
 801ca46:	4770      	bx	lr
 801ca48:	2001      	movs	r0, #1
 801ca4a:	4770      	bx	lr
 801ca4c:	200151a0 	.word	0x200151a0
 801ca50:	200151a8 	.word	0x200151a8
 801ca54:	200151a4 	.word	0x200151a4
 801ca58:	20015188 	.word	0x20015188

0801ca5c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ca5c:	4a12      	ldr	r2, [pc, #72]	; (801caa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ca5e:	8803      	ldrh	r3, [r0, #0]
 801ca60:	8811      	ldrh	r1, [r2, #0]
 801ca62:	428b      	cmp	r3, r1
 801ca64:	d20b      	bcs.n	801ca7e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ca66:	4a11      	ldr	r2, [pc, #68]	; (801caac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ca68:	6812      	ldr	r2, [r2, #0]
 801ca6a:	b112      	cbz	r2, 801ca72 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ca6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ca70:	b9c0      	cbnz	r0, 801caa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801ca72:	4a0f      	ldr	r2, [pc, #60]	; (801cab0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ca74:	6811      	ldr	r1, [r2, #0]
 801ca76:	2214      	movs	r2, #20
 801ca78:	4353      	muls	r3, r2
 801ca7a:	58c8      	ldr	r0, [r1, r3]
 801ca7c:	4770      	bx	lr
 801ca7e:	4a0d      	ldr	r2, [pc, #52]	; (801cab4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ca80:	8812      	ldrh	r2, [r2, #0]
 801ca82:	440a      	add	r2, r1
 801ca84:	4293      	cmp	r3, r2
 801ca86:	da04      	bge.n	801ca92 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ca88:	4a08      	ldr	r2, [pc, #32]	; (801caac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ca8a:	6812      	ldr	r2, [r2, #0]
 801ca8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ca90:	4770      	bx	lr
 801ca92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca96:	4293      	cmp	r3, r2
 801ca98:	d103      	bne.n	801caa2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ca9a:	4b07      	ldr	r3, [pc, #28]	; (801cab8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801caa0:	4770      	bx	lr
 801caa2:	2000      	movs	r0, #0
 801caa4:	4770      	bx	lr
 801caa6:	bf00      	nop
 801caa8:	200151a0 	.word	0x200151a0
 801caac:	20015184 	.word	0x20015184
 801cab0:	200151a8 	.word	0x200151a8
 801cab4:	200151a4 	.word	0x200151a4
 801cab8:	20015120 	.word	0x20015120

0801cabc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cabc:	4b24      	ldr	r3, [pc, #144]	; (801cb50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cabe:	8802      	ldrh	r2, [r0, #0]
 801cac0:	8818      	ldrh	r0, [r3, #0]
 801cac2:	4282      	cmp	r2, r0
 801cac4:	d221      	bcs.n	801cb0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801cac6:	4b23      	ldr	r3, [pc, #140]	; (801cb54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801cac8:	6819      	ldr	r1, [r3, #0]
 801caca:	2314      	movs	r3, #20
 801cacc:	fb03 1302 	mla	r3, r3, r2, r1
 801cad0:	6858      	ldr	r0, [r3, #4]
 801cad2:	2800      	cmp	r0, #0
 801cad4:	d03a      	beq.n	801cb4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cad6:	4920      	ldr	r1, [pc, #128]	; (801cb58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cad8:	6809      	ldr	r1, [r1, #0]
 801cada:	2900      	cmp	r1, #0
 801cadc:	d036      	beq.n	801cb4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cade:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cae2:	2900      	cmp	r1, #0
 801cae4:	d032      	beq.n	801cb4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cae6:	891a      	ldrh	r2, [r3, #8]
 801cae8:	8958      	ldrh	r0, [r3, #10]
 801caea:	4350      	muls	r0, r2
 801caec:	7c5a      	ldrb	r2, [r3, #17]
 801caee:	7cdb      	ldrb	r3, [r3, #19]
 801caf0:	0952      	lsrs	r2, r2, #5
 801caf2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801caf6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cafa:	2b0b      	cmp	r3, #11
 801cafc:	bf18      	it	ne
 801cafe:	0040      	lslne	r0, r0, #1
 801cb00:	3003      	adds	r0, #3
 801cb02:	f020 0003 	bic.w	r0, r0, #3
 801cb06:	4408      	add	r0, r1
 801cb08:	4770      	bx	lr
 801cb0a:	4b14      	ldr	r3, [pc, #80]	; (801cb5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cb0c:	881b      	ldrh	r3, [r3, #0]
 801cb0e:	4403      	add	r3, r0
 801cb10:	429a      	cmp	r2, r3
 801cb12:	da1a      	bge.n	801cb4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cb14:	4b12      	ldr	r3, [pc, #72]	; (801cb60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cb16:	1a10      	subs	r0, r2, r0
 801cb18:	210e      	movs	r1, #14
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	fb01 3000 	mla	r0, r1, r0, r3
 801cb20:	7b03      	ldrb	r3, [r0, #12]
 801cb22:	f003 031f 	and.w	r3, r3, #31
 801cb26:	2b0b      	cmp	r3, #11
 801cb28:	d10b      	bne.n	801cb42 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801cb2a:	8903      	ldrh	r3, [r0, #8]
 801cb2c:	8940      	ldrh	r0, [r0, #10]
 801cb2e:	4358      	muls	r0, r3
 801cb30:	4b09      	ldr	r3, [pc, #36]	; (801cb58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cb32:	3003      	adds	r0, #3
 801cb34:	6819      	ldr	r1, [r3, #0]
 801cb36:	f020 0303 	bic.w	r3, r0, #3
 801cb3a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cb3e:	4418      	add	r0, r3
 801cb40:	4770      	bx	lr
 801cb42:	2b0d      	cmp	r3, #13
 801cb44:	d101      	bne.n	801cb4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cb46:	300d      	adds	r0, #13
 801cb48:	4770      	bx	lr
 801cb4a:	2000      	movs	r0, #0
 801cb4c:	4770      	bx	lr
 801cb4e:	bf00      	nop
 801cb50:	200151a0 	.word	0x200151a0
 801cb54:	200151a8 	.word	0x200151a8
 801cb58:	20015184 	.word	0x20015184
 801cb5c:	200151a4 	.word	0x200151a4
 801cb60:	20015188 	.word	0x20015188

0801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cb64:	4a17      	ldr	r2, [pc, #92]	; (801cbc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801cb66:	b510      	push	{r4, lr}
 801cb68:	8803      	ldrh	r3, [r0, #0]
 801cb6a:	8812      	ldrh	r2, [r2, #0]
 801cb6c:	4293      	cmp	r3, r2
 801cb6e:	d20c      	bcs.n	801cb8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cb70:	4a15      	ldr	r2, [pc, #84]	; (801cbc8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801cb72:	2114      	movs	r1, #20
 801cb74:	6812      	ldr	r2, [r2, #0]
 801cb76:	fb01 2303 	mla	r3, r1, r3, r2
 801cb7a:	7c58      	ldrb	r0, [r3, #17]
 801cb7c:	0942      	lsrs	r2, r0, #5
 801cb7e:	7cd8      	ldrb	r0, [r3, #19]
 801cb80:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cb84:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cb88:	bd10      	pop	{r4, pc}
 801cb8a:	4910      	ldr	r1, [pc, #64]	; (801cbcc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cb8c:	8809      	ldrh	r1, [r1, #0]
 801cb8e:	4411      	add	r1, r2
 801cb90:	428b      	cmp	r3, r1
 801cb92:	da09      	bge.n	801cba8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cb94:	1a9b      	subs	r3, r3, r2
 801cb96:	4a0e      	ldr	r2, [pc, #56]	; (801cbd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cb98:	210e      	movs	r1, #14
 801cb9a:	6812      	ldr	r2, [r2, #0]
 801cb9c:	fb01 2303 	mla	r3, r1, r3, r2
 801cba0:	7b18      	ldrb	r0, [r3, #12]
 801cba2:	f000 001f 	and.w	r0, r0, #31
 801cba6:	e7ef      	b.n	801cb88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801cba8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cbac:	4293      	cmp	r3, r2
 801cbae:	d106      	bne.n	801cbbe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801cbb0:	f7e6 fe64 	bl	800387c <_ZN8touchgfx3HAL3lcdEv>
 801cbb4:	6803      	ldr	r3, [r0, #0]
 801cbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbbc:	4718      	bx	r3
 801cbbe:	2000      	movs	r0, #0
 801cbc0:	e7e2      	b.n	801cb88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801cbc2:	bf00      	nop
 801cbc4:	200151a0 	.word	0x200151a0
 801cbc8:	200151a8 	.word	0x200151a8
 801cbcc:	200151a4 	.word	0x200151a4
 801cbd0:	20015188 	.word	0x20015188

0801cbd4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801cbd4:	2010      	movs	r0, #16
 801cbd6:	4770      	bx	lr

0801cbd8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801cbd8:	2000      	movs	r0, #0
 801cbda:	4770      	bx	lr

0801cbdc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801cbdc:	4b02      	ldr	r3, [pc, #8]	; (801cbe8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801cbde:	8818      	ldrh	r0, [r3, #0]
 801cbe0:	0040      	lsls	r0, r0, #1
 801cbe2:	b280      	uxth	r0, r0
 801cbe4:	4770      	bx	lr
 801cbe6:	bf00      	nop
 801cbe8:	2001511a 	.word	0x2001511a

0801cbec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cbec:	2bff      	cmp	r3, #255	; 0xff
 801cbee:	d050      	beq.n	801cc92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cbf0:	2a0b      	cmp	r2, #11
 801cbf2:	d04a      	beq.n	801cc8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cbf4:	d80e      	bhi.n	801cc14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801cbf6:	2a03      	cmp	r2, #3
 801cbf8:	d03f      	beq.n	801cc7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801cbfa:	d804      	bhi.n	801cc06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cbfc:	2a01      	cmp	r2, #1
 801cbfe:	d03e      	beq.n	801cc7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801cc00:	d93f      	bls.n	801cc82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801cc02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801cc04:	4770      	bx	lr
 801cc06:	2a09      	cmp	r2, #9
 801cc08:	d03f      	beq.n	801cc8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cc0a:	d83c      	bhi.n	801cc86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801cc0c:	2a08      	cmp	r2, #8
 801cc0e:	d03a      	beq.n	801cc86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801cc10:	2000      	movs	r0, #0
 801cc12:	4770      	bx	lr
 801cc14:	2a2f      	cmp	r2, #47	; 0x2f
 801cc16:	d024      	beq.n	801cc62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801cc18:	d80d      	bhi.n	801cc36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801cc1a:	2a2d      	cmp	r2, #45	; 0x2d
 801cc1c:	d014      	beq.n	801cc48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801cc1e:	d826      	bhi.n	801cc6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801cc20:	2a2c      	cmp	r2, #44	; 0x2c
 801cc22:	d1f5      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc24:	684b      	ldr	r3, [r1, #4]
 801cc26:	781b      	ldrb	r3, [r3, #0]
 801cc28:	2b01      	cmp	r3, #1
 801cc2a:	d018      	beq.n	801cc5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801cc2c:	d323      	bcc.n	801cc76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801cc2e:	2b02      	cmp	r3, #2
 801cc30:	d1ee      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc32:	6880      	ldr	r0, [r0, #8]
 801cc34:	4770      	bx	lr
 801cc36:	2a31      	cmp	r2, #49	; 0x31
 801cc38:	d004      	beq.n	801cc44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801cc3a:	d328      	bcc.n	801cc8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cc3c:	2a32      	cmp	r2, #50	; 0x32
 801cc3e:	d026      	beq.n	801cc8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cc40:	2a33      	cmp	r2, #51	; 0x33
 801cc42:	d1e5      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc44:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801cc46:	4770      	bx	lr
 801cc48:	684b      	ldr	r3, [r1, #4]
 801cc4a:	781b      	ldrb	r3, [r3, #0]
 801cc4c:	2b01      	cmp	r3, #1
 801cc4e:	d004      	beq.n	801cc5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc50:	d30b      	bcc.n	801cc6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cc52:	2b02      	cmp	r3, #2
 801cc54:	d1dc      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc56:	6900      	ldr	r0, [r0, #16]
 801cc58:	4770      	bx	lr
 801cc5a:	6a00      	ldr	r0, [r0, #32]
 801cc5c:	4770      	bx	lr
 801cc5e:	6980      	ldr	r0, [r0, #24]
 801cc60:	4770      	bx	lr
 801cc62:	684b      	ldr	r3, [r1, #4]
 801cc64:	781b      	ldrb	r3, [r3, #0]
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d1d2      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc6a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cc6c:	4770      	bx	lr
 801cc6e:	684b      	ldr	r3, [r1, #4]
 801cc70:	781b      	ldrb	r3, [r3, #0]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d1cc      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc76:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cc78:	4770      	bx	lr
 801cc7a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801cc7c:	4770      	bx	lr
 801cc7e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801cc80:	4770      	bx	lr
 801cc82:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801cc84:	4770      	bx	lr
 801cc86:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801cc88:	4770      	bx	lr
 801cc8a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801cc8c:	4770      	bx	lr
 801cc8e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801cc90:	4770      	bx	lr
 801cc92:	2a0b      	cmp	r2, #11
 801cc94:	d049      	beq.n	801cd2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cc96:	d80e      	bhi.n	801ccb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801cc98:	2a03      	cmp	r2, #3
 801cc9a:	d040      	beq.n	801cd1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cc9c:	d804      	bhi.n	801cca8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801cc9e:	2a01      	cmp	r2, #1
 801cca0:	d03f      	beq.n	801cd22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cca2:	d940      	bls.n	801cd26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cca4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801cca6:	4770      	bx	lr
 801cca8:	2a09      	cmp	r2, #9
 801ccaa:	d03e      	beq.n	801cd2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ccac:	d801      	bhi.n	801ccb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801ccae:	2a08      	cmp	r2, #8
 801ccb0:	d1ae      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccb2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801ccb4:	4770      	bx	lr
 801ccb6:	2a2f      	cmp	r2, #47	; 0x2f
 801ccb8:	d024      	beq.n	801cd04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801ccba:	d80d      	bhi.n	801ccd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801ccbc:	2a2d      	cmp	r2, #45	; 0x2d
 801ccbe:	d014      	beq.n	801ccea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801ccc0:	d826      	bhi.n	801cd10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801ccc2:	2a2c      	cmp	r2, #44	; 0x2c
 801ccc4:	d1a4      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccc6:	684b      	ldr	r3, [r1, #4]
 801ccc8:	781b      	ldrb	r3, [r3, #0]
 801ccca:	2b01      	cmp	r3, #1
 801cccc:	d018      	beq.n	801cd00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801ccce:	d324      	bcc.n	801cd1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801ccd0:	2b02      	cmp	r3, #2
 801ccd2:	d19d      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccd4:	68c0      	ldr	r0, [r0, #12]
 801ccd6:	4770      	bx	lr
 801ccd8:	2a31      	cmp	r2, #49	; 0x31
 801ccda:	d004      	beq.n	801cce6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801ccdc:	d327      	bcc.n	801cd2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ccde:	2a32      	cmp	r2, #50	; 0x32
 801cce0:	d025      	beq.n	801cd2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cce2:	2a33      	cmp	r2, #51	; 0x33
 801cce4:	d194      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cce6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801cce8:	4770      	bx	lr
 801ccea:	684b      	ldr	r3, [r1, #4]
 801ccec:	781b      	ldrb	r3, [r3, #0]
 801ccee:	2b01      	cmp	r3, #1
 801ccf0:	d004      	beq.n	801ccfc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801ccf2:	d30b      	bcc.n	801cd0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801ccf4:	2b02      	cmp	r3, #2
 801ccf6:	d18b      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccf8:	6940      	ldr	r0, [r0, #20]
 801ccfa:	4770      	bx	lr
 801ccfc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ccfe:	4770      	bx	lr
 801cd00:	69c0      	ldr	r0, [r0, #28]
 801cd02:	4770      	bx	lr
 801cd04:	684b      	ldr	r3, [r1, #4]
 801cd06:	781b      	ldrb	r3, [r3, #0]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d181      	bne.n	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cd0c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cd0e:	4770      	bx	lr
 801cd10:	684b      	ldr	r3, [r1, #4]
 801cd12:	781b      	ldrb	r3, [r3, #0]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	f47f af7b 	bne.w	801cc10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cd1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cd1c:	4770      	bx	lr
 801cd1e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cd20:	4770      	bx	lr
 801cd22:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cd24:	4770      	bx	lr
 801cd26:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cd28:	4770      	bx	lr
 801cd2a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801cd2c:	4770      	bx	lr
 801cd2e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801cd30:	4770      	bx	lr

0801cd32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd36:	b087      	sub	sp, #28
 801cd38:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cd3a:	9205      	str	r2, [sp, #20]
 801cd3c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cd40:	9101      	str	r1, [sp, #4]
 801cd42:	9202      	str	r2, [sp, #8]
 801cd44:	6841      	ldr	r1, [r0, #4]
 801cd46:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801cd4a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801cd4e:	fb01 2404 	mla	r4, r1, r4, r2
 801cd52:	6802      	ldr	r2, [r0, #0]
 801cd54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cd58:	f8de 2000 	ldr.w	r2, [lr]
 801cd5c:	9203      	str	r2, [sp, #12]
 801cd5e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cd62:	3204      	adds	r2, #4
 801cd64:	9204      	str	r2, [sp, #16]
 801cd66:	9a02      	ldr	r2, [sp, #8]
 801cd68:	43d6      	mvns	r6, r2
 801cd6a:	b2f6      	uxtb	r6, r6
 801cd6c:	9a01      	ldr	r2, [sp, #4]
 801cd6e:	2a00      	cmp	r2, #0
 801cd70:	dc03      	bgt.n	801cd7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cd72:	9a05      	ldr	r2, [sp, #20]
 801cd74:	2a00      	cmp	r2, #0
 801cd76:	f340 8129 	ble.w	801cfcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd7c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801cd80:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cd84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd86:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801cd8a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	dd0e      	ble.n	801cdb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cd92:	1408      	asrs	r0, r1, #16
 801cd94:	d405      	bmi.n	801cda2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cd96:	4560      	cmp	r0, ip
 801cd98:	da03      	bge.n	801cda2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cd9a:	1410      	asrs	r0, r2, #16
 801cd9c:	d401      	bmi.n	801cda2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cd9e:	42b8      	cmp	r0, r7
 801cda0:	db07      	blt.n	801cdb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cda2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cda4:	3b01      	subs	r3, #1
 801cda6:	3402      	adds	r4, #2
 801cda8:	4401      	add	r1, r0
 801cdaa:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cdac:	4402      	add	r2, r0
 801cdae:	e7ee      	b.n	801cd8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cdb0:	d071      	beq.n	801ce96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cdb2:	1e58      	subs	r0, r3, #1
 801cdb4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cdb6:	fb05 1500 	mla	r5, r5, r0, r1
 801cdba:	142d      	asrs	r5, r5, #16
 801cdbc:	d45f      	bmi.n	801ce7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdbe:	4565      	cmp	r5, ip
 801cdc0:	da5d      	bge.n	801ce7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdc2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cdc4:	fb05 2000 	mla	r0, r5, r0, r2
 801cdc8:	1400      	asrs	r0, r0, #16
 801cdca:	d458      	bmi.n	801ce7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdcc:	42b8      	cmp	r0, r7
 801cdce:	da56      	bge.n	801ce7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdd0:	4699      	mov	r9, r3
 801cdd2:	46a2      	mov	sl, r4
 801cdd4:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801cdd8:	f1b9 0f00 	cmp.w	r9, #0
 801cddc:	dd57      	ble.n	801ce8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cdde:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cde2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cde6:	9803      	ldr	r0, [sp, #12]
 801cde8:	140d      	asrs	r5, r1, #16
 801cdea:	f109 39ff 	add.w	r9, r9, #4294967295
 801cdee:	fb07 000c 	mla	r0, r7, ip, r0
 801cdf2:	5d40      	ldrb	r0, [r0, r5]
 801cdf4:	9d04      	ldr	r5, [sp, #16]
 801cdf6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801cdfa:	f8ba 5000 	ldrh.w	r5, [sl]
 801cdfe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ce02:	122f      	asrs	r7, r5, #8
 801ce04:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ce08:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ce0c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ce10:	00ed      	lsls	r5, r5, #3
 801ce12:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ce16:	fb17 f706 	smulbb	r7, r7, r6
 801ce1a:	b2ed      	uxtb	r5, r5
 801ce1c:	fb18 f806 	smulbb	r8, r8, r6
 801ce20:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ce24:	10c7      	asrs	r7, r0, #3
 801ce26:	fb15 f506 	smulbb	r5, r5, r6
 801ce2a:	00c0      	lsls	r0, r0, #3
 801ce2c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ce30:	fa1f fc8c 	uxth.w	ip, ip
 801ce34:	b2c0      	uxtb	r0, r0
 801ce36:	fb07 870b 	mla	r7, r7, fp, r8
 801ce3a:	fb00 500b 	mla	r0, r0, fp, r5
 801ce3e:	f10c 0501 	add.w	r5, ip, #1
 801ce42:	b2bf      	uxth	r7, r7
 801ce44:	b280      	uxth	r0, r0
 801ce46:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ce4a:	f107 0801 	add.w	r8, r7, #1
 801ce4e:	1c45      	adds	r5, r0, #1
 801ce50:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ce54:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ce58:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ce5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ce5e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ce62:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ce66:	4401      	add	r1, r0
 801ce68:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ce6c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ce6e:	ea45 0c0c 	orr.w	ip, r5, ip
 801ce72:	4402      	add	r2, r0
 801ce74:	ea4c 0c08 	orr.w	ip, ip, r8
 801ce78:	f82a cb02 	strh.w	ip, [sl], #2
 801ce7c:	e7ac      	b.n	801cdd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ce7e:	f04f 0800 	mov.w	r8, #0
 801ce82:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ce86:	eb03 0008 	add.w	r0, r3, r8
 801ce8a:	2800      	cmp	r0, #0
 801ce8c:	dc41      	bgt.n	801cf12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ce8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce96:	9b01      	ldr	r3, [sp, #4]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	f340 8097 	ble.w	801cfcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ce9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cea4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cea8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ceac:	eef0 6a62 	vmov.f32	s13, s5
 801ceb0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ceb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ceb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cebc:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801cec0:	eef0 6a43 	vmov.f32	s13, s6
 801cec4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cec8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801cecc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ced0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ced4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ced8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cedc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cee0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cee4:	ee12 2a90 	vmov	r2, s5
 801cee8:	eef0 2a47 	vmov.f32	s5, s14
 801ceec:	fb92 f3f3 	sdiv	r3, r2, r3
 801cef0:	ee13 2a10 	vmov	r2, s6
 801cef4:	9313      	str	r3, [sp, #76]	; 0x4c
 801cef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cef8:	eeb0 3a67 	vmov.f32	s6, s15
 801cefc:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf00:	9314      	str	r3, [sp, #80]	; 0x50
 801cf02:	9b01      	ldr	r3, [sp, #4]
 801cf04:	9a05      	ldr	r2, [sp, #20]
 801cf06:	3b01      	subs	r3, #1
 801cf08:	9301      	str	r3, [sp, #4]
 801cf0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf0c:	bf08      	it	eq
 801cf0e:	4613      	moveq	r3, r2
 801cf10:	e72c      	b.n	801cd6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cf12:	140f      	asrs	r7, r1, #16
 801cf14:	d453      	bmi.n	801cfbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf16:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cf1a:	42bd      	cmp	r5, r7
 801cf1c:	dd4f      	ble.n	801cfbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf1e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cf22:	d44c      	bmi.n	801cfbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf24:	f8de 000c 	ldr.w	r0, [lr, #12]
 801cf28:	4560      	cmp	r0, ip
 801cf2a:	dd48      	ble.n	801cfbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf2c:	9803      	ldr	r0, [sp, #12]
 801cf2e:	b22d      	sxth	r5, r5
 801cf30:	fb0c 0505 	mla	r5, ip, r5, r0
 801cf34:	5de8      	ldrb	r0, [r5, r7]
 801cf36:	9d04      	ldr	r5, [sp, #16]
 801cf38:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801cf3c:	f06f 0501 	mvn.w	r5, #1
 801cf40:	fb05 fb08 	mul.w	fp, r5, r8
 801cf44:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cf48:	f834 500b 	ldrh.w	r5, [r4, fp]
 801cf4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cf50:	122f      	asrs	r7, r5, #8
 801cf52:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801cf56:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cf5a:	00ed      	lsls	r5, r5, #3
 801cf5c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801cf60:	fb17 f706 	smulbb	r7, r7, r6
 801cf64:	b2ed      	uxtb	r5, r5
 801cf66:	fb19 f906 	smulbb	r9, r9, r6
 801cf6a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801cf6e:	10c7      	asrs	r7, r0, #3
 801cf70:	fb15 f506 	smulbb	r5, r5, r6
 801cf74:	00c0      	lsls	r0, r0, #3
 801cf76:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cf7a:	fa1f fc8c 	uxth.w	ip, ip
 801cf7e:	b2c0      	uxtb	r0, r0
 801cf80:	fb07 970a 	mla	r7, r7, sl, r9
 801cf84:	fb00 500a 	mla	r0, r0, sl, r5
 801cf88:	f10c 0501 	add.w	r5, ip, #1
 801cf8c:	b2bf      	uxth	r7, r7
 801cf8e:	b280      	uxth	r0, r0
 801cf90:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cf94:	f107 0901 	add.w	r9, r7, #1
 801cf98:	1c45      	adds	r5, r0, #1
 801cf9a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801cf9e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cfa2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801cfa6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801cfaa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801cfae:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cfb2:	ea45 0c0c 	orr.w	ip, r5, ip
 801cfb6:	ea4c 0c09 	orr.w	ip, ip, r9
 801cfba:	f824 c00b 	strh.w	ip, [r4, fp]
 801cfbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cfc0:	f108 38ff 	add.w	r8, r8, #4294967295
 801cfc4:	4401      	add	r1, r0
 801cfc6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cfc8:	4402      	add	r2, r0
 801cfca:	e75c      	b.n	801ce86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cfcc:	b007      	add	sp, #28
 801cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfd6:	b085      	sub	sp, #20
 801cfd8:	4693      	mov	fp, r2
 801cfda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfde:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cfe0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801cfe2:	6870      	ldr	r0, [r6, #4]
 801cfe4:	9100      	str	r1, [sp, #0]
 801cfe6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cfea:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801cfee:	fb00 2404 	mla	r4, r0, r4, r2
 801cff2:	6832      	ldr	r2, [r6, #0]
 801cff4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cff8:	682a      	ldr	r2, [r5, #0]
 801cffa:	9201      	str	r2, [sp, #4]
 801cffc:	686a      	ldr	r2, [r5, #4]
 801cffe:	3204      	adds	r2, #4
 801d000:	9202      	str	r2, [sp, #8]
 801d002:	9a00      	ldr	r2, [sp, #0]
 801d004:	2a00      	cmp	r2, #0
 801d006:	dc03      	bgt.n	801d010 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d008:	f1bb 0f00 	cmp.w	fp, #0
 801d00c:	f340 80a0 	ble.w	801d150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d012:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d016:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d01a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d01c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d020:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d024:	2b00      	cmp	r3, #0
 801d026:	dd0c      	ble.n	801d042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d028:	1406      	asrs	r6, r0, #16
 801d02a:	d405      	bmi.n	801d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d02c:	454e      	cmp	r6, r9
 801d02e:	da03      	bge.n	801d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d030:	1416      	asrs	r6, r2, #16
 801d032:	d401      	bmi.n	801d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d034:	4546      	cmp	r6, r8
 801d036:	db05      	blt.n	801d044 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d038:	4470      	add	r0, lr
 801d03a:	4462      	add	r2, ip
 801d03c:	3b01      	subs	r3, #1
 801d03e:	3402      	adds	r4, #2
 801d040:	e7f0      	b.n	801d024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d042:	d00f      	beq.n	801d064 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d044:	1e5e      	subs	r6, r3, #1
 801d046:	fb0e 0706 	mla	r7, lr, r6, r0
 801d04a:	143f      	asrs	r7, r7, #16
 801d04c:	d541      	bpl.n	801d0d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d04e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d052:	4698      	mov	r8, r3
 801d054:	9603      	str	r6, [sp, #12]
 801d056:	f1b8 0f00 	cmp.w	r8, #0
 801d05a:	dc59      	bgt.n	801d110 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d05c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d060:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d064:	9b00      	ldr	r3, [sp, #0]
 801d066:	2b00      	cmp	r3, #0
 801d068:	dd72      	ble.n	801d150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d06a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d070:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d074:	eeb0 6a62 	vmov.f32	s12, s5
 801d078:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d07c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d080:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d084:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d088:	eeb0 6a43 	vmov.f32	s12, s6
 801d08c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d090:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d094:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d098:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d09c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d0ac:	ee12 2a90 	vmov	r2, s5
 801d0b0:	eef0 2a47 	vmov.f32	s5, s14
 801d0b4:	fb92 fef3 	sdiv	lr, r2, r3
 801d0b8:	ee13 2a10 	vmov	r2, s6
 801d0bc:	eeb0 3a67 	vmov.f32	s6, s15
 801d0c0:	fb92 fcf3 	sdiv	ip, r2, r3
 801d0c4:	9b00      	ldr	r3, [sp, #0]
 801d0c6:	3b01      	subs	r3, #1
 801d0c8:	9300      	str	r3, [sp, #0]
 801d0ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0cc:	bf08      	it	eq
 801d0ce:	465b      	moveq	r3, fp
 801d0d0:	e797      	b.n	801d002 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d0d2:	454f      	cmp	r7, r9
 801d0d4:	dabb      	bge.n	801d04e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d0d6:	fb0c 2606 	mla	r6, ip, r6, r2
 801d0da:	1436      	asrs	r6, r6, #16
 801d0dc:	d4b7      	bmi.n	801d04e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d0de:	4546      	cmp	r6, r8
 801d0e0:	dab5      	bge.n	801d04e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d0e2:	461e      	mov	r6, r3
 801d0e4:	46a0      	mov	r8, r4
 801d0e6:	2e00      	cmp	r6, #0
 801d0e8:	ddb8      	ble.n	801d05c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d0ea:	1417      	asrs	r7, r2, #16
 801d0ec:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d0f0:	9901      	ldr	r1, [sp, #4]
 801d0f2:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d0f6:	4462      	add	r2, ip
 801d0f8:	4470      	add	r0, lr
 801d0fa:	fb0a 1707 	mla	r7, sl, r7, r1
 801d0fe:	9902      	ldr	r1, [sp, #8]
 801d100:	3e01      	subs	r6, #1
 801d102:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d106:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d10a:	f828 7b02 	strh.w	r7, [r8], #2
 801d10e:	e7ea      	b.n	801d0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d110:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d114:	d417      	bmi.n	801d146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d116:	68ae      	ldr	r6, [r5, #8]
 801d118:	454e      	cmp	r6, r9
 801d11a:	dd14      	ble.n	801d146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d11c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d120:	d411      	bmi.n	801d146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d122:	68ef      	ldr	r7, [r5, #12]
 801d124:	4557      	cmp	r7, sl
 801d126:	dd0e      	ble.n	801d146 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d128:	9f01      	ldr	r7, [sp, #4]
 801d12a:	b236      	sxth	r6, r6
 801d12c:	f06f 0101 	mvn.w	r1, #1
 801d130:	fb0a 7606 	mla	r6, sl, r6, r7
 801d134:	9f02      	ldr	r7, [sp, #8]
 801d136:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d13a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d13e:	fb01 f608 	mul.w	r6, r1, r8
 801d142:	9903      	ldr	r1, [sp, #12]
 801d144:	538f      	strh	r7, [r1, r6]
 801d146:	4470      	add	r0, lr
 801d148:	4462      	add	r2, ip
 801d14a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d14e:	e782      	b.n	801d056 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d150:	b005      	add	sp, #20
 801d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d156 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d15a:	b087      	sub	sp, #28
 801d15c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d15e:	9205      	str	r2, [sp, #20]
 801d160:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d164:	9102      	str	r1, [sp, #8]
 801d166:	9203      	str	r2, [sp, #12]
 801d168:	6861      	ldr	r1, [r4, #4]
 801d16a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d16e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801d172:	fb01 2000 	mla	r0, r1, r0, r2
 801d176:	6822      	ldr	r2, [r4, #0]
 801d178:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d17c:	9200      	str	r2, [sp, #0]
 801d17e:	f8dc 2000 	ldr.w	r2, [ip]
 801d182:	9204      	str	r2, [sp, #16]
 801d184:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d188:	3204      	adds	r2, #4
 801d18a:	9201      	str	r2, [sp, #4]
 801d18c:	9a03      	ldr	r2, [sp, #12]
 801d18e:	43d5      	mvns	r5, r2
 801d190:	b2ed      	uxtb	r5, r5
 801d192:	9a02      	ldr	r2, [sp, #8]
 801d194:	2a00      	cmp	r2, #0
 801d196:	dc03      	bgt.n	801d1a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d198:	9a05      	ldr	r2, [sp, #20]
 801d19a:	2a00      	cmp	r2, #0
 801d19c:	f340 812c 	ble.w	801d3f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d1a2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d1a6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d1aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d1ac:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d1b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	dd10      	ble.n	801d1da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d1b8:	140c      	asrs	r4, r1, #16
 801d1ba:	d405      	bmi.n	801d1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d1bc:	4574      	cmp	r4, lr
 801d1be:	da03      	bge.n	801d1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d1c0:	1414      	asrs	r4, r2, #16
 801d1c2:	d401      	bmi.n	801d1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d1c4:	42bc      	cmp	r4, r7
 801d1c6:	db09      	blt.n	801d1dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d1c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d1ca:	3b01      	subs	r3, #1
 801d1cc:	9800      	ldr	r0, [sp, #0]
 801d1ce:	4421      	add	r1, r4
 801d1d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d1d2:	3002      	adds	r0, #2
 801d1d4:	4422      	add	r2, r4
 801d1d6:	9000      	str	r0, [sp, #0]
 801d1d8:	e7ec      	b.n	801d1b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d1da:	d071      	beq.n	801d2c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d1dc:	1e5c      	subs	r4, r3, #1
 801d1de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d1e0:	fb06 1604 	mla	r6, r6, r4, r1
 801d1e4:	1436      	asrs	r6, r6, #16
 801d1e6:	d45d      	bmi.n	801d2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d1e8:	4576      	cmp	r6, lr
 801d1ea:	da5b      	bge.n	801d2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d1ec:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d1ee:	fb06 2404 	mla	r4, r6, r4, r2
 801d1f2:	1424      	asrs	r4, r4, #16
 801d1f4:	d456      	bmi.n	801d2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d1f6:	42bc      	cmp	r4, r7
 801d1f8:	da54      	bge.n	801d2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d1fa:	4698      	mov	r8, r3
 801d1fc:	f8dd 9000 	ldr.w	r9, [sp]
 801d200:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d204:	f1b8 0f00 	cmp.w	r8, #0
 801d208:	dd54      	ble.n	801d2b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d20a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d20e:	1414      	asrs	r4, r2, #16
 801d210:	9804      	ldr	r0, [sp, #16]
 801d212:	140e      	asrs	r6, r1, #16
 801d214:	f108 38ff 	add.w	r8, r8, #4294967295
 801d218:	fb07 0404 	mla	r4, r7, r4, r0
 801d21c:	9801      	ldr	r0, [sp, #4]
 801d21e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d222:	f8b9 4000 	ldrh.w	r4, [r9]
 801d226:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d22a:	1227      	asrs	r7, r4, #8
 801d22c:	eb00 0b0e 	add.w	fp, r0, lr
 801d230:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d234:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d238:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d23a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d23e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d242:	4401      	add	r1, r0
 801d244:	fb16 f60a 	smulbb	r6, r6, sl
 801d248:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d24a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d24e:	fb07 6705 	mla	r7, r7, r5, r6
 801d252:	10e6      	asrs	r6, r4, #3
 801d254:	00e4      	lsls	r4, r4, #3
 801d256:	4402      	add	r2, r0
 801d258:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d25c:	b2bf      	uxth	r7, r7
 801d25e:	b2e4      	uxtb	r4, r4
 801d260:	fb06 b605 	mla	r6, r6, r5, fp
 801d264:	fb14 f405 	smulbb	r4, r4, r5
 801d268:	b2b6      	uxth	r6, r6
 801d26a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d26e:	1c7c      	adds	r4, r7, #1
 801d270:	f106 0b01 	add.w	fp, r6, #1
 801d274:	fa1f fe8e 	uxth.w	lr, lr
 801d278:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d27c:	f10e 0401 	add.w	r4, lr, #1
 801d280:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d284:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d288:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d28c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d290:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d294:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d298:	4327      	orrs	r7, r4
 801d29a:	ea47 070b 	orr.w	r7, r7, fp
 801d29e:	f829 7b02 	strh.w	r7, [r9], #2
 801d2a2:	e7af      	b.n	801d204 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d2a4:	f04f 0e00 	mov.w	lr, #0
 801d2a8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d2ac:	eb03 040e 	add.w	r4, r3, lr
 801d2b0:	2c00      	cmp	r4, #0
 801d2b2:	dc43      	bgt.n	801d33c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d2b4:	9a00      	ldr	r2, [sp, #0]
 801d2b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d2ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d2be:	9300      	str	r3, [sp, #0]
 801d2c0:	9b02      	ldr	r3, [sp, #8]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	f340 8098 	ble.w	801d3f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d2c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d2cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d2ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d2d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2d6:	eef0 6a62 	vmov.f32	s13, s5
 801d2da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d2de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2e6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801d2ea:	eef0 6a43 	vmov.f32	s13, s6
 801d2ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2f2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801d2f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d302:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d306:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d30a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d30e:	ee12 2a90 	vmov	r2, s5
 801d312:	eef0 2a47 	vmov.f32	s5, s14
 801d316:	fb92 f3f3 	sdiv	r3, r2, r3
 801d31a:	ee13 2a10 	vmov	r2, s6
 801d31e:	9313      	str	r3, [sp, #76]	; 0x4c
 801d320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d322:	eeb0 3a67 	vmov.f32	s6, s15
 801d326:	fb92 f3f3 	sdiv	r3, r2, r3
 801d32a:	9314      	str	r3, [sp, #80]	; 0x50
 801d32c:	9b02      	ldr	r3, [sp, #8]
 801d32e:	9a05      	ldr	r2, [sp, #20]
 801d330:	3b01      	subs	r3, #1
 801d332:	9302      	str	r3, [sp, #8]
 801d334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d336:	bf08      	it	eq
 801d338:	4613      	moveq	r3, r2
 801d33a:	e72a      	b.n	801d192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d33c:	140f      	asrs	r7, r1, #16
 801d33e:	d454      	bmi.n	801d3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d340:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d344:	42be      	cmp	r6, r7
 801d346:	dd50      	ble.n	801d3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d348:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d34c:	d44d      	bmi.n	801d3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d34e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801d352:	4544      	cmp	r4, r8
 801d354:	dd49      	ble.n	801d3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d356:	9c04      	ldr	r4, [sp, #16]
 801d358:	b236      	sxth	r6, r6
 801d35a:	f06f 0001 	mvn.w	r0, #1
 801d35e:	fb08 4606 	mla	r6, r8, r6, r4
 801d362:	9c01      	ldr	r4, [sp, #4]
 801d364:	fb00 fa0e 	mul.w	sl, r0, lr
 801d368:	9800      	ldr	r0, [sp, #0]
 801d36a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801d36e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d372:	eb04 0b08 	add.w	fp, r4, r8
 801d376:	f830 400a 	ldrh.w	r4, [r0, sl]
 801d37a:	9801      	ldr	r0, [sp, #4]
 801d37c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d380:	1227      	asrs	r7, r4, #8
 801d382:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d386:	fb16 f609 	smulbb	r6, r6, r9
 801d38a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d38e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801d392:	fb1b fb09 	smulbb	fp, fp, r9
 801d396:	fb07 6705 	mla	r7, r7, r5, r6
 801d39a:	10e6      	asrs	r6, r4, #3
 801d39c:	00e4      	lsls	r4, r4, #3
 801d39e:	9800      	ldr	r0, [sp, #0]
 801d3a0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d3a4:	b2bf      	uxth	r7, r7
 801d3a6:	b2e4      	uxtb	r4, r4
 801d3a8:	fb06 b605 	mla	r6, r6, r5, fp
 801d3ac:	fb14 f405 	smulbb	r4, r4, r5
 801d3b0:	b2b6      	uxth	r6, r6
 801d3b2:	fb08 4809 	mla	r8, r8, r9, r4
 801d3b6:	1c7c      	adds	r4, r7, #1
 801d3b8:	f106 0b01 	add.w	fp, r6, #1
 801d3bc:	fa1f f888 	uxth.w	r8, r8
 801d3c0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d3c4:	f108 0401 	add.w	r4, r8, #1
 801d3c8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d3cc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d3d0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801d3d4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d3d8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d3dc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d3e0:	4327      	orrs	r7, r4
 801d3e2:	ea47 070b 	orr.w	r7, r7, fp
 801d3e6:	f820 700a 	strh.w	r7, [r0, sl]
 801d3ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d3ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d3f0:	4401      	add	r1, r0
 801d3f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d3f4:	4402      	add	r2, r0
 801d3f6:	e759      	b.n	801d2ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d3f8:	b007      	add	sp, #28
 801d3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d400 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d404:	b085      	sub	sp, #20
 801d406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d40a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d40c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d40e:	9203      	str	r2, [sp, #12]
 801d410:	6870      	ldr	r0, [r6, #4]
 801d412:	686f      	ldr	r7, [r5, #4]
 801d414:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801d418:	3704      	adds	r7, #4
 801d41a:	9101      	str	r1, [sp, #4]
 801d41c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d420:	fb00 2404 	mla	r4, r0, r4, r2
 801d424:	6832      	ldr	r2, [r6, #0]
 801d426:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d42a:	682a      	ldr	r2, [r5, #0]
 801d42c:	9202      	str	r2, [sp, #8]
 801d42e:	9a01      	ldr	r2, [sp, #4]
 801d430:	2a00      	cmp	r2, #0
 801d432:	dc03      	bgt.n	801d43c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d434:	9a03      	ldr	r2, [sp, #12]
 801d436:	2a00      	cmp	r2, #0
 801d438:	f340 80cc 	ble.w	801d5d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d43c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d43e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d442:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d446:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d448:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d44c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d450:	2b00      	cmp	r3, #0
 801d452:	dd0d      	ble.n	801d470 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d454:	1406      	asrs	r6, r0, #16
 801d456:	d405      	bmi.n	801d464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d458:	454e      	cmp	r6, r9
 801d45a:	da03      	bge.n	801d464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d45c:	1416      	asrs	r6, r2, #16
 801d45e:	d401      	bmi.n	801d464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d460:	4546      	cmp	r6, r8
 801d462:	db06      	blt.n	801d472 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d464:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d466:	4460      	add	r0, ip
 801d468:	3b01      	subs	r3, #1
 801d46a:	3402      	adds	r4, #2
 801d46c:	4432      	add	r2, r6
 801d46e:	e7ef      	b.n	801d450 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d470:	d00f      	beq.n	801d492 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d472:	1e5e      	subs	r6, r3, #1
 801d474:	fb0c 0e06 	mla	lr, ip, r6, r0
 801d478:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d47c:	d543      	bpl.n	801d506 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d47e:	4698      	mov	r8, r3
 801d480:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801d484:	f1b8 0f00 	cmp.w	r8, #0
 801d488:	dc71      	bgt.n	801d56e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d48a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d48e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d492:	9b01      	ldr	r3, [sp, #4]
 801d494:	2b00      	cmp	r3, #0
 801d496:	f340 809d 	ble.w	801d5d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d49a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4a4:	eeb0 6a62 	vmov.f32	s12, s5
 801d4a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d4ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4b4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d4b8:	eeb0 6a43 	vmov.f32	s12, s6
 801d4bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4c0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d4c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d4dc:	ee12 2a90 	vmov	r2, s5
 801d4e0:	eef0 2a47 	vmov.f32	s5, s14
 801d4e4:	fb92 fcf3 	sdiv	ip, r2, r3
 801d4e8:	ee13 2a10 	vmov	r2, s6
 801d4ec:	eeb0 3a67 	vmov.f32	s6, s15
 801d4f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4f4:	9312      	str	r3, [sp, #72]	; 0x48
 801d4f6:	9b01      	ldr	r3, [sp, #4]
 801d4f8:	9a03      	ldr	r2, [sp, #12]
 801d4fa:	3b01      	subs	r3, #1
 801d4fc:	9301      	str	r3, [sp, #4]
 801d4fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d500:	bf08      	it	eq
 801d502:	4613      	moveq	r3, r2
 801d504:	e793      	b.n	801d42e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d506:	45ce      	cmp	lr, r9
 801d508:	dab9      	bge.n	801d47e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d50a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d50c:	fb01 2606 	mla	r6, r1, r6, r2
 801d510:	1436      	asrs	r6, r6, #16
 801d512:	d4b4      	bmi.n	801d47e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d514:	4546      	cmp	r6, r8
 801d516:	dab2      	bge.n	801d47e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d518:	4698      	mov	r8, r3
 801d51a:	46a2      	mov	sl, r4
 801d51c:	f1b8 0f00 	cmp.w	r8, #0
 801d520:	ddb3      	ble.n	801d48a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d522:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d526:	1416      	asrs	r6, r2, #16
 801d528:	9902      	ldr	r1, [sp, #8]
 801d52a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801d52e:	f108 38ff 	add.w	r8, r8, #4294967295
 801d532:	4460      	add	r0, ip
 801d534:	fb09 1606 	mla	r6, r9, r6, r1
 801d538:	4928      	ldr	r1, [pc, #160]	; (801d5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801d53a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801d53e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d542:	eb07 0b0e 	add.w	fp, r7, lr
 801d546:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801d54a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d54e:	00f6      	lsls	r6, r6, #3
 801d550:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801d554:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d556:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d55a:	440a      	add	r2, r1
 801d55c:	ea49 0606 	orr.w	r6, r9, r6
 801d560:	f817 900e 	ldrb.w	r9, [r7, lr]
 801d564:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801d568:	f82a 6b02 	strh.w	r6, [sl], #2
 801d56c:	e7d6      	b.n	801d51c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d56e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d572:	d429      	bmi.n	801d5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d574:	68ae      	ldr	r6, [r5, #8]
 801d576:	454e      	cmp	r6, r9
 801d578:	dd26      	ble.n	801d5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d57a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d57e:	d423      	bmi.n	801d5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d580:	68e9      	ldr	r1, [r5, #12]
 801d582:	4559      	cmp	r1, fp
 801d584:	dd20      	ble.n	801d5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d586:	fa0f fe86 	sxth.w	lr, r6
 801d58a:	9902      	ldr	r1, [sp, #8]
 801d58c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801d590:	f06f 0101 	mvn.w	r1, #1
 801d594:	f81e e009 	ldrb.w	lr, [lr, r9]
 801d598:	fb01 f908 	mul.w	r9, r1, r8
 801d59c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801d5a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d5a4:	eb07 060e 	add.w	r6, r7, lr
 801d5a8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d5ac:	7876      	ldrb	r6, [r6, #1]
 801d5ae:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801d5b2:	00f6      	lsls	r6, r6, #3
 801d5b4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d5b8:	ea4b 0606 	orr.w	r6, fp, r6
 801d5bc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801d5c0:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801d5c4:	f82a 6009 	strh.w	r6, [sl, r9]
 801d5c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d5ca:	4460      	add	r0, ip
 801d5cc:	f108 38ff 	add.w	r8, r8, #4294967295
 801d5d0:	440a      	add	r2, r1
 801d5d2:	e757      	b.n	801d484 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d5d4:	b005      	add	sp, #20
 801d5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5da:	bf00      	nop
 801d5dc:	fffff800 	.word	0xfffff800

0801d5e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5e4:	b087      	sub	sp, #28
 801d5e6:	468b      	mov	fp, r1
 801d5e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5ec:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d5ee:	9204      	str	r2, [sp, #16]
 801d5f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d5f4:	6841      	ldr	r1, [r0, #4]
 801d5f6:	9205      	str	r2, [sp, #20]
 801d5f8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d5fc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d600:	fb01 2404 	mla	r4, r1, r4, r2
 801d604:	6802      	ldr	r2, [r0, #0]
 801d606:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d60a:	f8dc 2000 	ldr.w	r2, [ip]
 801d60e:	9201      	str	r2, [sp, #4]
 801d610:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d614:	3204      	adds	r2, #4
 801d616:	9202      	str	r2, [sp, #8]
 801d618:	f1bb 0f00 	cmp.w	fp, #0
 801d61c:	dc03      	bgt.n	801d626 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d61e:	9a04      	ldr	r2, [sp, #16]
 801d620:	2a00      	cmp	r2, #0
 801d622:	f340 8138 	ble.w	801d896 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d626:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d628:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d62c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d630:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d632:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801d636:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	dd0e      	ble.n	801d65c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d63e:	1402      	asrs	r2, r0, #16
 801d640:	d405      	bmi.n	801d64e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d642:	42ba      	cmp	r2, r7
 801d644:	da03      	bge.n	801d64e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d646:	140a      	asrs	r2, r1, #16
 801d648:	d401      	bmi.n	801d64e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d64a:	42b2      	cmp	r2, r6
 801d64c:	db07      	blt.n	801d65e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d64e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d650:	3b01      	subs	r3, #1
 801d652:	3402      	adds	r4, #2
 801d654:	4410      	add	r0, r2
 801d656:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d658:	4411      	add	r1, r2
 801d65a:	e7ee      	b.n	801d63a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d65c:	d019      	beq.n	801d692 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d65e:	1e5a      	subs	r2, r3, #1
 801d660:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d662:	fb05 0502 	mla	r5, r5, r2, r0
 801d666:	142d      	asrs	r5, r5, #16
 801d668:	d409      	bmi.n	801d67e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d66a:	42bd      	cmp	r5, r7
 801d66c:	da07      	bge.n	801d67e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d66e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d670:	fb05 1202 	mla	r2, r5, r2, r1
 801d674:	1412      	asrs	r2, r2, #16
 801d676:	d402      	bmi.n	801d67e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d678:	42b2      	cmp	r2, r6
 801d67a:	f2c0 80ac 	blt.w	801d7d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801d67e:	f04f 0e00 	mov.w	lr, #0
 801d682:	eb03 020e 	add.w	r2, r3, lr
 801d686:	2a00      	cmp	r2, #0
 801d688:	dc3e      	bgt.n	801d708 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d68a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d68e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d692:	f1bb 0f00 	cmp.w	fp, #0
 801d696:	f340 80fe 	ble.w	801d896 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d69a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d69e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6a4:	f1bb 0b01 	subs.w	fp, fp, #1
 801d6a8:	eeb0 6a62 	vmov.f32	s12, s5
 801d6ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d6b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6b8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d6bc:	eeb0 6a43 	vmov.f32	s12, s6
 801d6c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d6c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6e0:	ee12 2a90 	vmov	r2, s5
 801d6e4:	eef0 2a47 	vmov.f32	s5, s14
 801d6e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6ec:	ee13 2a10 	vmov	r2, s6
 801d6f0:	9313      	str	r3, [sp, #76]	; 0x4c
 801d6f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6f4:	eeb0 3a67 	vmov.f32	s6, s15
 801d6f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6fc:	9a04      	ldr	r2, [sp, #16]
 801d6fe:	9314      	str	r3, [sp, #80]	; 0x50
 801d700:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d702:	bf08      	it	eq
 801d704:	4613      	moveq	r3, r2
 801d706:	e787      	b.n	801d618 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d708:	1406      	asrs	r6, r0, #16
 801d70a:	d45d      	bmi.n	801d7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d70c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d710:	42b5      	cmp	r5, r6
 801d712:	dd59      	ble.n	801d7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d714:	140f      	asrs	r7, r1, #16
 801d716:	d457      	bmi.n	801d7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d718:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d71c:	42ba      	cmp	r2, r7
 801d71e:	dd53      	ble.n	801d7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d720:	9a01      	ldr	r2, [sp, #4]
 801d722:	b22d      	sxth	r5, r5
 801d724:	fb07 2505 	mla	r5, r7, r5, r2
 801d728:	5daa      	ldrb	r2, [r5, r6]
 801d72a:	9d02      	ldr	r5, [sp, #8]
 801d72c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d730:	0e2e      	lsrs	r6, r5, #24
 801d732:	d049      	beq.n	801d7c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d734:	f06f 0201 	mvn.w	r2, #1
 801d738:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d73c:	fb02 f20e 	mul.w	r2, r2, lr
 801d740:	f834 8002 	ldrh.w	r8, [r4, r2]
 801d744:	9203      	str	r2, [sp, #12]
 801d746:	9a05      	ldr	r2, [sp, #20]
 801d748:	ea4f 2728 	mov.w	r7, r8, asr #8
 801d74c:	4356      	muls	r6, r2
 801d74e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d752:	1c72      	adds	r2, r6, #1
 801d754:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d758:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d75c:	b2ed      	uxtb	r5, r5
 801d75e:	1212      	asrs	r2, r2, #8
 801d760:	fa1f f982 	uxth.w	r9, r2
 801d764:	43d2      	mvns	r2, r2
 801d766:	fb16 f609 	smulbb	r6, r6, r9
 801d76a:	b2d2      	uxtb	r2, r2
 801d76c:	fb15 f509 	smulbb	r5, r5, r9
 801d770:	fb07 6702 	mla	r7, r7, r2, r6
 801d774:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d778:	fb1a fa09 	smulbb	sl, sl, r9
 801d77c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d780:	b2bf      	uxth	r7, r7
 801d782:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d786:	fa5f f888 	uxtb.w	r8, r8
 801d78a:	fb06 a602 	mla	r6, r6, r2, sl
 801d78e:	fb08 5502 	mla	r5, r8, r2, r5
 801d792:	1c7a      	adds	r2, r7, #1
 801d794:	b2b6      	uxth	r6, r6
 801d796:	b2ad      	uxth	r5, r5
 801d798:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d79c:	9a03      	ldr	r2, [sp, #12]
 801d79e:	f105 0a01 	add.w	sl, r5, #1
 801d7a2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d7a6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d7aa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d7ae:	ea4a 0707 	orr.w	r7, sl, r7
 801d7b2:	f106 0a01 	add.w	sl, r6, #1
 801d7b6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d7ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d7be:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d7c2:	ea47 070a 	orr.w	r7, r7, sl
 801d7c6:	52a7      	strh	r7, [r4, r2]
 801d7c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d7ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d7ce:	4410      	add	r0, r2
 801d7d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d7d2:	4411      	add	r1, r2
 801d7d4:	e755      	b.n	801d682 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d7d6:	f04f 0800 	mov.w	r8, #0
 801d7da:	eba3 0208 	sub.w	r2, r3, r8
 801d7de:	2a00      	cmp	r2, #0
 801d7e0:	f77f af53 	ble.w	801d68a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d7e4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801d7e8:	140a      	asrs	r2, r1, #16
 801d7ea:	9f01      	ldr	r7, [sp, #4]
 801d7ec:	1405      	asrs	r5, r0, #16
 801d7ee:	fb06 7202 	mla	r2, r6, r2, r7
 801d7f2:	5d52      	ldrb	r2, [r2, r5]
 801d7f4:	9d02      	ldr	r5, [sp, #8]
 801d7f6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d7fa:	0e2e      	lsrs	r6, r5, #24
 801d7fc:	d044      	beq.n	801d888 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d7fe:	9a05      	ldr	r2, [sp, #20]
 801d800:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d804:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801d808:	4356      	muls	r6, r2
 801d80a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d80e:	1c72      	adds	r2, r6, #1
 801d810:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d814:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d818:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d81c:	b2ed      	uxtb	r5, r5
 801d81e:	1212      	asrs	r2, r2, #8
 801d820:	fa1f f982 	uxth.w	r9, r2
 801d824:	43d2      	mvns	r2, r2
 801d826:	fb16 f609 	smulbb	r6, r6, r9
 801d82a:	b2d2      	uxtb	r2, r2
 801d82c:	fb15 f509 	smulbb	r5, r5, r9
 801d830:	fb07 6702 	mla	r7, r7, r2, r6
 801d834:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d838:	fb1a fa09 	smulbb	sl, sl, r9
 801d83c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d840:	b2bf      	uxth	r7, r7
 801d842:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d846:	fa5f fe8e 	uxtb.w	lr, lr
 801d84a:	fb06 a602 	mla	r6, r6, r2, sl
 801d84e:	fb0e 5502 	mla	r5, lr, r2, r5
 801d852:	1c7a      	adds	r2, r7, #1
 801d854:	b2b6      	uxth	r6, r6
 801d856:	b2ad      	uxth	r5, r5
 801d858:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d85c:	f105 0a01 	add.w	sl, r5, #1
 801d860:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d864:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d868:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d86c:	ea4a 0707 	orr.w	r7, sl, r7
 801d870:	f106 0a01 	add.w	sl, r6, #1
 801d874:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d878:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d87c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d880:	ea47 070a 	orr.w	r7, r7, sl
 801d884:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801d888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d88a:	f108 0801 	add.w	r8, r8, #1
 801d88e:	4410      	add	r0, r2
 801d890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d892:	4411      	add	r1, r2
 801d894:	e7a1      	b.n	801d7da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d896:	b007      	add	sp, #28
 801d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d89c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a0:	b085      	sub	sp, #20
 801d8a2:	468b      	mov	fp, r1
 801d8a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d8a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d8aa:	9203      	str	r2, [sp, #12]
 801d8ac:	6841      	ldr	r1, [r0, #4]
 801d8ae:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801d8b2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d8b6:	fb01 2404 	mla	r4, r1, r4, r2
 801d8ba:	6802      	ldr	r2, [r0, #0]
 801d8bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d8c0:	f8de 2000 	ldr.w	r2, [lr]
 801d8c4:	9200      	str	r2, [sp, #0]
 801d8c6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d8ca:	3204      	adds	r2, #4
 801d8cc:	9201      	str	r2, [sp, #4]
 801d8ce:	f1bb 0f00 	cmp.w	fp, #0
 801d8d2:	dc03      	bgt.n	801d8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d8d4:	9a03      	ldr	r2, [sp, #12]
 801d8d6:	2a00      	cmp	r2, #0
 801d8d8:	f340 8153 	ble.w	801db82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801d8dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d8de:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d8e2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d8e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d8e8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801d8ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	dd0e      	ble.n	801d912 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d8f4:	1408      	asrs	r0, r1, #16
 801d8f6:	d405      	bmi.n	801d904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d8f8:	42b8      	cmp	r0, r7
 801d8fa:	da03      	bge.n	801d904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d8fc:	1410      	asrs	r0, r2, #16
 801d8fe:	d401      	bmi.n	801d904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d900:	42b0      	cmp	r0, r6
 801d902:	db07      	blt.n	801d914 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d904:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d906:	3b01      	subs	r3, #1
 801d908:	3402      	adds	r4, #2
 801d90a:	4401      	add	r1, r0
 801d90c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d90e:	4402      	add	r2, r0
 801d910:	e7ee      	b.n	801d8f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d912:	d017      	beq.n	801d944 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d914:	1e58      	subs	r0, r3, #1
 801d916:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d918:	fb05 1500 	mla	r5, r5, r0, r1
 801d91c:	142d      	asrs	r5, r5, #16
 801d91e:	d409      	bmi.n	801d934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d920:	42bd      	cmp	r5, r7
 801d922:	da07      	bge.n	801d934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d924:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d926:	fb05 2000 	mla	r0, r5, r0, r2
 801d92a:	1400      	asrs	r0, r0, #16
 801d92c:	d402      	bmi.n	801d934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d92e:	42b0      	cmp	r0, r6
 801d930:	f2c0 80bc 	blt.w	801daac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d934:	2600      	movs	r6, #0
 801d936:	1998      	adds	r0, r3, r6
 801d938:	2800      	cmp	r0, #0
 801d93a:	dc3e      	bgt.n	801d9ba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d93c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d940:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d944:	f1bb 0f00 	cmp.w	fp, #0
 801d948:	f340 811b 	ble.w	801db82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801d94c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d952:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d956:	f1bb 0b01 	subs.w	fp, fp, #1
 801d95a:	eeb0 6a62 	vmov.f32	s12, s5
 801d95e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d962:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d966:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d96a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d96e:	eeb0 6a43 	vmov.f32	s12, s6
 801d972:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d976:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d97a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d97e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d982:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d986:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d98a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d98e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d992:	ee12 2a90 	vmov	r2, s5
 801d996:	eef0 2a47 	vmov.f32	s5, s14
 801d99a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d99e:	ee13 2a10 	vmov	r2, s6
 801d9a2:	9311      	str	r3, [sp, #68]	; 0x44
 801d9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9a6:	eeb0 3a67 	vmov.f32	s6, s15
 801d9aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9ae:	9a03      	ldr	r2, [sp, #12]
 801d9b0:	9312      	str	r3, [sp, #72]	; 0x48
 801d9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9b4:	bf08      	it	eq
 801d9b6:	4613      	moveq	r3, r2
 801d9b8:	e789      	b.n	801d8ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d9ba:	140f      	asrs	r7, r1, #16
 801d9bc:	d426      	bmi.n	801da0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9be:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d9c2:	42bd      	cmp	r5, r7
 801d9c4:	dd22      	ble.n	801da0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9c6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d9ca:	d41f      	bmi.n	801da0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9cc:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d9d0:	4560      	cmp	r0, ip
 801d9d2:	dd1b      	ble.n	801da0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9d4:	9800      	ldr	r0, [sp, #0]
 801d9d6:	b22d      	sxth	r5, r5
 801d9d8:	fb0c 0505 	mla	r5, ip, r5, r0
 801d9dc:	5de8      	ldrb	r0, [r5, r7]
 801d9de:	9d01      	ldr	r5, [sp, #4]
 801d9e0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801d9e4:	0e07      	lsrs	r7, r0, #24
 801d9e6:	2fff      	cmp	r7, #255	; 0xff
 801d9e8:	d116      	bne.n	801da18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d9ea:	f06f 0501 	mvn.w	r5, #1
 801d9ee:	fb05 f706 	mul.w	r7, r5, r6
 801d9f2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801d9f6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801d9fa:	0945      	lsrs	r5, r0, #5
 801d9fc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801da00:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801da04:	ea4c 0505 	orr.w	r5, ip, r5
 801da08:	4305      	orrs	r5, r0
 801da0a:	53e5      	strh	r5, [r4, r7]
 801da0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801da0e:	3e01      	subs	r6, #1
 801da10:	4401      	add	r1, r0
 801da12:	9812      	ldr	r0, [sp, #72]	; 0x48
 801da14:	4402      	add	r2, r0
 801da16:	e78e      	b.n	801d936 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801da18:	b2fd      	uxtb	r5, r7
 801da1a:	2f00      	cmp	r7, #0
 801da1c:	d0f6      	beq.n	801da0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801da1e:	f06f 0701 	mvn.w	r7, #1
 801da22:	fa1f f985 	uxth.w	r9, r5
 801da26:	43ed      	mvns	r5, r5
 801da28:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801da2c:	4377      	muls	r7, r6
 801da2e:	fb1a fa09 	smulbb	sl, sl, r9
 801da32:	b2ed      	uxtb	r5, r5
 801da34:	f834 8007 	ldrh.w	r8, [r4, r7]
 801da38:	9702      	str	r7, [sp, #8]
 801da3a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801da3e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801da42:	fb17 f709 	smulbb	r7, r7, r9
 801da46:	b2c0      	uxtb	r0, r0
 801da48:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801da4c:	fb10 f009 	smulbb	r0, r0, r9
 801da50:	fb0c 7c05 	mla	ip, ip, r5, r7
 801da54:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801da58:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801da5c:	fa1f fc8c 	uxth.w	ip, ip
 801da60:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801da64:	fa5f f888 	uxtb.w	r8, r8
 801da68:	fb07 a705 	mla	r7, r7, r5, sl
 801da6c:	fb08 0005 	mla	r0, r8, r5, r0
 801da70:	f10c 0501 	add.w	r5, ip, #1
 801da74:	b2bf      	uxth	r7, r7
 801da76:	b280      	uxth	r0, r0
 801da78:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801da7c:	f100 0a01 	add.w	sl, r0, #1
 801da80:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801da84:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801da88:	9802      	ldr	r0, [sp, #8]
 801da8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da8e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801da92:	f107 0a01 	add.w	sl, r7, #1
 801da96:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801da9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801da9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801daa2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801daa6:	f824 c000 	strh.w	ip, [r4, r0]
 801daaa:	e7af      	b.n	801da0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801daac:	f04f 0800 	mov.w	r8, #0
 801dab0:	eba3 0008 	sub.w	r0, r3, r8
 801dab4:	2800      	cmp	r0, #0
 801dab6:	f77f af41 	ble.w	801d93c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801daba:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dabe:	1410      	asrs	r0, r2, #16
 801dac0:	9f00      	ldr	r7, [sp, #0]
 801dac2:	140d      	asrs	r5, r1, #16
 801dac4:	fb06 7000 	mla	r0, r6, r0, r7
 801dac8:	5d40      	ldrb	r0, [r0, r5]
 801daca:	9d01      	ldr	r5, [sp, #4]
 801dacc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801dad0:	0e2e      	lsrs	r6, r5, #24
 801dad2:	2eff      	cmp	r6, #255	; 0xff
 801dad4:	d112      	bne.n	801dafc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801dad6:	482c      	ldr	r0, [pc, #176]	; (801db88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801dad8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801dadc:	0968      	lsrs	r0, r5, #5
 801dade:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dae2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dae6:	4330      	orrs	r0, r6
 801dae8:	4328      	orrs	r0, r5
 801daea:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801daee:	9811      	ldr	r0, [sp, #68]	; 0x44
 801daf0:	f108 0801 	add.w	r8, r8, #1
 801daf4:	4401      	add	r1, r0
 801daf6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801daf8:	4402      	add	r2, r0
 801dafa:	e7d9      	b.n	801dab0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801dafc:	b2f0      	uxtb	r0, r6
 801dafe:	2e00      	cmp	r6, #0
 801db00:	d0f5      	beq.n	801daee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801db02:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801db06:	fa1f f980 	uxth.w	r9, r0
 801db0a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801db0e:	43c0      	mvns	r0, r0
 801db10:	ea4f 272c 	mov.w	r7, ip, asr #8
 801db14:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801db18:	fb16 f609 	smulbb	r6, r6, r9
 801db1c:	b2c0      	uxtb	r0, r0
 801db1e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801db22:	b2ed      	uxtb	r5, r5
 801db24:	fb1a fa09 	smulbb	sl, sl, r9
 801db28:	fb07 6700 	mla	r7, r7, r0, r6
 801db2c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801db30:	fb15 f509 	smulbb	r5, r5, r9
 801db34:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801db38:	b2bf      	uxth	r7, r7
 801db3a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801db3e:	fa5f fc8c 	uxtb.w	ip, ip
 801db42:	fb06 a600 	mla	r6, r6, r0, sl
 801db46:	fb0c 5500 	mla	r5, ip, r0, r5
 801db4a:	1c78      	adds	r0, r7, #1
 801db4c:	b2b6      	uxth	r6, r6
 801db4e:	b2ad      	uxth	r5, r5
 801db50:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801db54:	f105 0a01 	add.w	sl, r5, #1
 801db58:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801db5c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801db60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801db64:	ea4a 0707 	orr.w	r7, sl, r7
 801db68:	f106 0a01 	add.w	sl, r6, #1
 801db6c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801db70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801db74:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801db78:	ea47 070a 	orr.w	r7, r7, sl
 801db7c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801db80:	e7b5      	b.n	801daee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801db82:	b005      	add	sp, #20
 801db84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db88:	fffff800 	.word	0xfffff800

0801db8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db90:	b087      	sub	sp, #28
 801db92:	468b      	mov	fp, r1
 801db94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db98:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801db9a:	9204      	str	r2, [sp, #16]
 801db9c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801dba0:	6861      	ldr	r1, [r4, #4]
 801dba2:	9205      	str	r2, [sp, #20]
 801dba4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801dba8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801dbac:	fb01 2000 	mla	r0, r1, r0, r2
 801dbb0:	6822      	ldr	r2, [r4, #0]
 801dbb2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801dbb6:	f8de 2000 	ldr.w	r2, [lr]
 801dbba:	9201      	str	r2, [sp, #4]
 801dbbc:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dbc0:	9202      	str	r2, [sp, #8]
 801dbc2:	f1bb 0f00 	cmp.w	fp, #0
 801dbc6:	dc03      	bgt.n	801dbd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801dbc8:	9a04      	ldr	r2, [sp, #16]
 801dbca:	2a00      	cmp	r2, #0
 801dbcc:	f340 8142 	ble.w	801de54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801dbd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dbd2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dbd6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dbda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dbdc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801dbe0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	dd0e      	ble.n	801dc06 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dbe8:	140c      	asrs	r4, r1, #16
 801dbea:	d405      	bmi.n	801dbf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dbec:	42bc      	cmp	r4, r7
 801dbee:	da03      	bge.n	801dbf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dbf0:	1414      	asrs	r4, r2, #16
 801dbf2:	d401      	bmi.n	801dbf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dbf4:	42b4      	cmp	r4, r6
 801dbf6:	db07      	blt.n	801dc08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dbf8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dbfa:	3b01      	subs	r3, #1
 801dbfc:	3002      	adds	r0, #2
 801dbfe:	4421      	add	r1, r4
 801dc00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dc02:	4422      	add	r2, r4
 801dc04:	e7ee      	b.n	801dbe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dc06:	d019      	beq.n	801dc3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801dc08:	1e5c      	subs	r4, r3, #1
 801dc0a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dc0c:	fb05 1504 	mla	r5, r5, r4, r1
 801dc10:	142d      	asrs	r5, r5, #16
 801dc12:	d409      	bmi.n	801dc28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dc14:	42bd      	cmp	r5, r7
 801dc16:	da07      	bge.n	801dc28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dc18:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dc1a:	fb05 2404 	mla	r4, r5, r4, r2
 801dc1e:	1424      	asrs	r4, r4, #16
 801dc20:	d402      	bmi.n	801dc28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dc22:	42b4      	cmp	r4, r6
 801dc24:	f2c0 80b1 	blt.w	801dd8a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801dc28:	f04f 0800 	mov.w	r8, #0
 801dc2c:	eb03 0408 	add.w	r4, r3, r8
 801dc30:	2c00      	cmp	r4, #0
 801dc32:	dc3e      	bgt.n	801dcb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dc34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc3c:	f1bb 0f00 	cmp.w	fp, #0
 801dc40:	f340 8108 	ble.w	801de54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801dc44:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc4e:	f1bb 0b01 	subs.w	fp, fp, #1
 801dc52:	eeb0 6a62 	vmov.f32	s12, s5
 801dc56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc62:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801dc66:	eeb0 6a43 	vmov.f32	s12, s6
 801dc6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc6e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801dc72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc76:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc8a:	ee12 2a90 	vmov	r2, s5
 801dc8e:	eef0 2a47 	vmov.f32	s5, s14
 801dc92:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc96:	ee13 2a10 	vmov	r2, s6
 801dc9a:	9313      	str	r3, [sp, #76]	; 0x4c
 801dc9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc9e:	eeb0 3a67 	vmov.f32	s6, s15
 801dca2:	fb92 f3f3 	sdiv	r3, r2, r3
 801dca6:	9a04      	ldr	r2, [sp, #16]
 801dca8:	9314      	str	r3, [sp, #80]	; 0x50
 801dcaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dcac:	bf08      	it	eq
 801dcae:	4613      	moveq	r3, r2
 801dcb0:	e787      	b.n	801dbc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801dcb2:	140e      	asrs	r6, r1, #16
 801dcb4:	d462      	bmi.n	801dd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcb6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dcba:	42b5      	cmp	r5, r6
 801dcbc:	dd5e      	ble.n	801dd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcbe:	1417      	asrs	r7, r2, #16
 801dcc0:	d45c      	bmi.n	801dd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcc2:	f8de 400c 	ldr.w	r4, [lr, #12]
 801dcc6:	42bc      	cmp	r4, r7
 801dcc8:	dd58      	ble.n	801dd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcca:	b22d      	sxth	r5, r5
 801dccc:	9c02      	ldr	r4, [sp, #8]
 801dcce:	fb07 6505 	mla	r5, r7, r5, r6
 801dcd2:	5d66      	ldrb	r6, [r4, r5]
 801dcd4:	2e00      	cmp	r6, #0
 801dcd6:	d051      	beq.n	801dd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcd8:	9c01      	ldr	r4, [sp, #4]
 801dcda:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801dcde:	f06f 0401 	mvn.w	r4, #1
 801dce2:	fb04 f408 	mul.w	r4, r4, r8
 801dce6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801dcea:	5b05      	ldrh	r5, [r0, r4]
 801dcec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dcf0:	9403      	str	r4, [sp, #12]
 801dcf2:	9c05      	ldr	r4, [sp, #20]
 801dcf4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801dcf8:	4366      	muls	r6, r4
 801dcfa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801dcfe:	1c74      	adds	r4, r6, #1
 801dd00:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801dd04:	122e      	asrs	r6, r5, #8
 801dd06:	1224      	asrs	r4, r4, #8
 801dd08:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dd0c:	00ed      	lsls	r5, r5, #3
 801dd0e:	b2a7      	uxth	r7, r4
 801dd10:	43e4      	mvns	r4, r4
 801dd12:	b2ed      	uxtb	r5, r5
 801dd14:	b2e4      	uxtb	r4, r4
 801dd16:	fb16 f604 	smulbb	r6, r6, r4
 801dd1a:	fb15 f504 	smulbb	r5, r5, r4
 801dd1e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801dd22:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801dd26:	fb1a fa04 	smulbb	sl, sl, r4
 801dd2a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801dd2e:	fa1f fc8c 	uxth.w	ip, ip
 801dd32:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dd36:	fa5f f989 	uxtb.w	r9, r9
 801dd3a:	fb06 a607 	mla	r6, r6, r7, sl
 801dd3e:	f10c 0401 	add.w	r4, ip, #1
 801dd42:	fb09 5507 	mla	r5, r9, r7, r5
 801dd46:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801dd4a:	9c03      	ldr	r4, [sp, #12]
 801dd4c:	b2ad      	uxth	r5, r5
 801dd4e:	b2b6      	uxth	r6, r6
 801dd50:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dd54:	f105 0a01 	add.w	sl, r5, #1
 801dd58:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801dd5c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dd60:	ea4a 0c0c 	orr.w	ip, sl, ip
 801dd64:	f106 0a01 	add.w	sl, r6, #1
 801dd68:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dd6c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dd70:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dd74:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dd78:	f820 c004 	strh.w	ip, [r0, r4]
 801dd7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dd7e:	f108 38ff 	add.w	r8, r8, #4294967295
 801dd82:	4421      	add	r1, r4
 801dd84:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd86:	4422      	add	r2, r4
 801dd88:	e750      	b.n	801dc2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dd8a:	f04f 0900 	mov.w	r9, #0
 801dd8e:	eba3 0409 	sub.w	r4, r3, r9
 801dd92:	2c00      	cmp	r4, #0
 801dd94:	f77f af4e 	ble.w	801dc34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dd98:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dd9c:	140d      	asrs	r5, r1, #16
 801dd9e:	1414      	asrs	r4, r2, #16
 801dda0:	fb06 5404 	mla	r4, r6, r4, r5
 801dda4:	9d02      	ldr	r5, [sp, #8]
 801dda6:	5d2e      	ldrb	r6, [r5, r4]
 801dda8:	2e00      	cmp	r6, #0
 801ddaa:	d04c      	beq.n	801de46 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ddac:	9d01      	ldr	r5, [sp, #4]
 801ddae:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801ddb2:	9c05      	ldr	r4, [sp, #20]
 801ddb4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ddb8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ddbc:	4366      	muls	r6, r4
 801ddbe:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ddc2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ddc6:	1c74      	adds	r4, r6, #1
 801ddc8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ddcc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ddd0:	122e      	asrs	r6, r5, #8
 801ddd2:	1224      	asrs	r4, r4, #8
 801ddd4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ddd8:	00ed      	lsls	r5, r5, #3
 801ddda:	b2a7      	uxth	r7, r4
 801dddc:	43e4      	mvns	r4, r4
 801ddde:	b2ed      	uxtb	r5, r5
 801dde0:	b2e4      	uxtb	r4, r4
 801dde2:	fb16 f604 	smulbb	r6, r6, r4
 801dde6:	fb15 f504 	smulbb	r5, r5, r4
 801ddea:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ddee:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ddf2:	fb1a fa04 	smulbb	sl, sl, r4
 801ddf6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ddfa:	fa1f fc8c 	uxth.w	ip, ip
 801ddfe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de02:	fa5f f888 	uxtb.w	r8, r8
 801de06:	fb06 a607 	mla	r6, r6, r7, sl
 801de0a:	f10c 0401 	add.w	r4, ip, #1
 801de0e:	fb08 5507 	mla	r5, r8, r7, r5
 801de12:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801de16:	b2ad      	uxth	r5, r5
 801de18:	b2b6      	uxth	r6, r6
 801de1a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801de1e:	f105 0a01 	add.w	sl, r5, #1
 801de22:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801de26:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801de2a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801de2e:	f106 0a01 	add.w	sl, r6, #1
 801de32:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801de36:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801de3a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801de3e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801de42:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801de46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de48:	f109 0901 	add.w	r9, r9, #1
 801de4c:	4421      	add	r1, r4
 801de4e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801de50:	4422      	add	r2, r4
 801de52:	e79c      	b.n	801dd8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801de54:	b007      	add	sp, #28
 801de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de5a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de5e:	b085      	sub	sp, #20
 801de60:	468b      	mov	fp, r1
 801de62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de68:	9203      	str	r2, [sp, #12]
 801de6a:	6861      	ldr	r1, [r4, #4]
 801de6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801de70:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801de74:	fb01 2000 	mla	r0, r1, r0, r2
 801de78:	6822      	ldr	r2, [r4, #0]
 801de7a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801de7e:	f8d8 2000 	ldr.w	r2, [r8]
 801de82:	9200      	str	r2, [sp, #0]
 801de84:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801de88:	9201      	str	r2, [sp, #4]
 801de8a:	f1bb 0f00 	cmp.w	fp, #0
 801de8e:	dc03      	bgt.n	801de98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801de90:	9a03      	ldr	r2, [sp, #12]
 801de92:	2a00      	cmp	r2, #0
 801de94:	f340 8146 	ble.w	801e124 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801de98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de9a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801de9e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dea4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801dea8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801deac:	2b00      	cmp	r3, #0
 801deae:	dd0e      	ble.n	801dece <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801deb0:	140c      	asrs	r4, r1, #16
 801deb2:	d405      	bmi.n	801dec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801deb4:	42bc      	cmp	r4, r7
 801deb6:	da03      	bge.n	801dec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801deb8:	1414      	asrs	r4, r2, #16
 801deba:	d401      	bmi.n	801dec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801debc:	42b4      	cmp	r4, r6
 801debe:	db07      	blt.n	801ded0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dec0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dec2:	3b01      	subs	r3, #1
 801dec4:	3002      	adds	r0, #2
 801dec6:	4421      	add	r1, r4
 801dec8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801deca:	4422      	add	r2, r4
 801decc:	e7ee      	b.n	801deac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801dece:	d017      	beq.n	801df00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ded0:	1e5c      	subs	r4, r3, #1
 801ded2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ded4:	fb05 1504 	mla	r5, r5, r4, r1
 801ded8:	142d      	asrs	r5, r5, #16
 801deda:	d409      	bmi.n	801def0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dedc:	42bd      	cmp	r5, r7
 801dede:	da07      	bge.n	801def0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dee0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801dee2:	fb05 2404 	mla	r4, r5, r4, r2
 801dee6:	1424      	asrs	r4, r4, #16
 801dee8:	d402      	bmi.n	801def0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801deea:	42b4      	cmp	r4, r6
 801deec:	f2c0 80b3 	blt.w	801e056 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801def0:	2600      	movs	r6, #0
 801def2:	199c      	adds	r4, r3, r6
 801def4:	2c00      	cmp	r4, #0
 801def6:	dc3e      	bgt.n	801df76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801def8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801defc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801df00:	f1bb 0f00 	cmp.w	fp, #0
 801df04:	f340 810e 	ble.w	801e124 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801df08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df12:	f1bb 0b01 	subs.w	fp, fp, #1
 801df16:	eeb0 6a62 	vmov.f32	s12, s5
 801df1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df26:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801df2a:	eeb0 6a43 	vmov.f32	s12, s6
 801df2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df32:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801df36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df4e:	ee12 2a90 	vmov	r2, s5
 801df52:	eef0 2a47 	vmov.f32	s5, s14
 801df56:	fb92 f3f3 	sdiv	r3, r2, r3
 801df5a:	ee13 2a10 	vmov	r2, s6
 801df5e:	9311      	str	r3, [sp, #68]	; 0x44
 801df60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df62:	eeb0 3a67 	vmov.f32	s6, s15
 801df66:	fb92 f3f3 	sdiv	r3, r2, r3
 801df6a:	9a03      	ldr	r2, [sp, #12]
 801df6c:	9312      	str	r3, [sp, #72]	; 0x48
 801df6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df70:	bf08      	it	eq
 801df72:	4613      	moveq	r3, r2
 801df74:	e789      	b.n	801de8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801df76:	140f      	asrs	r7, r1, #16
 801df78:	d418      	bmi.n	801dfac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801df7e:	42bd      	cmp	r5, r7
 801df80:	dd14      	ble.n	801dfac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df82:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801df86:	d411      	bmi.n	801dfac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df88:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801df8c:	4564      	cmp	r4, ip
 801df8e:	dd0d      	ble.n	801dfac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df90:	b22d      	sxth	r5, r5
 801df92:	9c01      	ldr	r4, [sp, #4]
 801df94:	fb0c 7505 	mla	r5, ip, r5, r7
 801df98:	5d64      	ldrb	r4, [r4, r5]
 801df9a:	2cff      	cmp	r4, #255	; 0xff
 801df9c:	d10c      	bne.n	801dfb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801df9e:	9c00      	ldr	r4, [sp, #0]
 801dfa0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801dfa4:	f06f 0401 	mvn.w	r4, #1
 801dfa8:	4374      	muls	r4, r6
 801dfaa:	5305      	strh	r5, [r0, r4]
 801dfac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dfae:	3e01      	subs	r6, #1
 801dfb0:	4421      	add	r1, r4
 801dfb2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dfb4:	4422      	add	r2, r4
 801dfb6:	e79c      	b.n	801def2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dfb8:	2c00      	cmp	r4, #0
 801dfba:	d0f7      	beq.n	801dfac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801dfbc:	9f00      	ldr	r7, [sp, #0]
 801dfbe:	fa1f fc84 	uxth.w	ip, r4
 801dfc2:	43e4      	mvns	r4, r4
 801dfc4:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801dfc8:	f06f 0501 	mvn.w	r5, #1
 801dfcc:	b2e4      	uxtb	r4, r4
 801dfce:	4375      	muls	r5, r6
 801dfd0:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801dfd4:	9502      	str	r5, [sp, #8]
 801dfd6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801dfda:	5b45      	ldrh	r5, [r0, r5]
 801dfdc:	122f      	asrs	r7, r5, #8
 801dfde:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801dfe2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dfe6:	00ed      	lsls	r5, r5, #3
 801dfe8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801dfec:	fb17 f704 	smulbb	r7, r7, r4
 801dff0:	b2ed      	uxtb	r5, r5
 801dff2:	fb1a fa04 	smulbb	sl, sl, r4
 801dff6:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801dffa:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801dffe:	fb15 f504 	smulbb	r5, r5, r4
 801e002:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e006:	fa1f fe8e 	uxth.w	lr, lr
 801e00a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e00e:	fa5f f989 	uxtb.w	r9, r9
 801e012:	fb07 a70c 	mla	r7, r7, ip, sl
 801e016:	f10e 0401 	add.w	r4, lr, #1
 801e01a:	fb09 550c 	mla	r5, r9, ip, r5
 801e01e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e022:	9c02      	ldr	r4, [sp, #8]
 801e024:	b2ad      	uxth	r5, r5
 801e026:	b2bf      	uxth	r7, r7
 801e028:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801e02c:	f105 0a01 	add.w	sl, r5, #1
 801e030:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e034:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e038:	ea4a 0e0e 	orr.w	lr, sl, lr
 801e03c:	f107 0a01 	add.w	sl, r7, #1
 801e040:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e044:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e048:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e04c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e050:	f820 e004 	strh.w	lr, [r0, r4]
 801e054:	e7aa      	b.n	801dfac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e056:	f04f 0900 	mov.w	r9, #0
 801e05a:	eba3 0409 	sub.w	r4, r3, r9
 801e05e:	2c00      	cmp	r4, #0
 801e060:	f77f af4a 	ble.w	801def8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e064:	1414      	asrs	r4, r2, #16
 801e066:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e06a:	140d      	asrs	r5, r1, #16
 801e06c:	fb06 5504 	mla	r5, r6, r4, r5
 801e070:	9c01      	ldr	r4, [sp, #4]
 801e072:	5d64      	ldrb	r4, [r4, r5]
 801e074:	2cff      	cmp	r4, #255	; 0xff
 801e076:	d10b      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e078:	9c00      	ldr	r4, [sp, #0]
 801e07a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e07e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e082:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e084:	f109 0901 	add.w	r9, r9, #1
 801e088:	4421      	add	r1, r4
 801e08a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e08c:	4422      	add	r2, r4
 801e08e:	e7e4      	b.n	801e05a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e090:	2c00      	cmp	r4, #0
 801e092:	d0f6      	beq.n	801e082 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e094:	9e00      	ldr	r6, [sp, #0]
 801e096:	b2a7      	uxth	r7, r4
 801e098:	43e4      	mvns	r4, r4
 801e09a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e09e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e0a2:	b2e4      	uxtb	r4, r4
 801e0a4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e0a8:	122e      	asrs	r6, r5, #8
 801e0aa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e0ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e0b2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e0b6:	00ed      	lsls	r5, r5, #3
 801e0b8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e0bc:	fb16 f604 	smulbb	r6, r6, r4
 801e0c0:	b2ed      	uxtb	r5, r5
 801e0c2:	fb1a fa04 	smulbb	sl, sl, r4
 801e0c6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e0ca:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e0ce:	fb15 f504 	smulbb	r5, r5, r4
 801e0d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e0d6:	fa1f fc8c 	uxth.w	ip, ip
 801e0da:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e0de:	fa5f fe8e 	uxtb.w	lr, lr
 801e0e2:	fb06 a607 	mla	r6, r6, r7, sl
 801e0e6:	f10c 0401 	add.w	r4, ip, #1
 801e0ea:	fb0e 5507 	mla	r5, lr, r7, r5
 801e0ee:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e0f2:	b2ad      	uxth	r5, r5
 801e0f4:	b2b6      	uxth	r6, r6
 801e0f6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e0fa:	f105 0a01 	add.w	sl, r5, #1
 801e0fe:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e102:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e106:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e10a:	f106 0a01 	add.w	sl, r6, #1
 801e10e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e112:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e116:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e11a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e11e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e122:	e7ae      	b.n	801e082 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e124:	b005      	add	sp, #20
 801e126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e12a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e12a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e12e:	b085      	sub	sp, #20
 801e130:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e132:	9203      	str	r2, [sp, #12]
 801e134:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e138:	9100      	str	r1, [sp, #0]
 801e13a:	9201      	str	r2, [sp, #4]
 801e13c:	6841      	ldr	r1, [r0, #4]
 801e13e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801e142:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e146:	fb01 2404 	mla	r4, r1, r4, r2
 801e14a:	6802      	ldr	r2, [r0, #0]
 801e14c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e150:	f8de 2000 	ldr.w	r2, [lr]
 801e154:	9202      	str	r2, [sp, #8]
 801e156:	9a01      	ldr	r2, [sp, #4]
 801e158:	43d6      	mvns	r6, r2
 801e15a:	b2f6      	uxtb	r6, r6
 801e15c:	9a00      	ldr	r2, [sp, #0]
 801e15e:	2a00      	cmp	r2, #0
 801e160:	dc03      	bgt.n	801e16a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e162:	9a03      	ldr	r2, [sp, #12]
 801e164:	2a00      	cmp	r2, #0
 801e166:	f340 8124 	ble.w	801e3b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e16a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e16c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e170:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e174:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e176:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e17a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e17e:	2b00      	cmp	r3, #0
 801e180:	dd0e      	ble.n	801e1a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e182:	1408      	asrs	r0, r1, #16
 801e184:	d405      	bmi.n	801e192 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e186:	4560      	cmp	r0, ip
 801e188:	da03      	bge.n	801e192 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e18a:	1410      	asrs	r0, r2, #16
 801e18c:	d401      	bmi.n	801e192 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e18e:	42b8      	cmp	r0, r7
 801e190:	db07      	blt.n	801e1a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e192:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e194:	3b01      	subs	r3, #1
 801e196:	3402      	adds	r4, #2
 801e198:	4401      	add	r1, r0
 801e19a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e19c:	4402      	add	r2, r0
 801e19e:	e7ee      	b.n	801e17e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e1a0:	d06e      	beq.n	801e280 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e1a2:	1e58      	subs	r0, r3, #1
 801e1a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e1a6:	fb05 1500 	mla	r5, r5, r0, r1
 801e1aa:	142d      	asrs	r5, r5, #16
 801e1ac:	d45c      	bmi.n	801e268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1ae:	4565      	cmp	r5, ip
 801e1b0:	da5a      	bge.n	801e268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e1b4:	fb05 2000 	mla	r0, r5, r0, r2
 801e1b8:	1400      	asrs	r0, r0, #16
 801e1ba:	d455      	bmi.n	801e268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1bc:	42b8      	cmp	r0, r7
 801e1be:	da53      	bge.n	801e268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1c0:	4699      	mov	r9, r3
 801e1c2:	46a2      	mov	sl, r4
 801e1c4:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e1c8:	f1b9 0f00 	cmp.w	r9, #0
 801e1cc:	dd54      	ble.n	801e278 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e1ce:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e1d2:	140d      	asrs	r5, r1, #16
 801e1d4:	1410      	asrs	r0, r2, #16
 801e1d6:	f109 39ff 	add.w	r9, r9, #4294967295
 801e1da:	fb07 5000 	mla	r0, r7, r0, r5
 801e1de:	9d02      	ldr	r5, [sp, #8]
 801e1e0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e1e4:	f8ba 5000 	ldrh.w	r5, [sl]
 801e1e8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e1ec:	122f      	asrs	r7, r5, #8
 801e1ee:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e1f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e1f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e1fa:	00ed      	lsls	r5, r5, #3
 801e1fc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e200:	fb17 f706 	smulbb	r7, r7, r6
 801e204:	b2ed      	uxtb	r5, r5
 801e206:	fb18 f806 	smulbb	r8, r8, r6
 801e20a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e20e:	10c7      	asrs	r7, r0, #3
 801e210:	fb15 f506 	smulbb	r5, r5, r6
 801e214:	00c0      	lsls	r0, r0, #3
 801e216:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e21a:	fa1f fc8c 	uxth.w	ip, ip
 801e21e:	b2c0      	uxtb	r0, r0
 801e220:	fb07 870b 	mla	r7, r7, fp, r8
 801e224:	fb00 500b 	mla	r0, r0, fp, r5
 801e228:	f10c 0501 	add.w	r5, ip, #1
 801e22c:	b2bf      	uxth	r7, r7
 801e22e:	b280      	uxth	r0, r0
 801e230:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e234:	f107 0801 	add.w	r8, r7, #1
 801e238:	1c45      	adds	r5, r0, #1
 801e23a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e23e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e242:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e246:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e248:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e24c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e250:	4401      	add	r1, r0
 801e252:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e256:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e258:	ea45 0c0c 	orr.w	ip, r5, ip
 801e25c:	4402      	add	r2, r0
 801e25e:	ea4c 0c08 	orr.w	ip, ip, r8
 801e262:	f82a cb02 	strh.w	ip, [sl], #2
 801e266:	e7af      	b.n	801e1c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e268:	f04f 0800 	mov.w	r8, #0
 801e26c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e270:	eb03 0008 	add.w	r0, r3, r8
 801e274:	2800      	cmp	r0, #0
 801e276:	dc41      	bgt.n	801e2fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e278:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e27c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e280:	9b00      	ldr	r3, [sp, #0]
 801e282:	2b00      	cmp	r3, #0
 801e284:	f340 8095 	ble.w	801e3b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e28c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e28e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e292:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e296:	eef0 6a62 	vmov.f32	s13, s5
 801e29a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e29e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2a6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801e2aa:	eef0 6a43 	vmov.f32	s13, s6
 801e2ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2b2:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801e2b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e2be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e2c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e2c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e2ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e2ce:	ee12 2a90 	vmov	r2, s5
 801e2d2:	eef0 2a47 	vmov.f32	s5, s14
 801e2d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2da:	ee13 2a10 	vmov	r2, s6
 801e2de:	9311      	str	r3, [sp, #68]	; 0x44
 801e2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2e2:	eeb0 3a67 	vmov.f32	s6, s15
 801e2e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2ea:	9312      	str	r3, [sp, #72]	; 0x48
 801e2ec:	9b00      	ldr	r3, [sp, #0]
 801e2ee:	9a03      	ldr	r2, [sp, #12]
 801e2f0:	3b01      	subs	r3, #1
 801e2f2:	9300      	str	r3, [sp, #0]
 801e2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2f6:	bf08      	it	eq
 801e2f8:	4613      	moveq	r3, r2
 801e2fa:	e72f      	b.n	801e15c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e2fc:	140f      	asrs	r7, r1, #16
 801e2fe:	d451      	bmi.n	801e3a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e300:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e304:	42bd      	cmp	r5, r7
 801e306:	dd4d      	ble.n	801e3a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e308:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e30c:	d44a      	bmi.n	801e3a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e30e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e312:	4560      	cmp	r0, ip
 801e314:	dd46      	ble.n	801e3a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e316:	b22d      	sxth	r5, r5
 801e318:	9802      	ldr	r0, [sp, #8]
 801e31a:	fb0c 7505 	mla	r5, ip, r5, r7
 801e31e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801e322:	f06f 0501 	mvn.w	r5, #1
 801e326:	fb05 fb08 	mul.w	fp, r5, r8
 801e32a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e32e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e332:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e336:	122f      	asrs	r7, r5, #8
 801e338:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e33c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e340:	00ed      	lsls	r5, r5, #3
 801e342:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e346:	fb17 f706 	smulbb	r7, r7, r6
 801e34a:	b2ed      	uxtb	r5, r5
 801e34c:	fb19 f906 	smulbb	r9, r9, r6
 801e350:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e354:	10c7      	asrs	r7, r0, #3
 801e356:	fb15 f506 	smulbb	r5, r5, r6
 801e35a:	00c0      	lsls	r0, r0, #3
 801e35c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e360:	fa1f fc8c 	uxth.w	ip, ip
 801e364:	b2c0      	uxtb	r0, r0
 801e366:	fb07 970a 	mla	r7, r7, sl, r9
 801e36a:	fb00 500a 	mla	r0, r0, sl, r5
 801e36e:	f10c 0501 	add.w	r5, ip, #1
 801e372:	b2bf      	uxth	r7, r7
 801e374:	b280      	uxth	r0, r0
 801e376:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e37a:	f107 0901 	add.w	r9, r7, #1
 801e37e:	1c45      	adds	r5, r0, #1
 801e380:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e384:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e388:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e38c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e390:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e394:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e398:	ea45 0c0c 	orr.w	ip, r5, ip
 801e39c:	ea4c 0c09 	orr.w	ip, ip, r9
 801e3a0:	f824 c00b 	strh.w	ip, [r4, fp]
 801e3a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e3a6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e3aa:	4401      	add	r1, r0
 801e3ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e3ae:	4402      	add	r2, r0
 801e3b0:	e75e      	b.n	801e270 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e3b2:	b005      	add	sp, #20
 801e3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3bc:	b085      	sub	sp, #20
 801e3be:	4693      	mov	fp, r2
 801e3c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e3c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e3c8:	6870      	ldr	r0, [r6, #4]
 801e3ca:	9101      	str	r1, [sp, #4]
 801e3cc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e3d0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e3d4:	fb00 2404 	mla	r4, r0, r4, r2
 801e3d8:	6832      	ldr	r2, [r6, #0]
 801e3da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e3de:	682a      	ldr	r2, [r5, #0]
 801e3e0:	9202      	str	r2, [sp, #8]
 801e3e2:	9a01      	ldr	r2, [sp, #4]
 801e3e4:	2a00      	cmp	r2, #0
 801e3e6:	dc03      	bgt.n	801e3f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e3e8:	f1bb 0f00 	cmp.w	fp, #0
 801e3ec:	f340 809a 	ble.w	801e524 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e3f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e3f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e3f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e3fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e3fc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e400:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e404:	2b00      	cmp	r3, #0
 801e406:	dd0c      	ble.n	801e422 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e408:	1406      	asrs	r6, r0, #16
 801e40a:	d405      	bmi.n	801e418 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e40c:	454e      	cmp	r6, r9
 801e40e:	da03      	bge.n	801e418 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e410:	1416      	asrs	r6, r2, #16
 801e412:	d401      	bmi.n	801e418 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e414:	4546      	cmp	r6, r8
 801e416:	db05      	blt.n	801e424 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e418:	4470      	add	r0, lr
 801e41a:	4462      	add	r2, ip
 801e41c:	3b01      	subs	r3, #1
 801e41e:	3402      	adds	r4, #2
 801e420:	e7f0      	b.n	801e404 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e422:	d00f      	beq.n	801e444 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e424:	1e5e      	subs	r6, r3, #1
 801e426:	fb0e 0706 	mla	r7, lr, r6, r0
 801e42a:	143f      	asrs	r7, r7, #16
 801e42c:	d541      	bpl.n	801e4b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e42e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e432:	4698      	mov	r8, r3
 801e434:	9603      	str	r6, [sp, #12]
 801e436:	f1b8 0f00 	cmp.w	r8, #0
 801e43a:	dc56      	bgt.n	801e4ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801e43c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e440:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e444:	9b01      	ldr	r3, [sp, #4]
 801e446:	2b00      	cmp	r3, #0
 801e448:	dd6c      	ble.n	801e524 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e44a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e44e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e450:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e454:	eeb0 6a62 	vmov.f32	s12, s5
 801e458:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e45c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e460:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e464:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e468:	eeb0 6a43 	vmov.f32	s12, s6
 801e46c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e470:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e474:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e478:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e47c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e480:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e484:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e488:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e48c:	ee12 2a90 	vmov	r2, s5
 801e490:	eef0 2a47 	vmov.f32	s5, s14
 801e494:	fb92 fef3 	sdiv	lr, r2, r3
 801e498:	ee13 2a10 	vmov	r2, s6
 801e49c:	eeb0 3a67 	vmov.f32	s6, s15
 801e4a0:	fb92 fcf3 	sdiv	ip, r2, r3
 801e4a4:	9b01      	ldr	r3, [sp, #4]
 801e4a6:	3b01      	subs	r3, #1
 801e4a8:	9301      	str	r3, [sp, #4]
 801e4aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4ac:	bf08      	it	eq
 801e4ae:	465b      	moveq	r3, fp
 801e4b0:	e797      	b.n	801e3e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e4b2:	454f      	cmp	r7, r9
 801e4b4:	dabb      	bge.n	801e42e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e4b6:	fb0c 2606 	mla	r6, ip, r6, r2
 801e4ba:	1436      	asrs	r6, r6, #16
 801e4bc:	d4b7      	bmi.n	801e42e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e4be:	4546      	cmp	r6, r8
 801e4c0:	dab5      	bge.n	801e42e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e4c2:	461e      	mov	r6, r3
 801e4c4:	46a0      	mov	r8, r4
 801e4c6:	2e00      	cmp	r6, #0
 801e4c8:	ddb8      	ble.n	801e43c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e4ca:	1417      	asrs	r7, r2, #16
 801e4cc:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e4d0:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e4d4:	9902      	ldr	r1, [sp, #8]
 801e4d6:	4470      	add	r0, lr
 801e4d8:	4462      	add	r2, ip
 801e4da:	fb0a 9707 	mla	r7, sl, r7, r9
 801e4de:	3e01      	subs	r6, #1
 801e4e0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e4e4:	f828 7b02 	strh.w	r7, [r8], #2
 801e4e8:	e7ed      	b.n	801e4c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e4ea:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e4ee:	d414      	bmi.n	801e51a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e4f0:	68ae      	ldr	r6, [r5, #8]
 801e4f2:	454e      	cmp	r6, r9
 801e4f4:	dd11      	ble.n	801e51a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e4f6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e4fa:	d40e      	bmi.n	801e51a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e4fc:	68ef      	ldr	r7, [r5, #12]
 801e4fe:	4557      	cmp	r7, sl
 801e500:	dd0b      	ble.n	801e51a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e502:	b236      	sxth	r6, r6
 801e504:	f06f 0101 	mvn.w	r1, #1
 801e508:	9f02      	ldr	r7, [sp, #8]
 801e50a:	fb0a 9606 	mla	r6, sl, r6, r9
 801e50e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e512:	fb01 f608 	mul.w	r6, r1, r8
 801e516:	9903      	ldr	r1, [sp, #12]
 801e518:	538f      	strh	r7, [r1, r6]
 801e51a:	4470      	add	r0, lr
 801e51c:	4462      	add	r2, ip
 801e51e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e522:	e788      	b.n	801e436 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e524:	b005      	add	sp, #20
 801e526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e52a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e52a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e52e:	b087      	sub	sp, #28
 801e530:	468b      	mov	fp, r1
 801e532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e536:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e538:	9203      	str	r2, [sp, #12]
 801e53a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e53e:	6841      	ldr	r1, [r0, #4]
 801e540:	9204      	str	r2, [sp, #16]
 801e542:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801e546:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e54a:	fb01 2505 	mla	r5, r1, r5, r2
 801e54e:	6802      	ldr	r2, [r0, #0]
 801e550:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801e554:	f8d9 2000 	ldr.w	r2, [r9]
 801e558:	9201      	str	r2, [sp, #4]
 801e55a:	f1bb 0f00 	cmp.w	fp, #0
 801e55e:	dc03      	bgt.n	801e568 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e560:	9a03      	ldr	r2, [sp, #12]
 801e562:	2a00      	cmp	r2, #0
 801e564:	f340 8158 	ble.w	801e818 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801e568:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e56a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801e56e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e574:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801e578:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	dd0e      	ble.n	801e59e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e580:	1402      	asrs	r2, r0, #16
 801e582:	d405      	bmi.n	801e590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e584:	42ba      	cmp	r2, r7
 801e586:	da03      	bge.n	801e590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e588:	140a      	asrs	r2, r1, #16
 801e58a:	d401      	bmi.n	801e590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e58c:	42b2      	cmp	r2, r6
 801e58e:	db07      	blt.n	801e5a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e592:	3b01      	subs	r3, #1
 801e594:	3502      	adds	r5, #2
 801e596:	4410      	add	r0, r2
 801e598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e59a:	4411      	add	r1, r2
 801e59c:	e7ee      	b.n	801e57c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e59e:	d017      	beq.n	801e5d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e5a0:	1e5a      	subs	r2, r3, #1
 801e5a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e5a4:	fb04 0402 	mla	r4, r4, r2, r0
 801e5a8:	1424      	asrs	r4, r4, #16
 801e5aa:	d409      	bmi.n	801e5c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5ac:	42bc      	cmp	r4, r7
 801e5ae:	da07      	bge.n	801e5c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e5b2:	fb04 1202 	mla	r2, r4, r2, r1
 801e5b6:	1412      	asrs	r2, r2, #16
 801e5b8:	d402      	bmi.n	801e5c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5ba:	42b2      	cmp	r2, r6
 801e5bc:	f2c0 80bf 	blt.w	801e73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e5c0:	2700      	movs	r7, #0
 801e5c2:	19da      	adds	r2, r3, r7
 801e5c4:	2a00      	cmp	r2, #0
 801e5c6:	dc3e      	bgt.n	801e646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e5c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5cc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801e5d0:	f1bb 0f00 	cmp.w	fp, #0
 801e5d4:	f340 8120 	ble.w	801e818 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801e5d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5e2:	f1bb 0b01 	subs.w	fp, fp, #1
 801e5e6:	eeb0 6a62 	vmov.f32	s12, s5
 801e5ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e5ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5f6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e5fa:	eeb0 6a43 	vmov.f32	s12, s6
 801e5fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e602:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e606:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e60a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e60e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e612:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e616:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e61a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e61e:	ee12 2a90 	vmov	r2, s5
 801e622:	eef0 2a47 	vmov.f32	s5, s14
 801e626:	fb92 f3f3 	sdiv	r3, r2, r3
 801e62a:	ee13 2a10 	vmov	r2, s6
 801e62e:	9313      	str	r3, [sp, #76]	; 0x4c
 801e630:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e632:	eeb0 3a67 	vmov.f32	s6, s15
 801e636:	fb92 f3f3 	sdiv	r3, r2, r3
 801e63a:	9a03      	ldr	r2, [sp, #12]
 801e63c:	9314      	str	r3, [sp, #80]	; 0x50
 801e63e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e640:	bf08      	it	eq
 801e642:	4613      	moveq	r3, r2
 801e644:	e789      	b.n	801e55a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e646:	1406      	asrs	r6, r0, #16
 801e648:	d42d      	bmi.n	801e6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e64a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801e64e:	42b4      	cmp	r4, r6
 801e650:	dd29      	ble.n	801e6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e652:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801e656:	d426      	bmi.n	801e6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e658:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e65c:	4562      	cmp	r2, ip
 801e65e:	dd22      	ble.n	801e6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e660:	b224      	sxth	r4, r4
 801e662:	9a01      	ldr	r2, [sp, #4]
 801e664:	fb0c 6404 	mla	r4, ip, r4, r6
 801e668:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801e66c:	0e22      	lsrs	r2, r4, #24
 801e66e:	d01a      	beq.n	801e6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e670:	9e04      	ldr	r6, [sp, #16]
 801e672:	4372      	muls	r2, r6
 801e674:	1c56      	adds	r6, r2, #1
 801e676:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e67a:	0a26      	lsrs	r6, r4, #8
 801e67c:	1212      	asrs	r2, r2, #8
 801e67e:	9605      	str	r6, [sp, #20]
 801e680:	2aff      	cmp	r2, #255	; 0xff
 801e682:	d116      	bne.n	801e6b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801e684:	f06f 0201 	mvn.w	r2, #1
 801e688:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e68c:	fb02 fc07 	mul.w	ip, r2, r7
 801e690:	0962      	lsrs	r2, r4, #5
 801e692:	f026 0607 	bic.w	r6, r6, #7
 801e696:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e69a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e69e:	4316      	orrs	r6, r2
 801e6a0:	4326      	orrs	r6, r4
 801e6a2:	f825 600c 	strh.w	r6, [r5, ip]
 801e6a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e6a8:	3f01      	subs	r7, #1
 801e6aa:	4410      	add	r0, r2
 801e6ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e6ae:	4411      	add	r1, r2
 801e6b0:	e787      	b.n	801e5c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e6b2:	f06f 0601 	mvn.w	r6, #1
 801e6b6:	fa1f fa82 	uxth.w	sl, r2
 801e6ba:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801e6be:	43d2      	mvns	r2, r2
 801e6c0:	437e      	muls	r6, r7
 801e6c2:	b2e4      	uxtb	r4, r4
 801e6c4:	fb1c fc0a 	smulbb	ip, ip, sl
 801e6c8:	b2d2      	uxtb	r2, r2
 801e6ca:	f835 8006 	ldrh.w	r8, [r5, r6]
 801e6ce:	fb14 f40a 	smulbb	r4, r4, sl
 801e6d2:	9602      	str	r6, [sp, #8]
 801e6d4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801e6d8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801e6dc:	fb16 f60a 	smulbb	r6, r6, sl
 801e6e0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e6e4:	fb0e ce02 	mla	lr, lr, r2, ip
 801e6e8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801e6ec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e6f0:	fa1f fe8e 	uxth.w	lr, lr
 801e6f4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e6f8:	fa5f f888 	uxtb.w	r8, r8
 801e6fc:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e700:	fb08 4402 	mla	r4, r8, r2, r4
 801e704:	f10e 0201 	add.w	r2, lr, #1
 801e708:	fa1f fc8c 	uxth.w	ip, ip
 801e70c:	b2a4      	uxth	r4, r4
 801e70e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e712:	9a02      	ldr	r2, [sp, #8]
 801e714:	1c66      	adds	r6, r4, #1
 801e716:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801e71a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801e71e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e722:	ea46 0e0e 	orr.w	lr, r6, lr
 801e726:	f10c 0601 	add.w	r6, ip, #1
 801e72a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801e72e:	0976      	lsrs	r6, r6, #5
 801e730:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e734:	ea4e 0e06 	orr.w	lr, lr, r6
 801e738:	f825 e002 	strh.w	lr, [r5, r2]
 801e73c:	e7b3      	b.n	801e6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e73e:	f04f 0800 	mov.w	r8, #0
 801e742:	eba3 0208 	sub.w	r2, r3, r8
 801e746:	2a00      	cmp	r2, #0
 801e748:	f77f af3e 	ble.w	801e5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e74c:	1404      	asrs	r4, r0, #16
 801e74e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801e752:	140a      	asrs	r2, r1, #16
 801e754:	fb06 4202 	mla	r2, r6, r2, r4
 801e758:	9c01      	ldr	r4, [sp, #4]
 801e75a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801e75e:	0e22      	lsrs	r2, r4, #24
 801e760:	d015      	beq.n	801e78e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801e762:	9e04      	ldr	r6, [sp, #16]
 801e764:	4372      	muls	r2, r6
 801e766:	1c56      	adds	r6, r2, #1
 801e768:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e76c:	0a26      	lsrs	r6, r4, #8
 801e76e:	1212      	asrs	r2, r2, #8
 801e770:	2aff      	cmp	r2, #255	; 0xff
 801e772:	d113      	bne.n	801e79c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e774:	0962      	lsrs	r2, r4, #5
 801e776:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e77a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e77e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e782:	f026 0607 	bic.w	r6, r6, #7
 801e786:	4316      	orrs	r6, r2
 801e788:	4326      	orrs	r6, r4
 801e78a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801e78e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e790:	f108 0801 	add.w	r8, r8, #1
 801e794:	4410      	add	r0, r2
 801e796:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e798:	4411      	add	r1, r2
 801e79a:	e7d2      	b.n	801e742 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801e79c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801e7a0:	fa1f fa82 	uxth.w	sl, r2
 801e7a4:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801e7a8:	43d2      	mvns	r2, r2
 801e7aa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e7ae:	fb17 f70a 	smulbb	r7, r7, sl
 801e7b2:	b2d2      	uxtb	r2, r2
 801e7b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e7b8:	b2e4      	uxtb	r4, r4
 801e7ba:	b2f6      	uxtb	r6, r6
 801e7bc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801e7c0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e7c4:	fb14 f40a 	smulbb	r4, r4, sl
 801e7c8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e7cc:	fa1f fc8c 	uxth.w	ip, ip
 801e7d0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e7d4:	fb16 f60a 	smulbb	r6, r6, sl
 801e7d8:	fa5f fe8e 	uxtb.w	lr, lr
 801e7dc:	fb0e 4402 	mla	r4, lr, r2, r4
 801e7e0:	fb07 6702 	mla	r7, r7, r2, r6
 801e7e4:	f10c 0201 	add.w	r2, ip, #1
 801e7e8:	b2a4      	uxth	r4, r4
 801e7ea:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e7ee:	1c66      	adds	r6, r4, #1
 801e7f0:	b2bf      	uxth	r7, r7
 801e7f2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e7f6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801e7fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e7fe:	ea46 0c0c 	orr.w	ip, r6, ip
 801e802:	1c7e      	adds	r6, r7, #1
 801e804:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801e808:	0976      	lsrs	r6, r6, #5
 801e80a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e80e:	ea4c 0c06 	orr.w	ip, ip, r6
 801e812:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801e816:	e7ba      	b.n	801e78e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801e818:	b007      	add	sp, #28
 801e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e824:	b085      	sub	sp, #20
 801e826:	468b      	mov	fp, r1
 801e828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e82c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e82e:	9203      	str	r2, [sp, #12]
 801e830:	6841      	ldr	r1, [r0, #4]
 801e832:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e836:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e83a:	fb01 2404 	mla	r4, r1, r4, r2
 801e83e:	6802      	ldr	r2, [r0, #0]
 801e840:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e844:	f8d8 2000 	ldr.w	r2, [r8]
 801e848:	9201      	str	r2, [sp, #4]
 801e84a:	f1bb 0f00 	cmp.w	fp, #0
 801e84e:	dc03      	bgt.n	801e858 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e850:	9a03      	ldr	r2, [sp, #12]
 801e852:	2a00      	cmp	r2, #0
 801e854:	f340 814f 	ble.w	801eaf6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801e858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e85a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e85e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e862:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e864:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e868:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	dd0e      	ble.n	801e88e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e870:	1408      	asrs	r0, r1, #16
 801e872:	d405      	bmi.n	801e880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e874:	42b8      	cmp	r0, r7
 801e876:	da03      	bge.n	801e880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e878:	1410      	asrs	r0, r2, #16
 801e87a:	d401      	bmi.n	801e880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e87c:	42b0      	cmp	r0, r6
 801e87e:	db07      	blt.n	801e890 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e880:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e882:	3b01      	subs	r3, #1
 801e884:	3402      	adds	r4, #2
 801e886:	4401      	add	r1, r0
 801e888:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e88a:	4402      	add	r2, r0
 801e88c:	e7ee      	b.n	801e86c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e88e:	d017      	beq.n	801e8c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e890:	1e58      	subs	r0, r3, #1
 801e892:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e894:	fb05 1500 	mla	r5, r5, r0, r1
 801e898:	142d      	asrs	r5, r5, #16
 801e89a:	d409      	bmi.n	801e8b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e89c:	42bd      	cmp	r5, r7
 801e89e:	da07      	bge.n	801e8b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e8a2:	fb05 2000 	mla	r0, r5, r0, r2
 801e8a6:	1400      	asrs	r0, r0, #16
 801e8a8:	d402      	bmi.n	801e8b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8aa:	42b0      	cmp	r0, r6
 801e8ac:	f2c0 80ba 	blt.w	801ea24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8b0:	2600      	movs	r6, #0
 801e8b2:	1998      	adds	r0, r3, r6
 801e8b4:	2800      	cmp	r0, #0
 801e8b6:	dc3e      	bgt.n	801e936 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e8b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e8c0:	f1bb 0f00 	cmp.w	fp, #0
 801e8c4:	f340 8117 	ble.w	801eaf6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801e8c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8d2:	f1bb 0b01 	subs.w	fp, fp, #1
 801e8d6:	eeb0 6a62 	vmov.f32	s12, s5
 801e8da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8e6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e8ea:	eeb0 6a43 	vmov.f32	s12, s6
 801e8ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e8f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e902:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e906:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e90a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e90e:	ee12 2a90 	vmov	r2, s5
 801e912:	eef0 2a47 	vmov.f32	s5, s14
 801e916:	fb92 f3f3 	sdiv	r3, r2, r3
 801e91a:	ee13 2a10 	vmov	r2, s6
 801e91e:	9311      	str	r3, [sp, #68]	; 0x44
 801e920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e922:	eeb0 3a67 	vmov.f32	s6, s15
 801e926:	fb92 f3f3 	sdiv	r3, r2, r3
 801e92a:	9a03      	ldr	r2, [sp, #12]
 801e92c:	9312      	str	r3, [sp, #72]	; 0x48
 801e92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e930:	bf08      	it	eq
 801e932:	4613      	moveq	r3, r2
 801e934:	e789      	b.n	801e84a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e936:	140f      	asrs	r7, r1, #16
 801e938:	d424      	bmi.n	801e984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e93a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e93e:	42bd      	cmp	r5, r7
 801e940:	dd20      	ble.n	801e984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e942:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e946:	d41d      	bmi.n	801e984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e948:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801e94c:	4560      	cmp	r0, ip
 801e94e:	dd19      	ble.n	801e984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e950:	b22d      	sxth	r5, r5
 801e952:	9801      	ldr	r0, [sp, #4]
 801e954:	fb0c 7505 	mla	r5, ip, r5, r7
 801e958:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801e95c:	0e07      	lsrs	r7, r0, #24
 801e95e:	2fff      	cmp	r7, #255	; 0xff
 801e960:	d116      	bne.n	801e990 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e962:	f06f 0501 	mvn.w	r5, #1
 801e966:	fb05 f706 	mul.w	r7, r5, r6
 801e96a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801e96e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801e972:	0945      	lsrs	r5, r0, #5
 801e974:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e978:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e97c:	ea4c 0505 	orr.w	r5, ip, r5
 801e980:	4305      	orrs	r5, r0
 801e982:	53e5      	strh	r5, [r4, r7]
 801e984:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e986:	3e01      	subs	r6, #1
 801e988:	4401      	add	r1, r0
 801e98a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e98c:	4402      	add	r2, r0
 801e98e:	e790      	b.n	801e8b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e990:	b2fd      	uxtb	r5, r7
 801e992:	2f00      	cmp	r7, #0
 801e994:	d0f6      	beq.n	801e984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e996:	f06f 0701 	mvn.w	r7, #1
 801e99a:	fa1f f985 	uxth.w	r9, r5
 801e99e:	43ed      	mvns	r5, r5
 801e9a0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e9a4:	4377      	muls	r7, r6
 801e9a6:	fb1a fa09 	smulbb	sl, sl, r9
 801e9aa:	b2ed      	uxtb	r5, r5
 801e9ac:	f834 e007 	ldrh.w	lr, [r4, r7]
 801e9b0:	9702      	str	r7, [sp, #8]
 801e9b2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801e9b6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e9ba:	fb17 f709 	smulbb	r7, r7, r9
 801e9be:	b2c0      	uxtb	r0, r0
 801e9c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e9c4:	fb10 f009 	smulbb	r0, r0, r9
 801e9c8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801e9cc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e9d0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e9d4:	fa1f fc8c 	uxth.w	ip, ip
 801e9d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e9dc:	fa5f fe8e 	uxtb.w	lr, lr
 801e9e0:	fb07 a705 	mla	r7, r7, r5, sl
 801e9e4:	fb0e 0005 	mla	r0, lr, r5, r0
 801e9e8:	f10c 0501 	add.w	r5, ip, #1
 801e9ec:	b2bf      	uxth	r7, r7
 801e9ee:	b280      	uxth	r0, r0
 801e9f0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e9f4:	f100 0a01 	add.w	sl, r0, #1
 801e9f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e9fc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ea00:	9802      	ldr	r0, [sp, #8]
 801ea02:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ea06:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ea0a:	f107 0a01 	add.w	sl, r7, #1
 801ea0e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ea12:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ea16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ea1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ea1e:	f824 c000 	strh.w	ip, [r4, r0]
 801ea22:	e7af      	b.n	801e984 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ea24:	f04f 0e00 	mov.w	lr, #0
 801ea28:	eba3 000e 	sub.w	r0, r3, lr
 801ea2c:	2800      	cmp	r0, #0
 801ea2e:	f77f af43 	ble.w	801e8b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ea32:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ea36:	140d      	asrs	r5, r1, #16
 801ea38:	1410      	asrs	r0, r2, #16
 801ea3a:	fb06 5000 	mla	r0, r6, r0, r5
 801ea3e:	9d01      	ldr	r5, [sp, #4]
 801ea40:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ea44:	0e2e      	lsrs	r6, r5, #24
 801ea46:	2eff      	cmp	r6, #255	; 0xff
 801ea48:	d112      	bne.n	801ea70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ea4a:	482c      	ldr	r0, [pc, #176]	; (801eafc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ea4c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ea50:	0968      	lsrs	r0, r5, #5
 801ea52:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ea56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ea5a:	4330      	orrs	r0, r6
 801ea5c:	4328      	orrs	r0, r5
 801ea5e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ea62:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ea64:	f10e 0e01 	add.w	lr, lr, #1
 801ea68:	4401      	add	r1, r0
 801ea6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ea6c:	4402      	add	r2, r0
 801ea6e:	e7db      	b.n	801ea28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ea70:	b2f0      	uxtb	r0, r6
 801ea72:	2e00      	cmp	r6, #0
 801ea74:	d0f5      	beq.n	801ea62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ea76:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ea7a:	fa1f f980 	uxth.w	r9, r0
 801ea7e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ea82:	43c0      	mvns	r0, r0
 801ea84:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ea88:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ea8c:	fb16 f609 	smulbb	r6, r6, r9
 801ea90:	b2c0      	uxtb	r0, r0
 801ea92:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea96:	b2ed      	uxtb	r5, r5
 801ea98:	fb1a fa09 	smulbb	sl, sl, r9
 801ea9c:	fb07 6700 	mla	r7, r7, r0, r6
 801eaa0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801eaa4:	fb15 f509 	smulbb	r5, r5, r9
 801eaa8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eaac:	b2bf      	uxth	r7, r7
 801eaae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eab2:	fa5f fc8c 	uxtb.w	ip, ip
 801eab6:	fb06 a600 	mla	r6, r6, r0, sl
 801eaba:	fb0c 5500 	mla	r5, ip, r0, r5
 801eabe:	1c78      	adds	r0, r7, #1
 801eac0:	b2b6      	uxth	r6, r6
 801eac2:	b2ad      	uxth	r5, r5
 801eac4:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801eac8:	f105 0a01 	add.w	sl, r5, #1
 801eacc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ead0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ead4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ead8:	ea4a 0707 	orr.w	r7, sl, r7
 801eadc:	f106 0a01 	add.w	sl, r6, #1
 801eae0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eae4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eae8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eaec:	ea47 070a 	orr.w	r7, r7, sl
 801eaf0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801eaf4:	e7b5      	b.n	801ea62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801eaf6:	b005      	add	sp, #20
 801eaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eafc:	fffff800 	.word	0xfffff800

0801eb00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb04:	b087      	sub	sp, #28
 801eb06:	468b      	mov	fp, r1
 801eb08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb0c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801eb0e:	9203      	str	r2, [sp, #12]
 801eb10:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801eb14:	6841      	ldr	r1, [r0, #4]
 801eb16:	9204      	str	r2, [sp, #16]
 801eb18:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801eb1c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801eb20:	fb01 2404 	mla	r4, r1, r4, r2
 801eb24:	6802      	ldr	r2, [r0, #0]
 801eb26:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eb2a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801eb2e:	3201      	adds	r2, #1
 801eb30:	f022 0201 	bic.w	r2, r2, #1
 801eb34:	9200      	str	r2, [sp, #0]
 801eb36:	f8d9 2000 	ldr.w	r2, [r9]
 801eb3a:	9201      	str	r2, [sp, #4]
 801eb3c:	f1bb 0f00 	cmp.w	fp, #0
 801eb40:	dc03      	bgt.n	801eb4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801eb42:	9a03      	ldr	r2, [sp, #12]
 801eb44:	2a00      	cmp	r2, #0
 801eb46:	f340 816a 	ble.w	801ee1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801eb4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eb4c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801eb50:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eb54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eb56:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801eb5a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	dd0e      	ble.n	801eb80 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801eb62:	1402      	asrs	r2, r0, #16
 801eb64:	d405      	bmi.n	801eb72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb66:	42ba      	cmp	r2, r7
 801eb68:	da03      	bge.n	801eb72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb6a:	140a      	asrs	r2, r1, #16
 801eb6c:	d401      	bmi.n	801eb72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb6e:	42b2      	cmp	r2, r6
 801eb70:	db07      	blt.n	801eb82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801eb72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eb74:	3b01      	subs	r3, #1
 801eb76:	3402      	adds	r4, #2
 801eb78:	4410      	add	r0, r2
 801eb7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb7c:	4411      	add	r1, r2
 801eb7e:	e7ee      	b.n	801eb5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801eb80:	d017      	beq.n	801ebb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801eb82:	1e5a      	subs	r2, r3, #1
 801eb84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eb86:	fb05 0502 	mla	r5, r5, r2, r0
 801eb8a:	142d      	asrs	r5, r5, #16
 801eb8c:	d409      	bmi.n	801eba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eb8e:	42bd      	cmp	r5, r7
 801eb90:	da07      	bge.n	801eba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eb92:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eb94:	fb05 1202 	mla	r2, r5, r2, r1
 801eb98:	1412      	asrs	r2, r2, #16
 801eb9a:	d402      	bmi.n	801eba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eb9c:	42b2      	cmp	r2, r6
 801eb9e:	f2c0 80c8 	blt.w	801ed32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801eba2:	2700      	movs	r7, #0
 801eba4:	19da      	adds	r2, r3, r7
 801eba6:	2a00      	cmp	r2, #0
 801eba8:	dc3e      	bgt.n	801ec28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ebaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ebae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ebb2:	f1bb 0f00 	cmp.w	fp, #0
 801ebb6:	f340 8132 	ble.w	801ee1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ebba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebc4:	f1bb 0b01 	subs.w	fp, fp, #1
 801ebc8:	eeb0 6a62 	vmov.f32	s12, s5
 801ebcc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ebd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebd8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ebdc:	eeb0 6a43 	vmov.f32	s12, s6
 801ebe0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebe4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ebe8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebfc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec00:	ee12 2a90 	vmov	r2, s5
 801ec04:	eef0 2a47 	vmov.f32	s5, s14
 801ec08:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec0c:	ee13 2a10 	vmov	r2, s6
 801ec10:	9313      	str	r3, [sp, #76]	; 0x4c
 801ec12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec14:	eeb0 3a67 	vmov.f32	s6, s15
 801ec18:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec1c:	9a03      	ldr	r2, [sp, #12]
 801ec1e:	9314      	str	r3, [sp, #80]	; 0x50
 801ec20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec22:	bf08      	it	eq
 801ec24:	4613      	moveq	r3, r2
 801ec26:	e789      	b.n	801eb3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ec28:	1405      	asrs	r5, r0, #16
 801ec2a:	d436      	bmi.n	801ec9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec2c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ec30:	42aa      	cmp	r2, r5
 801ec32:	dd32      	ble.n	801ec9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec34:	140e      	asrs	r6, r1, #16
 801ec36:	d430      	bmi.n	801ec9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec38:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ec3c:	42b2      	cmp	r2, r6
 801ec3e:	dd2c      	ble.n	801ec9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec40:	9a00      	ldr	r2, [sp, #0]
 801ec42:	fb06 5502 	mla	r5, r6, r2, r5
 801ec46:	9e01      	ldr	r6, [sp, #4]
 801ec48:	086a      	lsrs	r2, r5, #1
 801ec4a:	5cb2      	ldrb	r2, [r6, r2]
 801ec4c:	07ee      	lsls	r6, r5, #31
 801ec4e:	bf54      	ite	pl
 801ec50:	f002 020f 	andpl.w	r2, r2, #15
 801ec54:	1112      	asrmi	r2, r2, #4
 801ec56:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ec5a:	b2d2      	uxtb	r2, r2
 801ec5c:	b1ea      	cbz	r2, 801ec9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec5e:	9d04      	ldr	r5, [sp, #16]
 801ec60:	436a      	muls	r2, r5
 801ec62:	1c55      	adds	r5, r2, #1
 801ec64:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ec68:	4d6e      	ldr	r5, [pc, #440]	; (801ee24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ec6a:	1212      	asrs	r2, r2, #8
 801ec6c:	682d      	ldr	r5, [r5, #0]
 801ec6e:	2aff      	cmp	r2, #255	; 0xff
 801ec70:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ec74:	9605      	str	r6, [sp, #20]
 801ec76:	d116      	bne.n	801eca6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ec78:	f06f 0201 	mvn.w	r2, #1
 801ec7c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ec80:	fb02 fc07 	mul.w	ip, r2, r7
 801ec84:	096a      	lsrs	r2, r5, #5
 801ec86:	f026 0607 	bic.w	r6, r6, #7
 801ec8a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ec8e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec92:	4316      	orrs	r6, r2
 801ec94:	432e      	orrs	r6, r5
 801ec96:	f824 600c 	strh.w	r6, [r4, ip]
 801ec9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec9c:	3f01      	subs	r7, #1
 801ec9e:	4410      	add	r0, r2
 801eca0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eca2:	4411      	add	r1, r2
 801eca4:	e77e      	b.n	801eba4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801eca6:	f06f 0601 	mvn.w	r6, #1
 801ecaa:	fa1f fa82 	uxth.w	sl, r2
 801ecae:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ecb2:	43d2      	mvns	r2, r2
 801ecb4:	437e      	muls	r6, r7
 801ecb6:	b2ed      	uxtb	r5, r5
 801ecb8:	fb1c fc0a 	smulbb	ip, ip, sl
 801ecbc:	b2d2      	uxtb	r2, r2
 801ecbe:	f834 8006 	ldrh.w	r8, [r4, r6]
 801ecc2:	fb15 f50a 	smulbb	r5, r5, sl
 801ecc6:	9602      	str	r6, [sp, #8]
 801ecc8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801eccc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ecd0:	fb16 f60a 	smulbb	r6, r6, sl
 801ecd4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ecd8:	fb0e ce02 	mla	lr, lr, r2, ip
 801ecdc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ece0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ece4:	fa1f fe8e 	uxth.w	lr, lr
 801ece8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ecec:	fa5f f888 	uxtb.w	r8, r8
 801ecf0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ecf4:	fb08 5502 	mla	r5, r8, r2, r5
 801ecf8:	f10e 0201 	add.w	r2, lr, #1
 801ecfc:	fa1f fc8c 	uxth.w	ip, ip
 801ed00:	b2ad      	uxth	r5, r5
 801ed02:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ed06:	9a02      	ldr	r2, [sp, #8]
 801ed08:	1c6e      	adds	r6, r5, #1
 801ed0a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ed0e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801ed12:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ed16:	ea46 0e0e 	orr.w	lr, r6, lr
 801ed1a:	f10c 0601 	add.w	r6, ip, #1
 801ed1e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ed22:	0976      	lsrs	r6, r6, #5
 801ed24:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ed28:	ea4e 0e06 	orr.w	lr, lr, r6
 801ed2c:	f824 e002 	strh.w	lr, [r4, r2]
 801ed30:	e7b3      	b.n	801ec9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ed32:	f04f 0800 	mov.w	r8, #0
 801ed36:	eba3 0208 	sub.w	r2, r3, r8
 801ed3a:	2a00      	cmp	r2, #0
 801ed3c:	f77f af35 	ble.w	801ebaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ed40:	1402      	asrs	r2, r0, #16
 801ed42:	9e00      	ldr	r6, [sp, #0]
 801ed44:	140d      	asrs	r5, r1, #16
 801ed46:	fb06 2505 	mla	r5, r6, r5, r2
 801ed4a:	9e01      	ldr	r6, [sp, #4]
 801ed4c:	086a      	lsrs	r2, r5, #1
 801ed4e:	07ed      	lsls	r5, r5, #31
 801ed50:	5cb2      	ldrb	r2, [r6, r2]
 801ed52:	bf54      	ite	pl
 801ed54:	f002 020f 	andpl.w	r2, r2, #15
 801ed58:	1112      	asrmi	r2, r2, #4
 801ed5a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ed5e:	b2d2      	uxtb	r2, r2
 801ed60:	b1c2      	cbz	r2, 801ed94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ed62:	9d04      	ldr	r5, [sp, #16]
 801ed64:	436a      	muls	r2, r5
 801ed66:	1c55      	adds	r5, r2, #1
 801ed68:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ed6c:	4d2d      	ldr	r5, [pc, #180]	; (801ee24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ed6e:	1212      	asrs	r2, r2, #8
 801ed70:	682e      	ldr	r6, [r5, #0]
 801ed72:	2aff      	cmp	r2, #255	; 0xff
 801ed74:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801ed78:	d113      	bne.n	801eda2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ed7a:	0972      	lsrs	r2, r6, #5
 801ed7c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801ed80:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ed84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ed88:	f025 0507 	bic.w	r5, r5, #7
 801ed8c:	4315      	orrs	r5, r2
 801ed8e:	4335      	orrs	r5, r6
 801ed90:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801ed94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed96:	f108 0801 	add.w	r8, r8, #1
 801ed9a:	4410      	add	r0, r2
 801ed9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed9e:	4411      	add	r1, r2
 801eda0:	e7c9      	b.n	801ed36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801eda2:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801eda6:	fa1f fa82 	uxth.w	sl, r2
 801edaa:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801edae:	43d2      	mvns	r2, r2
 801edb0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801edb4:	fb17 f70a 	smulbb	r7, r7, sl
 801edb8:	b2d2      	uxtb	r2, r2
 801edba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801edbe:	b2f6      	uxtb	r6, r6
 801edc0:	b2ed      	uxtb	r5, r5
 801edc2:	fb0c 7c02 	mla	ip, ip, r2, r7
 801edc6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801edca:	fb16 f60a 	smulbb	r6, r6, sl
 801edce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801edd2:	fa1f fc8c 	uxth.w	ip, ip
 801edd6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801edda:	fb15 f50a 	smulbb	r5, r5, sl
 801edde:	fa5f fe8e 	uxtb.w	lr, lr
 801ede2:	fb0e 6602 	mla	r6, lr, r2, r6
 801ede6:	fb07 5702 	mla	r7, r7, r2, r5
 801edea:	f10c 0201 	add.w	r2, ip, #1
 801edee:	b2b6      	uxth	r6, r6
 801edf0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801edf4:	1c75      	adds	r5, r6, #1
 801edf6:	b2bf      	uxth	r7, r7
 801edf8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801edfc:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801ee00:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ee04:	ea45 0c0c 	orr.w	ip, r5, ip
 801ee08:	1c7d      	adds	r5, r7, #1
 801ee0a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801ee0e:	096d      	lsrs	r5, r5, #5
 801ee10:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ee14:	ea4c 0c05 	orr.w	ip, ip, r5
 801ee18:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801ee1c:	e7ba      	b.n	801ed94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ee1e:	b007      	add	sp, #28
 801ee20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee24:	20015128 	.word	0x20015128

0801ee28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee2c:	b087      	sub	sp, #28
 801ee2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee32:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801f13c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801ee36:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ee38:	9101      	str	r1, [sp, #4]
 801ee3a:	9205      	str	r2, [sp, #20]
 801ee3c:	6841      	ldr	r1, [r0, #4]
 801ee3e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801ee42:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ee46:	fb01 2404 	mla	r4, r1, r4, r2
 801ee4a:	6802      	ldr	r2, [r0, #0]
 801ee4c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ee50:	f8db 2008 	ldr.w	r2, [fp, #8]
 801ee54:	3201      	adds	r2, #1
 801ee56:	f022 0201 	bic.w	r2, r2, #1
 801ee5a:	9202      	str	r2, [sp, #8]
 801ee5c:	f8db 2000 	ldr.w	r2, [fp]
 801ee60:	9203      	str	r2, [sp, #12]
 801ee62:	9a01      	ldr	r2, [sp, #4]
 801ee64:	2a00      	cmp	r2, #0
 801ee66:	dc03      	bgt.n	801ee70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ee68:	9a05      	ldr	r2, [sp, #20]
 801ee6a:	2a00      	cmp	r2, #0
 801ee6c:	f340 8162 	ble.w	801f134 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801ee70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee72:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801ee76:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ee7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee7c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801ee80:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	dd0e      	ble.n	801eea6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ee88:	1402      	asrs	r2, r0, #16
 801ee8a:	d405      	bmi.n	801ee98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee8c:	42ba      	cmp	r2, r7
 801ee8e:	da03      	bge.n	801ee98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee90:	140a      	asrs	r2, r1, #16
 801ee92:	d401      	bmi.n	801ee98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee94:	42b2      	cmp	r2, r6
 801ee96:	db07      	blt.n	801eea8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ee9a:	3b01      	subs	r3, #1
 801ee9c:	3402      	adds	r4, #2
 801ee9e:	4410      	add	r0, r2
 801eea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eea2:	4411      	add	r1, r2
 801eea4:	e7ee      	b.n	801ee84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801eea6:	d017      	beq.n	801eed8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801eea8:	1e5a      	subs	r2, r3, #1
 801eeaa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eeac:	fb05 0502 	mla	r5, r5, r2, r0
 801eeb0:	142d      	asrs	r5, r5, #16
 801eeb2:	d409      	bmi.n	801eec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eeb4:	42bd      	cmp	r5, r7
 801eeb6:	da07      	bge.n	801eec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eeb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eeba:	fb05 1202 	mla	r2, r5, r2, r1
 801eebe:	1412      	asrs	r2, r2, #16
 801eec0:	d402      	bmi.n	801eec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eec2:	42b2      	cmp	r2, r6
 801eec4:	f2c0 80c3 	blt.w	801f04e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801eec8:	2500      	movs	r5, #0
 801eeca:	195a      	adds	r2, r3, r5
 801eecc:	2a00      	cmp	r2, #0
 801eece:	dc3f      	bgt.n	801ef50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eed0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eed4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eed8:	9b01      	ldr	r3, [sp, #4]
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	f340 812a 	ble.w	801f134 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801eee0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eee6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eeea:	eeb0 6a62 	vmov.f32	s12, s5
 801eeee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eef2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eef6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eefa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eefe:	eeb0 6a43 	vmov.f32	s12, s6
 801ef02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef06:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ef0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef12:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef22:	ee12 2a90 	vmov	r2, s5
 801ef26:	eef0 2a47 	vmov.f32	s5, s14
 801ef2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef2e:	ee13 2a10 	vmov	r2, s6
 801ef32:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef36:	eeb0 3a67 	vmov.f32	s6, s15
 801ef3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef3e:	9314      	str	r3, [sp, #80]	; 0x50
 801ef40:	9b01      	ldr	r3, [sp, #4]
 801ef42:	9a05      	ldr	r2, [sp, #20]
 801ef44:	3b01      	subs	r3, #1
 801ef46:	9301      	str	r3, [sp, #4]
 801ef48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef4a:	bf08      	it	eq
 801ef4c:	4613      	moveq	r3, r2
 801ef4e:	e788      	b.n	801ee62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ef50:	1406      	asrs	r6, r0, #16
 801ef52:	d42c      	bmi.n	801efae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef54:	f8db 2008 	ldr.w	r2, [fp, #8]
 801ef58:	42b2      	cmp	r2, r6
 801ef5a:	dd28      	ble.n	801efae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef5c:	140f      	asrs	r7, r1, #16
 801ef5e:	d426      	bmi.n	801efae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef60:	f8db 200c 	ldr.w	r2, [fp, #12]
 801ef64:	42ba      	cmp	r2, r7
 801ef66:	dd22      	ble.n	801efae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef68:	9a02      	ldr	r2, [sp, #8]
 801ef6a:	fb07 6602 	mla	r6, r7, r2, r6
 801ef6e:	9f03      	ldr	r7, [sp, #12]
 801ef70:	0872      	lsrs	r2, r6, #1
 801ef72:	07f6      	lsls	r6, r6, #31
 801ef74:	5cba      	ldrb	r2, [r7, r2]
 801ef76:	bf54      	ite	pl
 801ef78:	f002 020f 	andpl.w	r2, r2, #15
 801ef7c:	1112      	asrmi	r2, r2, #4
 801ef7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ef82:	b2d2      	uxtb	r2, r2
 801ef84:	2aff      	cmp	r2, #255	; 0xff
 801ef86:	d118      	bne.n	801efba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ef88:	f06f 0601 	mvn.w	r6, #1
 801ef8c:	f8d8 2000 	ldr.w	r2, [r8]
 801ef90:	fb06 f705 	mul.w	r7, r6, r5
 801ef94:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801ef98:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801ef9c:	0956      	lsrs	r6, r2, #5
 801ef9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801efa2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801efa6:	ea4c 0606 	orr.w	r6, ip, r6
 801efaa:	4316      	orrs	r6, r2
 801efac:	53e6      	strh	r6, [r4, r7]
 801efae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efb0:	3d01      	subs	r5, #1
 801efb2:	4410      	add	r0, r2
 801efb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801efb6:	4411      	add	r1, r2
 801efb8:	e787      	b.n	801eeca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801efba:	2a00      	cmp	r2, #0
 801efbc:	d0f7      	beq.n	801efae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801efbe:	f06f 0601 	mvn.w	r6, #1
 801efc2:	f8d8 c000 	ldr.w	ip, [r8]
 801efc6:	fa1f f982 	uxth.w	r9, r2
 801efca:	43d2      	mvns	r2, r2
 801efcc:	436e      	muls	r6, r5
 801efce:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801efd2:	b2d2      	uxtb	r2, r2
 801efd4:	f834 e006 	ldrh.w	lr, [r4, r6]
 801efd8:	fb1a fa09 	smulbb	sl, sl, r9
 801efdc:	9604      	str	r6, [sp, #16]
 801efde:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801efe2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801efe6:	fb16 f609 	smulbb	r6, r6, r9
 801efea:	fa5f fc8c 	uxtb.w	ip, ip
 801efee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eff2:	fb1c fc09 	smulbb	ip, ip, r9
 801eff6:	fb07 6702 	mla	r7, r7, r2, r6
 801effa:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801effe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f002:	b2bf      	uxth	r7, r7
 801f004:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f008:	fa5f fe8e 	uxtb.w	lr, lr
 801f00c:	fb06 a602 	mla	r6, r6, r2, sl
 801f010:	fb0e cc02 	mla	ip, lr, r2, ip
 801f014:	1c7a      	adds	r2, r7, #1
 801f016:	b2b6      	uxth	r6, r6
 801f018:	fa1f fc8c 	uxth.w	ip, ip
 801f01c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f020:	9a04      	ldr	r2, [sp, #16]
 801f022:	f10c 0a01 	add.w	sl, ip, #1
 801f026:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f02a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f02e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f032:	ea4a 0707 	orr.w	r7, sl, r7
 801f036:	f106 0a01 	add.w	sl, r6, #1
 801f03a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f03e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f042:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f046:	ea47 070a 	orr.w	r7, r7, sl
 801f04a:	52a7      	strh	r7, [r4, r2]
 801f04c:	e7af      	b.n	801efae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f04e:	f04f 0e00 	mov.w	lr, #0
 801f052:	eba3 020e 	sub.w	r2, r3, lr
 801f056:	2a00      	cmp	r2, #0
 801f058:	f77f af3a 	ble.w	801eed0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f05c:	1402      	asrs	r2, r0, #16
 801f05e:	9e02      	ldr	r6, [sp, #8]
 801f060:	140d      	asrs	r5, r1, #16
 801f062:	fb06 2505 	mla	r5, r6, r5, r2
 801f066:	9e03      	ldr	r6, [sp, #12]
 801f068:	086a      	lsrs	r2, r5, #1
 801f06a:	07ed      	lsls	r5, r5, #31
 801f06c:	5cb2      	ldrb	r2, [r6, r2]
 801f06e:	bf54      	ite	pl
 801f070:	f002 020f 	andpl.w	r2, r2, #15
 801f074:	1112      	asrmi	r2, r2, #4
 801f076:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f07a:	b2d2      	uxtb	r2, r2
 801f07c:	2aff      	cmp	r2, #255	; 0xff
 801f07e:	d115      	bne.n	801f0ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f080:	f8d8 5000 	ldr.w	r5, [r8]
 801f084:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801f088:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801f08c:	096a      	lsrs	r2, r5, #5
 801f08e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f092:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f096:	4332      	orrs	r2, r6
 801f098:	432a      	orrs	r2, r5
 801f09a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801f09e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f0a0:	f10e 0e01 	add.w	lr, lr, #1
 801f0a4:	4410      	add	r0, r2
 801f0a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f0a8:	4411      	add	r1, r2
 801f0aa:	e7d2      	b.n	801f052 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f0ac:	2a00      	cmp	r2, #0
 801f0ae:	d0f6      	beq.n	801f09e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f0b0:	f8d8 7000 	ldr.w	r7, [r8]
 801f0b4:	fa1f f982 	uxth.w	r9, r2
 801f0b8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f0bc:	43d2      	mvns	r2, r2
 801f0be:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801f0c2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f0c6:	ea4f 262c 	mov.w	r6, ip, asr #8
 801f0ca:	fb15 f509 	smulbb	r5, r5, r9
 801f0ce:	b2d2      	uxtb	r2, r2
 801f0d0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f0d4:	b2ff      	uxtb	r7, r7
 801f0d6:	fb1a fa09 	smulbb	sl, sl, r9
 801f0da:	fb06 5602 	mla	r6, r6, r2, r5
 801f0de:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f0e2:	fb17 f709 	smulbb	r7, r7, r9
 801f0e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f0ea:	b2b6      	uxth	r6, r6
 801f0ec:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f0f0:	fa5f fc8c 	uxtb.w	ip, ip
 801f0f4:	fb05 a502 	mla	r5, r5, r2, sl
 801f0f8:	fb0c 7702 	mla	r7, ip, r2, r7
 801f0fc:	1c72      	adds	r2, r6, #1
 801f0fe:	b2ad      	uxth	r5, r5
 801f100:	b2bf      	uxth	r7, r7
 801f102:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f106:	f107 0a01 	add.w	sl, r7, #1
 801f10a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f10e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f112:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f116:	ea4a 0606 	orr.w	r6, sl, r6
 801f11a:	f105 0a01 	add.w	sl, r5, #1
 801f11e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f122:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f126:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f12a:	ea46 060a 	orr.w	r6, r6, sl
 801f12e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801f132:	e7b4      	b.n	801f09e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f134:	b007      	add	sp, #28
 801f136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f13a:	bf00      	nop
 801f13c:	20015128 	.word	0x20015128

0801f140 <_ZN8touchgfx8LCD16bppD1Ev>:
 801f140:	4770      	bx	lr

0801f142 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801f142:	4770      	bx	lr

0801f144 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801f144:	4770      	bx	lr

0801f146 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801f146:	4770      	bx	lr

0801f148 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f148:	4770      	bx	lr

0801f14a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f14a:	4770      	bx	lr

0801f14c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f14c:	4770      	bx	lr

0801f14e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f14e:	4770      	bx	lr

0801f150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f150:	4770      	bx	lr

0801f152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f152:	4770      	bx	lr

0801f154 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f154:	4770      	bx	lr

0801f156 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f156:	4770      	bx	lr

0801f158 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f158:	4770      	bx	lr

0801f15a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f15a:	4770      	bx	lr

0801f15c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f15c:	4770      	bx	lr

0801f15e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f15e:	4770      	bx	lr

0801f160 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f160:	4770      	bx	lr

0801f162 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f162:	4770      	bx	lr

0801f164 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f164:	4770      	bx	lr

0801f166 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f166:	4770      	bx	lr

0801f168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f168:	4770      	bx	lr

0801f16a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f16a:	4770      	bx	lr

0801f16c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f16c:	4770      	bx	lr

0801f16e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f16e:	4770      	bx	lr

0801f170 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f170:	4770      	bx	lr

0801f172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f172:	4770      	bx	lr

0801f174 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f174:	4770      	bx	lr

0801f176 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f176:	4770      	bx	lr

0801f178 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f178:	4770      	bx	lr

0801f17a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f17a:	4770      	bx	lr

0801f17c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f17c:	4770      	bx	lr

0801f17e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f17e:	4770      	bx	lr

0801f180 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f184:	b088      	sub	sp, #32
 801f186:	4606      	mov	r6, r0
 801f188:	4688      	mov	r8, r1
 801f18a:	4691      	mov	r9, r2
 801f18c:	ac08      	add	r4, sp, #32
 801f18e:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f192:	4620      	mov	r0, r4
 801f194:	f7fd fc62 	bl	801ca5c <_ZNK8touchgfx6Bitmap7getDataEv>
 801f198:	6833      	ldr	r3, [r6, #0]
 801f19a:	4605      	mov	r5, r0
 801f19c:	4620      	mov	r0, r4
 801f19e:	699f      	ldr	r7, [r3, #24]
 801f1a0:	f7fd fb70 	bl	801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f1a4:	4682      	mov	sl, r0
 801f1a6:	4620      	mov	r0, r4
 801f1a8:	f7fd fba0 	bl	801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f1ac:	9500      	str	r5, [sp, #0]
 801f1ae:	464b      	mov	r3, r9
 801f1b0:	4642      	mov	r2, r8
 801f1b2:	4631      	mov	r1, r6
 801f1b4:	e9cd a001 	strd	sl, r0, [sp, #4]
 801f1b8:	a806      	add	r0, sp, #24
 801f1ba:	47b8      	blx	r7
 801f1bc:	4628      	mov	r0, r5
 801f1be:	b008      	add	sp, #32
 801f1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f1c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	9300      	str	r3, [sp, #0]
 801f1cc:	4b3d      	ldr	r3, [pc, #244]	; (801f2c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801f1ce:	781b      	ldrb	r3, [r3, #0]
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d137      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f1d4:	4a3c      	ldr	r2, [pc, #240]	; (801f2c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f1d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f1da:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d132      	bne.n	801f248 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f1e2:	4b3a      	ldr	r3, [pc, #232]	; (801f2cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f1e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f1e8:	ac02      	add	r4, sp, #8
 801f1ea:	6808      	ldr	r0, [r1, #0]
 801f1ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f1f0:	ab02      	add	r3, sp, #8
 801f1f2:	6849      	ldr	r1, [r1, #4]
 801f1f4:	4d36      	ldr	r5, [pc, #216]	; (801f2d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f1f6:	c303      	stmia	r3!, {r0, r1}
 801f1f8:	4669      	mov	r1, sp
 801f1fa:	4620      	mov	r0, r4
 801f1fc:	f7fa fd06 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f200:	4668      	mov	r0, sp
 801f202:	f7fa fcdb 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f206:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f20a:	f8bd 2000 	ldrh.w	r2, [sp]
 801f20e:	462f      	mov	r7, r5
 801f210:	6828      	ldr	r0, [r5, #0]
 801f212:	4413      	add	r3, r2
 801f214:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f218:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f21c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f220:	4413      	add	r3, r2
 801f222:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f226:	6803      	ldr	r3, [r0, #0]
 801f228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f22a:	4798      	blx	r3
 801f22c:	f010 0f01 	tst.w	r0, #1
 801f230:	d00c      	beq.n	801f24c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f232:	6828      	ldr	r0, [r5, #0]
 801f234:	6803      	ldr	r3, [r0, #0]
 801f236:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f23a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f23c:	4798      	blx	r3
 801f23e:	b004      	add	sp, #16
 801f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f244:	4a21      	ldr	r2, [pc, #132]	; (801f2cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f246:	e7c6      	b.n	801f1d6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f248:	4b1f      	ldr	r3, [pc, #124]	; (801f2c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f24a:	e7cb      	b.n	801f1e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f24c:	6838      	ldr	r0, [r7, #0]
 801f24e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f252:	6803      	ldr	r3, [r0, #0]
 801f254:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801f258:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801f25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f25e:	4798      	blx	r3
 801f260:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f264:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f268:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f26c:	fb16 3602 	smlabb	r6, r6, r2, r3
 801f270:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f274:	6838      	ldr	r0, [r7, #0]
 801f276:	6803      	ldr	r3, [r0, #0]
 801f278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f27a:	4798      	blx	r3
 801f27c:	4a12      	ldr	r2, [pc, #72]	; (801f2c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f27e:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801f282:	8813      	ldrh	r3, [r2, #0]
 801f284:	4691      	mov	r9, r2
 801f286:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f28a:	435d      	muls	r5, r3
 801f28c:	fb03 1404 	mla	r4, r3, r4, r1
 801f290:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f294:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f298:	6838      	ldr	r0, [r7, #0]
 801f29a:	42ac      	cmp	r4, r5
 801f29c:	6803      	ldr	r3, [r0, #0]
 801f29e:	d20e      	bcs.n	801f2be <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f2a0:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801f2a4:	4632      	mov	r2, r6
 801f2a6:	4643      	mov	r3, r8
 801f2a8:	4621      	mov	r1, r4
 801f2aa:	47d0      	blx	sl
 801f2ac:	f8b9 3000 	ldrh.w	r3, [r9]
 801f2b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f2b4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f2b8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f2bc:	e7ec      	b.n	801f298 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801f2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2c0:	4798      	blx	r3
 801f2c2:	e7bc      	b.n	801f23e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f2c4:	20015118 	.word	0x20015118
 801f2c8:	2001511a 	.word	0x2001511a
 801f2cc:	2001511c 	.word	0x2001511c
 801f2d0:	20015120 	.word	0x20015120

0801f2d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2d8:	b08b      	sub	sp, #44	; 0x2c
 801f2da:	460f      	mov	r7, r1
 801f2dc:	4616      	mov	r6, r2
 801f2de:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801f2e2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f2e6:	f1bb 0f00 	cmp.w	fp, #0
 801f2ea:	d04a      	beq.n	801f382 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f2ec:	6810      	ldr	r0, [r2, #0]
 801f2ee:	ad06      	add	r5, sp, #24
 801f2f0:	6851      	ldr	r1, [r2, #4]
 801f2f2:	c503      	stmia	r5!, {r0, r1}
 801f2f4:	6818      	ldr	r0, [r3, #0]
 801f2f6:	ad08      	add	r5, sp, #32
 801f2f8:	6859      	ldr	r1, [r3, #4]
 801f2fa:	c503      	stmia	r5!, {r0, r1}
 801f2fc:	a806      	add	r0, sp, #24
 801f2fe:	f7fa fc5d 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f302:	4631      	mov	r1, r6
 801f304:	a808      	add	r0, sp, #32
 801f306:	f7fa fc81 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f30a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f30e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f312:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f316:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801f31a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f31e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801f322:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f326:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f32a:	4f5f      	ldr	r7, [pc, #380]	; (801f4a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f32c:	440a      	add	r2, r1
 801f32e:	6838      	ldr	r0, [r7, #0]
 801f330:	46b9      	mov	r9, r7
 801f332:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f336:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f33a:	4413      	add	r3, r2
 801f33c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f340:	6803      	ldr	r3, [r0, #0]
 801f342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f344:	4798      	blx	r3
 801f346:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f34a:	d11d      	bne.n	801f388 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f34c:	b9fc      	cbnz	r4, 801f38e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f34e:	f010 0f01 	tst.w	r0, #1
 801f352:	d01c      	beq.n	801f38e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f354:	f8d9 0000 	ldr.w	r0, [r9]
 801f358:	2700      	movs	r7, #0
 801f35a:	b2ad      	uxth	r5, r5
 801f35c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f360:	6801      	ldr	r1, [r0, #0]
 801f362:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f366:	f8cd b00c 	str.w	fp, [sp, #12]
 801f36a:	9501      	str	r5, [sp, #4]
 801f36c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801f370:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f374:	9402      	str	r4, [sp, #8]
 801f376:	fa1f f488 	uxth.w	r4, r8
 801f37a:	9400      	str	r4, [sp, #0]
 801f37c:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801f37e:	4631      	mov	r1, r6
 801f380:	47a0      	blx	r4
 801f382:	b00b      	add	sp, #44	; 0x2c
 801f384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f388:	f010 0f04 	tst.w	r0, #4
 801f38c:	e7e1      	b.n	801f352 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801f38e:	f8d9 0000 	ldr.w	r0, [r9]
 801f392:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f396:	6803      	ldr	r3, [r0, #0]
 801f398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f39a:	4798      	blx	r3
 801f39c:	4b43      	ldr	r3, [pc, #268]	; (801f4ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801f39e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f3a2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f3a6:	881a      	ldrh	r2, [r3, #0]
 801f3a8:	469a      	mov	sl, r3
 801f3aa:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f3ae:	fb05 f502 	mul.w	r5, r5, r2
 801f3b2:	fb02 1404 	mla	r4, r2, r4, r1
 801f3b6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f3ba:	d059      	beq.n	801f470 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801f3bc:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801f3c0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f3c4:	fa1f f28b 	uxth.w	r2, fp
 801f3c8:	469e      	mov	lr, r3
 801f3ca:	fa1f f989 	uxth.w	r9, r9
 801f3ce:	42ac      	cmp	r4, r5
 801f3d0:	d264      	bcs.n	801f49c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f3d2:	eb04 0a07 	add.w	sl, r4, r7
 801f3d6:	4554      	cmp	r4, sl
 801f3d8:	d23d      	bcs.n	801f456 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801f3da:	8821      	ldrh	r1, [r4, #0]
 801f3dc:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f3e0:	1208      	asrs	r0, r1, #8
 801f3e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f3e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f3ea:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f3ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f3f2:	00c9      	lsls	r1, r1, #3
 801f3f4:	fb10 f009 	smulbb	r0, r0, r9
 801f3f8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f3fc:	b2c9      	uxtb	r1, r1
 801f3fe:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f402:	10d8      	asrs	r0, r3, #3
 801f404:	fb1b fb09 	smulbb	fp, fp, r9
 801f408:	00db      	lsls	r3, r3, #3
 801f40a:	fa1f fc8c 	uxth.w	ip, ip
 801f40e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f412:	fb11 f109 	smulbb	r1, r1, r9
 801f416:	b2db      	uxtb	r3, r3
 801f418:	fb00 b002 	mla	r0, r0, r2, fp
 801f41c:	f10c 0b01 	add.w	fp, ip, #1
 801f420:	fb03 1302 	mla	r3, r3, r2, r1
 801f424:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f428:	b29b      	uxth	r3, r3
 801f42a:	b280      	uxth	r0, r0
 801f42c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801f430:	f103 0c01 	add.w	ip, r3, #1
 801f434:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f438:	1c43      	adds	r3, r0, #1
 801f43a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f43e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f442:	0940      	lsrs	r0, r0, #5
 801f444:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f448:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f44c:	ea4c 0c00 	orr.w	ip, ip, r0
 801f450:	f824 cb02 	strh.w	ip, [r4], #2
 801f454:	e7bf      	b.n	801f3d6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801f456:	f8be 3000 	ldrh.w	r3, [lr]
 801f45a:	eba3 0308 	sub.w	r3, r3, r8
 801f45e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f462:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f466:	eba3 0308 	sub.w	r3, r3, r8
 801f46a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f46e:	e7ae      	b.n	801f3ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801f470:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f474:	f8d9 0000 	ldr.w	r0, [r9]
 801f478:	42ac      	cmp	r4, r5
 801f47a:	6803      	ldr	r3, [r0, #0]
 801f47c:	d20e      	bcs.n	801f49c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f47e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801f482:	4632      	mov	r2, r6
 801f484:	463b      	mov	r3, r7
 801f486:	4621      	mov	r1, r4
 801f488:	47c0      	blx	r8
 801f48a:	f8ba 3000 	ldrh.w	r3, [sl]
 801f48e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f492:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f496:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f49a:	e7eb      	b.n	801f474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f49c:	4b02      	ldr	r3, [pc, #8]	; (801f4a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f49e:	6818      	ldr	r0, [r3, #0]
 801f4a0:	6803      	ldr	r3, [r0, #0]
 801f4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4a4:	4798      	blx	r3
 801f4a6:	e76c      	b.n	801f382 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f4a8:	20015120 	.word	0x20015120
 801f4ac:	2001511a 	.word	0x2001511a

0801f4b0 <_ZN8touchgfx8LCD16bppD0Ev>:
 801f4b0:	b510      	push	{r4, lr}
 801f4b2:	4604      	mov	r4, r0
 801f4b4:	2184      	movs	r1, #132	; 0x84
 801f4b6:	f00a fe53 	bl	802a160 <_ZdlPvj>
 801f4ba:	4620      	mov	r0, r4
 801f4bc:	bd10      	pop	{r4, pc}

0801f4be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801f4be:	b510      	push	{r4, lr}
 801f4c0:	4604      	mov	r4, r0
 801f4c2:	2104      	movs	r1, #4
 801f4c4:	f00a fe4c 	bl	802a160 <_ZdlPvj>
 801f4c8:	4620      	mov	r0, r4
 801f4ca:	bd10      	pop	{r4, pc}

0801f4cc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801f4cc:	b510      	push	{r4, lr}
 801f4ce:	4604      	mov	r4, r0
 801f4d0:	2104      	movs	r1, #4
 801f4d2:	f00a fe45 	bl	802a160 <_ZdlPvj>
 801f4d6:	4620      	mov	r0, r4
 801f4d8:	bd10      	pop	{r4, pc}

0801f4da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801f4da:	b510      	push	{r4, lr}
 801f4dc:	4604      	mov	r4, r0
 801f4de:	f640 0144 	movw	r1, #2116	; 0x844
 801f4e2:	f00a fe3d 	bl	802a160 <_ZdlPvj>
 801f4e6:	4620      	mov	r0, r4
 801f4e8:	bd10      	pop	{r4, pc}

0801f4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f4ea:	b510      	push	{r4, lr}
 801f4ec:	4604      	mov	r4, r0
 801f4ee:	2104      	movs	r1, #4
 801f4f0:	f00a fe36 	bl	802a160 <_ZdlPvj>
 801f4f4:	4620      	mov	r0, r4
 801f4f6:	bd10      	pop	{r4, pc}

0801f4f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f4f8:	b510      	push	{r4, lr}
 801f4fa:	4604      	mov	r4, r0
 801f4fc:	2104      	movs	r1, #4
 801f4fe:	f00a fe2f 	bl	802a160 <_ZdlPvj>
 801f502:	4620      	mov	r0, r4
 801f504:	bd10      	pop	{r4, pc}

0801f506 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f506:	b510      	push	{r4, lr}
 801f508:	4604      	mov	r4, r0
 801f50a:	2104      	movs	r1, #4
 801f50c:	f00a fe28 	bl	802a160 <_ZdlPvj>
 801f510:	4620      	mov	r0, r4
 801f512:	bd10      	pop	{r4, pc}

0801f514 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f514:	b510      	push	{r4, lr}
 801f516:	4604      	mov	r4, r0
 801f518:	2104      	movs	r1, #4
 801f51a:	f00a fe21 	bl	802a160 <_ZdlPvj>
 801f51e:	4620      	mov	r0, r4
 801f520:	bd10      	pop	{r4, pc}

0801f522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f522:	b510      	push	{r4, lr}
 801f524:	4604      	mov	r4, r0
 801f526:	2104      	movs	r1, #4
 801f528:	f00a fe1a 	bl	802a160 <_ZdlPvj>
 801f52c:	4620      	mov	r0, r4
 801f52e:	bd10      	pop	{r4, pc}

0801f530 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f530:	b510      	push	{r4, lr}
 801f532:	4604      	mov	r4, r0
 801f534:	2104      	movs	r1, #4
 801f536:	f00a fe13 	bl	802a160 <_ZdlPvj>
 801f53a:	4620      	mov	r0, r4
 801f53c:	bd10      	pop	{r4, pc}

0801f53e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f53e:	b510      	push	{r4, lr}
 801f540:	4604      	mov	r4, r0
 801f542:	2104      	movs	r1, #4
 801f544:	f00a fe0c 	bl	802a160 <_ZdlPvj>
 801f548:	4620      	mov	r0, r4
 801f54a:	bd10      	pop	{r4, pc}

0801f54c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f54c:	b510      	push	{r4, lr}
 801f54e:	4604      	mov	r4, r0
 801f550:	2104      	movs	r1, #4
 801f552:	f00a fe05 	bl	802a160 <_ZdlPvj>
 801f556:	4620      	mov	r0, r4
 801f558:	bd10      	pop	{r4, pc}

0801f55a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f55a:	b510      	push	{r4, lr}
 801f55c:	4604      	mov	r4, r0
 801f55e:	2104      	movs	r1, #4
 801f560:	f00a fdfe 	bl	802a160 <_ZdlPvj>
 801f564:	4620      	mov	r0, r4
 801f566:	bd10      	pop	{r4, pc}

0801f568 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f568:	b510      	push	{r4, lr}
 801f56a:	4604      	mov	r4, r0
 801f56c:	2104      	movs	r1, #4
 801f56e:	f00a fdf7 	bl	802a160 <_ZdlPvj>
 801f572:	4620      	mov	r0, r4
 801f574:	bd10      	pop	{r4, pc}

0801f576 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f576:	b510      	push	{r4, lr}
 801f578:	4604      	mov	r4, r0
 801f57a:	2104      	movs	r1, #4
 801f57c:	f00a fdf0 	bl	802a160 <_ZdlPvj>
 801f580:	4620      	mov	r0, r4
 801f582:	bd10      	pop	{r4, pc}

0801f584 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f584:	b510      	push	{r4, lr}
 801f586:	4604      	mov	r4, r0
 801f588:	2104      	movs	r1, #4
 801f58a:	f00a fde9 	bl	802a160 <_ZdlPvj>
 801f58e:	4620      	mov	r0, r4
 801f590:	bd10      	pop	{r4, pc}

0801f592 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f592:	b510      	push	{r4, lr}
 801f594:	4604      	mov	r4, r0
 801f596:	2104      	movs	r1, #4
 801f598:	f00a fde2 	bl	802a160 <_ZdlPvj>
 801f59c:	4620      	mov	r0, r4
 801f59e:	bd10      	pop	{r4, pc}

0801f5a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f5a0:	b510      	push	{r4, lr}
 801f5a2:	4604      	mov	r4, r0
 801f5a4:	2104      	movs	r1, #4
 801f5a6:	f00a fddb 	bl	802a160 <_ZdlPvj>
 801f5aa:	4620      	mov	r0, r4
 801f5ac:	bd10      	pop	{r4, pc}

0801f5ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f5ae:	b510      	push	{r4, lr}
 801f5b0:	4604      	mov	r4, r0
 801f5b2:	2104      	movs	r1, #4
 801f5b4:	f00a fdd4 	bl	802a160 <_ZdlPvj>
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	bd10      	pop	{r4, pc}

0801f5bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f5bc:	b510      	push	{r4, lr}
 801f5be:	4604      	mov	r4, r0
 801f5c0:	2104      	movs	r1, #4
 801f5c2:	f00a fdcd 	bl	802a160 <_ZdlPvj>
 801f5c6:	4620      	mov	r0, r4
 801f5c8:	bd10      	pop	{r4, pc}

0801f5ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f5ca:	b510      	push	{r4, lr}
 801f5cc:	4604      	mov	r4, r0
 801f5ce:	2104      	movs	r1, #4
 801f5d0:	f00a fdc6 	bl	802a160 <_ZdlPvj>
 801f5d4:	4620      	mov	r0, r4
 801f5d6:	bd10      	pop	{r4, pc}

0801f5d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f5d8:	b510      	push	{r4, lr}
 801f5da:	4604      	mov	r4, r0
 801f5dc:	2104      	movs	r1, #4
 801f5de:	f00a fdbf 	bl	802a160 <_ZdlPvj>
 801f5e2:	4620      	mov	r0, r4
 801f5e4:	bd10      	pop	{r4, pc}

0801f5e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f5e6:	b510      	push	{r4, lr}
 801f5e8:	4604      	mov	r4, r0
 801f5ea:	2104      	movs	r1, #4
 801f5ec:	f00a fdb8 	bl	802a160 <_ZdlPvj>
 801f5f0:	4620      	mov	r0, r4
 801f5f2:	bd10      	pop	{r4, pc}

0801f5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f5f4:	b510      	push	{r4, lr}
 801f5f6:	4604      	mov	r4, r0
 801f5f8:	2104      	movs	r1, #4
 801f5fa:	f00a fdb1 	bl	802a160 <_ZdlPvj>
 801f5fe:	4620      	mov	r0, r4
 801f600:	bd10      	pop	{r4, pc}

0801f602 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f602:	b510      	push	{r4, lr}
 801f604:	4604      	mov	r4, r0
 801f606:	2104      	movs	r1, #4
 801f608:	f00a fdaa 	bl	802a160 <_ZdlPvj>
 801f60c:	4620      	mov	r0, r4
 801f60e:	bd10      	pop	{r4, pc}

0801f610 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f610:	b510      	push	{r4, lr}
 801f612:	4604      	mov	r4, r0
 801f614:	2104      	movs	r1, #4
 801f616:	f00a fda3 	bl	802a160 <_ZdlPvj>
 801f61a:	4620      	mov	r0, r4
 801f61c:	bd10      	pop	{r4, pc}

0801f61e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f61e:	b510      	push	{r4, lr}
 801f620:	4604      	mov	r4, r0
 801f622:	2104      	movs	r1, #4
 801f624:	f00a fd9c 	bl	802a160 <_ZdlPvj>
 801f628:	4620      	mov	r0, r4
 801f62a:	bd10      	pop	{r4, pc}

0801f62c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f62c:	b510      	push	{r4, lr}
 801f62e:	4604      	mov	r4, r0
 801f630:	2104      	movs	r1, #4
 801f632:	f00a fd95 	bl	802a160 <_ZdlPvj>
 801f636:	4620      	mov	r0, r4
 801f638:	bd10      	pop	{r4, pc}

0801f63a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f63a:	b510      	push	{r4, lr}
 801f63c:	4604      	mov	r4, r0
 801f63e:	2104      	movs	r1, #4
 801f640:	f00a fd8e 	bl	802a160 <_ZdlPvj>
 801f644:	4620      	mov	r0, r4
 801f646:	bd10      	pop	{r4, pc}

0801f648 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f648:	b510      	push	{r4, lr}
 801f64a:	4604      	mov	r4, r0
 801f64c:	2104      	movs	r1, #4
 801f64e:	f00a fd87 	bl	802a160 <_ZdlPvj>
 801f652:	4620      	mov	r0, r4
 801f654:	bd10      	pop	{r4, pc}

0801f656 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f656:	b510      	push	{r4, lr}
 801f658:	4604      	mov	r4, r0
 801f65a:	2104      	movs	r1, #4
 801f65c:	f00a fd80 	bl	802a160 <_ZdlPvj>
 801f660:	4620      	mov	r0, r4
 801f662:	bd10      	pop	{r4, pc}

0801f664 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f664:	b510      	push	{r4, lr}
 801f666:	4604      	mov	r4, r0
 801f668:	2104      	movs	r1, #4
 801f66a:	f00a fd79 	bl	802a160 <_ZdlPvj>
 801f66e:	4620      	mov	r0, r4
 801f670:	bd10      	pop	{r4, pc}
	...

0801f674 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f678:	b08f      	sub	sp, #60	; 0x3c
 801f67a:	461c      	mov	r4, r3
 801f67c:	9205      	str	r2, [sp, #20]
 801f67e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f682:	9100      	str	r1, [sp, #0]
 801f684:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f686:	9201      	str	r2, [sp, #4]
 801f688:	2a00      	cmp	r2, #0
 801f68a:	f000 8116 	beq.w	801f8ba <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801f68e:	6820      	ldr	r0, [r4, #0]
 801f690:	aa0a      	add	r2, sp, #40	; 0x28
 801f692:	6861      	ldr	r1, [r4, #4]
 801f694:	c203      	stmia	r2!, {r0, r1}
 801f696:	6818      	ldr	r0, [r3, #0]
 801f698:	aa0c      	add	r2, sp, #48	; 0x30
 801f69a:	6859      	ldr	r1, [r3, #4]
 801f69c:	c203      	stmia	r2!, {r0, r1}
 801f69e:	a80a      	add	r0, sp, #40	; 0x28
 801f6a0:	f7fa fa8c 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6a4:	4621      	mov	r1, r4
 801f6a6:	a80c      	add	r0, sp, #48	; 0x30
 801f6a8:	f7fa fab0 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f6ac:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801f6b0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801f6b4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f6b8:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801f6bc:	bfdb      	ittet	le
 801f6be:	b2b3      	uxthle	r3, r6
 801f6c0:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801f6c4:	2301      	movgt	r3, #1
 801f6c6:	fb92 f3f3 	sdivle	r3, r2, r3
 801f6ca:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801f6ce:	441d      	add	r5, r3
 801f6d0:	fb92 f1f3 	sdiv	r1, r2, r3
 801f6d4:	fa1f fc81 	uxth.w	ip, r1
 801f6d8:	3d01      	subs	r5, #1
 801f6da:	fb0c 2413 	mls	r4, ip, r3, r2
 801f6de:	4661      	mov	r1, ip
 801f6e0:	fb14 f406 	smulbb	r4, r4, r6
 801f6e4:	4404      	add	r4, r0
 801f6e6:	fb95 f5f3 	sdiv	r5, r5, r3
 801f6ea:	b2a4      	uxth	r4, r4
 801f6ec:	b131      	cbz	r1, 801f6fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801f6ee:	9b05      	ldr	r3, [sp, #20]
 801f6f0:	9900      	ldr	r1, [sp, #0]
 801f6f2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f6f6:	ba1b      	rev	r3, r3
 801f6f8:	4419      	add	r1, r3
 801f6fa:	9100      	str	r1, [sp, #0]
 801f6fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f700:	b2ad      	uxth	r5, r5
 801f702:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f706:	4418      	add	r0, r3
 801f708:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f70c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801f710:	00ad      	lsls	r5, r5, #2
 801f712:	441a      	add	r2, r3
 801f714:	4b6a      	ldr	r3, [pc, #424]	; (801f8c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801f716:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801f71a:	6818      	ldr	r0, [r3, #0]
 801f71c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801f720:	6803      	ldr	r3, [r0, #0]
 801f722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f724:	4798      	blx	r3
 801f726:	4967      	ldr	r1, [pc, #412]	; (801f8c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801f728:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801f72c:	2c00      	cmp	r4, #0
 801f72e:	880b      	ldrh	r3, [r1, #0]
 801f730:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f734:	bf0c      	ite	eq
 801f736:	46c6      	moveq	lr, r8
 801f738:	f04f 0e00 	movne.w	lr, #0
 801f73c:	9109      	str	r1, [sp, #36]	; 0x24
 801f73e:	fb03 c202 	mla	r2, r3, r2, ip
 801f742:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801f746:	4373      	muls	r3, r6
 801f748:	fa1f fe8e 	uxth.w	lr, lr
 801f74c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f750:	9103      	str	r1, [sp, #12]
 801f752:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f756:	9306      	str	r3, [sp, #24]
 801f758:	1d2b      	adds	r3, r5, #4
 801f75a:	9307      	str	r3, [sp, #28]
 801f75c:	9b01      	ldr	r3, [sp, #4]
 801f75e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801f762:	2300      	movs	r3, #0
 801f764:	b292      	uxth	r2, r2
 801f766:	9302      	str	r3, [sp, #8]
 801f768:	9204      	str	r2, [sp, #16]
 801f76a:	9a06      	ldr	r2, [sp, #24]
 801f76c:	4282      	cmp	r2, r0
 801f76e:	f240 809f 	bls.w	801f8b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801f772:	b963      	cbnz	r3, 801f78e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801f774:	9b00      	ldr	r3, [sp, #0]
 801f776:	781a      	ldrb	r2, [r3, #0]
 801f778:	0993      	lsrs	r3, r2, #6
 801f77a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801f77e:	9202      	str	r2, [sp, #8]
 801f780:	1e5a      	subs	r2, r3, #1
 801f782:	2a02      	cmp	r2, #2
 801f784:	d815      	bhi.n	801f7b2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801f786:	9a00      	ldr	r2, [sp, #0]
 801f788:	b29b      	uxth	r3, r3
 801f78a:	3201      	adds	r2, #1
 801f78c:	9200      	str	r2, [sp, #0]
 801f78e:	b1b4      	cbz	r4, 801f7be <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801f790:	429c      	cmp	r4, r3
 801f792:	bf91      	iteee	ls
 801f794:	1b1c      	subls	r4, r3, r4
 801f796:	1ae4      	subhi	r4, r4, r3
 801f798:	4671      	movhi	r1, lr
 801f79a:	f04f 0a00 	movhi.w	sl, #0
 801f79e:	bf9b      	ittet	ls
 801f7a0:	fa1f fa84 	uxthls.w	sl, r4
 801f7a4:	2400      	movls	r4, #0
 801f7a6:	b2a4      	uxthhi	r4, r4
 801f7a8:	fa1f f188 	uxthls.w	r1, r8
 801f7ac:	4653      	mov	r3, sl
 801f7ae:	468e      	mov	lr, r1
 801f7b0:	e7db      	b.n	801f76a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801f7b2:	9a00      	ldr	r2, [sp, #0]
 801f7b4:	9b00      	ldr	r3, [sp, #0]
 801f7b6:	3202      	adds	r2, #2
 801f7b8:	785b      	ldrb	r3, [r3, #1]
 801f7ba:	9200      	str	r2, [sp, #0]
 801f7bc:	e7e7      	b.n	801f78e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801f7be:	2202      	movs	r2, #2
 801f7c0:	9907      	ldr	r1, [sp, #28]
 801f7c2:	4573      	cmp	r3, lr
 801f7c4:	4615      	mov	r5, r2
 801f7c6:	9a02      	ldr	r2, [sp, #8]
 801f7c8:	bf24      	itt	cs
 801f7ca:	eba3 0a0e 	subcs.w	sl, r3, lr
 801f7ce:	46f1      	movcs	r9, lr
 801f7d0:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f7d4:	9905      	ldr	r1, [sp, #20]
 801f7d6:	bf34      	ite	cc
 801f7d8:	4699      	movcc	r9, r3
 801f7da:	fa1f fa8a 	uxthcs.w	sl, sl
 801f7de:	f831 c002 	ldrh.w	ip, [r1, r2]
 801f7e2:	bf38      	it	cc
 801f7e4:	ebae 0103 	subcc.w	r1, lr, r3
 801f7e8:	9a01      	ldr	r2, [sp, #4]
 801f7ea:	bf2e      	itee	cs
 801f7ec:	4621      	movcs	r1, r4
 801f7ee:	b289      	uxthcc	r1, r1
 801f7f0:	46a2      	movcc	sl, r4
 801f7f2:	2aff      	cmp	r2, #255	; 0xff
 801f7f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f7f8:	d105      	bne.n	801f806 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801f7fa:	4481      	add	r9, r0
 801f7fc:	4581      	cmp	r9, r0
 801f7fe:	d045      	beq.n	801f88c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801f800:	f820 cb02 	strh.w	ip, [r0], #2
 801f804:	e7fa      	b.n	801f7fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801f806:	ea4f 222c 	mov.w	r2, ip, asr #8
 801f80a:	9d03      	ldr	r5, [sp, #12]
 801f80c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f810:	4481      	add	r9, r0
 801f812:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f816:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f81a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f81e:	fa5f fc8c 	uxtb.w	ip, ip
 801f822:	436a      	muls	r2, r5
 801f824:	fb0b fb05 	mul.w	fp, fp, r5
 801f828:	fb0c fc05 	mul.w	ip, ip, r5
 801f82c:	9208      	str	r2, [sp, #32]
 801f82e:	4581      	cmp	r9, r0
 801f830:	d02c      	beq.n	801f88c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801f832:	8802      	ldrh	r2, [r0, #0]
 801f834:	9d04      	ldr	r5, [sp, #16]
 801f836:	1216      	asrs	r6, r2, #8
 801f838:	9f04      	ldr	r7, [sp, #16]
 801f83a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f83e:	fb16 f605 	smulbb	r6, r6, r5
 801f842:	9d08      	ldr	r5, [sp, #32]
 801f844:	442e      	add	r6, r5
 801f846:	10d5      	asrs	r5, r2, #3
 801f848:	00d2      	lsls	r2, r2, #3
 801f84a:	b2b6      	uxth	r6, r6
 801f84c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f850:	b2d2      	uxtb	r2, r2
 801f852:	fb15 f507 	smulbb	r5, r5, r7
 801f856:	fb12 f207 	smulbb	r2, r2, r7
 801f85a:	1c77      	adds	r7, r6, #1
 801f85c:	445d      	add	r5, fp
 801f85e:	4462      	add	r2, ip
 801f860:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801f864:	b2ad      	uxth	r5, r5
 801f866:	b292      	uxth	r2, r2
 801f868:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f86c:	1c57      	adds	r7, r2, #1
 801f86e:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801f872:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f876:	4316      	orrs	r6, r2
 801f878:	1c6a      	adds	r2, r5, #1
 801f87a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801f87e:	096d      	lsrs	r5, r5, #5
 801f880:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f884:	432e      	orrs	r6, r5
 801f886:	f820 6b02 	strh.w	r6, [r0], #2
 801f88a:	e7d0      	b.n	801f82e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801f88c:	4573      	cmp	r3, lr
 801f88e:	d38d      	bcc.n	801f7ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801f890:	fa1f f188 	uxth.w	r1, r8
 801f894:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801f898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f89a:	1a64      	subs	r4, r4, r1
 801f89c:	881b      	ldrh	r3, [r3, #0]
 801f89e:	b2a4      	uxth	r4, r4
 801f8a0:	eba3 0308 	sub.w	r3, r3, r8
 801f8a4:	2c00      	cmp	r4, #0
 801f8a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f8aa:	bf18      	it	ne
 801f8ac:	2100      	movne	r1, #0
 801f8ae:	e77d      	b.n	801f7ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801f8b0:	4b03      	ldr	r3, [pc, #12]	; (801f8c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801f8b2:	6818      	ldr	r0, [r3, #0]
 801f8b4:	6803      	ldr	r3, [r0, #0]
 801f8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f8b8:	4798      	blx	r3
 801f8ba:	b00f      	add	sp, #60	; 0x3c
 801f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8c0:	20015120 	.word	0x20015120
 801f8c4:	2001511a 	.word	0x2001511a

0801f8c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801f8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8cc:	b09f      	sub	sp, #124	; 0x7c
 801f8ce:	461d      	mov	r5, r3
 801f8d0:	4604      	mov	r4, r0
 801f8d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f8d4:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801f8d8:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801f8dc:	9209      	str	r2, [sp, #36]	; 0x24
 801f8de:	2a00      	cmp	r2, #0
 801f8e0:	f000 81ed 	beq.w	801fcbe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801f8e4:	6828      	ldr	r0, [r5, #0]
 801f8e6:	aa1a      	add	r2, sp, #104	; 0x68
 801f8e8:	6869      	ldr	r1, [r5, #4]
 801f8ea:	c203      	stmia	r2!, {r0, r1}
 801f8ec:	6818      	ldr	r0, [r3, #0]
 801f8ee:	aa1c      	add	r2, sp, #112	; 0x70
 801f8f0:	6859      	ldr	r1, [r3, #4]
 801f8f2:	c203      	stmia	r2!, {r0, r1}
 801f8f4:	a81a      	add	r0, sp, #104	; 0x68
 801f8f6:	f7fa f961 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	a81c      	add	r0, sp, #112	; 0x70
 801f8fe:	f7fa f985 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f902:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801f906:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 801f90a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f90e:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 801f912:	bfdb      	ittet	le
 801f914:	b29a      	uxthle	r2, r3
 801f916:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801f91a:	2201      	movgt	r2, #1
 801f91c:	fb91 f2f2 	sdivle	r2, r1, r2
 801f920:	9202      	str	r2, [sp, #8]
 801f922:	9802      	ldr	r0, [sp, #8]
 801f924:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801f928:	9902      	ldr	r1, [sp, #8]
 801f92a:	fb92 f0f0 	sdiv	r0, r2, r0
 801f92e:	b280      	uxth	r0, r0
 801f930:	4488      	add	r8, r1
 801f932:	9010      	str	r0, [sp, #64]	; 0x40
 801f934:	f108 38ff 	add.w	r8, r8, #4294967295
 801f938:	9802      	ldr	r0, [sp, #8]
 801f93a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f93c:	fb05 2510 	mls	r5, r5, r0, r2
 801f940:	fb98 f8f1 	sdiv	r8, r8, r1
 801f944:	fb15 f503 	smulbb	r5, r5, r3
 801f948:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801f94c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801f950:	f108 0801 	add.w	r8, r8, #1
 801f954:	440d      	add	r5, r1
 801f956:	4419      	add	r1, r3
 801f958:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801f95c:	fa1f f888 	uxth.w	r8, r8
 801f960:	441a      	add	r2, r3
 801f962:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801f966:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801f96a:	b2ad      	uxth	r5, r5
 801f96c:	9304      	str	r3, [sp, #16]
 801f96e:	4b94      	ldr	r3, [pc, #592]	; (801fbc0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801f970:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801f974:	6818      	ldr	r0, [r3, #0]
 801f976:	6803      	ldr	r3, [r0, #0]
 801f978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f97a:	4798      	blx	r3
 801f97c:	4b91      	ldr	r3, [pc, #580]	; (801fbc4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801f97e:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801f982:	2d00      	cmp	r5, #0
 801f984:	881a      	ldrh	r2, [r3, #0]
 801f986:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801f98a:	fb02 f606 	mul.w	r6, r2, r6
 801f98e:	fb02 7101 	mla	r1, r2, r1, r7
 801f992:	9318      	str	r3, [sp, #96]	; 0x60
 801f994:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f998:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801f99c:	f04f 0100 	mov.w	r1, #0
 801f9a0:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801f9a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801f9a6:	4b88      	ldr	r3, [pc, #544]	; (801fbc8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801f9a8:	920a      	str	r2, [sp, #40]	; 0x28
 801f9aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f9ac:	eba3 0304 	sub.w	r3, r3, r4
 801f9b0:	910d      	str	r1, [sp, #52]	; 0x34
 801f9b2:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801f9b6:	9319      	str	r3, [sp, #100]	; 0x64
 801f9b8:	f108 0204 	add.w	r2, r8, #4
 801f9bc:	9211      	str	r2, [sp, #68]	; 0x44
 801f9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9c0:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f9c4:	9215      	str	r2, [sp, #84]	; 0x54
 801f9c6:	9a04      	ldr	r2, [sp, #16]
 801f9c8:	bf18      	it	ne
 801f9ca:	2200      	movne	r2, #0
 801f9cc:	b292      	uxth	r2, r2
 801f9ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f9d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9d2:	fa11 f383 	uxtah	r3, r1, r3
 801f9d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f9d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f9dc:	3304      	adds	r3, #4
 801f9de:	9306      	str	r3, [sp, #24]
 801f9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9e2:	4283      	cmp	r3, r0
 801f9e4:	f240 8166 	bls.w	801fcb4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801f9e8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801f9ec:	f04f 0a01 	mov.w	sl, #1
 801f9f0:	9902      	ldr	r1, [sp, #8]
 801f9f2:	9e06      	ldr	r6, [sp, #24]
 801f9f4:	46d3      	mov	fp, sl
 801f9f6:	4657      	mov	r7, sl
 801f9f8:	7836      	ldrb	r6, [r6, #0]
 801f9fa:	fbb5 f3f3 	udiv	r3, r5, r3
 801f9fe:	1acb      	subs	r3, r1, r3
 801fa00:	9612      	str	r6, [sp, #72]	; 0x48
 801fa02:	3601      	adds	r6, #1
 801fa04:	b29b      	uxth	r3, r3
 801fa06:	9605      	str	r6, [sp, #20]
 801fa08:	9316      	str	r3, [sp, #88]	; 0x58
 801fa0a:	9b06      	ldr	r3, [sp, #24]
 801fa0c:	7859      	ldrb	r1, [r3, #1]
 801fa0e:	789b      	ldrb	r3, [r3, #2]
 801fa10:	021b      	lsls	r3, r3, #8
 801fa12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801fa16:	9906      	ldr	r1, [sp, #24]
 801fa18:	78c9      	ldrb	r1, [r1, #3]
 801fa1a:	430b      	orrs	r3, r1
 801fa1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fa1e:	4419      	add	r1, r3
 801fa20:	1c4e      	adds	r6, r1, #1
 801fa22:	7849      	ldrb	r1, [r1, #1]
 801fa24:	9603      	str	r6, [sp, #12]
 801fa26:	0209      	lsls	r1, r1, #8
 801fa28:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fa2a:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801fa2e:	5cf3      	ldrb	r3, [r6, r3]
 801fa30:	4319      	orrs	r1, r3
 801fa32:	b28b      	uxth	r3, r1
 801fa34:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801fa38:	930c      	str	r3, [sp, #48]	; 0x30
 801fa3a:	2300      	movs	r3, #0
 801fa3c:	9307      	str	r3, [sp, #28]
 801fa3e:	469c      	mov	ip, r3
 801fa40:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801fa44:	930e      	str	r3, [sp, #56]	; 0x38
 801fa46:	2d00      	cmp	r5, #0
 801fa48:	d07e      	beq.n	801fb48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801fa4a:	42af      	cmp	r7, r5
 801fa4c:	d26e      	bcs.n	801fb2c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801fa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa50:	1bed      	subs	r5, r5, r7
 801fa52:	9201      	str	r2, [sp, #4]
 801fa54:	4283      	cmp	r3, r0
 801fa56:	b2ad      	uxth	r5, r5
 801fa58:	d802      	bhi.n	801fa60 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801fa5a:	e073      	b.n	801fb44 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	d15f      	bne.n	801fb20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801fa60:	9b03      	ldr	r3, [sp, #12]
 801fa62:	f1cb 0207 	rsb	r2, fp, #7
 801fa66:	785b      	ldrb	r3, [r3, #1]
 801fa68:	4093      	lsls	r3, r2
 801fa6a:	005b      	lsls	r3, r3, #1
 801fa6c:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801fa70:	9b03      	ldr	r3, [sp, #12]
 801fa72:	781b      	ldrb	r3, [r3, #0]
 801fa74:	fa43 f30b 	asr.w	r3, r3, fp
 801fa78:	b2db      	uxtb	r3, r3
 801fa7a:	4313      	orrs	r3, r2
 801fa7c:	f10b 0201 	add.w	r2, fp, #1
 801fa80:	fa5f fb82 	uxtb.w	fp, r2
 801fa84:	9a03      	ldr	r2, [sp, #12]
 801fa86:	b29f      	uxth	r7, r3
 801fa88:	f1bb 0f08 	cmp.w	fp, #8
 801fa8c:	bf13      	iteet	ne
 801fa8e:	3201      	addne	r2, #1
 801fa90:	3202      	addeq	r2, #2
 801fa92:	f04f 0b00 	moveq.w	fp, #0
 801fa96:	9203      	strne	r2, [sp, #12]
 801fa98:	bf08      	it	eq
 801fa9a:	9203      	streq	r2, [sp, #12]
 801fa9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa9e:	42ba      	cmp	r2, r7
 801faa0:	d309      	bcc.n	801fab6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801faa2:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801faa6:	2301      	movs	r3, #1
 801faa8:	9a05      	ldr	r2, [sp, #20]
 801faaa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801faae:	d30e      	bcc.n	801face <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801fab0:	469a      	mov	sl, r3
 801fab2:	2600      	movs	r6, #0
 801fab4:	e035      	b.n	801fb22 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801fab6:	9b05      	ldr	r3, [sp, #20]
 801fab8:	429f      	cmp	r7, r3
 801faba:	d318      	bcc.n	801faee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801fabc:	eb04 030a 	add.w	r3, r4, sl
 801fac0:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801fac4:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801fac8:	f10a 0301 	add.w	r3, sl, #1
 801facc:	b29b      	uxth	r3, r3
 801face:	9a05      	ldr	r2, [sp, #20]
 801fad0:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801fad4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fad8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fada:	7116      	strb	r6, [r2, #4]
 801fadc:	f10a 0601 	add.w	r6, sl, #1
 801fae0:	80d1      	strh	r1, [r2, #6]
 801fae2:	7156      	strb	r6, [r2, #5]
 801fae4:	9a05      	ldr	r2, [sp, #20]
 801fae6:	3201      	adds	r2, #1
 801fae8:	b292      	uxth	r2, r2
 801faea:	9205      	str	r2, [sp, #20]
 801faec:	e7e0      	b.n	801fab0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801faee:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801faf2:	463a      	mov	r2, r7
 801faf4:	795b      	ldrb	r3, [r3, #5]
 801faf6:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801fafa:	4426      	add	r6, r4
 801fafc:	9919      	ldr	r1, [sp, #100]	; 0x64
 801fafe:	eb01 0c06 	add.w	ip, r1, r6
 801fb02:	f1bc 0f00 	cmp.w	ip, #0
 801fb06:	dd07      	ble.n	801fb18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801fb08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fb0c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801fb10:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801fb14:	88d2      	ldrh	r2, [r2, #6]
 801fb16:	e7f1      	b.n	801fafc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801fb18:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801fb1c:	b29b      	uxth	r3, r3
 801fb1e:	e7c3      	b.n	801faa8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801fb20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fb22:	970c      	str	r7, [sp, #48]	; 0x30
 801fb24:	46b4      	mov	ip, r6
 801fb26:	9a01      	ldr	r2, [sp, #4]
 801fb28:	461f      	mov	r7, r3
 801fb2a:	e78c      	b.n	801fa46 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801fb2c:	1b7b      	subs	r3, r7, r5
 801fb2e:	eb0c 0605 	add.w	r6, ip, r5
 801fb32:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801fb36:	b29b      	uxth	r3, r3
 801fb38:	b2b6      	uxth	r6, r6
 801fb3a:	9201      	str	r2, [sp, #4]
 801fb3c:	2500      	movs	r5, #0
 801fb3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb40:	4282      	cmp	r2, r0
 801fb42:	d88b      	bhi.n	801fa5c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801fb44:	9a01      	ldr	r2, [sp, #4]
 801fb46:	e74b      	b.n	801f9e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801fb48:	4297      	cmp	r7, r2
 801fb4a:	d332      	bcc.n	801fbb2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801fb4c:	1abb      	subs	r3, r7, r2
 801fb4e:	9208      	str	r2, [sp, #32]
 801fb50:	9501      	str	r5, [sp, #4]
 801fb52:	b29b      	uxth	r3, r3
 801fb54:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fb56:	29ff      	cmp	r1, #255	; 0xff
 801fb58:	9908      	ldr	r1, [sp, #32]
 801fb5a:	eb0c 0601 	add.w	r6, ip, r1
 801fb5e:	d135      	bne.n	801fbcc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801fb60:	f1a0 0e02 	sub.w	lr, r0, #2
 801fb64:	b2b6      	uxth	r6, r6
 801fb66:	45b4      	cmp	ip, r6
 801fb68:	f040 808c 	bne.w	801fc84 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801fb6c:	9908      	ldr	r1, [sp, #32]
 801fb6e:	4297      	cmp	r7, r2
 801fb70:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801fb74:	d3e2      	bcc.n	801fb3c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801fb76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fb78:	9904      	ldr	r1, [sp, #16]
 801fb7a:	8812      	ldrh	r2, [r2, #0]
 801fb7c:	1a52      	subs	r2, r2, r1
 801fb7e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fb80:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fb84:	9a07      	ldr	r2, [sp, #28]
 801fb86:	3201      	adds	r2, #1
 801fb88:	428a      	cmp	r2, r1
 801fb8a:	9207      	str	r2, [sp, #28]
 801fb8c:	f040 8087 	bne.w	801fc9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801fb90:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801fb94:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 801fb98:	9b04      	ldr	r3, [sp, #16]
 801fb9a:	1bed      	subs	r5, r5, r7
 801fb9c:	b2ad      	uxth	r5, r5
 801fb9e:	2d00      	cmp	r5, #0
 801fba0:	bf08      	it	eq
 801fba2:	461a      	moveq	r2, r3
 801fba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fba6:	bf18      	it	ne
 801fba8:	2200      	movne	r2, #0
 801fbaa:	3301      	adds	r3, #1
 801fbac:	b292      	uxth	r2, r2
 801fbae:	930d      	str	r3, [sp, #52]	; 0x34
 801fbb0:	e70d      	b.n	801f9ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801fbb2:	1bd1      	subs	r1, r2, r7
 801fbb4:	9708      	str	r7, [sp, #32]
 801fbb6:	b28b      	uxth	r3, r1
 801fbb8:	9301      	str	r3, [sp, #4]
 801fbba:	462b      	mov	r3, r5
 801fbbc:	e7ca      	b.n	801fb54 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801fbbe:	bf00      	nop
 801fbc0:	20015120 	.word	0x20015120
 801fbc4:	2001511a 	.word	0x2001511a
 801fbc8:	fffff7fb 	.word	0xfffff7fb
 801fbcc:	b2b6      	uxth	r6, r6
 801fbce:	900b      	str	r0, [sp, #44]	; 0x2c
 801fbd0:	45b4      	cmp	ip, r6
 801fbd2:	d0cb      	beq.n	801fb6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801fbd4:	f10c 0101 	add.w	r1, ip, #1
 801fbd8:	44a4      	add	ip, r4
 801fbda:	9117      	str	r1, [sp, #92]	; 0x5c
 801fbdc:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801fbe0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fbe2:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801fbe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fbe8:	ea4f 2825 	mov.w	r8, r5, asr #8
 801fbec:	f8b1 c000 	ldrh.w	ip, [r1]
 801fbf0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fbf2:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801fbf6:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801fbfa:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801fbfe:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fc02:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fc06:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fc0a:	fb1e fe01 	smulbb	lr, lr, r1
 801fc0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fc10:	fa5f fc8c 	uxtb.w	ip, ip
 801fc14:	fb08 e801 	mla	r8, r8, r1, lr
 801fc18:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801fc1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fc1e:	00ed      	lsls	r5, r5, #3
 801fc20:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fc24:	fa1f f888 	uxth.w	r8, r8
 801fc28:	fb19 f901 	smulbb	r9, r9, r1
 801fc2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fc2e:	b2ed      	uxtb	r5, r5
 801fc30:	fb0e 9e01 	mla	lr, lr, r1, r9
 801fc34:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fc36:	fb1c fc01 	smulbb	ip, ip, r1
 801fc3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fc3c:	fa1f fe8e 	uxth.w	lr, lr
 801fc40:	fb05 c501 	mla	r5, r5, r1, ip
 801fc44:	f108 0c01 	add.w	ip, r8, #1
 801fc48:	f10e 0901 	add.w	r9, lr, #1
 801fc4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fc4e:	b2ad      	uxth	r5, r5
 801fc50:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801fc54:	f105 0c01 	add.w	ip, r5, #1
 801fc58:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801fc5c:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801fc60:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801fc64:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fc68:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fc6c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fc70:	ea4c 0808 	orr.w	r8, ip, r8
 801fc74:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 801fc78:	ea48 0809 	orr.w	r8, r8, r9
 801fc7c:	f821 8b02 	strh.w	r8, [r1], #2
 801fc80:	910b      	str	r1, [sp, #44]	; 0x2c
 801fc82:	e7a5      	b.n	801fbd0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801fc84:	f10c 0801 	add.w	r8, ip, #1
 801fc88:	44a4      	add	ip, r4
 801fc8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fc8c:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801fc90:	fa1f fc88 	uxth.w	ip, r8
 801fc94:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801fc98:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801fc9c:	e763      	b.n	801fb66 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801fc9e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801fca2:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801fca6:	1aad      	subs	r5, r5, r2
 801fca8:	b2ad      	uxth	r5, r5
 801fcaa:	2d00      	cmp	r5, #0
 801fcac:	bf18      	it	ne
 801fcae:	2200      	movne	r2, #0
 801fcb0:	9201      	str	r2, [sp, #4]
 801fcb2:	e744      	b.n	801fb3e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801fcb4:	4b03      	ldr	r3, [pc, #12]	; (801fcc4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801fcb6:	6818      	ldr	r0, [r3, #0]
 801fcb8:	6803      	ldr	r3, [r0, #0]
 801fcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fcbc:	4798      	blx	r3
 801fcbe:	b01f      	add	sp, #124	; 0x7c
 801fcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcc4:	20015120 	.word	0x20015120

0801fcc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fccc:	b08f      	sub	sp, #60	; 0x3c
 801fcce:	461c      	mov	r4, r3
 801fcd0:	460f      	mov	r7, r1
 801fcd2:	9203      	str	r2, [sp, #12]
 801fcd4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fcd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fcda:	9202      	str	r2, [sp, #8]
 801fcdc:	2a00      	cmp	r2, #0
 801fcde:	f000 8128 	beq.w	801ff32 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801fce2:	6820      	ldr	r0, [r4, #0]
 801fce4:	aa0a      	add	r2, sp, #40	; 0x28
 801fce6:	6861      	ldr	r1, [r4, #4]
 801fce8:	c203      	stmia	r2!, {r0, r1}
 801fcea:	6818      	ldr	r0, [r3, #0]
 801fcec:	aa0c      	add	r2, sp, #48	; 0x30
 801fcee:	6859      	ldr	r1, [r3, #4]
 801fcf0:	c203      	stmia	r2!, {r0, r1}
 801fcf2:	a80a      	add	r0, sp, #40	; 0x28
 801fcf4:	f7f9 ff62 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fcf8:	4621      	mov	r1, r4
 801fcfa:	a80c      	add	r0, sp, #48	; 0x30
 801fcfc:	f7f9 ff86 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fd00:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801fd04:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801fd08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fd0c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801fd10:	bfdb      	ittet	le
 801fd12:	b2b3      	uxthle	r3, r6
 801fd14:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801fd18:	2301      	movgt	r3, #1
 801fd1a:	fb92 f3f3 	sdivle	r3, r2, r3
 801fd1e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801fd22:	441d      	add	r5, r3
 801fd24:	fb92 f1f3 	sdiv	r1, r2, r3
 801fd28:	fa1f fc81 	uxth.w	ip, r1
 801fd2c:	3d01      	subs	r5, #1
 801fd2e:	fb0c 2413 	mls	r4, ip, r3, r2
 801fd32:	4661      	mov	r1, ip
 801fd34:	fb14 f406 	smulbb	r4, r4, r6
 801fd38:	4404      	add	r4, r0
 801fd3a:	fb95 f5f3 	sdiv	r5, r5, r3
 801fd3e:	b2a4      	uxth	r4, r4
 801fd40:	b121      	cbz	r1, 801fd4c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801fd42:	9b03      	ldr	r3, [sp, #12]
 801fd44:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fd48:	ba1b      	rev	r3, r3
 801fd4a:	441f      	add	r7, r3
 801fd4c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801fd50:	b2ad      	uxth	r5, r5
 801fd52:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801fd56:	4418      	add	r0, r3
 801fd58:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801fd5c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801fd60:	00ad      	lsls	r5, r5, #2
 801fd62:	441a      	add	r2, r3
 801fd64:	4b74      	ldr	r3, [pc, #464]	; (801ff38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801fd66:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801fd6a:	6818      	ldr	r0, [r3, #0]
 801fd6c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801fd70:	6803      	ldr	r3, [r0, #0]
 801fd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd74:	4798      	blx	r3
 801fd76:	4a71      	ldr	r2, [pc, #452]	; (801ff3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801fd78:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801fd7c:	2c00      	cmp	r4, #0
 801fd7e:	8813      	ldrh	r3, [r2, #0]
 801fd80:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801fd84:	bf0c      	ite	eq
 801fd86:	46c8      	moveq	r8, r9
 801fd88:	f04f 0800 	movne.w	r8, #0
 801fd8c:	9209      	str	r2, [sp, #36]	; 0x24
 801fd8e:	fb03 c101 	mla	r1, r3, r1, ip
 801fd92:	4373      	muls	r3, r6
 801fd94:	fa1f f888 	uxth.w	r8, r8
 801fd98:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801fd9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fda0:	9304      	str	r3, [sp, #16]
 801fda2:	1d2b      	adds	r3, r5, #4
 801fda4:	9305      	str	r3, [sp, #20]
 801fda6:	2300      	movs	r3, #0
 801fda8:	9301      	str	r3, [sp, #4]
 801fdaa:	9a04      	ldr	r2, [sp, #16]
 801fdac:	4282      	cmp	r2, r0
 801fdae:	f240 80bb 	bls.w	801ff28 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801fdb2:	b95b      	cbnz	r3, 801fdcc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801fdb4:	783a      	ldrb	r2, [r7, #0]
 801fdb6:	0993      	lsrs	r3, r2, #6
 801fdb8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801fdbc:	9201      	str	r2, [sp, #4]
 801fdbe:	1e5a      	subs	r2, r3, #1
 801fdc0:	2a02      	cmp	r2, #2
 801fdc2:	bf8d      	iteet	hi
 801fdc4:	787b      	ldrbhi	r3, [r7, #1]
 801fdc6:	3701      	addls	r7, #1
 801fdc8:	b29b      	uxthls	r3, r3
 801fdca:	3702      	addhi	r7, #2
 801fdcc:	b184      	cbz	r4, 801fdf0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801fdce:	429c      	cmp	r4, r3
 801fdd0:	bf91      	iteee	ls
 801fdd2:	1b1c      	subls	r4, r3, r4
 801fdd4:	1ae4      	subhi	r4, r4, r3
 801fdd6:	46c4      	movhi	ip, r8
 801fdd8:	f04f 0a00 	movhi.w	sl, #0
 801fddc:	bf9b      	ittet	ls
 801fdde:	fa1f fa84 	uxthls.w	sl, r4
 801fde2:	2400      	movls	r4, #0
 801fde4:	b2a4      	uxthhi	r4, r4
 801fde6:	fa1f fc89 	uxthls.w	ip, r9
 801fdea:	4653      	mov	r3, sl
 801fdec:	46e0      	mov	r8, ip
 801fdee:	e7dc      	b.n	801fdaa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801fdf0:	2204      	movs	r2, #4
 801fdf2:	9905      	ldr	r1, [sp, #20]
 801fdf4:	4543      	cmp	r3, r8
 801fdf6:	4615      	mov	r5, r2
 801fdf8:	9a01      	ldr	r2, [sp, #4]
 801fdfa:	bf24      	itt	cs
 801fdfc:	eba3 0a08 	subcs.w	sl, r3, r8
 801fe00:	46c6      	movcs	lr, r8
 801fe02:	fb15 1202 	smlabb	r2, r5, r2, r1
 801fe06:	9903      	ldr	r1, [sp, #12]
 801fe08:	bf3c      	itt	cc
 801fe0a:	eba8 0c03 	subcc.w	ip, r8, r3
 801fe0e:	469e      	movcc	lr, r3
 801fe10:	588a      	ldr	r2, [r1, r2]
 801fe12:	bf26      	itte	cs
 801fe14:	fa1f fa8a 	uxthcs.w	sl, sl
 801fe18:	46a4      	movcs	ip, r4
 801fe1a:	fa1f fc8c 	uxthcc.w	ip, ip
 801fe1e:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801fe22:	bf38      	it	cc
 801fe24:	46a2      	movcc	sl, r4
 801fe26:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801fe2a:	2900      	cmp	r1, #0
 801fe2c:	d066      	beq.n	801fefc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801fe2e:	29ff      	cmp	r1, #255	; 0xff
 801fe30:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801fe34:	d114      	bne.n	801fe60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801fe36:	9d02      	ldr	r5, [sp, #8]
 801fe38:	2dff      	cmp	r5, #255	; 0xff
 801fe3a:	d111      	bne.n	801fe60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801fe3c:	0951      	lsrs	r1, r2, #5
 801fe3e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fe42:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fe46:	4486      	add	lr, r0
 801fe48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fe4c:	f026 0607 	bic.w	r6, r6, #7
 801fe50:	430e      	orrs	r6, r1
 801fe52:	4316      	orrs	r6, r2
 801fe54:	b2b6      	uxth	r6, r6
 801fe56:	4586      	cmp	lr, r0
 801fe58:	d051      	beq.n	801fefe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801fe5a:	f820 6b02 	strh.w	r6, [r0], #2
 801fe5e:	e7fa      	b.n	801fe56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801fe60:	9d02      	ldr	r5, [sp, #8]
 801fe62:	b2f6      	uxtb	r6, r6
 801fe64:	4486      	add	lr, r0
 801fe66:	4369      	muls	r1, r5
 801fe68:	1c4d      	adds	r5, r1, #1
 801fe6a:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801fe6e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801fe72:	b2d2      	uxtb	r2, r2
 801fe74:	122d      	asrs	r5, r5, #8
 801fe76:	ea6f 0b05 	mvn.w	fp, r5
 801fe7a:	b2ad      	uxth	r5, r5
 801fe7c:	fb11 f105 	smulbb	r1, r1, r5
 801fe80:	fa5f fb8b 	uxtb.w	fp, fp
 801fe84:	fb16 f605 	smulbb	r6, r6, r5
 801fe88:	fb12 f205 	smulbb	r2, r2, r5
 801fe8c:	b289      	uxth	r1, r1
 801fe8e:	b2b6      	uxth	r6, r6
 801fe90:	b292      	uxth	r2, r2
 801fe92:	9106      	str	r1, [sp, #24]
 801fe94:	9607      	str	r6, [sp, #28]
 801fe96:	9208      	str	r2, [sp, #32]
 801fe98:	4586      	cmp	lr, r0
 801fe9a:	d030      	beq.n	801fefe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801fe9c:	8802      	ldrh	r2, [r0, #0]
 801fe9e:	9906      	ldr	r1, [sp, #24]
 801fea0:	1216      	asrs	r6, r2, #8
 801fea2:	10d5      	asrs	r5, r2, #3
 801fea4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fea8:	00d2      	lsls	r2, r2, #3
 801feaa:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801feae:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801feb2:	b2d2      	uxtb	r2, r2
 801feb4:	fb06 160b 	mla	r6, r6, fp, r1
 801feb8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801febc:	9907      	ldr	r1, [sp, #28]
 801febe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fec2:	b2b6      	uxth	r6, r6
 801fec4:	fb05 150b 	mla	r5, r5, fp, r1
 801fec8:	9908      	ldr	r1, [sp, #32]
 801feca:	fb02 120b 	mla	r2, r2, fp, r1
 801fece:	1c71      	adds	r1, r6, #1
 801fed0:	b2ad      	uxth	r5, r5
 801fed2:	b292      	uxth	r2, r2
 801fed4:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801fed8:	1c51      	adds	r1, r2, #1
 801feda:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fede:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fee2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fee6:	4316      	orrs	r6, r2
 801fee8:	1c6a      	adds	r2, r5, #1
 801feea:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801feee:	096d      	lsrs	r5, r5, #5
 801fef0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fef4:	432e      	orrs	r6, r5
 801fef6:	f820 6b02 	strh.w	r6, [r0], #2
 801fefa:	e7cd      	b.n	801fe98 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801fefc:	4470      	add	r0, lr
 801fefe:	4543      	cmp	r3, r8
 801ff00:	f4ff af73 	bcc.w	801fdea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801ff04:	fa1f fc89 	uxth.w	ip, r9
 801ff08:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801ff0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff0e:	eba4 040c 	sub.w	r4, r4, ip
 801ff12:	881b      	ldrh	r3, [r3, #0]
 801ff14:	b2a4      	uxth	r4, r4
 801ff16:	eba3 0309 	sub.w	r3, r3, r9
 801ff1a:	2c00      	cmp	r4, #0
 801ff1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ff20:	bf18      	it	ne
 801ff22:	f04f 0c00 	movne.w	ip, #0
 801ff26:	e760      	b.n	801fdea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801ff28:	4b03      	ldr	r3, [pc, #12]	; (801ff38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801ff2a:	6818      	ldr	r0, [r3, #0]
 801ff2c:	6803      	ldr	r3, [r0, #0]
 801ff2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff30:	4798      	blx	r3
 801ff32:	b00f      	add	sp, #60	; 0x3c
 801ff34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff38:	20015120 	.word	0x20015120
 801ff3c:	2001511a 	.word	0x2001511a

0801ff40 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff44:	b093      	sub	sp, #76	; 0x4c
 801ff46:	461c      	mov	r4, r3
 801ff48:	9205      	str	r2, [sp, #20]
 801ff4a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801ff4e:	9101      	str	r1, [sp, #4]
 801ff50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff52:	9202      	str	r2, [sp, #8]
 801ff54:	2a00      	cmp	r2, #0
 801ff56:	f000 812e 	beq.w	80201b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801ff5a:	6820      	ldr	r0, [r4, #0]
 801ff5c:	aa0e      	add	r2, sp, #56	; 0x38
 801ff5e:	6861      	ldr	r1, [r4, #4]
 801ff60:	c203      	stmia	r2!, {r0, r1}
 801ff62:	6818      	ldr	r0, [r3, #0]
 801ff64:	aa10      	add	r2, sp, #64	; 0x40
 801ff66:	6859      	ldr	r1, [r3, #4]
 801ff68:	c203      	stmia	r2!, {r0, r1}
 801ff6a:	a80e      	add	r0, sp, #56	; 0x38
 801ff6c:	f7f9 fe26 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff70:	4621      	mov	r1, r4
 801ff72:	a810      	add	r0, sp, #64	; 0x40
 801ff74:	f7f9 fe4a 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff78:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801ff7c:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801ff80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ff84:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801ff88:	bfdb      	ittet	le
 801ff8a:	b2b3      	uxthle	r3, r6
 801ff8c:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801ff90:	2301      	movgt	r3, #1
 801ff92:	fb92 f3f3 	sdivle	r3, r2, r3
 801ff96:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ff9a:	441d      	add	r5, r3
 801ff9c:	fb92 f1f3 	sdiv	r1, r2, r3
 801ffa0:	fa1f fc81 	uxth.w	ip, r1
 801ffa4:	3d01      	subs	r5, #1
 801ffa6:	fb0c 2413 	mls	r4, ip, r3, r2
 801ffaa:	4661      	mov	r1, ip
 801ffac:	fb14 f406 	smulbb	r4, r4, r6
 801ffb0:	4404      	add	r4, r0
 801ffb2:	fb95 f5f3 	sdiv	r5, r5, r3
 801ffb6:	b2a4      	uxth	r4, r4
 801ffb8:	b131      	cbz	r1, 801ffc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801ffba:	9b05      	ldr	r3, [sp, #20]
 801ffbc:	9901      	ldr	r1, [sp, #4]
 801ffbe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ffc2:	ba1b      	rev	r3, r3
 801ffc4:	4419      	add	r1, r3
 801ffc6:	9101      	str	r1, [sp, #4]
 801ffc8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ffcc:	b2ad      	uxth	r5, r5
 801ffce:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ffd2:	4418      	add	r0, r3
 801ffd4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ffd8:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 801ffdc:	00ad      	lsls	r5, r5, #2
 801ffde:	441a      	add	r2, r3
 801ffe0:	4b76      	ldr	r3, [pc, #472]	; (80201bc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801ffe2:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801ffe6:	6818      	ldr	r0, [r3, #0]
 801ffe8:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801ffec:	6803      	ldr	r3, [r0, #0]
 801ffee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fff0:	4798      	blx	r3
 801fff2:	4973      	ldr	r1, [pc, #460]	; (80201c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801fff4:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 801fff8:	2c00      	cmp	r4, #0
 801fffa:	880b      	ldrh	r3, [r1, #0]
 801fffc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8020000:	910d      	str	r1, [sp, #52]	; 0x34
 8020002:	fb03 c202 	mla	r2, r3, r2, ip
 8020006:	bf08      	it	eq
 8020008:	46dc      	moveq	ip, fp
 802000a:	fb03 f306 	mul.w	r3, r3, r6
 802000e:	bf18      	it	ne
 8020010:	f04f 0c00 	movne.w	ip, #0
 8020014:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020018:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802001c:	fa1f fc8c 	uxth.w	ip, ip
 8020020:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020024:	9106      	str	r1, [sp, #24]
 8020026:	9308      	str	r3, [sp, #32]
 8020028:	1d2b      	adds	r3, r5, #4
 802002a:	9309      	str	r3, [sp, #36]	; 0x24
 802002c:	9b02      	ldr	r3, [sp, #8]
 802002e:	43da      	mvns	r2, r3
 8020030:	2300      	movs	r3, #0
 8020032:	b2d2      	uxtb	r2, r2
 8020034:	9303      	str	r3, [sp, #12]
 8020036:	9207      	str	r2, [sp, #28]
 8020038:	9a08      	ldr	r2, [sp, #32]
 802003a:	4282      	cmp	r2, r0
 802003c:	f240 80b6 	bls.w	80201ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8020040:	b963      	cbnz	r3, 802005c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8020042:	9b01      	ldr	r3, [sp, #4]
 8020044:	781a      	ldrb	r2, [r3, #0]
 8020046:	0993      	lsrs	r3, r2, #6
 8020048:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 802004c:	9203      	str	r2, [sp, #12]
 802004e:	1e5a      	subs	r2, r3, #1
 8020050:	2a02      	cmp	r2, #2
 8020052:	d815      	bhi.n	8020080 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 8020054:	9a01      	ldr	r2, [sp, #4]
 8020056:	b29b      	uxth	r3, r3
 8020058:	3201      	adds	r2, #1
 802005a:	9201      	str	r2, [sp, #4]
 802005c:	b1b4      	cbz	r4, 802008c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 802005e:	429c      	cmp	r4, r3
 8020060:	bf91      	iteee	ls
 8020062:	1b1c      	subls	r4, r3, r4
 8020064:	1ae4      	subhi	r4, r4, r3
 8020066:	4666      	movhi	r6, ip
 8020068:	f04f 0800 	movhi.w	r8, #0
 802006c:	bf9b      	ittet	ls
 802006e:	fa1f f884 	uxthls.w	r8, r4
 8020072:	2400      	movls	r4, #0
 8020074:	b2a4      	uxthhi	r4, r4
 8020076:	fa1f f68b 	uxthls.w	r6, fp
 802007a:	4643      	mov	r3, r8
 802007c:	46b4      	mov	ip, r6
 802007e:	e7db      	b.n	8020038 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 8020080:	9a01      	ldr	r2, [sp, #4]
 8020082:	9b01      	ldr	r3, [sp, #4]
 8020084:	3202      	adds	r2, #2
 8020086:	785b      	ldrb	r3, [r3, #1]
 8020088:	9201      	str	r2, [sp, #4]
 802008a:	e7e7      	b.n	802005c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 802008c:	2203      	movs	r2, #3
 802008e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020090:	4563      	cmp	r3, ip
 8020092:	4615      	mov	r5, r2
 8020094:	9a03      	ldr	r2, [sp, #12]
 8020096:	bf2c      	ite	cs
 8020098:	eba3 080c 	subcs.w	r8, r3, ip
 802009c:	ebac 0603 	subcc.w	r6, ip, r3
 80200a0:	fb15 1202 	smlabb	r2, r5, r2, r1
 80200a4:	9905      	ldr	r1, [sp, #20]
 80200a6:	bf24      	itt	cs
 80200a8:	fa1f f888 	uxthcs.w	r8, r8
 80200ac:	46e1      	movcs	r9, ip
 80200ae:	eb01 0502 	add.w	r5, r1, r2
 80200b2:	9902      	ldr	r1, [sp, #8]
 80200b4:	bf2f      	iteee	cs
 80200b6:	4626      	movcs	r6, r4
 80200b8:	b2b6      	uxthcc	r6, r6
 80200ba:	4699      	movcc	r9, r3
 80200bc:	46a0      	movcc	r8, r4
 80200be:	29ff      	cmp	r1, #255	; 0xff
 80200c0:	d04a      	beq.n	8020158 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 80200c2:	9f06      	ldr	r7, [sp, #24]
 80200c4:	46ca      	mov	sl, r9
 80200c6:	78a9      	ldrb	r1, [r5, #2]
 80200c8:	9004      	str	r0, [sp, #16]
 80200ca:	4379      	muls	r1, r7
 80200cc:	910a      	str	r1, [sp, #40]	; 0x28
 80200ce:	7869      	ldrb	r1, [r5, #1]
 80200d0:	4379      	muls	r1, r7
 80200d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80200d4:	9905      	ldr	r1, [sp, #20]
 80200d6:	5c8a      	ldrb	r2, [r1, r2]
 80200d8:	437a      	muls	r2, r7
 80200da:	920c      	str	r2, [sp, #48]	; 0x30
 80200dc:	f1ba 0f00 	cmp.w	sl, #0
 80200e0:	d03d      	beq.n	802015e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 80200e2:	9a04      	ldr	r2, [sp, #16]
 80200e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200e8:	9f07      	ldr	r7, [sp, #28]
 80200ea:	8812      	ldrh	r2, [r2, #0]
 80200ec:	fa1f fa8a 	uxth.w	sl, sl
 80200f0:	46be      	mov	lr, r7
 80200f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80200f4:	1215      	asrs	r5, r2, #8
 80200f6:	10d1      	asrs	r1, r2, #3
 80200f8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80200fc:	00d2      	lsls	r2, r2, #3
 80200fe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020102:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020106:	b2d2      	uxtb	r2, r2
 8020108:	fb05 750e 	mla	r5, r5, lr, r7
 802010c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8020110:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020112:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020116:	b2ad      	uxth	r5, r5
 8020118:	fb01 710e 	mla	r1, r1, lr, r7
 802011c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802011e:	fb02 720e 	mla	r2, r2, lr, r7
 8020122:	f105 0e01 	add.w	lr, r5, #1
 8020126:	b289      	uxth	r1, r1
 8020128:	b292      	uxth	r2, r2
 802012a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802012e:	f102 0e01 	add.w	lr, r2, #1
 8020132:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020136:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802013a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802013e:	4315      	orrs	r5, r2
 8020140:	1c4a      	adds	r2, r1, #1
 8020142:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020146:	9a04      	ldr	r2, [sp, #16]
 8020148:	0949      	lsrs	r1, r1, #5
 802014a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802014e:	430d      	orrs	r5, r1
 8020150:	f822 5b02 	strh.w	r5, [r2], #2
 8020154:	9204      	str	r2, [sp, #16]
 8020156:	e7c1      	b.n	80200dc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020158:	4649      	mov	r1, r9
 802015a:	4686      	mov	lr, r0
 802015c:	b999      	cbnz	r1, 8020186 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 802015e:	4563      	cmp	r3, ip
 8020160:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8020164:	d389      	bcc.n	802007a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 8020166:	fa1f f68b 	uxth.w	r6, fp
 802016a:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 802016e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020170:	1ba4      	subs	r4, r4, r6
 8020172:	881b      	ldrh	r3, [r3, #0]
 8020174:	b2a4      	uxth	r4, r4
 8020176:	eba3 030b 	sub.w	r3, r3, fp
 802017a:	2c00      	cmp	r4, #0
 802017c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020180:	bf18      	it	ne
 8020182:	2600      	movne	r6, #0
 8020184:	e779      	b.n	802007a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 8020186:	78aa      	ldrb	r2, [r5, #2]
 8020188:	3901      	subs	r1, #1
 802018a:	4f0e      	ldr	r7, [pc, #56]	; (80201c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 802018c:	b289      	uxth	r1, r1
 802018e:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8020192:	786a      	ldrb	r2, [r5, #1]
 8020194:	00d2      	lsls	r2, r2, #3
 8020196:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802019a:	ea4a 0202 	orr.w	r2, sl, r2
 802019e:	f895 a000 	ldrb.w	sl, [r5]
 80201a2:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 80201a6:	f82e 2b02 	strh.w	r2, [lr], #2
 80201aa:	e7d7      	b.n	802015c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 80201ac:	4b03      	ldr	r3, [pc, #12]	; (80201bc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80201ae:	6818      	ldr	r0, [r3, #0]
 80201b0:	6803      	ldr	r3, [r0, #0]
 80201b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80201b4:	4798      	blx	r3
 80201b6:	b013      	add	sp, #76	; 0x4c
 80201b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201bc:	20015120 	.word	0x20015120
 80201c0:	2001511a 	.word	0x2001511a
 80201c4:	fffff800 	.word	0xfffff800

080201c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80201c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201cc:	b09d      	sub	sp, #116	; 0x74
 80201ce:	461c      	mov	r4, r3
 80201d0:	4683      	mov	fp, r0
 80201d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80201d4:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 80201d8:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 80201dc:	920e      	str	r2, [sp, #56]	; 0x38
 80201de:	2a00      	cmp	r2, #0
 80201e0:	f000 81e4 	beq.w	80205ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 80201e4:	6820      	ldr	r0, [r4, #0]
 80201e6:	aa18      	add	r2, sp, #96	; 0x60
 80201e8:	6861      	ldr	r1, [r4, #4]
 80201ea:	c203      	stmia	r2!, {r0, r1}
 80201ec:	6818      	ldr	r0, [r3, #0]
 80201ee:	aa1a      	add	r2, sp, #104	; 0x68
 80201f0:	6859      	ldr	r1, [r3, #4]
 80201f2:	c203      	stmia	r2!, {r0, r1}
 80201f4:	a818      	add	r0, sp, #96	; 0x60
 80201f6:	f7f9 fce1 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201fa:	4621      	mov	r1, r4
 80201fc:	a81a      	add	r0, sp, #104	; 0x68
 80201fe:	f7f9 fd05 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020202:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8020206:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 802020a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802020e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 8020212:	bfdb      	ittet	le
 8020214:	b29a      	uxthle	r2, r3
 8020216:	f44f 6180 	movle.w	r1, #1024	; 0x400
 802021a:	2201      	movgt	r2, #1
 802021c:	fb91 f2f2 	sdivle	r2, r1, r2
 8020220:	9202      	str	r2, [sp, #8]
 8020222:	9802      	ldr	r0, [sp, #8]
 8020224:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8020228:	9902      	ldr	r1, [sp, #8]
 802022a:	fb92 f0f0 	sdiv	r0, r2, r0
 802022e:	b280      	uxth	r0, r0
 8020230:	440c      	add	r4, r1
 8020232:	900f      	str	r0, [sp, #60]	; 0x3c
 8020234:	3c01      	subs	r4, #1
 8020236:	9802      	ldr	r0, [sp, #8]
 8020238:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802023a:	fb05 2510 	mls	r5, r5, r0, r2
 802023e:	fb94 f4f1 	sdiv	r4, r4, r1
 8020242:	fb15 f503 	smulbb	r5, r5, r3
 8020246:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 802024a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 802024e:	3401      	adds	r4, #1
 8020250:	440d      	add	r5, r1
 8020252:	4419      	add	r1, r3
 8020254:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8020258:	b2a4      	uxth	r4, r4
 802025a:	441a      	add	r2, r3
 802025c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8020260:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 8020264:	00a4      	lsls	r4, r4, #2
 8020266:	9306      	str	r3, [sp, #24]
 8020268:	b2ad      	uxth	r5, r5
 802026a:	4bb3      	ldr	r3, [pc, #716]	; (8020538 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 802026c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 8020270:	6818      	ldr	r0, [r3, #0]
 8020272:	6803      	ldr	r3, [r0, #0]
 8020274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020276:	4798      	blx	r3
 8020278:	4bb0      	ldr	r3, [pc, #704]	; (802053c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 802027a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 802027e:	2d00      	cmp	r5, #0
 8020280:	881a      	ldrh	r2, [r3, #0]
 8020282:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 8020286:	fb02 f606 	mul.w	r6, r2, r6
 802028a:	fb02 7101 	mla	r1, r2, r1, r7
 802028e:	9316      	str	r3, [sp, #88]	; 0x58
 8020290:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8020294:	4baa      	ldr	r3, [pc, #680]	; (8020540 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 8020296:	bf18      	it	ne
 8020298:	2100      	movne	r1, #0
 802029a:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 802029e:	eba3 030b 	sub.w	r3, r3, fp
 80202a2:	920a      	str	r2, [sp, #40]	; 0x28
 80202a4:	f104 0204 	add.w	r2, r4, #4
 80202a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80202aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80202ac:	9a06      	ldr	r2, [sp, #24]
 80202ae:	bf08      	it	eq
 80202b0:	4611      	moveq	r1, r2
 80202b2:	2200      	movs	r2, #0
 80202b4:	b289      	uxth	r1, r1
 80202b6:	920d      	str	r2, [sp, #52]	; 0x34
 80202b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80202ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202bc:	fa12 f383 	uxtah	r3, r2, r3
 80202c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80202c6:	3304      	adds	r3, #4
 80202c8:	9308      	str	r3, [sp, #32]
 80202ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202cc:	4543      	cmp	r3, r8
 80202ce:	f240 8168 	bls.w	80205a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 80202d2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80202d6:	f04f 0e01 	mov.w	lr, #1
 80202da:	9a02      	ldr	r2, [sp, #8]
 80202dc:	9808      	ldr	r0, [sp, #32]
 80202de:	fbb5 f3f3 	udiv	r3, r5, r3
 80202e2:	1ad3      	subs	r3, r2, r3
 80202e4:	7800      	ldrb	r0, [r0, #0]
 80202e6:	b29b      	uxth	r3, r3
 80202e8:	9010      	str	r0, [sp, #64]	; 0x40
 80202ea:	3001      	adds	r0, #1
 80202ec:	9314      	str	r3, [sp, #80]	; 0x50
 80202ee:	9b08      	ldr	r3, [sp, #32]
 80202f0:	9007      	str	r0, [sp, #28]
 80202f2:	785a      	ldrb	r2, [r3, #1]
 80202f4:	789b      	ldrb	r3, [r3, #2]
 80202f6:	021b      	lsls	r3, r3, #8
 80202f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80202fc:	9a08      	ldr	r2, [sp, #32]
 80202fe:	78d2      	ldrb	r2, [r2, #3]
 8020300:	4313      	orrs	r3, r2
 8020302:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020304:	441a      	add	r2, r3
 8020306:	1c50      	adds	r0, r2, #1
 8020308:	7852      	ldrb	r2, [r2, #1]
 802030a:	9005      	str	r0, [sp, #20]
 802030c:	0212      	lsls	r2, r2, #8
 802030e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020310:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8020314:	5cc3      	ldrb	r3, [r0, r3]
 8020316:	431a      	orrs	r2, r3
 8020318:	b293      	uxth	r3, r2
 802031a:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 802031e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020320:	2300      	movs	r3, #0
 8020322:	9309      	str	r3, [sp, #36]	; 0x24
 8020324:	2301      	movs	r3, #1
 8020326:	9301      	str	r3, [sp, #4]
 8020328:	9304      	str	r3, [sp, #16]
 802032a:	2300      	movs	r3, #0
 802032c:	9303      	str	r3, [sp, #12]
 802032e:	2d00      	cmp	r5, #0
 8020330:	d07d      	beq.n	802042e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8020332:	45ae      	cmp	lr, r5
 8020334:	d26c      	bcs.n	8020410 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 8020336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020338:	eba5 050e 	sub.w	r5, r5, lr
 802033c:	460c      	mov	r4, r1
 802033e:	4543      	cmp	r3, r8
 8020340:	b2ad      	uxth	r5, r5
 8020342:	d802      	bhi.n	802034a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8020344:	e071      	b.n	802042a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 8020346:	2b00      	cmp	r3, #0
 8020348:	d15d      	bne.n	8020406 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 802034a:	9b05      	ldr	r3, [sp, #20]
 802034c:	9a04      	ldr	r2, [sp, #16]
 802034e:	785b      	ldrb	r3, [r3, #1]
 8020350:	f1c2 0207 	rsb	r2, r2, #7
 8020354:	9904      	ldr	r1, [sp, #16]
 8020356:	4093      	lsls	r3, r2
 8020358:	005b      	lsls	r3, r3, #1
 802035a:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 802035e:	9b05      	ldr	r3, [sp, #20]
 8020360:	781b      	ldrb	r3, [r3, #0]
 8020362:	410b      	asrs	r3, r1
 8020364:	3101      	adds	r1, #1
 8020366:	b2c9      	uxtb	r1, r1
 8020368:	b2db      	uxtb	r3, r3
 802036a:	2908      	cmp	r1, #8
 802036c:	9104      	str	r1, [sp, #16]
 802036e:	9905      	ldr	r1, [sp, #20]
 8020370:	ea43 0302 	orr.w	r3, r3, r2
 8020374:	bf0c      	ite	eq
 8020376:	3102      	addeq	r1, #2
 8020378:	3101      	addne	r1, #1
 802037a:	b29a      	uxth	r2, r3
 802037c:	bf05      	ittet	eq
 802037e:	9105      	streq	r1, [sp, #20]
 8020380:	2100      	moveq	r1, #0
 8020382:	9105      	strne	r1, [sp, #20]
 8020384:	9104      	streq	r1, [sp, #16]
 8020386:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020388:	4291      	cmp	r1, r2
 802038a:	d30a      	bcc.n	80203a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 802038c:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 8020390:	2301      	movs	r3, #1
 8020392:	9907      	ldr	r1, [sp, #28]
 8020394:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020398:	d30f      	bcc.n	80203ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 802039a:	2100      	movs	r1, #0
 802039c:	9301      	str	r3, [sp, #4]
 802039e:	9103      	str	r1, [sp, #12]
 80203a0:	e032      	b.n	8020408 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 80203a2:	9b07      	ldr	r3, [sp, #28]
 80203a4:	429a      	cmp	r2, r3
 80203a6:	d318      	bcc.n	80203da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 80203a8:	9b01      	ldr	r3, [sp, #4]
 80203aa:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 80203ae:	445b      	add	r3, fp
 80203b0:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 80203b4:	9b01      	ldr	r3, [sp, #4]
 80203b6:	3301      	adds	r3, #1
 80203b8:	b29b      	uxth	r3, r3
 80203ba:	9907      	ldr	r1, [sp, #28]
 80203bc:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 80203c0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80203c4:	7108      	strb	r0, [r1, #4]
 80203c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80203c8:	80c8      	strh	r0, [r1, #6]
 80203ca:	9801      	ldr	r0, [sp, #4]
 80203cc:	3001      	adds	r0, #1
 80203ce:	7148      	strb	r0, [r1, #5]
 80203d0:	9907      	ldr	r1, [sp, #28]
 80203d2:	3101      	adds	r1, #1
 80203d4:	b289      	uxth	r1, r1
 80203d6:	9107      	str	r1, [sp, #28]
 80203d8:	e7df      	b.n	802039a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80203da:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80203de:	4611      	mov	r1, r2
 80203e0:	795b      	ldrb	r3, [r3, #5]
 80203e2:	f603 0004 	addw	r0, r3, #2052	; 0x804
 80203e6:	4458      	add	r0, fp
 80203e8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80203ea:	4406      	add	r6, r0
 80203ec:	2e00      	cmp	r6, #0
 80203ee:	dd06      	ble.n	80203fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80203f0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80203f4:	790e      	ldrb	r6, [r1, #4]
 80203f6:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80203fa:	88c9      	ldrh	r1, [r1, #6]
 80203fc:	e7f4      	b.n	80203e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 80203fe:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 8020402:	b29b      	uxth	r3, r3
 8020404:	e7c5      	b.n	8020392 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 8020406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020408:	4621      	mov	r1, r4
 802040a:	920b      	str	r2, [sp, #44]	; 0x2c
 802040c:	469e      	mov	lr, r3
 802040e:	e78e      	b.n	802032e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 8020410:	9a03      	ldr	r2, [sp, #12]
 8020412:	ebae 0305 	sub.w	r3, lr, r5
 8020416:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 802041a:	442a      	add	r2, r5
 802041c:	b29b      	uxth	r3, r3
 802041e:	b292      	uxth	r2, r2
 8020420:	9203      	str	r2, [sp, #12]
 8020422:	2500      	movs	r5, #0
 8020424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020426:	4542      	cmp	r2, r8
 8020428:	d88d      	bhi.n	8020346 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 802042a:	4621      	mov	r1, r4
 802042c:	e74d      	b.n	80202ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 802042e:	458e      	cmp	lr, r1
 8020430:	f04f 0900 	mov.w	r9, #0
 8020434:	bf2b      	itete	cs
 8020436:	ebae 0301 	subcs.w	r3, lr, r1
 802043a:	eba1 040e 	subcc.w	r4, r1, lr
 802043e:	462c      	movcs	r4, r5
 8020440:	462b      	movcc	r3, r5
 8020442:	bf27      	ittee	cs
 8020444:	b29b      	uxthcs	r3, r3
 8020446:	910c      	strcs	r1, [sp, #48]	; 0x30
 8020448:	b2a4      	uxthcc	r4, r4
 802044a:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 802044e:	9a03      	ldr	r2, [sp, #12]
 8020450:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020452:	444a      	add	r2, r9
 8020454:	4548      	cmp	r0, r9
 8020456:	b292      	uxth	r2, r2
 8020458:	d074      	beq.n	8020544 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 802045a:	2004      	movs	r0, #4
 802045c:	445a      	add	r2, fp
 802045e:	4605      	mov	r5, r0
 8020460:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 8020464:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020466:	fb15 0202 	smlabb	r2, r5, r2, r0
 802046a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802046c:	5880      	ldr	r0, [r0, r2]
 802046e:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8020472:	d014      	beq.n	802049e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8020474:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020478:	ea4f 2510 	mov.w	r5, r0, lsr #8
 802047c:	d112      	bne.n	80204a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 802047e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020480:	2aff      	cmp	r2, #255	; 0xff
 8020482:	d10f      	bne.n	80204a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 8020484:	0942      	lsrs	r2, r0, #5
 8020486:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802048a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802048e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020492:	f025 0507 	bic.w	r5, r5, #7
 8020496:	4315      	orrs	r5, r2
 8020498:	4305      	orrs	r5, r0
 802049a:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 802049e:	f109 0901 	add.w	r9, r9, #1
 80204a2:	e7d4      	b.n	802044e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 80204a4:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 80204a8:	b2ed      	uxtb	r5, r5
 80204aa:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80204ae:	ea4f 272c 	mov.w	r7, ip, asr #8
 80204b2:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 80204b6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204ba:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80204be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80204c2:	9215      	str	r2, [sp, #84]	; 0x54
 80204c4:	fa5f fc8c 	uxtb.w	ip, ip
 80204c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80204ca:	b2c0      	uxtb	r0, r0
 80204cc:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80204d0:	fb02 fa0a 	mul.w	sl, r2, sl
 80204d4:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80204d8:	f10a 0201 	add.w	r2, sl, #1
 80204dc:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80204e0:	1212      	asrs	r2, r2, #8
 80204e2:	fa1f fa82 	uxth.w	sl, r2
 80204e6:	43d2      	mvns	r2, r2
 80204e8:	fb16 f60a 	smulbb	r6, r6, sl
 80204ec:	b2d2      	uxtb	r2, r2
 80204ee:	fb10 f00a 	smulbb	r0, r0, sl
 80204f2:	fb07 6702 	mla	r7, r7, r2, r6
 80204f6:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80204f8:	fb0c 0002 	mla	r0, ip, r2, r0
 80204fc:	fb15 f50a 	smulbb	r5, r5, sl
 8020500:	b2bf      	uxth	r7, r7
 8020502:	b280      	uxth	r0, r0
 8020504:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020508:	fb06 5602 	mla	r6, r6, r2, r5
 802050c:	1c7a      	adds	r2, r7, #1
 802050e:	1c45      	adds	r5, r0, #1
 8020510:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020514:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020518:	b2b6      	uxth	r6, r6
 802051a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802051e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020522:	432f      	orrs	r7, r5
 8020524:	1c75      	adds	r5, r6, #1
 8020526:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802052a:	096d      	lsrs	r5, r5, #5
 802052c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020530:	432f      	orrs	r7, r5
 8020532:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8020536:	e7b2      	b.n	802049e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8020538:	20015120 	.word	0x20015120
 802053c:	2001511a 	.word	0x2001511a
 8020540:	fffff7fb 	.word	0xfffff7fb
 8020544:	9203      	str	r2, [sp, #12]
 8020546:	458e      	cmp	lr, r1
 8020548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802054a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802054e:	f4ff af68 	bcc.w	8020422 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8020552:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020554:	9906      	ldr	r1, [sp, #24]
 8020556:	8812      	ldrh	r2, [r2, #0]
 8020558:	1a52      	subs	r2, r2, r1
 802055a:	9914      	ldr	r1, [sp, #80]	; 0x50
 802055c:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8020560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020562:	3201      	adds	r2, #1
 8020564:	428a      	cmp	r2, r1
 8020566:	9209      	str	r2, [sp, #36]	; 0x24
 8020568:	d111      	bne.n	802058e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 802056a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 802056e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8020572:	9b06      	ldr	r3, [sp, #24]
 8020574:	eba5 0509 	sub.w	r5, r5, r9
 8020578:	b2ad      	uxth	r5, r5
 802057a:	2d00      	cmp	r5, #0
 802057c:	bf08      	it	eq
 802057e:	4619      	moveq	r1, r3
 8020580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020582:	bf18      	it	ne
 8020584:	2100      	movne	r1, #0
 8020586:	3301      	adds	r3, #1
 8020588:	b289      	uxth	r1, r1
 802058a:	930d      	str	r3, [sp, #52]	; 0x34
 802058c:	e694      	b.n	80202b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 802058e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8020592:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8020596:	1b2d      	subs	r5, r5, r4
 8020598:	b2ad      	uxth	r5, r5
 802059a:	2d00      	cmp	r5, #0
 802059c:	bf18      	it	ne
 802059e:	2400      	movne	r4, #0
 80205a0:	e740      	b.n	8020424 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 80205a2:	4b04      	ldr	r3, [pc, #16]	; (80205b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 80205a4:	6818      	ldr	r0, [r3, #0]
 80205a6:	6803      	ldr	r3, [r0, #0]
 80205a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205aa:	4798      	blx	r3
 80205ac:	b01d      	add	sp, #116	; 0x74
 80205ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205b2:	bf00      	nop
 80205b4:	20015120 	.word	0x20015120

080205b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80205b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205bc:	b09f      	sub	sp, #124	; 0x7c
 80205be:	461d      	mov	r5, r3
 80205c0:	4604      	mov	r4, r0
 80205c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205c4:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 80205c8:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 80205cc:	920a      	str	r2, [sp, #40]	; 0x28
 80205ce:	2a00      	cmp	r2, #0
 80205d0:	f000 81fe 	beq.w	80209d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 80205d4:	6828      	ldr	r0, [r5, #0]
 80205d6:	aa1a      	add	r2, sp, #104	; 0x68
 80205d8:	6869      	ldr	r1, [r5, #4]
 80205da:	c203      	stmia	r2!, {r0, r1}
 80205dc:	6818      	ldr	r0, [r3, #0]
 80205de:	aa1c      	add	r2, sp, #112	; 0x70
 80205e0:	6859      	ldr	r1, [r3, #4]
 80205e2:	c203      	stmia	r2!, {r0, r1}
 80205e4:	a81a      	add	r0, sp, #104	; 0x68
 80205e6:	f7f9 fae9 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205ea:	4629      	mov	r1, r5
 80205ec:	a81c      	add	r0, sp, #112	; 0x70
 80205ee:	f7f9 fb0d 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80205f2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 80205f6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 80205fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80205fe:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 8020602:	bfdb      	ittet	le
 8020604:	b29a      	uxthle	r2, r3
 8020606:	f44f 6180 	movle.w	r1, #1024	; 0x400
 802060a:	2201      	movgt	r2, #1
 802060c:	fb91 f2f2 	sdivle	r2, r1, r2
 8020610:	9201      	str	r2, [sp, #4]
 8020612:	9801      	ldr	r0, [sp, #4]
 8020614:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8020618:	9901      	ldr	r1, [sp, #4]
 802061a:	fb92 f0f0 	sdiv	r0, r2, r0
 802061e:	b280      	uxth	r0, r0
 8020620:	440e      	add	r6, r1
 8020622:	9010      	str	r0, [sp, #64]	; 0x40
 8020624:	3e01      	subs	r6, #1
 8020626:	9801      	ldr	r0, [sp, #4]
 8020628:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802062a:	fb05 2510 	mls	r5, r5, r0, r2
 802062e:	fb96 f6f1 	sdiv	r6, r6, r1
 8020632:	fb15 f503 	smulbb	r5, r5, r3
 8020636:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 802063a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802063e:	3601      	adds	r6, #1
 8020640:	440d      	add	r5, r1
 8020642:	4419      	add	r1, r3
 8020644:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8020648:	b2b6      	uxth	r6, r6
 802064a:	441a      	add	r2, r3
 802064c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8020650:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 8020654:	b2ad      	uxth	r5, r5
 8020656:	9304      	str	r3, [sp, #16]
 8020658:	4b96      	ldr	r3, [pc, #600]	; (80208b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 802065a:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 802065e:	6818      	ldr	r0, [r3, #0]
 8020660:	6803      	ldr	r3, [r0, #0]
 8020662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020664:	4798      	blx	r3
 8020666:	4b94      	ldr	r3, [pc, #592]	; (80208b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 8020668:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 802066c:	2d00      	cmp	r5, #0
 802066e:	881a      	ldrh	r2, [r3, #0]
 8020670:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 8020674:	fb02 f707 	mul.w	r7, r2, r7
 8020678:	fb02 c101 	mla	r1, r2, r1, ip
 802067c:	9318      	str	r3, [sp, #96]	; 0x60
 802067e:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8020682:	4b8e      	ldr	r3, [pc, #568]	; (80208bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8020684:	bf18      	it	ne
 8020686:	2100      	movne	r1, #0
 8020688:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 802068c:	eba3 0304 	sub.w	r3, r3, r4
 8020690:	920b      	str	r2, [sp, #44]	; 0x2c
 8020692:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020694:	9319      	str	r3, [sp, #100]	; 0x64
 8020696:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802069a:	f106 0204 	add.w	r2, r6, #4
 802069e:	9206      	str	r2, [sp, #24]
 80206a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206a2:	ea6f 0202 	mvn.w	r2, r2
 80206a6:	b2d2      	uxtb	r2, r2
 80206a8:	9215      	str	r2, [sp, #84]	; 0x54
 80206aa:	9a04      	ldr	r2, [sp, #16]
 80206ac:	bf08      	it	eq
 80206ae:	4611      	moveq	r1, r2
 80206b0:	2200      	movs	r2, #0
 80206b2:	b289      	uxth	r1, r1
 80206b4:	920d      	str	r2, [sp, #52]	; 0x34
 80206b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80206b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80206ba:	fa12 f383 	uxtah	r3, r2, r3
 80206be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80206c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80206c4:	3304      	adds	r3, #4
 80206c6:	9307      	str	r3, [sp, #28]
 80206c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206ca:	455b      	cmp	r3, fp
 80206cc:	f240 817b 	bls.w	80209c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 80206d0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80206d4:	f04f 0801 	mov.w	r8, #1
 80206d8:	9a01      	ldr	r2, [sp, #4]
 80206da:	9807      	ldr	r0, [sp, #28]
 80206dc:	46c4      	mov	ip, r8
 80206de:	f8cd 8008 	str.w	r8, [sp, #8]
 80206e2:	7800      	ldrb	r0, [r0, #0]
 80206e4:	fbb5 f3f3 	udiv	r3, r5, r3
 80206e8:	1ad3      	subs	r3, r2, r3
 80206ea:	9011      	str	r0, [sp, #68]	; 0x44
 80206ec:	3001      	adds	r0, #1
 80206ee:	b29b      	uxth	r3, r3
 80206f0:	9005      	str	r0, [sp, #20]
 80206f2:	9316      	str	r3, [sp, #88]	; 0x58
 80206f4:	9b07      	ldr	r3, [sp, #28]
 80206f6:	785a      	ldrb	r2, [r3, #1]
 80206f8:	789b      	ldrb	r3, [r3, #2]
 80206fa:	021b      	lsls	r3, r3, #8
 80206fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020700:	9a07      	ldr	r2, [sp, #28]
 8020702:	78d2      	ldrb	r2, [r2, #3]
 8020704:	4313      	orrs	r3, r2
 8020706:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020708:	441a      	add	r2, r3
 802070a:	1c50      	adds	r0, r2, #1
 802070c:	7852      	ldrb	r2, [r2, #1]
 802070e:	9003      	str	r0, [sp, #12]
 8020710:	0212      	lsls	r2, r2, #8
 8020712:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020714:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8020718:	5cc3      	ldrb	r3, [r0, r3]
 802071a:	431a      	orrs	r2, r3
 802071c:	b293      	uxth	r3, r2
 802071e:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8020722:	930c      	str	r3, [sp, #48]	; 0x30
 8020724:	2300      	movs	r3, #0
 8020726:	9308      	str	r3, [sp, #32]
 8020728:	461a      	mov	r2, r3
 802072a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802072e:	930e      	str	r3, [sp, #56]	; 0x38
 8020730:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8020734:	930f      	str	r3, [sp, #60]	; 0x3c
 8020736:	2d00      	cmp	r5, #0
 8020738:	d07d      	beq.n	8020836 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 802073a:	45ac      	cmp	ip, r5
 802073c:	d26d      	bcs.n	802081a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 802073e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020740:	eba5 050c 	sub.w	r5, r5, ip
 8020744:	4608      	mov	r0, r1
 8020746:	455b      	cmp	r3, fp
 8020748:	b2ad      	uxth	r5, r5
 802074a:	d802      	bhi.n	8020752 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 802074c:	e071      	b.n	8020832 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 802074e:	2b00      	cmp	r3, #0
 8020750:	d15d      	bne.n	802080e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8020752:	9b03      	ldr	r3, [sp, #12]
 8020754:	9a02      	ldr	r2, [sp, #8]
 8020756:	785b      	ldrb	r3, [r3, #1]
 8020758:	f1c2 0207 	rsb	r2, r2, #7
 802075c:	9902      	ldr	r1, [sp, #8]
 802075e:	4093      	lsls	r3, r2
 8020760:	005b      	lsls	r3, r3, #1
 8020762:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8020766:	9b03      	ldr	r3, [sp, #12]
 8020768:	781b      	ldrb	r3, [r3, #0]
 802076a:	410b      	asrs	r3, r1
 802076c:	3101      	adds	r1, #1
 802076e:	b2c9      	uxtb	r1, r1
 8020770:	b2db      	uxtb	r3, r3
 8020772:	2908      	cmp	r1, #8
 8020774:	9102      	str	r1, [sp, #8]
 8020776:	9903      	ldr	r1, [sp, #12]
 8020778:	ea43 0302 	orr.w	r3, r3, r2
 802077c:	bf0c      	ite	eq
 802077e:	3102      	addeq	r1, #2
 8020780:	3101      	addne	r1, #1
 8020782:	b29a      	uxth	r2, r3
 8020784:	bf05      	ittet	eq
 8020786:	9103      	streq	r1, [sp, #12]
 8020788:	2100      	moveq	r1, #0
 802078a:	9103      	strne	r1, [sp, #12]
 802078c:	9102      	streq	r1, [sp, #8]
 802078e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020790:	4291      	cmp	r1, r2
 8020792:	d30a      	bcc.n	80207aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8020794:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8020798:	2301      	movs	r3, #1
 802079a:	9905      	ldr	r1, [sp, #20]
 802079c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80207a0:	d30f      	bcc.n	80207c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 80207a2:	2100      	movs	r1, #0
 80207a4:	4698      	mov	r8, r3
 80207a6:	9100      	str	r1, [sp, #0]
 80207a8:	e032      	b.n	8020810 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 80207aa:	9b05      	ldr	r3, [sp, #20]
 80207ac:	429a      	cmp	r2, r3
 80207ae:	d318      	bcc.n	80207e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 80207b0:	eb04 0308 	add.w	r3, r4, r8
 80207b4:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 80207b8:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 80207bc:	f108 0301 	add.w	r3, r8, #1
 80207c0:	b29b      	uxth	r3, r3
 80207c2:	9905      	ldr	r1, [sp, #20]
 80207c4:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 80207c8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80207cc:	710e      	strb	r6, [r1, #4]
 80207ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80207d0:	80ce      	strh	r6, [r1, #6]
 80207d2:	f108 0601 	add.w	r6, r8, #1
 80207d6:	714e      	strb	r6, [r1, #5]
 80207d8:	9905      	ldr	r1, [sp, #20]
 80207da:	3101      	adds	r1, #1
 80207dc:	b289      	uxth	r1, r1
 80207de:	9105      	str	r1, [sp, #20]
 80207e0:	e7df      	b.n	80207a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 80207e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80207e6:	4611      	mov	r1, r2
 80207e8:	795b      	ldrb	r3, [r3, #5]
 80207ea:	f603 0604 	addw	r6, r3, #2052	; 0x804
 80207ee:	4426      	add	r6, r4
 80207f0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80207f2:	4437      	add	r7, r6
 80207f4:	2f00      	cmp	r7, #0
 80207f6:	dd06      	ble.n	8020806 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 80207f8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80207fc:	790f      	ldrb	r7, [r1, #4]
 80207fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020802:	88c9      	ldrh	r1, [r1, #6]
 8020804:	e7f4      	b.n	80207f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8020806:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 802080a:	b29b      	uxth	r3, r3
 802080c:	e7c5      	b.n	802079a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 802080e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020810:	920c      	str	r2, [sp, #48]	; 0x30
 8020812:	4601      	mov	r1, r0
 8020814:	9a00      	ldr	r2, [sp, #0]
 8020816:	469c      	mov	ip, r3
 8020818:	e78d      	b.n	8020736 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 802081a:	ebac 0305 	sub.w	r3, ip, r5
 802081e:	1957      	adds	r7, r2, r5
 8020820:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8020824:	b2ba      	uxth	r2, r7
 8020826:	b29b      	uxth	r3, r3
 8020828:	9200      	str	r2, [sp, #0]
 802082a:	2500      	movs	r5, #0
 802082c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802082e:	455a      	cmp	r2, fp
 8020830:	d88d      	bhi.n	802074e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8020832:	4601      	mov	r1, r0
 8020834:	e748      	b.n	80206c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 8020836:	458c      	cmp	ip, r1
 8020838:	bf27      	ittee	cs
 802083a:	ebac 0301 	subcs.w	r3, ip, r1
 802083e:	4628      	movcs	r0, r5
 8020840:	eba1 000c 	subcc.w	r0, r1, ip
 8020844:	462b      	movcc	r3, r5
 8020846:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020848:	bf27      	ittee	cs
 802084a:	b29b      	uxthcs	r3, r3
 802084c:	9109      	strcs	r1, [sp, #36]	; 0x24
 802084e:	b280      	uxthcc	r0, r0
 8020850:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 8020854:	2dff      	cmp	r5, #255	; 0xff
 8020856:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020858:	eb02 0705 	add.w	r7, r2, r5
 802085c:	b2bd      	uxth	r5, r7
 802085e:	9500      	str	r5, [sp, #0]
 8020860:	d12e      	bne.n	80208c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 8020862:	465e      	mov	r6, fp
 8020864:	9d00      	ldr	r5, [sp, #0]
 8020866:	42aa      	cmp	r2, r5
 8020868:	f040 8083 	bne.w	8020972 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 802086c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802086e:	458c      	cmp	ip, r1
 8020870:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8020874:	d3d9      	bcc.n	802082a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8020876:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020878:	9904      	ldr	r1, [sp, #16]
 802087a:	8812      	ldrh	r2, [r2, #0]
 802087c:	1a52      	subs	r2, r2, r1
 802087e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8020880:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8020884:	9a08      	ldr	r2, [sp, #32]
 8020886:	3201      	adds	r2, #1
 8020888:	428a      	cmp	r2, r1
 802088a:	9208      	str	r2, [sp, #32]
 802088c:	f040 8091 	bne.w	80209b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 8020890:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8020894:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 8020898:	9b04      	ldr	r3, [sp, #16]
 802089a:	eba5 050c 	sub.w	r5, r5, ip
 802089e:	b2ad      	uxth	r5, r5
 80208a0:	2d00      	cmp	r5, #0
 80208a2:	bf08      	it	eq
 80208a4:	4619      	moveq	r1, r3
 80208a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80208a8:	bf18      	it	ne
 80208aa:	2100      	movne	r1, #0
 80208ac:	3301      	adds	r3, #1
 80208ae:	b289      	uxth	r1, r1
 80208b0:	930d      	str	r3, [sp, #52]	; 0x34
 80208b2:	e700      	b.n	80206b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 80208b4:	20015120 	.word	0x20015120
 80208b8:	2001511a 	.word	0x2001511a
 80208bc:	fffff7fb 	.word	0xfffff7fb
 80208c0:	46d9      	mov	r9, fp
 80208c2:	9d00      	ldr	r5, [sp, #0]
 80208c4:	42aa      	cmp	r2, r5
 80208c6:	d0d1      	beq.n	802086c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 80208c8:	1c55      	adds	r5, r2, #1
 80208ca:	4422      	add	r2, r4
 80208cc:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 80208d0:	9a06      	ldr	r2, [sp, #24]
 80208d2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80208d6:	9517      	str	r5, [sp, #92]	; 0x5c
 80208d8:	4472      	add	r2, lr
 80208da:	9212      	str	r2, [sp, #72]	; 0x48
 80208dc:	f8b9 2000 	ldrh.w	r2, [r9]
 80208e0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80208e2:	1216      	asrs	r6, r2, #8
 80208e4:	f897 a002 	ldrb.w	sl, [r7, #2]
 80208e8:	10d5      	asrs	r5, r2, #3
 80208ea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80208ec:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80208f0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80208f4:	00d2      	lsls	r2, r2, #3
 80208f6:	fb1a fa07 	smulbb	sl, sl, r7
 80208fa:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80208fe:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020900:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020904:	b2d2      	uxtb	r2, r2
 8020906:	fb06 a607 	mla	r6, r6, r7, sl
 802090a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802090c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020910:	f897 a001 	ldrb.w	sl, [r7, #1]
 8020914:	b2b6      	uxth	r6, r6
 8020916:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020918:	fb1a fa07 	smulbb	sl, sl, r7
 802091c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802091e:	fb05 a507 	mla	r5, r5, r7, sl
 8020922:	9f06      	ldr	r7, [sp, #24]
 8020924:	f106 0a01 	add.w	sl, r6, #1
 8020928:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802092c:	b2ad      	uxth	r5, r5
 802092e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020930:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020934:	f105 0a01 	add.w	sl, r5, #1
 8020938:	fb1e fe07 	smulbb	lr, lr, r7
 802093c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802093e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020942:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020946:	fb02 e207 	mla	r2, r2, r7, lr
 802094a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802094e:	b292      	uxth	r2, r2
 8020950:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020954:	f102 0e01 	add.w	lr, r2, #1
 8020958:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 802095c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8020960:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020964:	ea4e 0606 	orr.w	r6, lr, r6
 8020968:	ea46 060a 	orr.w	r6, r6, sl
 802096c:	f829 6b02 	strh.w	r6, [r9], #2
 8020970:	e7a7      	b.n	80208c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 8020972:	f102 0e01 	add.w	lr, r2, #1
 8020976:	4422      	add	r2, r4
 8020978:	9f06      	ldr	r7, [sp, #24]
 802097a:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 802097e:	9a06      	ldr	r2, [sp, #24]
 8020980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020984:	eb02 0a05 	add.w	sl, r2, r5
 8020988:	4a13      	ldr	r2, [pc, #76]	; (80209d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 802098a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802098e:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8020992:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020996:	00d2      	lsls	r2, r2, #3
 8020998:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802099c:	ea49 0202 	orr.w	r2, r9, r2
 80209a0:	f817 9005 	ldrb.w	r9, [r7, r5]
 80209a4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80209a8:	f826 2b02 	strh.w	r2, [r6], #2
 80209ac:	fa1f f28e 	uxth.w	r2, lr
 80209b0:	e758      	b.n	8020864 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 80209b2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80209b6:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80209ba:	1a2d      	subs	r5, r5, r0
 80209bc:	b2ad      	uxth	r5, r5
 80209be:	2d00      	cmp	r5, #0
 80209c0:	bf18      	it	ne
 80209c2:	2000      	movne	r0, #0
 80209c4:	e732      	b.n	802082c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 80209c6:	4b05      	ldr	r3, [pc, #20]	; (80209dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 80209c8:	6818      	ldr	r0, [r3, #0]
 80209ca:	6803      	ldr	r3, [r0, #0]
 80209cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209ce:	4798      	blx	r3
 80209d0:	b01f      	add	sp, #124	; 0x7c
 80209d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209d6:	bf00      	nop
 80209d8:	fffff800 	.word	0xfffff800
 80209dc:	20015120 	.word	0x20015120

080209e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80209e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209e4:	b091      	sub	sp, #68	; 0x44
 80209e6:	469b      	mov	fp, r3
 80209e8:	4616      	mov	r6, r2
 80209ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80209ee:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80209f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80209f6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 80209fa:	4604      	mov	r4, r0
 80209fc:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8020a00:	4640      	mov	r0, r8
 8020a02:	460d      	mov	r5, r1
 8020a04:	4659      	mov	r1, fp
 8020a06:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020a0a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020a0e:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8020a12:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8020a16:	f7f6 fb3d 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 8020a1a:	4631      	mov	r1, r6
 8020a1c:	4640      	mov	r0, r8
 8020a1e:	f7f6 fb39 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 8020a22:	4b74      	ldr	r3, [pc, #464]	; (8020bf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8020a24:	8818      	ldrh	r0, [r3, #0]
 8020a26:	4b74      	ldr	r3, [pc, #464]	; (8020bf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8020a28:	b202      	sxth	r2, r0
 8020a2a:	8819      	ldrh	r1, [r3, #0]
 8020a2c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020a30:	b20e      	sxth	r6, r1
 8020a32:	2b00      	cmp	r3, #0
 8020a34:	da07      	bge.n	8020a46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8020a36:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8020a3a:	4463      	add	r3, ip
 8020a3c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020a40:	2300      	movs	r3, #0
 8020a42:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8020a46:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020a4a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020a4e:	1ad2      	subs	r2, r2, r3
 8020a50:	4594      	cmp	ip, r2
 8020a52:	bfc4      	itt	gt
 8020a54:	1ac2      	subgt	r2, r0, r3
 8020a56:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8020a5a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020a5e:	2a00      	cmp	r2, #0
 8020a60:	da07      	bge.n	8020a72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8020a62:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8020a66:	4462      	add	r2, ip
 8020a68:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8020a6c:	2200      	movs	r2, #0
 8020a6e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8020a72:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8020a76:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020a7a:	eba6 060a 	sub.w	r6, r6, sl
 8020a7e:	42b2      	cmp	r2, r6
 8020a80:	bfc4      	itt	gt
 8020a82:	eba1 020a 	subgt.w	r2, r1, sl
 8020a86:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8020a8a:	4a5c      	ldr	r2, [pc, #368]	; (8020bfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8020a8c:	7812      	ldrb	r2, [r2, #0]
 8020a8e:	b9a2      	cbnz	r2, 8020aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8020a90:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020a94:	4286      	cmp	r6, r0
 8020a96:	4640      	mov	r0, r8
 8020a98:	9303      	str	r3, [sp, #12]
 8020a9a:	bf14      	ite	ne
 8020a9c:	2600      	movne	r6, #0
 8020a9e:	2601      	moveq	r6, #1
 8020aa0:	f7f6 fb3b 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8020aa4:	9b03      	ldr	r3, [sp, #12]
 8020aa6:	b160      	cbz	r0, 8020ac2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8020aa8:	2300      	movs	r3, #0
 8020aaa:	8023      	strh	r3, [r4, #0]
 8020aac:	8063      	strh	r3, [r4, #2]
 8020aae:	80a3      	strh	r3, [r4, #4]
 8020ab0:	4620      	mov	r0, r4
 8020ab2:	80e3      	strh	r3, [r4, #6]
 8020ab4:	b011      	add	sp, #68	; 0x44
 8020ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aba:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020abe:	428e      	cmp	r6, r1
 8020ac0:	e7e9      	b.n	8020a96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8020ac2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020ac6:	a90e      	add	r1, sp, #56	; 0x38
 8020ac8:	900e      	str	r0, [sp, #56]	; 0x38
 8020aca:	a80c      	add	r0, sp, #48	; 0x30
 8020acc:	9205      	str	r2, [sp, #20]
 8020ace:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020ad2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8020ad6:	9206      	str	r2, [sp, #24]
 8020ad8:	f8bb 2000 	ldrh.w	r2, [fp]
 8020adc:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8020ae0:	1a9b      	subs	r3, r3, r2
 8020ae2:	b21b      	sxth	r3, r3
 8020ae4:	9303      	str	r3, [sp, #12]
 8020ae6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020aea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8020c04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020aee:	ebaa 0a03 	sub.w	sl, sl, r3
 8020af2:	fa0f f38a 	sxth.w	r3, sl
 8020af6:	9304      	str	r3, [sp, #16]
 8020af8:	9b03      	ldr	r3, [sp, #12]
 8020afa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8020afe:	9b04      	ldr	r3, [sp, #16]
 8020b00:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020b04:	9b05      	ldr	r3, [sp, #20]
 8020b06:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8020b0a:	9b06      	ldr	r3, [sp, #24]
 8020b0c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020b10:	f7f9 f87c 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b14:	4640      	mov	r0, r8
 8020b16:	f7f9 f851 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b1a:	a80e      	add	r0, sp, #56	; 0x38
 8020b1c:	f7f9 f84e 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b20:	4b37      	ldr	r3, [pc, #220]	; (8020c00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020b22:	4628      	mov	r0, r5
 8020b24:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020b28:	881b      	ldrh	r3, [r3, #0]
 8020b2a:	9307      	str	r3, [sp, #28]
 8020b2c:	682b      	ldr	r3, [r5, #0]
 8020b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b30:	4798      	blx	r3
 8020b32:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8020b36:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8020b3a:	4681      	mov	r9, r0
 8020b3c:	f8db 0000 	ldr.w	r0, [fp]
 8020b40:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8020b44:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8020b46:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020b4a:	6803      	ldr	r3, [r0, #0]
 8020b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b4e:	4798      	blx	r3
 8020b50:	4607      	mov	r7, r0
 8020b52:	f8db 0000 	ldr.w	r0, [fp]
 8020b56:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020b5a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020b5e:	6803      	ldr	r3, [r0, #0]
 8020b60:	9109      	str	r1, [sp, #36]	; 0x24
 8020b62:	9208      	str	r2, [sp, #32]
 8020b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b66:	4798      	blx	r3
 8020b68:	f010 0f01 	tst.w	r0, #1
 8020b6c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020b70:	d012      	beq.n	8020b98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8020b72:	f8db 0000 	ldr.w	r0, [fp]
 8020b76:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8020b7a:	6803      	ldr	r3, [r0, #0]
 8020b7c:	9200      	str	r2, [sp, #0]
 8020b7e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8020b80:	462b      	mov	r3, r5
 8020b82:	e898 0006 	ldmia.w	r8, {r1, r2}
 8020b86:	47b0      	blx	r6
 8020b88:	9b03      	ldr	r3, [sp, #12]
 8020b8a:	8023      	strh	r3, [r4, #0]
 8020b8c:	9b04      	ldr	r3, [sp, #16]
 8020b8e:	8063      	strh	r3, [r4, #2]
 8020b90:	9b05      	ldr	r3, [sp, #20]
 8020b92:	80a3      	strh	r3, [r4, #4]
 8020b94:	9b06      	ldr	r3, [sp, #24]
 8020b96:	e78b      	b.n	8020ab0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8020b98:	fb09 f202 	mul.w	r2, r9, r2
 8020b9c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8020ba0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8020ba4:	440f      	add	r7, r1
 8020ba6:	b166      	cbz	r6, 8020bc2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020ba8:	9a07      	ldr	r2, [sp, #28]
 8020baa:	4592      	cmp	sl, r2
 8020bac:	d109      	bne.n	8020bc2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020bae:	f8db 0000 	ldr.w	r0, [fp]
 8020bb2:	fb09 f303 	mul.w	r3, r9, r3
 8020bb6:	4629      	mov	r1, r5
 8020bb8:	6802      	ldr	r2, [r0, #0]
 8020bba:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8020bbc:	463a      	mov	r2, r7
 8020bbe:	47b0      	blx	r6
 8020bc0:	e7e2      	b.n	8020b88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020bc2:	fb0a f303 	mul.w	r3, sl, r3
 8020bc6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8020bca:	f8df b038 	ldr.w	fp, [pc, #56]	; 8020c04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020bce:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8020bd2:	4545      	cmp	r5, r8
 8020bd4:	d2d8      	bcs.n	8020b88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020bd6:	f8db 0000 	ldr.w	r0, [fp]
 8020bda:	4629      	mov	r1, r5
 8020bdc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020be0:	4435      	add	r5, r6
 8020be2:	6802      	ldr	r2, [r0, #0]
 8020be4:	005b      	lsls	r3, r3, #1
 8020be6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020bea:	463a      	mov	r2, r7
 8020bec:	47d0      	blx	sl
 8020bee:	444f      	add	r7, r9
 8020bf0:	e7ef      	b.n	8020bd2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8020bf2:	bf00      	nop
 8020bf4:	20015114 	.word	0x20015114
 8020bf8:	20015116 	.word	0x20015116
 8020bfc:	20015118 	.word	0x20015118
 8020c00:	2001511a 	.word	0x2001511a
 8020c04:	20015120 	.word	0x20015120

08020c08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c0a:	4606      	mov	r6, r0
 8020c0c:	b087      	sub	sp, #28
 8020c0e:	460c      	mov	r4, r1
 8020c10:	4617      	mov	r7, r2
 8020c12:	461d      	mov	r5, r3
 8020c14:	b333      	cbz	r3, 8020c64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020c16:	4608      	mov	r0, r1
 8020c18:	f7f6 fa7f 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8020c1c:	bb10      	cbnz	r0, 8020c64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020c1e:	6820      	ldr	r0, [r4, #0]
 8020c20:	ab04      	add	r3, sp, #16
 8020c22:	6861      	ldr	r1, [r4, #4]
 8020c24:	4c1b      	ldr	r4, [pc, #108]	; (8020c94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8020c26:	c303      	stmia	r3!, {r0, r1}
 8020c28:	a804      	add	r0, sp, #16
 8020c2a:	f7f8 ffc7 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c2e:	6820      	ldr	r0, [r4, #0]
 8020c30:	6803      	ldr	r3, [r0, #0]
 8020c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c34:	4798      	blx	r3
 8020c36:	2dff      	cmp	r5, #255	; 0xff
 8020c38:	d016      	beq.n	8020c68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020c3a:	f010 0f08 	tst.w	r0, #8
 8020c3e:	6820      	ldr	r0, [r4, #0]
 8020c40:	d015      	beq.n	8020c6e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020c42:	2400      	movs	r4, #0
 8020c44:	6801      	ldr	r1, [r0, #0]
 8020c46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020c4a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020c4e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020c52:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020c56:	9401      	str	r4, [sp, #4]
 8020c58:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020c5c:	9400      	str	r4, [sp, #0]
 8020c5e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8020c60:	4639      	mov	r1, r7
 8020c62:	47a0      	blx	r4
 8020c64:	b007      	add	sp, #28
 8020c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c68:	f010 0f02 	tst.w	r0, #2
 8020c6c:	e7e7      	b.n	8020c3e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020c6e:	6803      	ldr	r3, [r0, #0]
 8020c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c72:	4798      	blx	r3
 8020c74:	4b08      	ldr	r3, [pc, #32]	; (8020c98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020c76:	4601      	mov	r1, r0
 8020c78:	4630      	mov	r0, r6
 8020c7a:	881a      	ldrh	r2, [r3, #0]
 8020c7c:	6833      	ldr	r3, [r6, #0]
 8020c7e:	e9cd 7500 	strd	r7, r5, [sp]
 8020c82:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8020c84:	ab04      	add	r3, sp, #16
 8020c86:	47a8      	blx	r5
 8020c88:	6820      	ldr	r0, [r4, #0]
 8020c8a:	6803      	ldr	r3, [r0, #0]
 8020c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c8e:	4798      	blx	r3
 8020c90:	e7e8      	b.n	8020c64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020c92:	bf00      	nop
 8020c94:	20015120 	.word	0x20015120
 8020c98:	2001511a 	.word	0x2001511a

08020c9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ca0:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020ca4:	4688      	mov	r8, r1
 8020ca6:	4614      	mov	r4, r2
 8020ca8:	461d      	mov	r5, r3
 8020caa:	9e08      	ldr	r6, [sp, #32]
 8020cac:	2f00      	cmp	r7, #0
 8020cae:	f000 80ab 	beq.w	8020e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020cb2:	4618      	mov	r0, r3
 8020cb4:	f7f6 fa31 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8020cb8:	2800      	cmp	r0, #0
 8020cba:	f040 80a5 	bne.w	8020e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020cbe:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020cc2:	2fff      	cmp	r7, #255	; 0xff
 8020cc4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020cc8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020ccc:	fb04 1303 	mla	r3, r4, r3, r1
 8020cd0:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020cd4:	eba4 0200 	sub.w	r2, r4, r0
 8020cd8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020cdc:	fb04 f505 	mul.w	r5, r4, r5
 8020ce0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020ce4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020ce8:	d04a      	beq.n	8020d80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8020cea:	b2bc      	uxth	r4, r7
 8020cec:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020cf0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020cf4:	fa5f f788 	uxtb.w	r7, r8
 8020cf8:	b2f3      	uxtb	r3, r6
 8020cfa:	0040      	lsls	r0, r0, #1
 8020cfc:	fb0e fe04 	mul.w	lr, lr, r4
 8020d00:	4367      	muls	r7, r4
 8020d02:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020d06:	4363      	muls	r3, r4
 8020d08:	fa1f fc8c 	uxth.w	ip, ip
 8020d0c:	42a9      	cmp	r1, r5
 8020d0e:	d27b      	bcs.n	8020e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020d10:	eb01 0900 	add.w	r9, r1, r0
 8020d14:	4549      	cmp	r1, r9
 8020d16:	d231      	bcs.n	8020d7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8020d18:	880a      	ldrh	r2, [r1, #0]
 8020d1a:	1214      	asrs	r4, r2, #8
 8020d1c:	10d6      	asrs	r6, r2, #3
 8020d1e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020d22:	00d2      	lsls	r2, r2, #3
 8020d24:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020d28:	b2d2      	uxtb	r2, r2
 8020d2a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020d2e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020d32:	fb14 f40c 	smulbb	r4, r4, ip
 8020d36:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020d3a:	fb12 f20c 	smulbb	r2, r2, ip
 8020d3e:	fb16 f60c 	smulbb	r6, r6, ip
 8020d42:	4474      	add	r4, lr
 8020d44:	441a      	add	r2, r3
 8020d46:	b2a4      	uxth	r4, r4
 8020d48:	443e      	add	r6, r7
 8020d4a:	b292      	uxth	r2, r2
 8020d4c:	f104 0a01 	add.w	sl, r4, #1
 8020d50:	b2b6      	uxth	r6, r6
 8020d52:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020d56:	f102 0a01 	add.w	sl, r2, #1
 8020d5a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020d5e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020d62:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020d66:	4322      	orrs	r2, r4
 8020d68:	1c74      	adds	r4, r6, #1
 8020d6a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020d6e:	0976      	lsrs	r6, r6, #5
 8020d70:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020d74:	4332      	orrs	r2, r6
 8020d76:	f821 2b02 	strh.w	r2, [r1], #2
 8020d7a:	e7cb      	b.n	8020d14 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8020d7c:	4441      	add	r1, r8
 8020d7e:	e7c5      	b.n	8020d0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020d80:	0973      	lsrs	r3, r6, #5
 8020d82:	4f22      	ldr	r7, [pc, #136]	; (8020e0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8020d84:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020d88:	ea08 0707 	and.w	r7, r8, r7
 8020d8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020d90:	433b      	orrs	r3, r7
 8020d92:	07e7      	lsls	r7, r4, #31
 8020d94:	ea43 0306 	orr.w	r3, r3, r6
 8020d98:	b29b      	uxth	r3, r3
 8020d9a:	d50b      	bpl.n	8020db4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020d9c:	0040      	lsls	r0, r0, #1
 8020d9e:	0052      	lsls	r2, r2, #1
 8020da0:	42a9      	cmp	r1, r5
 8020da2:	d231      	bcs.n	8020e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020da4:	180c      	adds	r4, r1, r0
 8020da6:	42a1      	cmp	r1, r4
 8020da8:	d202      	bcs.n	8020db0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020daa:	f821 3b02 	strh.w	r3, [r1], #2
 8020dae:	e7fa      	b.n	8020da6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020db0:	4411      	add	r1, r2
 8020db2:	e7f5      	b.n	8020da0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8020db4:	078e      	lsls	r6, r1, #30
 8020db6:	d008      	beq.n	8020dca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020db8:	0066      	lsls	r6, r4, #1
 8020dba:	460a      	mov	r2, r1
 8020dbc:	42aa      	cmp	r2, r5
 8020dbe:	d202      	bcs.n	8020dc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020dc0:	8013      	strh	r3, [r2, #0]
 8020dc2:	4432      	add	r2, r6
 8020dc4:	e7fa      	b.n	8020dbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8020dc6:	3102      	adds	r1, #2
 8020dc8:	3801      	subs	r0, #1
 8020dca:	07c2      	lsls	r2, r0, #31
 8020dcc:	d50b      	bpl.n	8020de6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8020dce:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020dd2:	0066      	lsls	r6, r4, #1
 8020dd4:	3a01      	subs	r2, #1
 8020dd6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020dda:	42aa      	cmp	r2, r5
 8020ddc:	d202      	bcs.n	8020de4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8020dde:	8013      	strh	r3, [r2, #0]
 8020de0:	4432      	add	r2, r6
 8020de2:	e7fa      	b.n	8020dda <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8020de4:	3801      	subs	r0, #1
 8020de6:	b178      	cbz	r0, 8020e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020de8:	1040      	asrs	r0, r0, #1
 8020dea:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020dee:	0080      	lsls	r0, r0, #2
 8020df0:	0064      	lsls	r4, r4, #1
 8020df2:	42a9      	cmp	r1, r5
 8020df4:	d208      	bcs.n	8020e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020df6:	180e      	adds	r6, r1, r0
 8020df8:	460a      	mov	r2, r1
 8020dfa:	42b2      	cmp	r2, r6
 8020dfc:	d202      	bcs.n	8020e04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020dfe:	f842 3b04 	str.w	r3, [r2], #4
 8020e02:	e7fa      	b.n	8020dfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8020e04:	4421      	add	r1, r4
 8020e06:	e7f4      	b.n	8020df2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8020e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e0c:	00fff800 	.word	0x00fff800

08020e10 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020e10:	2200      	movs	r2, #0
 8020e12:	4912      	ldr	r1, [pc, #72]	; (8020e5c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8020e14:	6042      	str	r2, [r0, #4]
 8020e16:	6001      	str	r1, [r0, #0]
 8020e18:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020e1c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020e20:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020e24:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020e28:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020e2c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020e30:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020e34:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020e38:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020e3c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020e40:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020e44:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020e48:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020e4c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020e50:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 8020e54:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8020e58:	4770      	bx	lr
 8020e5a:	bf00      	nop
 8020e5c:	0802fd08 	.word	0x0802fd08

08020e60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e64:	b08d      	sub	sp, #52	; 0x34
 8020e66:	460d      	mov	r5, r1
 8020e68:	4604      	mov	r4, r0
 8020e6a:	4699      	mov	r9, r3
 8020e6c:	6808      	ldr	r0, [r1, #0]
 8020e6e:	ab08      	add	r3, sp, #32
 8020e70:	6849      	ldr	r1, [r1, #4]
 8020e72:	c303      	stmia	r3!, {r0, r1}
 8020e74:	6810      	ldr	r0, [r2, #0]
 8020e76:	ab0a      	add	r3, sp, #40	; 0x28
 8020e78:	6851      	ldr	r1, [r2, #4]
 8020e7a:	c303      	stmia	r3!, {r0, r1}
 8020e7c:	a808      	add	r0, sp, #32
 8020e7e:	f7f8 fe9d 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e82:	4629      	mov	r1, r5
 8020e84:	a80a      	add	r0, sp, #40	; 0x28
 8020e86:	4d67      	ldr	r5, [pc, #412]	; (8021024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020e88:	f7f8 fec0 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e8c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020e90:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020e94:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020e98:	6828      	ldr	r0, [r5, #0]
 8020e9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020e9e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8020ea2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020ea6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020eaa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020eae:	440a      	add	r2, r1
 8020eb0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020eb4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020eb8:	4413      	add	r3, r2
 8020eba:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020ebe:	6803      	ldr	r3, [r0, #0]
 8020ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ec2:	4798      	blx	r3
 8020ec4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020ec8:	d119      	bne.n	8020efe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020eca:	f010 0f20 	tst.w	r0, #32
 8020ece:	6828      	ldr	r0, [r5, #0]
 8020ed0:	d018      	beq.n	8020f04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020ed2:	2500      	movs	r5, #0
 8020ed4:	6801      	ldr	r1, [r0, #0]
 8020ed6:	b2b6      	uxth	r6, r6
 8020ed8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020edc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020ee0:	9601      	str	r6, [sp, #4]
 8020ee2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020ee6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020eea:	9502      	str	r5, [sp, #8]
 8020eec:	fa1f f588 	uxth.w	r5, r8
 8020ef0:	9500      	str	r5, [sp, #0]
 8020ef2:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020ef4:	4621      	mov	r1, r4
 8020ef6:	47a8      	blx	r5
 8020ef8:	b00d      	add	sp, #52	; 0x34
 8020efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020f02:	e7e4      	b.n	8020ece <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020f04:	6803      	ldr	r3, [r0, #0]
 8020f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020f08:	4798      	blx	r3
 8020f0a:	4947      	ldr	r1, [pc, #284]	; (8021028 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020f0c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020f10:	880b      	ldrh	r3, [r1, #0]
 8020f12:	468a      	mov	sl, r1
 8020f14:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8020f18:	fb03 5202 	mla	r2, r3, r2, r5
 8020f1c:	4373      	muls	r3, r6
 8020f1e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020f22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020f26:	9307      	str	r3, [sp, #28]
 8020f28:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020f2c:	9306      	str	r3, [sp, #24]
 8020f2e:	9b07      	ldr	r3, [sp, #28]
 8020f30:	4298      	cmp	r0, r3
 8020f32:	d270      	bcs.n	8021016 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8020f34:	9b06      	ldr	r3, [sp, #24]
 8020f36:	4621      	mov	r1, r4
 8020f38:	eb00 0b03 	add.w	fp, r0, r3
 8020f3c:	4558      	cmp	r0, fp
 8020f3e:	d25d      	bcs.n	8020ffc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020f40:	f851 4b04 	ldr.w	r4, [r1], #4
 8020f44:	0e23      	lsrs	r3, r4, #24
 8020f46:	d014      	beq.n	8020f72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020f48:	2bff      	cmp	r3, #255	; 0xff
 8020f4a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020f4e:	d112      	bne.n	8020f76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020f50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020f54:	d10f      	bne.n	8020f76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020f56:	0963      	lsrs	r3, r4, #5
 8020f58:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020f5c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020f60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f64:	f02c 0c07 	bic.w	ip, ip, #7
 8020f68:	ea43 0c0c 	orr.w	ip, r3, ip
 8020f6c:	ea4c 0404 	orr.w	r4, ip, r4
 8020f70:	8004      	strh	r4, [r0, #0]
 8020f72:	3002      	adds	r0, #2
 8020f74:	e7e2      	b.n	8020f3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8020f76:	fb09 f303 	mul.w	r3, r9, r3
 8020f7a:	8807      	ldrh	r7, [r0, #0]
 8020f7c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8020f80:	fa5f fc8c 	uxtb.w	ip, ip
 8020f84:	1c5a      	adds	r2, r3, #1
 8020f86:	123e      	asrs	r6, r7, #8
 8020f88:	10fd      	asrs	r5, r7, #3
 8020f8a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020f8e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020f92:	00ff      	lsls	r7, r7, #3
 8020f94:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020f98:	1212      	asrs	r2, r2, #8
 8020f9a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020f9e:	b293      	uxth	r3, r2
 8020fa0:	43d2      	mvns	r2, r2
 8020fa2:	b2ff      	uxtb	r7, r7
 8020fa4:	fb1e fe03 	smulbb	lr, lr, r3
 8020fa8:	b2d2      	uxtb	r2, r2
 8020faa:	fb1c fc03 	smulbb	ip, ip, r3
 8020fae:	b2e4      	uxtb	r4, r4
 8020fb0:	fb06 e602 	mla	r6, r6, r2, lr
 8020fb4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020fb8:	fb14 f403 	smulbb	r4, r4, r3
 8020fbc:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020fc0:	b2b6      	uxth	r6, r6
 8020fc2:	fb05 c502 	mla	r5, r5, r2, ip
 8020fc6:	fb07 4702 	mla	r7, r7, r2, r4
 8020fca:	f106 0e01 	add.w	lr, r6, #1
 8020fce:	b2ad      	uxth	r5, r5
 8020fd0:	b2bf      	uxth	r7, r7
 8020fd2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020fd6:	f105 0c01 	add.w	ip, r5, #1
 8020fda:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8020fde:	1c7e      	adds	r6, r7, #1
 8020fe0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020fe4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020fe8:	096d      	lsrs	r5, r5, #5
 8020fea:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020fee:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020ff2:	ea46 060e 	orr.w	r6, r6, lr
 8020ff6:	432e      	orrs	r6, r5
 8020ff8:	8006      	strh	r6, [r0, #0]
 8020ffa:	e7ba      	b.n	8020f72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020ffc:	f8ba 3000 	ldrh.w	r3, [sl]
 8021000:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8021004:	eba3 0308 	sub.w	r3, r3, r8
 8021008:	eba4 0408 	sub.w	r4, r4, r8
 802100c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021010:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021014:	e78b      	b.n	8020f2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021016:	4b03      	ldr	r3, [pc, #12]	; (8021024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021018:	6818      	ldr	r0, [r3, #0]
 802101a:	6803      	ldr	r3, [r0, #0]
 802101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802101e:	4798      	blx	r3
 8021020:	e76a      	b.n	8020ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021022:	bf00      	nop
 8021024:	20015120 	.word	0x20015120
 8021028:	2001511a 	.word	0x2001511a

0802102c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 802102c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021030:	b085      	sub	sp, #20
 8021032:	6810      	ldr	r0, [r2, #0]
 8021034:	460c      	mov	r4, r1
 8021036:	6851      	ldr	r1, [r2, #4]
 8021038:	466d      	mov	r5, sp
 802103a:	4616      	mov	r6, r2
 802103c:	c503      	stmia	r5!, {r0, r1}
 802103e:	6818      	ldr	r0, [r3, #0]
 8021040:	6859      	ldr	r1, [r3, #4]
 8021042:	c503      	stmia	r5!, {r0, r1}
 8021044:	4668      	mov	r0, sp
 8021046:	4d2e      	ldr	r5, [pc, #184]	; (8021100 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021048:	f7f8 fdb8 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802104c:	4631      	mov	r1, r6
 802104e:	a802      	add	r0, sp, #8
 8021050:	4e2c      	ldr	r6, [pc, #176]	; (8021104 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021052:	f7f8 fddb 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021056:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802105a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802105e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021062:	6828      	ldr	r0, [r5, #0]
 8021064:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021068:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 802106c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021070:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021074:	f8bd 1000 	ldrh.w	r1, [sp]
 8021078:	440a      	add	r2, r1
 802107a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802107e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021082:	4413      	add	r3, r2
 8021084:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021088:	6803      	ldr	r3, [r0, #0]
 802108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802108c:	4798      	blx	r3
 802108e:	8833      	ldrh	r3, [r6, #0]
 8021090:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021094:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021098:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 802109c:	f8df e068 	ldr.w	lr, [pc, #104]	; 8021108 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80210a0:	fb03 1202 	mla	r2, r3, r2, r1
 80210a4:	fb08 f303 	mul.w	r3, r8, r3
 80210a8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80210ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80210b0:	4298      	cmp	r0, r3
 80210b2:	d21d      	bcs.n	80210f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80210b4:	eb00 080c 	add.w	r8, r0, ip
 80210b8:	4540      	cmp	r0, r8
 80210ba:	d20f      	bcs.n	80210dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80210bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80210c0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80210c4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80210c8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80210cc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80210d0:	ea42 0209 	orr.w	r2, r2, r9
 80210d4:	430a      	orrs	r2, r1
 80210d6:	f820 2b02 	strh.w	r2, [r0], #2
 80210da:	e7ed      	b.n	80210b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80210dc:	8832      	ldrh	r2, [r6, #0]
 80210de:	1bd2      	subs	r2, r2, r7
 80210e0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80210e4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80210e8:	1bd2      	subs	r2, r2, r7
 80210ea:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80210ee:	e7df      	b.n	80210b0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80210f0:	6828      	ldr	r0, [r5, #0]
 80210f2:	6803      	ldr	r3, [r0, #0]
 80210f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210f6:	4798      	blx	r3
 80210f8:	b005      	add	sp, #20
 80210fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80210fe:	bf00      	nop
 8021100:	20015120 	.word	0x20015120
 8021104:	2001511a 	.word	0x2001511a
 8021108:	fffff800 	.word	0xfffff800

0802110c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 802110c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021110:	b08e      	sub	sp, #56	; 0x38
 8021112:	460e      	mov	r6, r1
 8021114:	4604      	mov	r4, r0
 8021116:	461d      	mov	r5, r3
 8021118:	6808      	ldr	r0, [r1, #0]
 802111a:	ab0a      	add	r3, sp, #40	; 0x28
 802111c:	6849      	ldr	r1, [r1, #4]
 802111e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80212f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8021122:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80212f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021126:	c303      	stmia	r3!, {r0, r1}
 8021128:	6810      	ldr	r0, [r2, #0]
 802112a:	ab0c      	add	r3, sp, #48	; 0x30
 802112c:	6851      	ldr	r1, [r2, #4]
 802112e:	c303      	stmia	r3!, {r0, r1}
 8021130:	a80a      	add	r0, sp, #40	; 0x28
 8021132:	f7f8 fd43 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021136:	4631      	mov	r1, r6
 8021138:	a80c      	add	r0, sp, #48	; 0x30
 802113a:	f7f8 fd67 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802113e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021142:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021146:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802114a:	f8d8 0000 	ldr.w	r0, [r8]
 802114e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021152:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021156:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 802115a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802115e:	440c      	add	r4, r1
 8021160:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021164:	440a      	add	r2, r1
 8021166:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802116a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802116e:	4413      	add	r3, r2
 8021170:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021174:	6803      	ldr	r3, [r0, #0]
 8021176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021178:	4798      	blx	r3
 802117a:	2dff      	cmp	r5, #255	; 0xff
 802117c:	d124      	bne.n	80211c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802117e:	f010 0f01 	tst.w	r0, #1
 8021182:	f8d8 0000 	ldr.w	r0, [r8]
 8021186:	d022      	beq.n	80211ce <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8021188:	2100      	movs	r1, #0
 802118a:	f04f 0e01 	mov.w	lr, #1
 802118e:	f8d0 c000 	ldr.w	ip, [r0]
 8021192:	b2b6      	uxth	r6, r6
 8021194:	f8cd e018 	str.w	lr, [sp, #24]
 8021198:	b2bf      	uxth	r7, r7
 802119a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 802119e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80211a2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80211a6:	f8b9 e000 	ldrh.w	lr, [r9]
 80211aa:	9503      	str	r5, [sp, #12]
 80211ac:	9601      	str	r6, [sp, #4]
 80211ae:	9700      	str	r7, [sp, #0]
 80211b0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80211b4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80211b8:	9102      	str	r1, [sp, #8]
 80211ba:	4621      	mov	r1, r4
 80211bc:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80211c0:	47a8      	blx	r5
 80211c2:	b00e      	add	sp, #56	; 0x38
 80211c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211c8:	f010 0f04 	tst.w	r0, #4
 80211cc:	e7d9      	b.n	8021182 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80211ce:	6803      	ldr	r3, [r0, #0]
 80211d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80211d2:	4798      	blx	r3
 80211d4:	f8b9 3000 	ldrh.w	r3, [r9]
 80211d8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80211dc:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80211e0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80211e4:	435e      	muls	r6, r3
 80211e6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80211ea:	2dff      	cmp	r5, #255	; 0xff
 80211ec:	fb03 1202 	mla	r2, r3, r2, r1
 80211f0:	ebac 0c07 	sub.w	ip, ip, r7
 80211f4:	eba3 0707 	sub.w	r7, r3, r7
 80211f8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80211fc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021200:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021204:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021208:	d049      	beq.n	802129e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 802120a:	43eb      	mvns	r3, r5
 802120c:	fa1f f985 	uxth.w	r9, r5
 8021210:	b2db      	uxtb	r3, r3
 8021212:	42b0      	cmp	r0, r6
 8021214:	d266      	bcs.n	80212e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021216:	eb00 0a0e 	add.w	sl, r0, lr
 802121a:	4550      	cmp	r0, sl
 802121c:	4621      	mov	r1, r4
 802121e:	f104 0403 	add.w	r4, r4, #3
 8021222:	d25b      	bcs.n	80212dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021224:	8802      	ldrh	r2, [r0, #0]
 8021226:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802122a:	ea4f 2822 	mov.w	r8, r2, asr #8
 802122e:	fb11 f109 	smulbb	r1, r1, r9
 8021232:	10d5      	asrs	r5, r2, #3
 8021234:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021238:	00d2      	lsls	r2, r2, #3
 802123a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802123e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8021242:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021246:	fb08 1803 	mla	r8, r8, r3, r1
 802124a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802124e:	b2d2      	uxtb	r2, r2
 8021250:	fb11 f109 	smulbb	r1, r1, r9
 8021254:	fa1f f888 	uxth.w	r8, r8
 8021258:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802125c:	fb05 1503 	mla	r5, r5, r3, r1
 8021260:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021264:	fb11 f109 	smulbb	r1, r1, r9
 8021268:	b2ad      	uxth	r5, r5
 802126a:	fb02 1203 	mla	r2, r2, r3, r1
 802126e:	f108 0101 	add.w	r1, r8, #1
 8021272:	b292      	uxth	r2, r2
 8021274:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021278:	1c51      	adds	r1, r2, #1
 802127a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802127e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021282:	1c69      	adds	r1, r5, #1
 8021284:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021288:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802128c:	096d      	lsrs	r5, r5, #5
 802128e:	ea42 0208 	orr.w	r2, r2, r8
 8021292:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021296:	432a      	orrs	r2, r5
 8021298:	f820 2b02 	strh.w	r2, [r0], #2
 802129c:	e7bd      	b.n	802121a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802129e:	4a14      	ldr	r2, [pc, #80]	; (80212f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80212a0:	42b0      	cmp	r0, r6
 80212a2:	d21f      	bcs.n	80212e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80212a4:	eb00 050e 	add.w	r5, r0, lr
 80212a8:	42a8      	cmp	r0, r5
 80212aa:	4621      	mov	r1, r4
 80212ac:	f104 0403 	add.w	r4, r4, #3
 80212b0:	d210      	bcs.n	80212d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80212b2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80212b6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80212ba:	00db      	lsls	r3, r3, #3
 80212bc:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80212c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80212c4:	430b      	orrs	r3, r1
 80212c6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80212ca:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80212ce:	f820 3b02 	strh.w	r3, [r0], #2
 80212d2:	e7e9      	b.n	80212a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80212d4:	4438      	add	r0, r7
 80212d6:	eb01 040c 	add.w	r4, r1, ip
 80212da:	e7e1      	b.n	80212a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80212dc:	4438      	add	r0, r7
 80212de:	eb01 040c 	add.w	r4, r1, ip
 80212e2:	e796      	b.n	8021212 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80212e4:	4b03      	ldr	r3, [pc, #12]	; (80212f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80212e6:	6818      	ldr	r0, [r3, #0]
 80212e8:	6803      	ldr	r3, [r0, #0]
 80212ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80212ec:	4798      	blx	r3
 80212ee:	e768      	b.n	80211c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80212f0:	fffff800 	.word	0xfffff800
 80212f4:	20015120 	.word	0x20015120
 80212f8:	2001511a 	.word	0x2001511a

080212fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80212fc:	b4f0      	push	{r4, r5, r6, r7}
 80212fe:	4616      	mov	r6, r2
 8021300:	461c      	mov	r4, r3
 8021302:	460d      	mov	r5, r1
 8021304:	9a04      	ldr	r2, [sp, #16]
 8021306:	2e01      	cmp	r6, #1
 8021308:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802130c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8021310:	d012      	beq.n	8021338 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8021312:	d303      	bcc.n	802131c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8021314:	2e02      	cmp	r6, #2
 8021316:	d00a      	beq.n	802132e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8021318:	bcf0      	pop	{r4, r5, r6, r7}
 802131a:	4770      	bx	lr
 802131c:	6805      	ldr	r5, [r0, #0]
 802131e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8021322:	68ed      	ldr	r5, [r5, #12]
 8021324:	4613      	mov	r3, r2
 8021326:	4622      	mov	r2, r4
 8021328:	46ac      	mov	ip, r5
 802132a:	bcf0      	pop	{r4, r5, r6, r7}
 802132c:	4760      	bx	ip
 802132e:	4621      	mov	r1, r4
 8021330:	4628      	mov	r0, r5
 8021332:	bcf0      	pop	{r4, r5, r6, r7}
 8021334:	f7ff bd94 	b.w	8020e60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021338:	4621      	mov	r1, r4
 802133a:	4628      	mov	r0, r5
 802133c:	bcf0      	pop	{r4, r5, r6, r7}
 802133e:	f7ff bee5 	b.w	802110c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08021344 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021348:	b093      	sub	sp, #76	; 0x4c
 802134a:	4681      	mov	r9, r0
 802134c:	4688      	mov	r8, r1
 802134e:	6810      	ldr	r0, [r2, #0]
 8021350:	6851      	ldr	r1, [r2, #4]
 8021352:	ac0e      	add	r4, sp, #56	; 0x38
 8021354:	4616      	mov	r6, r2
 8021356:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 802135a:	4f6b      	ldr	r7, [pc, #428]	; (8021508 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 802135c:	c403      	stmia	r4!, {r0, r1}
 802135e:	6818      	ldr	r0, [r3, #0]
 8021360:	ac10      	add	r4, sp, #64	; 0x40
 8021362:	6859      	ldr	r1, [r3, #4]
 8021364:	c403      	stmia	r4!, {r0, r1}
 8021366:	a80e      	add	r0, sp, #56	; 0x38
 8021368:	f7f8 fc28 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802136c:	4631      	mov	r1, r6
 802136e:	a810      	add	r0, sp, #64	; 0x40
 8021370:	4e66      	ldr	r6, [pc, #408]	; (802150c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8021372:	f7f8 fc4b 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021376:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802137a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802137e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021382:	6830      	ldr	r0, [r6, #0]
 8021384:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021388:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 802138c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021390:	4489      	add	r9, r1
 8021392:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021396:	440a      	add	r2, r1
 8021398:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802139c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80213a0:	4413      	add	r3, r2
 80213a2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80213a6:	6803      	ldr	r3, [r0, #0]
 80213a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80213aa:	4798      	blx	r3
 80213ac:	f010 0f80 	tst.w	r0, #128	; 0x80
 80213b0:	6830      	ldr	r0, [r6, #0]
 80213b2:	d01d      	beq.n	80213f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80213b4:	2200      	movs	r2, #0
 80213b6:	6801      	ldr	r1, [r0, #0]
 80213b8:	b2a4      	uxth	r4, r4
 80213ba:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80213be:	b2ad      	uxth	r5, r5
 80213c0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80213c4:	220b      	movs	r2, #11
 80213c6:	9207      	str	r2, [sp, #28]
 80213c8:	883a      	ldrh	r2, [r7, #0]
 80213ca:	9502      	str	r5, [sp, #8]
 80213cc:	9206      	str	r2, [sp, #24]
 80213ce:	2201      	movs	r2, #1
 80213d0:	9401      	str	r4, [sp, #4]
 80213d2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80213d6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80213da:	9203      	str	r2, [sp, #12]
 80213dc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80213e0:	9200      	str	r2, [sp, #0]
 80213e2:	4642      	mov	r2, r8
 80213e4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80213e6:	4649      	mov	r1, r9
 80213e8:	47a0      	blx	r4
 80213ea:	b013      	add	sp, #76	; 0x4c
 80213ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213f0:	6803      	ldr	r3, [r0, #0]
 80213f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80213f4:	4798      	blx	r3
 80213f6:	883b      	ldrh	r3, [r7, #0]
 80213f8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80213fc:	f04f 0e04 	mov.w	lr, #4
 8021400:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021404:	435d      	muls	r5, r3
 8021406:	fb03 1202 	mla	r2, r3, r2, r1
 802140a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802140e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8021412:	920c      	str	r2, [sp, #48]	; 0x30
 8021414:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021418:	1b12      	subs	r2, r2, r4
 802141a:	920d      	str	r2, [sp, #52]	; 0x34
 802141c:	0062      	lsls	r2, r4, #1
 802141e:	1b1c      	subs	r4, r3, r4
 8021420:	920a      	str	r2, [sp, #40]	; 0x28
 8021422:	0063      	lsls	r3, r4, #1
 8021424:	930b      	str	r3, [sp, #44]	; 0x2c
 8021426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021428:	4298      	cmp	r0, r3
 802142a:	d266      	bcs.n	80214fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 802142c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802142e:	eb00 0b03 	add.w	fp, r0, r3
 8021432:	4558      	cmp	r0, fp
 8021434:	d25c      	bcs.n	80214f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8021436:	f819 3b01 	ldrb.w	r3, [r9], #1
 802143a:	fb1e e303 	smlabb	r3, lr, r3, lr
 802143e:	f858 2003 	ldr.w	r2, [r8, r3]
 8021442:	0e11      	lsrs	r1, r2, #24
 8021444:	d012      	beq.n	802146c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021446:	29ff      	cmp	r1, #255	; 0xff
 8021448:	ea4f 2712 	mov.w	r7, r2, lsr #8
 802144c:	d110      	bne.n	8021470 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802144e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021452:	d10d      	bne.n	8021470 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021454:	0953      	lsrs	r3, r2, #5
 8021456:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 802145a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802145e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021462:	f027 0707 	bic.w	r7, r7, #7
 8021466:	431f      	orrs	r7, r3
 8021468:	433a      	orrs	r2, r7
 802146a:	8002      	strh	r2, [r0, #0]
 802146c:	3002      	adds	r0, #2
 802146e:	e7e0      	b.n	8021432 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8021470:	fb0a f101 	mul.w	r1, sl, r1
 8021474:	8806      	ldrh	r6, [r0, #0]
 8021476:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802147a:	b2d2      	uxtb	r2, r2
 802147c:	1c4b      	adds	r3, r1, #1
 802147e:	1235      	asrs	r5, r6, #8
 8021480:	10f4      	asrs	r4, r6, #3
 8021482:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021486:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802148a:	00f6      	lsls	r6, r6, #3
 802148c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021490:	121b      	asrs	r3, r3, #8
 8021492:	b2f6      	uxtb	r6, r6
 8021494:	b299      	uxth	r1, r3
 8021496:	43db      	mvns	r3, r3
 8021498:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802149c:	fb1c fc01 	smulbb	ip, ip, r1
 80214a0:	b2db      	uxtb	r3, r3
 80214a2:	fb12 f201 	smulbb	r2, r2, r1
 80214a6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80214aa:	fb05 c503 	mla	r5, r5, r3, ip
 80214ae:	b2ff      	uxtb	r7, r7
 80214b0:	fb06 2203 	mla	r2, r6, r3, r2
 80214b4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80214b8:	fb17 f701 	smulbb	r7, r7, r1
 80214bc:	b2ad      	uxth	r5, r5
 80214be:	b292      	uxth	r2, r2
 80214c0:	fb04 7403 	mla	r4, r4, r3, r7
 80214c4:	f105 0c01 	add.w	ip, r5, #1
 80214c8:	1c57      	adds	r7, r2, #1
 80214ca:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80214ce:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80214d2:	b2a4      	uxth	r4, r4
 80214d4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80214d8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80214dc:	433d      	orrs	r5, r7
 80214de:	1c67      	adds	r7, r4, #1
 80214e0:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80214e4:	0964      	lsrs	r4, r4, #5
 80214e6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80214ea:	4325      	orrs	r5, r4
 80214ec:	8005      	strh	r5, [r0, #0]
 80214ee:	e7bd      	b.n	802146c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80214f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214f2:	4418      	add	r0, r3
 80214f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214f6:	4499      	add	r9, r3
 80214f8:	e795      	b.n	8021426 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80214fa:	4b04      	ldr	r3, [pc, #16]	; (802150c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80214fc:	6818      	ldr	r0, [r3, #0]
 80214fe:	6803      	ldr	r3, [r0, #0]
 8021500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021502:	4798      	blx	r3
 8021504:	e771      	b.n	80213ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8021506:	bf00      	nop
 8021508:	2001511a 	.word	0x2001511a
 802150c:	20015120 	.word	0x20015120

08021510 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021514:	b087      	sub	sp, #28
 8021516:	4680      	mov	r8, r0
 8021518:	460d      	mov	r5, r1
 802151a:	4614      	mov	r4, r2
 802151c:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8021520:	2e00      	cmp	r6, #0
 8021522:	f000 80b9 	beq.w	8021698 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8021526:	6810      	ldr	r0, [r2, #0]
 8021528:	af02      	add	r7, sp, #8
 802152a:	6851      	ldr	r1, [r2, #4]
 802152c:	c703      	stmia	r7!, {r0, r1}
 802152e:	6818      	ldr	r0, [r3, #0]
 8021530:	af04      	add	r7, sp, #16
 8021532:	6859      	ldr	r1, [r3, #4]
 8021534:	c703      	stmia	r7!, {r0, r1}
 8021536:	a802      	add	r0, sp, #8
 8021538:	f7f8 fb40 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802153c:	4621      	mov	r1, r4
 802153e:	a804      	add	r0, sp, #16
 8021540:	f7f8 fb64 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021544:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021548:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802154c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021550:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021554:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021558:	eb08 0401 	add.w	r4, r8, r1
 802155c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021560:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021564:	440a      	add	r2, r1
 8021566:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802156a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802156e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021572:	4413      	add	r3, r2
 8021574:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021578:	4b49      	ldr	r3, [pc, #292]	; (80216a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802157a:	6818      	ldr	r0, [r3, #0]
 802157c:	6803      	ldr	r3, [r0, #0]
 802157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021580:	4798      	blx	r3
 8021582:	4b48      	ldr	r3, [pc, #288]	; (80216a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8021584:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021588:	2eff      	cmp	r6, #255	; 0xff
 802158a:	881a      	ldrh	r2, [r3, #0]
 802158c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8021590:	fb02 c101 	mla	r1, r2, r1, ip
 8021594:	fb02 f207 	mul.w	r2, r2, r7
 8021598:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802159c:	f105 0104 	add.w	r1, r5, #4
 80215a0:	461d      	mov	r5, r3
 80215a2:	d05a      	beq.n	802165a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 80215a4:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 80215a8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80215ac:	b2b6      	uxth	r6, r6
 80215ae:	9301      	str	r3, [sp, #4]
 80215b0:	fa1f fe8e 	uxth.w	lr, lr
 80215b4:	4282      	cmp	r2, r0
 80215b6:	d96a      	bls.n	802168e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80215b8:	eb00 0b0a 	add.w	fp, r0, sl
 80215bc:	4583      	cmp	fp, r0
 80215be:	d940      	bls.n	8021642 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80215c0:	8805      	ldrh	r5, [r0, #0]
 80215c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80215c6:	122f      	asrs	r7, r5, #8
 80215c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80215cc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80215d0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80215d4:	00ed      	lsls	r5, r5, #3
 80215d6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80215da:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80215de:	fb17 f70e 	smulbb	r7, r7, lr
 80215e2:	b2ed      	uxtb	r5, r5
 80215e4:	fb19 f90e 	smulbb	r9, r9, lr
 80215e8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80215ec:	fb15 f50e 	smulbb	r5, r5, lr
 80215f0:	fb0c 7c06 	mla	ip, ip, r6, r7
 80215f4:	10df      	asrs	r7, r3, #3
 80215f6:	00db      	lsls	r3, r3, #3
 80215f8:	fa1f fc8c 	uxth.w	ip, ip
 80215fc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021600:	b2db      	uxtb	r3, r3
 8021602:	fb07 9706 	mla	r7, r7, r6, r9
 8021606:	f10c 0901 	add.w	r9, ip, #1
 802160a:	fb03 5306 	mla	r3, r3, r6, r5
 802160e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8021612:	b29b      	uxth	r3, r3
 8021614:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8021618:	b2bf      	uxth	r7, r7
 802161a:	f103 0c01 	add.w	ip, r3, #1
 802161e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021622:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021626:	ea4c 0c09 	orr.w	ip, ip, r9
 802162a:	f107 0901 	add.w	r9, r7, #1
 802162e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8021632:	097f      	lsrs	r7, r7, #5
 8021634:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021638:	ea4c 0c07 	orr.w	ip, ip, r7
 802163c:	f820 cb02 	strh.w	ip, [r0], #2
 8021640:	e7bc      	b.n	80215bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8021642:	9b01      	ldr	r3, [sp, #4]
 8021644:	881b      	ldrh	r3, [r3, #0]
 8021646:	eba3 0308 	sub.w	r3, r3, r8
 802164a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802164e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021652:	eba3 0308 	sub.w	r3, r3, r8
 8021656:	441c      	add	r4, r3
 8021658:	e7ac      	b.n	80215b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 802165a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802165e:	4282      	cmp	r2, r0
 8021660:	d915      	bls.n	802168e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8021662:	eb00 060a 	add.w	r6, r0, sl
 8021666:	4286      	cmp	r6, r0
 8021668:	d906      	bls.n	8021678 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 802166a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802166e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021672:	f820 3b02 	strh.w	r3, [r0], #2
 8021676:	e7f6      	b.n	8021666 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8021678:	882b      	ldrh	r3, [r5, #0]
 802167a:	eba3 0308 	sub.w	r3, r3, r8
 802167e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021682:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021686:	eba3 0308 	sub.w	r3, r3, r8
 802168a:	441c      	add	r4, r3
 802168c:	e7e7      	b.n	802165e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 802168e:	4b04      	ldr	r3, [pc, #16]	; (80216a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8021690:	6818      	ldr	r0, [r3, #0]
 8021692:	6803      	ldr	r3, [r0, #0]
 8021694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021696:	4798      	blx	r3
 8021698:	b007      	add	sp, #28
 802169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802169e:	bf00      	nop
 80216a0:	20015120 	.word	0x20015120
 80216a4:	2001511a 	.word	0x2001511a

080216a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80216a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216ac:	b091      	sub	sp, #68	; 0x44
 80216ae:	4680      	mov	r8, r0
 80216b0:	460f      	mov	r7, r1
 80216b2:	4614      	mov	r4, r2
 80216b4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 80216b8:	2d00      	cmp	r5, #0
 80216ba:	d051      	beq.n	8021760 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80216bc:	6810      	ldr	r0, [r2, #0]
 80216be:	ae0c      	add	r6, sp, #48	; 0x30
 80216c0:	6851      	ldr	r1, [r2, #4]
 80216c2:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80218c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80216c6:	c603      	stmia	r6!, {r0, r1}
 80216c8:	6818      	ldr	r0, [r3, #0]
 80216ca:	ae0e      	add	r6, sp, #56	; 0x38
 80216cc:	6859      	ldr	r1, [r3, #4]
 80216ce:	c603      	stmia	r6!, {r0, r1}
 80216d0:	a80c      	add	r0, sp, #48	; 0x30
 80216d2:	f7f8 fa73 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216d6:	4621      	mov	r1, r4
 80216d8:	a80e      	add	r0, sp, #56	; 0x38
 80216da:	f7f8 fa97 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216de:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80216e2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80216e6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80216ea:	f8d9 0000 	ldr.w	r0, [r9]
 80216ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 80216f2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80216f6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80216fa:	eb08 0401 	add.w	r4, r8, r1
 80216fe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021702:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80218c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8021706:	440a      	add	r2, r1
 8021708:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 802170c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021710:	4413      	add	r3, r2
 8021712:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021716:	6803      	ldr	r3, [r0, #0]
 8021718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802171a:	4798      	blx	r3
 802171c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021720:	f8d9 0000 	ldr.w	r0, [r9]
 8021724:	d01f      	beq.n	8021766 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8021726:	2200      	movs	r2, #0
 8021728:	6801      	ldr	r1, [r0, #0]
 802172a:	b2b6      	uxth	r6, r6
 802172c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021730:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021734:	220b      	movs	r2, #11
 8021736:	9207      	str	r2, [sp, #28]
 8021738:	f8b8 2000 	ldrh.w	r2, [r8]
 802173c:	9601      	str	r6, [sp, #4]
 802173e:	9206      	str	r2, [sp, #24]
 8021740:	2201      	movs	r2, #1
 8021742:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8021746:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802174a:	9203      	str	r2, [sp, #12]
 802174c:	fa1f f28a 	uxth.w	r2, sl
 8021750:	9202      	str	r2, [sp, #8]
 8021752:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021756:	9200      	str	r2, [sp, #0]
 8021758:	463a      	mov	r2, r7
 802175a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 802175c:	4621      	mov	r1, r4
 802175e:	47a8      	blx	r5
 8021760:	b011      	add	sp, #68	; 0x44
 8021762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021766:	6803      	ldr	r3, [r0, #0]
 8021768:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802176e:	4798      	blx	r3
 8021770:	f8b8 2000 	ldrh.w	r2, [r8]
 8021774:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021778:	2dff      	cmp	r5, #255	; 0xff
 802177a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 802177e:	fb0a fa02 	mul.w	sl, sl, r2
 8021782:	fb02 1303 	mla	r3, r2, r3, r1
 8021786:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802178a:	d062      	beq.n	8021852 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 802178c:	ea6f 0c05 	mvn.w	ip, r5
 8021790:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021794:	b2ad      	uxth	r5, r5
 8021796:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802179a:	fa5f fc8c 	uxtb.w	ip, ip
 802179e:	930a      	str	r3, [sp, #40]	; 0x28
 80217a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217a2:	4298      	cmp	r0, r3
 80217a4:	f080 8085 	bcs.w	80218b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80217a8:	eb00 0b09 	add.w	fp, r0, r9
 80217ac:	4558      	cmp	r0, fp
 80217ae:	d246      	bcs.n	802183e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80217b0:	f814 eb01 	ldrb.w	lr, [r4], #1
 80217b4:	2303      	movs	r3, #3
 80217b6:	2204      	movs	r2, #4
 80217b8:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80217bc:	8803      	ldrh	r3, [r0, #0]
 80217be:	eb07 0a0e 	add.w	sl, r7, lr
 80217c2:	1219      	asrs	r1, r3, #8
 80217c4:	10da      	asrs	r2, r3, #3
 80217c6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80217ca:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80217ce:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80217d2:	00db      	lsls	r3, r3, #3
 80217d4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80217d8:	fb18 f805 	smulbb	r8, r8, r5
 80217dc:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80217e0:	fb1e fe05 	smulbb	lr, lr, r5
 80217e4:	b2db      	uxtb	r3, r3
 80217e6:	fb01 810c 	mla	r1, r1, ip, r8
 80217ea:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80217ee:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80217f2:	fb18 f805 	smulbb	r8, r8, r5
 80217f6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80217fa:	b289      	uxth	r1, r1
 80217fc:	fb02 820c 	mla	r2, r2, ip, r8
 8021800:	fb03 e30c 	mla	r3, r3, ip, lr
 8021804:	f101 0801 	add.w	r8, r1, #1
 8021808:	b292      	uxth	r2, r2
 802180a:	b29b      	uxth	r3, r3
 802180c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021810:	f102 0801 	add.w	r8, r2, #1
 8021814:	f103 0e01 	add.w	lr, r3, #1
 8021818:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 802181c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021820:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021824:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021828:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802182c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021830:	ea4e 0101 	orr.w	r1, lr, r1
 8021834:	ea41 0108 	orr.w	r1, r1, r8
 8021838:	f820 1b02 	strh.w	r1, [r0], #2
 802183c:	e7b6      	b.n	80217ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 802183e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021840:	881b      	ldrh	r3, [r3, #0]
 8021842:	1b9b      	subs	r3, r3, r6
 8021844:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021848:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802184c:	1b9b      	subs	r3, r3, r6
 802184e:	441c      	add	r4, r3
 8021850:	e7a6      	b.n	80217a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021852:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021856:	2203      	movs	r2, #3
 8021858:	2504      	movs	r5, #4
 802185a:	4919      	ldr	r1, [pc, #100]	; (80218c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 802185c:	4550      	cmp	r0, sl
 802185e:	d228      	bcs.n	80218b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021860:	eb00 0c09 	add.w	ip, r0, r9
 8021864:	4560      	cmp	r0, ip
 8021866:	4623      	mov	r3, r4
 8021868:	d219      	bcs.n	802189e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802186a:	f893 e000 	ldrb.w	lr, [r3]
 802186e:	3401      	adds	r4, #1
 8021870:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021874:	eb07 0b0e 	add.w	fp, r7, lr
 8021878:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802187c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021880:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021884:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021888:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802188c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021890:	ea43 030b 	orr.w	r3, r3, fp
 8021894:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8021898:	f820 3b02 	strh.w	r3, [r0], #2
 802189c:	e7e2      	b.n	8021864 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 802189e:	f8b8 3000 	ldrh.w	r3, [r8]
 80218a2:	1b9b      	subs	r3, r3, r6
 80218a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80218a8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80218ac:	1b9b      	subs	r3, r3, r6
 80218ae:	441c      	add	r4, r3
 80218b0:	e7d4      	b.n	802185c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80218b2:	4b04      	ldr	r3, [pc, #16]	; (80218c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80218b4:	6818      	ldr	r0, [r3, #0]
 80218b6:	6803      	ldr	r3, [r0, #0]
 80218b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80218ba:	4798      	blx	r3
 80218bc:	e750      	b.n	8021760 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80218be:	bf00      	nop
 80218c0:	fffff800 	.word	0xfffff800
 80218c4:	20015120 	.word	0x20015120
 80218c8:	2001511a 	.word	0x2001511a

080218cc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80218cc:	b4f0      	push	{r4, r5, r6, r7}
 80218ce:	460c      	mov	r4, r1
 80218d0:	4611      	mov	r1, r2
 80218d2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80218d6:	461a      	mov	r2, r3
 80218d8:	780f      	ldrb	r7, [r1, #0]
 80218da:	9b04      	ldr	r3, [sp, #16]
 80218dc:	2f01      	cmp	r7, #1
 80218de:	784e      	ldrb	r6, [r1, #1]
 80218e0:	d036      	beq.n	8021950 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 80218e2:	d31e      	bcc.n	8021922 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 80218e4:	2f02      	cmp	r7, #2
 80218e6:	d14a      	bne.n	802197e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80218e8:	2e03      	cmp	r6, #3
 80218ea:	d848      	bhi.n	802197e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80218ec:	e8df f006 	tbb	[pc, r6]
 80218f0:	16140702 	.word	0x16140702
 80218f4:	9504      	str	r5, [sp, #16]
 80218f6:	4620      	mov	r0, r4
 80218f8:	bcf0      	pop	{r4, r5, r6, r7}
 80218fa:	f7ff be09 	b.w	8021510 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80218fe:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8021900:	2800      	cmp	r0, #0
 8021902:	d03c      	beq.n	802197e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021904:	6806      	ldr	r6, [r0, #0]
 8021906:	e9cd 3504 	strd	r3, r5, [sp, #16]
 802190a:	68b5      	ldr	r5, [r6, #8]
 802190c:	4613      	mov	r3, r2
 802190e:	46ac      	mov	ip, r5
 8021910:	460a      	mov	r2, r1
 8021912:	4621      	mov	r1, r4
 8021914:	bcf0      	pop	{r4, r5, r6, r7}
 8021916:	4760      	bx	ip
 8021918:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 802191a:	e7f1      	b.n	8021900 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 802191c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8021920:	e7ee      	b.n	8021900 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8021922:	2e03      	cmp	r6, #3
 8021924:	d82b      	bhi.n	802197e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021926:	e8df f006 	tbb	[pc, r6]
 802192a:	0702      	.short	0x0702
 802192c:	100e      	.short	0x100e
 802192e:	9504      	str	r5, [sp, #16]
 8021930:	4620      	mov	r0, r4
 8021932:	bcf0      	pop	{r4, r5, r6, r7}
 8021934:	f7ff bd06 	b.w	8021344 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021938:	6f80      	ldr	r0, [r0, #120]	; 0x78
 802193a:	b300      	cbz	r0, 802197e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 802193c:	6806      	ldr	r6, [r0, #0]
 802193e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021942:	68f5      	ldr	r5, [r6, #12]
 8021944:	e7e2      	b.n	802190c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8021946:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8021948:	e7f7      	b.n	802193a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 802194a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 802194e:	e7f4      	b.n	802193a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8021950:	2e03      	cmp	r6, #3
 8021952:	d814      	bhi.n	802197e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021954:	e8df f006 	tbb	[pc, r6]
 8021958:	100e0702 	.word	0x100e0702
 802195c:	9504      	str	r5, [sp, #16]
 802195e:	4620      	mov	r0, r4
 8021960:	bcf0      	pop	{r4, r5, r6, r7}
 8021962:	f7ff bea1 	b.w	80216a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021966:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8021968:	b148      	cbz	r0, 802197e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 802196a:	6806      	ldr	r6, [r0, #0]
 802196c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021970:	6935      	ldr	r5, [r6, #16]
 8021972:	e7cb      	b.n	802190c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8021974:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8021976:	e7f7      	b.n	8021968 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8021978:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 802197c:	e7f4      	b.n	8021968 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 802197e:	bcf0      	pop	{r4, r5, r6, r7}
 8021980:	4770      	bx	lr
	...

08021984 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021988:	b087      	sub	sp, #28
 802198a:	4604      	mov	r4, r0
 802198c:	460e      	mov	r6, r1
 802198e:	6810      	ldr	r0, [r2, #0]
 8021990:	6851      	ldr	r1, [r2, #4]
 8021992:	ad02      	add	r5, sp, #8
 8021994:	4617      	mov	r7, r2
 8021996:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802199a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021bcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 802199e:	c503      	stmia	r5!, {r0, r1}
 80219a0:	6818      	ldr	r0, [r3, #0]
 80219a2:	ad04      	add	r5, sp, #16
 80219a4:	6859      	ldr	r1, [r3, #4]
 80219a6:	c503      	stmia	r5!, {r0, r1}
 80219a8:	a802      	add	r0, sp, #8
 80219aa:	f7f8 f907 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219ae:	4639      	mov	r1, r7
 80219b0:	a804      	add	r0, sp, #16
 80219b2:	f7f8 f92b 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219b6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80219ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80219be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80219c2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80219c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80219ca:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80219ce:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80219d2:	440e      	add	r6, r1
 80219d4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80219d8:	440a      	add	r2, r1
 80219da:	f8ad 2010 	strh.w	r2, [sp, #16]
 80219de:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80219e2:	4413      	add	r3, r2
 80219e4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80219e8:	4b77      	ldr	r3, [pc, #476]	; (8021bc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80219ea:	6818      	ldr	r0, [r3, #0]
 80219ec:	6803      	ldr	r3, [r0, #0]
 80219ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80219f0:	4798      	blx	r3
 80219f2:	f8b9 b000 	ldrh.w	fp, [r9]
 80219f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80219fa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80219fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a02:	fb05 f50b 	mul.w	r5, r5, fp
 8021a06:	fb0b 2303 	mla	r3, fp, r3, r2
 8021a0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021a0e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021a12:	9300      	str	r3, [sp, #0]
 8021a14:	d069      	beq.n	8021aea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021a16:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021a1a:	4558      	cmp	r0, fp
 8021a1c:	f080 80cc 	bcs.w	8021bb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021a20:	9b00      	ldr	r3, [sp, #0]
 8021a22:	4631      	mov	r1, r6
 8021a24:	18c3      	adds	r3, r0, r3
 8021a26:	9301      	str	r3, [sp, #4]
 8021a28:	9b01      	ldr	r3, [sp, #4]
 8021a2a:	4298      	cmp	r0, r3
 8021a2c:	d24f      	bcs.n	8021ace <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021a32:	2a00      	cmp	r2, #0
 8021a34:	d048      	beq.n	8021ac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021a36:	fb0a f202 	mul.w	r2, sl, r2
 8021a3a:	1c53      	adds	r3, r2, #1
 8021a3c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a40:	121b      	asrs	r3, r3, #8
 8021a42:	d041      	beq.n	8021ac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021a44:	8802      	ldrh	r2, [r0, #0]
 8021a46:	b29e      	uxth	r6, r3
 8021a48:	f8b4 c000 	ldrh.w	ip, [r4]
 8021a4c:	43db      	mvns	r3, r3
 8021a4e:	1215      	asrs	r5, r2, #8
 8021a50:	b2db      	uxtb	r3, r3
 8021a52:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021a56:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021a5a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021a5e:	fb15 f503 	smulbb	r5, r5, r3
 8021a62:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021a66:	00d2      	lsls	r2, r2, #3
 8021a68:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021a6c:	fb07 5706 	mla	r7, r7, r6, r5
 8021a70:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021a74:	b2d2      	uxtb	r2, r2
 8021a76:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021a7a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021a7e:	fb1e fe03 	smulbb	lr, lr, r3
 8021a82:	b2bf      	uxth	r7, r7
 8021a84:	fb12 f203 	smulbb	r2, r2, r3
 8021a88:	fa5f fc8c 	uxtb.w	ip, ip
 8021a8c:	fb05 e506 	mla	r5, r5, r6, lr
 8021a90:	f107 0e01 	add.w	lr, r7, #1
 8021a94:	fb0c 2c06 	mla	ip, ip, r6, r2
 8021a98:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021a9c:	fa1f fc8c 	uxth.w	ip, ip
 8021aa0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021aa4:	b2ad      	uxth	r5, r5
 8021aa6:	f10c 0701 	add.w	r7, ip, #1
 8021aaa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021aae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021ab2:	ea47 070e 	orr.w	r7, r7, lr
 8021ab6:	f105 0e01 	add.w	lr, r5, #1
 8021aba:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021abe:	096d      	lsrs	r5, r5, #5
 8021ac0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ac4:	432f      	orrs	r7, r5
 8021ac6:	8007      	strh	r7, [r0, #0]
 8021ac8:	3002      	adds	r0, #2
 8021aca:	3402      	adds	r4, #2
 8021acc:	e7ac      	b.n	8021a28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021ace:	f8b9 3000 	ldrh.w	r3, [r9]
 8021ad2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021ad6:	eba3 0308 	sub.w	r3, r3, r8
 8021ada:	eba6 0608 	sub.w	r6, r6, r8
 8021ade:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021ae2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021ae6:	440e      	add	r6, r1
 8021ae8:	e797      	b.n	8021a1a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8021aea:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021aee:	42a8      	cmp	r0, r5
 8021af0:	d262      	bcs.n	8021bb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021af2:	9b00      	ldr	r3, [sp, #0]
 8021af4:	4631      	mov	r1, r6
 8021af6:	eb00 0b03 	add.w	fp, r0, r3
 8021afa:	4558      	cmp	r0, fp
 8021afc:	d24e      	bcs.n	8021b9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b02:	b12b      	cbz	r3, 8021b10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021b04:	2bff      	cmp	r3, #255	; 0xff
 8021b06:	f8b4 e000 	ldrh.w	lr, [r4]
 8021b0a:	d104      	bne.n	8021b16 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021b0c:	f8a0 e000 	strh.w	lr, [r0]
 8021b10:	3002      	adds	r0, #2
 8021b12:	3402      	adds	r4, #2
 8021b14:	e7f1      	b.n	8021afa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021b16:	8802      	ldrh	r2, [r0, #0]
 8021b18:	b29f      	uxth	r7, r3
 8021b1a:	43db      	mvns	r3, r3
 8021b1c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021b20:	1216      	asrs	r6, r2, #8
 8021b22:	b2db      	uxtb	r3, r3
 8021b24:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021b28:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021b2c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021b30:	00d2      	lsls	r2, r2, #3
 8021b32:	fb16 f603 	smulbb	r6, r6, r3
 8021b36:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021b3a:	b2d2      	uxtb	r2, r2
 8021b3c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021b40:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021b44:	fb1a fa03 	smulbb	sl, sl, r3
 8021b48:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021b4c:	fa1f fc8c 	uxth.w	ip, ip
 8021b50:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021b54:	fb12 f303 	smulbb	r3, r2, r3
 8021b58:	fa5f fe8e 	uxtb.w	lr, lr
 8021b5c:	fb06 a607 	mla	r6, r6, r7, sl
 8021b60:	f10c 0201 	add.w	r2, ip, #1
 8021b64:	fb0e 3307 	mla	r3, lr, r7, r3
 8021b68:	b2b6      	uxth	r6, r6
 8021b6a:	b29b      	uxth	r3, r3
 8021b6c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021b70:	f106 0a01 	add.w	sl, r6, #1
 8021b74:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8021b78:	f103 0c01 	add.w	ip, r3, #1
 8021b7c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021b80:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021b84:	0976      	lsrs	r6, r6, #5
 8021b86:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021b8a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021b8e:	ea4c 0c02 	orr.w	ip, ip, r2
 8021b92:	ea4c 0c06 	orr.w	ip, ip, r6
 8021b96:	f8a0 c000 	strh.w	ip, [r0]
 8021b9a:	e7b9      	b.n	8021b10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021b9c:	f8b9 3000 	ldrh.w	r3, [r9]
 8021ba0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021ba4:	eba3 0308 	sub.w	r3, r3, r8
 8021ba8:	eba6 0608 	sub.w	r6, r6, r8
 8021bac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021bb0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021bb4:	440e      	add	r6, r1
 8021bb6:	e79a      	b.n	8021aee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021bb8:	4b03      	ldr	r3, [pc, #12]	; (8021bc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021bba:	6818      	ldr	r0, [r3, #0]
 8021bbc:	6803      	ldr	r3, [r0, #0]
 8021bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021bc0:	4798      	blx	r3
 8021bc2:	b007      	add	sp, #28
 8021bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bc8:	20015120 	.word	0x20015120
 8021bcc:	2001511a 	.word	0x2001511a

08021bd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bd4:	b089      	sub	sp, #36	; 0x24
 8021bd6:	4682      	mov	sl, r0
 8021bd8:	460f      	mov	r7, r1
 8021bda:	4691      	mov	r9, r2
 8021bdc:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021be0:	4698      	mov	r8, r3
 8021be2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021be4:	2e00      	cmp	r6, #0
 8021be6:	d03d      	beq.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021be8:	4608      	mov	r0, r1
 8021bea:	f7fa fe4b 	bl	801c884 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021bee:	4605      	mov	r5, r0
 8021bf0:	4638      	mov	r0, r7
 8021bf2:	f7fa fe7b 	bl	801c8ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021bf6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021bfa:	4638      	mov	r0, r7
 8021bfc:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021c00:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021c04:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021c08:	f7fa ff28 	bl	801ca5c <_ZNK8touchgfx6Bitmap7getDataEv>
 8021c0c:	4605      	mov	r5, r0
 8021c0e:	4638      	mov	r0, r7
 8021c10:	f7fa ff54 	bl	801cabc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021c14:	4681      	mov	r9, r0
 8021c16:	4638      	mov	r0, r7
 8021c18:	f7fa ffa4 	bl	801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021c1c:	280b      	cmp	r0, #11
 8021c1e:	d821      	bhi.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021c20:	e8df f000 	tbb	[pc, r0]
 8021c24:	2006aebe 	.word	0x2006aebe
 8021c28:	20202020 	.word	0x20202020
 8021c2c:	b5202020 	.word	0xb5202020
 8021c30:	4bb0      	ldr	r3, [pc, #704]	; (8021ef4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8021c32:	6818      	ldr	r0, [r3, #0]
 8021c34:	6803      	ldr	r3, [r0, #0]
 8021c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c38:	4798      	blx	r3
 8021c3a:	2eff      	cmp	r6, #255	; 0xff
 8021c3c:	d101      	bne.n	8021c42 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 8021c3e:	0683      	lsls	r3, r0, #26
 8021c40:	d506      	bpl.n	8021c50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 8021c42:	4633      	mov	r3, r6
 8021c44:	4622      	mov	r2, r4
 8021c46:	a902      	add	r1, sp, #8
 8021c48:	4628      	mov	r0, r5
 8021c4a:	f7ff f909 	bl	8020e60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c4e:	e009      	b.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021c50:	4638      	mov	r0, r7
 8021c52:	f7fa fecb 	bl	801c9ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021c56:	b940      	cbnz	r0, 8021c6a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8021c58:	4623      	mov	r3, r4
 8021c5a:	aa02      	add	r2, sp, #8
 8021c5c:	4629      	mov	r1, r5
 8021c5e:	4650      	mov	r0, sl
 8021c60:	f7ff f9e4 	bl	802102c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021c64:	b009      	add	sp, #36	; 0x24
 8021c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c6a:	f10d 0818 	add.w	r8, sp, #24
 8021c6e:	4639      	mov	r1, r7
 8021c70:	af04      	add	r7, sp, #16
 8021c72:	4640      	mov	r0, r8
 8021c74:	f7fa fe6e 	bl	801c954 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021c78:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021c7c:	e887 0003 	stmia.w	r7, {r0, r1}
 8021c80:	4638      	mov	r0, r7
 8021c82:	4621      	mov	r1, r4
 8021c84:	f7f5 fa06 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 8021c88:	4638      	mov	r0, r7
 8021c8a:	f7f5 fa46 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021c8e:	2800      	cmp	r0, #0
 8021c90:	d1d7      	bne.n	8021c42 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 8021c92:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021c96:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021c9a:	4293      	cmp	r3, r2
 8021c9c:	dd12      	ble.n	8021cc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 8021c9e:	1a9b      	subs	r3, r3, r2
 8021ca0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021ca4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021ca8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021cac:	4628      	mov	r0, r5
 8021cae:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021cb2:	4642      	mov	r2, r8
 8021cb4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021cb8:	a902      	add	r1, sp, #8
 8021cba:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021cbe:	4633      	mov	r3, r6
 8021cc0:	f7ff f8ce 	bl	8020e60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021cc4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021cc8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021ccc:	4293      	cmp	r3, r2
 8021cce:	dd12      	ble.n	8021cf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 8021cd0:	1a9b      	subs	r3, r3, r2
 8021cd2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021cd6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021cda:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021cde:	4642      	mov	r2, r8
 8021ce0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021ce4:	4628      	mov	r0, r5
 8021ce6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021cea:	23ff      	movs	r3, #255	; 0xff
 8021cec:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021cf0:	a902      	add	r1, sp, #8
 8021cf2:	f7ff f8b5 	bl	8020e60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021cf6:	463b      	mov	r3, r7
 8021cf8:	aa02      	add	r2, sp, #8
 8021cfa:	4629      	mov	r1, r5
 8021cfc:	4650      	mov	r0, sl
 8021cfe:	f7ff f995 	bl	802102c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021d02:	88a2      	ldrh	r2, [r4, #4]
 8021d04:	8823      	ldrh	r3, [r4, #0]
 8021d06:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021d0a:	4413      	add	r3, r2
 8021d0c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021d10:	440a      	add	r2, r1
 8021d12:	b29b      	uxth	r3, r3
 8021d14:	b292      	uxth	r2, r2
 8021d16:	b218      	sxth	r0, r3
 8021d18:	b211      	sxth	r1, r2
 8021d1a:	4288      	cmp	r0, r1
 8021d1c:	dd12      	ble.n	8021d44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8021d1e:	1a9b      	subs	r3, r3, r2
 8021d20:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021d24:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021d28:	4642      	mov	r2, r8
 8021d2a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021d2e:	a902      	add	r1, sp, #8
 8021d30:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021d34:	23ff      	movs	r3, #255	; 0xff
 8021d36:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021d3a:	4628      	mov	r0, r5
 8021d3c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021d40:	f7ff f88e 	bl	8020e60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021d44:	88e2      	ldrh	r2, [r4, #6]
 8021d46:	8863      	ldrh	r3, [r4, #2]
 8021d48:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021d4c:	4413      	add	r3, r2
 8021d4e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021d52:	440a      	add	r2, r1
 8021d54:	b29b      	uxth	r3, r3
 8021d56:	b292      	uxth	r2, r2
 8021d58:	b218      	sxth	r0, r3
 8021d5a:	b211      	sxth	r1, r2
 8021d5c:	4288      	cmp	r0, r1
 8021d5e:	dd81      	ble.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021d60:	1a9b      	subs	r3, r3, r2
 8021d62:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021d66:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021d6a:	4642      	mov	r2, r8
 8021d6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d70:	23ff      	movs	r3, #255	; 0xff
 8021d72:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021d76:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021d7a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021d7e:	e762      	b.n	8021c46 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8021d80:	4633      	mov	r3, r6
 8021d82:	4622      	mov	r2, r4
 8021d84:	a902      	add	r1, sp, #8
 8021d86:	4628      	mov	r0, r5
 8021d88:	f7ff f9c0 	bl	802110c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021d8c:	e76a      	b.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021d8e:	e9cd 4600 	strd	r4, r6, [sp]
 8021d92:	ab02      	add	r3, sp, #8
 8021d94:	464a      	mov	r2, r9
 8021d96:	4629      	mov	r1, r5
 8021d98:	4650      	mov	r0, sl
 8021d9a:	f7ff fd97 	bl	80218cc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021d9e:	e761      	b.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021da0:	4638      	mov	r0, r7
 8021da2:	f7fa fe23 	bl	801c9ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021da6:	b950      	cbnz	r0, 8021dbe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 8021da8:	f8da 3000 	ldr.w	r3, [sl]
 8021dac:	aa02      	add	r2, sp, #8
 8021dae:	4629      	mov	r1, r5
 8021db0:	e9cd 6000 	strd	r6, r0, [sp]
 8021db4:	4650      	mov	r0, sl
 8021db6:	68de      	ldr	r6, [r3, #12]
 8021db8:	4623      	mov	r3, r4
 8021dba:	47b0      	blx	r6
 8021dbc:	e752      	b.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021dbe:	f10d 0818 	add.w	r8, sp, #24
 8021dc2:	4639      	mov	r1, r7
 8021dc4:	af04      	add	r7, sp, #16
 8021dc6:	4640      	mov	r0, r8
 8021dc8:	f7fa fdc4 	bl	801c954 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021dcc:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021dd0:	e887 0003 	stmia.w	r7, {r0, r1}
 8021dd4:	4638      	mov	r0, r7
 8021dd6:	4621      	mov	r1, r4
 8021dd8:	f7f5 f95c 	bl	8017094 <_ZN8touchgfx4RectaNERKS0_>
 8021ddc:	4638      	mov	r0, r7
 8021dde:	f7f5 f99c 	bl	801711a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021de2:	b138      	cbz	r0, 8021df4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8021de4:	4623      	mov	r3, r4
 8021de6:	9600      	str	r6, [sp, #0]
 8021de8:	aa02      	add	r2, sp, #8
 8021dea:	4649      	mov	r1, r9
 8021dec:	4628      	mov	r0, r5
 8021dee:	f7ff fdc9 	bl	8021984 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021df2:	e737      	b.n	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021df4:	f8da 3000 	ldr.w	r3, [sl]
 8021df8:	aa02      	add	r2, sp, #8
 8021dfa:	4629      	mov	r1, r5
 8021dfc:	e9cd 6000 	strd	r6, r0, [sp]
 8021e00:	4650      	mov	r0, sl
 8021e02:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021e06:	463b      	mov	r3, r7
 8021e08:	47d8      	blx	fp
 8021e0a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021e0e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021e12:	4293      	cmp	r3, r2
 8021e14:	dd13      	ble.n	8021e3e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 8021e16:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021e1a:	1a9b      	subs	r3, r3, r2
 8021e1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021e20:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021e24:	4628      	mov	r0, r5
 8021e26:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021e2a:	aa02      	add	r2, sp, #8
 8021e2c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021e30:	4649      	mov	r1, r9
 8021e32:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021e36:	4643      	mov	r3, r8
 8021e38:	9600      	str	r6, [sp, #0]
 8021e3a:	f7ff fda3 	bl	8021984 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e3e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021e42:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021e46:	4293      	cmp	r3, r2
 8021e48:	dd13      	ble.n	8021e72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 8021e4a:	1a9b      	subs	r3, r3, r2
 8021e4c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021e50:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021e54:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021e58:	aa02      	add	r2, sp, #8
 8021e5a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021e5e:	4628      	mov	r0, r5
 8021e60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021e64:	4643      	mov	r3, r8
 8021e66:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021e6a:	4649      	mov	r1, r9
 8021e6c:	9600      	str	r6, [sp, #0]
 8021e6e:	f7ff fd89 	bl	8021984 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e72:	88a2      	ldrh	r2, [r4, #4]
 8021e74:	8823      	ldrh	r3, [r4, #0]
 8021e76:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021e7a:	4413      	add	r3, r2
 8021e7c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021e80:	440a      	add	r2, r1
 8021e82:	b29b      	uxth	r3, r3
 8021e84:	b292      	uxth	r2, r2
 8021e86:	b218      	sxth	r0, r3
 8021e88:	b211      	sxth	r1, r2
 8021e8a:	4288      	cmp	r0, r1
 8021e8c:	dd13      	ble.n	8021eb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 8021e8e:	1a9b      	subs	r3, r3, r2
 8021e90:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021e94:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021e98:	aa02      	add	r2, sp, #8
 8021e9a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021e9e:	4649      	mov	r1, r9
 8021ea0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021ea4:	4643      	mov	r3, r8
 8021ea6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021eaa:	4628      	mov	r0, r5
 8021eac:	9600      	str	r6, [sp, #0]
 8021eae:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021eb2:	f7ff fd67 	bl	8021984 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021eb6:	88e2      	ldrh	r2, [r4, #6]
 8021eb8:	8863      	ldrh	r3, [r4, #2]
 8021eba:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021ebe:	4413      	add	r3, r2
 8021ec0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021ec4:	440a      	add	r2, r1
 8021ec6:	b29b      	uxth	r3, r3
 8021ec8:	b292      	uxth	r2, r2
 8021eca:	b218      	sxth	r0, r3
 8021ecc:	b211      	sxth	r1, r2
 8021ece:	4288      	cmp	r0, r1
 8021ed0:	f77f aec8 	ble.w	8021c64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021ed4:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021ed8:	1a9b      	subs	r3, r3, r2
 8021eda:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021ede:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021ee2:	4643      	mov	r3, r8
 8021ee4:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021ee8:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021eec:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021ef0:	9600      	str	r6, [sp, #0]
 8021ef2:	e779      	b.n	8021de8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 8021ef4:	20015120 	.word	0x20015120

08021ef8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021ef8:	b180      	cbz	r0, 8021f1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021efa:	2903      	cmp	r1, #3
 8021efc:	d81c      	bhi.n	8021f38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021efe:	e8df f001 	tbb	[pc, r1]
 8021f02:	1d02      	.short	0x1d02
 8021f04:	1f08      	.short	0x1f08
 8021f06:	4b10      	ldr	r3, [pc, #64]	; (8021f48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021f08:	8818      	ldrh	r0, [r3, #0]
 8021f0a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f0e:	4240      	negs	r0, r0
 8021f10:	4770      	bx	lr
 8021f12:	4b0d      	ldr	r3, [pc, #52]	; (8021f48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021f14:	8818      	ldrh	r0, [r3, #0]
 8021f16:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f1a:	4770      	bx	lr
 8021f1c:	2903      	cmp	r1, #3
 8021f1e:	d80b      	bhi.n	8021f38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021f20:	a301      	add	r3, pc, #4	; (adr r3, 8021f28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8021f22:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021f26:	bf00      	nop
 8021f28:	08021f3d 	.word	0x08021f3d
 8021f2c:	08021f13 	.word	0x08021f13
 8021f30:	08021f41 	.word	0x08021f41
 8021f34:	08021f07 	.word	0x08021f07
 8021f38:	2000      	movs	r0, #0
 8021f3a:	4770      	bx	lr
 8021f3c:	2001      	movs	r0, #1
 8021f3e:	4770      	bx	lr
 8021f40:	f04f 30ff 	mov.w	r0, #4294967295
 8021f44:	4770      	bx	lr
 8021f46:	bf00      	nop
 8021f48:	2001511a 	.word	0x2001511a

08021f4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021f4c:	b180      	cbz	r0, 8021f70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8021f4e:	2903      	cmp	r1, #3
 8021f50:	d81c      	bhi.n	8021f8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021f52:	e8df f001 	tbb	[pc, r1]
 8021f56:	021d      	.short	0x021d
 8021f58:	071f      	.short	0x071f
 8021f5a:	4b10      	ldr	r3, [pc, #64]	; (8021f9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021f5c:	8818      	ldrh	r0, [r3, #0]
 8021f5e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f62:	4770      	bx	lr
 8021f64:	4b0d      	ldr	r3, [pc, #52]	; (8021f9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021f66:	8818      	ldrh	r0, [r3, #0]
 8021f68:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f6c:	4240      	negs	r0, r0
 8021f6e:	4770      	bx	lr
 8021f70:	2903      	cmp	r1, #3
 8021f72:	d80b      	bhi.n	8021f8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021f74:	a301      	add	r3, pc, #4	; (adr r3, 8021f7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8021f76:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021f7a:	bf00      	nop
 8021f7c:	08021f5b 	.word	0x08021f5b
 8021f80:	08021f95 	.word	0x08021f95
 8021f84:	08021f65 	.word	0x08021f65
 8021f88:	08021f91 	.word	0x08021f91
 8021f8c:	2000      	movs	r0, #0
 8021f8e:	4770      	bx	lr
 8021f90:	2001      	movs	r0, #1
 8021f92:	4770      	bx	lr
 8021f94:	f04f 30ff 	mov.w	r0, #4294967295
 8021f98:	4770      	bx	lr
 8021f9a:	bf00      	nop
 8021f9c:	2001511a 	.word	0x2001511a

08021fa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fa4:	b099      	sub	sp, #100	; 0x64
 8021fa6:	910b      	str	r1, [sp, #44]	; 0x2c
 8021fa8:	a914      	add	r1, sp, #80	; 0x50
 8021faa:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8021fae:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8021fb2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8021fb6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8021fba:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8021fbe:	e881 000c 	stmia.w	r1, {r2, r3}
 8021fc2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8021fc6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8021fca:	9309      	str	r3, [sp, #36]	; 0x24
 8021fcc:	f891 900d 	ldrb.w	r9, [r1, #13]
 8021fd0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021fd4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8021fd8:	9310      	str	r3, [sp, #64]	; 0x40
 8021fda:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8021fde:	930c      	str	r3, [sp, #48]	; 0x30
 8021fe0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8021fe4:	798f      	ldrb	r7, [r1, #6]
 8021fe6:	431f      	orrs	r7, r3
 8021fe8:	f000 8195 	beq.w	8022316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021fec:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8021ff0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8021ff4:	f891 9007 	ldrb.w	r9, [r1, #7]
 8021ff8:	ea59 0903 	orrs.w	r9, r9, r3
 8021ffc:	f000 818b 	beq.w	8022316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022000:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022004:	b29b      	uxth	r3, r3
 8022006:	2d00      	cmp	r5, #0
 8022008:	f000 812e 	beq.w	8022268 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 802200c:	1aed      	subs	r5, r5, r3
 802200e:	b2ad      	uxth	r5, r5
 8022010:	042b      	lsls	r3, r5, #16
 8022012:	d502      	bpl.n	802201a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8022014:	1b64      	subs	r4, r4, r5
 8022016:	2500      	movs	r5, #0
 8022018:	b224      	sxth	r4, r4
 802201a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802201e:	a814      	add	r0, sp, #80	; 0x50
 8022020:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8022024:	428c      	cmp	r4, r1
 8022026:	b28b      	uxth	r3, r1
 8022028:	bfbf      	itttt	lt
 802202a:	18ed      	addlt	r5, r5, r3
 802202c:	1b2c      	sublt	r4, r5, r4
 802202e:	b2a5      	uxthlt	r5, r4
 8022030:	460c      	movlt	r4, r1
 8022032:	8891      	ldrh	r1, [r2, #4]
 8022034:	440b      	add	r3, r1
 8022036:	4621      	mov	r1, r4
 8022038:	b21b      	sxth	r3, r3
 802203a:	930f      	str	r3, [sp, #60]	; 0x3c
 802203c:	88d3      	ldrh	r3, [r2, #6]
 802203e:	8852      	ldrh	r2, [r2, #2]
 8022040:	4413      	add	r3, r2
 8022042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022044:	b21b      	sxth	r3, r3
 8022046:	930d      	str	r3, [sp, #52]	; 0x34
 8022048:	4bbd      	ldr	r3, [pc, #756]	; (8022340 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 802204a:	f893 b000 	ldrb.w	fp, [r3]
 802204e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022052:	f1dc 0300 	rsbs	r3, ip, #0
 8022056:	eb43 030c 	adc.w	r3, r3, ip
 802205a:	930e      	str	r3, [sp, #56]	; 0x38
 802205c:	4653      	mov	r3, sl
 802205e:	f7f7 fc22 	bl	80198a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022062:	4621      	mov	r1, r4
 8022064:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8022068:	4653      	mov	r3, sl
 802206a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802206c:	a814      	add	r0, sp, #80	; 0x50
 802206e:	f7f7 fc37 	bl	80198e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022072:	a918      	add	r1, sp, #96	; 0x60
 8022074:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022078:	a817      	add	r0, sp, #92	; 0x5c
 802207a:	f7f7 fd5d 	bl	8019b38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802207e:	f1ba 0f00 	cmp.w	sl, #0
 8022082:	f040 80f4 	bne.w	802226e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8022086:	f1bb 0f01 	cmp.w	fp, #1
 802208a:	f040 80f8 	bne.w	802227e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 802208e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022090:	2b00      	cmp	r3, #0
 8022092:	f040 8145 	bne.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8022096:	b2ba      	uxth	r2, r7
 8022098:	b905      	cbnz	r5, 802209c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 802209a:	b16e      	cbz	r6, 80220b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 802209c:	fb06 5302 	mla	r3, r6, r2, r5
 80220a0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80220a2:	4631      	mov	r1, r6
 80220a4:	fb08 f303 	mul.w	r3, r8, r3
 80220a8:	f003 0607 	and.w	r6, r3, #7
 80220ac:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80220b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80220b2:	eba9 0301 	sub.w	r3, r9, r1
 80220b6:	930a      	str	r3, [sp, #40]	; 0x28
 80220b8:	4651      	mov	r1, sl
 80220ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80220bc:	f7ff ff1c 	bl	8021ef8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80220c0:	4681      	mov	r9, r0
 80220c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80220c4:	f7ff ff42 	bl	8021f4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80220c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80220ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80220cc:	4683      	mov	fp, r0
 80220ce:	eba3 0a01 	sub.w	sl, r3, r1
 80220d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220d4:	459a      	cmp	sl, r3
 80220d6:	bfa8      	it	ge
 80220d8:	469a      	movge	sl, r3
 80220da:	f1ba 0f00 	cmp.w	sl, #0
 80220de:	f340 811a 	ble.w	8022316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80220e2:	1b64      	subs	r4, r4, r5
 80220e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80220e6:	1b1c      	subs	r4, r3, r4
 80220e8:	42bc      	cmp	r4, r7
 80220ea:	bfd4      	ite	le
 80220ec:	ebc5 0504 	rsble	r5, r5, r4
 80220f0:	ebc5 0507 	rsbgt	r5, r5, r7
 80220f4:	2d00      	cmp	r5, #0
 80220f6:	f340 810e 	ble.w	8022316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80220fa:	1b52      	subs	r2, r2, r5
 80220fc:	fb08 f302 	mul.w	r3, r8, r2
 8022100:	930f      	str	r3, [sp, #60]	; 0x3c
 8022102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022104:	2b00      	cmp	r3, #0
 8022106:	f040 8116 	bne.w	8022336 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802210a:	4b8e      	ldr	r3, [pc, #568]	; (8022344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802210c:	6818      	ldr	r0, [r3, #0]
 802210e:	6803      	ldr	r3, [r0, #0]
 8022110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022112:	4798      	blx	r3
 8022114:	2301      	movs	r3, #1
 8022116:	4a8c      	ldr	r2, [pc, #560]	; (8022348 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8022118:	fa03 f308 	lsl.w	r3, r3, r8
 802211c:	8811      	ldrh	r1, [r2, #0]
 802211e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8022122:	3b01      	subs	r3, #1
 8022124:	b2db      	uxtb	r3, r3
 8022126:	930e      	str	r3, [sp, #56]	; 0x38
 8022128:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802212c:	fb01 2303 	mla	r3, r1, r3, r2
 8022130:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022134:	930a      	str	r3, [sp, #40]	; 0x28
 8022136:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022138:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802213c:	9313      	str	r3, [sp, #76]	; 0x4c
 802213e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022140:	0a19      	lsrs	r1, r3, #8
 8022142:	b2cb      	uxtb	r3, r1
 8022144:	9312      	str	r3, [sp, #72]	; 0x48
 8022146:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022148:	b2db      	uxtb	r3, r3
 802214a:	9311      	str	r3, [sp, #68]	; 0x44
 802214c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802214e:	095a      	lsrs	r2, r3, #5
 8022150:	4b7e      	ldr	r3, [pc, #504]	; (802234c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8022152:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022156:	400b      	ands	r3, r1
 8022158:	4313      	orrs	r3, r2
 802215a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802215c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022160:	4313      	orrs	r3, r2
 8022162:	b29b      	uxth	r3, r3
 8022164:	9310      	str	r3, [sp, #64]	; 0x40
 8022166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022168:	781a      	ldrb	r2, [r3, #0]
 802216a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802216e:	fb05 b919 	mls	r9, r5, r9, fp
 8022172:	4132      	asrs	r2, r6
 8022174:	fb03 fb05 	mul.w	fp, r3, r5
 8022178:	930d      	str	r3, [sp, #52]	; 0x34
 802217a:	b2d2      	uxtb	r2, r2
 802217c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022180:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022184:	f0c0 80f5 	bcc.w	8022372 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8022188:	46ae      	mov	lr, r5
 802218a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 802218e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022192:	f0c0 80dd 	bcc.w	8022350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8022196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022198:	4013      	ands	r3, r2
 802219a:	d055      	beq.n	8022248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802219c:	20ff      	movs	r0, #255	; 0xff
 802219e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80221a0:	fb90 f1f1 	sdiv	r1, r0, r1
 80221a4:	434b      	muls	r3, r1
 80221a6:	2bfe      	cmp	r3, #254	; 0xfe
 80221a8:	dd03      	ble.n	80221b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80221aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80221ac:	4281      	cmp	r1, r0
 80221ae:	f000 80c4 	beq.w	802233a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80221b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80221b4:	f8bc 4000 	ldrh.w	r4, [ip]
 80221b8:	fb11 f303 	smulbb	r3, r1, r3
 80221bc:	1220      	asrs	r0, r4, #8
 80221be:	b29b      	uxth	r3, r3
 80221c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80221c4:	1c59      	adds	r1, r3, #1
 80221c6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80221ca:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80221ce:	10e1      	asrs	r1, r4, #3
 80221d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80221d4:	00e4      	lsls	r4, r4, #3
 80221d6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80221da:	b29f      	uxth	r7, r3
 80221dc:	43db      	mvns	r3, r3
 80221de:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80221e2:	b2db      	uxtb	r3, r3
 80221e4:	b2e4      	uxtb	r4, r4
 80221e6:	9309      	str	r3, [sp, #36]	; 0x24
 80221e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80221ea:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80221ee:	fb13 f907 	smulbb	r9, r3, r7
 80221f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221f4:	fb00 9003 	mla	r0, r0, r3, r9
 80221f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221fa:	fb13 f907 	smulbb	r9, r3, r7
 80221fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022200:	b280      	uxth	r0, r0
 8022202:	fb01 9103 	mla	r1, r1, r3, r9
 8022206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022208:	fb13 f707 	smulbb	r7, r3, r7
 802220c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802220e:	b289      	uxth	r1, r1
 8022210:	fb04 7403 	mla	r4, r4, r3, r7
 8022214:	1c43      	adds	r3, r0, #1
 8022216:	b2a4      	uxth	r4, r4
 8022218:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802221c:	f104 0901 	add.w	r9, r4, #1
 8022220:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022224:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8022228:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802222c:	ea49 0000 	orr.w	r0, r9, r0
 8022230:	f101 0901 	add.w	r9, r1, #1
 8022234:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8022238:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802223c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022240:	ea40 0009 	orr.w	r0, r0, r9
 8022244:	f8ac 0000 	strh.w	r0, [ip]
 8022248:	4446      	add	r6, r8
 802224a:	b2b6      	uxth	r6, r6
 802224c:	2e07      	cmp	r6, #7
 802224e:	bf89      	itett	hi
 8022250:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8022252:	fa42 f208 	asrls.w	r2, r2, r8
 8022256:	2600      	movhi	r6, #0
 8022258:	785a      	ldrbhi	r2, [r3, #1]
 802225a:	bf8a      	itet	hi
 802225c:	3301      	addhi	r3, #1
 802225e:	b2d2      	uxtbls	r2, r2
 8022260:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8022262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022264:	449c      	add	ip, r3
 8022266:	e792      	b.n	802218e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8022268:	441c      	add	r4, r3
 802226a:	b224      	sxth	r4, r4
 802226c:	e6d5      	b.n	802201a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802226e:	f1ba 0f01 	cmp.w	sl, #1
 8022272:	f47f af0c 	bne.w	802208e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022276:	f1bb 0f01 	cmp.w	fp, #1
 802227a:	f47f af08 	bne.w	802208e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802227e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8022344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8022282:	f8db 0000 	ldr.w	r0, [fp]
 8022286:	6803      	ldr	r3, [r0, #0]
 8022288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802228a:	4798      	blx	r3
 802228c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022290:	465a      	mov	r2, fp
 8022292:	d006      	beq.n	80222a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8022294:	f1b8 0f04 	cmp.w	r8, #4
 8022298:	d140      	bne.n	802231c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 802229a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802229c:	3300      	adds	r3, #0
 802229e:	bf18      	it	ne
 80222a0:	2301      	movne	r3, #1
 80222a2:	0580      	lsls	r0, r0, #22
 80222a4:	d56e      	bpl.n	8022384 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80222a6:	f1b8 0f08 	cmp.w	r8, #8
 80222aa:	d16b      	bne.n	8022384 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	bf0c      	ite	eq
 80222b0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80222b4:	f44f 7180 	movne.w	r1, #256	; 0x100
 80222b8:	2d00      	cmp	r5, #0
 80222ba:	f47f aee8 	bne.w	802208e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80222be:	2e00      	cmp	r6, #0
 80222c0:	f47f aee5 	bne.w	802208e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80222c4:	19e3      	adds	r3, r4, r7
 80222c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80222c8:	4283      	cmp	r3, r0
 80222ca:	f73f aee0 	bgt.w	802208e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80222ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80222d2:	444b      	add	r3, r9
 80222d4:	4283      	cmp	r3, r0
 80222d6:	f73f aeda 	bgt.w	802208e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80222da:	b2bf      	uxth	r7, r7
 80222dc:	f1b8 0f08 	cmp.w	r8, #8
 80222e0:	6810      	ldr	r0, [r2, #0]
 80222e2:	f04f 0500 	mov.w	r5, #0
 80222e6:	bf18      	it	ne
 80222e8:	3701      	addne	r7, #1
 80222ea:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80222ee:	6804      	ldr	r4, [r0, #0]
 80222f0:	bf18      	it	ne
 80222f2:	f027 0701 	bicne.w	r7, r7, #1
 80222f6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80222fa:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80222fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022300:	bf18      	it	ne
 8022302:	b2bf      	uxthne	r7, r7
 8022304:	9104      	str	r1, [sp, #16]
 8022306:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022308:	e9cd 7900 	strd	r7, r9, [sp]
 802230c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8022310:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022312:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8022314:	47a0      	blx	r4
 8022316:	b019      	add	sp, #100	; 0x64
 8022318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802231c:	2300      	movs	r3, #0
 802231e:	e7c0      	b.n	80222a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8022320:	2208      	movs	r2, #8
 8022322:	fb92 f3f8 	sdiv	r3, r2, r8
 8022326:	1e5a      	subs	r2, r3, #1
 8022328:	443a      	add	r2, r7
 802232a:	fb92 f2f3 	sdiv	r2, r2, r3
 802232e:	fb12 f203 	smulbb	r2, r2, r3
 8022332:	b292      	uxth	r2, r2
 8022334:	e6b0      	b.n	8022098 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8022336:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022338:	e6ec      	b.n	8022114 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802233a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802233c:	e782      	b.n	8022244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802233e:	bf00      	nop
 8022340:	20015118 	.word	0x20015118
 8022344:	20015120 	.word	0x20015120
 8022348:	2001511a 	.word	0x2001511a
 802234c:	00fff800 	.word	0x00fff800
 8022350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022352:	b153      	cbz	r3, 802236a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8022354:	441e      	add	r6, r3
 8022356:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022358:	b2b6      	uxth	r6, r6
 802235a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802235e:	f006 0607 	and.w	r6, r6, #7
 8022362:	781a      	ldrb	r2, [r3, #0]
 8022364:	9328      	str	r3, [sp, #160]	; 0xa0
 8022366:	4132      	asrs	r2, r6
 8022368:	b2d2      	uxtb	r2, r2
 802236a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802236c:	445b      	add	r3, fp
 802236e:	930a      	str	r3, [sp, #40]	; 0x28
 8022370:	e706      	b.n	8022180 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8022372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022374:	2b00      	cmp	r3, #0
 8022376:	d1ce      	bne.n	8022316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022378:	4b05      	ldr	r3, [pc, #20]	; (8022390 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 802237a:	6818      	ldr	r0, [r3, #0]
 802237c:	6803      	ldr	r3, [r0, #0]
 802237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022380:	4798      	blx	r3
 8022382:	e7c8      	b.n	8022316 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022384:	2b00      	cmp	r3, #0
 8022386:	f43f ae82 	beq.w	802208e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802238a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802238e:	e793      	b.n	80222b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8022390:	20015120 	.word	0x20015120

08022394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022394:	b538      	push	{r3, r4, r5, lr}
 8022396:	4c15      	ldr	r4, [pc, #84]	; (80223ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022398:	4605      	mov	r5, r0
 802239a:	7823      	ldrb	r3, [r4, #0]
 802239c:	f3bf 8f5b 	dmb	ish
 80223a0:	07da      	lsls	r2, r3, #31
 80223a2:	d40b      	bmi.n	80223bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80223a4:	4620      	mov	r0, r4
 80223a6:	f007 fedd 	bl	802a164 <__cxa_guard_acquire>
 80223aa:	b138      	cbz	r0, 80223bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80223ac:	4620      	mov	r0, r4
 80223ae:	f007 fee5 	bl	802a17c <__cxa_guard_release>
 80223b2:	4a0f      	ldr	r2, [pc, #60]	; (80223f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80223b4:	490f      	ldr	r1, [pc, #60]	; (80223f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80223b6:	4810      	ldr	r0, [pc, #64]	; (80223f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80223b8:	f007 fecd 	bl	802a156 <__aeabi_atexit>
 80223bc:	4c0f      	ldr	r4, [pc, #60]	; (80223fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80223be:	7823      	ldrb	r3, [r4, #0]
 80223c0:	f3bf 8f5b 	dmb	ish
 80223c4:	07db      	lsls	r3, r3, #31
 80223c6:	d40b      	bmi.n	80223e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80223c8:	4620      	mov	r0, r4
 80223ca:	f007 fecb 	bl	802a164 <__cxa_guard_acquire>
 80223ce:	b138      	cbz	r0, 80223e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80223d0:	4620      	mov	r0, r4
 80223d2:	f007 fed3 	bl	802a17c <__cxa_guard_release>
 80223d6:	4a06      	ldr	r2, [pc, #24]	; (80223f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80223d8:	4909      	ldr	r1, [pc, #36]	; (8022400 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80223da:	480a      	ldr	r0, [pc, #40]	; (8022404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80223dc:	f007 febb 	bl	802a156 <__aeabi_atexit>
 80223e0:	4b05      	ldr	r3, [pc, #20]	; (80223f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80223e2:	612b      	str	r3, [r5, #16]
 80223e4:	4b07      	ldr	r3, [pc, #28]	; (8022404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80223e6:	616b      	str	r3, [r5, #20]
 80223e8:	bd38      	pop	{r3, r4, r5, pc}
 80223ea:	bf00      	nop
 80223ec:	200151f8 	.word	0x200151f8
 80223f0:	20000000 	.word	0x20000000
 80223f4:	0801f17b 	.word	0x0801f17b
 80223f8:	20000090 	.word	0x20000090
 80223fc:	200151fc 	.word	0x200151fc
 8022400:	0801f179 	.word	0x0801f179
 8022404:	20000094 	.word	0x20000094

08022408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022408:	b538      	push	{r3, r4, r5, lr}
 802240a:	4c15      	ldr	r4, [pc, #84]	; (8022460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802240c:	4605      	mov	r5, r0
 802240e:	7823      	ldrb	r3, [r4, #0]
 8022410:	f3bf 8f5b 	dmb	ish
 8022414:	07da      	lsls	r2, r3, #31
 8022416:	d40b      	bmi.n	8022430 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022418:	4620      	mov	r0, r4
 802241a:	f007 fea3 	bl	802a164 <__cxa_guard_acquire>
 802241e:	b138      	cbz	r0, 8022430 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022420:	4620      	mov	r0, r4
 8022422:	f007 feab 	bl	802a17c <__cxa_guard_release>
 8022426:	4a0f      	ldr	r2, [pc, #60]	; (8022464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022428:	490f      	ldr	r1, [pc, #60]	; (8022468 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802242a:	4810      	ldr	r0, [pc, #64]	; (802246c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802242c:	f007 fe93 	bl	802a156 <__aeabi_atexit>
 8022430:	4c0f      	ldr	r4, [pc, #60]	; (8022470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8022432:	7823      	ldrb	r3, [r4, #0]
 8022434:	f3bf 8f5b 	dmb	ish
 8022438:	07db      	lsls	r3, r3, #31
 802243a:	d40b      	bmi.n	8022454 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802243c:	4620      	mov	r0, r4
 802243e:	f007 fe91 	bl	802a164 <__cxa_guard_acquire>
 8022442:	b138      	cbz	r0, 8022454 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022444:	4620      	mov	r0, r4
 8022446:	f007 fe99 	bl	802a17c <__cxa_guard_release>
 802244a:	4a06      	ldr	r2, [pc, #24]	; (8022464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802244c:	4909      	ldr	r1, [pc, #36]	; (8022474 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802244e:	480a      	ldr	r0, [pc, #40]	; (8022478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022450:	f007 fe81 	bl	802a156 <__aeabi_atexit>
 8022454:	4b05      	ldr	r3, [pc, #20]	; (802246c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022456:	60ab      	str	r3, [r5, #8]
 8022458:	4b07      	ldr	r3, [pc, #28]	; (8022478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802245a:	60eb      	str	r3, [r5, #12]
 802245c:	bd38      	pop	{r3, r4, r5, pc}
 802245e:	bf00      	nop
 8022460:	200151d0 	.word	0x200151d0
 8022464:	20000000 	.word	0x20000000
 8022468:	0801f17f 	.word	0x0801f17f
 802246c:	20000068 	.word	0x20000068
 8022470:	200151d4 	.word	0x200151d4
 8022474:	0801f17d 	.word	0x0801f17d
 8022478:	2000006c 	.word	0x2000006c

0802247c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802247c:	b510      	push	{r4, lr}
 802247e:	4604      	mov	r4, r0
 8022480:	f7ff ff88 	bl	8022394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022484:	4620      	mov	r0, r4
 8022486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802248a:	f7ff bfbd 	b.w	8022408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08022490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022490:	b538      	push	{r3, r4, r5, lr}
 8022492:	4c15      	ldr	r4, [pc, #84]	; (80224e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022494:	4605      	mov	r5, r0
 8022496:	7823      	ldrb	r3, [r4, #0]
 8022498:	f3bf 8f5b 	dmb	ish
 802249c:	07da      	lsls	r2, r3, #31
 802249e:	d40b      	bmi.n	80224b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80224a0:	4620      	mov	r0, r4
 80224a2:	f007 fe5f 	bl	802a164 <__cxa_guard_acquire>
 80224a6:	b138      	cbz	r0, 80224b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80224a8:	4620      	mov	r0, r4
 80224aa:	f007 fe67 	bl	802a17c <__cxa_guard_release>
 80224ae:	4a0f      	ldr	r2, [pc, #60]	; (80224ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80224b0:	490f      	ldr	r1, [pc, #60]	; (80224f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80224b2:	4810      	ldr	r0, [pc, #64]	; (80224f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80224b4:	f007 fe4f 	bl	802a156 <__aeabi_atexit>
 80224b8:	4c0f      	ldr	r4, [pc, #60]	; (80224f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80224ba:	7823      	ldrb	r3, [r4, #0]
 80224bc:	f3bf 8f5b 	dmb	ish
 80224c0:	07db      	lsls	r3, r3, #31
 80224c2:	d40b      	bmi.n	80224dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80224c4:	4620      	mov	r0, r4
 80224c6:	f007 fe4d 	bl	802a164 <__cxa_guard_acquire>
 80224ca:	b138      	cbz	r0, 80224dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80224cc:	4620      	mov	r0, r4
 80224ce:	f007 fe55 	bl	802a17c <__cxa_guard_release>
 80224d2:	4a06      	ldr	r2, [pc, #24]	; (80224ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80224d4:	4909      	ldr	r1, [pc, #36]	; (80224fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80224d6:	480a      	ldr	r0, [pc, #40]	; (8022500 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80224d8:	f007 fe3d 	bl	802a156 <__aeabi_atexit>
 80224dc:	4b05      	ldr	r3, [pc, #20]	; (80224f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80224de:	622b      	str	r3, [r5, #32]
 80224e0:	4b07      	ldr	r3, [pc, #28]	; (8022500 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80224e2:	626b      	str	r3, [r5, #36]	; 0x24
 80224e4:	bd38      	pop	{r3, r4, r5, pc}
 80224e6:	bf00      	nop
 80224e8:	20015200 	.word	0x20015200
 80224ec:	20000000 	.word	0x20000000
 80224f0:	0801f173 	.word	0x0801f173
 80224f4:	20000098 	.word	0x20000098
 80224f8:	20015204 	.word	0x20015204
 80224fc:	0801f171 	.word	0x0801f171
 8022500:	2000009c 	.word	0x2000009c

08022504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022504:	b538      	push	{r3, r4, r5, lr}
 8022506:	4c15      	ldr	r4, [pc, #84]	; (802255c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022508:	4605      	mov	r5, r0
 802250a:	7823      	ldrb	r3, [r4, #0]
 802250c:	f3bf 8f5b 	dmb	ish
 8022510:	07da      	lsls	r2, r3, #31
 8022512:	d40b      	bmi.n	802252c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022514:	4620      	mov	r0, r4
 8022516:	f007 fe25 	bl	802a164 <__cxa_guard_acquire>
 802251a:	b138      	cbz	r0, 802252c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802251c:	4620      	mov	r0, r4
 802251e:	f007 fe2d 	bl	802a17c <__cxa_guard_release>
 8022522:	4a0f      	ldr	r2, [pc, #60]	; (8022560 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022524:	490f      	ldr	r1, [pc, #60]	; (8022564 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022526:	4810      	ldr	r0, [pc, #64]	; (8022568 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022528:	f007 fe15 	bl	802a156 <__aeabi_atexit>
 802252c:	4c0f      	ldr	r4, [pc, #60]	; (802256c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802252e:	7823      	ldrb	r3, [r4, #0]
 8022530:	f3bf 8f5b 	dmb	ish
 8022534:	07db      	lsls	r3, r3, #31
 8022536:	d40b      	bmi.n	8022550 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022538:	4620      	mov	r0, r4
 802253a:	f007 fe13 	bl	802a164 <__cxa_guard_acquire>
 802253e:	b138      	cbz	r0, 8022550 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022540:	4620      	mov	r0, r4
 8022542:	f007 fe1b 	bl	802a17c <__cxa_guard_release>
 8022546:	4a06      	ldr	r2, [pc, #24]	; (8022560 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022548:	4909      	ldr	r1, [pc, #36]	; (8022570 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802254a:	480a      	ldr	r0, [pc, #40]	; (8022574 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802254c:	f007 fe03 	bl	802a156 <__aeabi_atexit>
 8022550:	4b05      	ldr	r3, [pc, #20]	; (8022568 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022552:	61ab      	str	r3, [r5, #24]
 8022554:	4b07      	ldr	r3, [pc, #28]	; (8022574 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022556:	61eb      	str	r3, [r5, #28]
 8022558:	bd38      	pop	{r3, r4, r5, pc}
 802255a:	bf00      	nop
 802255c:	200151d8 	.word	0x200151d8
 8022560:	20000000 	.word	0x20000000
 8022564:	0801f177 	.word	0x0801f177
 8022568:	20000070 	.word	0x20000070
 802256c:	200151dc 	.word	0x200151dc
 8022570:	0801f175 	.word	0x0801f175
 8022574:	20000074 	.word	0x20000074

08022578 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8022578:	b510      	push	{r4, lr}
 802257a:	4604      	mov	r4, r0
 802257c:	f7ff ff88 	bl	8022490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022580:	4620      	mov	r0, r4
 8022582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022586:	f7ff bfbd 	b.w	8022504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802258c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802258c:	b538      	push	{r3, r4, r5, lr}
 802258e:	4c15      	ldr	r4, [pc, #84]	; (80225e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022590:	4605      	mov	r5, r0
 8022592:	7823      	ldrb	r3, [r4, #0]
 8022594:	f3bf 8f5b 	dmb	ish
 8022598:	07da      	lsls	r2, r3, #31
 802259a:	d40b      	bmi.n	80225b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802259c:	4620      	mov	r0, r4
 802259e:	f007 fde1 	bl	802a164 <__cxa_guard_acquire>
 80225a2:	b138      	cbz	r0, 80225b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80225a4:	4620      	mov	r0, r4
 80225a6:	f007 fde9 	bl	802a17c <__cxa_guard_release>
 80225aa:	4a0f      	ldr	r2, [pc, #60]	; (80225e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80225ac:	490f      	ldr	r1, [pc, #60]	; (80225ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80225ae:	4810      	ldr	r0, [pc, #64]	; (80225f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80225b0:	f007 fdd1 	bl	802a156 <__aeabi_atexit>
 80225b4:	4c0f      	ldr	r4, [pc, #60]	; (80225f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80225b6:	7823      	ldrb	r3, [r4, #0]
 80225b8:	f3bf 8f5b 	dmb	ish
 80225bc:	07db      	lsls	r3, r3, #31
 80225be:	d40b      	bmi.n	80225d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80225c0:	4620      	mov	r0, r4
 80225c2:	f007 fdcf 	bl	802a164 <__cxa_guard_acquire>
 80225c6:	b138      	cbz	r0, 80225d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80225c8:	4620      	mov	r0, r4
 80225ca:	f007 fdd7 	bl	802a17c <__cxa_guard_release>
 80225ce:	4a06      	ldr	r2, [pc, #24]	; (80225e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80225d0:	4909      	ldr	r1, [pc, #36]	; (80225f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80225d2:	480a      	ldr	r0, [pc, #40]	; (80225fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80225d4:	f007 fdbf 	bl	802a156 <__aeabi_atexit>
 80225d8:	4b05      	ldr	r3, [pc, #20]	; (80225f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80225da:	632b      	str	r3, [r5, #48]	; 0x30
 80225dc:	4b07      	ldr	r3, [pc, #28]	; (80225fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80225de:	636b      	str	r3, [r5, #52]	; 0x34
 80225e0:	bd38      	pop	{r3, r4, r5, pc}
 80225e2:	bf00      	nop
 80225e4:	20015210 	.word	0x20015210
 80225e8:	20000000 	.word	0x20000000
 80225ec:	0801f16b 	.word	0x0801f16b
 80225f0:	200000a8 	.word	0x200000a8
 80225f4:	20015214 	.word	0x20015214
 80225f8:	0801f169 	.word	0x0801f169
 80225fc:	200000ac 	.word	0x200000ac

08022600 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022600:	b538      	push	{r3, r4, r5, lr}
 8022602:	4c15      	ldr	r4, [pc, #84]	; (8022658 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022604:	4605      	mov	r5, r0
 8022606:	7823      	ldrb	r3, [r4, #0]
 8022608:	f3bf 8f5b 	dmb	ish
 802260c:	07da      	lsls	r2, r3, #31
 802260e:	d40b      	bmi.n	8022628 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022610:	4620      	mov	r0, r4
 8022612:	f007 fda7 	bl	802a164 <__cxa_guard_acquire>
 8022616:	b138      	cbz	r0, 8022628 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022618:	4620      	mov	r0, r4
 802261a:	f007 fdaf 	bl	802a17c <__cxa_guard_release>
 802261e:	4a0f      	ldr	r2, [pc, #60]	; (802265c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022620:	490f      	ldr	r1, [pc, #60]	; (8022660 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022622:	4810      	ldr	r0, [pc, #64]	; (8022664 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022624:	f007 fd97 	bl	802a156 <__aeabi_atexit>
 8022628:	4c0f      	ldr	r4, [pc, #60]	; (8022668 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802262a:	7823      	ldrb	r3, [r4, #0]
 802262c:	f3bf 8f5b 	dmb	ish
 8022630:	07db      	lsls	r3, r3, #31
 8022632:	d40b      	bmi.n	802264c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022634:	4620      	mov	r0, r4
 8022636:	f007 fd95 	bl	802a164 <__cxa_guard_acquire>
 802263a:	b138      	cbz	r0, 802264c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802263c:	4620      	mov	r0, r4
 802263e:	f007 fd9d 	bl	802a17c <__cxa_guard_release>
 8022642:	4a06      	ldr	r2, [pc, #24]	; (802265c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022644:	4909      	ldr	r1, [pc, #36]	; (802266c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022646:	480a      	ldr	r0, [pc, #40]	; (8022670 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022648:	f007 fd85 	bl	802a156 <__aeabi_atexit>
 802264c:	4b05      	ldr	r3, [pc, #20]	; (8022664 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802264e:	62ab      	str	r3, [r5, #40]	; 0x28
 8022650:	4b07      	ldr	r3, [pc, #28]	; (8022670 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022652:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022654:	bd38      	pop	{r3, r4, r5, pc}
 8022656:	bf00      	nop
 8022658:	200151e0 	.word	0x200151e0
 802265c:	20000000 	.word	0x20000000
 8022660:	0801f16f 	.word	0x0801f16f
 8022664:	20000078 	.word	0x20000078
 8022668:	200151e4 	.word	0x200151e4
 802266c:	0801f16d 	.word	0x0801f16d
 8022670:	2000007c 	.word	0x2000007c

08022674 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022674:	b510      	push	{r4, lr}
 8022676:	4604      	mov	r4, r0
 8022678:	f7ff ff88 	bl	802258c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802267c:	4620      	mov	r0, r4
 802267e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022682:	f7ff bfbd 	b.w	8022600 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022688 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022688:	b538      	push	{r3, r4, r5, lr}
 802268a:	4c15      	ldr	r4, [pc, #84]	; (80226e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802268c:	4605      	mov	r5, r0
 802268e:	7823      	ldrb	r3, [r4, #0]
 8022690:	f3bf 8f5b 	dmb	ish
 8022694:	07da      	lsls	r2, r3, #31
 8022696:	d40b      	bmi.n	80226b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022698:	4620      	mov	r0, r4
 802269a:	f007 fd63 	bl	802a164 <__cxa_guard_acquire>
 802269e:	b138      	cbz	r0, 80226b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80226a0:	4620      	mov	r0, r4
 80226a2:	f007 fd6b 	bl	802a17c <__cxa_guard_release>
 80226a6:	4a0f      	ldr	r2, [pc, #60]	; (80226e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80226a8:	490f      	ldr	r1, [pc, #60]	; (80226e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80226aa:	4810      	ldr	r0, [pc, #64]	; (80226ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80226ac:	f007 fd53 	bl	802a156 <__aeabi_atexit>
 80226b0:	4c0f      	ldr	r4, [pc, #60]	; (80226f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80226b2:	7823      	ldrb	r3, [r4, #0]
 80226b4:	f3bf 8f5b 	dmb	ish
 80226b8:	07db      	lsls	r3, r3, #31
 80226ba:	d40b      	bmi.n	80226d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80226bc:	4620      	mov	r0, r4
 80226be:	f007 fd51 	bl	802a164 <__cxa_guard_acquire>
 80226c2:	b138      	cbz	r0, 80226d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80226c4:	4620      	mov	r0, r4
 80226c6:	f007 fd59 	bl	802a17c <__cxa_guard_release>
 80226ca:	4a06      	ldr	r2, [pc, #24]	; (80226e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80226cc:	4909      	ldr	r1, [pc, #36]	; (80226f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80226ce:	480a      	ldr	r0, [pc, #40]	; (80226f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80226d0:	f007 fd41 	bl	802a156 <__aeabi_atexit>
 80226d4:	4b05      	ldr	r3, [pc, #20]	; (80226ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80226d6:	652b      	str	r3, [r5, #80]	; 0x50
 80226d8:	4b07      	ldr	r3, [pc, #28]	; (80226f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80226da:	656b      	str	r3, [r5, #84]	; 0x54
 80226dc:	bd38      	pop	{r3, r4, r5, pc}
 80226de:	bf00      	nop
 80226e0:	20015218 	.word	0x20015218
 80226e4:	20000000 	.word	0x20000000
 80226e8:	0801f15b 	.word	0x0801f15b
 80226ec:	200000b0 	.word	0x200000b0
 80226f0:	2001521c 	.word	0x2001521c
 80226f4:	0801f159 	.word	0x0801f159
 80226f8:	200000b4 	.word	0x200000b4

080226fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80226fc:	b538      	push	{r3, r4, r5, lr}
 80226fe:	4c15      	ldr	r4, [pc, #84]	; (8022754 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022700:	4605      	mov	r5, r0
 8022702:	7823      	ldrb	r3, [r4, #0]
 8022704:	f3bf 8f5b 	dmb	ish
 8022708:	07da      	lsls	r2, r3, #31
 802270a:	d40b      	bmi.n	8022724 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802270c:	4620      	mov	r0, r4
 802270e:	f007 fd29 	bl	802a164 <__cxa_guard_acquire>
 8022712:	b138      	cbz	r0, 8022724 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022714:	4620      	mov	r0, r4
 8022716:	f007 fd31 	bl	802a17c <__cxa_guard_release>
 802271a:	4a0f      	ldr	r2, [pc, #60]	; (8022758 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802271c:	490f      	ldr	r1, [pc, #60]	; (802275c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802271e:	4810      	ldr	r0, [pc, #64]	; (8022760 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022720:	f007 fd19 	bl	802a156 <__aeabi_atexit>
 8022724:	4c0f      	ldr	r4, [pc, #60]	; (8022764 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8022726:	7823      	ldrb	r3, [r4, #0]
 8022728:	f3bf 8f5b 	dmb	ish
 802272c:	07db      	lsls	r3, r3, #31
 802272e:	d40b      	bmi.n	8022748 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022730:	4620      	mov	r0, r4
 8022732:	f007 fd17 	bl	802a164 <__cxa_guard_acquire>
 8022736:	b138      	cbz	r0, 8022748 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022738:	4620      	mov	r0, r4
 802273a:	f007 fd1f 	bl	802a17c <__cxa_guard_release>
 802273e:	4a06      	ldr	r2, [pc, #24]	; (8022758 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022740:	4909      	ldr	r1, [pc, #36]	; (8022768 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022742:	480a      	ldr	r0, [pc, #40]	; (802276c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022744:	f007 fd07 	bl	802a156 <__aeabi_atexit>
 8022748:	4b05      	ldr	r3, [pc, #20]	; (8022760 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802274a:	64ab      	str	r3, [r5, #72]	; 0x48
 802274c:	4b07      	ldr	r3, [pc, #28]	; (802276c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802274e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022750:	bd38      	pop	{r3, r4, r5, pc}
 8022752:	bf00      	nop
 8022754:	20015220 	.word	0x20015220
 8022758:	20000000 	.word	0x20000000
 802275c:	0801f15f 	.word	0x0801f15f
 8022760:	200000b8 	.word	0x200000b8
 8022764:	20015224 	.word	0x20015224
 8022768:	0801f15d 	.word	0x0801f15d
 802276c:	200000bc 	.word	0x200000bc

08022770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022770:	b538      	push	{r3, r4, r5, lr}
 8022772:	4c15      	ldr	r4, [pc, #84]	; (80227c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022774:	4605      	mov	r5, r0
 8022776:	7823      	ldrb	r3, [r4, #0]
 8022778:	f3bf 8f5b 	dmb	ish
 802277c:	07da      	lsls	r2, r3, #31
 802277e:	d40b      	bmi.n	8022798 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022780:	4620      	mov	r0, r4
 8022782:	f007 fcef 	bl	802a164 <__cxa_guard_acquire>
 8022786:	b138      	cbz	r0, 8022798 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022788:	4620      	mov	r0, r4
 802278a:	f007 fcf7 	bl	802a17c <__cxa_guard_release>
 802278e:	4a0f      	ldr	r2, [pc, #60]	; (80227cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022790:	490f      	ldr	r1, [pc, #60]	; (80227d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022792:	4810      	ldr	r0, [pc, #64]	; (80227d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022794:	f007 fcdf 	bl	802a156 <__aeabi_atexit>
 8022798:	4c0f      	ldr	r4, [pc, #60]	; (80227d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802279a:	7823      	ldrb	r3, [r4, #0]
 802279c:	f3bf 8f5b 	dmb	ish
 80227a0:	07db      	lsls	r3, r3, #31
 80227a2:	d40b      	bmi.n	80227bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80227a4:	4620      	mov	r0, r4
 80227a6:	f007 fcdd 	bl	802a164 <__cxa_guard_acquire>
 80227aa:	b138      	cbz	r0, 80227bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80227ac:	4620      	mov	r0, r4
 80227ae:	f007 fce5 	bl	802a17c <__cxa_guard_release>
 80227b2:	4a06      	ldr	r2, [pc, #24]	; (80227cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80227b4:	4909      	ldr	r1, [pc, #36]	; (80227dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80227b6:	480a      	ldr	r0, [pc, #40]	; (80227e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80227b8:	f007 fccd 	bl	802a156 <__aeabi_atexit>
 80227bc:	4b05      	ldr	r3, [pc, #20]	; (80227d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80227be:	642b      	str	r3, [r5, #64]	; 0x40
 80227c0:	4b07      	ldr	r3, [pc, #28]	; (80227e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80227c2:	646b      	str	r3, [r5, #68]	; 0x44
 80227c4:	bd38      	pop	{r3, r4, r5, pc}
 80227c6:	bf00      	nop
 80227c8:	200151e8 	.word	0x200151e8
 80227cc:	20000000 	.word	0x20000000
 80227d0:	0801f163 	.word	0x0801f163
 80227d4:	20000080 	.word	0x20000080
 80227d8:	200151ec 	.word	0x200151ec
 80227dc:	0801f161 	.word	0x0801f161
 80227e0:	20000084 	.word	0x20000084

080227e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80227e4:	b538      	push	{r3, r4, r5, lr}
 80227e6:	4c15      	ldr	r4, [pc, #84]	; (802283c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80227e8:	4605      	mov	r5, r0
 80227ea:	7823      	ldrb	r3, [r4, #0]
 80227ec:	f3bf 8f5b 	dmb	ish
 80227f0:	07da      	lsls	r2, r3, #31
 80227f2:	d40b      	bmi.n	802280c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80227f4:	4620      	mov	r0, r4
 80227f6:	f007 fcb5 	bl	802a164 <__cxa_guard_acquire>
 80227fa:	b138      	cbz	r0, 802280c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80227fc:	4620      	mov	r0, r4
 80227fe:	f007 fcbd 	bl	802a17c <__cxa_guard_release>
 8022802:	4a0f      	ldr	r2, [pc, #60]	; (8022840 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022804:	490f      	ldr	r1, [pc, #60]	; (8022844 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8022806:	4810      	ldr	r0, [pc, #64]	; (8022848 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022808:	f007 fca5 	bl	802a156 <__aeabi_atexit>
 802280c:	4c0f      	ldr	r4, [pc, #60]	; (802284c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802280e:	7823      	ldrb	r3, [r4, #0]
 8022810:	f3bf 8f5b 	dmb	ish
 8022814:	07db      	lsls	r3, r3, #31
 8022816:	d40b      	bmi.n	8022830 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022818:	4620      	mov	r0, r4
 802281a:	f007 fca3 	bl	802a164 <__cxa_guard_acquire>
 802281e:	b138      	cbz	r0, 8022830 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022820:	4620      	mov	r0, r4
 8022822:	f007 fcab 	bl	802a17c <__cxa_guard_release>
 8022826:	4a06      	ldr	r2, [pc, #24]	; (8022840 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022828:	4909      	ldr	r1, [pc, #36]	; (8022850 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802282a:	480a      	ldr	r0, [pc, #40]	; (8022854 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802282c:	f007 fc93 	bl	802a156 <__aeabi_atexit>
 8022830:	4b05      	ldr	r3, [pc, #20]	; (8022848 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022832:	63ab      	str	r3, [r5, #56]	; 0x38
 8022834:	4b07      	ldr	r3, [pc, #28]	; (8022854 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022836:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022838:	bd38      	pop	{r3, r4, r5, pc}
 802283a:	bf00      	nop
 802283c:	20015208 	.word	0x20015208
 8022840:	20000000 	.word	0x20000000
 8022844:	0801f167 	.word	0x0801f167
 8022848:	200000a0 	.word	0x200000a0
 802284c:	2001520c 	.word	0x2001520c
 8022850:	0801f165 	.word	0x0801f165
 8022854:	200000a4 	.word	0x200000a4

08022858 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022858:	b510      	push	{r4, lr}
 802285a:	4604      	mov	r4, r0
 802285c:	f7ff ff14 	bl	8022688 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022860:	4620      	mov	r0, r4
 8022862:	f7ff ff85 	bl	8022770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022866:	4620      	mov	r0, r4
 8022868:	f7ff ff48 	bl	80226fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802286c:	4620      	mov	r0, r4
 802286e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022872:	f7ff bfb7 	b.w	80227e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022878:	b538      	push	{r3, r4, r5, lr}
 802287a:	4c15      	ldr	r4, [pc, #84]	; (80228d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802287c:	4605      	mov	r5, r0
 802287e:	7823      	ldrb	r3, [r4, #0]
 8022880:	f3bf 8f5b 	dmb	ish
 8022884:	07da      	lsls	r2, r3, #31
 8022886:	d40b      	bmi.n	80228a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022888:	4620      	mov	r0, r4
 802288a:	f007 fc6b 	bl	802a164 <__cxa_guard_acquire>
 802288e:	b138      	cbz	r0, 80228a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022890:	4620      	mov	r0, r4
 8022892:	f007 fc73 	bl	802a17c <__cxa_guard_release>
 8022896:	4a0f      	ldr	r2, [pc, #60]	; (80228d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022898:	490f      	ldr	r1, [pc, #60]	; (80228d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802289a:	4810      	ldr	r0, [pc, #64]	; (80228dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802289c:	f007 fc5b 	bl	802a156 <__aeabi_atexit>
 80228a0:	4c0f      	ldr	r4, [pc, #60]	; (80228e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80228a2:	7823      	ldrb	r3, [r4, #0]
 80228a4:	f3bf 8f5b 	dmb	ish
 80228a8:	07db      	lsls	r3, r3, #31
 80228aa:	d40b      	bmi.n	80228c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80228ac:	4620      	mov	r0, r4
 80228ae:	f007 fc59 	bl	802a164 <__cxa_guard_acquire>
 80228b2:	b138      	cbz	r0, 80228c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80228b4:	4620      	mov	r0, r4
 80228b6:	f007 fc61 	bl	802a17c <__cxa_guard_release>
 80228ba:	4a06      	ldr	r2, [pc, #24]	; (80228d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80228bc:	4909      	ldr	r1, [pc, #36]	; (80228e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80228be:	480a      	ldr	r0, [pc, #40]	; (80228e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80228c0:	f007 fc49 	bl	802a156 <__aeabi_atexit>
 80228c4:	4b05      	ldr	r3, [pc, #20]	; (80228dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80228c6:	662b      	str	r3, [r5, #96]	; 0x60
 80228c8:	4b07      	ldr	r3, [pc, #28]	; (80228e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80228ca:	666b      	str	r3, [r5, #100]	; 0x64
 80228cc:	bd38      	pop	{r3, r4, r5, pc}
 80228ce:	bf00      	nop
 80228d0:	200151f0 	.word	0x200151f0
 80228d4:	20000000 	.word	0x20000000
 80228d8:	0801f153 	.word	0x0801f153
 80228dc:	20000088 	.word	0x20000088
 80228e0:	200151f4 	.word	0x200151f4
 80228e4:	0801f151 	.word	0x0801f151
 80228e8:	2000008c 	.word	0x2000008c

080228ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80228ec:	b538      	push	{r3, r4, r5, lr}
 80228ee:	4c15      	ldr	r4, [pc, #84]	; (8022944 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80228f0:	4605      	mov	r5, r0
 80228f2:	7823      	ldrb	r3, [r4, #0]
 80228f4:	f3bf 8f5b 	dmb	ish
 80228f8:	07da      	lsls	r2, r3, #31
 80228fa:	d40b      	bmi.n	8022914 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80228fc:	4620      	mov	r0, r4
 80228fe:	f007 fc31 	bl	802a164 <__cxa_guard_acquire>
 8022902:	b138      	cbz	r0, 8022914 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022904:	4620      	mov	r0, r4
 8022906:	f007 fc39 	bl	802a17c <__cxa_guard_release>
 802290a:	4a0f      	ldr	r2, [pc, #60]	; (8022948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802290c:	490f      	ldr	r1, [pc, #60]	; (802294c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802290e:	4810      	ldr	r0, [pc, #64]	; (8022950 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022910:	f007 fc21 	bl	802a156 <__aeabi_atexit>
 8022914:	4c0f      	ldr	r4, [pc, #60]	; (8022954 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022916:	7823      	ldrb	r3, [r4, #0]
 8022918:	f3bf 8f5b 	dmb	ish
 802291c:	07db      	lsls	r3, r3, #31
 802291e:	d40b      	bmi.n	8022938 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022920:	4620      	mov	r0, r4
 8022922:	f007 fc1f 	bl	802a164 <__cxa_guard_acquire>
 8022926:	b138      	cbz	r0, 8022938 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022928:	4620      	mov	r0, r4
 802292a:	f007 fc27 	bl	802a17c <__cxa_guard_release>
 802292e:	4a06      	ldr	r2, [pc, #24]	; (8022948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022930:	4909      	ldr	r1, [pc, #36]	; (8022958 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8022932:	480a      	ldr	r0, [pc, #40]	; (802295c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022934:	f007 fc0f 	bl	802a156 <__aeabi_atexit>
 8022938:	4b05      	ldr	r3, [pc, #20]	; (8022950 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802293a:	65ab      	str	r3, [r5, #88]	; 0x58
 802293c:	4b07      	ldr	r3, [pc, #28]	; (802295c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802293e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8022940:	bd38      	pop	{r3, r4, r5, pc}
 8022942:	bf00      	nop
 8022944:	200151c8 	.word	0x200151c8
 8022948:	20000000 	.word	0x20000000
 802294c:	0801f157 	.word	0x0801f157
 8022950:	20000060 	.word	0x20000060
 8022954:	200151cc 	.word	0x200151cc
 8022958:	0801f155 	.word	0x0801f155
 802295c:	20000064 	.word	0x20000064

08022960 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022960:	b510      	push	{r4, lr}
 8022962:	4604      	mov	r4, r0
 8022964:	f7ff ff88 	bl	8022878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022968:	4620      	mov	r0, r4
 802296a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802296e:	f7ff bfbd 	b.w	80228ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022974:	b538      	push	{r3, r4, r5, lr}
 8022976:	4c15      	ldr	r4, [pc, #84]	; (80229cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022978:	4605      	mov	r5, r0
 802297a:	7823      	ldrb	r3, [r4, #0]
 802297c:	f3bf 8f5b 	dmb	ish
 8022980:	07da      	lsls	r2, r3, #31
 8022982:	d40b      	bmi.n	802299c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022984:	4620      	mov	r0, r4
 8022986:	f007 fbed 	bl	802a164 <__cxa_guard_acquire>
 802298a:	b138      	cbz	r0, 802299c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802298c:	4620      	mov	r0, r4
 802298e:	f007 fbf5 	bl	802a17c <__cxa_guard_release>
 8022992:	4a0f      	ldr	r2, [pc, #60]	; (80229d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022994:	490f      	ldr	r1, [pc, #60]	; (80229d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022996:	4810      	ldr	r0, [pc, #64]	; (80229d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022998:	f007 fbdd 	bl	802a156 <__aeabi_atexit>
 802299c:	4c0f      	ldr	r4, [pc, #60]	; (80229dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802299e:	7823      	ldrb	r3, [r4, #0]
 80229a0:	f3bf 8f5b 	dmb	ish
 80229a4:	07db      	lsls	r3, r3, #31
 80229a6:	d40b      	bmi.n	80229c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80229a8:	4620      	mov	r0, r4
 80229aa:	f007 fbdb 	bl	802a164 <__cxa_guard_acquire>
 80229ae:	b138      	cbz	r0, 80229c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80229b0:	4620      	mov	r0, r4
 80229b2:	f007 fbe3 	bl	802a17c <__cxa_guard_release>
 80229b6:	4a06      	ldr	r2, [pc, #24]	; (80229d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80229b8:	4909      	ldr	r1, [pc, #36]	; (80229e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80229ba:	480a      	ldr	r0, [pc, #40]	; (80229e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80229bc:	f007 fbcb 	bl	802a156 <__aeabi_atexit>
 80229c0:	4b05      	ldr	r3, [pc, #20]	; (80229d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80229c2:	672b      	str	r3, [r5, #112]	; 0x70
 80229c4:	4b07      	ldr	r3, [pc, #28]	; (80229e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80229c6:	676b      	str	r3, [r5, #116]	; 0x74
 80229c8:	bd38      	pop	{r3, r4, r5, pc}
 80229ca:	bf00      	nop
 80229cc:	200151c0 	.word	0x200151c0
 80229d0:	20000000 	.word	0x20000000
 80229d4:	0801f14b 	.word	0x0801f14b
 80229d8:	20000058 	.word	0x20000058
 80229dc:	200151c4 	.word	0x200151c4
 80229e0:	0801f149 	.word	0x0801f149
 80229e4:	2000005c 	.word	0x2000005c

080229e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80229e8:	b538      	push	{r3, r4, r5, lr}
 80229ea:	4c15      	ldr	r4, [pc, #84]	; (8022a40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80229ec:	4605      	mov	r5, r0
 80229ee:	7823      	ldrb	r3, [r4, #0]
 80229f0:	f3bf 8f5b 	dmb	ish
 80229f4:	07da      	lsls	r2, r3, #31
 80229f6:	d40b      	bmi.n	8022a10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80229f8:	4620      	mov	r0, r4
 80229fa:	f007 fbb3 	bl	802a164 <__cxa_guard_acquire>
 80229fe:	b138      	cbz	r0, 8022a10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022a00:	4620      	mov	r0, r4
 8022a02:	f007 fbbb 	bl	802a17c <__cxa_guard_release>
 8022a06:	4a0f      	ldr	r2, [pc, #60]	; (8022a44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022a08:	490f      	ldr	r1, [pc, #60]	; (8022a48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022a0a:	4810      	ldr	r0, [pc, #64]	; (8022a4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022a0c:	f007 fba3 	bl	802a156 <__aeabi_atexit>
 8022a10:	4c0f      	ldr	r4, [pc, #60]	; (8022a50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022a12:	7823      	ldrb	r3, [r4, #0]
 8022a14:	f3bf 8f5b 	dmb	ish
 8022a18:	07db      	lsls	r3, r3, #31
 8022a1a:	d40b      	bmi.n	8022a34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	f007 fba1 	bl	802a164 <__cxa_guard_acquire>
 8022a22:	b138      	cbz	r0, 8022a34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022a24:	4620      	mov	r0, r4
 8022a26:	f007 fba9 	bl	802a17c <__cxa_guard_release>
 8022a2a:	4a06      	ldr	r2, [pc, #24]	; (8022a44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022a2c:	4909      	ldr	r1, [pc, #36]	; (8022a54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022a2e:	480a      	ldr	r0, [pc, #40]	; (8022a58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022a30:	f007 fb91 	bl	802a156 <__aeabi_atexit>
 8022a34:	4b05      	ldr	r3, [pc, #20]	; (8022a4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022a36:	66ab      	str	r3, [r5, #104]	; 0x68
 8022a38:	4b07      	ldr	r3, [pc, #28]	; (8022a58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022a3a:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022a3c:	bd38      	pop	{r3, r4, r5, pc}
 8022a3e:	bf00      	nop
 8022a40:	200151b8 	.word	0x200151b8
 8022a44:	20000000 	.word	0x20000000
 8022a48:	0801f14f 	.word	0x0801f14f
 8022a4c:	20000050 	.word	0x20000050
 8022a50:	200151bc 	.word	0x200151bc
 8022a54:	0801f14d 	.word	0x0801f14d
 8022a58:	20000054 	.word	0x20000054

08022a5c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022a5c:	b510      	push	{r4, lr}
 8022a5e:	4604      	mov	r4, r0
 8022a60:	f7ff ff88 	bl	8022974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022a64:	4620      	mov	r0, r4
 8022a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a6a:	f7ff bfbd 	b.w	80229e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022a6e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022a6e:	b510      	push	{r4, lr}
 8022a70:	4604      	mov	r4, r0
 8022a72:	f7ff fff3 	bl	8022a5c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022a76:	4620      	mov	r0, r4
 8022a78:	f7ff ff72 	bl	8022960 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022a7c:	4620      	mov	r0, r4
 8022a7e:	f7ff fdf9 	bl	8022674 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022a82:	4620      	mov	r0, r4
 8022a84:	f7ff fcfa 	bl	802247c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022a88:	4620      	mov	r0, r4
 8022a8a:	f7ff fd75 	bl	8022578 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022a8e:	4620      	mov	r0, r4
 8022a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a94:	f7ff bee0 	b.w	8022858 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022a98 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8022a98:	b538      	push	{r3, r4, r5, lr}
 8022a9a:	4c0b      	ldr	r4, [pc, #44]	; (8022ac8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8022a9c:	4605      	mov	r5, r0
 8022a9e:	7823      	ldrb	r3, [r4, #0]
 8022aa0:	f3bf 8f5b 	dmb	ish
 8022aa4:	07db      	lsls	r3, r3, #31
 8022aa6:	d40b      	bmi.n	8022ac0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8022aa8:	4620      	mov	r0, r4
 8022aaa:	f007 fb5b 	bl	802a164 <__cxa_guard_acquire>
 8022aae:	b138      	cbz	r0, 8022ac0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8022ab0:	4620      	mov	r0, r4
 8022ab2:	f007 fb63 	bl	802a17c <__cxa_guard_release>
 8022ab6:	4a05      	ldr	r2, [pc, #20]	; (8022acc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8022ab8:	4905      	ldr	r1, [pc, #20]	; (8022ad0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8022aba:	4806      	ldr	r0, [pc, #24]	; (8022ad4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8022abc:	f007 fb4b 	bl	802a156 <__aeabi_atexit>
 8022ac0:	4b04      	ldr	r3, [pc, #16]	; (8022ad4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8022ac2:	67ab      	str	r3, [r5, #120]	; 0x78
 8022ac4:	bd38      	pop	{r3, r4, r5, pc}
 8022ac6:	bf00      	nop
 8022ac8:	200151ac 	.word	0x200151ac
 8022acc:	20000000 	.word	0x20000000
 8022ad0:	0801f147 	.word	0x0801f147
 8022ad4:	20000048 	.word	0x20000048

08022ad8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8022ad8:	b538      	push	{r3, r4, r5, lr}
 8022ada:	4c0b      	ldr	r4, [pc, #44]	; (8022b08 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8022adc:	4605      	mov	r5, r0
 8022ade:	7823      	ldrb	r3, [r4, #0]
 8022ae0:	f3bf 8f5b 	dmb	ish
 8022ae4:	07db      	lsls	r3, r3, #31
 8022ae6:	d40b      	bmi.n	8022b00 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8022ae8:	4620      	mov	r0, r4
 8022aea:	f007 fb3b 	bl	802a164 <__cxa_guard_acquire>
 8022aee:	b138      	cbz	r0, 8022b00 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8022af0:	4620      	mov	r0, r4
 8022af2:	f007 fb43 	bl	802a17c <__cxa_guard_release>
 8022af6:	4a05      	ldr	r2, [pc, #20]	; (8022b0c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8022af8:	4905      	ldr	r1, [pc, #20]	; (8022b10 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8022afa:	4806      	ldr	r0, [pc, #24]	; (8022b14 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022afc:	f007 fb2b 	bl	802a156 <__aeabi_atexit>
 8022b00:	4b04      	ldr	r3, [pc, #16]	; (8022b14 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022b02:	67eb      	str	r3, [r5, #124]	; 0x7c
 8022b04:	bd38      	pop	{r3, r4, r5, pc}
 8022b06:	bf00      	nop
 8022b08:	200151b0 	.word	0x200151b0
 8022b0c:	20000000 	.word	0x20000000
 8022b10:	0801f145 	.word	0x0801f145
 8022b14:	2000004c 	.word	0x2000004c

08022b18 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8022b18:	b570      	push	{r4, r5, r6, lr}
 8022b1a:	4d0d      	ldr	r5, [pc, #52]	; (8022b50 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8022b1c:	4606      	mov	r6, r0
 8022b1e:	4c0d      	ldr	r4, [pc, #52]	; (8022b54 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8022b20:	782b      	ldrb	r3, [r5, #0]
 8022b22:	f3bf 8f5b 	dmb	ish
 8022b26:	f013 0f01 	tst.w	r3, #1
 8022b2a:	d10d      	bne.n	8022b48 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8022b2c:	4628      	mov	r0, r5
 8022b2e:	f007 fb19 	bl	802a164 <__cxa_guard_acquire>
 8022b32:	b148      	cbz	r0, 8022b48 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8022b34:	4b08      	ldr	r3, [pc, #32]	; (8022b58 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8022b36:	4628      	mov	r0, r5
 8022b38:	6023      	str	r3, [r4, #0]
 8022b3a:	f007 fb1f 	bl	802a17c <__cxa_guard_release>
 8022b3e:	4a07      	ldr	r2, [pc, #28]	; (8022b5c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8022b40:	4620      	mov	r0, r4
 8022b42:	4907      	ldr	r1, [pc, #28]	; (8022b60 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8022b44:	f007 fb07 	bl	802a156 <__aeabi_atexit>
 8022b48:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 8022b4c:	bd70      	pop	{r4, r5, r6, pc}
 8022b4e:	bf00      	nop
 8022b50:	200151b4 	.word	0x200151b4
 8022b54:	20015228 	.word	0x20015228
 8022b58:	0802fabc 	.word	0x0802fabc
 8022b5c:	20000000 	.word	0x20000000
 8022b60:	0801f143 	.word	0x0801f143

08022b64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8022b64:	b510      	push	{r4, lr}
 8022b66:	4604      	mov	r4, r0
 8022b68:	f7ff ff96 	bl	8022a98 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8022b6c:	4620      	mov	r0, r4
 8022b6e:	f7ff ffb3 	bl	8022ad8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8022b72:	4620      	mov	r0, r4
 8022b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b78:	f7ff bfce 	b.w	8022b18 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08022b7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b80:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8022b84:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8022b88:	2d00      	cmp	r5, #0
 8022b8a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8022b8e:	fb05 4c0e 	mla	ip, r5, lr, r4
 8022b92:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8022b96:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022b9a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8022b9e:	eb02 0a0c 	add.w	sl, r2, ip
 8022ba2:	8808      	ldrh	r0, [r1, #0]
 8022ba4:	f2c0 80b0 	blt.w	8022d08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022ba8:	45ab      	cmp	fp, r5
 8022baa:	f340 80ad 	ble.w	8022d08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022bae:	2c00      	cmp	r4, #0
 8022bb0:	f2c0 80a8 	blt.w	8022d04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022bb4:	45a6      	cmp	lr, r4
 8022bb6:	f340 80a5 	ble.w	8022d04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022bba:	f812 200c 	ldrb.w	r2, [r2, ip]
 8022bbe:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8022bc2:	1c62      	adds	r2, r4, #1
 8022bc4:	f100 80a3 	bmi.w	8022d0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022bc8:	4596      	cmp	lr, r2
 8022bca:	f340 80a0 	ble.w	8022d0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022bce:	f1b9 0f00 	cmp.w	r9, #0
 8022bd2:	f000 809c 	beq.w	8022d0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022bd6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022bda:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022bde:	3501      	adds	r5, #1
 8022be0:	f100 8099 	bmi.w	8022d16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022be4:	45ab      	cmp	fp, r5
 8022be6:	f340 8096 	ble.w	8022d16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022bea:	2f00      	cmp	r7, #0
 8022bec:	f000 8093 	beq.w	8022d16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022bf0:	2c00      	cmp	r4, #0
 8022bf2:	f2c0 808e 	blt.w	8022d12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022bf6:	45a6      	cmp	lr, r4
 8022bf8:	f340 808b 	ble.w	8022d12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022bfc:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8022c00:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8022c04:	3401      	adds	r4, #1
 8022c06:	f100 8089 	bmi.w	8022d1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022c0a:	45a6      	cmp	lr, r4
 8022c0c:	f340 8086 	ble.w	8022d1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022c10:	f1b9 0f00 	cmp.w	r9, #0
 8022c14:	f000 8082 	beq.w	8022d1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022c18:	44d6      	add	lr, sl
 8022c1a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022c1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022c22:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022c26:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022c2a:	fb19 fe07 	smulbb	lr, r9, r7
 8022c2e:	f1c7 0210 	rsb	r2, r7, #16
 8022c32:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022c36:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022c3a:	eba2 0209 	sub.w	r2, r2, r9
 8022c3e:	ea44 0808 	orr.w	r8, r4, r8
 8022c42:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022c46:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022c4a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022c4e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022c52:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022c56:	ea44 0c0c 	orr.w	ip, r4, ip
 8022c5a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022c5e:	fb04 f40c 	mul.w	r4, r4, ip
 8022c62:	fb02 4808 	mla	r8, r2, r8, r4
 8022c66:	041a      	lsls	r2, r3, #16
 8022c68:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022c6c:	b2b4      	uxth	r4, r6
 8022c6e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c72:	43f6      	mvns	r6, r6
 8022c74:	4313      	orrs	r3, r2
 8022c76:	042a      	lsls	r2, r5, #16
 8022c78:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022c7c:	b2f6      	uxtb	r6, r6
 8022c7e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c82:	fb0e 8303 	mla	r3, lr, r3, r8
 8022c86:	432a      	orrs	r2, r5
 8022c88:	fb07 3202 	mla	r2, r7, r2, r3
 8022c8c:	10c7      	asrs	r7, r0, #3
 8022c8e:	0d53      	lsrs	r3, r2, #21
 8022c90:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022c94:	0952      	lsrs	r2, r2, #5
 8022c96:	fb17 f706 	smulbb	r7, r7, r6
 8022c9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022ca2:	431a      	orrs	r2, r3
 8022ca4:	b293      	uxth	r3, r2
 8022ca6:	1202      	asrs	r2, r0, #8
 8022ca8:	121d      	asrs	r5, r3, #8
 8022caa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022cae:	00c0      	lsls	r0, r0, #3
 8022cb0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022cb4:	fb12 f206 	smulbb	r2, r2, r6
 8022cb8:	b2c0      	uxtb	r0, r0
 8022cba:	fb05 2504 	mla	r5, r5, r4, r2
 8022cbe:	10da      	asrs	r2, r3, #3
 8022cc0:	fb10 f006 	smulbb	r0, r0, r6
 8022cc4:	00db      	lsls	r3, r3, #3
 8022cc6:	b2ad      	uxth	r5, r5
 8022cc8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022ccc:	b2db      	uxtb	r3, r3
 8022cce:	fb02 7204 	mla	r2, r2, r4, r7
 8022cd2:	fb03 0004 	mla	r0, r3, r4, r0
 8022cd6:	1c6b      	adds	r3, r5, #1
 8022cd8:	b292      	uxth	r2, r2
 8022cda:	b280      	uxth	r0, r0
 8022cdc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022ce0:	1c43      	adds	r3, r0, #1
 8022ce2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022ce6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022cea:	1c50      	adds	r0, r2, #1
 8022cec:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022cf0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022cf4:	0952      	lsrs	r2, r2, #5
 8022cf6:	432b      	orrs	r3, r5
 8022cf8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022cfc:	4313      	orrs	r3, r2
 8022cfe:	800b      	strh	r3, [r1, #0]
 8022d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d04:	4680      	mov	r8, r0
 8022d06:	e75c      	b.n	8022bc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022d08:	4684      	mov	ip, r0
 8022d0a:	4680      	mov	r8, r0
 8022d0c:	e767      	b.n	8022bde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022d0e:	4684      	mov	ip, r0
 8022d10:	e765      	b.n	8022bde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022d12:	4605      	mov	r5, r0
 8022d14:	e776      	b.n	8022c04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8022d16:	4603      	mov	r3, r0
 8022d18:	4605      	mov	r5, r0
 8022d1a:	e782      	b.n	8022c22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022d1c:	4603      	mov	r3, r0
 8022d1e:	e780      	b.n	8022c22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08022d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d24:	b099      	sub	sp, #100	; 0x64
 8022d26:	9215      	str	r2, [sp, #84]	; 0x54
 8022d28:	9309      	str	r3, [sp, #36]	; 0x24
 8022d2a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022d2c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8022d30:	9016      	str	r0, [sp, #88]	; 0x58
 8022d32:	930d      	str	r3, [sp, #52]	; 0x34
 8022d34:	6850      	ldr	r0, [r2, #4]
 8022d36:	910c      	str	r1, [sp, #48]	; 0x30
 8022d38:	6812      	ldr	r2, [r2, #0]
 8022d3a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022d3e:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8022d42:	fb00 1303 	mla	r3, r0, r3, r1
 8022d46:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022d4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d4c:	681b      	ldr	r3, [r3, #0]
 8022d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d52:	685e      	ldr	r6, [r3, #4]
 8022d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d56:	3604      	adds	r6, #4
 8022d58:	43db      	mvns	r3, r3
 8022d5a:	b2db      	uxtb	r3, r3
 8022d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8022d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	dc03      	bgt.n	8022d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	f340 8225 	ble.w	80231b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022d6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d76:	1e48      	subs	r0, r1, #1
 8022d78:	1e57      	subs	r7, r2, #1
 8022d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d7c:	2b00      	cmp	r3, #0
 8022d7e:	f340 80e3 	ble.w	8022f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022d82:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022d86:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022d8a:	d406      	bmi.n	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d8c:	4584      	cmp	ip, r0
 8022d8e:	da04      	bge.n	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d90:	2b00      	cmp	r3, #0
 8022d92:	db02      	blt.n	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d94:	42bb      	cmp	r3, r7
 8022d96:	f2c0 80d8 	blt.w	8022f4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022d9a:	f11c 0c01 	adds.w	ip, ip, #1
 8022d9e:	f100 80c9 	bmi.w	8022f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022da2:	4561      	cmp	r1, ip
 8022da4:	f2c0 80c6 	blt.w	8022f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022da8:	3301      	adds	r3, #1
 8022daa:	f100 80c3 	bmi.w	8022f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022dae:	429a      	cmp	r2, r3
 8022db0:	f2c0 80c0 	blt.w	8022f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022db4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022db8:	4647      	mov	r7, r8
 8022dba:	f1bb 0f00 	cmp.w	fp, #0
 8022dbe:	f340 80e3 	ble.w	8022f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022dc2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022dc4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022dc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022dca:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022dce:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022dd2:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022dd6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022dda:	689b      	ldr	r3, [r3, #8]
 8022ddc:	f100 8121 	bmi.w	8023022 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022de0:	f103 39ff 	add.w	r9, r3, #4294967295
 8022de4:	454a      	cmp	r2, r9
 8022de6:	f280 811c 	bge.w	8023022 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022dea:	f1bc 0f00 	cmp.w	ip, #0
 8022dee:	f2c0 8118 	blt.w	8023022 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022df2:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022df6:	45cc      	cmp	ip, r9
 8022df8:	f280 8113 	bge.w	8023022 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022dfc:	b21b      	sxth	r3, r3
 8022dfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e00:	fb0c 2203 	mla	r2, ip, r3, r2
 8022e04:	eb04 0902 	add.w	r9, r4, r2
 8022e08:	5ca2      	ldrb	r2, [r4, r2]
 8022e0a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022e0e:	2800      	cmp	r0, #0
 8022e10:	f000 80fe 	beq.w	8023010 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022e14:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022e18:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022e1c:	9211      	str	r2, [sp, #68]	; 0x44
 8022e1e:	b151      	cbz	r1, 8022e36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022e20:	eb09 0203 	add.w	r2, r9, r3
 8022e24:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022e28:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8022e2e:	7853      	ldrb	r3, [r2, #1]
 8022e30:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e34:	9312      	str	r3, [sp, #72]	; 0x48
 8022e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e38:	fb10 f201 	smulbb	r2, r0, r1
 8022e3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e3e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022e42:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e46:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022e4a:	10d2      	asrs	r2, r2, #3
 8022e4c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022e50:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022e54:	ea4c 0c03 	orr.w	ip, ip, r3
 8022e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022e5a:	041b      	lsls	r3, r3, #16
 8022e5c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022e60:	4323      	orrs	r3, r4
 8022e62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022e64:	4353      	muls	r3, r2
 8022e66:	fb09 330c 	mla	r3, r9, ip, r3
 8022e6a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022e6e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022e72:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022e76:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022e7a:	f1c1 0c10 	rsb	ip, r1, #16
 8022e7e:	ebac 0c00 	sub.w	ip, ip, r0
 8022e82:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022e86:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022e8a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022e90:	0418      	lsls	r0, r3, #16
 8022e92:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e96:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022e9a:	4318      	orrs	r0, r3
 8022e9c:	fb02 c200 	mla	r2, r2, r0, ip
 8022ea0:	8838      	ldrh	r0, [r7, #0]
 8022ea2:	0d53      	lsrs	r3, r2, #21
 8022ea4:	0952      	lsrs	r2, r2, #5
 8022ea6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022eaa:	1201      	asrs	r1, r0, #8
 8022eac:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022eb0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022eb4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022eb8:	00c0      	lsls	r0, r0, #3
 8022eba:	431a      	orrs	r2, r3
 8022ebc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022ec0:	fb11 f104 	smulbb	r1, r1, r4
 8022ec4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022ec8:	b292      	uxth	r2, r2
 8022eca:	fb1e fe04 	smulbb	lr, lr, r4
 8022ece:	b2c0      	uxtb	r0, r0
 8022ed0:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022ed4:	fb10 f004 	smulbb	r0, r0, r4
 8022ed8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022edc:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022ee0:	10d1      	asrs	r1, r2, #3
 8022ee2:	00d2      	lsls	r2, r2, #3
 8022ee4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022ee8:	fa1f fc8c 	uxth.w	ip, ip
 8022eec:	b2d2      	uxtb	r2, r2
 8022eee:	fb01 e103 	mla	r1, r1, r3, lr
 8022ef2:	fb02 0303 	mla	r3, r2, r3, r0
 8022ef6:	b289      	uxth	r1, r1
 8022ef8:	b29a      	uxth	r2, r3
 8022efa:	f10c 0301 	add.w	r3, ip, #1
 8022efe:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022f02:	1c53      	adds	r3, r2, #1
 8022f04:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f08:	1c4a      	adds	r2, r1, #1
 8022f0a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022f0e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022f12:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022f16:	0949      	lsrs	r1, r1, #5
 8022f18:	ea43 030c 	orr.w	r3, r3, ip
 8022f1c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022f20:	430b      	orrs	r3, r1
 8022f22:	803b      	strh	r3, [r7, #0]
 8022f24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022f26:	3702      	adds	r7, #2
 8022f28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f2c:	449a      	add	sl, r3
 8022f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022f30:	441d      	add	r5, r3
 8022f32:	e742      	b.n	8022dba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022f36:	f108 0802 	add.w	r8, r8, #2
 8022f3a:	449a      	add	sl, r3
 8022f3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022f3e:	441d      	add	r5, r3
 8022f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f42:	3b01      	subs	r3, #1
 8022f44:	9309      	str	r3, [sp, #36]	; 0x24
 8022f46:	e718      	b.n	8022d7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022f48:	d023      	beq.n	8022f92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f4c:	9825      	ldr	r0, [sp, #148]	; 0x94
 8022f4e:	3b01      	subs	r3, #1
 8022f50:	fb00 a003 	mla	r0, r0, r3, sl
 8022f54:	1400      	asrs	r0, r0, #16
 8022f56:	f53f af2d 	bmi.w	8022db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f5a:	3901      	subs	r1, #1
 8022f5c:	4288      	cmp	r0, r1
 8022f5e:	f6bf af29 	bge.w	8022db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f62:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022f64:	fb01 5303 	mla	r3, r1, r3, r5
 8022f68:	141b      	asrs	r3, r3, #16
 8022f6a:	f53f af23 	bmi.w	8022db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f6e:	3a01      	subs	r2, #1
 8022f70:	4293      	cmp	r3, r2
 8022f72:	f6bf af1f 	bge.w	8022db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f76:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022f7a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022f7e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022f82:	f1be 0f00 	cmp.w	lr, #0
 8022f86:	dc6c      	bgt.n	8023062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f8a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022f8e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8022f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	f340 810e 	ble.w	80231b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022f9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022fa0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022fa4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022fa8:	eef0 6a62 	vmov.f32	s13, s5
 8022fac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022fb0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022fb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fb8:	ee16 aa90 	vmov	sl, s13
 8022fbc:	eef0 6a43 	vmov.f32	s13, s6
 8022fc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fc4:	ee16 5a90 	vmov	r5, s13
 8022fc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022fcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022fd0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022fd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022fd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022fdc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022fe0:	ee12 2a90 	vmov	r2, s5
 8022fe4:	eef0 2a47 	vmov.f32	s5, s14
 8022fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fec:	ee13 2a10 	vmov	r2, s6
 8022ff0:	9325      	str	r3, [sp, #148]	; 0x94
 8022ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022ff4:	eeb0 3a67 	vmov.f32	s6, s15
 8022ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ffc:	9326      	str	r3, [sp, #152]	; 0x98
 8022ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023000:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023002:	3b01      	subs	r3, #1
 8023004:	930c      	str	r3, [sp, #48]	; 0x30
 8023006:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023008:	bf08      	it	eq
 802300a:	4613      	moveq	r3, r2
 802300c:	9309      	str	r3, [sp, #36]	; 0x24
 802300e:	e6a6      	b.n	8022d5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023010:	2900      	cmp	r1, #0
 8023012:	f43f af10 	beq.w	8022e36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023016:	f819 3003 	ldrb.w	r3, [r9, r3]
 802301a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802301e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023020:	e709      	b.n	8022e36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023022:	f112 0901 	adds.w	r9, r2, #1
 8023026:	f53f af7d 	bmi.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802302a:	454b      	cmp	r3, r9
 802302c:	f6ff af7a 	blt.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023030:	f11c 0901 	adds.w	r9, ip, #1
 8023034:	f53f af76 	bmi.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023038:	45ce      	cmp	lr, r9
 802303a:	f6ff af73 	blt.w	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802303e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023040:	b21b      	sxth	r3, r3
 8023042:	9202      	str	r2, [sp, #8]
 8023044:	fa0f f28e 	sxth.w	r2, lr
 8023048:	9300      	str	r3, [sp, #0]
 802304a:	4633      	mov	r3, r6
 802304c:	9201      	str	r2, [sp, #4]
 802304e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023050:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023054:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023058:	4639      	mov	r1, r7
 802305a:	9816      	ldr	r0, [sp, #88]	; 0x58
 802305c:	f7ff fd8e 	bl	8022b7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023060:	e760      	b.n	8022f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023062:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023064:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023068:	1429      	asrs	r1, r5, #16
 802306a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802306c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023070:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023074:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023078:	fb03 2101 	mla	r1, r3, r1, r2
 802307c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802307e:	440a      	add	r2, r1
 8023080:	5c61      	ldrb	r1, [r4, r1]
 8023082:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023086:	f1bc 0f00 	cmp.w	ip, #0
 802308a:	f000 808c 	beq.w	80231a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802308e:	7857      	ldrb	r7, [r2, #1]
 8023090:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023094:	9413      	str	r4, [sp, #76]	; 0x4c
 8023096:	b140      	cbz	r0, 80230aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023098:	18d7      	adds	r7, r2, r3
 802309a:	5cd3      	ldrb	r3, [r2, r3]
 802309c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80230a0:	9310      	str	r3, [sp, #64]	; 0x40
 80230a2:	787b      	ldrb	r3, [r7, #1]
 80230a4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80230a8:	9314      	str	r3, [sp, #80]	; 0x50
 80230aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80230ac:	fb1c f200 	smulbb	r2, ip, r0
 80230b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80230b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80230b6:	041f      	lsls	r7, r3, #16
 80230b8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80230bc:	10d2      	asrs	r2, r2, #3
 80230be:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80230c2:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80230c6:	431f      	orrs	r7, r3
 80230c8:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80230cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80230ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80230d0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80230d2:	041b      	lsls	r3, r3, #16
 80230d4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80230d8:	ea43 030b 	orr.w	r3, r3, fp
 80230dc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80230e0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80230e4:	4353      	muls	r3, r2
 80230e6:	fb04 3707 	mla	r7, r4, r7, r3
 80230ea:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80230ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80230f0:	ea43 0b01 	orr.w	fp, r3, r1
 80230f4:	f1c0 0110 	rsb	r1, r0, #16
 80230f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80230fa:	eba1 0c0c 	sub.w	ip, r1, ip
 80230fe:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023102:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023106:	fb0c 770b 	mla	r7, ip, fp, r7
 802310a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802310e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8023112:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023116:	ea4c 0c0b 	orr.w	ip, ip, fp
 802311a:	fb02 770c 	mla	r7, r2, ip, r7
 802311e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023120:	0d79      	lsrs	r1, r7, #21
 8023122:	8812      	ldrh	r2, [r2, #0]
 8023124:	097f      	lsrs	r7, r7, #5
 8023126:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802312a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802312e:	430f      	orrs	r7, r1
 8023130:	1211      	asrs	r1, r2, #8
 8023132:	b2bb      	uxth	r3, r7
 8023134:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023138:	10d7      	asrs	r7, r2, #3
 802313a:	fb11 f104 	smulbb	r1, r1, r4
 802313e:	1218      	asrs	r0, r3, #8
 8023140:	00d2      	lsls	r2, r2, #3
 8023142:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023146:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802314a:	fb17 f704 	smulbb	r7, r7, r4
 802314e:	b2d2      	uxtb	r2, r2
 8023150:	fb00 1009 	mla	r0, r0, r9, r1
 8023154:	10d9      	asrs	r1, r3, #3
 8023156:	fb12 f204 	smulbb	r2, r2, r4
 802315a:	00db      	lsls	r3, r3, #3
 802315c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023160:	b280      	uxth	r0, r0
 8023162:	b2db      	uxtb	r3, r3
 8023164:	fb01 7109 	mla	r1, r1, r9, r7
 8023168:	fb03 2309 	mla	r3, r3, r9, r2
 802316c:	1c42      	adds	r2, r0, #1
 802316e:	b289      	uxth	r1, r1
 8023170:	b29b      	uxth	r3, r3
 8023172:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023176:	1c4f      	adds	r7, r1, #1
 8023178:	1c5a      	adds	r2, r3, #1
 802317a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802317e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023182:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023188:	0949      	lsrs	r1, r1, #5
 802318a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802318e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023192:	4310      	orrs	r0, r2
 8023194:	4308      	orrs	r0, r1
 8023196:	f823 0b02 	strh.w	r0, [r3], #2
 802319a:	930e      	str	r3, [sp, #56]	; 0x38
 802319c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802319e:	449a      	add	sl, r3
 80231a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80231a2:	441d      	add	r5, r3
 80231a4:	e6ed      	b.n	8022f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80231a6:	2800      	cmp	r0, #0
 80231a8:	f43f af7f 	beq.w	80230aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80231ac:	5cd3      	ldrb	r3, [r2, r3]
 80231ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80231b2:	9310      	str	r3, [sp, #64]	; 0x40
 80231b4:	e779      	b.n	80230aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80231b6:	b019      	add	sp, #100	; 0x64
 80231b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80231bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231c0:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 80231c4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80231c8:	f1b8 0f00 	cmp.w	r8, #0
 80231cc:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80231d0:	fb08 470e 	mla	r7, r8, lr, r4
 80231d4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80231d8:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80231dc:	eb02 0907 	add.w	r9, r2, r7
 80231e0:	8808      	ldrh	r0, [r1, #0]
 80231e2:	db67      	blt.n	80232b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80231e4:	45c2      	cmp	sl, r8
 80231e6:	dd65      	ble.n	80232b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80231e8:	2c00      	cmp	r4, #0
 80231ea:	db61      	blt.n	80232b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80231ec:	45a6      	cmp	lr, r4
 80231ee:	dd5f      	ble.n	80232b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80231f0:	5dd2      	ldrb	r2, [r2, r7]
 80231f2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80231f6:	1c62      	adds	r2, r4, #1
 80231f8:	d45f      	bmi.n	80232ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80231fa:	4596      	cmp	lr, r2
 80231fc:	dd5d      	ble.n	80232ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80231fe:	2d00      	cmp	r5, #0
 8023200:	d05b      	beq.n	80232ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8023202:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023206:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802320a:	f118 0801 	adds.w	r8, r8, #1
 802320e:	d458      	bmi.n	80232c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023210:	45c2      	cmp	sl, r8
 8023212:	dd56      	ble.n	80232c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023214:	2e00      	cmp	r6, #0
 8023216:	d054      	beq.n	80232c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023218:	2c00      	cmp	r4, #0
 802321a:	db50      	blt.n	80232be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802321c:	45a6      	cmp	lr, r4
 802321e:	dd4e      	ble.n	80232be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8023220:	f819 200e 	ldrb.w	r2, [r9, lr]
 8023224:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8023228:	3401      	adds	r4, #1
 802322a:	d407      	bmi.n	802323c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802322c:	45a6      	cmp	lr, r4
 802322e:	dd05      	ble.n	802323c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023230:	b125      	cbz	r5, 802323c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023232:	44ce      	add	lr, r9
 8023234:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023238:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 802323c:	fb15 f406 	smulbb	r4, r5, r6
 8023240:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8023244:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8023248:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802324c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023250:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023254:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023258:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802325c:	ea43 0c0c 	orr.w	ip, r3, ip
 8023260:	f1c6 0310 	rsb	r3, r6, #16
 8023264:	ea4e 0707 	orr.w	r7, lr, r7
 8023268:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802326c:	1b5b      	subs	r3, r3, r5
 802326e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8023272:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023276:	437d      	muls	r5, r7
 8023278:	fb03 5c0c 	mla	ip, r3, ip, r5
 802327c:	0403      	lsls	r3, r0, #16
 802327e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023282:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023286:	4318      	orrs	r0, r3
 8023288:	0413      	lsls	r3, r2, #16
 802328a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802328e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023292:	fb04 c000 	mla	r0, r4, r0, ip
 8023296:	4313      	orrs	r3, r2
 8023298:	fb06 0003 	mla	r0, r6, r3, r0
 802329c:	0d43      	lsrs	r3, r0, #21
 802329e:	0940      	lsrs	r0, r0, #5
 80232a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232a4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80232a8:	4318      	orrs	r0, r3
 80232aa:	8008      	strh	r0, [r1, #0]
 80232ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232b0:	4684      	mov	ip, r0
 80232b2:	e7a0      	b.n	80231f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80232b4:	4607      	mov	r7, r0
 80232b6:	4684      	mov	ip, r0
 80232b8:	e7a7      	b.n	802320a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80232ba:	4607      	mov	r7, r0
 80232bc:	e7a5      	b.n	802320a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80232be:	4602      	mov	r2, r0
 80232c0:	e7b2      	b.n	8023228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80232c2:	4602      	mov	r2, r0
 80232c4:	e7ba      	b.n	802323c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080232c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232ca:	b093      	sub	sp, #76	; 0x4c
 80232cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80232d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80232d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80232d4:	9010      	str	r0, [sp, #64]	; 0x40
 80232d6:	9108      	str	r1, [sp, #32]
 80232d8:	6850      	ldr	r0, [r2, #4]
 80232da:	9306      	str	r3, [sp, #24]
 80232dc:	6812      	ldr	r2, [r2, #0]
 80232de:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80232e2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80232e6:	fb00 1303 	mla	r3, r0, r3, r1
 80232ea:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80232ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	9307      	str	r3, [sp, #28]
 80232f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232f6:	685f      	ldr	r7, [r3, #4]
 80232f8:	3704      	adds	r7, #4
 80232fa:	9b08      	ldr	r3, [sp, #32]
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	dc03      	bgt.n	8023308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8023300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023302:	2b00      	cmp	r3, #0
 8023304:	f340 81b2 	ble.w	802366c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8023308:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802330a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802330e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023312:	1e48      	subs	r0, r1, #1
 8023314:	f102 3cff 	add.w	ip, r2, #4294967295
 8023318:	9b06      	ldr	r3, [sp, #24]
 802331a:	2b00      	cmp	r3, #0
 802331c:	f340 80a9 	ble.w	8023472 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023320:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023324:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023328:	d406      	bmi.n	8023338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802332a:	4586      	cmp	lr, r0
 802332c:	da04      	bge.n	8023338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802332e:	2b00      	cmp	r3, #0
 8023330:	db02      	blt.n	8023338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023332:	4563      	cmp	r3, ip
 8023334:	f2c0 809e 	blt.w	8023474 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023338:	f11e 0e01 	adds.w	lr, lr, #1
 802333c:	f100 808f 	bmi.w	802345e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023340:	4571      	cmp	r1, lr
 8023342:	f2c0 808c 	blt.w	802345e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023346:	3301      	adds	r3, #1
 8023348:	f100 8089 	bmi.w	802345e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802334c:	429a      	cmp	r2, r3
 802334e:	f2c0 8086 	blt.w	802345e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023352:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023356:	46c8      	mov	r8, r9
 8023358:	f1bb 0f00 	cmp.w	fp, #0
 802335c:	f340 80a6 	ble.w	80234ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023360:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8023362:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023366:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023368:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802336c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023370:	1422      	asrs	r2, r4, #16
 8023372:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023376:	689b      	ldr	r3, [r3, #8]
 8023378:	f100 80e3 	bmi.w	8023542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802337c:	f103 3aff 	add.w	sl, r3, #4294967295
 8023380:	4552      	cmp	r2, sl
 8023382:	f280 80de 	bge.w	8023542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023386:	f1bc 0f00 	cmp.w	ip, #0
 802338a:	f2c0 80da 	blt.w	8023542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802338e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023392:	45d4      	cmp	ip, sl
 8023394:	f280 80d5 	bge.w	8023542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023398:	b21b      	sxth	r3, r3
 802339a:	9d07      	ldr	r5, [sp, #28]
 802339c:	fb0c 2203 	mla	r2, ip, r3, r2
 80233a0:	eb05 0a02 	add.w	sl, r5, r2
 80233a4:	5caa      	ldrb	r2, [r5, r2]
 80233a6:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80233aa:	2800      	cmp	r0, #0
 80233ac:	f000 80c0 	beq.w	8023530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80233b0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80233b4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80233b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80233ba:	b151      	cbz	r1, 80233d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80233bc:	eb0a 0203 	add.w	r2, sl, r3
 80233c0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80233c4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233c8:	9309      	str	r3, [sp, #36]	; 0x24
 80233ca:	7853      	ldrb	r3, [r2, #1]
 80233cc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233d0:	930c      	str	r3, [sp, #48]	; 0x30
 80233d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80233d4:	fb10 f201 	smulbb	r2, r0, r1
 80233d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80233da:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80233de:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80233e2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80233e6:	10d2      	asrs	r2, r2, #3
 80233e8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80233ec:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80233f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80233f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233f6:	041b      	lsls	r3, r3, #16
 80233f8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80233fc:	432b      	orrs	r3, r5
 80233fe:	4353      	muls	r3, r2
 8023400:	fb0a 330c 	mla	r3, sl, ip, r3
 8023404:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023408:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802340c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023410:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023414:	f1c1 0c10 	rsb	ip, r1, #16
 8023418:	ebac 0c00 	sub.w	ip, ip, r0
 802341c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023420:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023424:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802342a:	0418      	lsls	r0, r3, #16
 802342c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023430:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023434:	4318      	orrs	r0, r3
 8023436:	fb02 c200 	mla	r2, r2, r0, ip
 802343a:	0d53      	lsrs	r3, r2, #21
 802343c:	0952      	lsrs	r2, r2, #5
 802343e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023442:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023446:	431a      	orrs	r2, r3
 8023448:	f8a8 2000 	strh.w	r2, [r8]
 802344c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802344e:	f108 0802 	add.w	r8, r8, #2
 8023452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023456:	441c      	add	r4, r3
 8023458:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802345a:	441e      	add	r6, r3
 802345c:	e77c      	b.n	8023358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802345e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023460:	f109 0902 	add.w	r9, r9, #2
 8023464:	441c      	add	r4, r3
 8023466:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023468:	441e      	add	r6, r3
 802346a:	9b06      	ldr	r3, [sp, #24]
 802346c:	3b01      	subs	r3, #1
 802346e:	9306      	str	r3, [sp, #24]
 8023470:	e752      	b.n	8023318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023472:	d020      	beq.n	80234b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8023474:	9b06      	ldr	r3, [sp, #24]
 8023476:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023478:	3b01      	subs	r3, #1
 802347a:	fb00 4003 	mla	r0, r0, r3, r4
 802347e:	1400      	asrs	r0, r0, #16
 8023480:	f53f af67 	bmi.w	8023352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023484:	3901      	subs	r1, #1
 8023486:	4288      	cmp	r0, r1
 8023488:	f6bf af63 	bge.w	8023352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802348c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802348e:	fb01 6303 	mla	r3, r1, r3, r6
 8023492:	141b      	asrs	r3, r3, #16
 8023494:	f53f af5d 	bmi.w	8023352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023498:	3a01      	subs	r2, #1
 802349a:	4293      	cmp	r3, r2
 802349c:	f6bf af59 	bge.w	8023352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80234a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80234a4:	46ca      	mov	sl, r9
 80234a6:	f1b8 0f00 	cmp.w	r8, #0
 80234aa:	dc67      	bgt.n	802357c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80234ac:	9b06      	ldr	r3, [sp, #24]
 80234ae:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80234b2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80234b6:	9b08      	ldr	r3, [sp, #32]
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	f340 80d7 	ble.w	802366c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80234be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80234c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234c8:	eeb0 6a62 	vmov.f32	s12, s5
 80234cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80234d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80234d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234d8:	ee16 4a10 	vmov	r4, s12
 80234dc:	eeb0 6a43 	vmov.f32	s12, s6
 80234e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234e4:	ee16 6a10 	vmov	r6, s12
 80234e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80234ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 80234f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80234f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80234f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80234fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023500:	ee12 2a90 	vmov	r2, s5
 8023504:	eef0 2a47 	vmov.f32	s5, s14
 8023508:	fb92 f3f3 	sdiv	r3, r2, r3
 802350c:	ee13 2a10 	vmov	r2, s6
 8023510:	931f      	str	r3, [sp, #124]	; 0x7c
 8023512:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023514:	eeb0 3a67 	vmov.f32	s6, s15
 8023518:	fb92 f3f3 	sdiv	r3, r2, r3
 802351c:	9320      	str	r3, [sp, #128]	; 0x80
 802351e:	9b08      	ldr	r3, [sp, #32]
 8023520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023522:	3b01      	subs	r3, #1
 8023524:	9308      	str	r3, [sp, #32]
 8023526:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023528:	bf08      	it	eq
 802352a:	4613      	moveq	r3, r2
 802352c:	9306      	str	r3, [sp, #24]
 802352e:	e6e4      	b.n	80232fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8023530:	2900      	cmp	r1, #0
 8023532:	f43f af4e 	beq.w	80233d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023536:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802353a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802353e:	9309      	str	r3, [sp, #36]	; 0x24
 8023540:	e747      	b.n	80233d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023542:	f112 0a01 	adds.w	sl, r2, #1
 8023546:	d481      	bmi.n	802344c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023548:	4553      	cmp	r3, sl
 802354a:	f6ff af7f 	blt.w	802344c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802354e:	f11c 0a01 	adds.w	sl, ip, #1
 8023552:	f53f af7b 	bmi.w	802344c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023556:	45d6      	cmp	lr, sl
 8023558:	f6ff af78 	blt.w	802344c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802355c:	b21b      	sxth	r3, r3
 802355e:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8023562:	fa0f f28e 	sxth.w	r2, lr
 8023566:	9300      	str	r3, [sp, #0]
 8023568:	463b      	mov	r3, r7
 802356a:	9201      	str	r2, [sp, #4]
 802356c:	9a07      	ldr	r2, [sp, #28]
 802356e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023572:	4641      	mov	r1, r8
 8023574:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023576:	f7ff fe21 	bl	80231bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802357a:	e767      	b.n	802344c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802357c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802357e:	1422      	asrs	r2, r4, #16
 8023580:	1431      	asrs	r1, r6, #16
 8023582:	9d07      	ldr	r5, [sp, #28]
 8023584:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023588:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802358c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023590:	fb03 2101 	mla	r1, r3, r1, r2
 8023594:	9a07      	ldr	r2, [sp, #28]
 8023596:	440a      	add	r2, r1
 8023598:	5c69      	ldrb	r1, [r5, r1]
 802359a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802359e:	f1be 0f00 	cmp.w	lr, #0
 80235a2:	d05c      	beq.n	802365e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80235a4:	f892 c001 	ldrb.w	ip, [r2, #1]
 80235a8:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80235ac:	950d      	str	r5, [sp, #52]	; 0x34
 80235ae:	b150      	cbz	r0, 80235c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80235b0:	eb02 0c03 	add.w	ip, r2, r3
 80235b4:	5cd3      	ldrb	r3, [r2, r3]
 80235b6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235ba:	930a      	str	r3, [sp, #40]	; 0x28
 80235bc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80235c0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235c4:	930e      	str	r3, [sp, #56]	; 0x38
 80235c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235c8:	fb1e f200 	smulbb	r2, lr, r0
 80235cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80235ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80235d2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80235d6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80235da:	10d2      	asrs	r2, r2, #3
 80235dc:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80235e0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80235e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80235e8:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80235ec:	9311      	str	r3, [sp, #68]	; 0x44
 80235ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80235f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80235f2:	041b      	lsls	r3, r3, #16
 80235f4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80235f8:	ea43 030b 	orr.w	r3, r3, fp
 80235fc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023600:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023604:	4353      	muls	r3, r2
 8023606:	fb05 3c0c 	mla	ip, r5, ip, r3
 802360a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802360e:	ea43 0b01 	orr.w	fp, r3, r1
 8023612:	f1c0 0110 	rsb	r1, r0, #16
 8023616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023618:	eba1 0e0e 	sub.w	lr, r1, lr
 802361c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023620:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023624:	fb0e cc0b 	mla	ip, lr, fp, ip
 8023628:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802362c:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8023630:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023634:	ea4b 0e0e 	orr.w	lr, fp, lr
 8023638:	fb02 cc0e 	mla	ip, r2, lr, ip
 802363c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8023640:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023644:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023648:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802364c:	ea43 0c0c 	orr.w	ip, r3, ip
 8023650:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023652:	441c      	add	r4, r3
 8023654:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023656:	f82a cb02 	strh.w	ip, [sl], #2
 802365a:	441e      	add	r6, r3
 802365c:	e723      	b.n	80234a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802365e:	2800      	cmp	r0, #0
 8023660:	d0b1      	beq.n	80235c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8023662:	5cd3      	ldrb	r3, [r2, r3]
 8023664:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023668:	930a      	str	r3, [sp, #40]	; 0x28
 802366a:	e7ac      	b.n	80235c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802366c:	b013      	add	sp, #76	; 0x4c
 802366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8023672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023676:	880d      	ldrh	r5, [r1, #0]
 8023678:	b087      	sub	sp, #28
 802367a:	10ef      	asrs	r7, r5, #3
 802367c:	9103      	str	r1, [sp, #12]
 802367e:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8023682:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8023686:	00ed      	lsls	r5, r5, #3
 8023688:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802368c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8023690:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8023694:	b2ed      	uxtb	r5, r5
 8023696:	9701      	str	r7, [sp, #4]
 8023698:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 802369c:	9502      	str	r5, [sp, #8]
 802369e:	9d01      	ldr	r5, [sp, #4]
 80236a0:	9902      	ldr	r1, [sp, #8]
 80236a2:	022d      	lsls	r5, r5, #8
 80236a4:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80236a8:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80236ac:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80236b0:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80236b4:	430d      	orrs	r5, r1
 80236b6:	fb06 0709 	mla	r7, r6, r9, r0
 80236ba:	2e00      	cmp	r6, #0
 80236bc:	9505      	str	r5, [sp, #20]
 80236be:	eb02 0c07 	add.w	ip, r2, r7
 80236c2:	f2c0 80b6 	blt.w	8023832 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80236c6:	45b3      	cmp	fp, r6
 80236c8:	f340 80b3 	ble.w	8023832 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80236cc:	2800      	cmp	r0, #0
 80236ce:	f2c0 80ae 	blt.w	802382e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80236d2:	4581      	cmp	r9, r0
 80236d4:	f340 80ab 	ble.w	802382e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80236d8:	5dd7      	ldrb	r7, [r2, r7]
 80236da:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80236de:	441f      	add	r7, r3
 80236e0:	1c42      	adds	r2, r0, #1
 80236e2:	f100 80a9 	bmi.w	8023838 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80236e6:	4591      	cmp	r9, r2
 80236e8:	f340 80a6 	ble.w	8023838 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80236ec:	2c00      	cmp	r4, #0
 80236ee:	f000 80a3 	beq.w	8023838 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80236f2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80236f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80236fa:	441d      	add	r5, r3
 80236fc:	3601      	adds	r6, #1
 80236fe:	f100 809f 	bmi.w	8023840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023702:	45b3      	cmp	fp, r6
 8023704:	f340 809c 	ble.w	8023840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023708:	f1be 0f00 	cmp.w	lr, #0
 802370c:	f000 8098 	beq.w	8023840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023710:	2800      	cmp	r0, #0
 8023712:	f2c0 8093 	blt.w	802383c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8023716:	4581      	cmp	r9, r0
 8023718:	f340 8090 	ble.w	802383c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802371c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8023720:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023724:	441e      	add	r6, r3
 8023726:	3001      	adds	r0, #1
 8023728:	f100 808d 	bmi.w	8023846 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802372c:	4581      	cmp	r9, r0
 802372e:	f340 808a 	ble.w	8023846 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023732:	2c00      	cmp	r4, #0
 8023734:	f000 8087 	beq.w	8023846 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023738:	44e1      	add	r9, ip
 802373a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802373e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023742:	4413      	add	r3, r2
 8023744:	b2a4      	uxth	r4, r4
 8023746:	f897 c002 	ldrb.w	ip, [r7, #2]
 802374a:	fa1f fe8e 	uxth.w	lr, lr
 802374e:	9901      	ldr	r1, [sp, #4]
 8023750:	fb04 fb0e 	mul.w	fp, r4, lr
 8023754:	0124      	lsls	r4, r4, #4
 8023756:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 802375a:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802375e:	eba4 040b 	sub.w	r4, r4, fp
 8023762:	fa1f f08e 	uxth.w	r0, lr
 8023766:	b2a2      	uxth	r2, r4
 8023768:	78ac      	ldrb	r4, [r5, #2]
 802376a:	eba9 0900 	sub.w	r9, r9, r0
 802376e:	fa1f fe88 	uxth.w	lr, r8
 8023772:	4354      	muls	r4, r2
 8023774:	ea6f 0808 	mvn.w	r8, r8
 8023778:	fa1f f989 	uxth.w	r9, r9
 802377c:	fa5f f888 	uxtb.w	r8, r8
 8023780:	fb09 440c 	mla	r4, r9, ip, r4
 8023784:	f896 c002 	ldrb.w	ip, [r6, #2]
 8023788:	fb1a fa08 	smulbb	sl, sl, r8
 802378c:	fb00 440c 	mla	r4, r0, ip, r4
 8023790:	f893 c002 	ldrb.w	ip, [r3, #2]
 8023794:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8023798:	787c      	ldrb	r4, [r7, #1]
 802379a:	783f      	ldrb	r7, [r7, #0]
 802379c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80237a0:	fb0c ac0e 	mla	ip, ip, lr, sl
 80237a4:	f895 a001 	ldrb.w	sl, [r5, #1]
 80237a8:	782d      	ldrb	r5, [r5, #0]
 80237aa:	fb02 fa0a 	mul.w	sl, r2, sl
 80237ae:	fa1f fc8c 	uxth.w	ip, ip
 80237b2:	436a      	muls	r2, r5
 80237b4:	7835      	ldrb	r5, [r6, #0]
 80237b6:	fb09 aa04 	mla	sl, r9, r4, sl
 80237ba:	7874      	ldrb	r4, [r6, #1]
 80237bc:	fb09 2207 	mla	r2, r9, r7, r2
 80237c0:	fb00 aa04 	mla	sl, r0, r4, sl
 80237c4:	785c      	ldrb	r4, [r3, #1]
 80237c6:	fb00 2005 	mla	r0, r0, r5, r2
 80237ca:	781b      	ldrb	r3, [r3, #0]
 80237cc:	fb0b a404 	mla	r4, fp, r4, sl
 80237d0:	fb11 fa08 	smulbb	sl, r1, r8
 80237d4:	fb0b 0b03 	mla	fp, fp, r3, r0
 80237d8:	9b02      	ldr	r3, [sp, #8]
 80237da:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80237de:	fb13 f808 	smulbb	r8, r3, r8
 80237e2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80237e6:	fb04 a40e 	mla	r4, r4, lr, sl
 80237ea:	f10c 0301 	add.w	r3, ip, #1
 80237ee:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80237f2:	b2a4      	uxth	r4, r4
 80237f4:	fa1f fe8e 	uxth.w	lr, lr
 80237f8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80237fc:	f104 0a01 	add.w	sl, r4, #1
 8023800:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8023804:	f10e 0c01 	add.w	ip, lr, #1
 8023808:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802380c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023810:	0964      	lsrs	r4, r4, #5
 8023812:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023816:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802381a:	ea4c 0c03 	orr.w	ip, ip, r3
 802381e:	9b03      	ldr	r3, [sp, #12]
 8023820:	ea4c 0c04 	orr.w	ip, ip, r4
 8023824:	f8a3 c000 	strh.w	ip, [r3]
 8023828:	b007      	add	sp, #28
 802382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802382e:	af05      	add	r7, sp, #20
 8023830:	e756      	b.n	80236e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8023832:	ad05      	add	r5, sp, #20
 8023834:	462f      	mov	r7, r5
 8023836:	e761      	b.n	80236fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8023838:	ad05      	add	r5, sp, #20
 802383a:	e75f      	b.n	80236fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 802383c:	ae05      	add	r6, sp, #20
 802383e:	e772      	b.n	8023726 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8023840:	ab05      	add	r3, sp, #20
 8023842:	461e      	mov	r6, r3
 8023844:	e77e      	b.n	8023744 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8023846:	ab05      	add	r3, sp, #20
 8023848:	e77c      	b.n	8023744 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0802384a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802384a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802384e:	b095      	sub	sp, #84	; 0x54
 8023850:	9212      	str	r2, [sp, #72]	; 0x48
 8023852:	9309      	str	r3, [sp, #36]	; 0x24
 8023854:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8023856:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802385a:	9013      	str	r0, [sp, #76]	; 0x4c
 802385c:	930f      	str	r3, [sp, #60]	; 0x3c
 802385e:	6850      	ldr	r0, [r2, #4]
 8023860:	910e      	str	r1, [sp, #56]	; 0x38
 8023862:	6812      	ldr	r2, [r2, #0]
 8023864:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8023868:	fb00 1303 	mla	r3, r0, r3, r1
 802386c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023870:	930a      	str	r3, [sp, #40]	; 0x28
 8023872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023874:	681b      	ldr	r3, [r3, #0]
 8023876:	930d      	str	r3, [sp, #52]	; 0x34
 8023878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802387a:	685c      	ldr	r4, [r3, #4]
 802387c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802387e:	3404      	adds	r4, #4
 8023880:	43db      	mvns	r3, r3
 8023882:	b2db      	uxtb	r3, r3
 8023884:	930b      	str	r3, [sp, #44]	; 0x2c
 8023886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023888:	2b00      	cmp	r3, #0
 802388a:	dc03      	bgt.n	8023894 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802388c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802388e:	2b00      	cmp	r3, #0
 8023890:	f340 8255 	ble.w	8023d3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8023894:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023896:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802389a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802389e:	1e48      	subs	r0, r1, #1
 80238a0:	1e55      	subs	r5, r2, #1
 80238a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	f340 80f9 	ble.w	8023a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80238aa:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80238ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80238ae:	1436      	asrs	r6, r6, #16
 80238b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80238b4:	d406      	bmi.n	80238c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238b6:	4286      	cmp	r6, r0
 80238b8:	da04      	bge.n	80238c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	db02      	blt.n	80238c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238be:	42ab      	cmp	r3, r5
 80238c0:	f2c0 80ed 	blt.w	8023a9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80238c4:	3601      	adds	r6, #1
 80238c6:	f100 80da 	bmi.w	8023a7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238ca:	42b1      	cmp	r1, r6
 80238cc:	f2c0 80d7 	blt.w	8023a7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238d0:	3301      	adds	r3, #1
 80238d2:	f100 80d4 	bmi.w	8023a7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238d6:	429a      	cmp	r2, r3
 80238d8:	f2c0 80d1 	blt.w	8023a7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238de:	9311      	str	r3, [sp, #68]	; 0x44
 80238e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80238e2:	930c      	str	r3, [sp, #48]	; 0x30
 80238e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80238e6:	2b00      	cmp	r3, #0
 80238e8:	f340 80fa 	ble.w	8023ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80238ec:	9826      	ldr	r0, [sp, #152]	; 0x98
 80238ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80238f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80238f2:	68c6      	ldr	r6, [r0, #12]
 80238f4:	141d      	asrs	r5, r3, #16
 80238f6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80238f8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80238fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80238fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023900:	1400      	asrs	r0, r0, #16
 8023902:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023906:	6892      	ldr	r2, [r2, #8]
 8023908:	f100 813e 	bmi.w	8023b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802390c:	1e57      	subs	r7, r2, #1
 802390e:	42b8      	cmp	r0, r7
 8023910:	f280 813a 	bge.w	8023b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023914:	2d00      	cmp	r5, #0
 8023916:	f2c0 8137 	blt.w	8023b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802391a:	1e77      	subs	r7, r6, #1
 802391c:	42bd      	cmp	r5, r7
 802391e:	f280 8133 	bge.w	8023b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023922:	b212      	sxth	r2, r2
 8023924:	fb05 0002 	mla	r0, r5, r2, r0
 8023928:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802392a:	f815 a000 	ldrb.w	sl, [r5, r0]
 802392e:	182e      	adds	r6, r5, r0
 8023930:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023934:	eb04 050a 	add.w	r5, r4, sl
 8023938:	2b00      	cmp	r3, #0
 802393a:	f000 8117 	beq.w	8023b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802393e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8023942:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023946:	44a4      	add	ip, r4
 8023948:	2900      	cmp	r1, #0
 802394a:	f000 8117 	beq.w	8023b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802394e:	18b0      	adds	r0, r6, r2
 8023950:	5cb2      	ldrb	r2, [r6, r2]
 8023952:	7840      	ldrb	r0, [r0, #1]
 8023954:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023958:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802395c:	4422      	add	r2, r4
 802395e:	4420      	add	r0, r4
 8023960:	b29b      	uxth	r3, r3
 8023962:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8023966:	b289      	uxth	r1, r1
 8023968:	f895 b002 	ldrb.w	fp, [r5, #2]
 802396c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802396e:	fb03 f901 	mul.w	r9, r3, r1
 8023972:	011b      	lsls	r3, r3, #4
 8023974:	f8b6 e000 	ldrh.w	lr, [r6]
 8023978:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802397c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023980:	eba3 0309 	sub.w	r3, r3, r9
 8023984:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8023988:	b289      	uxth	r1, r1
 802398a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 802398e:	b29b      	uxth	r3, r3
 8023990:	eba8 0801 	sub.w	r8, r8, r1
 8023994:	435f      	muls	r7, r3
 8023996:	fa1f f888 	uxth.w	r8, r8
 802399a:	9310      	str	r3, [sp, #64]	; 0x40
 802399c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802399e:	fb08 770b 	mla	r7, r8, fp, r7
 80239a2:	f892 b002 	ldrb.w	fp, [r2, #2]
 80239a6:	fb01 770b 	mla	r7, r1, fp, r7
 80239aa:	f890 b002 	ldrb.w	fp, [r0, #2]
 80239ae:	fb09 770b 	mla	r7, r9, fp, r7
 80239b2:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80239b6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80239ba:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80239be:	fb1b fb03 	smulbb	fp, fp, r3
 80239c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80239c4:	fb07 b706 	mla	r7, r7, r6, fp
 80239c8:	f895 b001 	ldrb.w	fp, [r5, #1]
 80239cc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80239d0:	f89c c000 	ldrb.w	ip, [ip]
 80239d4:	b2bf      	uxth	r7, r7
 80239d6:	435d      	muls	r5, r3
 80239d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80239da:	fb08 550b 	mla	r5, r8, fp, r5
 80239de:	f892 b001 	ldrb.w	fp, [r2, #1]
 80239e2:	fb01 550b 	mla	r5, r1, fp, r5
 80239e6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80239ea:	fb09 550b 	mla	r5, r9, fp, r5
 80239ee:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80239f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80239f6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80239fa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80239fe:	fa5f fe8e 	uxtb.w	lr, lr
 8023a02:	fb1b fb03 	smulbb	fp, fp, r3
 8023a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a08:	fb03 f30c 	mul.w	r3, r3, ip
 8023a0c:	f892 c000 	ldrb.w	ip, [r2]
 8023a10:	fb05 b506 	mla	r5, r5, r6, fp
 8023a14:	fb08 330a 	mla	r3, r8, sl, r3
 8023a18:	b2ad      	uxth	r5, r5
 8023a1a:	fb01 330c 	mla	r3, r1, ip, r3
 8023a1e:	f890 c000 	ldrb.w	ip, [r0]
 8023a22:	f105 0b01 	add.w	fp, r5, #1
 8023a26:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a2c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023a30:	fb1e fe03 	smulbb	lr, lr, r3
 8023a34:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023a38:	1c7b      	adds	r3, r7, #1
 8023a3a:	096d      	lsrs	r5, r5, #5
 8023a3c:	fb0c e606 	mla	r6, ip, r6, lr
 8023a40:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023a44:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023a48:	b2b6      	uxth	r6, r6
 8023a4a:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8023a4e:	1c77      	adds	r7, r6, #1
 8023a50:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023a54:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023a58:	431f      	orrs	r7, r3
 8023a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a5c:	433d      	orrs	r5, r7
 8023a5e:	801d      	strh	r5, [r3, #0]
 8023a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a62:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023a64:	3302      	adds	r3, #2
 8023a66:	930c      	str	r3, [sp, #48]	; 0x30
 8023a68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023a6a:	4413      	add	r3, r2
 8023a6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023a6e:	931f      	str	r3, [sp, #124]	; 0x7c
 8023a70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023a72:	4413      	add	r3, r2
 8023a74:	9320      	str	r3, [sp, #128]	; 0x80
 8023a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023a78:	3b01      	subs	r3, #1
 8023a7a:	9311      	str	r3, [sp, #68]	; 0x44
 8023a7c:	e732      	b.n	80238e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023a7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023a80:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8023a82:	4433      	add	r3, r6
 8023a84:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8023a86:	931f      	str	r3, [sp, #124]	; 0x7c
 8023a88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023a8a:	4433      	add	r3, r6
 8023a8c:	9320      	str	r3, [sp, #128]	; 0x80
 8023a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a90:	3b01      	subs	r3, #1
 8023a92:	9309      	str	r3, [sp, #36]	; 0x24
 8023a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a96:	3302      	adds	r3, #2
 8023a98:	930a      	str	r3, [sp, #40]	; 0x28
 8023a9a:	e702      	b.n	80238a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023a9c:	d027      	beq.n	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023aa0:	9821      	ldr	r0, [sp, #132]	; 0x84
 8023aa2:	3b01      	subs	r3, #1
 8023aa4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023aa6:	fb00 5003 	mla	r0, r0, r3, r5
 8023aaa:	1400      	asrs	r0, r0, #16
 8023aac:	f53f af16 	bmi.w	80238dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023ab0:	3901      	subs	r1, #1
 8023ab2:	4288      	cmp	r0, r1
 8023ab4:	f6bf af12 	bge.w	80238dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023ab8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8023aba:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023abc:	fb01 0303 	mla	r3, r1, r3, r0
 8023ac0:	141b      	asrs	r3, r3, #16
 8023ac2:	f53f af0b 	bmi.w	80238dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023ac6:	3a01      	subs	r2, #1
 8023ac8:	4293      	cmp	r3, r2
 8023aca:	f6bf af07 	bge.w	80238dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ad0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023ad4:	9311      	str	r3, [sp, #68]	; 0x44
 8023ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8023ada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	dc70      	bgt.n	8023bc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023ae8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023aec:	930a      	str	r3, [sp, #40]	; 0x28
 8023aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023af0:	2b00      	cmp	r3, #0
 8023af2:	f340 8124 	ble.w	8023d3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8023af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023afa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023afc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023b00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023b04:	eef0 6a62 	vmov.f32	s13, s5
 8023b08:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023b0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023b10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b14:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8023b18:	eef0 6a43 	vmov.f32	s13, s6
 8023b1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b20:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8023b24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023b28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023b30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b3c:	ee12 2a90 	vmov	r2, s5
 8023b40:	eef0 2a47 	vmov.f32	s5, s14
 8023b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b48:	ee13 2a10 	vmov	r2, s6
 8023b4c:	9321      	str	r3, [sp, #132]	; 0x84
 8023b4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023b50:	eeb0 3a67 	vmov.f32	s6, s15
 8023b54:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b58:	9322      	str	r3, [sp, #136]	; 0x88
 8023b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023b5e:	3b01      	subs	r3, #1
 8023b60:	930e      	str	r3, [sp, #56]	; 0x38
 8023b62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023b64:	bf08      	it	eq
 8023b66:	4613      	moveq	r3, r2
 8023b68:	9309      	str	r3, [sp, #36]	; 0x24
 8023b6a:	e68c      	b.n	8023886 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023b6c:	b149      	cbz	r1, 8023b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8023b6e:	5cb2      	ldrb	r2, [r6, r2]
 8023b70:	4628      	mov	r0, r5
 8023b72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b76:	4422      	add	r2, r4
 8023b78:	46ac      	mov	ip, r5
 8023b7a:	e6f1      	b.n	8023960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023b7c:	4628      	mov	r0, r5
 8023b7e:	462a      	mov	r2, r5
 8023b80:	e6ee      	b.n	8023960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023b82:	4628      	mov	r0, r5
 8023b84:	462a      	mov	r2, r5
 8023b86:	e7f7      	b.n	8023b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8023b88:	1c47      	adds	r7, r0, #1
 8023b8a:	f53f af69 	bmi.w	8023a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b8e:	42ba      	cmp	r2, r7
 8023b90:	f6ff af66 	blt.w	8023a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b94:	1c6f      	adds	r7, r5, #1
 8023b96:	f53f af63 	bmi.w	8023a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b9a:	42be      	cmp	r6, r7
 8023b9c:	f6ff af60 	blt.w	8023a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023ba0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023ba2:	b236      	sxth	r6, r6
 8023ba4:	b212      	sxth	r2, r2
 8023ba6:	9002      	str	r0, [sp, #8]
 8023ba8:	9601      	str	r6, [sp, #4]
 8023baa:	9200      	str	r2, [sp, #0]
 8023bac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023bae:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023bb2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023bb6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023bba:	4623      	mov	r3, r4
 8023bbc:	f7ff fd59 	bl	8023672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023bc0:	e74e      	b.n	8023a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023bc2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023bc4:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023bc6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023bca:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023bcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023bce:	1400      	asrs	r0, r0, #16
 8023bd0:	142d      	asrs	r5, r5, #16
 8023bd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023bd4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023bd8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023bdc:	fb02 5000 	mla	r0, r2, r0, r5
 8023be0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023be2:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023be6:	182e      	adds	r6, r5, r0
 8023be8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023bec:	eb04 0509 	add.w	r5, r4, r9
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	f000 8096 	beq.w	8023d22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023bf6:	7877      	ldrb	r7, [r6, #1]
 8023bf8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023bfc:	4427      	add	r7, r4
 8023bfe:	2900      	cmp	r1, #0
 8023c00:	f000 8097 	beq.w	8023d32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8023c04:	18b0      	adds	r0, r6, r2
 8023c06:	5cb2      	ldrb	r2, [r6, r2]
 8023c08:	7840      	ldrb	r0, [r0, #1]
 8023c0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023c12:	4422      	add	r2, r4
 8023c14:	4420      	add	r0, r4
 8023c16:	b29b      	uxth	r3, r3
 8023c18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023c1a:	b289      	uxth	r1, r1
 8023c1c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023c20:	f8b6 c000 	ldrh.w	ip, [r6]
 8023c24:	fb03 f801 	mul.w	r8, r3, r1
 8023c28:	011b      	lsls	r3, r3, #4
 8023c2a:	78be      	ldrb	r6, [r7, #2]
 8023c2c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023c30:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023c34:	eba3 0308 	sub.w	r3, r3, r8
 8023c38:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023c3c:	b289      	uxth	r1, r1
 8023c3e:	b29b      	uxth	r3, r3
 8023c40:	ebae 0e01 	sub.w	lr, lr, r1
 8023c44:	435e      	muls	r6, r3
 8023c46:	fa1f fe8e 	uxth.w	lr, lr
 8023c4a:	9310      	str	r3, [sp, #64]	; 0x40
 8023c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c4e:	fb0e 660b 	mla	r6, lr, fp, r6
 8023c52:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023c56:	fb01 660b 	mla	r6, r1, fp, r6
 8023c5a:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023c5e:	fb08 660b 	mla	r6, r8, fp, r6
 8023c62:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023c66:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023c6a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023c6e:	fb1b fb03 	smulbb	fp, fp, r3
 8023c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c74:	fb06 b60a 	mla	r6, r6, sl, fp
 8023c78:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023c7c:	787d      	ldrb	r5, [r7, #1]
 8023c7e:	783f      	ldrb	r7, [r7, #0]
 8023c80:	b2b6      	uxth	r6, r6
 8023c82:	435d      	muls	r5, r3
 8023c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c86:	fb0e 550b 	mla	r5, lr, fp, r5
 8023c8a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023c8e:	fb01 550b 	mla	r5, r1, fp, r5
 8023c92:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023c96:	fb08 550b 	mla	r5, r8, fp, r5
 8023c9a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023c9e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023ca2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023ca6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023caa:	fa5f fc8c 	uxtb.w	ip, ip
 8023cae:	fb1b fb03 	smulbb	fp, fp, r3
 8023cb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023cb4:	437b      	muls	r3, r7
 8023cb6:	7817      	ldrb	r7, [r2, #0]
 8023cb8:	fb05 b50a 	mla	r5, r5, sl, fp
 8023cbc:	fb0e 3309 	mla	r3, lr, r9, r3
 8023cc0:	b2ad      	uxth	r5, r5
 8023cc2:	fb01 3307 	mla	r3, r1, r7, r3
 8023cc6:	7807      	ldrb	r7, [r0, #0]
 8023cc8:	f105 0b01 	add.w	fp, r5, #1
 8023ccc:	fb08 3707 	mla	r7, r8, r7, r3
 8023cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023cd2:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023cd6:	fb1c fc03 	smulbb	ip, ip, r3
 8023cda:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023cde:	1c73      	adds	r3, r6, #1
 8023ce0:	096d      	lsrs	r5, r5, #5
 8023ce2:	fb07 c70a 	mla	r7, r7, sl, ip
 8023ce6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023cea:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023cee:	b2bf      	uxth	r7, r7
 8023cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023cf2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023cf6:	1c7a      	adds	r2, r7, #1
 8023cf8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023cfc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023d00:	4316      	orrs	r6, r2
 8023d02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023d04:	432e      	orrs	r6, r5
 8023d06:	f823 6b02 	strh.w	r6, [r3], #2
 8023d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8023d0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023d0e:	4413      	add	r3, r2
 8023d10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023d12:	931f      	str	r3, [sp, #124]	; 0x7c
 8023d14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023d16:	4413      	add	r3, r2
 8023d18:	9320      	str	r3, [sp, #128]	; 0x80
 8023d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023d1c:	3b01      	subs	r3, #1
 8023d1e:	9311      	str	r3, [sp, #68]	; 0x44
 8023d20:	e6db      	b.n	8023ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8023d22:	b149      	cbz	r1, 8023d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8023d24:	5cb2      	ldrb	r2, [r6, r2]
 8023d26:	4628      	mov	r0, r5
 8023d28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d2c:	4422      	add	r2, r4
 8023d2e:	462f      	mov	r7, r5
 8023d30:	e771      	b.n	8023c16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023d32:	4628      	mov	r0, r5
 8023d34:	462a      	mov	r2, r5
 8023d36:	e76e      	b.n	8023c16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023d38:	4628      	mov	r0, r5
 8023d3a:	462a      	mov	r2, r5
 8023d3c:	e7f7      	b.n	8023d2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023d3e:	b015      	add	sp, #84	; 0x54
 8023d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023d44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d48:	880f      	ldrh	r7, [r1, #0]
 8023d4a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023d4e:	023c      	lsls	r4, r7, #8
 8023d50:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023d54:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8023d58:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8023d5c:	017c      	lsls	r4, r7, #5
 8023d5e:	00ff      	lsls	r7, r7, #3
 8023d60:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023d64:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8023d68:	b2ff      	uxtb	r7, r7
 8023d6a:	ea4b 0404 	orr.w	r4, fp, r4
 8023d6e:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8023d72:	4327      	orrs	r7, r4
 8023d74:	fb05 ca0e 	mla	sl, r5, lr, ip
 8023d78:	2d00      	cmp	r5, #0
 8023d7a:	9701      	str	r7, [sp, #4]
 8023d7c:	eb02 080a 	add.w	r8, r2, sl
 8023d80:	db7e      	blt.n	8023e80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023d82:	45a9      	cmp	r9, r5
 8023d84:	dd7c      	ble.n	8023e80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023d86:	f1bc 0f00 	cmp.w	ip, #0
 8023d8a:	db77      	blt.n	8023e7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023d8c:	45e6      	cmp	lr, ip
 8023d8e:	dd75      	ble.n	8023e7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023d90:	f812 700a 	ldrb.w	r7, [r2, sl]
 8023d94:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023d98:	441f      	add	r7, r3
 8023d9a:	f11c 0201 	adds.w	r2, ip, #1
 8023d9e:	d472      	bmi.n	8023e86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023da0:	4596      	cmp	lr, r2
 8023da2:	dd70      	ble.n	8023e86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023da4:	2800      	cmp	r0, #0
 8023da6:	d06e      	beq.n	8023e86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023da8:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023dac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023db0:	441c      	add	r4, r3
 8023db2:	3501      	adds	r5, #1
 8023db4:	d46b      	bmi.n	8023e8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023db6:	45a9      	cmp	r9, r5
 8023db8:	dd69      	ble.n	8023e8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023dba:	2e00      	cmp	r6, #0
 8023dbc:	d067      	beq.n	8023e8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023dbe:	f1bc 0f00 	cmp.w	ip, #0
 8023dc2:	db62      	blt.n	8023e8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023dc4:	45e6      	cmp	lr, ip
 8023dc6:	dd60      	ble.n	8023e8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023dc8:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023dd0:	441d      	add	r5, r3
 8023dd2:	f11c 0201 	adds.w	r2, ip, #1
 8023dd6:	d45d      	bmi.n	8023e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023dd8:	4596      	cmp	lr, r2
 8023dda:	dd5b      	ble.n	8023e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023ddc:	2800      	cmp	r0, #0
 8023dde:	d059      	beq.n	8023e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023de0:	44c6      	add	lr, r8
 8023de2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023de6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023dea:	4413      	add	r3, r2
 8023dec:	b280      	uxth	r0, r0
 8023dee:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023df2:	b2b2      	uxth	r2, r6
 8023df4:	f897 9000 	ldrb.w	r9, [r7]
 8023df8:	787f      	ldrb	r7, [r7, #1]
 8023dfa:	fb00 f602 	mul.w	r6, r0, r2
 8023dfe:	0100      	lsls	r0, r0, #4
 8023e00:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023e04:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8023e08:	1b80      	subs	r0, r0, r6
 8023e0a:	fa1f fc82 	uxth.w	ip, r2
 8023e0e:	b282      	uxth	r2, r0
 8023e10:	78a0      	ldrb	r0, [r4, #2]
 8023e12:	eba8 080c 	sub.w	r8, r8, ip
 8023e16:	4350      	muls	r0, r2
 8023e18:	fa1f f888 	uxth.w	r8, r8
 8023e1c:	fb08 0e0e 	mla	lr, r8, lr, r0
 8023e20:	78a8      	ldrb	r0, [r5, #2]
 8023e22:	fb0c e000 	mla	r0, ip, r0, lr
 8023e26:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023e2a:	fb06 0e0e 	mla	lr, r6, lr, r0
 8023e2e:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8023e32:	f894 e000 	ldrb.w	lr, [r4]
 8023e36:	fb02 fe0e 	mul.w	lr, r2, lr
 8023e3a:	fb08 e909 	mla	r9, r8, r9, lr
 8023e3e:	f895 e000 	ldrb.w	lr, [r5]
 8023e42:	fb0c 990e 	mla	r9, ip, lr, r9
 8023e46:	f893 e000 	ldrb.w	lr, [r3]
 8023e4a:	785b      	ldrb	r3, [r3, #1]
 8023e4c:	fb06 9e0e 	mla	lr, r6, lr, r9
 8023e50:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023e54:	ea4e 0e00 	orr.w	lr, lr, r0
 8023e58:	7860      	ldrb	r0, [r4, #1]
 8023e5a:	4350      	muls	r0, r2
 8023e5c:	786a      	ldrb	r2, [r5, #1]
 8023e5e:	fb08 0007 	mla	r0, r8, r7, r0
 8023e62:	fb0c 0202 	mla	r2, ip, r2, r0
 8023e66:	fb06 2303 	mla	r3, r6, r3, r2
 8023e6a:	095b      	lsrs	r3, r3, #5
 8023e6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023e70:	ea4e 0303 	orr.w	r3, lr, r3
 8023e74:	800b      	strh	r3, [r1, #0]
 8023e76:	b003      	add	sp, #12
 8023e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e7c:	af01      	add	r7, sp, #4
 8023e7e:	e78c      	b.n	8023d9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8023e80:	ac01      	add	r4, sp, #4
 8023e82:	4627      	mov	r7, r4
 8023e84:	e795      	b.n	8023db2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023e86:	ac01      	add	r4, sp, #4
 8023e88:	e793      	b.n	8023db2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023e8a:	ad01      	add	r5, sp, #4
 8023e8c:	e7a1      	b.n	8023dd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8023e8e:	ab01      	add	r3, sp, #4
 8023e90:	461d      	mov	r5, r3
 8023e92:	e7ab      	b.n	8023dec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8023e94:	ab01      	add	r3, sp, #4
 8023e96:	e7a9      	b.n	8023dec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08023e98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e9c:	b08f      	sub	sp, #60	; 0x3c
 8023e9e:	920c      	str	r2, [sp, #48]	; 0x30
 8023ea0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023ea2:	900d      	str	r0, [sp, #52]	; 0x34
 8023ea4:	910a      	str	r1, [sp, #40]	; 0x28
 8023ea6:	6850      	ldr	r0, [r2, #4]
 8023ea8:	9306      	str	r3, [sp, #24]
 8023eaa:	6812      	ldr	r2, [r2, #0]
 8023eac:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8023eb0:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8023eb4:	fb00 1303 	mla	r3, r0, r3, r1
 8023eb8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023ebc:	9307      	str	r3, [sp, #28]
 8023ebe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023ec0:	681b      	ldr	r3, [r3, #0]
 8023ec2:	9308      	str	r3, [sp, #32]
 8023ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023ec6:	685c      	ldr	r4, [r3, #4]
 8023ec8:	3404      	adds	r4, #4
 8023eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	dc03      	bgt.n	8023ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8023ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	f340 81d5 	ble.w	8024282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023ed8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023eda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ede:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ee2:	1e48      	subs	r0, r1, #1
 8023ee4:	1e56      	subs	r6, r2, #1
 8023ee6:	9b06      	ldr	r3, [sp, #24]
 8023ee8:	2b00      	cmp	r3, #0
 8023eea:	f340 80b6 	ble.w	802405a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023eee:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023ef2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023ef6:	d406      	bmi.n	8023f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023ef8:	4287      	cmp	r7, r0
 8023efa:	da04      	bge.n	8023f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	db02      	blt.n	8023f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023f00:	42b3      	cmp	r3, r6
 8023f02:	f2c0 80ab 	blt.w	802405c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8023f06:	3701      	adds	r7, #1
 8023f08:	f100 809c 	bmi.w	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023f0c:	42b9      	cmp	r1, r7
 8023f0e:	f2c0 8099 	blt.w	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023f12:	3301      	adds	r3, #1
 8023f14:	f100 8096 	bmi.w	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023f18:	429a      	cmp	r2, r3
 8023f1a:	f2c0 8093 	blt.w	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023f1e:	9b06      	ldr	r3, [sp, #24]
 8023f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f22:	9b07      	ldr	r3, [sp, #28]
 8023f24:	9309      	str	r3, [sp, #36]	; 0x24
 8023f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	f340 80b4 	ble.w	8024096 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8023f2e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023f30:	142e      	asrs	r6, r5, #16
 8023f32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023f34:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023f38:	68c7      	ldr	r7, [r0, #12]
 8023f3a:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023f3e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023f42:	6892      	ldr	r2, [r2, #8]
 8023f44:	f100 80fb 	bmi.w	802413e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023f48:	f102 3cff 	add.w	ip, r2, #4294967295
 8023f4c:	4560      	cmp	r0, ip
 8023f4e:	f280 80f6 	bge.w	802413e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023f52:	2e00      	cmp	r6, #0
 8023f54:	f2c0 80f3 	blt.w	802413e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023f58:	f107 3cff 	add.w	ip, r7, #4294967295
 8023f5c:	4566      	cmp	r6, ip
 8023f5e:	f280 80ee 	bge.w	802413e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023f62:	b212      	sxth	r2, r2
 8023f64:	fb06 0002 	mla	r0, r6, r2, r0
 8023f68:	9e08      	ldr	r6, [sp, #32]
 8023f6a:	1837      	adds	r7, r6, r0
 8023f6c:	5c30      	ldrb	r0, [r6, r0]
 8023f6e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023f72:	eb04 0c08 	add.w	ip, r4, r8
 8023f76:	2b00      	cmp	r3, #0
 8023f78:	f000 80d3 	beq.w	8024122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023f7c:	787e      	ldrb	r6, [r7, #1]
 8023f7e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023f82:	4426      	add	r6, r4
 8023f84:	2900      	cmp	r1, #0
 8023f86:	f000 80d4 	beq.w	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023f8a:	18b8      	adds	r0, r7, r2
 8023f8c:	5cba      	ldrb	r2, [r7, r2]
 8023f8e:	7840      	ldrb	r0, [r0, #1]
 8023f90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023f98:	4422      	add	r2, r4
 8023f9a:	4420      	add	r0, r4
 8023f9c:	b29b      	uxth	r3, r3
 8023f9e:	78b7      	ldrb	r7, [r6, #2]
 8023fa0:	b289      	uxth	r1, r1
 8023fa2:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023fa6:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023faa:	fb03 f901 	mul.w	r9, r3, r1
 8023fae:	011b      	lsls	r3, r3, #4
 8023fb0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023fb4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023fb8:	eba3 0309 	sub.w	r3, r3, r9
 8023fbc:	b289      	uxth	r1, r1
 8023fbe:	b29b      	uxth	r3, r3
 8023fc0:	ebae 0e01 	sub.w	lr, lr, r1
 8023fc4:	435f      	muls	r7, r3
 8023fc6:	fa1f fe8e 	uxth.w	lr, lr
 8023fca:	fb0e 770a 	mla	r7, lr, sl, r7
 8023fce:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023fd2:	fb01 770a 	mla	r7, r1, sl, r7
 8023fd6:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023fda:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023fde:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023fe2:	f896 8000 	ldrb.w	r8, [r6]
 8023fe6:	7876      	ldrb	r6, [r6, #1]
 8023fe8:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023fec:	fb03 f808 	mul.w	r8, r3, r8
 8023ff0:	4373      	muls	r3, r6
 8023ff2:	fb0e 8807 	mla	r8, lr, r7, r8
 8023ff6:	7817      	ldrb	r7, [r2, #0]
 8023ff8:	fb0e 330c 	mla	r3, lr, ip, r3
 8023ffc:	fb01 8807 	mla	r8, r1, r7, r8
 8024000:	7807      	ldrb	r7, [r0, #0]
 8024002:	fb09 8707 	mla	r7, r9, r7, r8
 8024006:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802400a:	ea47 070a 	orr.w	r7, r7, sl
 802400e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024012:	fb01 310a 	mla	r1, r1, sl, r3
 8024016:	f890 a001 	ldrb.w	sl, [r0, #1]
 802401a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802401c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024020:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024024:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024028:	ea47 070a 	orr.w	r7, r7, sl
 802402c:	801f      	strh	r7, [r3, #0]
 802402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024030:	3302      	adds	r3, #2
 8024032:	9309      	str	r3, [sp, #36]	; 0x24
 8024034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024036:	449b      	add	fp, r3
 8024038:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802403a:	441d      	add	r5, r3
 802403c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802403e:	3b01      	subs	r3, #1
 8024040:	930b      	str	r3, [sp, #44]	; 0x2c
 8024042:	e770      	b.n	8023f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024046:	449b      	add	fp, r3
 8024048:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802404a:	441d      	add	r5, r3
 802404c:	9b06      	ldr	r3, [sp, #24]
 802404e:	3b01      	subs	r3, #1
 8024050:	9306      	str	r3, [sp, #24]
 8024052:	9b07      	ldr	r3, [sp, #28]
 8024054:	3302      	adds	r3, #2
 8024056:	9307      	str	r3, [sp, #28]
 8024058:	e745      	b.n	8023ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802405a:	d023      	beq.n	80240a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802405c:	9b06      	ldr	r3, [sp, #24]
 802405e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024060:	3b01      	subs	r3, #1
 8024062:	fb00 b003 	mla	r0, r0, r3, fp
 8024066:	1400      	asrs	r0, r0, #16
 8024068:	f53f af59 	bmi.w	8023f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802406c:	3901      	subs	r1, #1
 802406e:	4288      	cmp	r0, r1
 8024070:	f6bf af55 	bge.w	8023f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024074:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024076:	fb01 5303 	mla	r3, r1, r3, r5
 802407a:	141b      	asrs	r3, r3, #16
 802407c:	f53f af4f 	bmi.w	8023f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024080:	3a01      	subs	r2, #1
 8024082:	4293      	cmp	r3, r2
 8024084:	f6bf af4b 	bge.w	8023f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024088:	9b06      	ldr	r3, [sp, #24]
 802408a:	9309      	str	r3, [sp, #36]	; 0x24
 802408c:	9b07      	ldr	r3, [sp, #28]
 802408e:	930b      	str	r3, [sp, #44]	; 0x2c
 8024090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024092:	2b00      	cmp	r3, #0
 8024094:	dc70      	bgt.n	8024178 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8024096:	9b06      	ldr	r3, [sp, #24]
 8024098:	9a07      	ldr	r2, [sp, #28]
 802409a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802409e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80240a2:	9307      	str	r3, [sp, #28]
 80240a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240a6:	2b00      	cmp	r3, #0
 80240a8:	f340 80eb 	ble.w	8024282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80240ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80240b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80240b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80240b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80240ba:	eef0 6a62 	vmov.f32	s13, s5
 80240be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80240c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80240c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240ca:	ee16 ba90 	vmov	fp, s13
 80240ce:	eef0 6a43 	vmov.f32	s13, s6
 80240d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240d6:	ee16 5a90 	vmov	r5, s13
 80240da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80240de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80240e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80240e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80240ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80240ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80240f2:	ee12 2a90 	vmov	r2, s5
 80240f6:	eef0 2a47 	vmov.f32	s5, s14
 80240fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80240fe:	ee13 2a10 	vmov	r2, s6
 8024102:	931b      	str	r3, [sp, #108]	; 0x6c
 8024104:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024106:	eeb0 3a67 	vmov.f32	s6, s15
 802410a:	fb92 f3f3 	sdiv	r3, r2, r3
 802410e:	931c      	str	r3, [sp, #112]	; 0x70
 8024110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024114:	3b01      	subs	r3, #1
 8024116:	930a      	str	r3, [sp, #40]	; 0x28
 8024118:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802411a:	bf08      	it	eq
 802411c:	4613      	moveq	r3, r2
 802411e:	9306      	str	r3, [sp, #24]
 8024120:	e6d3      	b.n	8023eca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8024122:	b149      	cbz	r1, 8024138 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024124:	5cba      	ldrb	r2, [r7, r2]
 8024126:	4660      	mov	r0, ip
 8024128:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802412c:	4422      	add	r2, r4
 802412e:	4666      	mov	r6, ip
 8024130:	e734      	b.n	8023f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8024132:	4660      	mov	r0, ip
 8024134:	4662      	mov	r2, ip
 8024136:	e731      	b.n	8023f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8024138:	4660      	mov	r0, ip
 802413a:	4662      	mov	r2, ip
 802413c:	e7f7      	b.n	802412e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802413e:	f110 0c01 	adds.w	ip, r0, #1
 8024142:	f53f af74 	bmi.w	802402e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024146:	4562      	cmp	r2, ip
 8024148:	f6ff af71 	blt.w	802402e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802414c:	f116 0c01 	adds.w	ip, r6, #1
 8024150:	f53f af6d 	bmi.w	802402e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024154:	4567      	cmp	r7, ip
 8024156:	f6ff af6a 	blt.w	802402e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802415a:	b23f      	sxth	r7, r7
 802415c:	b212      	sxth	r2, r2
 802415e:	9701      	str	r7, [sp, #4]
 8024160:	9200      	str	r2, [sp, #0]
 8024162:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024166:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802416a:	4623      	mov	r3, r4
 802416c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802416e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8024172:	f7ff fde7 	bl	8023d44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8024176:	e75a      	b.n	802402e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802417a:	ea4f 462b 	mov.w	r6, fp, asr #16
 802417e:	1428      	asrs	r0, r5, #16
 8024180:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024184:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024188:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802418c:	fb02 6000 	mla	r0, r2, r0, r6
 8024190:	9e08      	ldr	r6, [sp, #32]
 8024192:	f816 8000 	ldrb.w	r8, [r6, r0]
 8024196:	1837      	adds	r7, r6, r0
 8024198:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802419c:	eb04 0c08 	add.w	ip, r4, r8
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	d060      	beq.n	8024266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80241a4:	787e      	ldrb	r6, [r7, #1]
 80241a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80241aa:	4426      	add	r6, r4
 80241ac:	2900      	cmp	r1, #0
 80241ae:	d062      	beq.n	8024276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80241b0:	18b8      	adds	r0, r7, r2
 80241b2:	5cba      	ldrb	r2, [r7, r2]
 80241b4:	7840      	ldrb	r0, [r0, #1]
 80241b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80241be:	4422      	add	r2, r4
 80241c0:	4420      	add	r0, r4
 80241c2:	b29b      	uxth	r3, r3
 80241c4:	78b7      	ldrb	r7, [r6, #2]
 80241c6:	b289      	uxth	r1, r1
 80241c8:	f89c a002 	ldrb.w	sl, [ip, #2]
 80241cc:	f89c c001 	ldrb.w	ip, [ip, #1]
 80241d0:	fb03 f901 	mul.w	r9, r3, r1
 80241d4:	011b      	lsls	r3, r3, #4
 80241d6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80241da:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80241de:	eba3 0309 	sub.w	r3, r3, r9
 80241e2:	b289      	uxth	r1, r1
 80241e4:	b29b      	uxth	r3, r3
 80241e6:	ebae 0e01 	sub.w	lr, lr, r1
 80241ea:	435f      	muls	r7, r3
 80241ec:	fa1f fe8e 	uxth.w	lr, lr
 80241f0:	fb0e 770a 	mla	r7, lr, sl, r7
 80241f4:	f892 a002 	ldrb.w	sl, [r2, #2]
 80241f8:	fb01 770a 	mla	r7, r1, sl, r7
 80241fc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024200:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024204:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024208:	f896 8000 	ldrb.w	r8, [r6]
 802420c:	7876      	ldrb	r6, [r6, #1]
 802420e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024212:	fb03 f808 	mul.w	r8, r3, r8
 8024216:	4373      	muls	r3, r6
 8024218:	7856      	ldrb	r6, [r2, #1]
 802421a:	fb0e 8807 	mla	r8, lr, r7, r8
 802421e:	7817      	ldrb	r7, [r2, #0]
 8024220:	fb0e 330c 	mla	r3, lr, ip, r3
 8024224:	fb01 8807 	mla	r8, r1, r7, r8
 8024228:	7807      	ldrb	r7, [r0, #0]
 802422a:	fb01 3306 	mla	r3, r1, r6, r3
 802422e:	fb09 8707 	mla	r7, r9, r7, r8
 8024232:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024236:	ea47 070a 	orr.w	r7, r7, sl
 802423a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802423e:	fb09 3a0a 	mla	sl, r9, sl, r3
 8024242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024244:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024248:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802424c:	ea47 070a 	orr.w	r7, r7, sl
 8024250:	f823 7b02 	strh.w	r7, [r3], #2
 8024254:	930b      	str	r3, [sp, #44]	; 0x2c
 8024256:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024258:	449b      	add	fp, r3
 802425a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802425c:	441d      	add	r5, r3
 802425e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024260:	3b01      	subs	r3, #1
 8024262:	9309      	str	r3, [sp, #36]	; 0x24
 8024264:	e714      	b.n	8024090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8024266:	b149      	cbz	r1, 802427c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024268:	5cba      	ldrb	r2, [r7, r2]
 802426a:	4660      	mov	r0, ip
 802426c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024270:	4422      	add	r2, r4
 8024272:	4666      	mov	r6, ip
 8024274:	e7a5      	b.n	80241c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8024276:	4660      	mov	r0, ip
 8024278:	4662      	mov	r2, ip
 802427a:	e7a2      	b.n	80241c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802427c:	4660      	mov	r0, ip
 802427e:	4662      	mov	r2, ip
 8024280:	e7f7      	b.n	8024272 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 8024282:	b00f      	add	sp, #60	; 0x3c
 8024284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024288 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802428c:	b085      	sub	sp, #20
 802428e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8024292:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024296:	9102      	str	r1, [sp, #8]
 8024298:	2c00      	cmp	r4, #0
 802429a:	fb04 710c 	mla	r1, r4, ip, r7
 802429e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80242a2:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80242a6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80242aa:	eb02 0e01 	add.w	lr, r2, r1
 80242ae:	f2c0 8122 	blt.w	80244f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80242b2:	45a0      	cmp	r8, r4
 80242b4:	f340 811f 	ble.w	80244f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80242b8:	2f00      	cmp	r7, #0
 80242ba:	f2c0 811a 	blt.w	80244f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80242be:	45bc      	cmp	ip, r7
 80242c0:	f340 8117 	ble.w	80244f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80242c4:	5c52      	ldrb	r2, [r2, r1]
 80242c6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80242ca:	1c7a      	adds	r2, r7, #1
 80242cc:	f100 8116 	bmi.w	80244fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80242d0:	4594      	cmp	ip, r2
 80242d2:	f340 8113 	ble.w	80244fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80242d6:	2e00      	cmp	r6, #0
 80242d8:	f000 8112 	beq.w	8024500 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80242dc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80242e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80242e4:	3401      	adds	r4, #1
 80242e6:	f100 810f 	bmi.w	8024508 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80242ea:	45a0      	cmp	r8, r4
 80242ec:	f340 810c 	ble.w	8024508 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80242f0:	2800      	cmp	r0, #0
 80242f2:	f000 810c 	beq.w	802450e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80242f6:	2f00      	cmp	r7, #0
 80242f8:	f2c0 8104 	blt.w	8024504 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80242fc:	45bc      	cmp	ip, r7
 80242fe:	f340 8101 	ble.w	8024504 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8024302:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8024306:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802430a:	3701      	adds	r7, #1
 802430c:	f100 8102 	bmi.w	8024514 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8024310:	45bc      	cmp	ip, r7
 8024312:	f340 80ff 	ble.w	8024514 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8024316:	2e00      	cmp	r6, #0
 8024318:	f000 80fe 	beq.w	8024518 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 802431c:	44f4      	add	ip, lr
 802431e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024322:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024326:	b2b6      	uxth	r6, r6
 8024328:	b280      	uxth	r0, r0
 802432a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802432e:	fb00 fe06 	mul.w	lr, r0, r6
 8024332:	0136      	lsls	r6, r6, #4
 8024334:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8024338:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802433c:	eba6 070e 	sub.w	r7, r6, lr
 8024340:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024344:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024348:	b280      	uxth	r0, r0
 802434a:	b2bf      	uxth	r7, r7
 802434c:	1a1b      	subs	r3, r3, r0
 802434e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024352:	fb0a f607 	mul.w	r6, sl, r7
 8024356:	b29b      	uxth	r3, r3
 8024358:	fb0b 6603 	mla	r6, fp, r3, r6
 802435c:	fb00 6609 	mla	r6, r0, r9, r6
 8024360:	fb0e 6608 	mla	r6, lr, r8, r6
 8024364:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024368:	9600      	str	r6, [sp, #0]
 802436a:	2e00      	cmp	r6, #0
 802436c:	f000 80be 	beq.w	80244ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8024370:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024374:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024378:	9e02      	ldr	r6, [sp, #8]
 802437a:	fb0b fc0c 	mul.w	ip, fp, ip
 802437e:	fb0b f505 	mul.w	r5, fp, r5
 8024382:	8836      	ldrh	r6, [r6, #0]
 8024384:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024388:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802438c:	9501      	str	r5, [sp, #4]
 802438e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024392:	44dc      	add	ip, fp
 8024394:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024398:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802439c:	9503      	str	r5, [sp, #12]
 802439e:	9d01      	ldr	r5, [sp, #4]
 80243a0:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80243a4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80243a8:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80243ac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80243b0:	fb0a fc0c 	mul.w	ip, sl, ip
 80243b4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80243b8:	fb0a fa01 	mul.w	sl, sl, r1
 80243bc:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80243c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80243c4:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80243c8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80243cc:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80243d0:	4465      	add	r5, ip
 80243d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80243d6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80243da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243de:	fb09 fc0c 	mul.w	ip, r9, ip
 80243e2:	0a2d      	lsrs	r5, r5, #8
 80243e4:	fb09 f904 	mul.w	r9, r9, r4
 80243e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80243ec:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80243f0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80243f4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80243f8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80243fc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024400:	437d      	muls	r5, r7
 8024402:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024406:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802440a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802440e:	4461      	add	r1, ip
 8024410:	fb08 f404 	mul.w	r4, r8, r4
 8024414:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024418:	fb08 f802 	mul.w	r8, r8, r2
 802441c:	0a09      	lsrs	r1, r1, #8
 802441e:	0a22      	lsrs	r2, r4, #8
 8024420:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024424:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024428:	fb07 f70a 	mul.w	r7, r7, sl
 802442c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024430:	4414      	add	r4, r2
 8024432:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024436:	0a24      	lsrs	r4, r4, #8
 8024438:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802443c:	9a03      	ldr	r2, [sp, #12]
 802443e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024442:	fb02 5503 	mla	r5, r2, r3, r5
 8024446:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802444a:	9a00      	ldr	r2, [sp, #0]
 802444c:	fb04 540e 	mla	r4, r4, lr, r5
 8024450:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024454:	1235      	asrs	r5, r6, #8
 8024456:	fb01 4100 	mla	r1, r1, r0, r4
 802445a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802445e:	0a09      	lsrs	r1, r1, #8
 8024460:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024464:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8024468:	fb03 7101 	mla	r1, r3, r1, r7
 802446c:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024470:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024474:	fb00 e101 	mla	r1, r0, r1, lr
 8024478:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 802447c:	b287      	uxth	r7, r0
 802447e:	0a09      	lsrs	r1, r1, #8
 8024480:	437a      	muls	r2, r7
 8024482:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024486:	1c53      	adds	r3, r2, #1
 8024488:	4321      	orrs	r1, r4
 802448a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802448e:	0c0a      	lsrs	r2, r1, #16
 8024490:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8024494:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024498:	b2c8      	uxtb	r0, r1
 802449a:	fb12 f207 	smulbb	r2, r2, r7
 802449e:	fb14 f407 	smulbb	r4, r4, r7
 80244a2:	b2db      	uxtb	r3, r3
 80244a4:	fb10 f007 	smulbb	r0, r0, r7
 80244a8:	fb05 2503 	mla	r5, r5, r3, r2
 80244ac:	10f2      	asrs	r2, r6, #3
 80244ae:	00f6      	lsls	r6, r6, #3
 80244b0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80244b4:	b2ad      	uxth	r5, r5
 80244b6:	b2f6      	uxtb	r6, r6
 80244b8:	fb02 4203 	mla	r2, r2, r3, r4
 80244bc:	fb06 0303 	mla	r3, r6, r3, r0
 80244c0:	b294      	uxth	r4, r2
 80244c2:	b299      	uxth	r1, r3
 80244c4:	1c6b      	adds	r3, r5, #1
 80244c6:	1c62      	adds	r2, r4, #1
 80244c8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80244cc:	1c4b      	adds	r3, r1, #1
 80244ce:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80244d2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80244d6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80244da:	0952      	lsrs	r2, r2, #5
 80244dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80244e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80244e4:	432b      	orrs	r3, r5
 80244e6:	4313      	orrs	r3, r2
 80244e8:	9a02      	ldr	r2, [sp, #8]
 80244ea:	8013      	strh	r3, [r2, #0]
 80244ec:	b005      	add	sp, #20
 80244ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244f2:	2500      	movs	r5, #0
 80244f4:	e6e9      	b.n	80242ca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80244f6:	2100      	movs	r1, #0
 80244f8:	460d      	mov	r5, r1
 80244fa:	e6f3      	b.n	80242e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80244fc:	2100      	movs	r1, #0
 80244fe:	e6f1      	b.n	80242e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8024500:	4631      	mov	r1, r6
 8024502:	e6ef      	b.n	80242e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8024504:	2400      	movs	r4, #0
 8024506:	e700      	b.n	802430a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8024508:	2200      	movs	r2, #0
 802450a:	4614      	mov	r4, r2
 802450c:	e70b      	b.n	8024326 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802450e:	4602      	mov	r2, r0
 8024510:	4604      	mov	r4, r0
 8024512:	e708      	b.n	8024326 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024514:	2200      	movs	r2, #0
 8024516:	e706      	b.n	8024326 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024518:	4632      	mov	r2, r6
 802451a:	e704      	b.n	8024326 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0802451c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024520:	b09f      	sub	sp, #124	; 0x7c
 8024522:	921b      	str	r2, [sp, #108]	; 0x6c
 8024524:	9309      	str	r3, [sp, #36]	; 0x24
 8024526:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024528:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802452c:	901d      	str	r0, [sp, #116]	; 0x74
 802452e:	931c      	str	r3, [sp, #112]	; 0x70
 8024530:	6850      	ldr	r0, [r2, #4]
 8024532:	9119      	str	r1, [sp, #100]	; 0x64
 8024534:	6812      	ldr	r2, [r2, #0]
 8024536:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8024538:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802453c:	fb00 1303 	mla	r3, r0, r3, r1
 8024540:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024544:	930c      	str	r3, [sp, #48]	; 0x30
 8024546:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024548:	681b      	ldr	r3, [r3, #0]
 802454a:	9312      	str	r3, [sp, #72]	; 0x48
 802454c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802454e:	685e      	ldr	r6, [r3, #4]
 8024550:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024554:	3604      	adds	r6, #4
 8024556:	930d      	str	r3, [sp, #52]	; 0x34
 8024558:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802455a:	2b00      	cmp	r3, #0
 802455c:	dc03      	bgt.n	8024566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802455e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024560:	2b00      	cmp	r3, #0
 8024562:	f340 8387 	ble.w	8024c74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8024566:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024568:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802456c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024570:	1e48      	subs	r0, r1, #1
 8024572:	1e57      	subs	r7, r2, #1
 8024574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024576:	2b00      	cmp	r3, #0
 8024578:	f340 8194 	ble.w	80248a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802457c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802457e:	142b      	asrs	r3, r5, #16
 8024580:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024584:	d406      	bmi.n	8024594 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024586:	4584      	cmp	ip, r0
 8024588:	da04      	bge.n	8024594 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802458a:	2b00      	cmp	r3, #0
 802458c:	db02      	blt.n	8024594 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802458e:	42bb      	cmp	r3, r7
 8024590:	f2c0 8189 	blt.w	80248a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024594:	f11c 0c01 	adds.w	ip, ip, #1
 8024598:	f100 8177 	bmi.w	802488a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802459c:	4561      	cmp	r1, ip
 802459e:	f2c0 8174 	blt.w	802488a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80245a2:	3301      	adds	r3, #1
 80245a4:	f100 8171 	bmi.w	802488a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80245a8:	429a      	cmp	r2, r3
 80245aa:	f2c0 816e 	blt.w	802488a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80245ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80245b2:	931a      	str	r3, [sp, #104]	; 0x68
 80245b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80245b6:	2b00      	cmp	r3, #0
 80245b8:	f340 8193 	ble.w	80248e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80245bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80245be:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80245c2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80245c6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80245ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80245cc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80245d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80245d2:	141b      	asrs	r3, r3, #16
 80245d4:	f100 81d6 	bmi.w	8024984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80245dc:	4543      	cmp	r3, r8
 80245de:	f280 81d1 	bge.w	8024984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245e2:	f1bc 0f00 	cmp.w	ip, #0
 80245e6:	f2c0 81cd 	blt.w	8024984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245ea:	f10e 38ff 	add.w	r8, lr, #4294967295
 80245ee:	45c4      	cmp	ip, r8
 80245f0:	f280 81c8 	bge.w	8024984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245f4:	b200      	sxth	r0, r0
 80245f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80245f8:	fb0c 3300 	mla	r3, ip, r0, r3
 80245fc:	eb04 0803 	add.w	r8, r4, r3
 8024600:	5ce3      	ldrb	r3, [r4, r3]
 8024602:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024606:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802460a:	2a00      	cmp	r2, #0
 802460c:	f000 81af 	beq.w	802496e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024610:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024614:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024618:	940e      	str	r4, [sp, #56]	; 0x38
 802461a:	0e24      	lsrs	r4, r4, #24
 802461c:	9415      	str	r4, [sp, #84]	; 0x54
 802461e:	b179      	cbz	r1, 8024640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024620:	eb08 0c00 	add.w	ip, r8, r0
 8024624:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024628:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802462c:	900a      	str	r0, [sp, #40]	; 0x28
 802462e:	0e00      	lsrs	r0, r0, #24
 8024630:	9013      	str	r0, [sp, #76]	; 0x4c
 8024632:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024636:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802463a:	900f      	str	r0, [sp, #60]	; 0x3c
 802463c:	0e00      	lsrs	r0, r0, #24
 802463e:	9016      	str	r0, [sp, #88]	; 0x58
 8024640:	b292      	uxth	r2, r2
 8024642:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024644:	b289      	uxth	r1, r1
 8024646:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024648:	fb02 f901 	mul.w	r9, r2, r1
 802464c:	0112      	lsls	r2, r2, #4
 802464e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024652:	eba2 0809 	sub.w	r8, r2, r9
 8024656:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802465a:	b289      	uxth	r1, r1
 802465c:	fa1f f888 	uxth.w	r8, r8
 8024660:	1a52      	subs	r2, r2, r1
 8024662:	fb08 f000 	mul.w	r0, r8, r0
 8024666:	b292      	uxth	r2, r2
 8024668:	fb02 000e 	mla	r0, r2, lr, r0
 802466c:	fb01 0004 	mla	r0, r1, r4, r0
 8024670:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024672:	fb09 0004 	mla	r0, r9, r4, r0
 8024676:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802467a:	2800      	cmp	r0, #0
 802467c:	f000 80fa 	beq.w	8024874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024680:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024684:	d01b      	beq.n	80246be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024686:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802468a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802468e:	fb0e fa0a 	mul.w	sl, lr, sl
 8024692:	fb0e fe03 	mul.w	lr, lr, r3
 8024696:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802469a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802469e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80246a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80246a6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80246aa:	4453      	add	r3, sl
 80246ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246b0:	0a1b      	lsrs	r3, r3, #8
 80246b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80246b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80246ba:	ea43 030c 	orr.w	r3, r3, ip
 80246be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246c0:	2cff      	cmp	r4, #255	; 0xff
 80246c2:	d021      	beq.n	8024708 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80246c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80246c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80246ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80246d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80246d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80246d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80246dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80246e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80246ec:	44de      	add	lr, fp
 80246ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024702:	ea4e 040a 	orr.w	r4, lr, sl
 8024706:	940e      	str	r4, [sp, #56]	; 0x38
 8024708:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802470a:	2cff      	cmp	r4, #255	; 0xff
 802470c:	d021      	beq.n	8024752 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802470e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024710:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024714:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024716:	fb04 fb0b 	mul.w	fp, r4, fp
 802471a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802471c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024720:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024722:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024726:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802472a:	fb04 fa0a 	mul.w	sl, r4, sl
 802472e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024732:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024736:	44de      	add	lr, fp
 8024738:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802473c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024740:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024744:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024748:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802474c:	ea4e 040a 	orr.w	r4, lr, sl
 8024750:	940a      	str	r4, [sp, #40]	; 0x28
 8024752:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024754:	2cff      	cmp	r4, #255	; 0xff
 8024756:	d021      	beq.n	802479c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8024758:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802475a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802475e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024760:	fb04 fb0b 	mul.w	fp, r4, fp
 8024764:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024766:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802476a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802476c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024770:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024774:	fb04 fa0a 	mul.w	sl, r4, sl
 8024778:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802477c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024780:	44de      	add	lr, fp
 8024782:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024786:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802478a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802478e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024792:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024796:	ea4e 040a 	orr.w	r4, lr, sl
 802479a:	940f      	str	r4, [sp, #60]	; 0x3c
 802479c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802479e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80247a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80247a6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80247aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80247ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80247b0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80247b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80247b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80247ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80247be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80247c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80247c4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80247c8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80247cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80247ce:	fb08 f80e 	mul.w	r8, r8, lr
 80247d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247d6:	fb02 8303 	mla	r3, r2, r3, r8
 80247da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80247dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247e0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80247e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80247e6:	fb01 330a 	mla	r3, r1, sl, r3
 80247ea:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80247ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80247f0:	fb09 3901 	mla	r9, r9, r1, r3
 80247f4:	883b      	ldrh	r3, [r7, #0]
 80247f6:	4342      	muls	r2, r0
 80247f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80247fc:	1c50      	adds	r0, r2, #1
 80247fe:	1219      	asrs	r1, r3, #8
 8024800:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024804:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024808:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802480c:	ea4c 0c09 	orr.w	ip, ip, r9
 8024810:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024814:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024818:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802481c:	b2c0      	uxtb	r0, r0
 802481e:	fb12 f204 	smulbb	r2, r2, r4
 8024822:	fa5f fc8c 	uxtb.w	ip, ip
 8024826:	fb1e fe04 	smulbb	lr, lr, r4
 802482a:	fb01 2100 	mla	r1, r1, r0, r2
 802482e:	10da      	asrs	r2, r3, #3
 8024830:	fb1c fc04 	smulbb	ip, ip, r4
 8024834:	00db      	lsls	r3, r3, #3
 8024836:	b289      	uxth	r1, r1
 8024838:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802483c:	b2db      	uxtb	r3, r3
 802483e:	fb02 e200 	mla	r2, r2, r0, lr
 8024842:	fb03 c300 	mla	r3, r3, r0, ip
 8024846:	b292      	uxth	r2, r2
 8024848:	fa1f fc83 	uxth.w	ip, r3
 802484c:	1c4b      	adds	r3, r1, #1
 802484e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024852:	f10c 0301 	add.w	r3, ip, #1
 8024856:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802485a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802485e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024862:	430b      	orrs	r3, r1
 8024864:	1c51      	adds	r1, r2, #1
 8024866:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802486a:	0952      	lsrs	r2, r2, #5
 802486c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024870:	4313      	orrs	r3, r2
 8024872:	803b      	strh	r3, [r7, #0]
 8024874:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024876:	3702      	adds	r7, #2
 8024878:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802487a:	441a      	add	r2, r3
 802487c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802487e:	441d      	add	r5, r3
 8024880:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024882:	9229      	str	r2, [sp, #164]	; 0xa4
 8024884:	3b01      	subs	r3, #1
 8024886:	931a      	str	r3, [sp, #104]	; 0x68
 8024888:	e694      	b.n	80245b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802488a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802488c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802488e:	441c      	add	r4, r3
 8024890:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024892:	441d      	add	r5, r3
 8024894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024896:	9429      	str	r4, [sp, #164]	; 0xa4
 8024898:	3b01      	subs	r3, #1
 802489a:	9309      	str	r3, [sp, #36]	; 0x24
 802489c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802489e:	3302      	adds	r3, #2
 80248a0:	930c      	str	r3, [sp, #48]	; 0x30
 80248a2:	e667      	b.n	8024574 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80248a4:	d024      	beq.n	80248f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80248a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248a8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80248aa:	3b01      	subs	r3, #1
 80248ac:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80248ae:	fb00 4003 	mla	r0, r0, r3, r4
 80248b2:	1400      	asrs	r0, r0, #16
 80248b4:	f53f ae7b 	bmi.w	80245ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248b8:	3901      	subs	r1, #1
 80248ba:	4288      	cmp	r0, r1
 80248bc:	f6bf ae77 	bge.w	80245ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248c0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80248c2:	fb01 5303 	mla	r3, r1, r3, r5
 80248c6:	141b      	asrs	r3, r3, #16
 80248c8:	f53f ae71 	bmi.w	80245ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248cc:	3a01      	subs	r2, #1
 80248ce:	4293      	cmp	r3, r2
 80248d0:	f6bf ae6d 	bge.w	80245ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248d4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80248d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80248dc:	f1bb 0f00 	cmp.w	fp, #0
 80248e0:	dc70      	bgt.n	80249c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80248e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80248e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248ea:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80248ee:	930c      	str	r3, [sp, #48]	; 0x30
 80248f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80248f2:	2b00      	cmp	r3, #0
 80248f4:	f340 81be 	ble.w	8024c74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80248f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80248fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024902:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024906:	eef0 6a62 	vmov.f32	s13, s5
 802490a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802490e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024912:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024916:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802491a:	eef0 6a43 	vmov.f32	s13, s6
 802491e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024922:	ee16 5a90 	vmov	r5, s13
 8024926:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802492a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802492e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024932:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024936:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802493a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802493e:	ee12 2a90 	vmov	r2, s5
 8024942:	eef0 2a47 	vmov.f32	s5, s14
 8024946:	fb92 f3f3 	sdiv	r3, r2, r3
 802494a:	ee13 2a10 	vmov	r2, s6
 802494e:	932b      	str	r3, [sp, #172]	; 0xac
 8024950:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024952:	eeb0 3a67 	vmov.f32	s6, s15
 8024956:	fb92 f3f3 	sdiv	r3, r2, r3
 802495a:	932c      	str	r3, [sp, #176]	; 0xb0
 802495c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802495e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024960:	3b01      	subs	r3, #1
 8024962:	9319      	str	r3, [sp, #100]	; 0x64
 8024964:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024966:	bf08      	it	eq
 8024968:	4613      	moveq	r3, r2
 802496a:	9309      	str	r3, [sp, #36]	; 0x24
 802496c:	e5f4      	b.n	8024558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802496e:	2900      	cmp	r1, #0
 8024970:	f43f ae66 	beq.w	8024640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024974:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024978:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802497c:	900a      	str	r0, [sp, #40]	; 0x28
 802497e:	0e00      	lsrs	r0, r0, #24
 8024980:	9013      	str	r0, [sp, #76]	; 0x4c
 8024982:	e65d      	b.n	8024640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024984:	f113 0801 	adds.w	r8, r3, #1
 8024988:	f53f af74 	bmi.w	8024874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802498c:	4540      	cmp	r0, r8
 802498e:	f6ff af71 	blt.w	8024874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024992:	f11c 0801 	adds.w	r8, ip, #1
 8024996:	f53f af6d 	bmi.w	8024874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802499a:	45c6      	cmp	lr, r8
 802499c:	f6ff af6a 	blt.w	8024874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80249a0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80249a2:	b200      	sxth	r0, r0
 80249a4:	9302      	str	r3, [sp, #8]
 80249a6:	fa0f f38e 	sxth.w	r3, lr
 80249aa:	9000      	str	r0, [sp, #0]
 80249ac:	9301      	str	r3, [sp, #4]
 80249ae:	4633      	mov	r3, r6
 80249b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80249b2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80249b6:	e9cd c203 	strd	ip, r2, [sp, #12]
 80249ba:	4639      	mov	r1, r7
 80249bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80249be:	f7ff fc63 	bl	8024288 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80249c2:	e757      	b.n	8024874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80249c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80249c6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80249ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80249cc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80249d0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80249d2:	1427      	asrs	r7, r4, #16
 80249d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80249d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80249da:	142b      	asrs	r3, r5, #16
 80249dc:	fb01 7303 	mla	r3, r1, r3, r7
 80249e0:	18e7      	adds	r7, r4, r3
 80249e2:	5ce3      	ldrb	r3, [r4, r3]
 80249e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80249e8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80249ec:	2a00      	cmp	r2, #0
 80249ee:	f000 8137 	beq.w	8024c60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80249f2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80249f6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80249fa:	9410      	str	r4, [sp, #64]	; 0x40
 80249fc:	0e24      	lsrs	r4, r4, #24
 80249fe:	9417      	str	r4, [sp, #92]	; 0x5c
 8024a00:	b170      	cbz	r0, 8024a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024a02:	eb07 0e01 	add.w	lr, r7, r1
 8024a06:	5c79      	ldrb	r1, [r7, r1]
 8024a08:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8024a0e:	0e09      	lsrs	r1, r1, #24
 8024a10:	9114      	str	r1, [sp, #80]	; 0x50
 8024a12:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024a16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a1a:	9111      	str	r1, [sp, #68]	; 0x44
 8024a1c:	0e09      	lsrs	r1, r1, #24
 8024a1e:	9118      	str	r1, [sp, #96]	; 0x60
 8024a20:	b292      	uxth	r2, r2
 8024a22:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024a24:	b280      	uxth	r0, r0
 8024a26:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a28:	fb02 f800 	mul.w	r8, r2, r0
 8024a2c:	0112      	lsls	r2, r2, #4
 8024a2e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024a32:	eba2 0e08 	sub.w	lr, r2, r8
 8024a36:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024a3a:	b280      	uxth	r0, r0
 8024a3c:	fa1f fe8e 	uxth.w	lr, lr
 8024a40:	1a12      	subs	r2, r2, r0
 8024a42:	fb0e f101 	mul.w	r1, lr, r1
 8024a46:	b292      	uxth	r2, r2
 8024a48:	fb02 110c 	mla	r1, r2, ip, r1
 8024a4c:	fb00 1104 	mla	r1, r0, r4, r1
 8024a50:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024a52:	fb08 1104 	mla	r1, r8, r4, r1
 8024a56:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024a5a:	2900      	cmp	r1, #0
 8024a5c:	f000 80f5 	beq.w	8024c4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024a60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024a64:	d019      	beq.n	8024a9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024a66:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a6e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024a72:	fb0c fc03 	mul.w	ip, ip, r3
 8024a76:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024a7a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024a7e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024a82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024a86:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024a8a:	4453      	add	r3, sl
 8024a8c:	0a3f      	lsrs	r7, r7, #8
 8024a8e:	0a1b      	lsrs	r3, r3, #8
 8024a90:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024a94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024a98:	433b      	orrs	r3, r7
 8024a9a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024a9c:	2cff      	cmp	r4, #255	; 0xff
 8024a9e:	d020      	beq.n	8024ae2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8024aa0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024aa2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024aa6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024aa8:	4367      	muls	r7, r4
 8024aaa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024aac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024ab0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ab4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024ab6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024aba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024abe:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ac2:	44bc      	add	ip, r7
 8024ac4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ac8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024acc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ad0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ad4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ad8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024adc:	ea4c 040a 	orr.w	r4, ip, sl
 8024ae0:	9410      	str	r4, [sp, #64]	; 0x40
 8024ae2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024ae4:	2cff      	cmp	r4, #255	; 0xff
 8024ae6:	d020      	beq.n	8024b2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8024ae8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024aea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024aee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024af0:	4367      	muls	r7, r4
 8024af2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024af4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024af8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024afc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024afe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024b02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b06:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b0a:	44bc      	add	ip, r7
 8024b0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024b10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b24:	ea4c 040a 	orr.w	r4, ip, sl
 8024b28:	940b      	str	r4, [sp, #44]	; 0x2c
 8024b2a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b2c:	2cff      	cmp	r4, #255	; 0xff
 8024b2e:	d020      	beq.n	8024b72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8024b30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024b32:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024b36:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b38:	4367      	muls	r7, r4
 8024b3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024b3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024b40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024b44:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024b4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b52:	44bc      	add	ip, r7
 8024b54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024b58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b6c:	ea4c 040a 	orr.w	r4, ip, sl
 8024b70:	9411      	str	r4, [sp, #68]	; 0x44
 8024b72:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024b74:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024b78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b7c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024b80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024b82:	fb0e f707 	mul.w	r7, lr, r7
 8024b86:	fb02 770c 	mla	r7, r2, ip, r7
 8024b8a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024b8e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024b90:	fb00 770c 	mla	r7, r0, ip, r7
 8024b94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024b98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024b9a:	fb08 770c 	mla	r7, r8, ip, r7
 8024b9e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024ba2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024ba4:	fb0e fe0c 	mul.w	lr, lr, ip
 8024ba8:	0a3f      	lsrs	r7, r7, #8
 8024baa:	fb02 e303 	mla	r3, r2, r3, lr
 8024bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024bb0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024bb4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024bba:	fb00 330a 	mla	r3, r0, sl, r3
 8024bbe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024bc2:	f8b9 0000 	ldrh.w	r0, [r9]
 8024bc6:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024bcc:	1202      	asrs	r2, r0, #8
 8024bce:	434b      	muls	r3, r1
 8024bd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024bd4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024bd8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024bdc:	1c59      	adds	r1, r3, #1
 8024bde:	ea47 070c 	orr.w	r7, r7, ip
 8024be2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024be6:	0c3b      	lsrs	r3, r7, #16
 8024be8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024bec:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024bf0:	b2ff      	uxtb	r7, r7
 8024bf2:	fb13 f304 	smulbb	r3, r3, r4
 8024bf6:	b2c9      	uxtb	r1, r1
 8024bf8:	fb1c fc04 	smulbb	ip, ip, r4
 8024bfc:	fb02 3201 	mla	r2, r2, r1, r3
 8024c00:	10c3      	asrs	r3, r0, #3
 8024c02:	fb17 f704 	smulbb	r7, r7, r4
 8024c06:	00c0      	lsls	r0, r0, #3
 8024c08:	b292      	uxth	r2, r2
 8024c0a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024c0e:	b2c0      	uxtb	r0, r0
 8024c10:	fb03 c301 	mla	r3, r3, r1, ip
 8024c14:	f102 0c01 	add.w	ip, r2, #1
 8024c18:	fb00 7001 	mla	r0, r0, r1, r7
 8024c1c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024c20:	b280      	uxth	r0, r0
 8024c22:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8024c26:	b29b      	uxth	r3, r3
 8024c28:	1c42      	adds	r2, r0, #1
 8024c2a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024c2e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024c32:	ea42 020c 	orr.w	r2, r2, ip
 8024c36:	f103 0c01 	add.w	ip, r3, #1
 8024c3a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024c3e:	095b      	lsrs	r3, r3, #5
 8024c40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c44:	431a      	orrs	r2, r3
 8024c46:	f8a9 2000 	strh.w	r2, [r9]
 8024c4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024c4c:	f109 0902 	add.w	r9, r9, #2
 8024c50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024c56:	441a      	add	r2, r3
 8024c58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024c5a:	9229      	str	r2, [sp, #164]	; 0xa4
 8024c5c:	441d      	add	r5, r3
 8024c5e:	e63d      	b.n	80248dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024c60:	2800      	cmp	r0, #0
 8024c62:	f43f aedd 	beq.w	8024a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024c66:	5c79      	ldrb	r1, [r7, r1]
 8024c68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8024c6e:	0e09      	lsrs	r1, r1, #24
 8024c70:	9114      	str	r1, [sp, #80]	; 0x50
 8024c72:	e6d5      	b.n	8024a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024c74:	b01f      	add	sp, #124	; 0x7c
 8024c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024c7a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c7e:	b089      	sub	sp, #36	; 0x24
 8024c80:	9101      	str	r1, [sp, #4]
 8024c82:	9801      	ldr	r0, [sp, #4]
 8024c84:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8024c88:	8800      	ldrh	r0, [r0, #0]
 8024c8a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8024c8e:	1206      	asrs	r6, r0, #8
 8024c90:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8024c94:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8024c98:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024c9c:	9602      	str	r6, [sp, #8]
 8024c9e:	10c6      	asrs	r6, r0, #3
 8024ca0:	00c0      	lsls	r0, r0, #3
 8024ca2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024ca6:	b2c0      	uxtb	r0, r0
 8024ca8:	9603      	str	r6, [sp, #12]
 8024caa:	9004      	str	r0, [sp, #16]
 8024cac:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8024cb0:	fb07 100c 	mla	r0, r7, ip, r1
 8024cb4:	2f00      	cmp	r7, #0
 8024cb6:	eb02 0e00 	add.w	lr, r2, r0
 8024cba:	f2c0 810a 	blt.w	8024ed2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024cbe:	45b8      	cmp	r8, r7
 8024cc0:	f340 8107 	ble.w	8024ed2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024cc4:	2900      	cmp	r1, #0
 8024cc6:	f2c0 8102 	blt.w	8024ece <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024cca:	458c      	cmp	ip, r1
 8024ccc:	f340 80ff 	ble.w	8024ece <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024cd0:	5c12      	ldrb	r2, [r2, r0]
 8024cd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024cd6:	1c4a      	adds	r2, r1, #1
 8024cd8:	f100 80fe 	bmi.w	8024ed8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024cdc:	4594      	cmp	ip, r2
 8024cde:	f340 80fb 	ble.w	8024ed8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024ce2:	2d00      	cmp	r5, #0
 8024ce4:	f000 80fa 	beq.w	8024edc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024ce8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024cec:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024cf0:	3701      	adds	r7, #1
 8024cf2:	f100 80f7 	bmi.w	8024ee4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024cf6:	45b8      	cmp	r8, r7
 8024cf8:	f340 80f4 	ble.w	8024ee4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024cfc:	2c00      	cmp	r4, #0
 8024cfe:	f000 80f4 	beq.w	8024eea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8024d02:	2900      	cmp	r1, #0
 8024d04:	eb0e 020c 	add.w	r2, lr, ip
 8024d08:	f2c0 80ea 	blt.w	8024ee0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024d0c:	458c      	cmp	ip, r1
 8024d0e:	f340 80e7 	ble.w	8024ee0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024d12:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8024d16:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024d1a:	3101      	adds	r1, #1
 8024d1c:	f100 80e8 	bmi.w	8024ef0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024d20:	458c      	cmp	ip, r1
 8024d22:	f340 80e5 	ble.w	8024ef0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024d26:	2d00      	cmp	r5, #0
 8024d28:	f000 80e4 	beq.w	8024ef4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024d2c:	7852      	ldrb	r2, [r2, #1]
 8024d2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024d32:	0e0b      	lsrs	r3, r1, #24
 8024d34:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024d38:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024d3c:	9300      	str	r3, [sp, #0]
 8024d3e:	b2a4      	uxth	r4, r4
 8024d40:	b2ab      	uxth	r3, r5
 8024d42:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024d46:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024d4a:	fb03 f904 	mul.w	r9, r3, r4
 8024d4e:	011b      	lsls	r3, r3, #4
 8024d50:	fb0a f505 	mul.w	r5, sl, r5
 8024d54:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8024d58:	eba3 0e09 	sub.w	lr, r3, r9
 8024d5c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8024d60:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8024d64:	0a28      	lsrs	r0, r5, #8
 8024d66:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024d6a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024d6e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024d72:	fb0a f303 	mul.w	r3, sl, r3
 8024d76:	fb08 f707 	mul.w	r7, r8, r7
 8024d7a:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8024d7e:	4405      	add	r5, r0
 8024d80:	fb08 fc0c 	mul.w	ip, r8, ip
 8024d84:	b2a4      	uxth	r4, r4
 8024d86:	0a2d      	lsrs	r5, r5, #8
 8024d88:	fa1f fe8e 	uxth.w	lr, lr
 8024d8c:	1b12      	subs	r2, r2, r4
 8024d8e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8024d92:	b292      	uxth	r2, r2
 8024d94:	9005      	str	r0, [sp, #20]
 8024d96:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8024d9a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024d9e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8024da2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024da6:	0a1b      	lsrs	r3, r3, #8
 8024da8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024dac:	9306      	str	r3, [sp, #24]
 8024dae:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024db2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024db6:	4460      	add	r0, ip
 8024db8:	fb0b f303 	mul.w	r3, fp, r3
 8024dbc:	fb0b f606 	mul.w	r6, fp, r6
 8024dc0:	0a00      	lsrs	r0, r0, #8
 8024dc2:	0a1d      	lsrs	r5, r3, #8
 8024dc4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024dc8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024dcc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024dd0:	441d      	add	r5, r3
 8024dd2:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024dd6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024dda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8024dde:	0a2d      	lsrs	r5, r5, #8
 8024de0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024de4:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8024de8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024dec:	0a36      	lsrs	r6, r6, #8
 8024dee:	0a1b      	lsrs	r3, r3, #8
 8024df0:	fb05 f50e 	mul.w	r5, r5, lr
 8024df4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024df8:	9307      	str	r3, [sp, #28]
 8024dfa:	0e0b      	lsrs	r3, r1, #24
 8024dfc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024e00:	fb0e f606 	mul.w	r6, lr, r6
 8024e04:	435f      	muls	r7, r3
 8024e06:	4359      	muls	r1, r3
 8024e08:	9b05      	ldr	r3, [sp, #20]
 8024e0a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024e0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024e12:	fb03 5502 	mla	r5, r3, r2, r5
 8024e16:	9b06      	ldr	r3, [sp, #24]
 8024e18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e1c:	fb0e fe0b 	mul.w	lr, lr, fp
 8024e20:	44bc      	add	ip, r7
 8024e22:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8024e26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e2a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024e2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e32:	0a09      	lsrs	r1, r1, #8
 8024e34:	fb0c 5509 	mla	r5, ip, r9, r5
 8024e38:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024e3c:	fb00 5504 	mla	r5, r0, r4, r5
 8024e40:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024e44:	9b07      	ldr	r3, [sp, #28]
 8024e46:	fb02 6000 	mla	r0, r2, r0, r6
 8024e4a:	0a2d      	lsrs	r5, r5, #8
 8024e4c:	fb02 e20a 	mla	r2, r2, sl, lr
 8024e50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e54:	fb09 0001 	mla	r0, r9, r1, r0
 8024e58:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024e5c:	fb04 0003 	mla	r0, r4, r3, r0
 8024e60:	9b00      	ldr	r3, [sp, #0]
 8024e62:	fb04 2408 	mla	r4, r4, r8, r2
 8024e66:	9a04      	ldr	r2, [sp, #16]
 8024e68:	0a00      	lsrs	r0, r0, #8
 8024e6a:	fb09 4903 	mla	r9, r9, r3, r4
 8024e6e:	9b02      	ldr	r3, [sp, #8]
 8024e70:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024e74:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024e78:	4305      	orrs	r5, r0
 8024e7a:	fa5f f989 	uxtb.w	r9, r9
 8024e7e:	fb03 f109 	mul.w	r1, r3, r9
 8024e82:	9b03      	ldr	r3, [sp, #12]
 8024e84:	fb03 f309 	mul.w	r3, r3, r9
 8024e88:	fb02 f909 	mul.w	r9, r2, r9
 8024e8c:	1c4a      	adds	r2, r1, #1
 8024e8e:	1c58      	adds	r0, r3, #1
 8024e90:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024e94:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024e98:	0c2a      	lsrs	r2, r5, #16
 8024e9a:	0a2b      	lsrs	r3, r5, #8
 8024e9c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024ea0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024ea4:	0212      	lsls	r2, r2, #8
 8024ea6:	00db      	lsls	r3, r3, #3
 8024ea8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024eac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024eb0:	4313      	orrs	r3, r2
 8024eb2:	f109 0201 	add.w	r2, r9, #1
 8024eb6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024eba:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8024ebe:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8024ec2:	431d      	orrs	r5, r3
 8024ec4:	9b01      	ldr	r3, [sp, #4]
 8024ec6:	801d      	strh	r5, [r3, #0]
 8024ec8:	b009      	add	sp, #36	; 0x24
 8024eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ece:	2000      	movs	r0, #0
 8024ed0:	e701      	b.n	8024cd6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8024ed2:	2600      	movs	r6, #0
 8024ed4:	4630      	mov	r0, r6
 8024ed6:	e70b      	b.n	8024cf0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024ed8:	2600      	movs	r6, #0
 8024eda:	e709      	b.n	8024cf0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024edc:	462e      	mov	r6, r5
 8024ede:	e707      	b.n	8024cf0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024ee0:	2700      	movs	r7, #0
 8024ee2:	e71a      	b.n	8024d1a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8024ee4:	2100      	movs	r1, #0
 8024ee6:	460f      	mov	r7, r1
 8024ee8:	e723      	b.n	8024d32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024eea:	4621      	mov	r1, r4
 8024eec:	4627      	mov	r7, r4
 8024eee:	e720      	b.n	8024d32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024ef0:	2100      	movs	r1, #0
 8024ef2:	e71e      	b.n	8024d32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024ef4:	4629      	mov	r1, r5
 8024ef6:	e71c      	b.n	8024d32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08024ef8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024efc:	b09b      	sub	sp, #108	; 0x6c
 8024efe:	9218      	str	r2, [sp, #96]	; 0x60
 8024f00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024f02:	9019      	str	r0, [sp, #100]	; 0x64
 8024f04:	9116      	str	r1, [sp, #88]	; 0x58
 8024f06:	6850      	ldr	r0, [r2, #4]
 8024f08:	9307      	str	r3, [sp, #28]
 8024f0a:	6812      	ldr	r2, [r2, #0]
 8024f0c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8024f0e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024f12:	fb00 1303 	mla	r3, r0, r3, r1
 8024f16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8024f1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f1e:	681b      	ldr	r3, [r3, #0]
 8024f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f24:	685e      	ldr	r6, [r3, #4]
 8024f26:	3604      	adds	r6, #4
 8024f28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024f2a:	2b00      	cmp	r3, #0
 8024f2c:	dc03      	bgt.n	8024f36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024f2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024f30:	2b00      	cmp	r3, #0
 8024f32:	f340 8373 	ble.w	802561c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024f36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f40:	1e48      	subs	r0, r1, #1
 8024f42:	1e57      	subs	r7, r2, #1
 8024f44:	9b07      	ldr	r3, [sp, #28]
 8024f46:	2b00      	cmp	r3, #0
 8024f48:	f340 818f 	ble.w	802526a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024f4c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024f4e:	142b      	asrs	r3, r5, #16
 8024f50:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024f54:	d406      	bmi.n	8024f64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f56:	4584      	cmp	ip, r0
 8024f58:	da04      	bge.n	8024f64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f5a:	2b00      	cmp	r3, #0
 8024f5c:	db02      	blt.n	8024f64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f5e:	42bb      	cmp	r3, r7
 8024f60:	f2c0 8184 	blt.w	802526c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8024f64:	f11c 0c01 	adds.w	ip, ip, #1
 8024f68:	f100 8172 	bmi.w	8025250 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f6c:	4561      	cmp	r1, ip
 8024f6e:	f2c0 816f 	blt.w	8025250 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f72:	3301      	adds	r3, #1
 8024f74:	f100 816c 	bmi.w	8025250 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f78:	429a      	cmp	r2, r3
 8024f7a:	f2c0 8169 	blt.w	8025250 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f7e:	9b07      	ldr	r3, [sp, #28]
 8024f80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024f82:	9317      	str	r3, [sp, #92]	; 0x5c
 8024f84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024f86:	2b00      	cmp	r3, #0
 8024f88:	f340 818e 	ble.w	80252a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8024f8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024f8e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024f92:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024f96:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024f9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f9c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024fa0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024fa2:	141b      	asrs	r3, r3, #16
 8024fa4:	f100 81d1 	bmi.w	802534a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024fa8:	f101 38ff 	add.w	r8, r1, #4294967295
 8024fac:	4543      	cmp	r3, r8
 8024fae:	f280 81cc 	bge.w	802534a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024fb2:	f1bc 0f00 	cmp.w	ip, #0
 8024fb6:	f2c0 81c8 	blt.w	802534a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024fba:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024fbe:	45c4      	cmp	ip, r8
 8024fc0:	f280 81c3 	bge.w	802534a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024fc4:	b209      	sxth	r1, r1
 8024fc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024fc8:	fb0c 3301 	mla	r3, ip, r1, r3
 8024fcc:	eb04 0803 	add.w	r8, r4, r3
 8024fd0:	5ce3      	ldrb	r3, [r4, r3]
 8024fd2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024fd6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024fda:	2a00      	cmp	r2, #0
 8024fdc:	f000 81aa 	beq.w	8025334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8024fe0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024fe4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024fe8:	940b      	str	r4, [sp, #44]	; 0x2c
 8024fea:	0e24      	lsrs	r4, r4, #24
 8024fec:	9412      	str	r4, [sp, #72]	; 0x48
 8024fee:	b178      	cbz	r0, 8025010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024ff0:	eb08 0c01 	add.w	ip, r8, r1
 8024ff4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024ff8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024ffc:	9108      	str	r1, [sp, #32]
 8024ffe:	0e09      	lsrs	r1, r1, #24
 8025000:	9110      	str	r1, [sp, #64]	; 0x40
 8025002:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025006:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802500a:	910c      	str	r1, [sp, #48]	; 0x30
 802500c:	0e09      	lsrs	r1, r1, #24
 802500e:	9113      	str	r1, [sp, #76]	; 0x4c
 8025010:	b292      	uxth	r2, r2
 8025012:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025014:	b280      	uxth	r0, r0
 8025016:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025018:	fb02 f900 	mul.w	r9, r2, r0
 802501c:	0112      	lsls	r2, r2, #4
 802501e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025022:	eba2 0809 	sub.w	r8, r2, r9
 8025026:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802502a:	b280      	uxth	r0, r0
 802502c:	fa1f f888 	uxth.w	r8, r8
 8025030:	1a12      	subs	r2, r2, r0
 8025032:	fb08 f101 	mul.w	r1, r8, r1
 8025036:	b292      	uxth	r2, r2
 8025038:	fb02 110e 	mla	r1, r2, lr, r1
 802503c:	fb00 1104 	mla	r1, r0, r4, r1
 8025040:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025042:	fb09 1104 	mla	r1, r9, r4, r1
 8025046:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802504a:	2900      	cmp	r1, #0
 802504c:	f000 80f5 	beq.w	802523a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025050:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025054:	d01b      	beq.n	802508e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025056:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802505a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802505e:	fb0e fa0a 	mul.w	sl, lr, sl
 8025062:	fb0e fe03 	mul.w	lr, lr, r3
 8025066:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802506a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802506e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025072:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025076:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802507a:	4453      	add	r3, sl
 802507c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025080:	0a1b      	lsrs	r3, r3, #8
 8025082:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025086:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802508a:	ea43 030c 	orr.w	r3, r3, ip
 802508e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025090:	2cff      	cmp	r4, #255	; 0xff
 8025092:	d021      	beq.n	80250d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8025094:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025096:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802509a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802509c:	fb04 fb0b 	mul.w	fp, r4, fp
 80250a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80250a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80250a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80250a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80250ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80250b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80250b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80250bc:	44de      	add	lr, fp
 80250be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80250c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80250d2:	ea4e 040a 	orr.w	r4, lr, sl
 80250d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80250d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80250da:	2cff      	cmp	r4, #255	; 0xff
 80250dc:	d021      	beq.n	8025122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80250de:	9c08      	ldr	r4, [sp, #32]
 80250e0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80250e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80250e6:	fb04 fb0b 	mul.w	fp, r4, fp
 80250ea:	9c08      	ldr	r4, [sp, #32]
 80250ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80250f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80250f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80250f6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80250fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80250fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025102:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025106:	44de      	add	lr, fp
 8025108:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802510c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025110:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025114:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025118:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802511c:	ea4e 040a 	orr.w	r4, lr, sl
 8025120:	9408      	str	r4, [sp, #32]
 8025122:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025124:	2cff      	cmp	r4, #255	; 0xff
 8025126:	d021      	beq.n	802516c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8025128:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802512a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802512e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025130:	fb04 fb0b 	mul.w	fp, r4, fp
 8025134:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025136:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802513a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802513c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025140:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025144:	fb04 fa0a 	mul.w	sl, r4, sl
 8025148:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802514c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025150:	44de      	add	lr, fp
 8025152:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025156:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802515a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802515e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025162:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025166:	ea4e 040a 	orr.w	r4, lr, sl
 802516a:	940c      	str	r4, [sp, #48]	; 0x30
 802516c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802516e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025172:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025176:	43c9      	mvns	r1, r1
 8025178:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802517c:	9c08      	ldr	r4, [sp, #32]
 802517e:	fb08 fc0c 	mul.w	ip, r8, ip
 8025182:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025186:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802518a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802518c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025190:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025194:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025196:	fb09 cc0e 	mla	ip, r9, lr, ip
 802519a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802519e:	fb08 f80e 	mul.w	r8, r8, lr
 80251a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251a6:	fa5f fe81 	uxtb.w	lr, r1
 80251aa:	fb02 8303 	mla	r3, r2, r3, r8
 80251ae:	9a08      	ldr	r2, [sp, #32]
 80251b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80251b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80251b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80251bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80251be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80251c2:	fb00 330a 	mla	r3, r0, sl, r3
 80251c6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80251ca:	ea4f 2228 	mov.w	r2, r8, asr #8
 80251ce:	fb09 3900 	mla	r9, r9, r0, r3
 80251d2:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80251d6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80251da:	b2c9      	uxtb	r1, r1
 80251dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80251e0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80251e4:	fb02 f20e 	mul.w	r2, r2, lr
 80251e8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80251ec:	fb00 f00e 	mul.w	r0, r0, lr
 80251f0:	1c53      	adds	r3, r2, #1
 80251f2:	fb01 f10e 	mul.w	r1, r1, lr
 80251f6:	ea4c 0c09 	orr.w	ip, ip, r9
 80251fa:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80251fe:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8025202:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025206:	4a60      	ldr	r2, [pc, #384]	; (8025388 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8025208:	b2db      	uxtb	r3, r3
 802520a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802520e:	1c43      	adds	r3, r0, #1
 8025210:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025214:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025218:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802521c:	00db      	lsls	r3, r3, #3
 802521e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025222:	4313      	orrs	r3, r2
 8025224:	1c4a      	adds	r2, r1, #1
 8025226:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802522a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802522e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025232:	ea4c 0c03 	orr.w	ip, ip, r3
 8025236:	f8a7 c000 	strh.w	ip, [r7]
 802523a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802523c:	3702      	adds	r7, #2
 802523e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025240:	441a      	add	r2, r3
 8025242:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025244:	441d      	add	r5, r3
 8025246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025248:	9225      	str	r2, [sp, #148]	; 0x94
 802524a:	3b01      	subs	r3, #1
 802524c:	9317      	str	r3, [sp, #92]	; 0x5c
 802524e:	e699      	b.n	8024f84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025250:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025252:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025254:	441c      	add	r4, r3
 8025256:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025258:	441d      	add	r5, r3
 802525a:	9b07      	ldr	r3, [sp, #28]
 802525c:	9425      	str	r4, [sp, #148]	; 0x94
 802525e:	3b01      	subs	r3, #1
 8025260:	9307      	str	r3, [sp, #28]
 8025262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025264:	3302      	adds	r3, #2
 8025266:	930a      	str	r3, [sp, #40]	; 0x28
 8025268:	e66c      	b.n	8024f44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802526a:	d024      	beq.n	80252b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802526c:	9b07      	ldr	r3, [sp, #28]
 802526e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025270:	3b01      	subs	r3, #1
 8025272:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025274:	fb00 4003 	mla	r0, r0, r3, r4
 8025278:	1400      	asrs	r0, r0, #16
 802527a:	f53f ae80 	bmi.w	8024f7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802527e:	3901      	subs	r1, #1
 8025280:	4288      	cmp	r0, r1
 8025282:	f6bf ae7c 	bge.w	8024f7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025286:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025288:	fb01 5303 	mla	r3, r1, r3, r5
 802528c:	141b      	asrs	r3, r3, #16
 802528e:	f53f ae76 	bmi.w	8024f7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025292:	3a01      	subs	r2, #1
 8025294:	4293      	cmp	r3, r2
 8025296:	f6bf ae72 	bge.w	8024f7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802529a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802529e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80252a2:	f1bb 0f00 	cmp.w	fp, #0
 80252a6:	dc71      	bgt.n	802538c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80252a8:	9b07      	ldr	r3, [sp, #28]
 80252aa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80252ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252b0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80252b4:	930a      	str	r3, [sp, #40]	; 0x28
 80252b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80252b8:	2b00      	cmp	r3, #0
 80252ba:	f340 81af 	ble.w	802561c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80252be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80252c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80252c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80252c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80252cc:	eef0 6a62 	vmov.f32	s13, s5
 80252d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80252d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80252d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252dc:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80252e0:	eef0 6a43 	vmov.f32	s13, s6
 80252e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252e8:	ee16 5a90 	vmov	r5, s13
 80252ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80252f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80252f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80252f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80252fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025300:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025304:	ee12 2a90 	vmov	r2, s5
 8025308:	eef0 2a47 	vmov.f32	s5, s14
 802530c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025310:	ee13 2a10 	vmov	r2, s6
 8025314:	9327      	str	r3, [sp, #156]	; 0x9c
 8025316:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025318:	eeb0 3a67 	vmov.f32	s6, s15
 802531c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025320:	9328      	str	r3, [sp, #160]	; 0xa0
 8025322:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025324:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025326:	3b01      	subs	r3, #1
 8025328:	9316      	str	r3, [sp, #88]	; 0x58
 802532a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802532c:	bf08      	it	eq
 802532e:	4613      	moveq	r3, r2
 8025330:	9307      	str	r3, [sp, #28]
 8025332:	e5f9      	b.n	8024f28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8025334:	2800      	cmp	r0, #0
 8025336:	f43f ae6b 	beq.w	8025010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802533a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802533e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025342:	9108      	str	r1, [sp, #32]
 8025344:	0e09      	lsrs	r1, r1, #24
 8025346:	9110      	str	r1, [sp, #64]	; 0x40
 8025348:	e662      	b.n	8025010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802534a:	f113 0801 	adds.w	r8, r3, #1
 802534e:	f53f af74 	bmi.w	802523a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025352:	4541      	cmp	r1, r8
 8025354:	f6ff af71 	blt.w	802523a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025358:	f11c 0801 	adds.w	r8, ip, #1
 802535c:	f53f af6d 	bmi.w	802523a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025360:	45c6      	cmp	lr, r8
 8025362:	f6ff af6a 	blt.w	802523a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025366:	b209      	sxth	r1, r1
 8025368:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802536c:	fa0f f38e 	sxth.w	r3, lr
 8025370:	9100      	str	r1, [sp, #0]
 8025372:	4639      	mov	r1, r7
 8025374:	9301      	str	r3, [sp, #4]
 8025376:	4633      	mov	r3, r6
 8025378:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802537c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802537e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025380:	f7ff fc7b 	bl	8024c7a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025384:	e759      	b.n	802523a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025386:	bf00      	nop
 8025388:	fffff800 	.word	0xfffff800
 802538c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802538e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025392:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8025394:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025398:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802539a:	1427      	asrs	r7, r4, #16
 802539c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802539e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80253a2:	142b      	asrs	r3, r5, #16
 80253a4:	fb01 7303 	mla	r3, r1, r3, r7
 80253a8:	18e7      	adds	r7, r4, r3
 80253aa:	5ce3      	ldrb	r3, [r4, r3]
 80253ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80253b0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80253b4:	2a00      	cmp	r2, #0
 80253b6:	f000 8127 	beq.w	8025608 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80253ba:	f897 e001 	ldrb.w	lr, [r7, #1]
 80253be:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80253c2:	940d      	str	r4, [sp, #52]	; 0x34
 80253c4:	0e24      	lsrs	r4, r4, #24
 80253c6:	9414      	str	r4, [sp, #80]	; 0x50
 80253c8:	b170      	cbz	r0, 80253e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80253ca:	eb07 0e01 	add.w	lr, r7, r1
 80253ce:	5c79      	ldrb	r1, [r7, r1]
 80253d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253d4:	9109      	str	r1, [sp, #36]	; 0x24
 80253d6:	0e09      	lsrs	r1, r1, #24
 80253d8:	9111      	str	r1, [sp, #68]	; 0x44
 80253da:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80253de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253e2:	910e      	str	r1, [sp, #56]	; 0x38
 80253e4:	0e09      	lsrs	r1, r1, #24
 80253e6:	9115      	str	r1, [sp, #84]	; 0x54
 80253e8:	b292      	uxth	r2, r2
 80253ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80253ec:	b280      	uxth	r0, r0
 80253ee:	fb02 f800 	mul.w	r8, r2, r0
 80253f2:	0112      	lsls	r2, r2, #4
 80253f4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80253f8:	eba2 0e08 	sub.w	lr, r2, r8
 80253fc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025402:	b280      	uxth	r0, r0
 8025404:	fa1f fe8e 	uxth.w	lr, lr
 8025408:	1a09      	subs	r1, r1, r0
 802540a:	fb0e f202 	mul.w	r2, lr, r2
 802540e:	b289      	uxth	r1, r1
 8025410:	fb01 220c 	mla	r2, r1, ip, r2
 8025414:	fb00 2204 	mla	r2, r0, r4, r2
 8025418:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802541a:	fb08 2204 	mla	r2, r8, r4, r2
 802541e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025422:	2a00      	cmp	r2, #0
 8025424:	f000 80e5 	beq.w	80255f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8025428:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802542c:	d019      	beq.n	8025462 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802542e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025432:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025436:	fb0c fa0a 	mul.w	sl, ip, sl
 802543a:	fb0c fc03 	mul.w	ip, ip, r3
 802543e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025442:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025446:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802544a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802544e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025452:	4453      	add	r3, sl
 8025454:	0a3f      	lsrs	r7, r7, #8
 8025456:	0a1b      	lsrs	r3, r3, #8
 8025458:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802545c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025460:	433b      	orrs	r3, r7
 8025462:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025464:	2cff      	cmp	r4, #255	; 0xff
 8025466:	d020      	beq.n	80254aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8025468:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802546a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802546e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025470:	4367      	muls	r7, r4
 8025472:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025474:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025478:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802547c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802547e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025482:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025486:	fb04 fa0a 	mul.w	sl, r4, sl
 802548a:	44bc      	add	ip, r7
 802548c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025490:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025494:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025498:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802549c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80254a4:	ea4c 040a 	orr.w	r4, ip, sl
 80254a8:	940d      	str	r4, [sp, #52]	; 0x34
 80254aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80254ac:	2cff      	cmp	r4, #255	; 0xff
 80254ae:	d020      	beq.n	80254f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80254b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80254b2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80254b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80254b8:	4367      	muls	r7, r4
 80254ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80254bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80254c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80254c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80254c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80254ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80254ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80254d2:	44bc      	add	ip, r7
 80254d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80254d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80254e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80254e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80254ec:	ea4c 040a 	orr.w	r4, ip, sl
 80254f0:	9409      	str	r4, [sp, #36]	; 0x24
 80254f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80254f4:	2cff      	cmp	r4, #255	; 0xff
 80254f6:	d020      	beq.n	802553a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80254f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80254fa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80254fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025500:	4367      	muls	r7, r4
 8025502:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025504:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025508:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802550c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802550e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025512:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025516:	fb04 fa0a 	mul.w	sl, r4, sl
 802551a:	44bc      	add	ip, r7
 802551c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025520:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025524:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025528:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802552c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025530:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025534:	ea4c 040a 	orr.w	r4, ip, sl
 8025538:	940e      	str	r4, [sp, #56]	; 0x38
 802553a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802553c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025540:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025544:	43d2      	mvns	r2, r2
 8025546:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802554a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802554c:	b2d2      	uxtb	r2, r2
 802554e:	fb0e f707 	mul.w	r7, lr, r7
 8025552:	fb01 770c 	mla	r7, r1, ip, r7
 8025556:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802555a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802555c:	fb00 770c 	mla	r7, r0, ip, r7
 8025560:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025564:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025566:	fb08 770c 	mla	r7, r8, ip, r7
 802556a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802556e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025572:	0a3f      	lsrs	r7, r7, #8
 8025574:	fb01 e303 	mla	r3, r1, r3, lr
 8025578:	9909      	ldr	r1, [sp, #36]	; 0x24
 802557a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802557e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025582:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025584:	fb00 330a 	mla	r3, r0, sl, r3
 8025588:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802558c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025590:	f8b9 3000 	ldrh.w	r3, [r9]
 8025594:	1218      	asrs	r0, r3, #8
 8025596:	10d9      	asrs	r1, r3, #3
 8025598:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802559c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80255a0:	00db      	lsls	r3, r3, #3
 80255a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80255a6:	4350      	muls	r0, r2
 80255a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80255ac:	b2db      	uxtb	r3, r3
 80255ae:	4351      	muls	r1, r2
 80255b0:	ea47 070c 	orr.w	r7, r7, ip
 80255b4:	4353      	muls	r3, r2
 80255b6:	1c42      	adds	r2, r0, #1
 80255b8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80255bc:	0c3a      	lsrs	r2, r7, #16
 80255be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80255c2:	4a18      	ldr	r2, [pc, #96]	; (8025624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80255c4:	b2c0      	uxtb	r0, r0
 80255c6:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80255ca:	1c4a      	adds	r2, r1, #1
 80255cc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80255d0:	0a3a      	lsrs	r2, r7, #8
 80255d2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80255d6:	00c9      	lsls	r1, r1, #3
 80255d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80255dc:	4301      	orrs	r1, r0
 80255de:	1c58      	adds	r0, r3, #1
 80255e0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80255e4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80255e8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80255ec:	4308      	orrs	r0, r1
 80255ee:	f8a9 0000 	strh.w	r0, [r9]
 80255f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80255f4:	f109 0902 	add.w	r9, r9, #2
 80255f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80255fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80255fe:	441a      	add	r2, r3
 8025600:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025602:	9225      	str	r2, [sp, #148]	; 0x94
 8025604:	441d      	add	r5, r3
 8025606:	e64c      	b.n	80252a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025608:	2800      	cmp	r0, #0
 802560a:	f43f aeed 	beq.w	80253e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802560e:	5c79      	ldrb	r1, [r7, r1]
 8025610:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025614:	9109      	str	r1, [sp, #36]	; 0x24
 8025616:	0e09      	lsrs	r1, r1, #24
 8025618:	9111      	str	r1, [sp, #68]	; 0x44
 802561a:	e6e5      	b.n	80253e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802561c:	b01b      	add	sp, #108	; 0x6c
 802561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025622:	bf00      	nop
 8025624:	fffff800 	.word	0xfffff800

08025628 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8025628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802562c:	b085      	sub	sp, #20
 802562e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8025632:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025636:	2800      	cmp	r0, #0
 8025638:	9103      	str	r1, [sp, #12]
 802563a:	fb00 7406 	mla	r4, r0, r6, r7
 802563e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8025642:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8025646:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 802564a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802564e:	eb03 0904 	add.w	r9, r3, r4
 8025652:	9501      	str	r5, [sp, #4]
 8025654:	f2c0 8150 	blt.w	80258f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8025658:	4583      	cmp	fp, r0
 802565a:	f340 814d 	ble.w	80258f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802565e:	2f00      	cmp	r7, #0
 8025660:	f2c0 8146 	blt.w	80258f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8025664:	42be      	cmp	r6, r7
 8025666:	f340 8143 	ble.w	80258f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802566a:	f813 c004 	ldrb.w	ip, [r3, r4]
 802566e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8025672:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8025676:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802567a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802567e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025682:	4355      	muls	r5, r2
 8025684:	fb0c f203 	mul.w	r2, ip, r3
 8025688:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802568c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8025690:	441d      	add	r5, r3
 8025692:	f102 0320 	add.w	r3, r2, #32
 8025696:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802569a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802569e:	0a1b      	lsrs	r3, r3, #8
 80256a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80256a4:	431c      	orrs	r4, r3
 80256a6:	1c7b      	adds	r3, r7, #1
 80256a8:	f100 812b 	bmi.w	8025902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80256ac:	429e      	cmp	r6, r3
 80256ae:	f340 8128 	ble.w	8025902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80256b2:	2900      	cmp	r1, #0
 80256b4:	f000 8128 	beq.w	8025908 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80256b8:	9a01      	ldr	r2, [sp, #4]
 80256ba:	f899 3001 	ldrb.w	r3, [r9, #1]
 80256be:	8855      	ldrh	r5, [r2, #2]
 80256c0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80256c4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80256c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80256cc:	fb08 f802 	mul.w	r8, r8, r2
 80256d0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80256d4:	435d      	muls	r5, r3
 80256d6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80256da:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80256de:	44d0      	add	r8, sl
 80256e0:	f105 0a20 	add.w	sl, r5, #32
 80256e4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80256e8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80256ec:	0a2d      	lsrs	r5, r5, #8
 80256ee:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80256f2:	432a      	orrs	r2, r5
 80256f4:	3001      	adds	r0, #1
 80256f6:	f100 810d 	bmi.w	8025914 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80256fa:	4583      	cmp	fp, r0
 80256fc:	f340 810a 	ble.w	8025914 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8025700:	f1be 0f00 	cmp.w	lr, #0
 8025704:	f000 810b 	beq.w	802591e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8025708:	2f00      	cmp	r7, #0
 802570a:	f2c0 8100 	blt.w	802590e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802570e:	42be      	cmp	r6, r7
 8025710:	f340 80fd 	ble.w	802590e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8025714:	9801      	ldr	r0, [sp, #4]
 8025716:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802571a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802571e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8025722:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8025726:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802572a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802572e:	fb0a fa00 	mul.w	sl, sl, r0
 8025732:	fb05 f808 	mul.w	r8, r5, r8
 8025736:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802573a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802573e:	4482      	add	sl, r0
 8025740:	f108 0020 	add.w	r0, r8, #32
 8025744:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025748:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802574c:	0a00      	lsrs	r0, r0, #8
 802574e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025752:	ea4b 0b00 	orr.w	fp, fp, r0
 8025756:	3701      	adds	r7, #1
 8025758:	f100 80e6 	bmi.w	8025928 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802575c:	42be      	cmp	r6, r7
 802575e:	f340 80e3 	ble.w	8025928 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8025762:	2900      	cmp	r1, #0
 8025764:	f000 80e3 	beq.w	802592e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8025768:	3601      	adds	r6, #1
 802576a:	9801      	ldr	r0, [sp, #4]
 802576c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025770:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025774:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025778:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802577c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025780:	fb09 f906 	mul.w	r9, r9, r6
 8025784:	fb07 f800 	mul.w	r8, r7, r0
 8025788:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802578c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8025790:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8025794:	44d1      	add	r9, sl
 8025796:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802579a:	f108 0020 	add.w	r0, r8, #32
 802579e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80257a2:	0a00      	lsrs	r0, r0, #8
 80257a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80257a8:	4330      	orrs	r0, r6
 80257aa:	b28e      	uxth	r6, r1
 80257ac:	fa1f f98e 	uxth.w	r9, lr
 80257b0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80257b4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80257b8:	fb06 f809 	mul.w	r8, r6, r9
 80257bc:	0136      	lsls	r6, r6, #4
 80257be:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80257c2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80257c6:	9601      	str	r6, [sp, #4]
 80257c8:	ea4a 0404 	orr.w	r4, sl, r4
 80257cc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80257d0:	fa1f f689 	uxth.w	r6, r9
 80257d4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80257d8:	fb11 f90e 	smulbb	r9, r1, lr
 80257dc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80257e0:	9602      	str	r6, [sp, #8]
 80257e2:	4626      	mov	r6, r4
 80257e4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80257e8:	f1ce 0410 	rsb	r4, lr, #16
 80257ec:	ea4a 0202 	orr.w	r2, sl, r2
 80257f0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80257f4:	1a64      	subs	r4, r4, r1
 80257f6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80257fa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80257fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025802:	434a      	muls	r2, r1
 8025804:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8025808:	ea4a 0000 	orr.w	r0, sl, r0
 802580c:	9903      	ldr	r1, [sp, #12]
 802580e:	fb04 2406 	mla	r4, r4, r6, r2
 8025812:	9e02      	ldr	r6, [sp, #8]
 8025814:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025818:	fb09 4200 	mla	r2, r9, r0, r4
 802581c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8025820:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025824:	8808      	ldrh	r0, [r1, #0]
 8025826:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802582a:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 802582e:	ea44 0b0b 	orr.w	fp, r4, fp
 8025832:	9c01      	ldr	r4, [sp, #4]
 8025834:	b289      	uxth	r1, r1
 8025836:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 802583a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802583e:	1ba4      	subs	r4, r4, r6
 8025840:	9e01      	ldr	r6, [sp, #4]
 8025842:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025846:	eba6 0608 	sub.w	r6, r6, r8
 802584a:	b2a4      	uxth	r4, r4
 802584c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025850:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025854:	b2b6      	uxth	r6, r6
 8025856:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802585a:	4373      	muls	r3, r6
 802585c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025860:	fb0c 3304 	mla	r3, ip, r4, r3
 8025864:	9c02      	ldr	r4, [sp, #8]
 8025866:	fa1f f28e 	uxth.w	r2, lr
 802586a:	fb04 3505 	mla	r5, r4, r5, r3
 802586e:	10d4      	asrs	r4, r2, #3
 8025870:	fb08 5707 	mla	r7, r8, r7, r5
 8025874:	1215      	asrs	r5, r2, #8
 8025876:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802587a:	00d2      	lsls	r2, r2, #3
 802587c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025880:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025884:	b2d2      	uxtb	r2, r2
 8025886:	434f      	muls	r7, r1
 8025888:	1c7b      	adds	r3, r7, #1
 802588a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802588e:	1203      	asrs	r3, r0, #8
 8025890:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025894:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025898:	b2ff      	uxtb	r7, r7
 802589a:	fb13 f307 	smulbb	r3, r3, r7
 802589e:	fb05 3501 	mla	r5, r5, r1, r3
 80258a2:	10c3      	asrs	r3, r0, #3
 80258a4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80258a8:	b2ad      	uxth	r5, r5
 80258aa:	fb13 f307 	smulbb	r3, r3, r7
 80258ae:	fb04 3401 	mla	r4, r4, r1, r3
 80258b2:	00c3      	lsls	r3, r0, #3
 80258b4:	b2db      	uxtb	r3, r3
 80258b6:	b2a4      	uxth	r4, r4
 80258b8:	fb13 f307 	smulbb	r3, r3, r7
 80258bc:	fb02 3101 	mla	r1, r2, r1, r3
 80258c0:	1c6b      	adds	r3, r5, #1
 80258c2:	1c62      	adds	r2, r4, #1
 80258c4:	b289      	uxth	r1, r1
 80258c6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80258ca:	1c4b      	adds	r3, r1, #1
 80258cc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80258d0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80258d4:	9a03      	ldr	r2, [sp, #12]
 80258d6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80258da:	0964      	lsrs	r4, r4, #5
 80258dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80258e0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80258e4:	432b      	orrs	r3, r5
 80258e6:	4323      	orrs	r3, r4
 80258e8:	8013      	strh	r3, [r2, #0]
 80258ea:	b005      	add	sp, #20
 80258ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258f0:	f04f 0c00 	mov.w	ip, #0
 80258f4:	4664      	mov	r4, ip
 80258f6:	e6d6      	b.n	80256a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80258f8:	2300      	movs	r3, #0
 80258fa:	469c      	mov	ip, r3
 80258fc:	461a      	mov	r2, r3
 80258fe:	461c      	mov	r4, r3
 8025900:	e6f8      	b.n	80256f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8025902:	2300      	movs	r3, #0
 8025904:	461a      	mov	r2, r3
 8025906:	e6f5      	b.n	80256f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8025908:	460b      	mov	r3, r1
 802590a:	460a      	mov	r2, r1
 802590c:	e6f2      	b.n	80256f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802590e:	2500      	movs	r5, #0
 8025910:	46ab      	mov	fp, r5
 8025912:	e720      	b.n	8025756 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8025914:	2700      	movs	r7, #0
 8025916:	463d      	mov	r5, r7
 8025918:	4638      	mov	r0, r7
 802591a:	46bb      	mov	fp, r7
 802591c:	e745      	b.n	80257aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802591e:	4677      	mov	r7, lr
 8025920:	4675      	mov	r5, lr
 8025922:	4670      	mov	r0, lr
 8025924:	46f3      	mov	fp, lr
 8025926:	e740      	b.n	80257aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8025928:	2700      	movs	r7, #0
 802592a:	4638      	mov	r0, r7
 802592c:	e73d      	b.n	80257aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802592e:	460f      	mov	r7, r1
 8025930:	4608      	mov	r0, r1
 8025932:	e73a      	b.n	80257aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08025934 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025938:	b097      	sub	sp, #92	; 0x5c
 802593a:	9214      	str	r2, [sp, #80]	; 0x50
 802593c:	9308      	str	r3, [sp, #32]
 802593e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025940:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8025944:	9015      	str	r0, [sp, #84]	; 0x54
 8025946:	9312      	str	r3, [sp, #72]	; 0x48
 8025948:	6850      	ldr	r0, [r2, #4]
 802594a:	9111      	str	r1, [sp, #68]	; 0x44
 802594c:	6812      	ldr	r2, [r2, #0]
 802594e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025952:	fb00 1303 	mla	r3, r0, r3, r1
 8025956:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802595a:	9309      	str	r3, [sp, #36]	; 0x24
 802595c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802595e:	681b      	ldr	r3, [r3, #0]
 8025960:	930b      	str	r3, [sp, #44]	; 0x2c
 8025962:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025964:	685b      	ldr	r3, [r3, #4]
 8025966:	930c      	str	r3, [sp, #48]	; 0x30
 8025968:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 802596c:	930a      	str	r3, [sp, #40]	; 0x28
 802596e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025970:	2b00      	cmp	r3, #0
 8025972:	dc03      	bgt.n	802597c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025974:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025976:	2b00      	cmp	r3, #0
 8025978:	f340 83cd 	ble.w	8026116 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 802597c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802597e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025982:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025986:	1e48      	subs	r0, r1, #1
 8025988:	1e55      	subs	r5, r2, #1
 802598a:	9b08      	ldr	r3, [sp, #32]
 802598c:	2b00      	cmp	r3, #0
 802598e:	f340 81a5 	ble.w	8025cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8025992:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8025994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025996:	1436      	asrs	r6, r6, #16
 8025998:	ea4f 4323 	mov.w	r3, r3, asr #16
 802599c:	d406      	bmi.n	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802599e:	4286      	cmp	r6, r0
 80259a0:	da04      	bge.n	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	db02      	blt.n	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259a6:	42ab      	cmp	r3, r5
 80259a8:	f2c0 8199 	blt.w	8025cde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80259ac:	3601      	adds	r6, #1
 80259ae:	f100 8186 	bmi.w	8025cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80259b2:	42b1      	cmp	r1, r6
 80259b4:	f2c0 8183 	blt.w	8025cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80259b8:	3301      	adds	r3, #1
 80259ba:	f100 8180 	bmi.w	8025cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80259be:	429a      	cmp	r2, r3
 80259c0:	f2c0 817d 	blt.w	8025cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80259c4:	9b08      	ldr	r3, [sp, #32]
 80259c6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80259ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80259cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80259ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80259d0:	2b00      	cmp	r3, #0
 80259d2:	f340 81a6 	ble.w	8025d22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80259d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80259d8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80259da:	1418      	asrs	r0, r3, #16
 80259dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80259de:	142d      	asrs	r5, r5, #16
 80259e0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80259e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80259e6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80259ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80259ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80259f0:	f100 81fa 	bmi.w	8025de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80259f4:	f102 3eff 	add.w	lr, r2, #4294967295
 80259f8:	4575      	cmp	r5, lr
 80259fa:	f280 81f5 	bge.w	8025de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80259fe:	2800      	cmp	r0, #0
 8025a00:	f2c0 81f2 	blt.w	8025de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025a04:	f103 3eff 	add.w	lr, r3, #4294967295
 8025a08:	4570      	cmp	r0, lr
 8025a0a:	f280 81ed 	bge.w	8025de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025a0e:	b212      	sxth	r2, r2
 8025a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025a12:	fa1f fe81 	uxth.w	lr, r1
 8025a16:	fb00 5002 	mla	r0, r0, r2, r5
 8025a1a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025a1e:	eb03 0a00 	add.w	sl, r3, r0
 8025a22:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025a26:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025a2a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025a2e:	b29b      	uxth	r3, r3
 8025a30:	f1bc 0f00 	cmp.w	ip, #0
 8025a34:	f000 81bb 	beq.w	8025dae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8025a38:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025a3c:	eb0a 0b02 	add.w	fp, sl, r2
 8025a40:	fa1f fa8c 	uxth.w	sl, ip
 8025a44:	940d      	str	r4, [sp, #52]	; 0x34
 8025a46:	fb0a fe0e 	mul.w	lr, sl, lr
 8025a4a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025a4e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025a52:	eba5 050e 	sub.w	r5, r5, lr
 8025a56:	940e      	str	r4, [sp, #56]	; 0x38
 8025a58:	fa1f fa8a 	uxth.w	sl, sl
 8025a5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a5e:	b2ad      	uxth	r5, r5
 8025a60:	eba3 030a 	sub.w	r3, r3, sl
 8025a64:	fb08 f505 	mul.w	r5, r8, r5
 8025a68:	b29b      	uxth	r3, r3
 8025a6a:	fb09 5303 	mla	r3, r9, r3, r5
 8025a6e:	fb0a 3304 	mla	r3, sl, r4, r3
 8025a72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a74:	fb0e 3304 	mla	r3, lr, r4, r3
 8025a78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025a7c:	2b00      	cmp	r3, #0
 8025a7e:	f000 8111 	beq.w	8025ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025a82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025a84:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025a88:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025a8c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025a90:	f000 8192 	beq.w	8025db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8025a94:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025a98:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025a9c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025aa0:	fb0a fe0e 	mul.w	lr, sl, lr
 8025aa4:	fb09 f000 	mul.w	r0, r9, r0
 8025aa8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025aac:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025ab0:	f100 0b20 	add.w	fp, r0, #32
 8025ab4:	44ce      	add	lr, r9
 8025ab6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025aba:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025abe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ac2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025ac6:	ea4e 0909 	orr.w	r9, lr, r9
 8025aca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025ace:	8868      	ldrh	r0, [r5, #2]
 8025ad0:	d019      	beq.n	8025b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ad2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025ad6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025ada:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ade:	fb0a fe0e 	mul.w	lr, sl, lr
 8025ae2:	fb08 f800 	mul.w	r8, r8, r0
 8025ae6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025aea:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025aee:	f108 0b20 	add.w	fp, r8, #32
 8025af2:	4486      	add	lr, r0
 8025af4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025af8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025afc:	0a00      	lsrs	r0, r0, #8
 8025afe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025b02:	ea4e 0000 	orr.w	r0, lr, r0
 8025b06:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025b0a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025b0e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025b12:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025b16:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025b1a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025b1e:	ea4e 0909 	orr.w	r9, lr, r9
 8025b22:	ea4a 0000 	orr.w	r0, sl, r0
 8025b26:	f1bc 0f00 	cmp.w	ip, #0
 8025b2a:	f000 8147 	beq.w	8025dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025b2e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025b32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025b34:	3a01      	subs	r2, #1
 8025b36:	2cff      	cmp	r4, #255	; 0xff
 8025b38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025b3c:	f102 0202 	add.w	r2, r2, #2
 8025b40:	eb05 0e02 	add.w	lr, r5, r2
 8025b44:	5aaa      	ldrh	r2, [r5, r2]
 8025b46:	d018      	beq.n	8025b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025b48:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025b4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b50:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025b54:	fb04 fa02 	mul.w	sl, r4, r2
 8025b58:	fb08 f805 	mul.w	r8, r8, r5
 8025b5c:	f10a 0520 	add.w	r5, sl, #32
 8025b60:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025b64:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025b68:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025b6c:	4442      	add	r2, r8
 8025b6e:	0a2d      	lsrs	r5, r5, #8
 8025b70:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025b74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025b78:	432a      	orrs	r2, r5
 8025b7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025b7c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025b80:	2cff      	cmp	r4, #255	; 0xff
 8025b82:	d01a      	beq.n	8025bba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8025b84:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025b88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025b8c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025b90:	fb04 fa05 	mul.w	sl, r4, r5
 8025b94:	fb08 f80e 	mul.w	r8, r8, lr
 8025b98:	f10a 0e20 	add.w	lr, sl, #32
 8025b9c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025ba0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ba4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025ba8:	4445      	add	r5, r8
 8025baa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025bae:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025bb2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025bb6:	ea45 050e 	orr.w	r5, r5, lr
 8025bba:	fb1c fe01 	smulbb	lr, ip, r1
 8025bbe:	f1cc 0810 	rsb	r8, ip, #16
 8025bc2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025bc6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025bca:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025bce:	eba8 0801 	sub.w	r8, r8, r1
 8025bd2:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025bd6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025bda:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025bde:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025be2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025be6:	ea4a 0202 	orr.w	r2, sl, r2
 8025bea:	4341      	muls	r1, r0
 8025bec:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025bf0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025bf4:	fb09 1108 	mla	r1, r9, r8, r1
 8025bf8:	ea4b 0505 	orr.w	r5, fp, r5
 8025bfc:	fb0c 1102 	mla	r1, ip, r2, r1
 8025c00:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025c04:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025c08:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025c0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025c10:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025c14:	ea42 0e0e 	orr.w	lr, r2, lr
 8025c18:	fa1f f28e 	uxth.w	r2, lr
 8025c1c:	2bff      	cmp	r3, #255	; 0xff
 8025c1e:	d103      	bne.n	8025c28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025c20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025c22:	29ff      	cmp	r1, #255	; 0xff
 8025c24:	f000 80de 	beq.w	8025de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025c28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025c2a:	1215      	asrs	r5, r2, #8
 8025c2c:	8838      	ldrh	r0, [r7, #0]
 8025c2e:	434b      	muls	r3, r1
 8025c30:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025c34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025c36:	f103 0c01 	add.w	ip, r3, #1
 8025c3a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025c3e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025c42:	fa5f fc83 	uxtb.w	ip, r3
 8025c46:	1203      	asrs	r3, r0, #8
 8025c48:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025c4c:	fb13 f30c 	smulbb	r3, r3, ip
 8025c50:	fb05 3501 	mla	r5, r5, r1, r3
 8025c54:	10c3      	asrs	r3, r0, #3
 8025c56:	10d1      	asrs	r1, r2, #3
 8025c58:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025c5c:	00d2      	lsls	r2, r2, #3
 8025c5e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025c62:	b2ad      	uxth	r5, r5
 8025c64:	fb13 f30c 	smulbb	r3, r3, ip
 8025c68:	b2d2      	uxtb	r2, r2
 8025c6a:	fb01 3104 	mla	r1, r1, r4, r3
 8025c6e:	00c3      	lsls	r3, r0, #3
 8025c70:	b2db      	uxtb	r3, r3
 8025c72:	b289      	uxth	r1, r1
 8025c74:	fb13 f30c 	smulbb	r3, r3, ip
 8025c78:	fb02 3304 	mla	r3, r2, r4, r3
 8025c7c:	b29a      	uxth	r2, r3
 8025c7e:	1c6b      	adds	r3, r5, #1
 8025c80:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025c84:	1c53      	adds	r3, r2, #1
 8025c86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025c8a:	1c4a      	adds	r2, r1, #1
 8025c8c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025c90:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025c94:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025c98:	0949      	lsrs	r1, r1, #5
 8025c9a:	432b      	orrs	r3, r5
 8025c9c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025ca0:	430b      	orrs	r3, r1
 8025ca2:	803b      	strh	r3, [r7, #0]
 8025ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025ca6:	3702      	adds	r7, #2
 8025ca8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025caa:	4413      	add	r3, r2
 8025cac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025cae:	9321      	str	r3, [sp, #132]	; 0x84
 8025cb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025cb2:	441a      	add	r2, r3
 8025cb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025cb6:	3b01      	subs	r3, #1
 8025cb8:	9222      	str	r2, [sp, #136]	; 0x88
 8025cba:	9313      	str	r3, [sp, #76]	; 0x4c
 8025cbc:	e687      	b.n	80259ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025cc0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8025cc2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8025cc4:	4433      	add	r3, r6
 8025cc6:	9321      	str	r3, [sp, #132]	; 0x84
 8025cc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025cca:	441c      	add	r4, r3
 8025ccc:	9b08      	ldr	r3, [sp, #32]
 8025cce:	3b01      	subs	r3, #1
 8025cd0:	9422      	str	r4, [sp, #136]	; 0x88
 8025cd2:	9308      	str	r3, [sp, #32]
 8025cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cd6:	3302      	adds	r3, #2
 8025cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8025cda:	e656      	b.n	802598a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025cdc:	d028      	beq.n	8025d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025cde:	9b08      	ldr	r3, [sp, #32]
 8025ce0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025ce2:	3b01      	subs	r3, #1
 8025ce4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8025ce6:	fb00 5003 	mla	r0, r0, r3, r5
 8025cea:	1400      	asrs	r0, r0, #16
 8025cec:	f53f ae6a 	bmi.w	80259c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025cf0:	3901      	subs	r1, #1
 8025cf2:	4288      	cmp	r0, r1
 8025cf4:	f6bf ae66 	bge.w	80259c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025cf8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025cfa:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025cfc:	fb01 0303 	mla	r3, r1, r3, r0
 8025d00:	141b      	asrs	r3, r3, #16
 8025d02:	f53f ae5f 	bmi.w	80259c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025d06:	3a01      	subs	r2, #1
 8025d08:	4293      	cmp	r3, r2
 8025d0a:	f6bf ae5b 	bge.w	80259c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025d0e:	9b08      	ldr	r3, [sp, #32]
 8025d10:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025d14:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025d18:	9313      	str	r3, [sp, #76]	; 0x4c
 8025d1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025d1c:	2b00      	cmp	r3, #0
 8025d1e:	f300 8082 	bgt.w	8025e26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8025d22:	9b08      	ldr	r3, [sp, #32]
 8025d24:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d2a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8025d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	f340 81ef 	ble.w	8026116 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8025d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025d3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025d42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025d46:	eef0 6a62 	vmov.f32	s13, s5
 8025d4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025d4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025d52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d56:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8025d5a:	eef0 6a43 	vmov.f32	s13, s6
 8025d5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d62:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8025d66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025d6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025d6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025d72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025d76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025d7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025d7e:	ee12 2a90 	vmov	r2, s5
 8025d82:	eef0 2a47 	vmov.f32	s5, s14
 8025d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d8a:	ee13 2a10 	vmov	r2, s6
 8025d8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8025d90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d92:	eeb0 3a67 	vmov.f32	s6, s15
 8025d96:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d9a:	9324      	str	r3, [sp, #144]	; 0x90
 8025d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025d9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025da0:	3b01      	subs	r3, #1
 8025da2:	9311      	str	r3, [sp, #68]	; 0x44
 8025da4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025da6:	bf08      	it	eq
 8025da8:	4613      	moveq	r3, r2
 8025daa:	9308      	str	r3, [sp, #32]
 8025dac:	e5df      	b.n	802596e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025dae:	fb08 f505 	mul.w	r5, r8, r5
 8025db2:	fb09 5303 	mla	r3, r9, r3, r5
 8025db6:	e65f      	b.n	8025a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025db8:	4681      	mov	r9, r0
 8025dba:	e686      	b.n	8025aca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025dbc:	f1c1 0210 	rsb	r2, r1, #16
 8025dc0:	4341      	muls	r1, r0
 8025dc2:	fb09 1902 	mla	r9, r9, r2, r1
 8025dc6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025dca:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025dce:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025dd2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025dd6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025dda:	ea42 0909 	orr.w	r9, r2, r9
 8025dde:	fa1f f289 	uxth.w	r2, r9
 8025de2:	e71b      	b.n	8025c1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8025de4:	803a      	strh	r2, [r7, #0]
 8025de6:	e75d      	b.n	8025ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025de8:	f115 0e01 	adds.w	lr, r5, #1
 8025dec:	f53f af5a 	bmi.w	8025ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025df0:	4572      	cmp	r2, lr
 8025df2:	f6ff af57 	blt.w	8025ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025df6:	f110 0e01 	adds.w	lr, r0, #1
 8025dfa:	f53f af53 	bmi.w	8025ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025dfe:	4573      	cmp	r3, lr
 8025e00:	f6ff af50 	blt.w	8025ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025e04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025e06:	b21b      	sxth	r3, r3
 8025e08:	b212      	sxth	r2, r2
 8025e0a:	9502      	str	r5, [sp, #8]
 8025e0c:	9301      	str	r3, [sp, #4]
 8025e0e:	9200      	str	r2, [sp, #0]
 8025e10:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025e14:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025e18:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025e1c:	4639      	mov	r1, r7
 8025e1e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025e20:	f7ff fc02 	bl	8025628 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025e24:	e73e      	b.n	8025ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025e28:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025e2e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025e32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e34:	fa1f fc82 	uxth.w	ip, r2
 8025e38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025e3e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025e42:	141f      	asrs	r7, r3, #16
 8025e44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025e46:	141b      	asrs	r3, r3, #16
 8025e48:	fb01 3707 	mla	r7, r1, r7, r3
 8025e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e4e:	eb03 0a07 	add.w	sl, r3, r7
 8025e52:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025e56:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025e5a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025e5e:	b29b      	uxth	r3, r3
 8025e60:	2d00      	cmp	r5, #0
 8025e62:	f000 813d 	beq.w	80260e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8025e66:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025e6a:	eb0a 0b01 	add.w	fp, sl, r1
 8025e6e:	fa1f fa85 	uxth.w	sl, r5
 8025e72:	940f      	str	r4, [sp, #60]	; 0x3c
 8025e74:	fb0a fc0c 	mul.w	ip, sl, ip
 8025e78:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025e7c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025e80:	eba0 000c 	sub.w	r0, r0, ip
 8025e84:	9410      	str	r4, [sp, #64]	; 0x40
 8025e86:	fa1f fa8a 	uxth.w	sl, sl
 8025e8a:	b280      	uxth	r0, r0
 8025e8c:	eba3 030a 	sub.w	r3, r3, sl
 8025e90:	fb08 f000 	mul.w	r0, r8, r0
 8025e94:	b29b      	uxth	r3, r3
 8025e96:	fb09 0303 	mla	r3, r9, r3, r0
 8025e9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025e9c:	fb0a 3300 	mla	r3, sl, r0, r3
 8025ea0:	fb0c 3304 	mla	r3, ip, r4, r3
 8025ea4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	f000 810b 	beq.w	80260c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8025eae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025eb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025eb4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025eb6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025eba:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025ebe:	f000 8114 	beq.w	80260ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8025ec2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025ec6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025eca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025ece:	fb0a fc0c 	mul.w	ip, sl, ip
 8025ed2:	fb09 f707 	mul.w	r7, r9, r7
 8025ed6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025eda:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025ede:	f107 0b20 	add.w	fp, r7, #32
 8025ee2:	44cc      	add	ip, r9
 8025ee4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025ee8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025eec:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ef0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025ef4:	ea4c 0909 	orr.w	r9, ip, r9
 8025ef8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025efc:	8847      	ldrh	r7, [r0, #2]
 8025efe:	d019      	beq.n	8025f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8025f00:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025f04:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025f08:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f0c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025f10:	fb08 f807 	mul.w	r8, r8, r7
 8025f14:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025f18:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025f1c:	f108 0b20 	add.w	fp, r8, #32
 8025f20:	44bc      	add	ip, r7
 8025f22:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025f26:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025f2a:	0a3f      	lsrs	r7, r7, #8
 8025f2c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f30:	ea4c 0707 	orr.w	r7, ip, r7
 8025f34:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025f38:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025f3c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025f40:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025f44:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025f48:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025f4c:	ea4c 0909 	orr.w	r9, ip, r9
 8025f50:	ea4a 0707 	orr.w	r7, sl, r7
 8025f54:	2d00      	cmp	r5, #0
 8025f56:	f000 80ca 	beq.w	80260ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8025f5a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025f5e:	3901      	subs	r1, #1
 8025f60:	0049      	lsls	r1, r1, #1
 8025f62:	3102      	adds	r1, #2
 8025f64:	eb00 0c01 	add.w	ip, r0, r1
 8025f68:	5a41      	ldrh	r1, [r0, r1]
 8025f6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025f6c:	28ff      	cmp	r0, #255	; 0xff
 8025f6e:	d019      	beq.n	8025fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8025f70:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025f74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025f76:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025f7a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f7e:	fb04 fa01 	mul.w	sl, r4, r1
 8025f82:	fb08 f800 	mul.w	r8, r8, r0
 8025f86:	f10a 0020 	add.w	r0, sl, #32
 8025f8a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025f8e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f92:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025f96:	4441      	add	r1, r8
 8025f98:	0a00      	lsrs	r0, r0, #8
 8025f9a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025f9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025fa2:	4301      	orrs	r1, r0
 8025fa4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025fa6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025faa:	2cff      	cmp	r4, #255	; 0xff
 8025fac:	d01a      	beq.n	8025fe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8025fae:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025fb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025fb6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025fba:	fb04 fa00 	mul.w	sl, r4, r0
 8025fbe:	fb08 f80c 	mul.w	r8, r8, ip
 8025fc2:	f10a 0c20 	add.w	ip, sl, #32
 8025fc6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025fca:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025fce:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025fd2:	4440      	add	r0, r8
 8025fd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025fd8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025fdc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025fe0:	ea40 000c 	orr.w	r0, r0, ip
 8025fe4:	fb15 fc02 	smulbb	ip, r5, r2
 8025fe8:	f1c5 0810 	rsb	r8, r5, #16
 8025fec:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025ff0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025ff4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025ff8:	eba8 0802 	sub.w	r8, r8, r2
 8025ffc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026000:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026004:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026008:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802600c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026010:	ea4a 0101 	orr.w	r1, sl, r1
 8026014:	437a      	muls	r2, r7
 8026016:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802601a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802601e:	fb09 2208 	mla	r2, r9, r8, r2
 8026022:	ea4b 0000 	orr.w	r0, fp, r0
 8026026:	fb05 2201 	mla	r2, r5, r1, r2
 802602a:	fb0c 2200 	mla	r2, ip, r0, r2
 802602e:	0d57      	lsrs	r7, r2, #21
 8026030:	0952      	lsrs	r2, r2, #5
 8026032:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026036:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802603a:	433a      	orrs	r2, r7
 802603c:	2bff      	cmp	r3, #255	; 0xff
 802603e:	b292      	uxth	r2, r2
 8026040:	d102      	bne.n	8026048 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8026042:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026044:	29ff      	cmp	r1, #255	; 0xff
 8026046:	d063      	beq.n	8026110 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8026048:	980a      	ldr	r0, [sp, #40]	; 0x28
 802604a:	1215      	asrs	r5, r2, #8
 802604c:	f8be 1000 	ldrh.w	r1, [lr]
 8026050:	4343      	muls	r3, r0
 8026052:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026054:	10cf      	asrs	r7, r1, #3
 8026056:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802605a:	1c58      	adds	r0, r3, #1
 802605c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026060:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026064:	1208      	asrs	r0, r1, #8
 8026066:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802606a:	00c9      	lsls	r1, r1, #3
 802606c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026070:	b2db      	uxtb	r3, r3
 8026072:	b2c9      	uxtb	r1, r1
 8026074:	fb10 f003 	smulbb	r0, r0, r3
 8026078:	fb11 f103 	smulbb	r1, r1, r3
 802607c:	fb05 0504 	mla	r5, r5, r4, r0
 8026080:	10d0      	asrs	r0, r2, #3
 8026082:	fb17 f703 	smulbb	r7, r7, r3
 8026086:	00d2      	lsls	r2, r2, #3
 8026088:	b2ad      	uxth	r5, r5
 802608a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802608e:	b2d2      	uxtb	r2, r2
 8026090:	fb00 7004 	mla	r0, r0, r4, r7
 8026094:	1c6b      	adds	r3, r5, #1
 8026096:	fb02 1204 	mla	r2, r2, r4, r1
 802609a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802609e:	b292      	uxth	r2, r2
 80260a0:	b280      	uxth	r0, r0
 80260a2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80260a6:	1c57      	adds	r7, r2, #1
 80260a8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80260ac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80260b0:	433d      	orrs	r5, r7
 80260b2:	1c47      	adds	r7, r0, #1
 80260b4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80260b8:	097f      	lsrs	r7, r7, #5
 80260ba:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80260be:	433d      	orrs	r5, r7
 80260c0:	f8ae 5000 	strh.w	r5, [lr]
 80260c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80260c6:	f10e 0e02 	add.w	lr, lr, #2
 80260ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80260cc:	4413      	add	r3, r2
 80260ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80260d0:	9321      	str	r3, [sp, #132]	; 0x84
 80260d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80260d4:	441a      	add	r2, r3
 80260d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80260d8:	3b01      	subs	r3, #1
 80260da:	9222      	str	r2, [sp, #136]	; 0x88
 80260dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80260de:	e61c      	b.n	8025d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80260e0:	fb08 f000 	mul.w	r0, r8, r0
 80260e4:	fb09 0303 	mla	r3, r9, r3, r0
 80260e8:	e6dc      	b.n	8025ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 80260ea:	46b9      	mov	r9, r7
 80260ec:	e704      	b.n	8025ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80260ee:	f1c2 0110 	rsb	r1, r2, #16
 80260f2:	437a      	muls	r2, r7
 80260f4:	fb09 2901 	mla	r9, r9, r1, r2
 80260f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80260fc:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026100:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026104:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026108:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802610c:	4302      	orrs	r2, r0
 802610e:	e795      	b.n	802603c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8026110:	f8ae 2000 	strh.w	r2, [lr]
 8026114:	e7d6      	b.n	80260c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8026116:	b017      	add	sp, #92	; 0x5c
 8026118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802611c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026120:	b085      	sub	sp, #20
 8026122:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8026126:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802612a:	2800      	cmp	r0, #0
 802612c:	9103      	str	r1, [sp, #12]
 802612e:	fb00 7406 	mla	r4, r0, r6, r7
 8026132:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8026136:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802613a:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802613e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8026142:	eb02 0904 	add.w	r9, r2, r4
 8026146:	9501      	str	r5, [sp, #4]
 8026148:	f2c0 8141 	blt.w	80263ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802614c:	4583      	cmp	fp, r0
 802614e:	f340 813e 	ble.w	80263ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8026152:	2f00      	cmp	r7, #0
 8026154:	f2c0 8137 	blt.w	80263c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8026158:	42be      	cmp	r6, r7
 802615a:	f340 8134 	ble.w	80263c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802615e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8026162:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8026166:	f64f 041f 	movw	r4, #63519	; 0xf81f
 802616a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802616e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8026172:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026176:	4355      	muls	r5, r2
 8026178:	fb0c f203 	mul.w	r2, ip, r3
 802617c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026180:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8026184:	441d      	add	r5, r3
 8026186:	f102 0320 	add.w	r3, r2, #32
 802618a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802618e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026192:	0a1b      	lsrs	r3, r3, #8
 8026194:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026198:	431c      	orrs	r4, r3
 802619a:	1c7b      	adds	r3, r7, #1
 802619c:	f100 811c 	bmi.w	80263d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80261a0:	429e      	cmp	r6, r3
 80261a2:	f340 8119 	ble.w	80263d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80261a6:	2900      	cmp	r1, #0
 80261a8:	f000 8119 	beq.w	80263de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80261ac:	9a01      	ldr	r2, [sp, #4]
 80261ae:	f899 3001 	ldrb.w	r3, [r9, #1]
 80261b2:	8855      	ldrh	r5, [r2, #2]
 80261b4:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80261b8:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80261bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80261c0:	fb08 f802 	mul.w	r8, r8, r2
 80261c4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80261c8:	435d      	muls	r5, r3
 80261ca:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80261ce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80261d2:	44d0      	add	r8, sl
 80261d4:	f105 0a20 	add.w	sl, r5, #32
 80261d8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80261dc:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80261e0:	0a2d      	lsrs	r5, r5, #8
 80261e2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80261e6:	432a      	orrs	r2, r5
 80261e8:	3001      	adds	r0, #1
 80261ea:	f100 80fe 	bmi.w	80263ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80261ee:	4583      	cmp	fp, r0
 80261f0:	f340 80fb 	ble.w	80263ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80261f4:	f1be 0f00 	cmp.w	lr, #0
 80261f8:	f000 80fc 	beq.w	80263f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80261fc:	2f00      	cmp	r7, #0
 80261fe:	f2c0 80f1 	blt.w	80263e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8026202:	42be      	cmp	r6, r7
 8026204:	f340 80ee 	ble.w	80263e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8026208:	9801      	ldr	r0, [sp, #4]
 802620a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802620e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026212:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8026216:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802621a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802621e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8026222:	fb0a fa00 	mul.w	sl, sl, r0
 8026226:	fb05 f808 	mul.w	r8, r5, r8
 802622a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802622e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8026232:	4482      	add	sl, r0
 8026234:	f108 0020 	add.w	r0, r8, #32
 8026238:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802623c:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026240:	0a00      	lsrs	r0, r0, #8
 8026242:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026246:	ea4b 0b00 	orr.w	fp, fp, r0
 802624a:	3701      	adds	r7, #1
 802624c:	f100 80d7 	bmi.w	80263fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8026250:	42be      	cmp	r6, r7
 8026252:	f340 80d4 	ble.w	80263fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8026256:	2900      	cmp	r1, #0
 8026258:	f000 80d4 	beq.w	8026404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 802625c:	3601      	adds	r6, #1
 802625e:	9801      	ldr	r0, [sp, #4]
 8026260:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026264:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026268:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802626c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8026270:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026274:	fb09 f906 	mul.w	r9, r9, r6
 8026278:	fb07 f800 	mul.w	r8, r7, r0
 802627c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8026280:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026284:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8026288:	44d1      	add	r9, sl
 802628a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802628e:	f108 0020 	add.w	r0, r8, #32
 8026292:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026296:	0a00      	lsrs	r0, r0, #8
 8026298:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802629c:	4330      	orrs	r0, r6
 802629e:	b28e      	uxth	r6, r1
 80262a0:	fa1f f98e 	uxth.w	r9, lr
 80262a4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80262a8:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80262ac:	fb06 f809 	mul.w	r8, r6, r9
 80262b0:	0136      	lsls	r6, r6, #4
 80262b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80262b6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80262ba:	9601      	str	r6, [sp, #4]
 80262bc:	ea4a 0404 	orr.w	r4, sl, r4
 80262c0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80262c4:	fa1f f689 	uxth.w	r6, r9
 80262c8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80262cc:	fb11 f90e 	smulbb	r9, r1, lr
 80262d0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80262d4:	9602      	str	r6, [sp, #8]
 80262d6:	4626      	mov	r6, r4
 80262d8:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80262dc:	f1ce 0410 	rsb	r4, lr, #16
 80262e0:	ea4a 0202 	orr.w	r2, sl, r2
 80262e4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80262e8:	1a64      	subs	r4, r4, r1
 80262ea:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80262ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80262f2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80262f6:	434a      	muls	r2, r1
 80262f8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80262fc:	ea4a 0000 	orr.w	r0, sl, r0
 8026300:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026304:	fb04 2406 	mla	r4, r4, r6, r2
 8026308:	9903      	ldr	r1, [sp, #12]
 802630a:	fb09 4200 	mla	r2, r9, r0, r4
 802630e:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8026312:	9801      	ldr	r0, [sp, #4]
 8026314:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026318:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802631c:	8809      	ldrh	r1, [r1, #0]
 802631e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8026322:	ea44 0b0b 	orr.w	fp, r4, fp
 8026326:	9c02      	ldr	r4, [sp, #8]
 8026328:	1b00      	subs	r0, r0, r4
 802632a:	9c01      	ldr	r4, [sp, #4]
 802632c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8026330:	eba4 0608 	sub.w	r6, r4, r8
 8026334:	b280      	uxth	r0, r0
 8026336:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802633a:	b2b6      	uxth	r6, r6
 802633c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026340:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026344:	4373      	muls	r3, r6
 8026346:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802634a:	fb0c 3300 	mla	r3, ip, r0, r3
 802634e:	9802      	ldr	r0, [sp, #8]
 8026350:	ea42 0e0e 	orr.w	lr, r2, lr
 8026354:	fb00 3505 	mla	r5, r0, r5, r3
 8026358:	120b      	asrs	r3, r1, #8
 802635a:	10c8      	asrs	r0, r1, #3
 802635c:	fb08 5707 	mla	r7, r8, r7, r5
 8026360:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026364:	00c9      	lsls	r1, r1, #3
 8026366:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802636a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802636e:	fa1f f28e 	uxth.w	r2, lr
 8026372:	b2c9      	uxtb	r1, r1
 8026374:	b2ff      	uxtb	r7, r7
 8026376:	437b      	muls	r3, r7
 8026378:	4378      	muls	r0, r7
 802637a:	434f      	muls	r7, r1
 802637c:	1c59      	adds	r1, r3, #1
 802637e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026382:	1213      	asrs	r3, r2, #8
 8026384:	f023 0307 	bic.w	r3, r3, #7
 8026388:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802638c:	1c41      	adds	r1, r0, #1
 802638e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026392:	10d1      	asrs	r1, r2, #3
 8026394:	021b      	lsls	r3, r3, #8
 8026396:	f021 0103 	bic.w	r1, r1, #3
 802639a:	00d2      	lsls	r2, r2, #3
 802639c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80263a0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80263a4:	00c9      	lsls	r1, r1, #3
 80263a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80263aa:	430b      	orrs	r3, r1
 80263ac:	1c79      	adds	r1, r7, #1
 80263ae:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80263b2:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80263b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80263ba:	431a      	orrs	r2, r3
 80263bc:	9b03      	ldr	r3, [sp, #12]
 80263be:	801a      	strh	r2, [r3, #0]
 80263c0:	b005      	add	sp, #20
 80263c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263c6:	f04f 0c00 	mov.w	ip, #0
 80263ca:	4664      	mov	r4, ip
 80263cc:	e6e5      	b.n	802619a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80263ce:	2300      	movs	r3, #0
 80263d0:	469c      	mov	ip, r3
 80263d2:	461a      	mov	r2, r3
 80263d4:	461c      	mov	r4, r3
 80263d6:	e707      	b.n	80261e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80263d8:	2300      	movs	r3, #0
 80263da:	461a      	mov	r2, r3
 80263dc:	e704      	b.n	80261e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80263de:	460b      	mov	r3, r1
 80263e0:	460a      	mov	r2, r1
 80263e2:	e701      	b.n	80261e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80263e4:	2500      	movs	r5, #0
 80263e6:	46ab      	mov	fp, r5
 80263e8:	e72f      	b.n	802624a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80263ea:	2700      	movs	r7, #0
 80263ec:	463d      	mov	r5, r7
 80263ee:	4638      	mov	r0, r7
 80263f0:	46bb      	mov	fp, r7
 80263f2:	e754      	b.n	802629e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80263f4:	4677      	mov	r7, lr
 80263f6:	4675      	mov	r5, lr
 80263f8:	4670      	mov	r0, lr
 80263fa:	46f3      	mov	fp, lr
 80263fc:	e74f      	b.n	802629e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80263fe:	2700      	movs	r7, #0
 8026400:	4638      	mov	r0, r7
 8026402:	e74c      	b.n	802629e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8026404:	460f      	mov	r7, r1
 8026406:	4608      	mov	r0, r1
 8026408:	e749      	b.n	802629e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0802640c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026410:	b093      	sub	sp, #76	; 0x4c
 8026412:	9210      	str	r2, [sp, #64]	; 0x40
 8026414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026416:	9011      	str	r0, [sp, #68]	; 0x44
 8026418:	910e      	str	r1, [sp, #56]	; 0x38
 802641a:	6850      	ldr	r0, [r2, #4]
 802641c:	9306      	str	r3, [sp, #24]
 802641e:	6812      	ldr	r2, [r2, #0]
 8026420:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8026424:	fb00 1303 	mla	r3, r0, r3, r1
 8026428:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802642c:	9307      	str	r3, [sp, #28]
 802642e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026430:	681b      	ldr	r3, [r3, #0]
 8026432:	9308      	str	r3, [sp, #32]
 8026434:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026436:	685b      	ldr	r3, [r3, #4]
 8026438:	9309      	str	r3, [sp, #36]	; 0x24
 802643a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802643c:	2b00      	cmp	r3, #0
 802643e:	dc03      	bgt.n	8026448 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026442:	2b00      	cmp	r3, #0
 8026444:	f340 83b6 	ble.w	8026bb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8026448:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802644a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802644e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026452:	1e48      	subs	r0, r1, #1
 8026454:	1e55      	subs	r5, r2, #1
 8026456:	9b06      	ldr	r3, [sp, #24]
 8026458:	2b00      	cmp	r3, #0
 802645a:	f340 8165 	ble.w	8026728 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802645e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8026460:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026462:	1436      	asrs	r6, r6, #16
 8026464:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026468:	d406      	bmi.n	8026478 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802646a:	4286      	cmp	r6, r0
 802646c:	da04      	bge.n	8026478 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802646e:	2b00      	cmp	r3, #0
 8026470:	db02      	blt.n	8026478 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026472:	42ab      	cmp	r3, r5
 8026474:	f2c0 8159 	blt.w	802672a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026478:	3601      	adds	r6, #1
 802647a:	f100 8146 	bmi.w	802670a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802647e:	42b1      	cmp	r1, r6
 8026480:	f2c0 8143 	blt.w	802670a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026484:	3301      	adds	r3, #1
 8026486:	f100 8140 	bmi.w	802670a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802648a:	429a      	cmp	r2, r3
 802648c:	f2c0 813d 	blt.w	802670a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026490:	9b06      	ldr	r3, [sp, #24]
 8026492:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026496:	9f07      	ldr	r7, [sp, #28]
 8026498:	930f      	str	r3, [sp, #60]	; 0x3c
 802649a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802649c:	2b00      	cmp	r3, #0
 802649e:	f340 8166 	ble.w	802676e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80264a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80264a4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80264a6:	1418      	asrs	r0, r3, #16
 80264a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80264aa:	142d      	asrs	r5, r5, #16
 80264ac:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80264b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80264b2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80264b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80264b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80264bc:	f100 81f0 	bmi.w	80268a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80264c0:	f102 3eff 	add.w	lr, r2, #4294967295
 80264c4:	4575      	cmp	r5, lr
 80264c6:	f280 81eb 	bge.w	80268a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80264ca:	2800      	cmp	r0, #0
 80264cc:	f2c0 81e8 	blt.w	80268a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80264d0:	f103 3eff 	add.w	lr, r3, #4294967295
 80264d4:	4570      	cmp	r0, lr
 80264d6:	f280 81e3 	bge.w	80268a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80264da:	b212      	sxth	r2, r2
 80264dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264de:	fa1f fe81 	uxth.w	lr, r1
 80264e2:	fb00 5002 	mla	r0, r0, r2, r5
 80264e6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80264ea:	eb03 0a00 	add.w	sl, r3, r0
 80264ee:	f813 9000 	ldrb.w	r9, [r3, r0]
 80264f2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80264f6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80264fa:	b29b      	uxth	r3, r3
 80264fc:	f1bc 0f00 	cmp.w	ip, #0
 8026500:	f000 817b 	beq.w	80267fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026504:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026508:	eb0a 0b02 	add.w	fp, sl, r2
 802650c:	fa1f fa8c 	uxth.w	sl, ip
 8026510:	940a      	str	r4, [sp, #40]	; 0x28
 8026512:	fb0a fe0e 	mul.w	lr, sl, lr
 8026516:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802651a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802651e:	eba5 050e 	sub.w	r5, r5, lr
 8026522:	940b      	str	r4, [sp, #44]	; 0x2c
 8026524:	fa1f fa8a 	uxth.w	sl, sl
 8026528:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802652a:	b2ad      	uxth	r5, r5
 802652c:	eba3 030a 	sub.w	r3, r3, sl
 8026530:	fb08 f505 	mul.w	r5, r8, r5
 8026534:	b29b      	uxth	r3, r3
 8026536:	fb09 5303 	mla	r3, r9, r3, r5
 802653a:	fb0a 3304 	mla	r3, sl, r4, r3
 802653e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026540:	fb0e 3304 	mla	r3, lr, r4, r3
 8026544:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026548:	2b00      	cmp	r3, #0
 802654a:	f000 80d1 	beq.w	80266f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802654e:	9c08      	ldr	r4, [sp, #32]
 8026550:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026554:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026558:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802655c:	f000 8152 	beq.w	8026804 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026560:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026564:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026568:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802656c:	fb0a fe0e 	mul.w	lr, sl, lr
 8026570:	fb09 f000 	mul.w	r0, r9, r0
 8026574:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026578:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802657c:	f100 0b20 	add.w	fp, r0, #32
 8026580:	44ce      	add	lr, r9
 8026582:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026586:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802658a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802658e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026592:	ea4e 0909 	orr.w	r9, lr, r9
 8026596:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802659a:	8868      	ldrh	r0, [r5, #2]
 802659c:	d019      	beq.n	80265d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802659e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80265a2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80265a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265aa:	fb0a fe0e 	mul.w	lr, sl, lr
 80265ae:	fb08 f800 	mul.w	r8, r8, r0
 80265b2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80265b6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80265ba:	f108 0b20 	add.w	fp, r8, #32
 80265be:	4486      	add	lr, r0
 80265c0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80265c4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80265c8:	0a00      	lsrs	r0, r0, #8
 80265ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265ce:	ea4e 0000 	orr.w	r0, lr, r0
 80265d2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80265d6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80265da:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80265de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80265e2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80265e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80265ea:	ea4e 0909 	orr.w	r9, lr, r9
 80265ee:	ea4a 0000 	orr.w	r0, sl, r0
 80265f2:	f1bc 0f00 	cmp.w	ip, #0
 80265f6:	f000 8107 	beq.w	8026808 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80265fa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80265fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026600:	3a01      	subs	r2, #1
 8026602:	2cff      	cmp	r4, #255	; 0xff
 8026604:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026608:	f102 0202 	add.w	r2, r2, #2
 802660c:	eb05 0e02 	add.w	lr, r5, r2
 8026610:	5aaa      	ldrh	r2, [r5, r2]
 8026612:	d018      	beq.n	8026646 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8026614:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026618:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802661c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026620:	fb04 fa02 	mul.w	sl, r4, r2
 8026624:	fb08 f805 	mul.w	r8, r8, r5
 8026628:	f10a 0520 	add.w	r5, sl, #32
 802662c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026630:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026634:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026638:	4442      	add	r2, r8
 802663a:	0a2d      	lsrs	r5, r5, #8
 802663c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026640:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026644:	432a      	orrs	r2, r5
 8026646:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026648:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802664c:	2cff      	cmp	r4, #255	; 0xff
 802664e:	d01a      	beq.n	8026686 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8026650:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026654:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026658:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802665c:	fb04 fa05 	mul.w	sl, r4, r5
 8026660:	fb08 f80e 	mul.w	r8, r8, lr
 8026664:	f10a 0e20 	add.w	lr, sl, #32
 8026668:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802666c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026670:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026674:	4445      	add	r5, r8
 8026676:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802667a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802667e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026682:	ea45 050e 	orr.w	r5, r5, lr
 8026686:	fb1c fe01 	smulbb	lr, ip, r1
 802668a:	f1cc 0810 	rsb	r8, ip, #16
 802668e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026692:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026696:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802669a:	eba8 0801 	sub.w	r8, r8, r1
 802669e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80266a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80266a6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80266aa:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80266ae:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80266b2:	ea4a 0202 	orr.w	r2, sl, r2
 80266b6:	4341      	muls	r1, r0
 80266b8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80266bc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80266c0:	fb09 1108 	mla	r1, r9, r8, r1
 80266c4:	ea4b 0505 	orr.w	r5, fp, r5
 80266c8:	fb0c 1102 	mla	r1, ip, r2, r1
 80266cc:	fb0e 1e05 	mla	lr, lr, r5, r1
 80266d0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80266d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80266d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80266dc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80266e0:	ea42 0e0e 	orr.w	lr, r2, lr
 80266e4:	fa1f f28e 	uxth.w	r2, lr
 80266e8:	2bff      	cmp	r3, #255	; 0xff
 80266ea:	f040 80a1 	bne.w	8026830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80266ee:	803a      	strh	r2, [r7, #0]
 80266f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80266f2:	3702      	adds	r7, #2
 80266f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80266f6:	4413      	add	r3, r2
 80266f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80266fa:	931d      	str	r3, [sp, #116]	; 0x74
 80266fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80266fe:	441a      	add	r2, r3
 8026700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026702:	3b01      	subs	r3, #1
 8026704:	921e      	str	r2, [sp, #120]	; 0x78
 8026706:	930f      	str	r3, [sp, #60]	; 0x3c
 8026708:	e6c7      	b.n	802649a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802670a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802670c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802670e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8026710:	4433      	add	r3, r6
 8026712:	931d      	str	r3, [sp, #116]	; 0x74
 8026714:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026716:	441c      	add	r4, r3
 8026718:	9b06      	ldr	r3, [sp, #24]
 802671a:	3b01      	subs	r3, #1
 802671c:	941e      	str	r4, [sp, #120]	; 0x78
 802671e:	9306      	str	r3, [sp, #24]
 8026720:	9b07      	ldr	r3, [sp, #28]
 8026722:	3302      	adds	r3, #2
 8026724:	9307      	str	r3, [sp, #28]
 8026726:	e696      	b.n	8026456 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026728:	d028      	beq.n	802677c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802672a:	9b06      	ldr	r3, [sp, #24]
 802672c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802672e:	3b01      	subs	r3, #1
 8026730:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8026732:	fb00 5003 	mla	r0, r0, r3, r5
 8026736:	1400      	asrs	r0, r0, #16
 8026738:	f53f aeaa 	bmi.w	8026490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802673c:	3901      	subs	r1, #1
 802673e:	4288      	cmp	r0, r1
 8026740:	f6bf aea6 	bge.w	8026490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026744:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026746:	981e      	ldr	r0, [sp, #120]	; 0x78
 8026748:	fb01 0303 	mla	r3, r1, r3, r0
 802674c:	141b      	asrs	r3, r3, #16
 802674e:	f53f ae9f 	bmi.w	8026490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026752:	3a01      	subs	r2, #1
 8026754:	4293      	cmp	r3, r2
 8026756:	f6bf ae9b 	bge.w	8026490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802675a:	9b06      	ldr	r3, [sp, #24]
 802675c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026760:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026764:	930f      	str	r3, [sp, #60]	; 0x3c
 8026766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026768:	2b00      	cmp	r3, #0
 802676a:	f300 80b6 	bgt.w	80268da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802676e:	9b06      	ldr	r3, [sp, #24]
 8026770:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026774:	9b07      	ldr	r3, [sp, #28]
 8026776:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802677a:	9307      	str	r3, [sp, #28]
 802677c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802677e:	2b00      	cmp	r3, #0
 8026780:	f340 8218 	ble.w	8026bb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8026784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026788:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802678a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802678e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026792:	eef0 6a62 	vmov.f32	s13, s5
 8026796:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802679a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802679e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267a2:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80267a6:	eef0 6a43 	vmov.f32	s13, s6
 80267aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267ae:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80267b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80267b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80267ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80267be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80267c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80267c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80267ca:	ee12 2a90 	vmov	r2, s5
 80267ce:	eef0 2a47 	vmov.f32	s5, s14
 80267d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80267d6:	ee13 2a10 	vmov	r2, s6
 80267da:	931f      	str	r3, [sp, #124]	; 0x7c
 80267dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80267de:	eeb0 3a67 	vmov.f32	s6, s15
 80267e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80267e6:	9320      	str	r3, [sp, #128]	; 0x80
 80267e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80267ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80267ec:	3b01      	subs	r3, #1
 80267ee:	930e      	str	r3, [sp, #56]	; 0x38
 80267f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80267f2:	bf08      	it	eq
 80267f4:	4613      	moveq	r3, r2
 80267f6:	9306      	str	r3, [sp, #24]
 80267f8:	e61f      	b.n	802643a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80267fa:	fb08 f505 	mul.w	r5, r8, r5
 80267fe:	fb09 5303 	mla	r3, r9, r3, r5
 8026802:	e69f      	b.n	8026544 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8026804:	4681      	mov	r9, r0
 8026806:	e6c6      	b.n	8026596 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026808:	f1c1 0210 	rsb	r2, r1, #16
 802680c:	4341      	muls	r1, r0
 802680e:	fb09 1902 	mla	r9, r9, r2, r1
 8026812:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026816:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802681a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802681e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026822:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026826:	ea42 0909 	orr.w	r9, r2, r9
 802682a:	fa1f f289 	uxth.w	r2, r9
 802682e:	e75b      	b.n	80266e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8026830:	f8b7 c000 	ldrh.w	ip, [r7]
 8026834:	43db      	mvns	r3, r3
 8026836:	ea4f 202c 	mov.w	r0, ip, asr #8
 802683a:	fa5f fe83 	uxtb.w	lr, r3
 802683e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026842:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026846:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802684a:	fb00 f00e 	mul.w	r0, r0, lr
 802684e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026852:	b2db      	uxtb	r3, r3
 8026854:	1c41      	adds	r1, r0, #1
 8026856:	fb05 f50e 	mul.w	r5, r5, lr
 802685a:	fb03 f30e 	mul.w	r3, r3, lr
 802685e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026862:	1211      	asrs	r1, r2, #8
 8026864:	f021 0107 	bic.w	r1, r1, #7
 8026868:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802686c:	48d3      	ldr	r0, [pc, #844]	; (8026bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802686e:	b2c9      	uxtb	r1, r1
 8026870:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8026874:	1c69      	adds	r1, r5, #1
 8026876:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802687a:	10d1      	asrs	r1, r2, #3
 802687c:	00d2      	lsls	r2, r2, #3
 802687e:	f021 0103 	bic.w	r1, r1, #3
 8026882:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026886:	00c9      	lsls	r1, r1, #3
 8026888:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802688c:	4301      	orrs	r1, r0
 802688e:	1c58      	adds	r0, r3, #1
 8026890:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026894:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026898:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802689c:	430a      	orrs	r2, r1
 802689e:	e726      	b.n	80266ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80268a0:	f115 0e01 	adds.w	lr, r5, #1
 80268a4:	f53f af24 	bmi.w	80266f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80268a8:	4572      	cmp	r2, lr
 80268aa:	f6ff af21 	blt.w	80266f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80268ae:	f110 0e01 	adds.w	lr, r0, #1
 80268b2:	f53f af1d 	bmi.w	80266f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80268b6:	4573      	cmp	r3, lr
 80268b8:	f6ff af1a 	blt.w	80266f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80268bc:	b21b      	sxth	r3, r3
 80268be:	b212      	sxth	r2, r2
 80268c0:	9301      	str	r3, [sp, #4]
 80268c2:	9200      	str	r2, [sp, #0]
 80268c4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80268c8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80268cc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80268d0:	4639      	mov	r1, r7
 80268d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80268d4:	f7ff fc22 	bl	802611c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80268d8:	e70a      	b.n	80266f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80268da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80268dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80268e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80268e2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80268e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80268e8:	fa1f fc82 	uxth.w	ip, r2
 80268ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80268f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80268f2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80268f6:	141f      	asrs	r7, r3, #16
 80268f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80268fa:	141b      	asrs	r3, r3, #16
 80268fc:	fb01 3707 	mla	r7, r1, r7, r3
 8026900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026902:	eb03 0a07 	add.w	sl, r3, r7
 8026906:	f813 9007 	ldrb.w	r9, [r3, r7]
 802690a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802690e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026912:	b29b      	uxth	r3, r3
 8026914:	2d00      	cmp	r5, #0
 8026916:	f000 80fe 	beq.w	8026b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802691a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802691e:	eb0a 0b01 	add.w	fp, sl, r1
 8026922:	fa1f fa85 	uxth.w	sl, r5
 8026926:	940c      	str	r4, [sp, #48]	; 0x30
 8026928:	fb0a fc0c 	mul.w	ip, sl, ip
 802692c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026930:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026934:	eba0 000c 	sub.w	r0, r0, ip
 8026938:	940d      	str	r4, [sp, #52]	; 0x34
 802693a:	fa1f fa8a 	uxth.w	sl, sl
 802693e:	b280      	uxth	r0, r0
 8026940:	eba3 030a 	sub.w	r3, r3, sl
 8026944:	fb08 f000 	mul.w	r0, r8, r0
 8026948:	b29b      	uxth	r3, r3
 802694a:	fb09 0303 	mla	r3, r9, r3, r0
 802694e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026950:	fb0a 3300 	mla	r3, sl, r0, r3
 8026954:	fb0c 3304 	mla	r3, ip, r4, r3
 8026958:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802695c:	2b00      	cmp	r3, #0
 802695e:	f000 80cc 	beq.w	8026afa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8026962:	9808      	ldr	r0, [sp, #32]
 8026964:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026968:	9c08      	ldr	r4, [sp, #32]
 802696a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802696e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026972:	f000 80d5 	beq.w	8026b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8026976:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802697a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802697e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026982:	fb0a fc0c 	mul.w	ip, sl, ip
 8026986:	fb09 f707 	mul.w	r7, r9, r7
 802698a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802698e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026992:	f107 0b20 	add.w	fp, r7, #32
 8026996:	44cc      	add	ip, r9
 8026998:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802699c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80269a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80269a4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80269a8:	ea4c 0909 	orr.w	r9, ip, r9
 80269ac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80269b0:	8847      	ldrh	r7, [r0, #2]
 80269b2:	d019      	beq.n	80269e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80269b4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80269b8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80269bc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80269c0:	fb0a fc0c 	mul.w	ip, sl, ip
 80269c4:	fb08 f807 	mul.w	r8, r8, r7
 80269c8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80269cc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80269d0:	f108 0b20 	add.w	fp, r8, #32
 80269d4:	44bc      	add	ip, r7
 80269d6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80269da:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80269de:	0a3f      	lsrs	r7, r7, #8
 80269e0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80269e4:	ea4c 0707 	orr.w	r7, ip, r7
 80269e8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80269ec:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80269f0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80269f4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80269f8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80269fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026a00:	ea4c 0909 	orr.w	r9, ip, r9
 8026a04:	ea4a 0707 	orr.w	r7, sl, r7
 8026a08:	2d00      	cmp	r5, #0
 8026a0a:	f000 808b 	beq.w	8026b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026a0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026a12:	3901      	subs	r1, #1
 8026a14:	0049      	lsls	r1, r1, #1
 8026a16:	3102      	adds	r1, #2
 8026a18:	eb00 0c01 	add.w	ip, r0, r1
 8026a1c:	5a41      	ldrh	r1, [r0, r1]
 8026a1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026a20:	28ff      	cmp	r0, #255	; 0xff
 8026a22:	d019      	beq.n	8026a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8026a24:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026a28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026a2a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026a2e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026a32:	fb04 fa01 	mul.w	sl, r4, r1
 8026a36:	fb08 f800 	mul.w	r8, r8, r0
 8026a3a:	f10a 0020 	add.w	r0, sl, #32
 8026a3e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026a42:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026a46:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026a4a:	4441      	add	r1, r8
 8026a4c:	0a00      	lsrs	r0, r0, #8
 8026a4e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026a52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026a56:	4301      	orrs	r1, r0
 8026a58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026a5a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026a5e:	2cff      	cmp	r4, #255	; 0xff
 8026a60:	d01a      	beq.n	8026a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8026a62:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026a66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026a6a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026a6e:	fb04 fa00 	mul.w	sl, r4, r0
 8026a72:	fb08 f80c 	mul.w	r8, r8, ip
 8026a76:	f10a 0c20 	add.w	ip, sl, #32
 8026a7a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026a7e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026a82:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026a86:	4440      	add	r0, r8
 8026a88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a8c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026a90:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026a94:	ea40 000c 	orr.w	r0, r0, ip
 8026a98:	fb15 fc02 	smulbb	ip, r5, r2
 8026a9c:	f1c5 0810 	rsb	r8, r5, #16
 8026aa0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026aa4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026aa8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026aac:	eba8 0802 	sub.w	r8, r8, r2
 8026ab0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026ab4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ab8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026abc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026ac0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026ac4:	ea4a 0101 	orr.w	r1, sl, r1
 8026ac8:	437a      	muls	r2, r7
 8026aca:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026ace:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026ad2:	fb09 2208 	mla	r2, r9, r8, r2
 8026ad6:	ea4b 0000 	orr.w	r0, fp, r0
 8026ada:	fb05 2201 	mla	r2, r5, r1, r2
 8026ade:	fb0c 2200 	mla	r2, ip, r0, r2
 8026ae2:	0d57      	lsrs	r7, r2, #21
 8026ae4:	0952      	lsrs	r2, r2, #5
 8026ae6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026aea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026aee:	433a      	orrs	r2, r7
 8026af0:	2bff      	cmp	r3, #255	; 0xff
 8026af2:	b292      	uxth	r2, r2
 8026af4:	d127      	bne.n	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8026af6:	f8ae 2000 	strh.w	r2, [lr]
 8026afa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026afc:	f10e 0e02 	add.w	lr, lr, #2
 8026b00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026b02:	4413      	add	r3, r2
 8026b04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026b06:	931d      	str	r3, [sp, #116]	; 0x74
 8026b08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026b0a:	441a      	add	r2, r3
 8026b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026b0e:	3b01      	subs	r3, #1
 8026b10:	921e      	str	r2, [sp, #120]	; 0x78
 8026b12:	930f      	str	r3, [sp, #60]	; 0x3c
 8026b14:	e627      	b.n	8026766 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026b16:	fb08 f000 	mul.w	r0, r8, r0
 8026b1a:	fb09 0303 	mla	r3, r9, r3, r0
 8026b1e:	e71b      	b.n	8026958 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8026b20:	46b9      	mov	r9, r7
 8026b22:	e743      	b.n	80269ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8026b24:	f1c2 0110 	rsb	r1, r2, #16
 8026b28:	437a      	muls	r2, r7
 8026b2a:	fb09 2901 	mla	r9, r9, r1, r2
 8026b2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026b32:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026b36:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026b3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b3e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026b42:	4302      	orrs	r2, r0
 8026b44:	e7d4      	b.n	8026af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8026b46:	f8be 7000 	ldrh.w	r7, [lr]
 8026b4a:	43db      	mvns	r3, r3
 8026b4c:	4c1b      	ldr	r4, [pc, #108]	; (8026bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8026b4e:	1238      	asrs	r0, r7, #8
 8026b50:	fa5f fc83 	uxtb.w	ip, r3
 8026b54:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026b58:	10fd      	asrs	r5, r7, #3
 8026b5a:	00fb      	lsls	r3, r7, #3
 8026b5c:	fb00 f00c 	mul.w	r0, r0, ip
 8026b60:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026b64:	b2db      	uxtb	r3, r3
 8026b66:	fb05 f10c 	mul.w	r1, r5, ip
 8026b6a:	1c45      	adds	r5, r0, #1
 8026b6c:	fb03 f30c 	mul.w	r3, r3, ip
 8026b70:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026b74:	1215      	asrs	r5, r2, #8
 8026b76:	f025 0507 	bic.w	r5, r5, #7
 8026b7a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026b7e:	1c4d      	adds	r5, r1, #1
 8026b80:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026b84:	10d1      	asrs	r1, r2, #3
 8026b86:	b2c0      	uxtb	r0, r0
 8026b88:	f021 0103 	bic.w	r1, r1, #3
 8026b8c:	00d2      	lsls	r2, r2, #3
 8026b8e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026b92:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026b96:	00c9      	lsls	r1, r1, #3
 8026b98:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026b9c:	4308      	orrs	r0, r1
 8026b9e:	1c59      	adds	r1, r3, #1
 8026ba0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026ba4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026ba8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026bac:	4318      	orrs	r0, r3
 8026bae:	f8ae 0000 	strh.w	r0, [lr]
 8026bb2:	e7a2      	b.n	8026afa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8026bb4:	b013      	add	sp, #76	; 0x4c
 8026bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bba:	bf00      	nop
 8026bbc:	fffff800 	.word	0xfffff800

08026bc0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026bc4:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8026bc8:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026bcc:	fb05 4c03 	mla	ip, r5, r3, r4
 8026bd0:	2d00      	cmp	r5, #0
 8026bd2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8026bd6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8026bda:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8026bde:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8026be2:	8808      	ldrh	r0, [r1, #0]
 8026be4:	f2c0 80a7 	blt.w	8026d36 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026be8:	45aa      	cmp	sl, r5
 8026bea:	f340 80a4 	ble.w	8026d36 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026bee:	2c00      	cmp	r4, #0
 8026bf0:	f2c0 809f 	blt.w	8026d32 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026bf4:	42a3      	cmp	r3, r4
 8026bf6:	f340 809c 	ble.w	8026d32 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026bfa:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8026bfe:	1c62      	adds	r2, r4, #1
 8026c00:	f100 809c 	bmi.w	8026d3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026c04:	4293      	cmp	r3, r2
 8026c06:	f340 8099 	ble.w	8026d3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026c0a:	f1b9 0f00 	cmp.w	r9, #0
 8026c0e:	f000 8095 	beq.w	8026d3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026c12:	f8be c002 	ldrh.w	ip, [lr, #2]
 8026c16:	3501      	adds	r5, #1
 8026c18:	f100 8094 	bmi.w	8026d44 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026c1c:	45aa      	cmp	sl, r5
 8026c1e:	f340 8091 	ble.w	8026d44 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026c22:	2f00      	cmp	r7, #0
 8026c24:	f000 808e 	beq.w	8026d44 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026c28:	2c00      	cmp	r4, #0
 8026c2a:	f2c0 8089 	blt.w	8026d40 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026c2e:	42a3      	cmp	r3, r4
 8026c30:	f340 8086 	ble.w	8026d40 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026c34:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8026c38:	3401      	adds	r4, #1
 8026c3a:	f100 8086 	bmi.w	8026d4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026c3e:	42a3      	cmp	r3, r4
 8026c40:	f340 8083 	ble.w	8026d4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026c44:	f1b9 0f00 	cmp.w	r9, #0
 8026c48:	d07f      	beq.n	8026d4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026c4a:	3301      	adds	r3, #1
 8026c4c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8026c50:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8026c54:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8026c58:	fb19 fe07 	smulbb	lr, r9, r7
 8026c5c:	f1c7 0210 	rsb	r2, r7, #16
 8026c60:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026c64:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8026c68:	eba2 0209 	sub.w	r2, r2, r9
 8026c6c:	ea44 0808 	orr.w	r8, r4, r8
 8026c70:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8026c74:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026c78:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8026c7c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026c80:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8026c84:	ea44 0c0c 	orr.w	ip, r4, ip
 8026c88:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8026c8c:	fb04 f40c 	mul.w	r4, r4, ip
 8026c90:	fb02 4808 	mla	r8, r2, r8, r4
 8026c94:	041a      	lsls	r2, r3, #16
 8026c96:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026c9a:	b2b4      	uxth	r4, r6
 8026c9c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026ca0:	43f6      	mvns	r6, r6
 8026ca2:	4313      	orrs	r3, r2
 8026ca4:	042a      	lsls	r2, r5, #16
 8026ca6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026caa:	b2f6      	uxtb	r6, r6
 8026cac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026cb0:	fb0e 8303 	mla	r3, lr, r3, r8
 8026cb4:	432a      	orrs	r2, r5
 8026cb6:	fb07 3202 	mla	r2, r7, r2, r3
 8026cba:	10c7      	asrs	r7, r0, #3
 8026cbc:	0d53      	lsrs	r3, r2, #21
 8026cbe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026cc2:	0952      	lsrs	r2, r2, #5
 8026cc4:	fb17 f706 	smulbb	r7, r7, r6
 8026cc8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026ccc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026cd0:	431a      	orrs	r2, r3
 8026cd2:	b293      	uxth	r3, r2
 8026cd4:	1202      	asrs	r2, r0, #8
 8026cd6:	121d      	asrs	r5, r3, #8
 8026cd8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026cdc:	00c0      	lsls	r0, r0, #3
 8026cde:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026ce2:	fb12 f206 	smulbb	r2, r2, r6
 8026ce6:	b2c0      	uxtb	r0, r0
 8026ce8:	fb05 2504 	mla	r5, r5, r4, r2
 8026cec:	10da      	asrs	r2, r3, #3
 8026cee:	fb10 f006 	smulbb	r0, r0, r6
 8026cf2:	00db      	lsls	r3, r3, #3
 8026cf4:	b2ad      	uxth	r5, r5
 8026cf6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026cfa:	b2db      	uxtb	r3, r3
 8026cfc:	fb02 7204 	mla	r2, r2, r4, r7
 8026d00:	fb03 0004 	mla	r0, r3, r4, r0
 8026d04:	1c6b      	adds	r3, r5, #1
 8026d06:	b292      	uxth	r2, r2
 8026d08:	b280      	uxth	r0, r0
 8026d0a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026d0e:	1c43      	adds	r3, r0, #1
 8026d10:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026d14:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026d18:	1c50      	adds	r0, r2, #1
 8026d1a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026d1e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026d22:	0952      	lsrs	r2, r2, #5
 8026d24:	432b      	orrs	r3, r5
 8026d26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026d2a:	4313      	orrs	r3, r2
 8026d2c:	800b      	strh	r3, [r1, #0]
 8026d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d32:	4680      	mov	r8, r0
 8026d34:	e763      	b.n	8026bfe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8026d36:	4684      	mov	ip, r0
 8026d38:	4680      	mov	r8, r0
 8026d3a:	e76c      	b.n	8026c16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026d3c:	4684      	mov	ip, r0
 8026d3e:	e76a      	b.n	8026c16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026d40:	4605      	mov	r5, r0
 8026d42:	e779      	b.n	8026c38 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8026d44:	4603      	mov	r3, r0
 8026d46:	4605      	mov	r5, r0
 8026d48:	e782      	b.n	8026c50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8026d4a:	4603      	mov	r3, r0
 8026d4c:	e780      	b.n	8026c50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08026d4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d52:	b093      	sub	sp, #76	; 0x4c
 8026d54:	461d      	mov	r5, r3
 8026d56:	9210      	str	r2, [sp, #64]	; 0x40
 8026d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026d5a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8026d5e:	910a      	str	r1, [sp, #40]	; 0x28
 8026d60:	920b      	str	r2, [sp, #44]	; 0x2c
 8026d62:	6859      	ldr	r1, [r3, #4]
 8026d64:	681b      	ldr	r3, [r3, #0]
 8026d66:	9011      	str	r0, [sp, #68]	; 0x44
 8026d68:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8026d6c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026d70:	fb01 2707 	mla	r7, r1, r7, r2
 8026d74:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026d78:	9307      	str	r3, [sp, #28]
 8026d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026d7c:	681b      	ldr	r3, [r3, #0]
 8026d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8026d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026d82:	43db      	mvns	r3, r3
 8026d84:	b2db      	uxtb	r3, r3
 8026d86:	9308      	str	r3, [sp, #32]
 8026d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d8a:	2b00      	cmp	r3, #0
 8026d8c:	dc03      	bgt.n	8026d96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026d90:	2b00      	cmp	r3, #0
 8026d92:	f340 8205 	ble.w	80271a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026d98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d9c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026da0:	1e48      	subs	r0, r1, #1
 8026da2:	f102 3cff 	add.w	ip, r2, #4294967295
 8026da6:	2d00      	cmp	r5, #0
 8026da8:	f340 80da 	ble.w	8026f60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026dac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026db0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026db4:	d406      	bmi.n	8026dc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026db6:	4586      	cmp	lr, r0
 8026db8:	da04      	bge.n	8026dc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026dba:	2b00      	cmp	r3, #0
 8026dbc:	db02      	blt.n	8026dc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026dbe:	4563      	cmp	r3, ip
 8026dc0:	f2c0 80cf 	blt.w	8026f62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8026dc4:	f11e 0e01 	adds.w	lr, lr, #1
 8026dc8:	f100 80c1 	bmi.w	8026f4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026dcc:	4571      	cmp	r1, lr
 8026dce:	f2c0 80be 	blt.w	8026f4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026dd2:	3301      	adds	r3, #1
 8026dd4:	f100 80bb 	bmi.w	8026f4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026dd8:	429a      	cmp	r2, r3
 8026dda:	f2c0 80b8 	blt.w	8026f4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026dde:	46a9      	mov	r9, r5
 8026de0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8026de4:	f1b9 0f00 	cmp.w	r9, #0
 8026de8:	f340 80d8 	ble.w	8026f9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026dec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026dee:	1421      	asrs	r1, r4, #16
 8026df0:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026df4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026df8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026dfc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026e00:	f100 8112 	bmi.w	8027028 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026e04:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026e08:	4551      	cmp	r1, sl
 8026e0a:	f280 810d 	bge.w	8027028 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026e0e:	2800      	cmp	r0, #0
 8026e10:	f2c0 810a 	blt.w	8027028 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026e14:	f103 3aff 	add.w	sl, r3, #4294967295
 8026e18:	4550      	cmp	r0, sl
 8026e1a:	f280 8105 	bge.w	8027028 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026e1e:	fa0f f38e 	sxth.w	r3, lr
 8026e22:	fb00 1103 	mla	r1, r0, r3, r1
 8026e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026e28:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026e2c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026e30:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026e34:	f1bc 0f00 	cmp.w	ip, #0
 8026e38:	d007      	beq.n	8026e4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8026e3a:	005b      	lsls	r3, r3, #1
 8026e3c:	eb0a 0003 	add.w	r0, sl, r3
 8026e40:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026e44:	930c      	str	r3, [sp, #48]	; 0x30
 8026e46:	8843      	ldrh	r3, [r0, #2]
 8026e48:	930d      	str	r3, [sp, #52]	; 0x34
 8026e4a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026e4e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026e52:	fb12 f30c 	smulbb	r3, r2, ip
 8026e56:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026e5a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026e5e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026e62:	10db      	asrs	r3, r3, #3
 8026e64:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026e68:	ea40 000e 	orr.w	r0, r0, lr
 8026e6c:	f1cc 0e10 	rsb	lr, ip, #16
 8026e70:	ea4a 0101 	orr.w	r1, sl, r1
 8026e74:	9f08      	ldr	r7, [sp, #32]
 8026e76:	ebae 0e02 	sub.w	lr, lr, r2
 8026e7a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026e7e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026e82:	4351      	muls	r1, r2
 8026e84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026e86:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026e8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026e8c:	0410      	lsls	r0, r2, #16
 8026e8e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026e92:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026e96:	4310      	orrs	r0, r2
 8026e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026e9a:	0412      	lsls	r2, r2, #16
 8026e9c:	fb03 e000 	mla	r0, r3, r0, lr
 8026ea0:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026ea4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026ea8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026eac:	ea42 020e 	orr.w	r2, r2, lr
 8026eb0:	fb03 0302 	mla	r3, r3, r2, r0
 8026eb4:	f8b8 0000 	ldrh.w	r0, [r8]
 8026eb8:	0d5a      	lsrs	r2, r3, #21
 8026eba:	095b      	lsrs	r3, r3, #5
 8026ebc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026ec0:	1201      	asrs	r1, r0, #8
 8026ec2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026ec6:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026eca:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026ece:	00c0      	lsls	r0, r0, #3
 8026ed0:	4313      	orrs	r3, r2
 8026ed2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8026ed6:	fb11 f107 	smulbb	r1, r1, r7
 8026eda:	b2c0      	uxtb	r0, r0
 8026edc:	b29b      	uxth	r3, r3
 8026ede:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026ee2:	fb10 f007 	smulbb	r0, r0, r7
 8026ee6:	fb1e fe07 	smulbb	lr, lr, r7
 8026eea:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026eee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026ef2:	fb0c 1c02 	mla	ip, ip, r2, r1
 8026ef6:	10d9      	asrs	r1, r3, #3
 8026ef8:	00db      	lsls	r3, r3, #3
 8026efa:	fa1f fc8c 	uxth.w	ip, ip
 8026efe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026f02:	b2db      	uxtb	r3, r3
 8026f04:	fb01 e102 	mla	r1, r1, r2, lr
 8026f08:	fb03 0302 	mla	r3, r3, r2, r0
 8026f0c:	b289      	uxth	r1, r1
 8026f0e:	b29a      	uxth	r2, r3
 8026f10:	f10c 0301 	add.w	r3, ip, #1
 8026f14:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026f18:	1c53      	adds	r3, r2, #1
 8026f1a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026f1e:	1c4a      	adds	r2, r1, #1
 8026f20:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026f24:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026f28:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026f2c:	0949      	lsrs	r1, r1, #5
 8026f2e:	ea43 030c 	orr.w	r3, r3, ip
 8026f32:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026f36:	430b      	orrs	r3, r1
 8026f38:	f8a8 3000 	strh.w	r3, [r8]
 8026f3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026f3e:	f108 0802 	add.w	r8, r8, #2
 8026f42:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f46:	441c      	add	r4, r3
 8026f48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026f4a:	441e      	add	r6, r3
 8026f4c:	e74a      	b.n	8026de4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026f50:	3d01      	subs	r5, #1
 8026f52:	441c      	add	r4, r3
 8026f54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026f56:	441e      	add	r6, r3
 8026f58:	9b07      	ldr	r3, [sp, #28]
 8026f5a:	3302      	adds	r3, #2
 8026f5c:	9307      	str	r3, [sp, #28]
 8026f5e:	e722      	b.n	8026da6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026f60:	d022      	beq.n	8026fa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026f62:	1e6b      	subs	r3, r5, #1
 8026f64:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026f66:	fb00 4003 	mla	r0, r0, r3, r4
 8026f6a:	1400      	asrs	r0, r0, #16
 8026f6c:	f53f af37 	bmi.w	8026dde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f70:	3901      	subs	r1, #1
 8026f72:	4288      	cmp	r0, r1
 8026f74:	f6bf af33 	bge.w	8026dde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f78:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026f7a:	fb01 6303 	mla	r3, r1, r3, r6
 8026f7e:	141b      	asrs	r3, r3, #16
 8026f80:	f53f af2d 	bmi.w	8026dde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f84:	3a01      	subs	r2, #1
 8026f86:	4293      	cmp	r3, r2
 8026f88:	f6bf af29 	bge.w	8026dde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f8c:	46a8      	mov	r8, r5
 8026f8e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8026f92:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8026f96:	f1b8 0f00 	cmp.w	r8, #0
 8026f9a:	dc60      	bgt.n	802705e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8026f9c:	9b07      	ldr	r3, [sp, #28]
 8026f9e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026fa2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026fa6:	9307      	str	r3, [sp, #28]
 8026fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026faa:	2b00      	cmp	r3, #0
 8026fac:	f340 80f8 	ble.w	80271a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026fb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026fb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026fba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026fbe:	eef0 6a62 	vmov.f32	s13, s5
 8026fc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026fc6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026fca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fce:	ee16 4a90 	vmov	r4, s13
 8026fd2:	eef0 6a43 	vmov.f32	s13, s6
 8026fd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fda:	ee16 6a90 	vmov	r6, s13
 8026fde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026fe2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026fe6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026fea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026fee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026ff2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026ff6:	ee12 2a90 	vmov	r2, s5
 8026ffa:	eef0 2a47 	vmov.f32	s5, s14
 8026ffe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027002:	ee13 2a10 	vmov	r2, s6
 8027006:	931f      	str	r3, [sp, #124]	; 0x7c
 8027008:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802700a:	eeb0 3a67 	vmov.f32	s6, s15
 802700e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027012:	9320      	str	r3, [sp, #128]	; 0x80
 8027014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027016:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027018:	3b01      	subs	r3, #1
 802701a:	930a      	str	r3, [sp, #40]	; 0x28
 802701c:	bf08      	it	eq
 802701e:	4615      	moveq	r5, r2
 8027020:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027022:	bf18      	it	ne
 8027024:	461d      	movne	r5, r3
 8027026:	e6af      	b.n	8026d88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027028:	f111 0a01 	adds.w	sl, r1, #1
 802702c:	d486      	bmi.n	8026f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802702e:	45d6      	cmp	lr, sl
 8027030:	db84      	blt.n	8026f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027032:	f110 0a01 	adds.w	sl, r0, #1
 8027036:	d481      	bmi.n	8026f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027038:	4553      	cmp	r3, sl
 802703a:	f6ff af7f 	blt.w	8026f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802703e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027040:	b21b      	sxth	r3, r3
 8027042:	9101      	str	r1, [sp, #4]
 8027044:	4641      	mov	r1, r8
 8027046:	9300      	str	r3, [sp, #0]
 8027048:	fa0f f38e 	sxth.w	r3, lr
 802704c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027050:	e9cd c704 	strd	ip, r7, [sp, #16]
 8027054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027056:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027058:	f7ff fdb2 	bl	8026bc0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802705c:	e76e      	b.n	8026f3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802705e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027060:	1430      	asrs	r0, r6, #16
 8027062:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027064:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027068:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802706c:	1423      	asrs	r3, r4, #16
 802706e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027072:	fb01 3000 	mla	r0, r1, r0, r3
 8027076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027078:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802707c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8027080:	8858      	ldrh	r0, [r3, #2]
 8027082:	f1be 0f00 	cmp.w	lr, #0
 8027086:	d00b      	beq.n	80270a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8027088:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802708c:	3901      	subs	r1, #1
 802708e:	0049      	lsls	r1, r1, #1
 8027090:	3102      	adds	r1, #2
 8027092:	eb03 0b01 	add.w	fp, r3, r1
 8027096:	5a5b      	ldrh	r3, [r3, r1]
 8027098:	930e      	str	r3, [sp, #56]	; 0x38
 802709a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802709e:	930f      	str	r3, [sp, #60]	; 0x3c
 80270a0:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80270a4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80270a8:	fb12 f30e 	smulbb	r3, r2, lr
 80270ac:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80270b0:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80270b4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80270b8:	10db      	asrs	r3, r3, #3
 80270ba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80270be:	ea41 010c 	orr.w	r1, r1, ip
 80270c2:	f1ce 0c10 	rsb	ip, lr, #16
 80270c6:	ea4b 0000 	orr.w	r0, fp, r0
 80270ca:	9f08      	ldr	r7, [sp, #32]
 80270cc:	ebac 0c02 	sub.w	ip, ip, r2
 80270d0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80270d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80270d8:	4350      	muls	r0, r2
 80270da:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80270de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80270e0:	fb0c 0c01 	mla	ip, ip, r1, r0
 80270e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80270e6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80270ea:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80270ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80270f0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80270f4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80270f8:	0412      	lsls	r2, r2, #16
 80270fa:	ea4b 0101 	orr.w	r1, fp, r1
 80270fe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027102:	fb03 c101 	mla	r1, r3, r1, ip
 8027106:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802710a:	4302      	orrs	r2, r0
 802710c:	fb03 1202 	mla	r2, r3, r2, r1
 8027110:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8027114:	0952      	lsrs	r2, r2, #5
 8027116:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802711a:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802711e:	f8b9 2000 	ldrh.w	r2, [r9]
 8027122:	ea4b 0303 	orr.w	r3, fp, r3
 8027126:	1211      	asrs	r1, r2, #8
 8027128:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802712c:	b29b      	uxth	r3, r3
 802712e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027132:	00d2      	lsls	r2, r2, #3
 8027134:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8027138:	fb11 f107 	smulbb	r1, r1, r7
 802713c:	1218      	asrs	r0, r3, #8
 802713e:	fb1c fc07 	smulbb	ip, ip, r7
 8027142:	b2d2      	uxtb	r2, r2
 8027144:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027148:	fb12 f207 	smulbb	r2, r2, r7
 802714c:	fb00 100a 	mla	r0, r0, sl, r1
 8027150:	10d9      	asrs	r1, r3, #3
 8027152:	00db      	lsls	r3, r3, #3
 8027154:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027158:	b280      	uxth	r0, r0
 802715a:	b2db      	uxtb	r3, r3
 802715c:	fb01 c10a 	mla	r1, r1, sl, ip
 8027160:	fb03 230a 	mla	r3, r3, sl, r2
 8027164:	1c42      	adds	r2, r0, #1
 8027166:	b289      	uxth	r1, r1
 8027168:	b29b      	uxth	r3, r3
 802716a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802716e:	f101 0c01 	add.w	ip, r1, #1
 8027172:	1c5a      	adds	r2, r3, #1
 8027174:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027178:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802717c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027180:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027182:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027186:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802718a:	441c      	add	r4, r3
 802718c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027190:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027192:	4310      	orrs	r0, r2
 8027194:	441e      	add	r6, r3
 8027196:	ea40 000c 	orr.w	r0, r0, ip
 802719a:	f829 0b02 	strh.w	r0, [r9], #2
 802719e:	e6fa      	b.n	8026f96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80271a0:	b013      	add	sp, #76	; 0x4c
 80271a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080271a6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80271a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80271aa:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80271ae:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80271b2:	fb0e 4703 	mla	r7, lr, r3, r4
 80271b6:	f1be 0f00 	cmp.w	lr, #0
 80271ba:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80271be:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80271c2:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80271c6:	8808      	ldrh	r0, [r1, #0]
 80271c8:	db60      	blt.n	802728c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80271ca:	45f1      	cmp	r9, lr
 80271cc:	dd5e      	ble.n	802728c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80271ce:	2c00      	cmp	r4, #0
 80271d0:	db5a      	blt.n	8027288 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80271d2:	42a3      	cmp	r3, r4
 80271d4:	dd58      	ble.n	8027288 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80271d6:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80271da:	1c62      	adds	r2, r4, #1
 80271dc:	d459      	bmi.n	8027292 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80271de:	4293      	cmp	r3, r2
 80271e0:	dd57      	ble.n	8027292 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80271e2:	2d00      	cmp	r5, #0
 80271e4:	d055      	beq.n	8027292 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80271e6:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80271ea:	f11e 0e01 	adds.w	lr, lr, #1
 80271ee:	d454      	bmi.n	802729a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80271f0:	45f1      	cmp	r9, lr
 80271f2:	dd52      	ble.n	802729a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80271f4:	2e00      	cmp	r6, #0
 80271f6:	d050      	beq.n	802729a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80271f8:	2c00      	cmp	r4, #0
 80271fa:	db4c      	blt.n	8027296 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80271fc:	42a3      	cmp	r3, r4
 80271fe:	dd4a      	ble.n	8027296 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8027200:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8027204:	3401      	adds	r4, #1
 8027206:	d405      	bmi.n	8027214 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027208:	42a3      	cmp	r3, r4
 802720a:	dd03      	ble.n	8027214 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802720c:	b115      	cbz	r5, 8027214 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802720e:	3301      	adds	r3, #1
 8027210:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8027214:	fb15 f406 	smulbb	r4, r5, r6
 8027218:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802721c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8027220:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027224:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8027228:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802722c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027230:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027234:	ea43 0c0c 	orr.w	ip, r3, ip
 8027238:	f1c6 0310 	rsb	r3, r6, #16
 802723c:	ea4e 0707 	orr.w	r7, lr, r7
 8027240:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8027244:	1b5b      	subs	r3, r3, r5
 8027246:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802724a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802724e:	437d      	muls	r5, r7
 8027250:	fb03 5c0c 	mla	ip, r3, ip, r5
 8027254:	0403      	lsls	r3, r0, #16
 8027256:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802725a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802725e:	4318      	orrs	r0, r3
 8027260:	0413      	lsls	r3, r2, #16
 8027262:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027266:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802726a:	fb04 c000 	mla	r0, r4, r0, ip
 802726e:	4313      	orrs	r3, r2
 8027270:	fb06 0003 	mla	r0, r6, r3, r0
 8027274:	0d43      	lsrs	r3, r0, #21
 8027276:	0940      	lsrs	r0, r0, #5
 8027278:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802727c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027280:	4318      	orrs	r0, r3
 8027282:	8008      	strh	r0, [r1, #0]
 8027284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027288:	4684      	mov	ip, r0
 802728a:	e7a6      	b.n	80271da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 802728c:	4607      	mov	r7, r0
 802728e:	4684      	mov	ip, r0
 8027290:	e7ab      	b.n	80271ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8027292:	4607      	mov	r7, r0
 8027294:	e7a9      	b.n	80271ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8027296:	4602      	mov	r2, r0
 8027298:	e7b4      	b.n	8027204 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802729a:	4602      	mov	r2, r0
 802729c:	e7ba      	b.n	8027214 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802729e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802729e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272a2:	b08f      	sub	sp, #60	; 0x3c
 80272a4:	461d      	mov	r5, r3
 80272a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80272a8:	9107      	str	r1, [sp, #28]
 80272aa:	920c      	str	r2, [sp, #48]	; 0x30
 80272ac:	6859      	ldr	r1, [r3, #4]
 80272ae:	681b      	ldr	r3, [r3, #0]
 80272b0:	900d      	str	r0, [sp, #52]	; 0x34
 80272b2:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80272b6:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80272ba:	fb01 2707 	mla	r7, r1, r7, r2
 80272be:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80272c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80272c4:	f8d3 8000 	ldr.w	r8, [r3]
 80272c8:	9b07      	ldr	r3, [sp, #28]
 80272ca:	2b00      	cmp	r3, #0
 80272cc:	dc03      	bgt.n	80272d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80272ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80272d0:	2b00      	cmp	r3, #0
 80272d2:	f340 8182 	ble.w	80275da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80272d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80272d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80272dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80272e0:	1e48      	subs	r0, r1, #1
 80272e2:	f102 3cff 	add.w	ip, r2, #4294967295
 80272e6:	2d00      	cmp	r5, #0
 80272e8:	f340 809b 	ble.w	8027422 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80272ec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80272f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80272f4:	d406      	bmi.n	8027304 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80272f6:	4586      	cmp	lr, r0
 80272f8:	da04      	bge.n	8027304 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	db02      	blt.n	8027304 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80272fe:	4563      	cmp	r3, ip
 8027300:	f2c0 8090 	blt.w	8027424 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8027304:	f11e 0e01 	adds.w	lr, lr, #1
 8027308:	f100 8084 	bmi.w	8027414 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802730c:	4571      	cmp	r1, lr
 802730e:	f2c0 8081 	blt.w	8027414 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8027312:	3301      	adds	r3, #1
 8027314:	d47e      	bmi.n	8027414 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8027316:	429a      	cmp	r2, r3
 8027318:	db7c      	blt.n	8027414 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802731a:	46aa      	mov	sl, r5
 802731c:	46b9      	mov	r9, r7
 802731e:	f1ba 0f00 	cmp.w	sl, #0
 8027322:	f340 8099 	ble.w	8027458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027326:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027328:	1421      	asrs	r1, r4, #16
 802732a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802732e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027332:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027336:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802733a:	f100 80d1 	bmi.w	80274e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802733e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027342:	4559      	cmp	r1, fp
 8027344:	f280 80cc 	bge.w	80274e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8027348:	2800      	cmp	r0, #0
 802734a:	f2c0 80c9 	blt.w	80274e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802734e:	f103 3bff 	add.w	fp, r3, #4294967295
 8027352:	4558      	cmp	r0, fp
 8027354:	f280 80c4 	bge.w	80274e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8027358:	fa0f fe8e 	sxth.w	lr, lr
 802735c:	fb00 110e 	mla	r1, r0, lr, r1
 8027360:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027364:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8027368:	8841      	ldrh	r1, [r0, #2]
 802736a:	f1bc 0f00 	cmp.w	ip, #0
 802736e:	d00b      	beq.n	8027388 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8027370:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8027374:	3b01      	subs	r3, #1
 8027376:	005b      	lsls	r3, r3, #1
 8027378:	3302      	adds	r3, #2
 802737a:	eb00 0e03 	add.w	lr, r0, r3
 802737e:	5ac3      	ldrh	r3, [r0, r3]
 8027380:	9308      	str	r3, [sp, #32]
 8027382:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8027386:	9309      	str	r3, [sp, #36]	; 0x24
 8027388:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802738c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027390:	fb12 f30c 	smulbb	r3, r2, ip
 8027394:	f1cc 0e10 	rsb	lr, ip, #16
 8027398:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802739c:	10db      	asrs	r3, r3, #3
 802739e:	ebae 0e02 	sub.w	lr, lr, r2
 80273a2:	ea40 000b 	orr.w	r0, r0, fp
 80273a6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80273aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80273ae:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80273b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80273b6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80273ba:	ea4b 0101 	orr.w	r1, fp, r1
 80273be:	4351      	muls	r1, r2
 80273c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80273c2:	fb0e 1e00 	mla	lr, lr, r0, r1
 80273c6:	0410      	lsls	r0, r2, #16
 80273c8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80273cc:	9908      	ldr	r1, [sp, #32]
 80273ce:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80273d2:	4310      	orrs	r0, r2
 80273d4:	9a08      	ldr	r2, [sp, #32]
 80273d6:	0412      	lsls	r2, r2, #16
 80273d8:	fb03 e000 	mla	r0, r3, r0, lr
 80273dc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80273e0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80273e4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80273e8:	ea42 020e 	orr.w	r2, r2, lr
 80273ec:	fb03 0302 	mla	r3, r3, r2, r0
 80273f0:	0d5a      	lsrs	r2, r3, #21
 80273f2:	095b      	lsrs	r3, r3, #5
 80273f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80273f8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80273fc:	4313      	orrs	r3, r2
 80273fe:	f8a9 3000 	strh.w	r3, [r9]
 8027402:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027404:	f109 0902 	add.w	r9, r9, #2
 8027408:	f10a 3aff 	add.w	sl, sl, #4294967295
 802740c:	441c      	add	r4, r3
 802740e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027410:	441e      	add	r6, r3
 8027412:	e784      	b.n	802731e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8027414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027416:	3d01      	subs	r5, #1
 8027418:	3702      	adds	r7, #2
 802741a:	441c      	add	r4, r3
 802741c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802741e:	441e      	add	r6, r3
 8027420:	e761      	b.n	80272e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027422:	d01d      	beq.n	8027460 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027424:	1e6b      	subs	r3, r5, #1
 8027426:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027428:	fb00 4003 	mla	r0, r0, r3, r4
 802742c:	1400      	asrs	r0, r0, #16
 802742e:	f53f af74 	bmi.w	802731a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027432:	3901      	subs	r1, #1
 8027434:	4288      	cmp	r0, r1
 8027436:	f6bf af70 	bge.w	802731a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802743a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802743c:	fb01 6303 	mla	r3, r1, r3, r6
 8027440:	141b      	asrs	r3, r3, #16
 8027442:	f53f af6a 	bmi.w	802731a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027446:	3a01      	subs	r2, #1
 8027448:	4293      	cmp	r3, r2
 802744a:	f6bf af66 	bge.w	802731a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802744e:	46a9      	mov	r9, r5
 8027450:	46ba      	mov	sl, r7
 8027452:	f1b9 0f00 	cmp.w	r9, #0
 8027456:	dc5b      	bgt.n	8027510 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027458:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802745c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027460:	9b07      	ldr	r3, [sp, #28]
 8027462:	2b00      	cmp	r3, #0
 8027464:	f340 80b9 	ble.w	80275da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8027468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802746c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802746e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027472:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027476:	eef0 6a62 	vmov.f32	s13, s5
 802747a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802747e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027482:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027486:	ee16 4a90 	vmov	r4, s13
 802748a:	eef0 6a43 	vmov.f32	s13, s6
 802748e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027492:	ee16 6a90 	vmov	r6, s13
 8027496:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802749a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802749e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80274a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80274a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80274aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80274ae:	ee12 2a90 	vmov	r2, s5
 80274b2:	eef0 2a47 	vmov.f32	s5, s14
 80274b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80274ba:	ee13 2a10 	vmov	r2, s6
 80274be:	931b      	str	r3, [sp, #108]	; 0x6c
 80274c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80274c2:	eeb0 3a67 	vmov.f32	s6, s15
 80274c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80274ca:	931c      	str	r3, [sp, #112]	; 0x70
 80274cc:	9b07      	ldr	r3, [sp, #28]
 80274ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80274d0:	3b01      	subs	r3, #1
 80274d2:	9307      	str	r3, [sp, #28]
 80274d4:	bf08      	it	eq
 80274d6:	4615      	moveq	r5, r2
 80274d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80274da:	bf18      	it	ne
 80274dc:	461d      	movne	r5, r3
 80274de:	e6f3      	b.n	80272c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80274e0:	f111 0b01 	adds.w	fp, r1, #1
 80274e4:	d48d      	bmi.n	8027402 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274e6:	45de      	cmp	lr, fp
 80274e8:	db8b      	blt.n	8027402 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274ea:	f110 0b01 	adds.w	fp, r0, #1
 80274ee:	d488      	bmi.n	8027402 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274f0:	455b      	cmp	r3, fp
 80274f2:	db86      	blt.n	8027402 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274f4:	b21b      	sxth	r3, r3
 80274f6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80274fa:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80274fe:	9300      	str	r3, [sp, #0]
 8027500:	4642      	mov	r2, r8
 8027502:	fa0f f38e 	sxth.w	r3, lr
 8027506:	4649      	mov	r1, r9
 8027508:	980d      	ldr	r0, [sp, #52]	; 0x34
 802750a:	f7ff fe4c 	bl	80271a6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802750e:	e778      	b.n	8027402 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027510:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027512:	1420      	asrs	r0, r4, #16
 8027514:	1431      	asrs	r1, r6, #16
 8027516:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802751a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802751e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027522:	fb03 0101 	mla	r1, r3, r1, r0
 8027526:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802752a:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802752e:	8841      	ldrh	r1, [r0, #2]
 8027530:	f1be 0f00 	cmp.w	lr, #0
 8027534:	d00b      	beq.n	802754e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8027536:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802753a:	3b01      	subs	r3, #1
 802753c:	005b      	lsls	r3, r3, #1
 802753e:	3302      	adds	r3, #2
 8027540:	eb00 0b03 	add.w	fp, r0, r3
 8027544:	5ac3      	ldrh	r3, [r0, r3]
 8027546:	930a      	str	r3, [sp, #40]	; 0x28
 8027548:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802754c:	930b      	str	r3, [sp, #44]	; 0x2c
 802754e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027552:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027556:	fb12 f30e 	smulbb	r3, r2, lr
 802755a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802755e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027562:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027566:	10db      	asrs	r3, r3, #3
 8027568:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802756c:	ea40 000c 	orr.w	r0, r0, ip
 8027570:	f1ce 0c10 	rsb	ip, lr, #16
 8027574:	ea4b 0101 	orr.w	r1, fp, r1
 8027578:	f109 39ff 	add.w	r9, r9, #4294967295
 802757c:	ebac 0c02 	sub.w	ip, ip, r2
 8027580:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027584:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027588:	4351      	muls	r1, r2
 802758a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802758c:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027590:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027592:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027596:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802759a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802759c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80275a0:	0412      	lsls	r2, r2, #16
 80275a2:	ea4b 0000 	orr.w	r0, fp, r0
 80275a6:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80275aa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80275ae:	fb03 c000 	mla	r0, r3, r0, ip
 80275b2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80275b6:	ea42 0b0b 	orr.w	fp, r2, fp
 80275ba:	fb03 000b 	mla	r0, r3, fp, r0
 80275be:	0d43      	lsrs	r3, r0, #21
 80275c0:	0940      	lsrs	r0, r0, #5
 80275c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80275c6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80275ca:	4318      	orrs	r0, r3
 80275cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80275ce:	441c      	add	r4, r3
 80275d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80275d2:	f82a 0b02 	strh.w	r0, [sl], #2
 80275d6:	441e      	add	r6, r3
 80275d8:	e73b      	b.n	8027452 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80275da:	b00f      	add	sp, #60	; 0x3c
 80275dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080275e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80275e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275e4:	b085      	sub	sp, #20
 80275e6:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80275ea:	9102      	str	r1, [sp, #8]
 80275ec:	2c00      	cmp	r4, #0
 80275ee:	fb04 7103 	mla	r1, r4, r3, r7
 80275f2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80275f6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80275fa:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80275fe:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027602:	f2c0 811b 	blt.w	802783c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8027606:	45a6      	cmp	lr, r4
 8027608:	f340 8118 	ble.w	802783c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802760c:	2f00      	cmp	r7, #0
 802760e:	f2c0 8113 	blt.w	8027838 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8027612:	42bb      	cmp	r3, r7
 8027614:	f340 8110 	ble.w	8027838 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8027618:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802761c:	1c7a      	adds	r2, r7, #1
 802761e:	f100 8110 	bmi.w	8027842 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8027622:	4293      	cmp	r3, r2
 8027624:	f340 810d 	ble.w	8027842 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8027628:	2e00      	cmp	r6, #0
 802762a:	f000 810c 	beq.w	8027846 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802762e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027632:	3401      	adds	r4, #1
 8027634:	f100 810b 	bmi.w	802784e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8027638:	45a6      	cmp	lr, r4
 802763a:	f340 8108 	ble.w	802784e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802763e:	2800      	cmp	r0, #0
 8027640:	f000 8108 	beq.w	8027854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8027644:	2f00      	cmp	r7, #0
 8027646:	f2c0 8100 	blt.w	802784a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802764a:	42bb      	cmp	r3, r7
 802764c:	f340 80fd 	ble.w	802784a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8027650:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027654:	3701      	adds	r7, #1
 8027656:	f100 8100 	bmi.w	802785a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802765a:	42bb      	cmp	r3, r7
 802765c:	f340 80fd 	ble.w	802785a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8027660:	2e00      	cmp	r6, #0
 8027662:	f000 80fc 	beq.w	802785e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8027666:	3301      	adds	r3, #1
 8027668:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802766c:	b2b6      	uxth	r6, r6
 802766e:	b280      	uxth	r0, r0
 8027670:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027674:	fb00 fe06 	mul.w	lr, r0, r6
 8027678:	0136      	lsls	r6, r6, #4
 802767a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802767e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027682:	eba6 070e 	sub.w	r7, r6, lr
 8027686:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802768a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802768e:	b280      	uxth	r0, r0
 8027690:	b2bf      	uxth	r7, r7
 8027692:	1a1b      	subs	r3, r3, r0
 8027694:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027698:	fb0a f607 	mul.w	r6, sl, r7
 802769c:	b29b      	uxth	r3, r3
 802769e:	fb0b 6603 	mla	r6, fp, r3, r6
 80276a2:	fb00 6609 	mla	r6, r0, r9, r6
 80276a6:	fb0e 6608 	mla	r6, lr, r8, r6
 80276aa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80276ae:	9600      	str	r6, [sp, #0]
 80276b0:	2e00      	cmp	r6, #0
 80276b2:	f000 80be 	beq.w	8027832 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80276b6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80276ba:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80276be:	9e02      	ldr	r6, [sp, #8]
 80276c0:	fb0b fc0c 	mul.w	ip, fp, ip
 80276c4:	fb0b f505 	mul.w	r5, fp, r5
 80276c8:	8836      	ldrh	r6, [r6, #0]
 80276ca:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80276ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80276d2:	9501      	str	r5, [sp, #4]
 80276d4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80276d8:	44dc      	add	ip, fp
 80276da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276de:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80276e2:	9503      	str	r5, [sp, #12]
 80276e4:	9d01      	ldr	r5, [sp, #4]
 80276e6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80276ea:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80276ee:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80276f2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80276f6:	fb0a fc0c 	mul.w	ip, sl, ip
 80276fa:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80276fe:	fb0a fa01 	mul.w	sl, sl, r1
 8027702:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027706:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802770a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802770e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027712:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027716:	4465      	add	r5, ip
 8027718:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802771c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027720:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027724:	fb09 fc0c 	mul.w	ip, r9, ip
 8027728:	0a2d      	lsrs	r5, r5, #8
 802772a:	fb09 f904 	mul.w	r9, r9, r4
 802772e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027732:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8027736:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802773a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802773e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027742:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027746:	437d      	muls	r5, r7
 8027748:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802774c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027750:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027754:	4461      	add	r1, ip
 8027756:	fb08 f404 	mul.w	r4, r8, r4
 802775a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802775e:	fb08 f802 	mul.w	r8, r8, r2
 8027762:	0a09      	lsrs	r1, r1, #8
 8027764:	0a22      	lsrs	r2, r4, #8
 8027766:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802776a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802776e:	fb07 f70a 	mul.w	r7, r7, sl
 8027772:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027776:	4414      	add	r4, r2
 8027778:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802777c:	0a24      	lsrs	r4, r4, #8
 802777e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027782:	9a03      	ldr	r2, [sp, #12]
 8027784:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027788:	fb02 5503 	mla	r5, r2, r3, r5
 802778c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027790:	9a00      	ldr	r2, [sp, #0]
 8027792:	fb04 540e 	mla	r4, r4, lr, r5
 8027796:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802779a:	1235      	asrs	r5, r6, #8
 802779c:	fb01 4100 	mla	r1, r1, r0, r4
 80277a0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80277a4:	0a09      	lsrs	r1, r1, #8
 80277a6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80277aa:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80277ae:	fb03 7101 	mla	r1, r3, r1, r7
 80277b2:	fb0e 1e08 	mla	lr, lr, r8, r1
 80277b6:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80277ba:	fb00 e101 	mla	r1, r0, r1, lr
 80277be:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80277c2:	b287      	uxth	r7, r0
 80277c4:	0a09      	lsrs	r1, r1, #8
 80277c6:	437a      	muls	r2, r7
 80277c8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80277cc:	1c53      	adds	r3, r2, #1
 80277ce:	4321      	orrs	r1, r4
 80277d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80277d4:	0c0a      	lsrs	r2, r1, #16
 80277d6:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80277da:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80277de:	b2c8      	uxtb	r0, r1
 80277e0:	fb12 f207 	smulbb	r2, r2, r7
 80277e4:	fb14 f407 	smulbb	r4, r4, r7
 80277e8:	b2db      	uxtb	r3, r3
 80277ea:	fb10 f007 	smulbb	r0, r0, r7
 80277ee:	fb05 2503 	mla	r5, r5, r3, r2
 80277f2:	10f2      	asrs	r2, r6, #3
 80277f4:	00f6      	lsls	r6, r6, #3
 80277f6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80277fa:	b2ad      	uxth	r5, r5
 80277fc:	b2f6      	uxtb	r6, r6
 80277fe:	fb02 4203 	mla	r2, r2, r3, r4
 8027802:	fb06 0303 	mla	r3, r6, r3, r0
 8027806:	b294      	uxth	r4, r2
 8027808:	b299      	uxth	r1, r3
 802780a:	1c6b      	adds	r3, r5, #1
 802780c:	1c62      	adds	r2, r4, #1
 802780e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027812:	1c4b      	adds	r3, r1, #1
 8027814:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027818:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802781c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027820:	0952      	lsrs	r2, r2, #5
 8027822:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027826:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802782a:	432b      	orrs	r3, r5
 802782c:	4313      	orrs	r3, r2
 802782e:	9a02      	ldr	r2, [sp, #8]
 8027830:	8013      	strh	r3, [r2, #0]
 8027832:	b005      	add	sp, #20
 8027834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027838:	2500      	movs	r5, #0
 802783a:	e6ef      	b.n	802761c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802783c:	2100      	movs	r1, #0
 802783e:	460d      	mov	r5, r1
 8027840:	e6f7      	b.n	8027632 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8027842:	2100      	movs	r1, #0
 8027844:	e6f5      	b.n	8027632 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8027846:	4631      	mov	r1, r6
 8027848:	e6f3      	b.n	8027632 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802784a:	2400      	movs	r4, #0
 802784c:	e702      	b.n	8027654 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802784e:	2200      	movs	r2, #0
 8027850:	4614      	mov	r4, r2
 8027852:	e70b      	b.n	802766c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8027854:	4602      	mov	r2, r0
 8027856:	4604      	mov	r4, r0
 8027858:	e708      	b.n	802766c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802785a:	2200      	movs	r2, #0
 802785c:	e706      	b.n	802766c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802785e:	4632      	mov	r2, r6
 8027860:	e704      	b.n	802766c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08027862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027866:	b09d      	sub	sp, #116	; 0x74
 8027868:	9219      	str	r2, [sp, #100]	; 0x64
 802786a:	9307      	str	r3, [sp, #28]
 802786c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802786e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8027872:	901b      	str	r0, [sp, #108]	; 0x6c
 8027874:	931a      	str	r3, [sp, #104]	; 0x68
 8027876:	6850      	ldr	r0, [r2, #4]
 8027878:	9117      	str	r1, [sp, #92]	; 0x5c
 802787a:	6812      	ldr	r2, [r2, #0]
 802787c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8027880:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8027884:	fb00 1303 	mla	r3, r0, r3, r1
 8027888:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802788c:	930a      	str	r3, [sp, #40]	; 0x28
 802788e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027890:	681b      	ldr	r3, [r3, #0]
 8027892:	9310      	str	r3, [sp, #64]	; 0x40
 8027894:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027898:	930b      	str	r3, [sp, #44]	; 0x2c
 802789a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802789c:	2b00      	cmp	r3, #0
 802789e:	dc03      	bgt.n	80278a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80278a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80278a2:	2b00      	cmp	r3, #0
 80278a4:	f340 8375 	ble.w	8027f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80278a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80278aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80278ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80278b2:	1e48      	subs	r0, r1, #1
 80278b4:	1e57      	subs	r7, r2, #1
 80278b6:	9b07      	ldr	r3, [sp, #28]
 80278b8:	2b00      	cmp	r3, #0
 80278ba:	f340 818e 	ble.w	8027bda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80278be:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80278c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80278c6:	d406      	bmi.n	80278d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278c8:	4584      	cmp	ip, r0
 80278ca:	da04      	bge.n	80278d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278cc:	2b00      	cmp	r3, #0
 80278ce:	db02      	blt.n	80278d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278d0:	42bb      	cmp	r3, r7
 80278d2:	f2c0 8183 	blt.w	8027bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80278d6:	f11c 0c01 	adds.w	ip, ip, #1
 80278da:	f100 8173 	bmi.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278de:	4561      	cmp	r1, ip
 80278e0:	f2c0 8170 	blt.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278e4:	3301      	adds	r3, #1
 80278e6:	f100 816d 	bmi.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278ea:	429a      	cmp	r2, r3
 80278ec:	f2c0 816a 	blt.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278f0:	9b07      	ldr	r3, [sp, #28]
 80278f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80278f4:	9318      	str	r3, [sp, #96]	; 0x60
 80278f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80278f8:	2b00      	cmp	r3, #0
 80278fa:	f340 818c 	ble.w	8027c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80278fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027900:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027904:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027906:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802790a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802790e:	1422      	asrs	r2, r4, #16
 8027910:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027914:	689b      	ldr	r3, [r3, #8]
 8027916:	f100 81cd 	bmi.w	8027cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802791a:	f103 38ff 	add.w	r8, r3, #4294967295
 802791e:	4542      	cmp	r2, r8
 8027920:	f280 81c8 	bge.w	8027cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027924:	f1bc 0f00 	cmp.w	ip, #0
 8027928:	f2c0 81c4 	blt.w	8027cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802792c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027930:	45c4      	cmp	ip, r8
 8027932:	f280 81bf 	bge.w	8027cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027936:	b21b      	sxth	r3, r3
 8027938:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802793a:	fb0c 2203 	mla	r2, ip, r3, r2
 802793e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027942:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027946:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802794a:	2800      	cmp	r0, #0
 802794c:	f000 81a9 	beq.w	8027ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8027950:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027954:	950c      	str	r5, [sp, #48]	; 0x30
 8027956:	0e2d      	lsrs	r5, r5, #24
 8027958:	9513      	str	r5, [sp, #76]	; 0x4c
 802795a:	b181      	cbz	r1, 802797e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802795c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027960:	3b01      	subs	r3, #1
 8027962:	009b      	lsls	r3, r3, #2
 8027964:	3304      	adds	r3, #4
 8027966:	eb08 0c03 	add.w	ip, r8, r3
 802796a:	f858 3003 	ldr.w	r3, [r8, r3]
 802796e:	9308      	str	r3, [sp, #32]
 8027970:	0e1b      	lsrs	r3, r3, #24
 8027972:	9311      	str	r3, [sp, #68]	; 0x44
 8027974:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027978:	930d      	str	r3, [sp, #52]	; 0x34
 802797a:	0e1b      	lsrs	r3, r3, #24
 802797c:	9314      	str	r3, [sp, #80]	; 0x50
 802797e:	b280      	uxth	r0, r0
 8027980:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027982:	b289      	uxth	r1, r1
 8027984:	fb00 f901 	mul.w	r9, r0, r1
 8027988:	0100      	lsls	r0, r0, #4
 802798a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802798e:	eba0 0809 	sub.w	r8, r0, r9
 8027992:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027996:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027998:	b289      	uxth	r1, r1
 802799a:	fa1f f888 	uxth.w	r8, r8
 802799e:	1a5b      	subs	r3, r3, r1
 80279a0:	fb08 f000 	mul.w	r0, r8, r0
 80279a4:	b29b      	uxth	r3, r3
 80279a6:	fb03 000e 	mla	r0, r3, lr, r0
 80279aa:	fb01 0005 	mla	r0, r1, r5, r0
 80279ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80279b0:	fb09 0005 	mla	r0, r9, r5, r0
 80279b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80279b8:	2800      	cmp	r0, #0
 80279ba:	f000 80fa 	beq.w	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80279be:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80279c2:	d01b      	beq.n	80279fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80279c4:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80279c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80279cc:	fb0e fa0a 	mul.w	sl, lr, sl
 80279d0:	fb0e fe02 	mul.w	lr, lr, r2
 80279d4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80279d8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80279dc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80279e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80279e4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80279e8:	4452      	add	r2, sl
 80279ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279ee:	0a12      	lsrs	r2, r2, #8
 80279f0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80279f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80279f8:	ea42 020c 	orr.w	r2, r2, ip
 80279fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80279fe:	2dff      	cmp	r5, #255	; 0xff
 8027a00:	d021      	beq.n	8027a46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8027a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027a04:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027a08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027a0a:	fb05 fb0b 	mul.w	fp, r5, fp
 8027a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027a10:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027a14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027a16:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027a1a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027a1e:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a26:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027a2a:	44de      	add	lr, fp
 8027a2c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a38:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a40:	ea4e 050a 	orr.w	r5, lr, sl
 8027a44:	950c      	str	r5, [sp, #48]	; 0x30
 8027a46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027a48:	2dff      	cmp	r5, #255	; 0xff
 8027a4a:	d021      	beq.n	8027a90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027a4c:	9d08      	ldr	r5, [sp, #32]
 8027a4e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027a52:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027a54:	fb05 fb0b 	mul.w	fp, r5, fp
 8027a58:	9d08      	ldr	r5, [sp, #32]
 8027a5a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027a5e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027a60:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027a64:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027a68:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a70:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027a74:	44de      	add	lr, fp
 8027a76:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a82:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a8a:	ea4e 050a 	orr.w	r5, lr, sl
 8027a8e:	9508      	str	r5, [sp, #32]
 8027a90:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027a92:	2dff      	cmp	r5, #255	; 0xff
 8027a94:	d021      	beq.n	8027ada <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8027a96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027a98:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027a9c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027a9e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027aa2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027aa4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027aa8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027aaa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027aae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027ab2:	fb05 fa0a 	mul.w	sl, r5, sl
 8027ab6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027aba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027abe:	44de      	add	lr, fp
 8027ac0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027ac4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ac8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027acc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027ad0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027ad4:	ea4e 050a 	orr.w	r5, lr, sl
 8027ad8:	950d      	str	r5, [sp, #52]	; 0x34
 8027ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027adc:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027ae0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027ae4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027ae8:	9d08      	ldr	r5, [sp, #32]
 8027aea:	fb08 fc0c 	mul.w	ip, r8, ip
 8027aee:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027af2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027af6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027af8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027afc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027b00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027b02:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027b06:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027b0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027b0c:	fb08 f80e 	mul.w	r8, r8, lr
 8027b10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b14:	fb03 8202 	mla	r2, r3, r2, r8
 8027b18:	9b08      	ldr	r3, [sp, #32]
 8027b1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b1e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027b24:	fb01 220a 	mla	r2, r1, sl, r2
 8027b28:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027b2c:	883b      	ldrh	r3, [r7, #0]
 8027b2e:	fb09 2901 	mla	r9, r9, r1, r2
 8027b32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027b34:	1219      	asrs	r1, r3, #8
 8027b36:	4342      	muls	r2, r0
 8027b38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027b3c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027b40:	1c50      	adds	r0, r2, #1
 8027b42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027b46:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027b4a:	ea4c 0c09 	orr.w	ip, ip, r9
 8027b4e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027b52:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8027b56:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8027b5a:	fa5f fc8c 	uxtb.w	ip, ip
 8027b5e:	fb12 f205 	smulbb	r2, r2, r5
 8027b62:	b2c0      	uxtb	r0, r0
 8027b64:	fb1c fc05 	smulbb	ip, ip, r5
 8027b68:	fb01 2100 	mla	r1, r1, r0, r2
 8027b6c:	10da      	asrs	r2, r3, #3
 8027b6e:	fb1e fe05 	smulbb	lr, lr, r5
 8027b72:	00db      	lsls	r3, r3, #3
 8027b74:	b289      	uxth	r1, r1
 8027b76:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027b7a:	b2db      	uxtb	r3, r3
 8027b7c:	fb02 e200 	mla	r2, r2, r0, lr
 8027b80:	fb03 c300 	mla	r3, r3, r0, ip
 8027b84:	b292      	uxth	r2, r2
 8027b86:	fa1f fc83 	uxth.w	ip, r3
 8027b8a:	1c4b      	adds	r3, r1, #1
 8027b8c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027b90:	f10c 0301 	add.w	r3, ip, #1
 8027b94:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027b98:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8027b9c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ba0:	430b      	orrs	r3, r1
 8027ba2:	1c51      	adds	r1, r2, #1
 8027ba4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027ba8:	0952      	lsrs	r2, r2, #5
 8027baa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027bae:	4313      	orrs	r3, r2
 8027bb0:	803b      	strh	r3, [r7, #0]
 8027bb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027bb4:	3702      	adds	r7, #2
 8027bb6:	441c      	add	r4, r3
 8027bb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027bba:	441e      	add	r6, r3
 8027bbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027bbe:	3b01      	subs	r3, #1
 8027bc0:	9318      	str	r3, [sp, #96]	; 0x60
 8027bc2:	e698      	b.n	80278f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027bc4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027bc6:	441c      	add	r4, r3
 8027bc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027bca:	441e      	add	r6, r3
 8027bcc:	9b07      	ldr	r3, [sp, #28]
 8027bce:	3b01      	subs	r3, #1
 8027bd0:	9307      	str	r3, [sp, #28]
 8027bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bd4:	3302      	adds	r3, #2
 8027bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8027bd8:	e66d      	b.n	80278b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8027bda:	d023      	beq.n	8027c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027bdc:	9b07      	ldr	r3, [sp, #28]
 8027bde:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8027be0:	3b01      	subs	r3, #1
 8027be2:	fb00 4003 	mla	r0, r0, r3, r4
 8027be6:	1400      	asrs	r0, r0, #16
 8027be8:	f53f ae82 	bmi.w	80278f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027bec:	3901      	subs	r1, #1
 8027bee:	4288      	cmp	r0, r1
 8027bf0:	f6bf ae7e 	bge.w	80278f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027bf4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8027bf6:	fb01 6303 	mla	r3, r1, r3, r6
 8027bfa:	141b      	asrs	r3, r3, #16
 8027bfc:	f53f ae78 	bmi.w	80278f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027c00:	3a01      	subs	r2, #1
 8027c02:	4293      	cmp	r3, r2
 8027c04:	f6bf ae74 	bge.w	80278f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027c08:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027c0c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8027c10:	f1bb 0f00 	cmp.w	fp, #0
 8027c14:	dc6c      	bgt.n	8027cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027c16:	9b07      	ldr	r3, [sp, #28]
 8027c18:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c1e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027c22:	930a      	str	r3, [sp, #40]	; 0x28
 8027c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027c26:	2b00      	cmp	r3, #0
 8027c28:	f340 81b3 	ble.w	8027f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027c30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027c32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027c36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027c3a:	eef0 6a62 	vmov.f32	s13, s5
 8027c3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027c42:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027c46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027c4a:	ee16 4a90 	vmov	r4, s13
 8027c4e:	eef0 6a43 	vmov.f32	s13, s6
 8027c52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027c56:	ee16 6a90 	vmov	r6, s13
 8027c5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027c5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027c62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027c66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027c6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027c6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027c72:	ee12 2a90 	vmov	r2, s5
 8027c76:	eef0 2a47 	vmov.f32	s5, s14
 8027c7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027c7e:	ee13 2a10 	vmov	r2, s6
 8027c82:	9329      	str	r3, [sp, #164]	; 0xa4
 8027c84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027c86:	eeb0 3a67 	vmov.f32	s6, s15
 8027c8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027c8e:	932a      	str	r3, [sp, #168]	; 0xa8
 8027c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027c92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027c94:	3b01      	subs	r3, #1
 8027c96:	9317      	str	r3, [sp, #92]	; 0x5c
 8027c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027c9a:	bf08      	it	eq
 8027c9c:	4613      	moveq	r3, r2
 8027c9e:	9307      	str	r3, [sp, #28]
 8027ca0:	e5fb      	b.n	802789a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027ca2:	2900      	cmp	r1, #0
 8027ca4:	f43f ae6b 	beq.w	802797e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027ca8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027cac:	9308      	str	r3, [sp, #32]
 8027cae:	0e1b      	lsrs	r3, r3, #24
 8027cb0:	9311      	str	r3, [sp, #68]	; 0x44
 8027cb2:	e664      	b.n	802797e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027cb4:	f112 0801 	adds.w	r8, r2, #1
 8027cb8:	f53f af7b 	bmi.w	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cbc:	4543      	cmp	r3, r8
 8027cbe:	f6ff af78 	blt.w	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cc2:	f11c 0801 	adds.w	r8, ip, #1
 8027cc6:	f53f af74 	bmi.w	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cca:	45c6      	cmp	lr, r8
 8027ccc:	f6ff af71 	blt.w	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cd0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8027cd2:	b21b      	sxth	r3, r3
 8027cd4:	9201      	str	r2, [sp, #4]
 8027cd6:	fa0f f28e 	sxth.w	r2, lr
 8027cda:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027cde:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027ce2:	9200      	str	r2, [sp, #0]
 8027ce4:	4639      	mov	r1, r7
 8027ce6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027ce8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027cea:	f7ff fc79 	bl	80275e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027cee:	e760      	b.n	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cf0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027cf2:	1427      	asrs	r7, r4, #16
 8027cf4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027cf6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027cfa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027cfe:	1433      	asrs	r3, r6, #16
 8027d00:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027d04:	fb01 7303 	mla	r3, r1, r3, r7
 8027d08:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027d0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027d10:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027d14:	2a00      	cmp	r2, #0
 8027d16:	f000 8133 	beq.w	8027f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027d1a:	687d      	ldr	r5, [r7, #4]
 8027d1c:	950e      	str	r5, [sp, #56]	; 0x38
 8027d1e:	0e2d      	lsrs	r5, r5, #24
 8027d20:	9515      	str	r5, [sp, #84]	; 0x54
 8027d22:	b178      	cbz	r0, 8027d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027d24:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027d28:	3901      	subs	r1, #1
 8027d2a:	0089      	lsls	r1, r1, #2
 8027d2c:	3104      	adds	r1, #4
 8027d2e:	eb07 0e01 	add.w	lr, r7, r1
 8027d32:	5879      	ldr	r1, [r7, r1]
 8027d34:	9109      	str	r1, [sp, #36]	; 0x24
 8027d36:	0e09      	lsrs	r1, r1, #24
 8027d38:	9112      	str	r1, [sp, #72]	; 0x48
 8027d3a:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027d3e:	910f      	str	r1, [sp, #60]	; 0x3c
 8027d40:	0e09      	lsrs	r1, r1, #24
 8027d42:	9116      	str	r1, [sp, #88]	; 0x58
 8027d44:	b292      	uxth	r2, r2
 8027d46:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027d48:	b280      	uxth	r0, r0
 8027d4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027d4c:	fb02 f800 	mul.w	r8, r2, r0
 8027d50:	0112      	lsls	r2, r2, #4
 8027d52:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027d56:	eba2 0e08 	sub.w	lr, r2, r8
 8027d5a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027d5e:	b280      	uxth	r0, r0
 8027d60:	fa1f fe8e 	uxth.w	lr, lr
 8027d64:	1a12      	subs	r2, r2, r0
 8027d66:	fb0e f101 	mul.w	r1, lr, r1
 8027d6a:	b292      	uxth	r2, r2
 8027d6c:	fb02 110c 	mla	r1, r2, ip, r1
 8027d70:	fb00 1105 	mla	r1, r0, r5, r1
 8027d74:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027d76:	fb08 1105 	mla	r1, r8, r5, r1
 8027d7a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027d7e:	2900      	cmp	r1, #0
 8027d80:	f000 80f5 	beq.w	8027f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8027d84:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027d88:	d019      	beq.n	8027dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8027d8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027d8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d92:	fb0c fa0a 	mul.w	sl, ip, sl
 8027d96:	fb0c fc03 	mul.w	ip, ip, r3
 8027d9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027d9e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027da2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027da6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027daa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027dae:	4453      	add	r3, sl
 8027db0:	0a3f      	lsrs	r7, r7, #8
 8027db2:	0a1b      	lsrs	r3, r3, #8
 8027db4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027db8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027dbc:	433b      	orrs	r3, r7
 8027dbe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027dc0:	2dff      	cmp	r5, #255	; 0xff
 8027dc2:	d020      	beq.n	8027e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8027dc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027dc6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027dca:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027dcc:	436f      	muls	r7, r5
 8027dce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027dd0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027dd4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027dd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027dda:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027dde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027de2:	fb05 fa0a 	mul.w	sl, r5, sl
 8027de6:	44bc      	add	ip, r7
 8027de8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027dec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027df0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027df4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027df8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027dfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e00:	ea4c 050a 	orr.w	r5, ip, sl
 8027e04:	950e      	str	r5, [sp, #56]	; 0x38
 8027e06:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027e08:	2dff      	cmp	r5, #255	; 0xff
 8027e0a:	d020      	beq.n	8027e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027e0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027e0e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027e12:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027e14:	436f      	muls	r7, r5
 8027e16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027e18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027e1c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027e20:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027e22:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027e26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e2a:	fb05 fa0a 	mul.w	sl, r5, sl
 8027e2e:	44bc      	add	ip, r7
 8027e30:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027e34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027e3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e48:	ea4c 050a 	orr.w	r5, ip, sl
 8027e4c:	9509      	str	r5, [sp, #36]	; 0x24
 8027e4e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027e50:	2dff      	cmp	r5, #255	; 0xff
 8027e52:	d020      	beq.n	8027e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8027e54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027e56:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027e5a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027e5c:	436f      	muls	r7, r5
 8027e5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027e60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027e64:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027e68:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027e6a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027e6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e72:	fb05 fa0a 	mul.w	sl, r5, sl
 8027e76:	44bc      	add	ip, r7
 8027e78:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027e7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027e84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e90:	ea4c 050a 	orr.w	r5, ip, sl
 8027e94:	950f      	str	r5, [sp, #60]	; 0x3c
 8027e96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027e98:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027e9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027ea0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027ea4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027ea6:	fb0e f707 	mul.w	r7, lr, r7
 8027eaa:	fb02 770c 	mla	r7, r2, ip, r7
 8027eae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027eb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027eb4:	fb00 770c 	mla	r7, r0, ip, r7
 8027eb8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027ebc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027ebe:	fb08 770c 	mla	r7, r8, ip, r7
 8027ec2:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027ec6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027ec8:	fb0e fe0c 	mul.w	lr, lr, ip
 8027ecc:	0a3f      	lsrs	r7, r7, #8
 8027ece:	fb02 e303 	mla	r3, r2, r3, lr
 8027ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027ed4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027ed8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027edc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027ede:	fb00 330a 	mla	r3, r0, sl, r3
 8027ee2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027ee6:	f8b9 0000 	ldrh.w	r0, [r9]
 8027eea:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027ef0:	1202      	asrs	r2, r0, #8
 8027ef2:	4359      	muls	r1, r3
 8027ef4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ef8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027efc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027f00:	1c4b      	adds	r3, r1, #1
 8027f02:	ea47 070c 	orr.w	r7, r7, ip
 8027f06:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027f0a:	0c3b      	lsrs	r3, r7, #16
 8027f0c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027f10:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027f14:	b2ff      	uxtb	r7, r7
 8027f16:	fb13 f305 	smulbb	r3, r3, r5
 8027f1a:	b2c9      	uxtb	r1, r1
 8027f1c:	fb17 f705 	smulbb	r7, r7, r5
 8027f20:	fb02 3201 	mla	r2, r2, r1, r3
 8027f24:	10c3      	asrs	r3, r0, #3
 8027f26:	fb1c fc05 	smulbb	ip, ip, r5
 8027f2a:	00c0      	lsls	r0, r0, #3
 8027f2c:	b292      	uxth	r2, r2
 8027f2e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027f32:	b2c0      	uxtb	r0, r0
 8027f34:	fb03 c301 	mla	r3, r3, r1, ip
 8027f38:	fb00 7001 	mla	r0, r0, r1, r7
 8027f3c:	1c51      	adds	r1, r2, #1
 8027f3e:	b29b      	uxth	r3, r3
 8027f40:	b280      	uxth	r0, r0
 8027f42:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027f46:	f100 0c01 	add.w	ip, r0, #1
 8027f4a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027f4e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8027f52:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027f56:	ea4c 0202 	orr.w	r2, ip, r2
 8027f5a:	f103 0c01 	add.w	ip, r3, #1
 8027f5e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027f62:	095b      	lsrs	r3, r3, #5
 8027f64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027f68:	431a      	orrs	r2, r3
 8027f6a:	f8a9 2000 	strh.w	r2, [r9]
 8027f6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027f70:	f109 0902 	add.w	r9, r9, #2
 8027f74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027f78:	441c      	add	r4, r3
 8027f7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027f7c:	441e      	add	r6, r3
 8027f7e:	e647      	b.n	8027c10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027f80:	2800      	cmp	r0, #0
 8027f82:	f43f aedf 	beq.w	8027d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027f86:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027f8a:	9109      	str	r1, [sp, #36]	; 0x24
 8027f8c:	0e09      	lsrs	r1, r1, #24
 8027f8e:	9112      	str	r1, [sp, #72]	; 0x48
 8027f90:	e6d8      	b.n	8027d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027f92:	b01d      	add	sp, #116	; 0x74
 8027f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027f98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f9c:	b085      	sub	sp, #20
 8027f9e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8027fa2:	9102      	str	r1, [sp, #8]
 8027fa4:	2c00      	cmp	r4, #0
 8027fa6:	fb04 7103 	mla	r1, r4, r3, r7
 8027faa:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027fae:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8027fb2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027fb6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027fba:	f2c0 810c 	blt.w	80281d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027fbe:	45a6      	cmp	lr, r4
 8027fc0:	f340 8109 	ble.w	80281d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027fc4:	2f00      	cmp	r7, #0
 8027fc6:	f2c0 8104 	blt.w	80281d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027fca:	42bb      	cmp	r3, r7
 8027fcc:	f340 8101 	ble.w	80281d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027fd0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8027fd4:	1c7a      	adds	r2, r7, #1
 8027fd6:	f100 8101 	bmi.w	80281dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027fda:	4293      	cmp	r3, r2
 8027fdc:	f340 80fe 	ble.w	80281dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027fe0:	2e00      	cmp	r6, #0
 8027fe2:	f000 80fd 	beq.w	80281e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8027fe6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027fea:	3401      	adds	r4, #1
 8027fec:	f100 80fc 	bmi.w	80281e8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027ff0:	45a6      	cmp	lr, r4
 8027ff2:	f340 80f9 	ble.w	80281e8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027ff6:	2800      	cmp	r0, #0
 8027ff8:	f000 80f9 	beq.w	80281ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8027ffc:	2f00      	cmp	r7, #0
 8027ffe:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8028002:	f2c0 80ef 	blt.w	80281e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8028006:	42bb      	cmp	r3, r7
 8028008:	f340 80ec 	ble.w	80281e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802800c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028010:	3701      	adds	r7, #1
 8028012:	f100 80ef 	bmi.w	80281f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8028016:	42bb      	cmp	r3, r7
 8028018:	f340 80ec 	ble.w	80281f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802801c:	2e00      	cmp	r6, #0
 802801e:	f000 80eb 	beq.w	80281f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8028022:	6852      	ldr	r2, [r2, #4]
 8028024:	b2b6      	uxth	r6, r6
 8028026:	b280      	uxth	r0, r0
 8028028:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802802c:	fb00 fe06 	mul.w	lr, r0, r6
 8028030:	0136      	lsls	r6, r6, #4
 8028032:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8028036:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802803a:	eba6 070e 	sub.w	r7, r6, lr
 802803e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8028042:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028046:	b280      	uxth	r0, r0
 8028048:	b2bf      	uxth	r7, r7
 802804a:	1a1b      	subs	r3, r3, r0
 802804c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028050:	fb07 f60a 	mul.w	r6, r7, sl
 8028054:	b29b      	uxth	r3, r3
 8028056:	fb0b 6603 	mla	r6, fp, r3, r6
 802805a:	fb00 6609 	mla	r6, r0, r9, r6
 802805e:	fb0e 6608 	mla	r6, lr, r8, r6
 8028062:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028066:	9600      	str	r6, [sp, #0]
 8028068:	2e00      	cmp	r6, #0
 802806a:	f000 80af 	beq.w	80281cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802806e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028072:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028076:	9e02      	ldr	r6, [sp, #8]
 8028078:	fb0b fc0c 	mul.w	ip, fp, ip
 802807c:	fb0b f505 	mul.w	r5, fp, r5
 8028080:	8836      	ldrh	r6, [r6, #0]
 8028082:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028086:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802808a:	9501      	str	r5, [sp, #4]
 802808c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028090:	44dc      	add	ip, fp
 8028092:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028096:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802809a:	9503      	str	r5, [sp, #12]
 802809c:	9d01      	ldr	r5, [sp, #4]
 802809e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80280a2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80280a6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80280aa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80280ae:	fb0a fc0c 	mul.w	ip, sl, ip
 80280b2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80280b6:	fb0a fa01 	mul.w	sl, sl, r1
 80280ba:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80280be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80280c2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80280c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80280ca:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80280ce:	4465      	add	r5, ip
 80280d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80280d4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80280d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280dc:	fb09 fc0c 	mul.w	ip, r9, ip
 80280e0:	0a2d      	lsrs	r5, r5, #8
 80280e2:	fb09 f904 	mul.w	r9, r9, r4
 80280e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80280ea:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80280ee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80280f2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80280f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80280fa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80280fe:	437d      	muls	r5, r7
 8028100:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028104:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8028108:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802810c:	4461      	add	r1, ip
 802810e:	fb08 f404 	mul.w	r4, r8, r4
 8028112:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028116:	fb08 f802 	mul.w	r8, r8, r2
 802811a:	0a09      	lsrs	r1, r1, #8
 802811c:	0a22      	lsrs	r2, r4, #8
 802811e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028122:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028126:	fb07 f70a 	mul.w	r7, r7, sl
 802812a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802812e:	4414      	add	r4, r2
 8028130:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8028134:	0a24      	lsrs	r4, r4, #8
 8028136:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802813a:	9a03      	ldr	r2, [sp, #12]
 802813c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028140:	fb02 5503 	mla	r5, r2, r3, r5
 8028144:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028148:	fb04 540e 	mla	r4, r4, lr, r5
 802814c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028150:	fb01 4100 	mla	r1, r1, r0, r4
 8028154:	0a09      	lsrs	r1, r1, #8
 8028156:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802815a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802815e:	fb03 7101 	mla	r1, r3, r1, r7
 8028162:	9b00      	ldr	r3, [sp, #0]
 8028164:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028168:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802816c:	43da      	mvns	r2, r3
 802816e:	1233      	asrs	r3, r6, #8
 8028170:	fb00 e101 	mla	r1, r0, r1, lr
 8028174:	10f0      	asrs	r0, r6, #3
 8028176:	b2d2      	uxtb	r2, r2
 8028178:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802817c:	0a09      	lsrs	r1, r1, #8
 802817e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028182:	00f6      	lsls	r6, r6, #3
 8028184:	4353      	muls	r3, r2
 8028186:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802818a:	4350      	muls	r0, r2
 802818c:	b2f6      	uxtb	r6, r6
 802818e:	4321      	orrs	r1, r4
 8028190:	4356      	muls	r6, r2
 8028192:	1c5a      	adds	r2, r3, #1
 8028194:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028198:	0c0b      	lsrs	r3, r1, #16
 802819a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802819e:	1c42      	adds	r2, r0, #1
 80281a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80281a4:	0a0a      	lsrs	r2, r1, #8
 80281a6:	021b      	lsls	r3, r3, #8
 80281a8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80281ac:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80281b0:	00d2      	lsls	r2, r2, #3
 80281b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80281b6:	4313      	orrs	r3, r2
 80281b8:	1c72      	adds	r2, r6, #1
 80281ba:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80281be:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80281c2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80281c6:	4319      	orrs	r1, r3
 80281c8:	9b02      	ldr	r3, [sp, #8]
 80281ca:	8019      	strh	r1, [r3, #0]
 80281cc:	b005      	add	sp, #20
 80281ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281d2:	2500      	movs	r5, #0
 80281d4:	e6fe      	b.n	8027fd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80281d6:	2100      	movs	r1, #0
 80281d8:	460d      	mov	r5, r1
 80281da:	e706      	b.n	8027fea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80281dc:	2100      	movs	r1, #0
 80281de:	e704      	b.n	8027fea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80281e0:	4631      	mov	r1, r6
 80281e2:	e702      	b.n	8027fea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80281e4:	2400      	movs	r4, #0
 80281e6:	e713      	b.n	8028010 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80281e8:	2200      	movs	r2, #0
 80281ea:	4614      	mov	r4, r2
 80281ec:	e71a      	b.n	8028024 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80281ee:	4602      	mov	r2, r0
 80281f0:	4604      	mov	r4, r0
 80281f2:	e717      	b.n	8028024 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80281f4:	2200      	movs	r2, #0
 80281f6:	e715      	b.n	8028024 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80281f8:	4632      	mov	r2, r6
 80281fa:	e713      	b.n	8028024 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

080281fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80281fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028200:	b09b      	sub	sp, #108	; 0x6c
 8028202:	9218      	str	r2, [sp, #96]	; 0x60
 8028204:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8028206:	9019      	str	r0, [sp, #100]	; 0x64
 8028208:	9116      	str	r1, [sp, #88]	; 0x58
 802820a:	6850      	ldr	r0, [r2, #4]
 802820c:	9307      	str	r3, [sp, #28]
 802820e:	6812      	ldr	r2, [r2, #0]
 8028210:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028214:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028218:	fb00 1303 	mla	r3, r0, r3, r1
 802821c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028220:	930a      	str	r3, [sp, #40]	; 0x28
 8028222:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028224:	681b      	ldr	r3, [r3, #0]
 8028226:	930f      	str	r3, [sp, #60]	; 0x3c
 8028228:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802822a:	2b00      	cmp	r3, #0
 802822c:	dc03      	bgt.n	8028236 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802822e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028230:	2b00      	cmp	r3, #0
 8028232:	f340 8387 	ble.w	8028944 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8028236:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028238:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802823c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028240:	1e48      	subs	r0, r1, #1
 8028242:	1e57      	subs	r7, r2, #1
 8028244:	9b07      	ldr	r3, [sp, #28]
 8028246:	2b00      	cmp	r3, #0
 8028248:	f340 8166 	ble.w	8028518 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802824c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028250:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028254:	d406      	bmi.n	8028264 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8028256:	4584      	cmp	ip, r0
 8028258:	da04      	bge.n	8028264 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802825a:	2b00      	cmp	r3, #0
 802825c:	db02      	blt.n	8028264 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802825e:	42bb      	cmp	r3, r7
 8028260:	f2c0 815b 	blt.w	802851a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028264:	f11c 0c01 	adds.w	ip, ip, #1
 8028268:	f100 814b 	bmi.w	8028502 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802826c:	4561      	cmp	r1, ip
 802826e:	f2c0 8148 	blt.w	8028502 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028272:	3301      	adds	r3, #1
 8028274:	f100 8145 	bmi.w	8028502 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028278:	429a      	cmp	r2, r3
 802827a:	f2c0 8142 	blt.w	8028502 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802827e:	9b07      	ldr	r3, [sp, #28]
 8028280:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028282:	9317      	str	r3, [sp, #92]	; 0x5c
 8028284:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028286:	2b00      	cmp	r3, #0
 8028288:	f340 8165 	ble.w	8028556 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802828c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802828e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028292:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028294:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028298:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802829c:	1422      	asrs	r2, r4, #16
 802829e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80282a2:	689b      	ldr	r3, [r3, #8]
 80282a4:	f100 81d5 	bmi.w	8028652 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80282a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80282ac:	4542      	cmp	r2, r8
 80282ae:	f280 81d0 	bge.w	8028652 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80282b2:	f1bc 0f00 	cmp.w	ip, #0
 80282b6:	f2c0 81cc 	blt.w	8028652 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80282ba:	f10e 38ff 	add.w	r8, lr, #4294967295
 80282be:	45c4      	cmp	ip, r8
 80282c0:	f280 81c7 	bge.w	8028652 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80282c4:	b21b      	sxth	r3, r3
 80282c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80282c8:	fb0c 2203 	mla	r2, ip, r3, r2
 80282cc:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80282d0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80282d4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80282d8:	2900      	cmp	r1, #0
 80282da:	f000 8182 	beq.w	80285e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80282de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80282e2:	950b      	str	r5, [sp, #44]	; 0x2c
 80282e4:	0e2d      	lsrs	r5, r5, #24
 80282e6:	9512      	str	r5, [sp, #72]	; 0x48
 80282e8:	b180      	cbz	r0, 802830c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80282ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80282ee:	3b01      	subs	r3, #1
 80282f0:	009b      	lsls	r3, r3, #2
 80282f2:	3304      	adds	r3, #4
 80282f4:	eb08 0c03 	add.w	ip, r8, r3
 80282f8:	f858 3003 	ldr.w	r3, [r8, r3]
 80282fc:	9308      	str	r3, [sp, #32]
 80282fe:	0e1b      	lsrs	r3, r3, #24
 8028300:	9310      	str	r3, [sp, #64]	; 0x40
 8028302:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028306:	930c      	str	r3, [sp, #48]	; 0x30
 8028308:	0e1b      	lsrs	r3, r3, #24
 802830a:	9313      	str	r3, [sp, #76]	; 0x4c
 802830c:	b289      	uxth	r1, r1
 802830e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028310:	b280      	uxth	r0, r0
 8028312:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028314:	fb01 f900 	mul.w	r9, r1, r0
 8028318:	0109      	lsls	r1, r1, #4
 802831a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802831e:	eba1 0809 	sub.w	r8, r1, r9
 8028322:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8028326:	b280      	uxth	r0, r0
 8028328:	fa1f f888 	uxth.w	r8, r8
 802832c:	1a09      	subs	r1, r1, r0
 802832e:	fb08 f303 	mul.w	r3, r8, r3
 8028332:	b289      	uxth	r1, r1
 8028334:	fb01 330e 	mla	r3, r1, lr, r3
 8028338:	fb00 3305 	mla	r3, r0, r5, r3
 802833c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802833e:	fb09 3305 	mla	r3, r9, r5, r3
 8028342:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028346:	2b00      	cmp	r3, #0
 8028348:	f000 80d2 	beq.w	80284f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802834c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028350:	d01b      	beq.n	802838a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8028352:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028356:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802835a:	fb0e fa0a 	mul.w	sl, lr, sl
 802835e:	fb0e fe02 	mul.w	lr, lr, r2
 8028362:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028366:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802836a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802836e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028372:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028376:	4452      	add	r2, sl
 8028378:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802837c:	0a12      	lsrs	r2, r2, #8
 802837e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028382:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028386:	ea42 020c 	orr.w	r2, r2, ip
 802838a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802838c:	2dff      	cmp	r5, #255	; 0xff
 802838e:	d021      	beq.n	80283d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028390:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028392:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028396:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028398:	fb05 fb0b 	mul.w	fp, r5, fp
 802839c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802839e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80283a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80283a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80283a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80283ac:	fb05 fa0a 	mul.w	sl, r5, sl
 80283b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80283b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80283b8:	44de      	add	lr, fp
 80283ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80283be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80283c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80283c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80283ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80283ce:	ea4e 050a 	orr.w	r5, lr, sl
 80283d2:	950b      	str	r5, [sp, #44]	; 0x2c
 80283d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80283d6:	2dff      	cmp	r5, #255	; 0xff
 80283d8:	d021      	beq.n	802841e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80283da:	9d08      	ldr	r5, [sp, #32]
 80283dc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80283e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80283e2:	fb05 fb0b 	mul.w	fp, r5, fp
 80283e6:	9d08      	ldr	r5, [sp, #32]
 80283e8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80283ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80283ee:	fb05 fa0e 	mul.w	sl, r5, lr
 80283f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80283f6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80283fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80283fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028402:	44de      	add	lr, fp
 8028404:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028408:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802840c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028410:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028414:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028418:	ea4e 050a 	orr.w	r5, lr, sl
 802841c:	9508      	str	r5, [sp, #32]
 802841e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028420:	2dff      	cmp	r5, #255	; 0xff
 8028422:	d021      	beq.n	8028468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028426:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802842a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802842c:	fb05 fb0b 	mul.w	fp, r5, fp
 8028430:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028432:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028436:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028438:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802843c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028440:	fb05 fa0a 	mul.w	sl, r5, sl
 8028444:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028448:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802844c:	44de      	add	lr, fp
 802844e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028452:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028456:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802845a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802845e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028462:	ea4e 050a 	orr.w	r5, lr, sl
 8028466:	950c      	str	r5, [sp, #48]	; 0x30
 8028468:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802846a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802846e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028472:	2bff      	cmp	r3, #255	; 0xff
 8028474:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028478:	9d08      	ldr	r5, [sp, #32]
 802847a:	fb08 fc0c 	mul.w	ip, r8, ip
 802847e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028482:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028488:	fb00 cc0e 	mla	ip, r0, lr, ip
 802848c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028490:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028492:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028496:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802849a:	fb08 f80e 	mul.w	r8, r8, lr
 802849e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80284a2:	fb01 8202 	mla	r2, r1, r2, r8
 80284a6:	9908      	ldr	r1, [sp, #32]
 80284a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80284ac:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80284b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80284b2:	fb00 220a 	mla	r2, r0, sl, r2
 80284b6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80284ba:	fb09 2900 	mla	r9, r9, r0, r2
 80284be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80284c2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80284c6:	ea4c 0c09 	orr.w	ip, ip, r9
 80284ca:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80284ce:	f040 8091 	bne.w	80285f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80284d2:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80284d6:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80284da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80284de:	f022 0207 	bic.w	r2, r2, #7
 80284e2:	431a      	orrs	r2, r3
 80284e4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80284e8:	ea4c 0c02 	orr.w	ip, ip, r2
 80284ec:	f8a7 c000 	strh.w	ip, [r7]
 80284f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80284f2:	3702      	adds	r7, #2
 80284f4:	441c      	add	r4, r3
 80284f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80284f8:	441e      	add	r6, r3
 80284fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80284fc:	3b01      	subs	r3, #1
 80284fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8028500:	e6c0      	b.n	8028284 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028502:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028504:	441c      	add	r4, r3
 8028506:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028508:	441e      	add	r6, r3
 802850a:	9b07      	ldr	r3, [sp, #28]
 802850c:	3b01      	subs	r3, #1
 802850e:	9307      	str	r3, [sp, #28]
 8028510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028512:	3302      	adds	r3, #2
 8028514:	930a      	str	r3, [sp, #40]	; 0x28
 8028516:	e695      	b.n	8028244 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028518:	d024      	beq.n	8028564 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802851a:	9b07      	ldr	r3, [sp, #28]
 802851c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802851e:	3b01      	subs	r3, #1
 8028520:	fb00 4003 	mla	r0, r0, r3, r4
 8028524:	1400      	asrs	r0, r0, #16
 8028526:	f53f aeaa 	bmi.w	802827e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802852a:	3901      	subs	r1, #1
 802852c:	4288      	cmp	r0, r1
 802852e:	f6bf aea6 	bge.w	802827e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8028532:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028534:	fb01 6303 	mla	r3, r1, r3, r6
 8028538:	141b      	asrs	r3, r3, #16
 802853a:	f53f aea0 	bmi.w	802827e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802853e:	3a01      	subs	r2, #1
 8028540:	4293      	cmp	r3, r2
 8028542:	f6bf ae9c 	bge.w	802827e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8028546:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802854a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802854e:	f1bb 0f00 	cmp.w	fp, #0
 8028552:	f300 809a 	bgt.w	802868a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028556:	9b07      	ldr	r3, [sp, #28]
 8028558:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802855e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028562:	930a      	str	r3, [sp, #40]	; 0x28
 8028564:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028566:	2b00      	cmp	r3, #0
 8028568:	f340 81ec 	ble.w	8028944 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802856c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028570:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028572:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028576:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802857a:	eef0 6a62 	vmov.f32	s13, s5
 802857e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028582:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028586:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802858a:	ee16 4a90 	vmov	r4, s13
 802858e:	eef0 6a43 	vmov.f32	s13, s6
 8028592:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028596:	ee16 6a90 	vmov	r6, s13
 802859a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802859e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80285a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80285a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80285aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80285ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80285b2:	ee12 2a90 	vmov	r2, s5
 80285b6:	eef0 2a47 	vmov.f32	s5, s14
 80285ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80285be:	ee13 2a10 	vmov	r2, s6
 80285c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80285c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80285c6:	eeb0 3a67 	vmov.f32	s6, s15
 80285ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80285ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80285d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80285d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80285d4:	3b01      	subs	r3, #1
 80285d6:	9316      	str	r3, [sp, #88]	; 0x58
 80285d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80285da:	bf08      	it	eq
 80285dc:	4613      	moveq	r3, r2
 80285de:	9307      	str	r3, [sp, #28]
 80285e0:	e622      	b.n	8028228 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80285e2:	2800      	cmp	r0, #0
 80285e4:	f43f ae92 	beq.w	802830c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80285e8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80285ec:	9308      	str	r3, [sp, #32]
 80285ee:	0e1b      	lsrs	r3, r3, #24
 80285f0:	9310      	str	r3, [sp, #64]	; 0x40
 80285f2:	e68b      	b.n	802830c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80285f4:	8839      	ldrh	r1, [r7, #0]
 80285f6:	43db      	mvns	r3, r3
 80285f8:	4dd4      	ldr	r5, [pc, #848]	; (802894c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80285fa:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80285fe:	fa5f f883 	uxtb.w	r8, r3
 8028602:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028606:	10c8      	asrs	r0, r1, #3
 8028608:	00cb      	lsls	r3, r1, #3
 802860a:	fb0e fe08 	mul.w	lr, lr, r8
 802860e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028612:	b2db      	uxtb	r3, r3
 8028614:	f10e 0101 	add.w	r1, lr, #1
 8028618:	fb00 f008 	mul.w	r0, r0, r8
 802861c:	fb03 f308 	mul.w	r3, r3, r8
 8028620:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8028624:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8028628:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802862c:	f100 0e01 	add.w	lr, r0, #1
 8028630:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8028634:	b2c9      	uxtb	r1, r1
 8028636:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802863a:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802863e:	00d2      	lsls	r2, r2, #3
 8028640:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028644:	430a      	orrs	r2, r1
 8028646:	1c59      	adds	r1, r3, #1
 8028648:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802864c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028650:	e748      	b.n	80284e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8028652:	f112 0801 	adds.w	r8, r2, #1
 8028656:	f53f af4b 	bmi.w	80284f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802865a:	4543      	cmp	r3, r8
 802865c:	f6ff af48 	blt.w	80284f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028660:	f11c 0801 	adds.w	r8, ip, #1
 8028664:	f53f af44 	bmi.w	80284f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028668:	45c6      	cmp	lr, r8
 802866a:	f6ff af41 	blt.w	80284f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802866e:	b21b      	sxth	r3, r3
 8028670:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028674:	fa0f f28e 	sxth.w	r2, lr
 8028678:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802867c:	9200      	str	r2, [sp, #0]
 802867e:	4639      	mov	r1, r7
 8028680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028682:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028684:	f7ff fc88 	bl	8027f98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028688:	e732      	b.n	80284f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802868a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802868c:	1421      	asrs	r1, r4, #16
 802868e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028690:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028694:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028698:	1433      	asrs	r3, r6, #16
 802869a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802869e:	fb07 1303 	mla	r3, r7, r3, r1
 80286a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80286a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80286a8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80286ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80286b0:	2a00      	cmp	r2, #0
 80286b2:	f000 8108 	beq.w	80288c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80286b6:	684d      	ldr	r5, [r1, #4]
 80286b8:	950d      	str	r5, [sp, #52]	; 0x34
 80286ba:	0e2d      	lsrs	r5, r5, #24
 80286bc:	9514      	str	r5, [sp, #80]	; 0x50
 80286be:	b178      	cbz	r0, 80286e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80286c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80286c4:	3f01      	subs	r7, #1
 80286c6:	00bf      	lsls	r7, r7, #2
 80286c8:	3704      	adds	r7, #4
 80286ca:	eb01 0e07 	add.w	lr, r1, r7
 80286ce:	59c9      	ldr	r1, [r1, r7]
 80286d0:	9109      	str	r1, [sp, #36]	; 0x24
 80286d2:	0e09      	lsrs	r1, r1, #24
 80286d4:	9111      	str	r1, [sp, #68]	; 0x44
 80286d6:	f8de 1004 	ldr.w	r1, [lr, #4]
 80286da:	910e      	str	r1, [sp, #56]	; 0x38
 80286dc:	0e09      	lsrs	r1, r1, #24
 80286de:	9115      	str	r1, [sp, #84]	; 0x54
 80286e0:	b292      	uxth	r2, r2
 80286e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80286e4:	b280      	uxth	r0, r0
 80286e6:	fb02 f900 	mul.w	r9, r2, r0
 80286ea:	0112      	lsls	r2, r2, #4
 80286ec:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80286f0:	eba2 0e09 	sub.w	lr, r2, r9
 80286f4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80286f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80286fa:	b280      	uxth	r0, r0
 80286fc:	fa1f fe8e 	uxth.w	lr, lr
 8028700:	1a09      	subs	r1, r1, r0
 8028702:	fb0e f202 	mul.w	r2, lr, r2
 8028706:	b289      	uxth	r1, r1
 8028708:	fb01 220c 	mla	r2, r1, ip, r2
 802870c:	fb00 2205 	mla	r2, r0, r5, r2
 8028710:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028712:	fb09 2205 	mla	r2, r9, r5, r2
 8028716:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802871a:	2a00      	cmp	r2, #0
 802871c:	f000 80ca 	beq.w	80288b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8028720:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028724:	d019      	beq.n	802875a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8028726:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802872a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802872e:	fb0c fa0a 	mul.w	sl, ip, sl
 8028732:	fb0c fc03 	mul.w	ip, ip, r3
 8028736:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802873a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802873e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028742:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028746:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802874a:	4453      	add	r3, sl
 802874c:	0a3f      	lsrs	r7, r7, #8
 802874e:	0a1b      	lsrs	r3, r3, #8
 8028750:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028754:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028758:	433b      	orrs	r3, r7
 802875a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802875c:	2dff      	cmp	r5, #255	; 0xff
 802875e:	d020      	beq.n	80287a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8028760:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028762:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028766:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028768:	436f      	muls	r7, r5
 802876a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802876c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028770:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028774:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028776:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802877a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802877e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028782:	44bc      	add	ip, r7
 8028784:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028788:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802878c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028790:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028798:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802879c:	ea4c 050a 	orr.w	r5, ip, sl
 80287a0:	950d      	str	r5, [sp, #52]	; 0x34
 80287a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80287a4:	2dff      	cmp	r5, #255	; 0xff
 80287a6:	d020      	beq.n	80287ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80287a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80287aa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80287ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80287b0:	436f      	muls	r7, r5
 80287b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80287b4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80287b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80287ba:	fb05 fa0c 	mul.w	sl, r5, ip
 80287be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80287c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80287c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80287ca:	44bc      	add	ip, r7
 80287cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80287d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80287d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80287d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80287dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80287e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80287e4:	ea4c 050a 	orr.w	r5, ip, sl
 80287e8:	9509      	str	r5, [sp, #36]	; 0x24
 80287ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80287ec:	2dff      	cmp	r5, #255	; 0xff
 80287ee:	d020      	beq.n	8028832 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80287f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80287f2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80287f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80287f8:	436f      	muls	r7, r5
 80287fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80287fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028800:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028804:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028806:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802880a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802880e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028812:	44bc      	add	ip, r7
 8028814:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028818:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802881c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028820:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028824:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028828:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802882c:	ea4c 050a 	orr.w	r5, ip, sl
 8028830:	950e      	str	r5, [sp, #56]	; 0x38
 8028832:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028834:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028838:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802883c:	2aff      	cmp	r2, #255	; 0xff
 802883e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028842:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028844:	fb0e f707 	mul.w	r7, lr, r7
 8028848:	fb01 770c 	mla	r7, r1, ip, r7
 802884c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028850:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028852:	fb00 770c 	mla	r7, r0, ip, r7
 8028856:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802885a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802885c:	fb09 770c 	mla	r7, r9, ip, r7
 8028860:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028864:	fb0e fe0c 	mul.w	lr, lr, ip
 8028868:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802886c:	fb01 e303 	mla	r3, r1, r3, lr
 8028870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028872:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028876:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802887a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802887c:	fb00 330a 	mla	r3, r0, sl, r3
 8028880:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028884:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028888:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802888c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028890:	ea47 070c 	orr.w	r7, r7, ip
 8028894:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8028898:	d11e      	bne.n	80288d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802889a:	097a      	lsrs	r2, r7, #5
 802889c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80288a0:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80288a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80288a8:	f023 0307 	bic.w	r3, r3, #7
 80288ac:	4313      	orrs	r3, r2
 80288ae:	431f      	orrs	r7, r3
 80288b0:	f8a8 7000 	strh.w	r7, [r8]
 80288b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80288b6:	f108 0802 	add.w	r8, r8, #2
 80288ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80288be:	441c      	add	r4, r3
 80288c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288c2:	441e      	add	r6, r3
 80288c4:	e643      	b.n	802854e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80288c6:	2800      	cmp	r0, #0
 80288c8:	f43f af0a 	beq.w	80286e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80288cc:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80288d0:	9109      	str	r1, [sp, #36]	; 0x24
 80288d2:	0e09      	lsrs	r1, r1, #24
 80288d4:	9111      	str	r1, [sp, #68]	; 0x44
 80288d6:	e703      	b.n	80286e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80288d8:	f8b8 1000 	ldrh.w	r1, [r8]
 80288dc:	43d2      	mvns	r2, r2
 80288de:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80288e2:	fa5f fe82 	uxtb.w	lr, r2
 80288e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80288ea:	10c8      	asrs	r0, r1, #3
 80288ec:	00ca      	lsls	r2, r1, #3
 80288ee:	fb0c fc0e 	mul.w	ip, ip, lr
 80288f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80288f6:	b2d2      	uxtb	r2, r2
 80288f8:	f10c 0101 	add.w	r1, ip, #1
 80288fc:	fb00 f00e 	mul.w	r0, r0, lr
 8028900:	fb02 f20e 	mul.w	r2, r2, lr
 8028904:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028908:	0c39      	lsrs	r1, r7, #16
 802890a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802890e:	490f      	ldr	r1, [pc, #60]	; (802894c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8028910:	fa5f fc8c 	uxtb.w	ip, ip
 8028914:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8028918:	1c41      	adds	r1, r0, #1
 802891a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802891e:	1c51      	adds	r1, r2, #1
 8028920:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028924:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028928:	00c0      	lsls	r0, r0, #3
 802892a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802892e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028932:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028936:	ea4c 0c00 	orr.w	ip, ip, r0
 802893a:	ea47 0c0c 	orr.w	ip, r7, ip
 802893e:	f8a8 c000 	strh.w	ip, [r8]
 8028942:	e7b7      	b.n	80288b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8028944:	b01b      	add	sp, #108	; 0x6c
 8028946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802894a:	bf00      	nop
 802894c:	fffff800 	.word	0xfffff800

08028950 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028954:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8028958:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802895c:	2d00      	cmp	r5, #0
 802895e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028962:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8028966:	fb05 0e03 	mla	lr, r5, r3, r0
 802896a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802896e:	f2c0 808c 	blt.w	8028a8a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8028972:	45a9      	cmp	r9, r5
 8028974:	f340 8089 	ble.w	8028a8a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8028978:	2800      	cmp	r0, #0
 802897a:	f2c0 8084 	blt.w	8028a86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802897e:	4580      	cmp	r8, r0
 8028980:	f340 8081 	ble.w	8028a86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8028984:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028988:	f01e 0f01 	tst.w	lr, #1
 802898c:	5d16      	ldrb	r6, [r2, r4]
 802898e:	bf0c      	ite	eq
 8028990:	f006 060f 	andeq.w	r6, r6, #15
 8028994:	1136      	asrne	r6, r6, #4
 8028996:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802899a:	b2f6      	uxtb	r6, r6
 802899c:	1c44      	adds	r4, r0, #1
 802899e:	d477      	bmi.n	8028a90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80289a0:	45a0      	cmp	r8, r4
 80289a2:	dd75      	ble.n	8028a90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80289a4:	2f00      	cmp	r7, #0
 80289a6:	d075      	beq.n	8028a94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80289a8:	f10e 0a01 	add.w	sl, lr, #1
 80289ac:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80289b0:	f01a 0f01 	tst.w	sl, #1
 80289b4:	5d14      	ldrb	r4, [r2, r4]
 80289b6:	bf0c      	ite	eq
 80289b8:	f004 040f 	andeq.w	r4, r4, #15
 80289bc:	1124      	asrne	r4, r4, #4
 80289be:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80289c2:	b2e4      	uxtb	r4, r4
 80289c4:	3501      	adds	r5, #1
 80289c6:	d469      	bmi.n	8028a9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80289c8:	45a9      	cmp	r9, r5
 80289ca:	dd67      	ble.n	8028a9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80289cc:	f1bc 0f00 	cmp.w	ip, #0
 80289d0:	d067      	beq.n	8028aa2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80289d2:	2800      	cmp	r0, #0
 80289d4:	db60      	blt.n	8028a98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80289d6:	4580      	cmp	r8, r0
 80289d8:	dd5e      	ble.n	8028a98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80289da:	eb03 090e 	add.w	r9, r3, lr
 80289de:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80289e2:	f019 0f01 	tst.w	r9, #1
 80289e6:	5d55      	ldrb	r5, [r2, r5]
 80289e8:	bf0c      	ite	eq
 80289ea:	f005 050f 	andeq.w	r5, r5, #15
 80289ee:	112d      	asrne	r5, r5, #4
 80289f0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80289f4:	b2ed      	uxtb	r5, r5
 80289f6:	3001      	adds	r0, #1
 80289f8:	d456      	bmi.n	8028aa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80289fa:	4580      	cmp	r8, r0
 80289fc:	dd54      	ble.n	8028aa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80289fe:	2f00      	cmp	r7, #0
 8028a00:	d054      	beq.n	8028aac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8028a02:	3301      	adds	r3, #1
 8028a04:	449e      	add	lr, r3
 8028a06:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028a0a:	f01e 0f01 	tst.w	lr, #1
 8028a0e:	5cd0      	ldrb	r0, [r2, r3]
 8028a10:	bf0c      	ite	eq
 8028a12:	f000 000f 	andeq.w	r0, r0, #15
 8028a16:	1100      	asrne	r0, r0, #4
 8028a18:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028a1c:	b2c3      	uxtb	r3, r0
 8028a1e:	b2ba      	uxth	r2, r7
 8028a20:	fa1f fc8c 	uxth.w	ip, ip
 8028a24:	fb02 f00c 	mul.w	r0, r2, ip
 8028a28:	0112      	lsls	r2, r2, #4
 8028a2a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028a2e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8028a32:	1a12      	subs	r2, r2, r0
 8028a34:	fa1f fc8c 	uxth.w	ip, ip
 8028a38:	b292      	uxth	r2, r2
 8028a3a:	eba7 070c 	sub.w	r7, r7, ip
 8028a3e:	4362      	muls	r2, r4
 8028a40:	b2bf      	uxth	r7, r7
 8028a42:	fb06 2207 	mla	r2, r6, r7, r2
 8028a46:	fb0c 2505 	mla	r5, ip, r5, r2
 8028a4a:	fb00 5303 	mla	r3, r0, r3, r5
 8028a4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a52:	b1b3      	cbz	r3, 8028a82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028a54:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8028a58:	435a      	muls	r2, r3
 8028a5a:	1c53      	adds	r3, r2, #1
 8028a5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028a60:	4a2d      	ldr	r2, [pc, #180]	; (8028b18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8028a62:	121b      	asrs	r3, r3, #8
 8028a64:	6812      	ldr	r2, [r2, #0]
 8028a66:	2bff      	cmp	r3, #255	; 0xff
 8028a68:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8028a6c:	d120      	bne.n	8028ab0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8028a6e:	0950      	lsrs	r0, r2, #5
 8028a70:	4b2a      	ldr	r3, [pc, #168]	; (8028b1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8028a72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028a76:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028a7a:	4033      	ands	r3, r6
 8028a7c:	4318      	orrs	r0, r3
 8028a7e:	4302      	orrs	r2, r0
 8028a80:	800a      	strh	r2, [r1, #0]
 8028a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028a86:	2600      	movs	r6, #0
 8028a88:	e788      	b.n	802899c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8028a8a:	2400      	movs	r4, #0
 8028a8c:	4626      	mov	r6, r4
 8028a8e:	e799      	b.n	80289c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028a90:	2400      	movs	r4, #0
 8028a92:	e797      	b.n	80289c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028a94:	463c      	mov	r4, r7
 8028a96:	e795      	b.n	80289c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028a98:	2500      	movs	r5, #0
 8028a9a:	e7ac      	b.n	80289f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8028a9c:	2300      	movs	r3, #0
 8028a9e:	461d      	mov	r5, r3
 8028aa0:	e7bd      	b.n	8028a1e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028aa2:	4663      	mov	r3, ip
 8028aa4:	4665      	mov	r5, ip
 8028aa6:	e7ba      	b.n	8028a1e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028aa8:	2300      	movs	r3, #0
 8028aaa:	e7b8      	b.n	8028a1e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028aac:	463b      	mov	r3, r7
 8028aae:	e7b6      	b.n	8028a1e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028ab0:	880d      	ldrh	r5, [r1, #0]
 8028ab2:	b29f      	uxth	r7, r3
 8028ab4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028ab8:	43db      	mvns	r3, r3
 8028aba:	122c      	asrs	r4, r5, #8
 8028abc:	fb10 f007 	smulbb	r0, r0, r7
 8028ac0:	b2db      	uxtb	r3, r3
 8028ac2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028ac6:	b2f6      	uxtb	r6, r6
 8028ac8:	b2d2      	uxtb	r2, r2
 8028aca:	fb04 0403 	mla	r4, r4, r3, r0
 8028ace:	10e8      	asrs	r0, r5, #3
 8028ad0:	fb12 f207 	smulbb	r2, r2, r7
 8028ad4:	00ed      	lsls	r5, r5, #3
 8028ad6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028ada:	b2a4      	uxth	r4, r4
 8028adc:	fb16 f607 	smulbb	r6, r6, r7
 8028ae0:	b2ed      	uxtb	r5, r5
 8028ae2:	fb00 6603 	mla	r6, r0, r3, r6
 8028ae6:	fb05 2303 	mla	r3, r5, r3, r2
 8028aea:	b2b0      	uxth	r0, r6
 8028aec:	b29a      	uxth	r2, r3
 8028aee:	1c63      	adds	r3, r4, #1
 8028af0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028af4:	1c53      	adds	r3, r2, #1
 8028af6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028afa:	1c42      	adds	r2, r0, #1
 8028afc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028b00:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028b04:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028b08:	0940      	lsrs	r0, r0, #5
 8028b0a:	4323      	orrs	r3, r4
 8028b0c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028b10:	4303      	orrs	r3, r0
 8028b12:	800b      	strh	r3, [r1, #0]
 8028b14:	e7b5      	b.n	8028a82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028b16:	bf00      	nop
 8028b18:	20015128 	.word	0x20015128
 8028b1c:	00fff800 	.word	0x00fff800

08028b20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b24:	b097      	sub	sp, #92	; 0x5c
 8028b26:	9214      	str	r2, [sp, #80]	; 0x50
 8028b28:	9309      	str	r3, [sp, #36]	; 0x24
 8028b2a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8028b2c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8028b30:	9015      	str	r0, [sp, #84]	; 0x54
 8028b32:	910d      	str	r1, [sp, #52]	; 0x34
 8028b34:	6850      	ldr	r0, [r2, #4]
 8028b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8028b38:	6812      	ldr	r2, [r2, #0]
 8028b3a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8028b3e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8028b42:	fb00 1303 	mla	r3, r0, r3, r1
 8028b46:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028b4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b4c:	689b      	ldr	r3, [r3, #8]
 8028b4e:	3301      	adds	r3, #1
 8028b50:	f023 0301 	bic.w	r3, r3, #1
 8028b54:	930a      	str	r3, [sp, #40]	; 0x28
 8028b56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b58:	681f      	ldr	r7, [r3, #0]
 8028b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028b5c:	2b00      	cmp	r3, #0
 8028b5e:	dc03      	bgt.n	8028b68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028b60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028b62:	2b00      	cmp	r3, #0
 8028b64:	f340 8289 	ble.w	802907a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8028b68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028b72:	1e48      	subs	r0, r1, #1
 8028b74:	f102 3cff 	add.w	ip, r2, #4294967295
 8028b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b7a:	2b00      	cmp	r3, #0
 8028b7c:	f340 80c5 	ble.w	8028d0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028b80:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028b84:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028b88:	d406      	bmi.n	8028b98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028b8a:	4586      	cmp	lr, r0
 8028b8c:	da04      	bge.n	8028b98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028b8e:	2b00      	cmp	r3, #0
 8028b90:	db02      	blt.n	8028b98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028b92:	4563      	cmp	r3, ip
 8028b94:	f2c0 80ba 	blt.w	8028d0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8028b98:	f11e 0e01 	adds.w	lr, lr, #1
 8028b9c:	f100 80ab 	bmi.w	8028cf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028ba0:	4571      	cmp	r1, lr
 8028ba2:	f2c0 80a8 	blt.w	8028cf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028ba6:	3301      	adds	r3, #1
 8028ba8:	f100 80a5 	bmi.w	8028cf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028bac:	429a      	cmp	r2, r3
 8028bae:	f2c0 80a2 	blt.w	8028cf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028bb4:	46c8      	mov	r8, r9
 8028bb6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8028bba:	930e      	str	r3, [sp, #56]	; 0x38
 8028bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028bbe:	2b00      	cmp	r3, #0
 8028bc0:	f340 80c4 	ble.w	8028d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8028bc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028bc6:	1430      	asrs	r0, r6, #16
 8028bc8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028bcc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028bd0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028bd4:	1423      	asrs	r3, r4, #16
 8028bd6:	f100 814f 	bmi.w	8028e78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028bda:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028bde:	455b      	cmp	r3, fp
 8028be0:	f280 814a 	bge.w	8028e78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028be4:	2800      	cmp	r0, #0
 8028be6:	f2c0 8147 	blt.w	8028e78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028bea:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028bee:	4558      	cmp	r0, fp
 8028bf0:	f280 8142 	bge.w	8028e78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028bf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028bf6:	fb00 3305 	mla	r3, r0, r5, r3
 8028bfa:	0858      	lsrs	r0, r3, #1
 8028bfc:	07dd      	lsls	r5, r3, #31
 8028bfe:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028c02:	bf54      	ite	pl
 8028c04:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028c08:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028c0c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028c10:	fa5f fc8c 	uxtb.w	ip, ip
 8028c14:	2a00      	cmp	r2, #0
 8028c16:	f000 80dd 	beq.w	8028dd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8028c1a:	1c58      	adds	r0, r3, #1
 8028c1c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028c20:	07c0      	lsls	r0, r0, #31
 8028c22:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028c26:	bf54      	ite	pl
 8028c28:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028c2c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028c30:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028c34:	fa5f f08e 	uxtb.w	r0, lr
 8028c38:	9010      	str	r0, [sp, #64]	; 0x40
 8028c3a:	b1d9      	cbz	r1, 8028c74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028c3c:	4453      	add	r3, sl
 8028c3e:	0858      	lsrs	r0, r3, #1
 8028c40:	07dd      	lsls	r5, r3, #31
 8028c42:	f103 0301 	add.w	r3, r3, #1
 8028c46:	5c38      	ldrb	r0, [r7, r0]
 8028c48:	bf54      	ite	pl
 8028c4a:	f000 000f 	andpl.w	r0, r0, #15
 8028c4e:	1100      	asrmi	r0, r0, #4
 8028c50:	07dd      	lsls	r5, r3, #31
 8028c52:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028c56:	b2c0      	uxtb	r0, r0
 8028c58:	900b      	str	r0, [sp, #44]	; 0x2c
 8028c5a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8028c5e:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028c62:	bf54      	ite	pl
 8028c64:	f00e 030f 	andpl.w	r3, lr, #15
 8028c68:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028c6c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028c70:	b2db      	uxtb	r3, r3
 8028c72:	9311      	str	r3, [sp, #68]	; 0x44
 8028c74:	b292      	uxth	r2, r2
 8028c76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028c78:	b289      	uxth	r1, r1
 8028c7a:	fb02 f301 	mul.w	r3, r2, r1
 8028c7e:	0112      	lsls	r2, r2, #4
 8028c80:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028c84:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028c88:	1ad2      	subs	r2, r2, r3
 8028c8a:	b289      	uxth	r1, r1
 8028c8c:	b292      	uxth	r2, r2
 8028c8e:	1a40      	subs	r0, r0, r1
 8028c90:	436a      	muls	r2, r5
 8028c92:	b280      	uxth	r0, r0
 8028c94:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028c9a:	fb01 c102 	mla	r1, r1, r2, ip
 8028c9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028ca0:	fb03 1302 	mla	r3, r3, r2, r1
 8028ca4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028ca8:	b1db      	cbz	r3, 8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028caa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028cac:	4353      	muls	r3, r2
 8028cae:	1c5a      	adds	r2, r3, #1
 8028cb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028cb4:	4ac6      	ldr	r2, [pc, #792]	; (8028fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028cb6:	121b      	asrs	r3, r3, #8
 8028cb8:	6812      	ldr	r2, [r2, #0]
 8028cba:	2bff      	cmp	r3, #255	; 0xff
 8028cbc:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028cc0:	f040 8099 	bne.w	8028df6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8028cc4:	0953      	lsrs	r3, r2, #5
 8028cc6:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028cca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028cce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028cd2:	f02c 0c07 	bic.w	ip, ip, #7
 8028cd6:	ea43 0c0c 	orr.w	ip, r3, ip
 8028cda:	ea4c 0202 	orr.w	r2, ip, r2
 8028cde:	f8a8 2000 	strh.w	r2, [r8]
 8028ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028ce4:	f108 0802 	add.w	r8, r8, #2
 8028ce8:	441c      	add	r4, r3
 8028cea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028cec:	441e      	add	r6, r3
 8028cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028cf0:	3b01      	subs	r3, #1
 8028cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8028cf4:	e762      	b.n	8028bbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028cf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028cf8:	f109 0902 	add.w	r9, r9, #2
 8028cfc:	441c      	add	r4, r3
 8028cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d00:	441e      	add	r6, r3
 8028d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d04:	3b01      	subs	r3, #1
 8028d06:	9309      	str	r3, [sp, #36]	; 0x24
 8028d08:	e736      	b.n	8028b78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028d0a:	d024      	beq.n	8028d56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d0e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028d10:	3b01      	subs	r3, #1
 8028d12:	fb00 4003 	mla	r0, r0, r3, r4
 8028d16:	1400      	asrs	r0, r0, #16
 8028d18:	f53f af4b 	bmi.w	8028bb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028d1c:	3901      	subs	r1, #1
 8028d1e:	4288      	cmp	r0, r1
 8028d20:	f6bf af47 	bge.w	8028bb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028d24:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028d26:	fb01 6303 	mla	r3, r1, r3, r6
 8028d2a:	141b      	asrs	r3, r3, #16
 8028d2c:	f53f af41 	bmi.w	8028bb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028d30:	3a01      	subs	r2, #1
 8028d32:	4293      	cmp	r3, r2
 8028d34:	f6bf af3d 	bge.w	8028bb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028d38:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028d3c:	46c8      	mov	r8, r9
 8028d3e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8028d42:	930e      	str	r3, [sp, #56]	; 0x38
 8028d44:	f1bb 0f00 	cmp.w	fp, #0
 8028d48:	f300 80b7 	bgt.w	8028eba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8028d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d4e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028d52:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028d58:	2b00      	cmp	r3, #0
 8028d5a:	f340 818e 	ble.w	802907a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8028d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028d62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028d64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028d68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028d6c:	eef0 6a62 	vmov.f32	s13, s5
 8028d70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028d74:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028d78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d7c:	ee16 4a90 	vmov	r4, s13
 8028d80:	eef0 6a43 	vmov.f32	s13, s6
 8028d84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d88:	ee16 6a90 	vmov	r6, s13
 8028d8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028d90:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028d94:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028d98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028d9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028da0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028da4:	ee12 2a90 	vmov	r2, s5
 8028da8:	eef0 2a47 	vmov.f32	s5, s14
 8028dac:	fb92 f3f3 	sdiv	r3, r2, r3
 8028db0:	ee13 2a10 	vmov	r2, s6
 8028db4:	9323      	str	r3, [sp, #140]	; 0x8c
 8028db6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028db8:	eeb0 3a67 	vmov.f32	s6, s15
 8028dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8028dc0:	9324      	str	r3, [sp, #144]	; 0x90
 8028dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028dc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028dc6:	3b01      	subs	r3, #1
 8028dc8:	930d      	str	r3, [sp, #52]	; 0x34
 8028dca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028dcc:	bf08      	it	eq
 8028dce:	4613      	moveq	r3, r2
 8028dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8028dd2:	e6c2      	b.n	8028b5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028dd4:	2900      	cmp	r1, #0
 8028dd6:	f43f af4d 	beq.w	8028c74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028dda:	eb0a 0003 	add.w	r0, sl, r3
 8028dde:	0843      	lsrs	r3, r0, #1
 8028de0:	07c0      	lsls	r0, r0, #31
 8028de2:	5cfb      	ldrb	r3, [r7, r3]
 8028de4:	bf54      	ite	pl
 8028de6:	f003 030f 	andpl.w	r3, r3, #15
 8028dea:	111b      	asrmi	r3, r3, #4
 8028dec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028df0:	b2db      	uxtb	r3, r3
 8028df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8028df4:	e73e      	b.n	8028c74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028df6:	f8b8 e000 	ldrh.w	lr, [r8]
 8028dfa:	fa1f fb83 	uxth.w	fp, r3
 8028dfe:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028e02:	43db      	mvns	r3, r3
 8028e04:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028e08:	fb11 f10b 	smulbb	r1, r1, fp
 8028e0c:	b2db      	uxtb	r3, r3
 8028e0e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028e12:	fa5f fc8c 	uxtb.w	ip, ip
 8028e16:	b2d2      	uxtb	r2, r2
 8028e18:	fb00 1003 	mla	r0, r0, r3, r1
 8028e1c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028e20:	fb1c fc0b 	smulbb	ip, ip, fp
 8028e24:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028e28:	b280      	uxth	r0, r0
 8028e2a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028e2e:	fb12 fb0b 	smulbb	fp, r2, fp
 8028e32:	fa5f fe8e 	uxtb.w	lr, lr
 8028e36:	fb01 cc03 	mla	ip, r1, r3, ip
 8028e3a:	fb0e bb03 	mla	fp, lr, r3, fp
 8028e3e:	1c43      	adds	r3, r0, #1
 8028e40:	fa1f fc8c 	uxth.w	ip, ip
 8028e44:	fa1f fb8b 	uxth.w	fp, fp
 8028e48:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028e4c:	f10c 0101 	add.w	r1, ip, #1
 8028e50:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8028e54:	f10b 0001 	add.w	r0, fp, #1
 8028e58:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028e5c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028e60:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028e64:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028e68:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028e6c:	4318      	orrs	r0, r3
 8028e6e:	ea40 000c 	orr.w	r0, r0, ip
 8028e72:	f8a8 0000 	strh.w	r0, [r8]
 8028e76:	e734      	b.n	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e78:	f113 0b01 	adds.w	fp, r3, #1
 8028e7c:	f53f af31 	bmi.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e80:	45dc      	cmp	ip, fp
 8028e82:	f6ff af2e 	blt.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e86:	f110 0b01 	adds.w	fp, r0, #1
 8028e8a:	f53f af2a 	bmi.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e8e:	45de      	cmp	lr, fp
 8028e90:	f6ff af27 	blt.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e94:	9302      	str	r3, [sp, #8]
 8028e96:	fa0f f38e 	sxth.w	r3, lr
 8028e9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028e9c:	9301      	str	r3, [sp, #4]
 8028e9e:	fa0f f38c 	sxth.w	r3, ip
 8028ea2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028ea6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028eaa:	9300      	str	r3, [sp, #0]
 8028eac:	463a      	mov	r2, r7
 8028eae:	4653      	mov	r3, sl
 8028eb0:	4641      	mov	r1, r8
 8028eb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028eb4:	f7ff fd4c 	bl	8028950 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028eb8:	e713      	b.n	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028eba:	1422      	asrs	r2, r4, #16
 8028ebc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028ebe:	1433      	asrs	r3, r6, #16
 8028ec0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028ec4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028ec8:	fb05 2303 	mla	r3, r5, r3, r2
 8028ecc:	085a      	lsrs	r2, r3, #1
 8028ece:	07dd      	lsls	r5, r3, #31
 8028ed0:	5cba      	ldrb	r2, [r7, r2]
 8028ed2:	bf54      	ite	pl
 8028ed4:	f002 020f 	andpl.w	r2, r2, #15
 8028ed8:	1112      	asrmi	r2, r2, #4
 8028eda:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028ede:	b2d2      	uxtb	r2, r2
 8028ee0:	2900      	cmp	r1, #0
 8028ee2:	d077      	beq.n	8028fd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028ee4:	f103 0e01 	add.w	lr, r3, #1
 8028ee8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028eec:	f01e 0f01 	tst.w	lr, #1
 8028ef0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028ef4:	bf0c      	ite	eq
 8028ef6:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028efa:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028efe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f02:	fa5f f58c 	uxtb.w	r5, ip
 8028f06:	9512      	str	r5, [sp, #72]	; 0x48
 8028f08:	b308      	cbz	r0, 8028f4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028f0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f0c:	442b      	add	r3, r5
 8028f0e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028f12:	07dd      	lsls	r5, r3, #31
 8028f14:	f103 0301 	add.w	r3, r3, #1
 8028f18:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028f1c:	bf54      	ite	pl
 8028f1e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028f22:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028f26:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f2a:	fa5f f58c 	uxtb.w	r5, ip
 8028f2e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028f32:	950c      	str	r5, [sp, #48]	; 0x30
 8028f34:	07dd      	lsls	r5, r3, #31
 8028f36:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028f3a:	bf54      	ite	pl
 8028f3c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028f40:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028f44:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f48:	fa5f f38c 	uxtb.w	r3, ip
 8028f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8028f4e:	b289      	uxth	r1, r1
 8028f50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028f52:	b280      	uxth	r0, r0
 8028f54:	fb01 f300 	mul.w	r3, r1, r0
 8028f58:	0109      	lsls	r1, r1, #4
 8028f5a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028f5e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028f62:	1ac9      	subs	r1, r1, r3
 8028f64:	b280      	uxth	r0, r0
 8028f66:	b289      	uxth	r1, r1
 8028f68:	ebac 0c00 	sub.w	ip, ip, r0
 8028f6c:	4369      	muls	r1, r5
 8028f6e:	fa1f fc8c 	uxth.w	ip, ip
 8028f72:	fb02 120c 	mla	r2, r2, ip, r1
 8028f76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028f78:	fb00 2001 	mla	r0, r0, r1, r2
 8028f7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028f7e:	fb03 0302 	mla	r3, r3, r2, r0
 8028f82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028f86:	b1d3      	cbz	r3, 8028fbe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028f88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028f8a:	4353      	muls	r3, r2
 8028f8c:	1c5a      	adds	r2, r3, #1
 8028f8e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028f92:	4a0f      	ldr	r2, [pc, #60]	; (8028fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028f94:	121b      	asrs	r3, r3, #8
 8028f96:	6812      	ldr	r2, [r2, #0]
 8028f98:	2bff      	cmp	r3, #255	; 0xff
 8028f9a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028f9e:	d12d      	bne.n	8028ffc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8028fa0:	0953      	lsrs	r3, r2, #5
 8028fa2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028fa6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028faa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028fae:	f02c 0c07 	bic.w	ip, ip, #7
 8028fb2:	ea43 0c0c 	orr.w	ip, r3, ip
 8028fb6:	ea4c 0202 	orr.w	r2, ip, r2
 8028fba:	f8a8 2000 	strh.w	r2, [r8]
 8028fbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028fc0:	f108 0802 	add.w	r8, r8, #2
 8028fc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028fc8:	441c      	add	r4, r3
 8028fca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028fcc:	441e      	add	r6, r3
 8028fce:	e6b9      	b.n	8028d44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028fd0:	20015128 	.word	0x20015128
 8028fd4:	2800      	cmp	r0, #0
 8028fd6:	d0ba      	beq.n	8028f4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028fd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028fda:	442b      	add	r3, r5
 8028fdc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028fe0:	07db      	lsls	r3, r3, #31
 8028fe2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028fe6:	bf54      	ite	pl
 8028fe8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028fec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028ff0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028ff4:	fa5f f38c 	uxtb.w	r3, ip
 8028ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8028ffa:	e7a8      	b.n	8028f4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028ffc:	f8b8 e000 	ldrh.w	lr, [r8]
 8029000:	fa1f fa83 	uxth.w	sl, r3
 8029004:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029008:	43db      	mvns	r3, r3
 802900a:	ea4f 202e 	mov.w	r0, lr, asr #8
 802900e:	fb11 f10a 	smulbb	r1, r1, sl
 8029012:	b2db      	uxtb	r3, r3
 8029014:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029018:	b2d2      	uxtb	r2, r2
 802901a:	fa5f fc8c 	uxtb.w	ip, ip
 802901e:	fb00 1003 	mla	r0, r0, r3, r1
 8029022:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029026:	fb12 f20a 	smulbb	r2, r2, sl
 802902a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802902e:	b280      	uxth	r0, r0
 8029030:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029034:	fb1c fc0a 	smulbb	ip, ip, sl
 8029038:	fa5f fe8e 	uxtb.w	lr, lr
 802903c:	fb0e 2203 	mla	r2, lr, r3, r2
 8029040:	fb01 cc03 	mla	ip, r1, r3, ip
 8029044:	1c43      	adds	r3, r0, #1
 8029046:	b292      	uxth	r2, r2
 8029048:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802904c:	1c51      	adds	r1, r2, #1
 802904e:	fa1f fc8c 	uxth.w	ip, ip
 8029052:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8029056:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802905a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802905e:	4308      	orrs	r0, r1
 8029060:	f10c 0101 	add.w	r1, ip, #1
 8029064:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029068:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802906c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029070:	ea40 000c 	orr.w	r0, r0, ip
 8029074:	f8a8 0000 	strh.w	r0, [r8]
 8029078:	e7a1      	b.n	8028fbe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802907a:	b017      	add	sp, #92	; 0x5c
 802907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029080 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029084:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8029088:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802908c:	2d00      	cmp	r5, #0
 802908e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029092:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8029096:	fb05 0e03 	mla	lr, r5, r3, r0
 802909a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802909e:	f2c0 80b0 	blt.w	8029202 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80290a2:	45a9      	cmp	r9, r5
 80290a4:	f340 80ad 	ble.w	8029202 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80290a8:	2800      	cmp	r0, #0
 80290aa:	f2c0 80a8 	blt.w	80291fe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80290ae:	4580      	cmp	r8, r0
 80290b0:	f340 80a5 	ble.w	80291fe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80290b4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80290b8:	f01e 0f01 	tst.w	lr, #1
 80290bc:	5d16      	ldrb	r6, [r2, r4]
 80290be:	bf0c      	ite	eq
 80290c0:	f006 060f 	andeq.w	r6, r6, #15
 80290c4:	1136      	asrne	r6, r6, #4
 80290c6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80290ca:	b2f6      	uxtb	r6, r6
 80290cc:	1c44      	adds	r4, r0, #1
 80290ce:	f100 809b 	bmi.w	8029208 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80290d2:	45a0      	cmp	r8, r4
 80290d4:	f340 8098 	ble.w	8029208 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80290d8:	2f00      	cmp	r7, #0
 80290da:	f000 8097 	beq.w	802920c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80290de:	f10e 0a01 	add.w	sl, lr, #1
 80290e2:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80290e6:	f01a 0f01 	tst.w	sl, #1
 80290ea:	5d14      	ldrb	r4, [r2, r4]
 80290ec:	bf0c      	ite	eq
 80290ee:	f004 040f 	andeq.w	r4, r4, #15
 80290f2:	1124      	asrne	r4, r4, #4
 80290f4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80290f8:	b2e4      	uxtb	r4, r4
 80290fa:	3501      	adds	r5, #1
 80290fc:	f100 808a 	bmi.w	8029214 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8029100:	45a9      	cmp	r9, r5
 8029102:	f340 8087 	ble.w	8029214 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8029106:	f1bc 0f00 	cmp.w	ip, #0
 802910a:	f000 8086 	beq.w	802921a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802910e:	2800      	cmp	r0, #0
 8029110:	db7e      	blt.n	8029210 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8029112:	4580      	cmp	r8, r0
 8029114:	dd7c      	ble.n	8029210 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8029116:	eb03 090e 	add.w	r9, r3, lr
 802911a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802911e:	f019 0f01 	tst.w	r9, #1
 8029122:	5d55      	ldrb	r5, [r2, r5]
 8029124:	bf0c      	ite	eq
 8029126:	f005 050f 	andeq.w	r5, r5, #15
 802912a:	112d      	asrne	r5, r5, #4
 802912c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029130:	b2ed      	uxtb	r5, r5
 8029132:	3001      	adds	r0, #1
 8029134:	d474      	bmi.n	8029220 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8029136:	4580      	cmp	r8, r0
 8029138:	dd72      	ble.n	8029220 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802913a:	2f00      	cmp	r7, #0
 802913c:	d072      	beq.n	8029224 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802913e:	3301      	adds	r3, #1
 8029140:	449e      	add	lr, r3
 8029142:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029146:	f01e 0f01 	tst.w	lr, #1
 802914a:	5cd0      	ldrb	r0, [r2, r3]
 802914c:	bf0c      	ite	eq
 802914e:	f000 000f 	andeq.w	r0, r0, #15
 8029152:	1100      	asrne	r0, r0, #4
 8029154:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029158:	b2c3      	uxtb	r3, r0
 802915a:	b2ba      	uxth	r2, r7
 802915c:	fa1f fc8c 	uxth.w	ip, ip
 8029160:	fb02 f00c 	mul.w	r0, r2, ip
 8029164:	0112      	lsls	r2, r2, #4
 8029166:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802916a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802916e:	1a12      	subs	r2, r2, r0
 8029170:	fa1f fc8c 	uxth.w	ip, ip
 8029174:	b292      	uxth	r2, r2
 8029176:	eba7 070c 	sub.w	r7, r7, ip
 802917a:	4362      	muls	r2, r4
 802917c:	b2bf      	uxth	r7, r7
 802917e:	fb06 2207 	mla	r2, r6, r7, r2
 8029182:	fb0c 2505 	mla	r5, ip, r5, r2
 8029186:	fb00 5303 	mla	r3, r0, r3, r5
 802918a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802918e:	b3a3      	cbz	r3, 80291fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8029190:	4a25      	ldr	r2, [pc, #148]	; (8029228 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8029192:	880e      	ldrh	r6, [r1, #0]
 8029194:	6815      	ldr	r5, [r2, #0]
 8029196:	b29a      	uxth	r2, r3
 8029198:	1234      	asrs	r4, r6, #8
 802919a:	43db      	mvns	r3, r3
 802919c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80291a0:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80291a4:	b2db      	uxtb	r3, r3
 80291a6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80291aa:	fb10 f002 	smulbb	r0, r0, r2
 80291ae:	b2ed      	uxtb	r5, r5
 80291b0:	fb17 f702 	smulbb	r7, r7, r2
 80291b4:	fb04 0403 	mla	r4, r4, r3, r0
 80291b8:	10f0      	asrs	r0, r6, #3
 80291ba:	fb15 f202 	smulbb	r2, r5, r2
 80291be:	00f6      	lsls	r6, r6, #3
 80291c0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80291c4:	b2a4      	uxth	r4, r4
 80291c6:	b2f6      	uxtb	r6, r6
 80291c8:	fb00 7003 	mla	r0, r0, r3, r7
 80291cc:	fb06 2303 	mla	r3, r6, r3, r2
 80291d0:	b280      	uxth	r0, r0
 80291d2:	b29a      	uxth	r2, r3
 80291d4:	1c63      	adds	r3, r4, #1
 80291d6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80291da:	1c53      	adds	r3, r2, #1
 80291dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80291e0:	1c42      	adds	r2, r0, #1
 80291e2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80291e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80291ea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80291ee:	0940      	lsrs	r0, r0, #5
 80291f0:	4323      	orrs	r3, r4
 80291f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80291f6:	4303      	orrs	r3, r0
 80291f8:	800b      	strh	r3, [r1, #0]
 80291fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80291fe:	2600      	movs	r6, #0
 8029200:	e764      	b.n	80290cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8029202:	2400      	movs	r4, #0
 8029204:	4626      	mov	r6, r4
 8029206:	e778      	b.n	80290fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8029208:	2400      	movs	r4, #0
 802920a:	e776      	b.n	80290fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802920c:	463c      	mov	r4, r7
 802920e:	e774      	b.n	80290fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8029210:	2500      	movs	r5, #0
 8029212:	e78e      	b.n	8029132 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8029214:	2300      	movs	r3, #0
 8029216:	461d      	mov	r5, r3
 8029218:	e79f      	b.n	802915a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802921a:	4663      	mov	r3, ip
 802921c:	4665      	mov	r5, ip
 802921e:	e79c      	b.n	802915a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029220:	2300      	movs	r3, #0
 8029222:	e79a      	b.n	802915a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029224:	463b      	mov	r3, r7
 8029226:	e798      	b.n	802915a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029228:	20015128 	.word	0x20015128

0802922c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029230:	b093      	sub	sp, #76	; 0x4c
 8029232:	461d      	mov	r5, r3
 8029234:	920c      	str	r2, [sp, #48]	; 0x30
 8029236:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8029238:	9011      	str	r0, [sp, #68]	; 0x44
 802923a:	9107      	str	r1, [sp, #28]
 802923c:	6850      	ldr	r0, [r2, #4]
 802923e:	6812      	ldr	r2, [r2, #0]
 8029240:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8029244:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8029248:	fb00 1303 	mla	r3, r0, r3, r1
 802924c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029250:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029252:	689b      	ldr	r3, [r3, #8]
 8029254:	3301      	adds	r3, #1
 8029256:	f023 0301 	bic.w	r3, r3, #1
 802925a:	9306      	str	r3, [sp, #24]
 802925c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802925e:	681f      	ldr	r7, [r3, #0]
 8029260:	9b07      	ldr	r3, [sp, #28]
 8029262:	2b00      	cmp	r3, #0
 8029264:	dc03      	bgt.n	802926e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8029266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029268:	2b00      	cmp	r3, #0
 802926a:	f340 8267 	ble.w	802973c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802926e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029270:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029274:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029278:	1e48      	subs	r0, r1, #1
 802927a:	f102 3cff 	add.w	ip, r2, #4294967295
 802927e:	2d00      	cmp	r5, #0
 8029280:	f340 80b7 	ble.w	80293f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029284:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029288:	ea4f 4326 	mov.w	r3, r6, asr #16
 802928c:	d406      	bmi.n	802929c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802928e:	4586      	cmp	lr, r0
 8029290:	da04      	bge.n	802929c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8029292:	2b00      	cmp	r3, #0
 8029294:	db02      	blt.n	802929c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8029296:	4563      	cmp	r3, ip
 8029298:	f2c0 80ac 	blt.w	80293f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802929c:	f11e 0e01 	adds.w	lr, lr, #1
 80292a0:	f100 809f 	bmi.w	80293e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80292a4:	4571      	cmp	r1, lr
 80292a6:	f2c0 809c 	blt.w	80293e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80292aa:	3301      	adds	r3, #1
 80292ac:	f100 8099 	bmi.w	80293e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80292b0:	429a      	cmp	r2, r3
 80292b2:	f2c0 8096 	blt.w	80293e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80292b6:	46c8      	mov	r8, r9
 80292b8:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80292bc:	9509      	str	r5, [sp, #36]	; 0x24
 80292be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80292c0:	2b00      	cmp	r3, #0
 80292c2:	f340 80b5 	ble.w	8029430 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80292c6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80292ca:	1430      	asrs	r0, r6, #16
 80292cc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80292d0:	9308      	str	r3, [sp, #32]
 80292d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80292d4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80292d8:	1423      	asrs	r3, r4, #16
 80292da:	f100 813f 	bmi.w	802955c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80292de:	f10c 3bff 	add.w	fp, ip, #4294967295
 80292e2:	455b      	cmp	r3, fp
 80292e4:	f280 813a 	bge.w	802955c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80292e8:	2800      	cmp	r0, #0
 80292ea:	f2c0 8137 	blt.w	802955c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80292ee:	f10e 3bff 	add.w	fp, lr, #4294967295
 80292f2:	4558      	cmp	r0, fp
 80292f4:	f280 8132 	bge.w	802955c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80292f8:	9a06      	ldr	r2, [sp, #24]
 80292fa:	fb00 3302 	mla	r3, r0, r2, r3
 80292fe:	0858      	lsrs	r0, r3, #1
 8029300:	07da      	lsls	r2, r3, #31
 8029302:	9a08      	ldr	r2, [sp, #32]
 8029304:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029308:	bf54      	ite	pl
 802930a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802930e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029312:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029316:	fa5f fc8c 	uxtb.w	ip, ip
 802931a:	2a00      	cmp	r2, #0
 802931c:	f000 80cc 	beq.w	80294b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8029320:	1c58      	adds	r0, r3, #1
 8029322:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029326:	07c0      	lsls	r0, r0, #31
 8029328:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802932c:	bf54      	ite	pl
 802932e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029332:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029336:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802933a:	fa5f fe8e 	uxtb.w	lr, lr
 802933e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8029342:	b1b9      	cbz	r1, 8029374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8029344:	4453      	add	r3, sl
 8029346:	0858      	lsrs	r0, r3, #1
 8029348:	07da      	lsls	r2, r3, #31
 802934a:	5c38      	ldrb	r0, [r7, r0]
 802934c:	bf54      	ite	pl
 802934e:	f000 000f 	andpl.w	r0, r0, #15
 8029352:	1100      	asrmi	r0, r0, #4
 8029354:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029358:	b2c0      	uxtb	r0, r0
 802935a:	900a      	str	r0, [sp, #40]	; 0x28
 802935c:	1c58      	adds	r0, r3, #1
 802935e:	0843      	lsrs	r3, r0, #1
 8029360:	07c2      	lsls	r2, r0, #31
 8029362:	5cfb      	ldrb	r3, [r7, r3]
 8029364:	bf54      	ite	pl
 8029366:	f003 030f 	andpl.w	r3, r3, #15
 802936a:	111b      	asrmi	r3, r3, #4
 802936c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029370:	b2db      	uxtb	r3, r3
 8029372:	930e      	str	r3, [sp, #56]	; 0x38
 8029374:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029378:	b289      	uxth	r1, r1
 802937a:	fb02 f301 	mul.w	r3, r2, r1
 802937e:	0112      	lsls	r2, r2, #4
 8029380:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029384:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029388:	1ad2      	subs	r2, r2, r3
 802938a:	b289      	uxth	r1, r1
 802938c:	b292      	uxth	r2, r2
 802938e:	1a40      	subs	r0, r0, r1
 8029390:	fa1f fe80 	uxth.w	lr, r0
 8029394:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029396:	4342      	muls	r2, r0
 8029398:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802939c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802939e:	fb01 c102 	mla	r1, r1, r2, ip
 80293a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80293a4:	fb03 1302 	mla	r3, r3, r2, r1
 80293a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80293ac:	2bff      	cmp	r3, #255	; 0xff
 80293ae:	f040 8094 	bne.w	80294da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80293b2:	4bbf      	ldr	r3, [pc, #764]	; (80296b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80293b4:	681a      	ldr	r2, [r3, #0]
 80293b6:	4bbf      	ldr	r3, [pc, #764]	; (80296b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80293b8:	0951      	lsrs	r1, r2, #5
 80293ba:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80293be:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80293c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80293c6:	430b      	orrs	r3, r1
 80293c8:	4313      	orrs	r3, r2
 80293ca:	f8a8 3000 	strh.w	r3, [r8]
 80293ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80293d0:	f108 0802 	add.w	r8, r8, #2
 80293d4:	441c      	add	r4, r3
 80293d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80293d8:	441e      	add	r6, r3
 80293da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80293dc:	3b01      	subs	r3, #1
 80293de:	9309      	str	r3, [sp, #36]	; 0x24
 80293e0:	e76d      	b.n	80292be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80293e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80293e4:	3d01      	subs	r5, #1
 80293e6:	f109 0902 	add.w	r9, r9, #2
 80293ea:	441c      	add	r4, r3
 80293ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80293ee:	441e      	add	r6, r3
 80293f0:	e745      	b.n	802927e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80293f2:	d021      	beq.n	8029438 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80293f4:	1e6b      	subs	r3, r5, #1
 80293f6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80293f8:	fb00 4003 	mla	r0, r0, r3, r4
 80293fc:	1400      	asrs	r0, r0, #16
 80293fe:	f53f af5a 	bmi.w	80292b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029402:	3901      	subs	r1, #1
 8029404:	4288      	cmp	r0, r1
 8029406:	f6bf af56 	bge.w	80292b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802940a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802940c:	fb01 6303 	mla	r3, r1, r3, r6
 8029410:	141b      	asrs	r3, r3, #16
 8029412:	f53f af50 	bmi.w	80292b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029416:	3a01      	subs	r2, #1
 8029418:	4293      	cmp	r3, r2
 802941a:	f6bf af4c 	bge.w	80292b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802941e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029422:	46a8      	mov	r8, r5
 8029424:	46ce      	mov	lr, r9
 8029426:	9308      	str	r3, [sp, #32]
 8029428:	f1b8 0f00 	cmp.w	r8, #0
 802942c:	f300 80b6 	bgt.w	802959c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8029430:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029434:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029438:	9b07      	ldr	r3, [sp, #28]
 802943a:	2b00      	cmp	r3, #0
 802943c:	f340 817e 	ble.w	802973c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8029440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029444:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029446:	ee30 0a04 	vadd.f32	s0, s0, s8
 802944a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802944e:	eef0 6a62 	vmov.f32	s13, s5
 8029452:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029456:	ee31 1a05 	vadd.f32	s2, s2, s10
 802945a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802945e:	ee16 4a90 	vmov	r4, s13
 8029462:	eef0 6a43 	vmov.f32	s13, s6
 8029466:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802946a:	ee16 6a90 	vmov	r6, s13
 802946e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029472:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029476:	ee77 2a62 	vsub.f32	s5, s14, s5
 802947a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802947e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029482:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029486:	ee12 2a90 	vmov	r2, s5
 802948a:	eef0 2a47 	vmov.f32	s5, s14
 802948e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029492:	ee13 2a10 	vmov	r2, s6
 8029496:	931f      	str	r3, [sp, #124]	; 0x7c
 8029498:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802949a:	eeb0 3a67 	vmov.f32	s6, s15
 802949e:	fb92 f3f3 	sdiv	r3, r2, r3
 80294a2:	9320      	str	r3, [sp, #128]	; 0x80
 80294a4:	9b07      	ldr	r3, [sp, #28]
 80294a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80294a8:	3b01      	subs	r3, #1
 80294aa:	9307      	str	r3, [sp, #28]
 80294ac:	bf08      	it	eq
 80294ae:	4615      	moveq	r5, r2
 80294b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80294b2:	bf18      	it	ne
 80294b4:	461d      	movne	r5, r3
 80294b6:	e6d3      	b.n	8029260 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80294b8:	2900      	cmp	r1, #0
 80294ba:	f43f af5b 	beq.w	8029374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80294be:	eb0a 0003 	add.w	r0, sl, r3
 80294c2:	0843      	lsrs	r3, r0, #1
 80294c4:	07c0      	lsls	r0, r0, #31
 80294c6:	5cfb      	ldrb	r3, [r7, r3]
 80294c8:	bf54      	ite	pl
 80294ca:	f003 030f 	andpl.w	r3, r3, #15
 80294ce:	111b      	asrmi	r3, r3, #4
 80294d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80294d4:	b2db      	uxtb	r3, r3
 80294d6:	930a      	str	r3, [sp, #40]	; 0x28
 80294d8:	e74c      	b.n	8029374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80294da:	2b00      	cmp	r3, #0
 80294dc:	f43f af77 	beq.w	80293ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80294e0:	4a73      	ldr	r2, [pc, #460]	; (80296b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80294e2:	fa1f fe83 	uxth.w	lr, r3
 80294e6:	f8b8 c000 	ldrh.w	ip, [r8]
 80294ea:	43db      	mvns	r3, r3
 80294ec:	6810      	ldr	r0, [r2, #0]
 80294ee:	ea4f 212c 	mov.w	r1, ip, asr #8
 80294f2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80294f6:	b2db      	uxtb	r3, r3
 80294f8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80294fc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029500:	fb12 f20e 	smulbb	r2, r2, lr
 8029504:	b2c0      	uxtb	r0, r0
 8029506:	fb1b fb0e 	smulbb	fp, fp, lr
 802950a:	fb01 2103 	mla	r1, r1, r3, r2
 802950e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029512:	fb10 fe0e 	smulbb	lr, r0, lr
 8029516:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802951a:	b289      	uxth	r1, r1
 802951c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029520:	fa5f fc8c 	uxtb.w	ip, ip
 8029524:	fb02 b203 	mla	r2, r2, r3, fp
 8029528:	1c48      	adds	r0, r1, #1
 802952a:	fb0c e303 	mla	r3, ip, r3, lr
 802952e:	b292      	uxth	r2, r2
 8029530:	b29b      	uxth	r3, r3
 8029532:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8029536:	f102 0b01 	add.w	fp, r2, #1
 802953a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802953e:	1c59      	adds	r1, r3, #1
 8029540:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029544:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029548:	0952      	lsrs	r2, r2, #5
 802954a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802954e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029552:	4301      	orrs	r1, r0
 8029554:	4311      	orrs	r1, r2
 8029556:	f8a8 1000 	strh.w	r1, [r8]
 802955a:	e738      	b.n	80293ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802955c:	f113 0b01 	adds.w	fp, r3, #1
 8029560:	f53f af35 	bmi.w	80293ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029564:	45dc      	cmp	ip, fp
 8029566:	f6ff af32 	blt.w	80293ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802956a:	f110 0b01 	adds.w	fp, r0, #1
 802956e:	f53f af2e 	bmi.w	80293ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029572:	45de      	cmp	lr, fp
 8029574:	f6ff af2b 	blt.w	80293ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029578:	9302      	str	r3, [sp, #8]
 802957a:	fa0f f38e 	sxth.w	r3, lr
 802957e:	9a08      	ldr	r2, [sp, #32]
 8029580:	9301      	str	r3, [sp, #4]
 8029582:	fa0f f38c 	sxth.w	r3, ip
 8029586:	9105      	str	r1, [sp, #20]
 8029588:	4641      	mov	r1, r8
 802958a:	9300      	str	r3, [sp, #0]
 802958c:	4653      	mov	r3, sl
 802958e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029592:	463a      	mov	r2, r7
 8029594:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029596:	f7ff fd73 	bl	8029080 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802959a:	e718      	b.n	80293ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802959c:	1422      	asrs	r2, r4, #16
 802959e:	9906      	ldr	r1, [sp, #24]
 80295a0:	1433      	asrs	r3, r6, #16
 80295a2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80295a6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80295aa:	fb01 2303 	mla	r3, r1, r3, r2
 80295ae:	085a      	lsrs	r2, r3, #1
 80295b0:	07d9      	lsls	r1, r3, #31
 80295b2:	5cba      	ldrb	r2, [r7, r2]
 80295b4:	bf54      	ite	pl
 80295b6:	f002 020f 	andpl.w	r2, r2, #15
 80295ba:	1112      	asrmi	r2, r2, #4
 80295bc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80295c0:	b2d2      	uxtb	r2, r2
 80295c2:	2800      	cmp	r0, #0
 80295c4:	d063      	beq.n	802968e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80295c6:	f103 0a01 	add.w	sl, r3, #1
 80295ca:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80295ce:	f01a 0f01 	tst.w	sl, #1
 80295d2:	5c79      	ldrb	r1, [r7, r1]
 80295d4:	bf0c      	ite	eq
 80295d6:	f001 010f 	andeq.w	r1, r1, #15
 80295da:	1109      	asrne	r1, r1, #4
 80295dc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80295e0:	b2c9      	uxtb	r1, r1
 80295e2:	910f      	str	r1, [sp, #60]	; 0x3c
 80295e4:	f1bc 0f00 	cmp.w	ip, #0
 80295e8:	d01a      	beq.n	8029620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80295ea:	9908      	ldr	r1, [sp, #32]
 80295ec:	440b      	add	r3, r1
 80295ee:	0859      	lsrs	r1, r3, #1
 80295f0:	f013 0f01 	tst.w	r3, #1
 80295f4:	f103 0301 	add.w	r3, r3, #1
 80295f8:	5c79      	ldrb	r1, [r7, r1]
 80295fa:	bf0c      	ite	eq
 80295fc:	f001 010f 	andeq.w	r1, r1, #15
 8029600:	1109      	asrne	r1, r1, #4
 8029602:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029606:	b2c9      	uxtb	r1, r1
 8029608:	910b      	str	r1, [sp, #44]	; 0x2c
 802960a:	0859      	lsrs	r1, r3, #1
 802960c:	07db      	lsls	r3, r3, #31
 802960e:	5c79      	ldrb	r1, [r7, r1]
 8029610:	bf54      	ite	pl
 8029612:	f001 010f 	andpl.w	r1, r1, #15
 8029616:	1109      	asrmi	r1, r1, #4
 8029618:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802961c:	b2c9      	uxtb	r1, r1
 802961e:	9110      	str	r1, [sp, #64]	; 0x40
 8029620:	b280      	uxth	r0, r0
 8029622:	fa1f fc8c 	uxth.w	ip, ip
 8029626:	fb00 f30c 	mul.w	r3, r0, ip
 802962a:	0100      	lsls	r0, r0, #4
 802962c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8029630:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029634:	1ac0      	subs	r0, r0, r3
 8029636:	fa1f fc8c 	uxth.w	ip, ip
 802963a:	b280      	uxth	r0, r0
 802963c:	eba1 010c 	sub.w	r1, r1, ip
 8029640:	fa1f fa81 	uxth.w	sl, r1
 8029644:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029646:	4348      	muls	r0, r1
 8029648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802964a:	fb02 020a 	mla	r2, r2, sl, r0
 802964e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8029652:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029654:	fb03 c302 	mla	r3, r3, r2, ip
 8029658:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802965c:	2bff      	cmp	r3, #255	; 0xff
 802965e:	d12b      	bne.n	80296b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8029660:	4b13      	ldr	r3, [pc, #76]	; (80296b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029662:	681a      	ldr	r2, [r3, #0]
 8029664:	4b13      	ldr	r3, [pc, #76]	; (80296b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8029666:	0951      	lsrs	r1, r2, #5
 8029668:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802966c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029670:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029674:	430b      	orrs	r3, r1
 8029676:	4313      	orrs	r3, r2
 8029678:	f8ae 3000 	strh.w	r3, [lr]
 802967c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802967e:	f10e 0e02 	add.w	lr, lr, #2
 8029682:	f108 38ff 	add.w	r8, r8, #4294967295
 8029686:	441c      	add	r4, r3
 8029688:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802968a:	441e      	add	r6, r3
 802968c:	e6cc      	b.n	8029428 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802968e:	f1bc 0f00 	cmp.w	ip, #0
 8029692:	d0c5      	beq.n	8029620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8029694:	9908      	ldr	r1, [sp, #32]
 8029696:	440b      	add	r3, r1
 8029698:	0859      	lsrs	r1, r3, #1
 802969a:	07db      	lsls	r3, r3, #31
 802969c:	5c79      	ldrb	r1, [r7, r1]
 802969e:	bf54      	ite	pl
 80296a0:	f001 010f 	andpl.w	r1, r1, #15
 80296a4:	1109      	asrmi	r1, r1, #4
 80296a6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80296aa:	b2c9      	uxtb	r1, r1
 80296ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80296ae:	e7b7      	b.n	8029620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80296b0:	20015128 	.word	0x20015128
 80296b4:	fffff800 	.word	0xfffff800
 80296b8:	2b00      	cmp	r3, #0
 80296ba:	d0df      	beq.n	802967c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80296bc:	4a21      	ldr	r2, [pc, #132]	; (8029744 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80296be:	fa1f fa83 	uxth.w	sl, r3
 80296c2:	f8be c000 	ldrh.w	ip, [lr]
 80296c6:	43db      	mvns	r3, r3
 80296c8:	6810      	ldr	r0, [r2, #0]
 80296ca:	ea4f 212c 	mov.w	r1, ip, asr #8
 80296ce:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80296d2:	b2db      	uxtb	r3, r3
 80296d4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80296d8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80296dc:	fb12 f20a 	smulbb	r2, r2, sl
 80296e0:	b2c0      	uxtb	r0, r0
 80296e2:	fb1b fb0a 	smulbb	fp, fp, sl
 80296e6:	fb01 2103 	mla	r1, r1, r3, r2
 80296ea:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80296ee:	fb10 f00a 	smulbb	r0, r0, sl
 80296f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80296f6:	b289      	uxth	r1, r1
 80296f8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80296fc:	fa5f fc8c 	uxtb.w	ip, ip
 8029700:	fb02 b203 	mla	r2, r2, r3, fp
 8029704:	fb0c 0003 	mla	r0, ip, r3, r0
 8029708:	1c4b      	adds	r3, r1, #1
 802970a:	b292      	uxth	r2, r2
 802970c:	b280      	uxth	r0, r0
 802970e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029712:	f100 0b01 	add.w	fp, r0, #1
 8029716:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802971a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802971e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8029722:	ea4b 0101 	orr.w	r1, fp, r1
 8029726:	f102 0b01 	add.w	fp, r2, #1
 802972a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802972e:	0952      	lsrs	r2, r2, #5
 8029730:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029734:	4311      	orrs	r1, r2
 8029736:	f8ae 1000 	strh.w	r1, [lr]
 802973a:	e79f      	b.n	802967c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802973c:	b013      	add	sp, #76	; 0x4c
 802973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029742:	bf00      	nop
 8029744:	20015128 	.word	0x20015128

08029748 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8029748:	b570      	push	{r4, r5, r6, lr}
 802974a:	1208      	asrs	r0, r1, #8
 802974c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8029750:	b29e      	uxth	r6, r3
 8029752:	1213      	asrs	r3, r2, #8
 8029754:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029758:	10cc      	asrs	r4, r1, #3
 802975a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802975e:	00c9      	lsls	r1, r1, #3
 8029760:	fb10 f006 	smulbb	r0, r0, r6
 8029764:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8029768:	fb13 f305 	smulbb	r3, r3, r5
 802976c:	fb14 f406 	smulbb	r4, r4, r6
 8029770:	4418      	add	r0, r3
 8029772:	10d3      	asrs	r3, r2, #3
 8029774:	00d2      	lsls	r2, r2, #3
 8029776:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802977a:	b280      	uxth	r0, r0
 802977c:	b2d2      	uxtb	r2, r2
 802977e:	fb13 f305 	smulbb	r3, r3, r5
 8029782:	fb12 f205 	smulbb	r2, r2, r5
 8029786:	441c      	add	r4, r3
 8029788:	b2cb      	uxtb	r3, r1
 802978a:	fb13 f306 	smulbb	r3, r3, r6
 802978e:	b2a4      	uxth	r4, r4
 8029790:	4413      	add	r3, r2
 8029792:	1c42      	adds	r2, r0, #1
 8029794:	b29b      	uxth	r3, r3
 8029796:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802979a:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 802979e:	1c58      	adds	r0, r3, #1
 80297a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80297a4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80297a8:	4310      	orrs	r0, r2
 80297aa:	1c62      	adds	r2, r4, #1
 80297ac:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80297b0:	0964      	lsrs	r4, r4, #5
 80297b2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80297b6:	4320      	orrs	r0, r4
 80297b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080297bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80297bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297c0:	b08f      	sub	sp, #60	; 0x3c
 80297c2:	461c      	mov	r4, r3
 80297c4:	460d      	mov	r5, r1
 80297c6:	4616      	mov	r6, r2
 80297c8:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 80297cc:	9004      	str	r0, [sp, #16]
 80297ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80297d0:	2f00      	cmp	r7, #0
 80297d2:	f000 80f6 	beq.w	80299c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 80297d6:	6820      	ldr	r0, [r4, #0]
 80297d8:	aa0a      	add	r2, sp, #40	; 0x28
 80297da:	6861      	ldr	r1, [r4, #4]
 80297dc:	f04f 0802 	mov.w	r8, #2
 80297e0:	3604      	adds	r6, #4
 80297e2:	c203      	stmia	r2!, {r0, r1}
 80297e4:	6818      	ldr	r0, [r3, #0]
 80297e6:	aa0c      	add	r2, sp, #48	; 0x30
 80297e8:	6859      	ldr	r1, [r3, #4]
 80297ea:	c203      	stmia	r2!, {r0, r1}
 80297ec:	a80a      	add	r0, sp, #40	; 0x28
 80297ee:	f7f0 f9e5 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80297f2:	4621      	mov	r1, r4
 80297f4:	a80c      	add	r0, sp, #48	; 0x30
 80297f6:	f7f0 fa09 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80297fa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80297fe:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8029802:	f002 0301 	and.w	r3, r2, #1
 8029806:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802980a:	9306      	str	r3, [sp, #24]
 802980c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8029810:	f003 0101 	and.w	r1, r3, #1
 8029814:	9105      	str	r1, [sp, #20]
 8029816:	9805      	ldr	r0, [sp, #20]
 8029818:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802981c:	4403      	add	r3, r0
 802981e:	fb01 2303 	mla	r3, r1, r3, r2
 8029822:	fb93 f3f8 	sdiv	r3, r3, r8
 8029826:	441d      	add	r5, r3
 8029828:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802982c:	441a      	add	r2, r3
 802982e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8029832:	4419      	add	r1, r3
 8029834:	4b64      	ldr	r3, [pc, #400]	; (80299c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8029836:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802983a:	6818      	ldr	r0, [r3, #0]
 802983c:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8029840:	6803      	ldr	r3, [r0, #0]
 8029842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029844:	4798      	blx	r3
 8029846:	4a61      	ldr	r2, [pc, #388]	; (80299cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8029848:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802984c:	2fff      	cmp	r7, #255	; 0xff
 802984e:	8813      	ldrh	r3, [r2, #0]
 8029850:	4611      	mov	r1, r2
 8029852:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 8029856:	fb03 fb0b 	mul.w	fp, r3, fp
 802985a:	fb03 a404 	mla	r4, r3, r4, sl
 802985e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029862:	d06b      	beq.n	802993c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8029864:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8029868:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802986c:	9303      	str	r3, [sp, #12]
 802986e:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8029872:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8029876:	9b07      	ldr	r3, [sp, #28]
 8029878:	42a3      	cmp	r3, r4
 802987a:	f240 809d 	bls.w	80299b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802987e:	9b06      	ldr	r3, [sp, #24]
 8029880:	2b00      	cmp	r3, #0
 8029882:	d039      	beq.n	80298f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8029884:	782b      	ldrb	r3, [r5, #0]
 8029886:	f105 0801 	add.w	r8, r5, #1
 802988a:	f109 3bff 	add.w	fp, r9, #4294967295
 802988e:	8822      	ldrh	r2, [r4, #0]
 8029890:	f003 030f 	and.w	r3, r3, #15
 8029894:	9804      	ldr	r0, [sp, #16]
 8029896:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802989a:	9b03      	ldr	r3, [sp, #12]
 802989c:	9300      	str	r3, [sp, #0]
 802989e:	463b      	mov	r3, r7
 80298a0:	f7ff ff52 	bl	8029748 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80298a4:	f824 0b02 	strh.w	r0, [r4], #2
 80298a8:	f1bb 0f01 	cmp.w	fp, #1
 80298ac:	46a2      	mov	sl, r4
 80298ae:	f104 0404 	add.w	r4, r4, #4
 80298b2:	dd24      	ble.n	80298fe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 80298b4:	f898 3000 	ldrb.w	r3, [r8]
 80298b8:	f1ab 0b02 	sub.w	fp, fp, #2
 80298bc:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80298c0:	091b      	lsrs	r3, r3, #4
 80298c2:	9804      	ldr	r0, [sp, #16]
 80298c4:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80298c8:	9b03      	ldr	r3, [sp, #12]
 80298ca:	9300      	str	r3, [sp, #0]
 80298cc:	463b      	mov	r3, r7
 80298ce:	f7ff ff3b 	bl	8029748 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80298d2:	f824 0c04 	strh.w	r0, [r4, #-4]
 80298d6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80298da:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80298de:	f003 030f 	and.w	r3, r3, #15
 80298e2:	9804      	ldr	r0, [sp, #16]
 80298e4:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80298e8:	9b03      	ldr	r3, [sp, #12]
 80298ea:	9300      	str	r3, [sp, #0]
 80298ec:	463b      	mov	r3, r7
 80298ee:	f7ff ff2b 	bl	8029748 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80298f2:	f824 0c02 	strh.w	r0, [r4, #-2]
 80298f6:	e7d7      	b.n	80298a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80298f8:	46a8      	mov	r8, r5
 80298fa:	46cb      	mov	fp, r9
 80298fc:	e7d4      	b.n	80298a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80298fe:	d10e      	bne.n	802991e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8029900:	f898 3000 	ldrb.w	r3, [r8]
 8029904:	f8ba 2000 	ldrh.w	r2, [sl]
 8029908:	091b      	lsrs	r3, r3, #4
 802990a:	9804      	ldr	r0, [sp, #16]
 802990c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8029910:	9b03      	ldr	r3, [sp, #12]
 8029912:	9300      	str	r3, [sp, #0]
 8029914:	463b      	mov	r3, r7
 8029916:	f7ff ff17 	bl	8029748 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802991a:	f82a 0b02 	strh.w	r0, [sl], #2
 802991e:	9b08      	ldr	r3, [sp, #32]
 8029920:	9a05      	ldr	r2, [sp, #20]
 8029922:	881c      	ldrh	r4, [r3, #0]
 8029924:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8029928:	eba4 0409 	sub.w	r4, r4, r9
 802992c:	4413      	add	r3, r2
 802992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029930:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8029934:	fb93 f3f2 	sdiv	r3, r3, r2
 8029938:	441d      	add	r5, r3
 802993a:	e79c      	b.n	8029876 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802993c:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8029940:	45a3      	cmp	fp, r4
 8029942:	d939      	bls.n	80299b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8029944:	9b06      	ldr	r3, [sp, #24]
 8029946:	b1fb      	cbz	r3, 8029988 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8029948:	782b      	ldrb	r3, [r5, #0]
 802994a:	1c6a      	adds	r2, r5, #1
 802994c:	f109 30ff 	add.w	r0, r9, #4294967295
 8029950:	3402      	adds	r4, #2
 8029952:	f003 030f 	and.w	r3, r3, #15
 8029956:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802995a:	f824 3c02 	strh.w	r3, [r4, #-2]
 802995e:	2801      	cmp	r0, #1
 8029960:	4623      	mov	r3, r4
 8029962:	f104 0404 	add.w	r4, r4, #4
 8029966:	dd12      	ble.n	802998e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8029968:	7813      	ldrb	r3, [r2, #0]
 802996a:	3802      	subs	r0, #2
 802996c:	091b      	lsrs	r3, r3, #4
 802996e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8029972:	f824 3c04 	strh.w	r3, [r4, #-4]
 8029976:	f812 3b01 	ldrb.w	r3, [r2], #1
 802997a:	f003 030f 	and.w	r3, r3, #15
 802997e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8029982:	f824 3c02 	strh.w	r3, [r4, #-2]
 8029986:	e7ea      	b.n	802995e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8029988:	462a      	mov	r2, r5
 802998a:	4648      	mov	r0, r9
 802998c:	e7e7      	b.n	802995e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802998e:	d106      	bne.n	802999e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8029990:	7812      	ldrb	r2, [r2, #0]
 8029992:	3302      	adds	r3, #2
 8029994:	0912      	lsrs	r2, r2, #4
 8029996:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802999a:	f823 2c02 	strh.w	r2, [r3, #-2]
 802999e:	880c      	ldrh	r4, [r1, #0]
 80299a0:	9a05      	ldr	r2, [sp, #20]
 80299a2:	eba4 0409 	sub.w	r4, r4, r9
 80299a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80299aa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80299ae:	4413      	add	r3, r2
 80299b0:	fb93 f3f8 	sdiv	r3, r3, r8
 80299b4:	441d      	add	r5, r3
 80299b6:	e7c3      	b.n	8029940 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 80299b8:	4b03      	ldr	r3, [pc, #12]	; (80299c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80299ba:	6818      	ldr	r0, [r3, #0]
 80299bc:	6803      	ldr	r3, [r0, #0]
 80299be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80299c0:	4798      	blx	r3
 80299c2:	b00f      	add	sp, #60	; 0x3c
 80299c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299c8:	20015120 	.word	0x20015120
 80299cc:	2001511a 	.word	0x2001511a

080299d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 80299d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80299d2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80299d6:	0a0f      	lsrs	r7, r1, #8
 80299d8:	2dff      	cmp	r5, #255	; 0xff
 80299da:	d10c      	bne.n	80299f6 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80299dc:	2bff      	cmp	r3, #255	; 0xff
 80299de:	d10a      	bne.n	80299f6 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80299e0:	0948      	lsrs	r0, r1, #5
 80299e2:	4b25      	ldr	r3, [pc, #148]	; (8029a78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80299e4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80299e8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80299ec:	403b      	ands	r3, r7
 80299ee:	4318      	orrs	r0, r3
 80299f0:	4308      	orrs	r0, r1
 80299f2:	b280      	uxth	r0, r0
 80299f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80299f6:	fb15 f503 	smulbb	r5, r5, r3
 80299fa:	1214      	asrs	r4, r2, #8
 80299fc:	10d6      	asrs	r6, r2, #3
 80299fe:	b2ab      	uxth	r3, r5
 8029a00:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029a04:	00d0      	lsls	r0, r2, #3
 8029a06:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8029a0a:	1c5d      	adds	r5, r3, #1
 8029a0c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8029a10:	b2c0      	uxtb	r0, r0
 8029a12:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8029a16:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8029a1a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8029a1e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8029a22:	fa1f fc85 	uxth.w	ip, r5
 8029a26:	43ed      	mvns	r5, r5
 8029a28:	fb12 f20c 	smulbb	r2, r2, ip
 8029a2c:	b2eb      	uxtb	r3, r5
 8029a2e:	b2fd      	uxtb	r5, r7
 8029a30:	fb04 2403 	mla	r4, r4, r3, r2
 8029a34:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8029a38:	fb15 f50c 	smulbb	r5, r5, ip
 8029a3c:	b2c8      	uxtb	r0, r1
 8029a3e:	b2a4      	uxth	r4, r4
 8029a40:	fb10 f00c 	smulbb	r0, r0, ip
 8029a44:	fb06 5503 	mla	r5, r6, r3, r5
 8029a48:	fb02 0003 	mla	r0, r2, r3, r0
 8029a4c:	b2ad      	uxth	r5, r5
 8029a4e:	b283      	uxth	r3, r0
 8029a50:	1c60      	adds	r0, r4, #1
 8029a52:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8029a56:	1c58      	adds	r0, r3, #1
 8029a58:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029a5c:	1c6b      	adds	r3, r5, #1
 8029a5e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029a62:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029a66:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029a6a:	096d      	lsrs	r5, r5, #5
 8029a6c:	4320      	orrs	r0, r4
 8029a6e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8029a72:	4328      	orrs	r0, r5
 8029a74:	e7be      	b.n	80299f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 8029a76:	bf00      	nop
 8029a78:	00fff800 	.word	0x00fff800

08029a7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8029a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a80:	461c      	mov	r4, r3
 8029a82:	b08d      	sub	sp, #52	; 0x34
 8029a84:	460d      	mov	r5, r1
 8029a86:	4616      	mov	r6, r2
 8029a88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029a8a:	4680      	mov	r8, r0
 8029a8c:	6861      	ldr	r1, [r4, #4]
 8029a8e:	aa08      	add	r2, sp, #32
 8029a90:	6820      	ldr	r0, [r4, #0]
 8029a92:	f04f 0a02 	mov.w	sl, #2
 8029a96:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8029a9a:	3604      	adds	r6, #4
 8029a9c:	c203      	stmia	r2!, {r0, r1}
 8029a9e:	6818      	ldr	r0, [r3, #0]
 8029aa0:	aa0a      	add	r2, sp, #40	; 0x28
 8029aa2:	6859      	ldr	r1, [r3, #4]
 8029aa4:	c203      	stmia	r2!, {r0, r1}
 8029aa6:	a808      	add	r0, sp, #32
 8029aa8:	f7f0 f888 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029aac:	4621      	mov	r1, r4
 8029aae:	a80a      	add	r0, sp, #40	; 0x28
 8029ab0:	f7f0 f8ac 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029ab4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8029ab8:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8029abc:	f002 0301 	and.w	r3, r2, #1
 8029ac0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8029ac4:	9303      	str	r3, [sp, #12]
 8029ac6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8029aca:	f003 0101 	and.w	r1, r3, #1
 8029ace:	9102      	str	r1, [sp, #8]
 8029ad0:	9802      	ldr	r0, [sp, #8]
 8029ad2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8029ad6:	4403      	add	r3, r0
 8029ad8:	fb01 2303 	mla	r3, r1, r3, r2
 8029adc:	fb93 f3fa 	sdiv	r3, r3, sl
 8029ae0:	441d      	add	r5, r3
 8029ae2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8029ae6:	441a      	add	r2, r3
 8029ae8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8029aec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8029af0:	4419      	add	r1, r3
 8029af2:	4a3e      	ldr	r2, [pc, #248]	; (8029bec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8029af4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8029af8:	6810      	ldr	r0, [r2, #0]
 8029afa:	9205      	str	r2, [sp, #20]
 8029afc:	6803      	ldr	r3, [r0, #0]
 8029afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029b00:	4798      	blx	r3
 8029b02:	4b3b      	ldr	r3, [pc, #236]	; (8029bf0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8029b04:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8029b08:	8819      	ldrh	r1, [r3, #0]
 8029b0a:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8029b0e:	434f      	muls	r7, r1
 8029b10:	fb01 c404 	mla	r4, r1, r4, ip
 8029b14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029b18:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8029b1c:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8029b20:	9204      	str	r2, [sp, #16]
 8029b22:	9b04      	ldr	r3, [sp, #16]
 8029b24:	429c      	cmp	r4, r3
 8029b26:	d258      	bcs.n	8029bda <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8029b28:	9b03      	ldr	r3, [sp, #12]
 8029b2a:	2b00      	cmp	r3, #0
 8029b2c:	d034      	beq.n	8029b98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8029b2e:	782b      	ldrb	r3, [r5, #0]
 8029b30:	1c6f      	adds	r7, r5, #1
 8029b32:	f003 030f 	and.w	r3, r3, #15
 8029b36:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029b3a:	0e0b      	lsrs	r3, r1, #24
 8029b3c:	d006      	beq.n	8029b4c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8029b3e:	8822      	ldrh	r2, [r4, #0]
 8029b40:	4640      	mov	r0, r8
 8029b42:	9300      	str	r3, [sp, #0]
 8029b44:	464b      	mov	r3, r9
 8029b46:	f7ff ff43 	bl	80299d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029b4a:	8020      	strh	r0, [r4, #0]
 8029b4c:	3402      	adds	r4, #2
 8029b4e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8029b52:	f1ba 0f01 	cmp.w	sl, #1
 8029b56:	dd22      	ble.n	8029b9e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8029b58:	783b      	ldrb	r3, [r7, #0]
 8029b5a:	091b      	lsrs	r3, r3, #4
 8029b5c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029b60:	0e0b      	lsrs	r3, r1, #24
 8029b62:	d006      	beq.n	8029b72 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8029b64:	8822      	ldrh	r2, [r4, #0]
 8029b66:	4640      	mov	r0, r8
 8029b68:	9300      	str	r3, [sp, #0]
 8029b6a:	464b      	mov	r3, r9
 8029b6c:	f7ff ff30 	bl	80299d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029b70:	8020      	strh	r0, [r4, #0]
 8029b72:	f817 3b01 	ldrb.w	r3, [r7], #1
 8029b76:	f003 030f 	and.w	r3, r3, #15
 8029b7a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029b7e:	0e0b      	lsrs	r3, r1, #24
 8029b80:	d006      	beq.n	8029b90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8029b82:	8862      	ldrh	r2, [r4, #2]
 8029b84:	4640      	mov	r0, r8
 8029b86:	9300      	str	r3, [sp, #0]
 8029b88:	464b      	mov	r3, r9
 8029b8a:	f7ff ff21 	bl	80299d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029b8e:	8060      	strh	r0, [r4, #2]
 8029b90:	3404      	adds	r4, #4
 8029b92:	f1aa 0a02 	sub.w	sl, sl, #2
 8029b96:	e7dc      	b.n	8029b52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8029b98:	462f      	mov	r7, r5
 8029b9a:	46da      	mov	sl, fp
 8029b9c:	e7d9      	b.n	8029b52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8029b9e:	d10d      	bne.n	8029bbc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8029ba0:	783b      	ldrb	r3, [r7, #0]
 8029ba2:	091b      	lsrs	r3, r3, #4
 8029ba4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029ba8:	0e0b      	lsrs	r3, r1, #24
 8029baa:	d006      	beq.n	8029bba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8029bac:	8822      	ldrh	r2, [r4, #0]
 8029bae:	4640      	mov	r0, r8
 8029bb0:	9300      	str	r3, [sp, #0]
 8029bb2:	464b      	mov	r3, r9
 8029bb4:	f7ff ff0c 	bl	80299d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029bb8:	8020      	strh	r0, [r4, #0]
 8029bba:	3402      	adds	r4, #2
 8029bbc:	9b06      	ldr	r3, [sp, #24]
 8029bbe:	9a02      	ldr	r2, [sp, #8]
 8029bc0:	881b      	ldrh	r3, [r3, #0]
 8029bc2:	eba3 030b 	sub.w	r3, r3, fp
 8029bc6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8029bca:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8029bce:	4413      	add	r3, r2
 8029bd0:	9a07      	ldr	r2, [sp, #28]
 8029bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8029bd6:	441d      	add	r5, r3
 8029bd8:	e7a3      	b.n	8029b22 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8029bda:	9b05      	ldr	r3, [sp, #20]
 8029bdc:	6818      	ldr	r0, [r3, #0]
 8029bde:	6803      	ldr	r3, [r0, #0]
 8029be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029be2:	4798      	blx	r3
 8029be4:	b00d      	add	sp, #52	; 0x34
 8029be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029bea:	bf00      	nop
 8029bec:	20015120 	.word	0x20015120
 8029bf0:	2001511a 	.word	0x2001511a

08029bf4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8029bf4:	b570      	push	{r4, r5, r6, lr}
 8029bf6:	1214      	asrs	r4, r2, #8
 8029bf8:	788d      	ldrb	r5, [r1, #2]
 8029bfa:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8029bfe:	10d0      	asrs	r0, r2, #3
 8029c00:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029c04:	00d2      	lsls	r2, r2, #3
 8029c06:	fb15 f503 	smulbb	r5, r5, r3
 8029c0a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029c0e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8029c12:	b2d2      	uxtb	r2, r2
 8029c14:	fb04 5506 	mla	r5, r4, r6, r5
 8029c18:	784c      	ldrb	r4, [r1, #1]
 8029c1a:	7809      	ldrb	r1, [r1, #0]
 8029c1c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8029c20:	fb14 f403 	smulbb	r4, r4, r3
 8029c24:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029c28:	fb11 f303 	smulbb	r3, r1, r3
 8029c2c:	b2ad      	uxth	r5, r5
 8029c2e:	fb00 4406 	mla	r4, r0, r6, r4
 8029c32:	fb02 3306 	mla	r3, r2, r6, r3
 8029c36:	1c68      	adds	r0, r5, #1
 8029c38:	b2a4      	uxth	r4, r4
 8029c3a:	b29b      	uxth	r3, r3
 8029c3c:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8029c40:	1c62      	adds	r2, r4, #1
 8029c42:	1c58      	adds	r0, r3, #1
 8029c44:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029c48:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029c4c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029c50:	0964      	lsrs	r4, r4, #5
 8029c52:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029c56:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8029c5a:	4328      	orrs	r0, r5
 8029c5c:	4320      	orrs	r0, r4
 8029c5e:	bd70      	pop	{r4, r5, r6, pc}

08029c60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8029c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c64:	b08f      	sub	sp, #60	; 0x3c
 8029c66:	461c      	mov	r4, r3
 8029c68:	4682      	mov	sl, r0
 8029c6a:	460e      	mov	r6, r1
 8029c6c:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8029c70:	4615      	mov	r5, r2
 8029c72:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029c74:	2f00      	cmp	r7, #0
 8029c76:	f000 8141 	beq.w	8029efc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 8029c7a:	6820      	ldr	r0, [r4, #0]
 8029c7c:	aa0a      	add	r2, sp, #40	; 0x28
 8029c7e:	6861      	ldr	r1, [r4, #4]
 8029c80:	f04f 0802 	mov.w	r8, #2
 8029c84:	3504      	adds	r5, #4
 8029c86:	c203      	stmia	r2!, {r0, r1}
 8029c88:	6818      	ldr	r0, [r3, #0]
 8029c8a:	aa0c      	add	r2, sp, #48	; 0x30
 8029c8c:	6859      	ldr	r1, [r3, #4]
 8029c8e:	c203      	stmia	r2!, {r0, r1}
 8029c90:	a80a      	add	r0, sp, #40	; 0x28
 8029c92:	f7ef ff93 	bl	8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029c96:	4621      	mov	r1, r4
 8029c98:	a80c      	add	r0, sp, #48	; 0x30
 8029c9a:	f7ef ffb7 	bl	8019c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029c9e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8029ca2:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8029ca6:	f002 0301 	and.w	r3, r2, #1
 8029caa:	9306      	str	r3, [sp, #24]
 8029cac:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8029cb0:	f003 0101 	and.w	r1, r3, #1
 8029cb4:	9105      	str	r1, [sp, #20]
 8029cb6:	9805      	ldr	r0, [sp, #20]
 8029cb8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8029cbc:	4403      	add	r3, r0
 8029cbe:	fb01 2303 	mla	r3, r1, r3, r2
 8029cc2:	fb93 f3f8 	sdiv	r3, r3, r8
 8029cc6:	441e      	add	r6, r3
 8029cc8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8029ccc:	441a      	add	r2, r3
 8029cce:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8029cd2:	4419      	add	r1, r3
 8029cd4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8029cd8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8029cdc:	9303      	str	r3, [sp, #12]
 8029cde:	4b89      	ldr	r3, [pc, #548]	; (8029f04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8029ce0:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8029ce4:	6818      	ldr	r0, [r3, #0]
 8029ce6:	6803      	ldr	r3, [r0, #0]
 8029ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cea:	4798      	blx	r3
 8029cec:	4a86      	ldr	r2, [pc, #536]	; (8029f08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8029cee:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8029cf2:	2fff      	cmp	r7, #255	; 0xff
 8029cf4:	8813      	ldrh	r3, [r2, #0]
 8029cf6:	4694      	mov	ip, r2
 8029cf8:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8029cfc:	fb03 9404 	mla	r4, r3, r4, r9
 8029d00:	fb03 f30b 	mul.w	r3, r3, fp
 8029d04:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029d08:	d071      	beq.n	8029dee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8029d0a:	43f9      	mvns	r1, r7
 8029d0c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8029d10:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8029d14:	b2c9      	uxtb	r1, r1
 8029d16:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8029d1a:	9104      	str	r1, [sp, #16]
 8029d1c:	9b07      	ldr	r3, [sp, #28]
 8029d1e:	42a3      	cmp	r3, r4
 8029d20:	f240 80e7 	bls.w	8029ef2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8029d24:	9b06      	ldr	r3, [sp, #24]
 8029d26:	2b00      	cmp	r3, #0
 8029d28:	d03d      	beq.n	8029da6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8029d2a:	7831      	ldrb	r1, [r6, #0]
 8029d2c:	4650      	mov	r0, sl
 8029d2e:	9b04      	ldr	r3, [sp, #16]
 8029d30:	f106 0801 	add.w	r8, r6, #1
 8029d34:	f001 010f 	and.w	r1, r1, #15
 8029d38:	8822      	ldrh	r2, [r4, #0]
 8029d3a:	9300      	str	r3, [sp, #0]
 8029d3c:	463b      	mov	r3, r7
 8029d3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029d42:	4429      	add	r1, r5
 8029d44:	f7ff ff56 	bl	8029bf4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029d48:	9b03      	ldr	r3, [sp, #12]
 8029d4a:	f824 0b02 	strh.w	r0, [r4], #2
 8029d4e:	f103 3bff 	add.w	fp, r3, #4294967295
 8029d52:	f1bb 0f01 	cmp.w	fp, #1
 8029d56:	46a1      	mov	r9, r4
 8029d58:	f104 0404 	add.w	r4, r4, #4
 8029d5c:	dd27      	ble.n	8029dae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 8029d5e:	f898 1000 	ldrb.w	r1, [r8]
 8029d62:	4650      	mov	r0, sl
 8029d64:	9b04      	ldr	r3, [sp, #16]
 8029d66:	f1ab 0b02 	sub.w	fp, fp, #2
 8029d6a:	0909      	lsrs	r1, r1, #4
 8029d6c:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8029d70:	9300      	str	r3, [sp, #0]
 8029d72:	463b      	mov	r3, r7
 8029d74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029d78:	4429      	add	r1, r5
 8029d7a:	f7ff ff3b 	bl	8029bf4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029d7e:	f824 0c04 	strh.w	r0, [r4, #-4]
 8029d82:	f818 1b01 	ldrb.w	r1, [r8], #1
 8029d86:	4650      	mov	r0, sl
 8029d88:	9b04      	ldr	r3, [sp, #16]
 8029d8a:	f001 010f 	and.w	r1, r1, #15
 8029d8e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8029d92:	9300      	str	r3, [sp, #0]
 8029d94:	463b      	mov	r3, r7
 8029d96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029d9a:	4429      	add	r1, r5
 8029d9c:	f7ff ff2a 	bl	8029bf4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029da0:	f824 0c02 	strh.w	r0, [r4, #-2]
 8029da4:	e7d5      	b.n	8029d52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8029da6:	46b0      	mov	r8, r6
 8029da8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8029dac:	e7d1      	b.n	8029d52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8029dae:	d10f      	bne.n	8029dd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8029db0:	f898 1000 	ldrb.w	r1, [r8]
 8029db4:	4650      	mov	r0, sl
 8029db6:	9b04      	ldr	r3, [sp, #16]
 8029db8:	0909      	lsrs	r1, r1, #4
 8029dba:	f8b9 2000 	ldrh.w	r2, [r9]
 8029dbe:	9300      	str	r3, [sp, #0]
 8029dc0:	463b      	mov	r3, r7
 8029dc2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029dc6:	4429      	add	r1, r5
 8029dc8:	f7ff ff14 	bl	8029bf4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029dcc:	f829 0b02 	strh.w	r0, [r9], #2
 8029dd0:	9b08      	ldr	r3, [sp, #32]
 8029dd2:	9a05      	ldr	r2, [sp, #20]
 8029dd4:	881c      	ldrh	r4, [r3, #0]
 8029dd6:	9b03      	ldr	r3, [sp, #12]
 8029dd8:	1ae4      	subs	r4, r4, r3
 8029dda:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8029dde:	4413      	add	r3, r2
 8029de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029de2:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8029de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8029dea:	441e      	add	r6, r3
 8029dec:	e796      	b.n	8029d1c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8029dee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8029df2:	4f46      	ldr	r7, [pc, #280]	; (8029f0c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8029df4:	42a3      	cmp	r3, r4
 8029df6:	d97c      	bls.n	8029ef2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8029df8:	9a06      	ldr	r2, [sp, #24]
 8029dfa:	2a00      	cmp	r2, #0
 8029dfc:	d054      	beq.n	8029ea8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8029dfe:	7830      	ldrb	r0, [r6, #0]
 8029e00:	1c71      	adds	r1, r6, #1
 8029e02:	f000 000f 	and.w	r0, r0, #15
 8029e06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029e0a:	eb05 0e00 	add.w	lr, r5, r0
 8029e0e:	5c28      	ldrb	r0, [r5, r0]
 8029e10:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8029e14:	f89e e001 	ldrb.w	lr, [lr, #1]
 8029e18:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8029e1c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029e20:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8029e24:	ea42 020e 	orr.w	r2, r2, lr
 8029e28:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8029e2c:	f824 2b02 	strh.w	r2, [r4], #2
 8029e30:	9a03      	ldr	r2, [sp, #12]
 8029e32:	f102 3eff 	add.w	lr, r2, #4294967295
 8029e36:	f1be 0f01 	cmp.w	lr, #1
 8029e3a:	4620      	mov	r0, r4
 8029e3c:	f104 0404 	add.w	r4, r4, #4
 8029e40:	dd36      	ble.n	8029eb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8029e42:	7808      	ldrb	r0, [r1, #0]
 8029e44:	f1ae 0e02 	sub.w	lr, lr, #2
 8029e48:	0900      	lsrs	r0, r0, #4
 8029e4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029e4e:	eb05 0a00 	add.w	sl, r5, r0
 8029e52:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029e56:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029e5a:	00d2      	lsls	r2, r2, #3
 8029e5c:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8029e60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029e64:	ea49 0202 	orr.w	r2, r9, r2
 8029e68:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029e6c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8029e70:	f824 2c04 	strh.w	r2, [r4, #-4]
 8029e74:	f811 0b01 	ldrb.w	r0, [r1], #1
 8029e78:	f000 000f 	and.w	r0, r0, #15
 8029e7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029e80:	eb05 0a00 	add.w	sl, r5, r0
 8029e84:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029e88:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029e8c:	00d2      	lsls	r2, r2, #3
 8029e8e:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8029e92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029e96:	ea49 0202 	orr.w	r2, r9, r2
 8029e9a:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029e9e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8029ea2:	f824 2c02 	strh.w	r2, [r4, #-2]
 8029ea6:	e7c6      	b.n	8029e36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029ea8:	4631      	mov	r1, r6
 8029eaa:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8029eae:	e7c2      	b.n	8029e36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029eb0:	d111      	bne.n	8029ed6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8029eb2:	7809      	ldrb	r1, [r1, #0]
 8029eb4:	0909      	lsrs	r1, r1, #4
 8029eb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029eba:	186c      	adds	r4, r5, r1
 8029ebc:	5c69      	ldrb	r1, [r5, r1]
 8029ebe:	78a2      	ldrb	r2, [r4, #2]
 8029ec0:	7864      	ldrb	r4, [r4, #1]
 8029ec2:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8029ec6:	00e4      	lsls	r4, r4, #3
 8029ec8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8029ecc:	4322      	orrs	r2, r4
 8029ece:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8029ed2:	f820 2b02 	strh.w	r2, [r0], #2
 8029ed6:	9a03      	ldr	r2, [sp, #12]
 8029ed8:	f8bc 4000 	ldrh.w	r4, [ip]
 8029edc:	9905      	ldr	r1, [sp, #20]
 8029ede:	1aa4      	subs	r4, r4, r2
 8029ee0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8029ee4:	440a      	add	r2, r1
 8029ee6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029eea:	fb92 f2f8 	sdiv	r2, r2, r8
 8029eee:	4416      	add	r6, r2
 8029ef0:	e780      	b.n	8029df4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8029ef2:	4b04      	ldr	r3, [pc, #16]	; (8029f04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8029ef4:	6818      	ldr	r0, [r3, #0]
 8029ef6:	6803      	ldr	r3, [r0, #0]
 8029ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029efa:	4798      	blx	r3
 8029efc:	b00f      	add	sp, #60	; 0x3c
 8029efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f02:	bf00      	nop
 8029f04:	20015120 	.word	0x20015120
 8029f08:	2001511a 	.word	0x2001511a
 8029f0c:	fffff800 	.word	0xfffff800

08029f10 <CRC_Lock>:
 8029f10:	4a20      	ldr	r2, [pc, #128]	; (8029f94 <CRC_Lock+0x84>)
 8029f12:	b530      	push	{r4, r5, lr}
 8029f14:	6813      	ldr	r3, [r2, #0]
 8029f16:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029f1a:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029f1e:	f023 0301 	bic.w	r3, r3, #1
 8029f22:	6013      	str	r3, [r2, #0]
 8029f24:	4b1c      	ldr	r3, [pc, #112]	; (8029f98 <CRC_Lock+0x88>)
 8029f26:	681a      	ldr	r2, [r3, #0]
 8029f28:	4022      	ands	r2, r4
 8029f2a:	42aa      	cmp	r2, r5
 8029f2c:	d005      	beq.n	8029f3a <CRC_Lock+0x2a>
 8029f2e:	681b      	ldr	r3, [r3, #0]
 8029f30:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029f34:	4023      	ands	r3, r4
 8029f36:	4293      	cmp	r3, r2
 8029f38:	d124      	bne.n	8029f84 <CRC_Lock+0x74>
 8029f3a:	4b18      	ldr	r3, [pc, #96]	; (8029f9c <CRC_Lock+0x8c>)
 8029f3c:	681b      	ldr	r3, [r3, #0]
 8029f3e:	bb0b      	cbnz	r3, 8029f84 <CRC_Lock+0x74>
 8029f40:	4b17      	ldr	r3, [pc, #92]	; (8029fa0 <CRC_Lock+0x90>)
 8029f42:	681a      	ldr	r2, [r3, #0]
 8029f44:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029f48:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029f4c:	d00d      	beq.n	8029f6a <CRC_Lock+0x5a>
 8029f4e:	681a      	ldr	r2, [r3, #0]
 8029f50:	f240 4483 	movw	r4, #1155	; 0x483
 8029f54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029f58:	42a2      	cmp	r2, r4
 8029f5a:	d006      	beq.n	8029f6a <CRC_Lock+0x5a>
 8029f5c:	681b      	ldr	r3, [r3, #0]
 8029f5e:	f240 4285 	movw	r2, #1157	; 0x485
 8029f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029f66:	4293      	cmp	r3, r2
 8029f68:	d10c      	bne.n	8029f84 <CRC_Lock+0x74>
 8029f6a:	4b0e      	ldr	r3, [pc, #56]	; (8029fa4 <CRC_Lock+0x94>)
 8029f6c:	2201      	movs	r2, #1
 8029f6e:	601a      	str	r2, [r3, #0]
 8029f70:	681a      	ldr	r2, [r3, #0]
 8029f72:	2a00      	cmp	r2, #0
 8029f74:	d1fc      	bne.n	8029f70 <CRC_Lock+0x60>
 8029f76:	4b0c      	ldr	r3, [pc, #48]	; (8029fa8 <CRC_Lock+0x98>)
 8029f78:	6018      	str	r0, [r3, #0]
 8029f7a:	6818      	ldr	r0, [r3, #0]
 8029f7c:	1a43      	subs	r3, r0, r1
 8029f7e:	4258      	negs	r0, r3
 8029f80:	4158      	adcs	r0, r3
 8029f82:	bd30      	pop	{r4, r5, pc}
 8029f84:	4b09      	ldr	r3, [pc, #36]	; (8029fac <CRC_Lock+0x9c>)
 8029f86:	2201      	movs	r2, #1
 8029f88:	601a      	str	r2, [r3, #0]
 8029f8a:	681a      	ldr	r2, [r3, #0]
 8029f8c:	2a00      	cmp	r2, #0
 8029f8e:	d1fc      	bne.n	8029f8a <CRC_Lock+0x7a>
 8029f90:	4b07      	ldr	r3, [pc, #28]	; (8029fb0 <CRC_Lock+0xa0>)
 8029f92:	e7f1      	b.n	8029f78 <CRC_Lock+0x68>
 8029f94:	e0002000 	.word	0xe0002000
 8029f98:	e000ed00 	.word	0xe000ed00
 8029f9c:	e0042000 	.word	0xe0042000
 8029fa0:	5c001000 	.word	0x5c001000
 8029fa4:	58024c08 	.word	0x58024c08
 8029fa8:	58024c00 	.word	0x58024c00
 8029fac:	40023008 	.word	0x40023008
 8029fb0:	40023000 	.word	0x40023000

08029fb4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029fb4:	6101      	str	r1, [r0, #16]
 8029fb6:	4770      	bx	lr

08029fb8 <_ZN8touchgfx8Gestures4tickEv>:
 8029fb8:	7b83      	ldrb	r3, [r0, #14]
 8029fba:	b14b      	cbz	r3, 8029fd0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029fbc:	8903      	ldrh	r3, [r0, #8]
 8029fbe:	3301      	adds	r3, #1
 8029fc0:	b29b      	uxth	r3, r3
 8029fc2:	2b07      	cmp	r3, #7
 8029fc4:	8103      	strh	r3, [r0, #8]
 8029fc6:	bf81      	itttt	hi
 8029fc8:	2300      	movhi	r3, #0
 8029fca:	8143      	strhhi	r3, [r0, #10]
 8029fcc:	8183      	strhhi	r3, [r0, #12]
 8029fce:	7383      	strbhi	r3, [r0, #14]
 8029fd0:	4770      	bx	lr
	...

08029fd4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029fd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029fd8:	4698      	mov	r8, r3
 8029fda:	8883      	ldrh	r3, [r0, #4]
 8029fdc:	4604      	mov	r4, r0
 8029fde:	4617      	mov	r7, r2
 8029fe0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029fe4:	eba8 0303 	sub.w	r3, r8, r3
 8029fe8:	4a19      	ldr	r2, [pc, #100]	; (802a050 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8029fea:	460e      	mov	r6, r1
 8029fec:	b21b      	sxth	r3, r3
 8029fee:	88c1      	ldrh	r1, [r0, #6]
 8029ff0:	9200      	str	r2, [sp, #0]
 8029ff2:	2000      	movs	r0, #0
 8029ff4:	2b00      	cmp	r3, #0
 8029ff6:	8aa2      	ldrh	r2, [r4, #20]
 8029ff8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029ffc:	bfb8      	it	lt
 8029ffe:	425b      	neglt	r3, r3
 802a000:	f88d 0004 	strb.w	r0, [sp, #4]
 802a004:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a008:	b21b      	sxth	r3, r3
 802a00a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a00e:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a012:	4293      	cmp	r3, r2
 802a014:	dc07      	bgt.n	802a026 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802a016:	1a69      	subs	r1, r5, r1
 802a018:	b209      	sxth	r1, r1
 802a01a:	2900      	cmp	r1, #0
 802a01c:	bfb8      	it	lt
 802a01e:	4249      	neglt	r1, r1
 802a020:	b209      	sxth	r1, r1
 802a022:	428a      	cmp	r2, r1
 802a024:	da10      	bge.n	802a048 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802a026:	6920      	ldr	r0, [r4, #16]
 802a028:	4669      	mov	r1, sp
 802a02a:	eba8 0606 	sub.w	r6, r8, r6
 802a02e:	1bef      	subs	r7, r5, r7
 802a030:	6803      	ldr	r3, [r0, #0]
 802a032:	685b      	ldr	r3, [r3, #4]
 802a034:	4798      	blx	r3
 802a036:	2300      	movs	r3, #0
 802a038:	2001      	movs	r0, #1
 802a03a:	8166      	strh	r6, [r4, #10]
 802a03c:	8123      	strh	r3, [r4, #8]
 802a03e:	81a7      	strh	r7, [r4, #12]
 802a040:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a044:	80e5      	strh	r5, [r4, #6]
 802a046:	73a0      	strb	r0, [r4, #14]
 802a048:	b004      	add	sp, #16
 802a04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a04e:	bf00      	nop
 802a050:	0802fa28 	.word	0x0802fa28

0802a054 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a054:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a056:	461e      	mov	r6, r3
 802a058:	1e4b      	subs	r3, r1, #1
 802a05a:	b085      	sub	sp, #20
 802a05c:	4604      	mov	r4, r0
 802a05e:	2b01      	cmp	r3, #1
 802a060:	460d      	mov	r5, r1
 802a062:	4617      	mov	r7, r2
 802a064:	d84b      	bhi.n	802a0fe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a066:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a06a:	1cd3      	adds	r3, r2, #3
 802a06c:	b29b      	uxth	r3, r3
 802a06e:	2b06      	cmp	r3, #6
 802a070:	d916      	bls.n	802a0a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a072:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a114 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a076:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a07a:	f8cd c004 	str.w	ip, [sp, #4]
 802a07e:	f04f 0c00 	mov.w	ip, #0
 802a082:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a086:	6900      	ldr	r0, [r0, #16]
 802a088:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a08c:	a901      	add	r1, sp, #4
 802a08e:	f88d c008 	strb.w	ip, [sp, #8]
 802a092:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a096:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a09a:	6803      	ldr	r3, [r0, #0]
 802a09c:	689b      	ldr	r3, [r3, #8]
 802a09e:	4798      	blx	r3
 802a0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a0a4:	1cd3      	adds	r3, r2, #3
 802a0a6:	b29b      	uxth	r3, r3
 802a0a8:	2b06      	cmp	r3, #6
 802a0aa:	d916      	bls.n	802a0da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a0ac:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a114 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a0b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a0b4:	f8cd c004 	str.w	ip, [sp, #4]
 802a0b8:	f04f 0c01 	mov.w	ip, #1
 802a0bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a0c0:	6920      	ldr	r0, [r4, #16]
 802a0c2:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a0c6:	a901      	add	r1, sp, #4
 802a0c8:	f88d c008 	strb.w	ip, [sp, #8]
 802a0cc:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a0d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a0d4:	6803      	ldr	r3, [r0, #0]
 802a0d6:	689b      	ldr	r3, [r3, #8]
 802a0d8:	4798      	blx	r3
 802a0da:	4b0d      	ldr	r3, [pc, #52]	; (802a110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a0dc:	a901      	add	r1, sp, #4
 802a0de:	6920      	ldr	r0, [r4, #16]
 802a0e0:	9301      	str	r3, [sp, #4]
 802a0e2:	2300      	movs	r3, #0
 802a0e4:	f88d 5008 	strb.w	r5, [sp, #8]
 802a0e8:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a0ec:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a0f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a0f4:	6803      	ldr	r3, [r0, #0]
 802a0f6:	681b      	ldr	r3, [r3, #0]
 802a0f8:	4798      	blx	r3
 802a0fa:	b005      	add	sp, #20
 802a0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a0fe:	2900      	cmp	r1, #0
 802a100:	d1eb      	bne.n	802a0da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a102:	80a2      	strh	r2, [r4, #4]
 802a104:	80c6      	strh	r6, [r0, #6]
 802a106:	60a1      	str	r1, [r4, #8]
 802a108:	81a1      	strh	r1, [r4, #12]
 802a10a:	73a1      	strb	r1, [r4, #14]
 802a10c:	e7e5      	b.n	802a0da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a10e:	bf00      	nop
 802a110:	0802fa14 	.word	0x0802fa14
 802a114:	0802fa3c 	.word	0x0802fa3c

0802a118 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 802a118:	790b      	ldrb	r3, [r1, #4]
 802a11a:	2b00      	cmp	r3, #0
 802a11c:	bf0c      	ite	eq
 802a11e:	2301      	moveq	r3, #1
 802a120:	2300      	movne	r3, #0
 802a122:	b570      	push	{r4, r5, r6, lr}
 802a124:	4604      	mov	r4, r0
 802a126:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 802a12a:	460e      	mov	r6, r1
 802a12c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 802a130:	d109      	bne.n	802a146 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802a132:	b14d      	cbz	r5, 802a148 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802a134:	7933      	ldrb	r3, [r6, #4]
 802a136:	2b01      	cmp	r3, #1
 802a138:	d10c      	bne.n	802a154 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a13a:	6823      	ldr	r3, [r4, #0]
 802a13c:	4620      	mov	r0, r4
 802a13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a144:	4718      	bx	r3
 802a146:	b12d      	cbz	r5, 802a154 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a148:	6823      	ldr	r3, [r4, #0]
 802a14a:	4620      	mov	r0, r4
 802a14c:	695b      	ldr	r3, [r3, #20]
 802a14e:	4798      	blx	r3
 802a150:	2d00      	cmp	r5, #0
 802a152:	d1ef      	bne.n	802a134 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802a154:	bd70      	pop	{r4, r5, r6, pc}

0802a156 <__aeabi_atexit>:
 802a156:	460b      	mov	r3, r1
 802a158:	4601      	mov	r1, r0
 802a15a:	4618      	mov	r0, r3
 802a15c:	f000 b90e 	b.w	802a37c <__cxa_atexit>

0802a160 <_ZdlPvj>:
 802a160:	f000 b812 	b.w	802a188 <_ZdlPv>

0802a164 <__cxa_guard_acquire>:
 802a164:	6803      	ldr	r3, [r0, #0]
 802a166:	07db      	lsls	r3, r3, #31
 802a168:	d406      	bmi.n	802a178 <__cxa_guard_acquire+0x14>
 802a16a:	7843      	ldrb	r3, [r0, #1]
 802a16c:	b103      	cbz	r3, 802a170 <__cxa_guard_acquire+0xc>
 802a16e:	deff      	udf	#255	; 0xff
 802a170:	2301      	movs	r3, #1
 802a172:	7043      	strb	r3, [r0, #1]
 802a174:	4618      	mov	r0, r3
 802a176:	4770      	bx	lr
 802a178:	2000      	movs	r0, #0
 802a17a:	4770      	bx	lr

0802a17c <__cxa_guard_release>:
 802a17c:	2301      	movs	r3, #1
 802a17e:	6003      	str	r3, [r0, #0]
 802a180:	4770      	bx	lr

0802a182 <__cxa_pure_virtual>:
 802a182:	b508      	push	{r3, lr}
 802a184:	f000 f80e 	bl	802a1a4 <_ZSt9terminatev>

0802a188 <_ZdlPv>:
 802a188:	f000 b844 	b.w	802a214 <free>

0802a18c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a18c:	b508      	push	{r3, lr}
 802a18e:	4780      	blx	r0
 802a190:	f000 f80d 	bl	802a1ae <abort>

0802a194 <_ZSt13get_terminatev>:
 802a194:	4b02      	ldr	r3, [pc, #8]	; (802a1a0 <_ZSt13get_terminatev+0xc>)
 802a196:	6818      	ldr	r0, [r3, #0]
 802a198:	f3bf 8f5b 	dmb	ish
 802a19c:	4770      	bx	lr
 802a19e:	bf00      	nop
 802a1a0:	200000c0 	.word	0x200000c0

0802a1a4 <_ZSt9terminatev>:
 802a1a4:	b508      	push	{r3, lr}
 802a1a6:	f7ff fff5 	bl	802a194 <_ZSt13get_terminatev>
 802a1aa:	f7ff ffef 	bl	802a18c <_ZN10__cxxabiv111__terminateEPFvvE>

0802a1ae <abort>:
 802a1ae:	b508      	push	{r3, lr}
 802a1b0:	2006      	movs	r0, #6
 802a1b2:	f000 faff 	bl	802a7b4 <raise>
 802a1b6:	2001      	movs	r0, #1
 802a1b8:	f7d7 fcc6 	bl	8001b48 <_exit>

0802a1bc <__assert_func>:
 802a1bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a1be:	4614      	mov	r4, r2
 802a1c0:	461a      	mov	r2, r3
 802a1c2:	4b09      	ldr	r3, [pc, #36]	; (802a1e8 <__assert_func+0x2c>)
 802a1c4:	681b      	ldr	r3, [r3, #0]
 802a1c6:	4605      	mov	r5, r0
 802a1c8:	68d8      	ldr	r0, [r3, #12]
 802a1ca:	b14c      	cbz	r4, 802a1e0 <__assert_func+0x24>
 802a1cc:	4b07      	ldr	r3, [pc, #28]	; (802a1ec <__assert_func+0x30>)
 802a1ce:	9100      	str	r1, [sp, #0]
 802a1d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a1d4:	4906      	ldr	r1, [pc, #24]	; (802a1f0 <__assert_func+0x34>)
 802a1d6:	462b      	mov	r3, r5
 802a1d8:	f000 f982 	bl	802a4e0 <fiprintf>
 802a1dc:	f7ff ffe7 	bl	802a1ae <abort>
 802a1e0:	4b04      	ldr	r3, [pc, #16]	; (802a1f4 <__assert_func+0x38>)
 802a1e2:	461c      	mov	r4, r3
 802a1e4:	e7f3      	b.n	802a1ce <__assert_func+0x12>
 802a1e6:	bf00      	nop
 802a1e8:	2000011c 	.word	0x2000011c
 802a1ec:	0802fd58 	.word	0x0802fd58
 802a1f0:	0802fd65 	.word	0x0802fd65
 802a1f4:	0802fd93 	.word	0x0802fd93

0802a1f8 <atexit>:
 802a1f8:	2300      	movs	r3, #0
 802a1fa:	4601      	mov	r1, r0
 802a1fc:	461a      	mov	r2, r3
 802a1fe:	4618      	mov	r0, r3
 802a200:	f000 bb86 	b.w	802a910 <__register_exitproc>

0802a204 <malloc>:
 802a204:	4b02      	ldr	r3, [pc, #8]	; (802a210 <malloc+0xc>)
 802a206:	4601      	mov	r1, r0
 802a208:	6818      	ldr	r0, [r3, #0]
 802a20a:	f000 b82b 	b.w	802a264 <_malloc_r>
 802a20e:	bf00      	nop
 802a210:	2000011c 	.word	0x2000011c

0802a214 <free>:
 802a214:	4b02      	ldr	r3, [pc, #8]	; (802a220 <free+0xc>)
 802a216:	4601      	mov	r1, r0
 802a218:	6818      	ldr	r0, [r3, #0]
 802a21a:	f000 bbd7 	b.w	802a9cc <_free_r>
 802a21e:	bf00      	nop
 802a220:	2000011c 	.word	0x2000011c

0802a224 <sbrk_aligned>:
 802a224:	b570      	push	{r4, r5, r6, lr}
 802a226:	4e0e      	ldr	r6, [pc, #56]	; (802a260 <sbrk_aligned+0x3c>)
 802a228:	460c      	mov	r4, r1
 802a22a:	6831      	ldr	r1, [r6, #0]
 802a22c:	4605      	mov	r5, r0
 802a22e:	b911      	cbnz	r1, 802a236 <sbrk_aligned+0x12>
 802a230:	f000 fb10 	bl	802a854 <_sbrk_r>
 802a234:	6030      	str	r0, [r6, #0]
 802a236:	4621      	mov	r1, r4
 802a238:	4628      	mov	r0, r5
 802a23a:	f000 fb0b 	bl	802a854 <_sbrk_r>
 802a23e:	1c43      	adds	r3, r0, #1
 802a240:	d00a      	beq.n	802a258 <sbrk_aligned+0x34>
 802a242:	1cc4      	adds	r4, r0, #3
 802a244:	f024 0403 	bic.w	r4, r4, #3
 802a248:	42a0      	cmp	r0, r4
 802a24a:	d007      	beq.n	802a25c <sbrk_aligned+0x38>
 802a24c:	1a21      	subs	r1, r4, r0
 802a24e:	4628      	mov	r0, r5
 802a250:	f000 fb00 	bl	802a854 <_sbrk_r>
 802a254:	3001      	adds	r0, #1
 802a256:	d101      	bne.n	802a25c <sbrk_aligned+0x38>
 802a258:	f04f 34ff 	mov.w	r4, #4294967295
 802a25c:	4620      	mov	r0, r4
 802a25e:	bd70      	pop	{r4, r5, r6, pc}
 802a260:	20015a70 	.word	0x20015a70

0802a264 <_malloc_r>:
 802a264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a268:	1ccd      	adds	r5, r1, #3
 802a26a:	f025 0503 	bic.w	r5, r5, #3
 802a26e:	3508      	adds	r5, #8
 802a270:	2d0c      	cmp	r5, #12
 802a272:	bf38      	it	cc
 802a274:	250c      	movcc	r5, #12
 802a276:	2d00      	cmp	r5, #0
 802a278:	4607      	mov	r7, r0
 802a27a:	db01      	blt.n	802a280 <_malloc_r+0x1c>
 802a27c:	42a9      	cmp	r1, r5
 802a27e:	d905      	bls.n	802a28c <_malloc_r+0x28>
 802a280:	230c      	movs	r3, #12
 802a282:	603b      	str	r3, [r7, #0]
 802a284:	2600      	movs	r6, #0
 802a286:	4630      	mov	r0, r6
 802a288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a28c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802a360 <_malloc_r+0xfc>
 802a290:	f000 f868 	bl	802a364 <__malloc_lock>
 802a294:	f8d8 3000 	ldr.w	r3, [r8]
 802a298:	461c      	mov	r4, r3
 802a29a:	bb5c      	cbnz	r4, 802a2f4 <_malloc_r+0x90>
 802a29c:	4629      	mov	r1, r5
 802a29e:	4638      	mov	r0, r7
 802a2a0:	f7ff ffc0 	bl	802a224 <sbrk_aligned>
 802a2a4:	1c43      	adds	r3, r0, #1
 802a2a6:	4604      	mov	r4, r0
 802a2a8:	d155      	bne.n	802a356 <_malloc_r+0xf2>
 802a2aa:	f8d8 4000 	ldr.w	r4, [r8]
 802a2ae:	4626      	mov	r6, r4
 802a2b0:	2e00      	cmp	r6, #0
 802a2b2:	d145      	bne.n	802a340 <_malloc_r+0xdc>
 802a2b4:	2c00      	cmp	r4, #0
 802a2b6:	d048      	beq.n	802a34a <_malloc_r+0xe6>
 802a2b8:	6823      	ldr	r3, [r4, #0]
 802a2ba:	4631      	mov	r1, r6
 802a2bc:	4638      	mov	r0, r7
 802a2be:	eb04 0903 	add.w	r9, r4, r3
 802a2c2:	f000 fac7 	bl	802a854 <_sbrk_r>
 802a2c6:	4581      	cmp	r9, r0
 802a2c8:	d13f      	bne.n	802a34a <_malloc_r+0xe6>
 802a2ca:	6821      	ldr	r1, [r4, #0]
 802a2cc:	1a6d      	subs	r5, r5, r1
 802a2ce:	4629      	mov	r1, r5
 802a2d0:	4638      	mov	r0, r7
 802a2d2:	f7ff ffa7 	bl	802a224 <sbrk_aligned>
 802a2d6:	3001      	adds	r0, #1
 802a2d8:	d037      	beq.n	802a34a <_malloc_r+0xe6>
 802a2da:	6823      	ldr	r3, [r4, #0]
 802a2dc:	442b      	add	r3, r5
 802a2de:	6023      	str	r3, [r4, #0]
 802a2e0:	f8d8 3000 	ldr.w	r3, [r8]
 802a2e4:	2b00      	cmp	r3, #0
 802a2e6:	d038      	beq.n	802a35a <_malloc_r+0xf6>
 802a2e8:	685a      	ldr	r2, [r3, #4]
 802a2ea:	42a2      	cmp	r2, r4
 802a2ec:	d12b      	bne.n	802a346 <_malloc_r+0xe2>
 802a2ee:	2200      	movs	r2, #0
 802a2f0:	605a      	str	r2, [r3, #4]
 802a2f2:	e00f      	b.n	802a314 <_malloc_r+0xb0>
 802a2f4:	6822      	ldr	r2, [r4, #0]
 802a2f6:	1b52      	subs	r2, r2, r5
 802a2f8:	d41f      	bmi.n	802a33a <_malloc_r+0xd6>
 802a2fa:	2a0b      	cmp	r2, #11
 802a2fc:	d917      	bls.n	802a32e <_malloc_r+0xca>
 802a2fe:	1961      	adds	r1, r4, r5
 802a300:	42a3      	cmp	r3, r4
 802a302:	6025      	str	r5, [r4, #0]
 802a304:	bf18      	it	ne
 802a306:	6059      	strne	r1, [r3, #4]
 802a308:	6863      	ldr	r3, [r4, #4]
 802a30a:	bf08      	it	eq
 802a30c:	f8c8 1000 	streq.w	r1, [r8]
 802a310:	5162      	str	r2, [r4, r5]
 802a312:	604b      	str	r3, [r1, #4]
 802a314:	4638      	mov	r0, r7
 802a316:	f104 060b 	add.w	r6, r4, #11
 802a31a:	f000 f829 	bl	802a370 <__malloc_unlock>
 802a31e:	f026 0607 	bic.w	r6, r6, #7
 802a322:	1d23      	adds	r3, r4, #4
 802a324:	1af2      	subs	r2, r6, r3
 802a326:	d0ae      	beq.n	802a286 <_malloc_r+0x22>
 802a328:	1b9b      	subs	r3, r3, r6
 802a32a:	50a3      	str	r3, [r4, r2]
 802a32c:	e7ab      	b.n	802a286 <_malloc_r+0x22>
 802a32e:	42a3      	cmp	r3, r4
 802a330:	6862      	ldr	r2, [r4, #4]
 802a332:	d1dd      	bne.n	802a2f0 <_malloc_r+0x8c>
 802a334:	f8c8 2000 	str.w	r2, [r8]
 802a338:	e7ec      	b.n	802a314 <_malloc_r+0xb0>
 802a33a:	4623      	mov	r3, r4
 802a33c:	6864      	ldr	r4, [r4, #4]
 802a33e:	e7ac      	b.n	802a29a <_malloc_r+0x36>
 802a340:	4634      	mov	r4, r6
 802a342:	6876      	ldr	r6, [r6, #4]
 802a344:	e7b4      	b.n	802a2b0 <_malloc_r+0x4c>
 802a346:	4613      	mov	r3, r2
 802a348:	e7cc      	b.n	802a2e4 <_malloc_r+0x80>
 802a34a:	230c      	movs	r3, #12
 802a34c:	603b      	str	r3, [r7, #0]
 802a34e:	4638      	mov	r0, r7
 802a350:	f000 f80e 	bl	802a370 <__malloc_unlock>
 802a354:	e797      	b.n	802a286 <_malloc_r+0x22>
 802a356:	6025      	str	r5, [r4, #0]
 802a358:	e7dc      	b.n	802a314 <_malloc_r+0xb0>
 802a35a:	605b      	str	r3, [r3, #4]
 802a35c:	deff      	udf	#255	; 0xff
 802a35e:	bf00      	nop
 802a360:	20015a6c 	.word	0x20015a6c

0802a364 <__malloc_lock>:
 802a364:	4801      	ldr	r0, [pc, #4]	; (802a36c <__malloc_lock+0x8>)
 802a366:	f000 bac2 	b.w	802a8ee <__retarget_lock_acquire_recursive>
 802a36a:	bf00      	nop
 802a36c:	20015bb5 	.word	0x20015bb5

0802a370 <__malloc_unlock>:
 802a370:	4801      	ldr	r0, [pc, #4]	; (802a378 <__malloc_unlock+0x8>)
 802a372:	f000 babd 	b.w	802a8f0 <__retarget_lock_release_recursive>
 802a376:	bf00      	nop
 802a378:	20015bb5 	.word	0x20015bb5

0802a37c <__cxa_atexit>:
 802a37c:	b510      	push	{r4, lr}
 802a37e:	4c05      	ldr	r4, [pc, #20]	; (802a394 <__cxa_atexit+0x18>)
 802a380:	4613      	mov	r3, r2
 802a382:	b12c      	cbz	r4, 802a390 <__cxa_atexit+0x14>
 802a384:	460a      	mov	r2, r1
 802a386:	4601      	mov	r1, r0
 802a388:	2002      	movs	r0, #2
 802a38a:	f000 fac1 	bl	802a910 <__register_exitproc>
 802a38e:	bd10      	pop	{r4, pc}
 802a390:	4620      	mov	r0, r4
 802a392:	e7fc      	b.n	802a38e <__cxa_atexit+0x12>
 802a394:	0802a911 	.word	0x0802a911

0802a398 <std>:
 802a398:	2300      	movs	r3, #0
 802a39a:	b510      	push	{r4, lr}
 802a39c:	4604      	mov	r4, r0
 802a39e:	e9c0 3300 	strd	r3, r3, [r0]
 802a3a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a3a6:	6083      	str	r3, [r0, #8]
 802a3a8:	8181      	strh	r1, [r0, #12]
 802a3aa:	6643      	str	r3, [r0, #100]	; 0x64
 802a3ac:	81c2      	strh	r2, [r0, #14]
 802a3ae:	6183      	str	r3, [r0, #24]
 802a3b0:	4619      	mov	r1, r3
 802a3b2:	2208      	movs	r2, #8
 802a3b4:	305c      	adds	r0, #92	; 0x5c
 802a3b6:	f000 f9bb 	bl	802a730 <memset>
 802a3ba:	4b0d      	ldr	r3, [pc, #52]	; (802a3f0 <std+0x58>)
 802a3bc:	6263      	str	r3, [r4, #36]	; 0x24
 802a3be:	4b0d      	ldr	r3, [pc, #52]	; (802a3f4 <std+0x5c>)
 802a3c0:	62a3      	str	r3, [r4, #40]	; 0x28
 802a3c2:	4b0d      	ldr	r3, [pc, #52]	; (802a3f8 <std+0x60>)
 802a3c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a3c6:	4b0d      	ldr	r3, [pc, #52]	; (802a3fc <std+0x64>)
 802a3c8:	6323      	str	r3, [r4, #48]	; 0x30
 802a3ca:	4b0d      	ldr	r3, [pc, #52]	; (802a400 <std+0x68>)
 802a3cc:	6224      	str	r4, [r4, #32]
 802a3ce:	429c      	cmp	r4, r3
 802a3d0:	d006      	beq.n	802a3e0 <std+0x48>
 802a3d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802a3d6:	4294      	cmp	r4, r2
 802a3d8:	d002      	beq.n	802a3e0 <std+0x48>
 802a3da:	33d0      	adds	r3, #208	; 0xd0
 802a3dc:	429c      	cmp	r4, r3
 802a3de:	d105      	bne.n	802a3ec <std+0x54>
 802a3e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a3e8:	f000 ba80 	b.w	802a8ec <__retarget_lock_init_recursive>
 802a3ec:	bd10      	pop	{r4, pc}
 802a3ee:	bf00      	nop
 802a3f0:	0802a581 	.word	0x0802a581
 802a3f4:	0802a5a3 	.word	0x0802a5a3
 802a3f8:	0802a5db 	.word	0x0802a5db
 802a3fc:	0802a5ff 	.word	0x0802a5ff
 802a400:	20015a74 	.word	0x20015a74

0802a404 <stdio_exit_handler>:
 802a404:	4a02      	ldr	r2, [pc, #8]	; (802a410 <stdio_exit_handler+0xc>)
 802a406:	4903      	ldr	r1, [pc, #12]	; (802a414 <stdio_exit_handler+0x10>)
 802a408:	4803      	ldr	r0, [pc, #12]	; (802a418 <stdio_exit_handler+0x14>)
 802a40a:	f000 b87b 	b.w	802a504 <_fwalk_sglue>
 802a40e:	bf00      	nop
 802a410:	200000c4 	.word	0x200000c4
 802a414:	0802b3c9 	.word	0x0802b3c9
 802a418:	200000d0 	.word	0x200000d0

0802a41c <cleanup_stdio>:
 802a41c:	6841      	ldr	r1, [r0, #4]
 802a41e:	4b0c      	ldr	r3, [pc, #48]	; (802a450 <cleanup_stdio+0x34>)
 802a420:	4299      	cmp	r1, r3
 802a422:	b510      	push	{r4, lr}
 802a424:	4604      	mov	r4, r0
 802a426:	d001      	beq.n	802a42c <cleanup_stdio+0x10>
 802a428:	f000 ffce 	bl	802b3c8 <_fflush_r>
 802a42c:	68a1      	ldr	r1, [r4, #8]
 802a42e:	4b09      	ldr	r3, [pc, #36]	; (802a454 <cleanup_stdio+0x38>)
 802a430:	4299      	cmp	r1, r3
 802a432:	d002      	beq.n	802a43a <cleanup_stdio+0x1e>
 802a434:	4620      	mov	r0, r4
 802a436:	f000 ffc7 	bl	802b3c8 <_fflush_r>
 802a43a:	68e1      	ldr	r1, [r4, #12]
 802a43c:	4b06      	ldr	r3, [pc, #24]	; (802a458 <cleanup_stdio+0x3c>)
 802a43e:	4299      	cmp	r1, r3
 802a440:	d004      	beq.n	802a44c <cleanup_stdio+0x30>
 802a442:	4620      	mov	r0, r4
 802a444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a448:	f000 bfbe 	b.w	802b3c8 <_fflush_r>
 802a44c:	bd10      	pop	{r4, pc}
 802a44e:	bf00      	nop
 802a450:	20015a74 	.word	0x20015a74
 802a454:	20015adc 	.word	0x20015adc
 802a458:	20015b44 	.word	0x20015b44

0802a45c <global_stdio_init.part.0>:
 802a45c:	b510      	push	{r4, lr}
 802a45e:	4b0b      	ldr	r3, [pc, #44]	; (802a48c <global_stdio_init.part.0+0x30>)
 802a460:	4c0b      	ldr	r4, [pc, #44]	; (802a490 <global_stdio_init.part.0+0x34>)
 802a462:	4a0c      	ldr	r2, [pc, #48]	; (802a494 <global_stdio_init.part.0+0x38>)
 802a464:	601a      	str	r2, [r3, #0]
 802a466:	4620      	mov	r0, r4
 802a468:	2200      	movs	r2, #0
 802a46a:	2104      	movs	r1, #4
 802a46c:	f7ff ff94 	bl	802a398 <std>
 802a470:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802a474:	2201      	movs	r2, #1
 802a476:	2109      	movs	r1, #9
 802a478:	f7ff ff8e 	bl	802a398 <std>
 802a47c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802a480:	2202      	movs	r2, #2
 802a482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a486:	2112      	movs	r1, #18
 802a488:	f7ff bf86 	b.w	802a398 <std>
 802a48c:	20015bac 	.word	0x20015bac
 802a490:	20015a74 	.word	0x20015a74
 802a494:	0802a405 	.word	0x0802a405

0802a498 <__sfp_lock_acquire>:
 802a498:	4801      	ldr	r0, [pc, #4]	; (802a4a0 <__sfp_lock_acquire+0x8>)
 802a49a:	f000 ba28 	b.w	802a8ee <__retarget_lock_acquire_recursive>
 802a49e:	bf00      	nop
 802a4a0:	20015bb6 	.word	0x20015bb6

0802a4a4 <__sfp_lock_release>:
 802a4a4:	4801      	ldr	r0, [pc, #4]	; (802a4ac <__sfp_lock_release+0x8>)
 802a4a6:	f000 ba23 	b.w	802a8f0 <__retarget_lock_release_recursive>
 802a4aa:	bf00      	nop
 802a4ac:	20015bb6 	.word	0x20015bb6

0802a4b0 <__sinit>:
 802a4b0:	b510      	push	{r4, lr}
 802a4b2:	4604      	mov	r4, r0
 802a4b4:	f7ff fff0 	bl	802a498 <__sfp_lock_acquire>
 802a4b8:	6a23      	ldr	r3, [r4, #32]
 802a4ba:	b11b      	cbz	r3, 802a4c4 <__sinit+0x14>
 802a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a4c0:	f7ff bff0 	b.w	802a4a4 <__sfp_lock_release>
 802a4c4:	4b04      	ldr	r3, [pc, #16]	; (802a4d8 <__sinit+0x28>)
 802a4c6:	6223      	str	r3, [r4, #32]
 802a4c8:	4b04      	ldr	r3, [pc, #16]	; (802a4dc <__sinit+0x2c>)
 802a4ca:	681b      	ldr	r3, [r3, #0]
 802a4cc:	2b00      	cmp	r3, #0
 802a4ce:	d1f5      	bne.n	802a4bc <__sinit+0xc>
 802a4d0:	f7ff ffc4 	bl	802a45c <global_stdio_init.part.0>
 802a4d4:	e7f2      	b.n	802a4bc <__sinit+0xc>
 802a4d6:	bf00      	nop
 802a4d8:	0802a41d 	.word	0x0802a41d
 802a4dc:	20015bac 	.word	0x20015bac

0802a4e0 <fiprintf>:
 802a4e0:	b40e      	push	{r1, r2, r3}
 802a4e2:	b503      	push	{r0, r1, lr}
 802a4e4:	4601      	mov	r1, r0
 802a4e6:	ab03      	add	r3, sp, #12
 802a4e8:	4805      	ldr	r0, [pc, #20]	; (802a500 <fiprintf+0x20>)
 802a4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 802a4ee:	6800      	ldr	r0, [r0, #0]
 802a4f0:	9301      	str	r3, [sp, #4]
 802a4f2:	f000 fc39 	bl	802ad68 <_vfiprintf_r>
 802a4f6:	b002      	add	sp, #8
 802a4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 802a4fc:	b003      	add	sp, #12
 802a4fe:	4770      	bx	lr
 802a500:	2000011c 	.word	0x2000011c

0802a504 <_fwalk_sglue>:
 802a504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a508:	4607      	mov	r7, r0
 802a50a:	4688      	mov	r8, r1
 802a50c:	4614      	mov	r4, r2
 802a50e:	2600      	movs	r6, #0
 802a510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a514:	f1b9 0901 	subs.w	r9, r9, #1
 802a518:	d505      	bpl.n	802a526 <_fwalk_sglue+0x22>
 802a51a:	6824      	ldr	r4, [r4, #0]
 802a51c:	2c00      	cmp	r4, #0
 802a51e:	d1f7      	bne.n	802a510 <_fwalk_sglue+0xc>
 802a520:	4630      	mov	r0, r6
 802a522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a526:	89ab      	ldrh	r3, [r5, #12]
 802a528:	2b01      	cmp	r3, #1
 802a52a:	d907      	bls.n	802a53c <_fwalk_sglue+0x38>
 802a52c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a530:	3301      	adds	r3, #1
 802a532:	d003      	beq.n	802a53c <_fwalk_sglue+0x38>
 802a534:	4629      	mov	r1, r5
 802a536:	4638      	mov	r0, r7
 802a538:	47c0      	blx	r8
 802a53a:	4306      	orrs	r6, r0
 802a53c:	3568      	adds	r5, #104	; 0x68
 802a53e:	e7e9      	b.n	802a514 <_fwalk_sglue+0x10>

0802a540 <siprintf>:
 802a540:	b40e      	push	{r1, r2, r3}
 802a542:	b500      	push	{lr}
 802a544:	b09c      	sub	sp, #112	; 0x70
 802a546:	ab1d      	add	r3, sp, #116	; 0x74
 802a548:	9002      	str	r0, [sp, #8]
 802a54a:	9006      	str	r0, [sp, #24]
 802a54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802a550:	4809      	ldr	r0, [pc, #36]	; (802a578 <siprintf+0x38>)
 802a552:	9107      	str	r1, [sp, #28]
 802a554:	9104      	str	r1, [sp, #16]
 802a556:	4909      	ldr	r1, [pc, #36]	; (802a57c <siprintf+0x3c>)
 802a558:	f853 2b04 	ldr.w	r2, [r3], #4
 802a55c:	9105      	str	r1, [sp, #20]
 802a55e:	6800      	ldr	r0, [r0, #0]
 802a560:	9301      	str	r3, [sp, #4]
 802a562:	a902      	add	r1, sp, #8
 802a564:	f000 fad8 	bl	802ab18 <_svfiprintf_r>
 802a568:	9b02      	ldr	r3, [sp, #8]
 802a56a:	2200      	movs	r2, #0
 802a56c:	701a      	strb	r2, [r3, #0]
 802a56e:	b01c      	add	sp, #112	; 0x70
 802a570:	f85d eb04 	ldr.w	lr, [sp], #4
 802a574:	b003      	add	sp, #12
 802a576:	4770      	bx	lr
 802a578:	2000011c 	.word	0x2000011c
 802a57c:	ffff0208 	.word	0xffff0208

0802a580 <__sread>:
 802a580:	b510      	push	{r4, lr}
 802a582:	460c      	mov	r4, r1
 802a584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a588:	f000 f93e 	bl	802a808 <_read_r>
 802a58c:	2800      	cmp	r0, #0
 802a58e:	bfab      	itete	ge
 802a590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a592:	89a3      	ldrhlt	r3, [r4, #12]
 802a594:	181b      	addge	r3, r3, r0
 802a596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a59a:	bfac      	ite	ge
 802a59c:	6563      	strge	r3, [r4, #84]	; 0x54
 802a59e:	81a3      	strhlt	r3, [r4, #12]
 802a5a0:	bd10      	pop	{r4, pc}

0802a5a2 <__swrite>:
 802a5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a5a6:	461f      	mov	r7, r3
 802a5a8:	898b      	ldrh	r3, [r1, #12]
 802a5aa:	05db      	lsls	r3, r3, #23
 802a5ac:	4605      	mov	r5, r0
 802a5ae:	460c      	mov	r4, r1
 802a5b0:	4616      	mov	r6, r2
 802a5b2:	d505      	bpl.n	802a5c0 <__swrite+0x1e>
 802a5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a5b8:	2302      	movs	r3, #2
 802a5ba:	2200      	movs	r2, #0
 802a5bc:	f000 f912 	bl	802a7e4 <_lseek_r>
 802a5c0:	89a3      	ldrh	r3, [r4, #12]
 802a5c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a5c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a5ca:	81a3      	strh	r3, [r4, #12]
 802a5cc:	4632      	mov	r2, r6
 802a5ce:	463b      	mov	r3, r7
 802a5d0:	4628      	mov	r0, r5
 802a5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a5d6:	f000 b94d 	b.w	802a874 <_write_r>

0802a5da <__sseek>:
 802a5da:	b510      	push	{r4, lr}
 802a5dc:	460c      	mov	r4, r1
 802a5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a5e2:	f000 f8ff 	bl	802a7e4 <_lseek_r>
 802a5e6:	1c43      	adds	r3, r0, #1
 802a5e8:	89a3      	ldrh	r3, [r4, #12]
 802a5ea:	bf15      	itete	ne
 802a5ec:	6560      	strne	r0, [r4, #84]	; 0x54
 802a5ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a5f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a5f6:	81a3      	strheq	r3, [r4, #12]
 802a5f8:	bf18      	it	ne
 802a5fa:	81a3      	strhne	r3, [r4, #12]
 802a5fc:	bd10      	pop	{r4, pc}

0802a5fe <__sclose>:
 802a5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a602:	f000 b8df 	b.w	802a7c4 <_close_r>

0802a606 <__swbuf_r>:
 802a606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a608:	460e      	mov	r6, r1
 802a60a:	4614      	mov	r4, r2
 802a60c:	4605      	mov	r5, r0
 802a60e:	b118      	cbz	r0, 802a618 <__swbuf_r+0x12>
 802a610:	6a03      	ldr	r3, [r0, #32]
 802a612:	b90b      	cbnz	r3, 802a618 <__swbuf_r+0x12>
 802a614:	f7ff ff4c 	bl	802a4b0 <__sinit>
 802a618:	69a3      	ldr	r3, [r4, #24]
 802a61a:	60a3      	str	r3, [r4, #8]
 802a61c:	89a3      	ldrh	r3, [r4, #12]
 802a61e:	071a      	lsls	r2, r3, #28
 802a620:	d525      	bpl.n	802a66e <__swbuf_r+0x68>
 802a622:	6923      	ldr	r3, [r4, #16]
 802a624:	b31b      	cbz	r3, 802a66e <__swbuf_r+0x68>
 802a626:	6823      	ldr	r3, [r4, #0]
 802a628:	6922      	ldr	r2, [r4, #16]
 802a62a:	1a98      	subs	r0, r3, r2
 802a62c:	6963      	ldr	r3, [r4, #20]
 802a62e:	b2f6      	uxtb	r6, r6
 802a630:	4283      	cmp	r3, r0
 802a632:	4637      	mov	r7, r6
 802a634:	dc04      	bgt.n	802a640 <__swbuf_r+0x3a>
 802a636:	4621      	mov	r1, r4
 802a638:	4628      	mov	r0, r5
 802a63a:	f000 fec5 	bl	802b3c8 <_fflush_r>
 802a63e:	b9e0      	cbnz	r0, 802a67a <__swbuf_r+0x74>
 802a640:	68a3      	ldr	r3, [r4, #8]
 802a642:	3b01      	subs	r3, #1
 802a644:	60a3      	str	r3, [r4, #8]
 802a646:	6823      	ldr	r3, [r4, #0]
 802a648:	1c5a      	adds	r2, r3, #1
 802a64a:	6022      	str	r2, [r4, #0]
 802a64c:	701e      	strb	r6, [r3, #0]
 802a64e:	6962      	ldr	r2, [r4, #20]
 802a650:	1c43      	adds	r3, r0, #1
 802a652:	429a      	cmp	r2, r3
 802a654:	d004      	beq.n	802a660 <__swbuf_r+0x5a>
 802a656:	89a3      	ldrh	r3, [r4, #12]
 802a658:	07db      	lsls	r3, r3, #31
 802a65a:	d506      	bpl.n	802a66a <__swbuf_r+0x64>
 802a65c:	2e0a      	cmp	r6, #10
 802a65e:	d104      	bne.n	802a66a <__swbuf_r+0x64>
 802a660:	4621      	mov	r1, r4
 802a662:	4628      	mov	r0, r5
 802a664:	f000 feb0 	bl	802b3c8 <_fflush_r>
 802a668:	b938      	cbnz	r0, 802a67a <__swbuf_r+0x74>
 802a66a:	4638      	mov	r0, r7
 802a66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a66e:	4621      	mov	r1, r4
 802a670:	4628      	mov	r0, r5
 802a672:	f000 f805 	bl	802a680 <__swsetup_r>
 802a676:	2800      	cmp	r0, #0
 802a678:	d0d5      	beq.n	802a626 <__swbuf_r+0x20>
 802a67a:	f04f 37ff 	mov.w	r7, #4294967295
 802a67e:	e7f4      	b.n	802a66a <__swbuf_r+0x64>

0802a680 <__swsetup_r>:
 802a680:	b538      	push	{r3, r4, r5, lr}
 802a682:	4b2a      	ldr	r3, [pc, #168]	; (802a72c <__swsetup_r+0xac>)
 802a684:	4605      	mov	r5, r0
 802a686:	6818      	ldr	r0, [r3, #0]
 802a688:	460c      	mov	r4, r1
 802a68a:	b118      	cbz	r0, 802a694 <__swsetup_r+0x14>
 802a68c:	6a03      	ldr	r3, [r0, #32]
 802a68e:	b90b      	cbnz	r3, 802a694 <__swsetup_r+0x14>
 802a690:	f7ff ff0e 	bl	802a4b0 <__sinit>
 802a694:	89a3      	ldrh	r3, [r4, #12]
 802a696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a69a:	0718      	lsls	r0, r3, #28
 802a69c:	d422      	bmi.n	802a6e4 <__swsetup_r+0x64>
 802a69e:	06d9      	lsls	r1, r3, #27
 802a6a0:	d407      	bmi.n	802a6b2 <__swsetup_r+0x32>
 802a6a2:	2309      	movs	r3, #9
 802a6a4:	602b      	str	r3, [r5, #0]
 802a6a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a6aa:	81a3      	strh	r3, [r4, #12]
 802a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 802a6b0:	e034      	b.n	802a71c <__swsetup_r+0x9c>
 802a6b2:	0758      	lsls	r0, r3, #29
 802a6b4:	d512      	bpl.n	802a6dc <__swsetup_r+0x5c>
 802a6b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a6b8:	b141      	cbz	r1, 802a6cc <__swsetup_r+0x4c>
 802a6ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a6be:	4299      	cmp	r1, r3
 802a6c0:	d002      	beq.n	802a6c8 <__swsetup_r+0x48>
 802a6c2:	4628      	mov	r0, r5
 802a6c4:	f000 f982 	bl	802a9cc <_free_r>
 802a6c8:	2300      	movs	r3, #0
 802a6ca:	6363      	str	r3, [r4, #52]	; 0x34
 802a6cc:	89a3      	ldrh	r3, [r4, #12]
 802a6ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a6d2:	81a3      	strh	r3, [r4, #12]
 802a6d4:	2300      	movs	r3, #0
 802a6d6:	6063      	str	r3, [r4, #4]
 802a6d8:	6923      	ldr	r3, [r4, #16]
 802a6da:	6023      	str	r3, [r4, #0]
 802a6dc:	89a3      	ldrh	r3, [r4, #12]
 802a6de:	f043 0308 	orr.w	r3, r3, #8
 802a6e2:	81a3      	strh	r3, [r4, #12]
 802a6e4:	6923      	ldr	r3, [r4, #16]
 802a6e6:	b94b      	cbnz	r3, 802a6fc <__swsetup_r+0x7c>
 802a6e8:	89a3      	ldrh	r3, [r4, #12]
 802a6ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a6ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a6f2:	d003      	beq.n	802a6fc <__swsetup_r+0x7c>
 802a6f4:	4621      	mov	r1, r4
 802a6f6:	4628      	mov	r0, r5
 802a6f8:	f000 feb4 	bl	802b464 <__smakebuf_r>
 802a6fc:	89a0      	ldrh	r0, [r4, #12]
 802a6fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a702:	f010 0301 	ands.w	r3, r0, #1
 802a706:	d00a      	beq.n	802a71e <__swsetup_r+0x9e>
 802a708:	2300      	movs	r3, #0
 802a70a:	60a3      	str	r3, [r4, #8]
 802a70c:	6963      	ldr	r3, [r4, #20]
 802a70e:	425b      	negs	r3, r3
 802a710:	61a3      	str	r3, [r4, #24]
 802a712:	6923      	ldr	r3, [r4, #16]
 802a714:	b943      	cbnz	r3, 802a728 <__swsetup_r+0xa8>
 802a716:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a71a:	d1c4      	bne.n	802a6a6 <__swsetup_r+0x26>
 802a71c:	bd38      	pop	{r3, r4, r5, pc}
 802a71e:	0781      	lsls	r1, r0, #30
 802a720:	bf58      	it	pl
 802a722:	6963      	ldrpl	r3, [r4, #20]
 802a724:	60a3      	str	r3, [r4, #8]
 802a726:	e7f4      	b.n	802a712 <__swsetup_r+0x92>
 802a728:	2000      	movs	r0, #0
 802a72a:	e7f7      	b.n	802a71c <__swsetup_r+0x9c>
 802a72c:	2000011c 	.word	0x2000011c

0802a730 <memset>:
 802a730:	4402      	add	r2, r0
 802a732:	4603      	mov	r3, r0
 802a734:	4293      	cmp	r3, r2
 802a736:	d100      	bne.n	802a73a <memset+0xa>
 802a738:	4770      	bx	lr
 802a73a:	f803 1b01 	strb.w	r1, [r3], #1
 802a73e:	e7f9      	b.n	802a734 <memset+0x4>

0802a740 <strncmp>:
 802a740:	b510      	push	{r4, lr}
 802a742:	b16a      	cbz	r2, 802a760 <strncmp+0x20>
 802a744:	3901      	subs	r1, #1
 802a746:	1884      	adds	r4, r0, r2
 802a748:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a74c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802a750:	429a      	cmp	r2, r3
 802a752:	d103      	bne.n	802a75c <strncmp+0x1c>
 802a754:	42a0      	cmp	r0, r4
 802a756:	d001      	beq.n	802a75c <strncmp+0x1c>
 802a758:	2a00      	cmp	r2, #0
 802a75a:	d1f5      	bne.n	802a748 <strncmp+0x8>
 802a75c:	1ad0      	subs	r0, r2, r3
 802a75e:	bd10      	pop	{r4, pc}
 802a760:	4610      	mov	r0, r2
 802a762:	e7fc      	b.n	802a75e <strncmp+0x1e>

0802a764 <_raise_r>:
 802a764:	291f      	cmp	r1, #31
 802a766:	b538      	push	{r3, r4, r5, lr}
 802a768:	4604      	mov	r4, r0
 802a76a:	460d      	mov	r5, r1
 802a76c:	d904      	bls.n	802a778 <_raise_r+0x14>
 802a76e:	2316      	movs	r3, #22
 802a770:	6003      	str	r3, [r0, #0]
 802a772:	f04f 30ff 	mov.w	r0, #4294967295
 802a776:	bd38      	pop	{r3, r4, r5, pc}
 802a778:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802a77a:	b112      	cbz	r2, 802a782 <_raise_r+0x1e>
 802a77c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a780:	b94b      	cbnz	r3, 802a796 <_raise_r+0x32>
 802a782:	4620      	mov	r0, r4
 802a784:	f000 f864 	bl	802a850 <_getpid_r>
 802a788:	462a      	mov	r2, r5
 802a78a:	4601      	mov	r1, r0
 802a78c:	4620      	mov	r0, r4
 802a78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a792:	f000 b84b 	b.w	802a82c <_kill_r>
 802a796:	2b01      	cmp	r3, #1
 802a798:	d00a      	beq.n	802a7b0 <_raise_r+0x4c>
 802a79a:	1c59      	adds	r1, r3, #1
 802a79c:	d103      	bne.n	802a7a6 <_raise_r+0x42>
 802a79e:	2316      	movs	r3, #22
 802a7a0:	6003      	str	r3, [r0, #0]
 802a7a2:	2001      	movs	r0, #1
 802a7a4:	e7e7      	b.n	802a776 <_raise_r+0x12>
 802a7a6:	2400      	movs	r4, #0
 802a7a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a7ac:	4628      	mov	r0, r5
 802a7ae:	4798      	blx	r3
 802a7b0:	2000      	movs	r0, #0
 802a7b2:	e7e0      	b.n	802a776 <_raise_r+0x12>

0802a7b4 <raise>:
 802a7b4:	4b02      	ldr	r3, [pc, #8]	; (802a7c0 <raise+0xc>)
 802a7b6:	4601      	mov	r1, r0
 802a7b8:	6818      	ldr	r0, [r3, #0]
 802a7ba:	f7ff bfd3 	b.w	802a764 <_raise_r>
 802a7be:	bf00      	nop
 802a7c0:	2000011c 	.word	0x2000011c

0802a7c4 <_close_r>:
 802a7c4:	b538      	push	{r3, r4, r5, lr}
 802a7c6:	4d06      	ldr	r5, [pc, #24]	; (802a7e0 <_close_r+0x1c>)
 802a7c8:	2300      	movs	r3, #0
 802a7ca:	4604      	mov	r4, r0
 802a7cc:	4608      	mov	r0, r1
 802a7ce:	602b      	str	r3, [r5, #0]
 802a7d0:	f7d7 f9dc 	bl	8001b8c <_close>
 802a7d4:	1c43      	adds	r3, r0, #1
 802a7d6:	d102      	bne.n	802a7de <_close_r+0x1a>
 802a7d8:	682b      	ldr	r3, [r5, #0]
 802a7da:	b103      	cbz	r3, 802a7de <_close_r+0x1a>
 802a7dc:	6023      	str	r3, [r4, #0]
 802a7de:	bd38      	pop	{r3, r4, r5, pc}
 802a7e0:	20015bb0 	.word	0x20015bb0

0802a7e4 <_lseek_r>:
 802a7e4:	b538      	push	{r3, r4, r5, lr}
 802a7e6:	4d07      	ldr	r5, [pc, #28]	; (802a804 <_lseek_r+0x20>)
 802a7e8:	4604      	mov	r4, r0
 802a7ea:	4608      	mov	r0, r1
 802a7ec:	4611      	mov	r1, r2
 802a7ee:	2200      	movs	r2, #0
 802a7f0:	602a      	str	r2, [r5, #0]
 802a7f2:	461a      	mov	r2, r3
 802a7f4:	f7d7 f9d4 	bl	8001ba0 <_lseek>
 802a7f8:	1c43      	adds	r3, r0, #1
 802a7fa:	d102      	bne.n	802a802 <_lseek_r+0x1e>
 802a7fc:	682b      	ldr	r3, [r5, #0]
 802a7fe:	b103      	cbz	r3, 802a802 <_lseek_r+0x1e>
 802a800:	6023      	str	r3, [r4, #0]
 802a802:	bd38      	pop	{r3, r4, r5, pc}
 802a804:	20015bb0 	.word	0x20015bb0

0802a808 <_read_r>:
 802a808:	b538      	push	{r3, r4, r5, lr}
 802a80a:	4d07      	ldr	r5, [pc, #28]	; (802a828 <_read_r+0x20>)
 802a80c:	4604      	mov	r4, r0
 802a80e:	4608      	mov	r0, r1
 802a810:	4611      	mov	r1, r2
 802a812:	2200      	movs	r2, #0
 802a814:	602a      	str	r2, [r5, #0]
 802a816:	461a      	mov	r2, r3
 802a818:	f7d7 f99c 	bl	8001b54 <_read>
 802a81c:	1c43      	adds	r3, r0, #1
 802a81e:	d102      	bne.n	802a826 <_read_r+0x1e>
 802a820:	682b      	ldr	r3, [r5, #0]
 802a822:	b103      	cbz	r3, 802a826 <_read_r+0x1e>
 802a824:	6023      	str	r3, [r4, #0]
 802a826:	bd38      	pop	{r3, r4, r5, pc}
 802a828:	20015bb0 	.word	0x20015bb0

0802a82c <_kill_r>:
 802a82c:	b538      	push	{r3, r4, r5, lr}
 802a82e:	4d07      	ldr	r5, [pc, #28]	; (802a84c <_kill_r+0x20>)
 802a830:	2300      	movs	r3, #0
 802a832:	4604      	mov	r4, r0
 802a834:	4608      	mov	r0, r1
 802a836:	4611      	mov	r1, r2
 802a838:	602b      	str	r3, [r5, #0]
 802a83a:	f7d7 f97d 	bl	8001b38 <_kill>
 802a83e:	1c43      	adds	r3, r0, #1
 802a840:	d102      	bne.n	802a848 <_kill_r+0x1c>
 802a842:	682b      	ldr	r3, [r5, #0]
 802a844:	b103      	cbz	r3, 802a848 <_kill_r+0x1c>
 802a846:	6023      	str	r3, [r4, #0]
 802a848:	bd38      	pop	{r3, r4, r5, pc}
 802a84a:	bf00      	nop
 802a84c:	20015bb0 	.word	0x20015bb0

0802a850 <_getpid_r>:
 802a850:	f7d7 b970 	b.w	8001b34 <_getpid>

0802a854 <_sbrk_r>:
 802a854:	b538      	push	{r3, r4, r5, lr}
 802a856:	4d06      	ldr	r5, [pc, #24]	; (802a870 <_sbrk_r+0x1c>)
 802a858:	2300      	movs	r3, #0
 802a85a:	4604      	mov	r4, r0
 802a85c:	4608      	mov	r0, r1
 802a85e:	602b      	str	r3, [r5, #0]
 802a860:	f7d7 f9a0 	bl	8001ba4 <_sbrk>
 802a864:	1c43      	adds	r3, r0, #1
 802a866:	d102      	bne.n	802a86e <_sbrk_r+0x1a>
 802a868:	682b      	ldr	r3, [r5, #0]
 802a86a:	b103      	cbz	r3, 802a86e <_sbrk_r+0x1a>
 802a86c:	6023      	str	r3, [r4, #0]
 802a86e:	bd38      	pop	{r3, r4, r5, pc}
 802a870:	20015bb0 	.word	0x20015bb0

0802a874 <_write_r>:
 802a874:	b538      	push	{r3, r4, r5, lr}
 802a876:	4d07      	ldr	r5, [pc, #28]	; (802a894 <_write_r+0x20>)
 802a878:	4604      	mov	r4, r0
 802a87a:	4608      	mov	r0, r1
 802a87c:	4611      	mov	r1, r2
 802a87e:	2200      	movs	r2, #0
 802a880:	602a      	str	r2, [r5, #0]
 802a882:	461a      	mov	r2, r3
 802a884:	f7d7 f974 	bl	8001b70 <_write>
 802a888:	1c43      	adds	r3, r0, #1
 802a88a:	d102      	bne.n	802a892 <_write_r+0x1e>
 802a88c:	682b      	ldr	r3, [r5, #0]
 802a88e:	b103      	cbz	r3, 802a892 <_write_r+0x1e>
 802a890:	6023      	str	r3, [r4, #0]
 802a892:	bd38      	pop	{r3, r4, r5, pc}
 802a894:	20015bb0 	.word	0x20015bb0

0802a898 <__errno>:
 802a898:	4b01      	ldr	r3, [pc, #4]	; (802a8a0 <__errno+0x8>)
 802a89a:	6818      	ldr	r0, [r3, #0]
 802a89c:	4770      	bx	lr
 802a89e:	bf00      	nop
 802a8a0:	2000011c 	.word	0x2000011c

0802a8a4 <__libc_init_array>:
 802a8a4:	b570      	push	{r4, r5, r6, lr}
 802a8a6:	4d0d      	ldr	r5, [pc, #52]	; (802a8dc <__libc_init_array+0x38>)
 802a8a8:	4c0d      	ldr	r4, [pc, #52]	; (802a8e0 <__libc_init_array+0x3c>)
 802a8aa:	1b64      	subs	r4, r4, r5
 802a8ac:	10a4      	asrs	r4, r4, #2
 802a8ae:	2600      	movs	r6, #0
 802a8b0:	42a6      	cmp	r6, r4
 802a8b2:	d109      	bne.n	802a8c8 <__libc_init_array+0x24>
 802a8b4:	4d0b      	ldr	r5, [pc, #44]	; (802a8e4 <__libc_init_array+0x40>)
 802a8b6:	4c0c      	ldr	r4, [pc, #48]	; (802a8e8 <__libc_init_array+0x44>)
 802a8b8:	f000 fe84 	bl	802b5c4 <_init>
 802a8bc:	1b64      	subs	r4, r4, r5
 802a8be:	10a4      	asrs	r4, r4, #2
 802a8c0:	2600      	movs	r6, #0
 802a8c2:	42a6      	cmp	r6, r4
 802a8c4:	d105      	bne.n	802a8d2 <__libc_init_array+0x2e>
 802a8c6:	bd70      	pop	{r4, r5, r6, pc}
 802a8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 802a8cc:	4798      	blx	r3
 802a8ce:	3601      	adds	r6, #1
 802a8d0:	e7ee      	b.n	802a8b0 <__libc_init_array+0xc>
 802a8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 802a8d6:	4798      	blx	r3
 802a8d8:	3601      	adds	r6, #1
 802a8da:	e7f2      	b.n	802a8c2 <__libc_init_array+0x1e>
 802a8dc:	0802fdec 	.word	0x0802fdec
 802a8e0:	0802fdec 	.word	0x0802fdec
 802a8e4:	0802fdec 	.word	0x0802fdec
 802a8e8:	0802fe08 	.word	0x0802fe08

0802a8ec <__retarget_lock_init_recursive>:
 802a8ec:	4770      	bx	lr

0802a8ee <__retarget_lock_acquire_recursive>:
 802a8ee:	4770      	bx	lr

0802a8f0 <__retarget_lock_release_recursive>:
 802a8f0:	4770      	bx	lr

0802a8f2 <memcpy>:
 802a8f2:	440a      	add	r2, r1
 802a8f4:	4291      	cmp	r1, r2
 802a8f6:	f100 33ff 	add.w	r3, r0, #4294967295
 802a8fa:	d100      	bne.n	802a8fe <memcpy+0xc>
 802a8fc:	4770      	bx	lr
 802a8fe:	b510      	push	{r4, lr}
 802a900:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a904:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a908:	4291      	cmp	r1, r2
 802a90a:	d1f9      	bne.n	802a900 <memcpy+0xe>
 802a90c:	bd10      	pop	{r4, pc}
	...

0802a910 <__register_exitproc>:
 802a910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a914:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802a9c8 <__register_exitproc+0xb8>
 802a918:	4606      	mov	r6, r0
 802a91a:	f8d8 0000 	ldr.w	r0, [r8]
 802a91e:	461f      	mov	r7, r3
 802a920:	460d      	mov	r5, r1
 802a922:	4691      	mov	r9, r2
 802a924:	f7ff ffe3 	bl	802a8ee <__retarget_lock_acquire_recursive>
 802a928:	4b23      	ldr	r3, [pc, #140]	; (802a9b8 <__register_exitproc+0xa8>)
 802a92a:	681c      	ldr	r4, [r3, #0]
 802a92c:	b934      	cbnz	r4, 802a93c <__register_exitproc+0x2c>
 802a92e:	4c23      	ldr	r4, [pc, #140]	; (802a9bc <__register_exitproc+0xac>)
 802a930:	601c      	str	r4, [r3, #0]
 802a932:	4b23      	ldr	r3, [pc, #140]	; (802a9c0 <__register_exitproc+0xb0>)
 802a934:	b113      	cbz	r3, 802a93c <__register_exitproc+0x2c>
 802a936:	681b      	ldr	r3, [r3, #0]
 802a938:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a93c:	6863      	ldr	r3, [r4, #4]
 802a93e:	2b1f      	cmp	r3, #31
 802a940:	dd07      	ble.n	802a952 <__register_exitproc+0x42>
 802a942:	f8d8 0000 	ldr.w	r0, [r8]
 802a946:	f7ff ffd3 	bl	802a8f0 <__retarget_lock_release_recursive>
 802a94a:	f04f 30ff 	mov.w	r0, #4294967295
 802a94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a952:	b32e      	cbz	r6, 802a9a0 <__register_exitproc+0x90>
 802a954:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a958:	b968      	cbnz	r0, 802a976 <__register_exitproc+0x66>
 802a95a:	4b1a      	ldr	r3, [pc, #104]	; (802a9c4 <__register_exitproc+0xb4>)
 802a95c:	2b00      	cmp	r3, #0
 802a95e:	d0f0      	beq.n	802a942 <__register_exitproc+0x32>
 802a960:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a964:	f7ff fc4e 	bl	802a204 <malloc>
 802a968:	2800      	cmp	r0, #0
 802a96a:	d0ea      	beq.n	802a942 <__register_exitproc+0x32>
 802a96c:	2300      	movs	r3, #0
 802a96e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a972:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a976:	6863      	ldr	r3, [r4, #4]
 802a978:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a97c:	2201      	movs	r2, #1
 802a97e:	409a      	lsls	r2, r3
 802a980:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a984:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a988:	4313      	orrs	r3, r2
 802a98a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a98e:	2e02      	cmp	r6, #2
 802a990:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a994:	bf02      	ittt	eq
 802a996:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a99a:	4313      	orreq	r3, r2
 802a99c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802a9a0:	6863      	ldr	r3, [r4, #4]
 802a9a2:	f8d8 0000 	ldr.w	r0, [r8]
 802a9a6:	1c5a      	adds	r2, r3, #1
 802a9a8:	3302      	adds	r3, #2
 802a9aa:	6062      	str	r2, [r4, #4]
 802a9ac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a9b0:	f7ff ff9e 	bl	802a8f0 <__retarget_lock_release_recursive>
 802a9b4:	2000      	movs	r0, #0
 802a9b6:	e7ca      	b.n	802a94e <__register_exitproc+0x3e>
 802a9b8:	20015c44 	.word	0x20015c44
 802a9bc:	20015bb8 	.word	0x20015bb8
 802a9c0:	0802fd94 	.word	0x0802fd94
 802a9c4:	0802a205 	.word	0x0802a205
 802a9c8:	20000120 	.word	0x20000120

0802a9cc <_free_r>:
 802a9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a9ce:	2900      	cmp	r1, #0
 802a9d0:	d044      	beq.n	802aa5c <_free_r+0x90>
 802a9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a9d6:	9001      	str	r0, [sp, #4]
 802a9d8:	2b00      	cmp	r3, #0
 802a9da:	f1a1 0404 	sub.w	r4, r1, #4
 802a9de:	bfb8      	it	lt
 802a9e0:	18e4      	addlt	r4, r4, r3
 802a9e2:	f7ff fcbf 	bl	802a364 <__malloc_lock>
 802a9e6:	4a1e      	ldr	r2, [pc, #120]	; (802aa60 <_free_r+0x94>)
 802a9e8:	9801      	ldr	r0, [sp, #4]
 802a9ea:	6813      	ldr	r3, [r2, #0]
 802a9ec:	b933      	cbnz	r3, 802a9fc <_free_r+0x30>
 802a9ee:	6063      	str	r3, [r4, #4]
 802a9f0:	6014      	str	r4, [r2, #0]
 802a9f2:	b003      	add	sp, #12
 802a9f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a9f8:	f7ff bcba 	b.w	802a370 <__malloc_unlock>
 802a9fc:	42a3      	cmp	r3, r4
 802a9fe:	d908      	bls.n	802aa12 <_free_r+0x46>
 802aa00:	6825      	ldr	r5, [r4, #0]
 802aa02:	1961      	adds	r1, r4, r5
 802aa04:	428b      	cmp	r3, r1
 802aa06:	bf01      	itttt	eq
 802aa08:	6819      	ldreq	r1, [r3, #0]
 802aa0a:	685b      	ldreq	r3, [r3, #4]
 802aa0c:	1949      	addeq	r1, r1, r5
 802aa0e:	6021      	streq	r1, [r4, #0]
 802aa10:	e7ed      	b.n	802a9ee <_free_r+0x22>
 802aa12:	461a      	mov	r2, r3
 802aa14:	685b      	ldr	r3, [r3, #4]
 802aa16:	b10b      	cbz	r3, 802aa1c <_free_r+0x50>
 802aa18:	42a3      	cmp	r3, r4
 802aa1a:	d9fa      	bls.n	802aa12 <_free_r+0x46>
 802aa1c:	6811      	ldr	r1, [r2, #0]
 802aa1e:	1855      	adds	r5, r2, r1
 802aa20:	42a5      	cmp	r5, r4
 802aa22:	d10b      	bne.n	802aa3c <_free_r+0x70>
 802aa24:	6824      	ldr	r4, [r4, #0]
 802aa26:	4421      	add	r1, r4
 802aa28:	1854      	adds	r4, r2, r1
 802aa2a:	42a3      	cmp	r3, r4
 802aa2c:	6011      	str	r1, [r2, #0]
 802aa2e:	d1e0      	bne.n	802a9f2 <_free_r+0x26>
 802aa30:	681c      	ldr	r4, [r3, #0]
 802aa32:	685b      	ldr	r3, [r3, #4]
 802aa34:	6053      	str	r3, [r2, #4]
 802aa36:	440c      	add	r4, r1
 802aa38:	6014      	str	r4, [r2, #0]
 802aa3a:	e7da      	b.n	802a9f2 <_free_r+0x26>
 802aa3c:	d902      	bls.n	802aa44 <_free_r+0x78>
 802aa3e:	230c      	movs	r3, #12
 802aa40:	6003      	str	r3, [r0, #0]
 802aa42:	e7d6      	b.n	802a9f2 <_free_r+0x26>
 802aa44:	6825      	ldr	r5, [r4, #0]
 802aa46:	1961      	adds	r1, r4, r5
 802aa48:	428b      	cmp	r3, r1
 802aa4a:	bf04      	itt	eq
 802aa4c:	6819      	ldreq	r1, [r3, #0]
 802aa4e:	685b      	ldreq	r3, [r3, #4]
 802aa50:	6063      	str	r3, [r4, #4]
 802aa52:	bf04      	itt	eq
 802aa54:	1949      	addeq	r1, r1, r5
 802aa56:	6021      	streq	r1, [r4, #0]
 802aa58:	6054      	str	r4, [r2, #4]
 802aa5a:	e7ca      	b.n	802a9f2 <_free_r+0x26>
 802aa5c:	b003      	add	sp, #12
 802aa5e:	bd30      	pop	{r4, r5, pc}
 802aa60:	20015a6c 	.word	0x20015a6c

0802aa64 <__ssputs_r>:
 802aa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aa68:	688e      	ldr	r6, [r1, #8]
 802aa6a:	461f      	mov	r7, r3
 802aa6c:	42be      	cmp	r6, r7
 802aa6e:	680b      	ldr	r3, [r1, #0]
 802aa70:	4682      	mov	sl, r0
 802aa72:	460c      	mov	r4, r1
 802aa74:	4690      	mov	r8, r2
 802aa76:	d82c      	bhi.n	802aad2 <__ssputs_r+0x6e>
 802aa78:	898a      	ldrh	r2, [r1, #12]
 802aa7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802aa7e:	d026      	beq.n	802aace <__ssputs_r+0x6a>
 802aa80:	6965      	ldr	r5, [r4, #20]
 802aa82:	6909      	ldr	r1, [r1, #16]
 802aa84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802aa88:	eba3 0901 	sub.w	r9, r3, r1
 802aa8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802aa90:	1c7b      	adds	r3, r7, #1
 802aa92:	444b      	add	r3, r9
 802aa94:	106d      	asrs	r5, r5, #1
 802aa96:	429d      	cmp	r5, r3
 802aa98:	bf38      	it	cc
 802aa9a:	461d      	movcc	r5, r3
 802aa9c:	0553      	lsls	r3, r2, #21
 802aa9e:	d527      	bpl.n	802aaf0 <__ssputs_r+0x8c>
 802aaa0:	4629      	mov	r1, r5
 802aaa2:	f7ff fbdf 	bl	802a264 <_malloc_r>
 802aaa6:	4606      	mov	r6, r0
 802aaa8:	b360      	cbz	r0, 802ab04 <__ssputs_r+0xa0>
 802aaaa:	6921      	ldr	r1, [r4, #16]
 802aaac:	464a      	mov	r2, r9
 802aaae:	f7ff ff20 	bl	802a8f2 <memcpy>
 802aab2:	89a3      	ldrh	r3, [r4, #12]
 802aab4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802aab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802aabc:	81a3      	strh	r3, [r4, #12]
 802aabe:	6126      	str	r6, [r4, #16]
 802aac0:	6165      	str	r5, [r4, #20]
 802aac2:	444e      	add	r6, r9
 802aac4:	eba5 0509 	sub.w	r5, r5, r9
 802aac8:	6026      	str	r6, [r4, #0]
 802aaca:	60a5      	str	r5, [r4, #8]
 802aacc:	463e      	mov	r6, r7
 802aace:	42be      	cmp	r6, r7
 802aad0:	d900      	bls.n	802aad4 <__ssputs_r+0x70>
 802aad2:	463e      	mov	r6, r7
 802aad4:	6820      	ldr	r0, [r4, #0]
 802aad6:	4632      	mov	r2, r6
 802aad8:	4641      	mov	r1, r8
 802aada:	f000 fcff 	bl	802b4dc <memmove>
 802aade:	68a3      	ldr	r3, [r4, #8]
 802aae0:	1b9b      	subs	r3, r3, r6
 802aae2:	60a3      	str	r3, [r4, #8]
 802aae4:	6823      	ldr	r3, [r4, #0]
 802aae6:	4433      	add	r3, r6
 802aae8:	6023      	str	r3, [r4, #0]
 802aaea:	2000      	movs	r0, #0
 802aaec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aaf0:	462a      	mov	r2, r5
 802aaf2:	f000 fd2f 	bl	802b554 <_realloc_r>
 802aaf6:	4606      	mov	r6, r0
 802aaf8:	2800      	cmp	r0, #0
 802aafa:	d1e0      	bne.n	802aabe <__ssputs_r+0x5a>
 802aafc:	6921      	ldr	r1, [r4, #16]
 802aafe:	4650      	mov	r0, sl
 802ab00:	f7ff ff64 	bl	802a9cc <_free_r>
 802ab04:	230c      	movs	r3, #12
 802ab06:	f8ca 3000 	str.w	r3, [sl]
 802ab0a:	89a3      	ldrh	r3, [r4, #12]
 802ab0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ab10:	81a3      	strh	r3, [r4, #12]
 802ab12:	f04f 30ff 	mov.w	r0, #4294967295
 802ab16:	e7e9      	b.n	802aaec <__ssputs_r+0x88>

0802ab18 <_svfiprintf_r>:
 802ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab1c:	4698      	mov	r8, r3
 802ab1e:	898b      	ldrh	r3, [r1, #12]
 802ab20:	061b      	lsls	r3, r3, #24
 802ab22:	b09d      	sub	sp, #116	; 0x74
 802ab24:	4607      	mov	r7, r0
 802ab26:	460d      	mov	r5, r1
 802ab28:	4614      	mov	r4, r2
 802ab2a:	d50e      	bpl.n	802ab4a <_svfiprintf_r+0x32>
 802ab2c:	690b      	ldr	r3, [r1, #16]
 802ab2e:	b963      	cbnz	r3, 802ab4a <_svfiprintf_r+0x32>
 802ab30:	2140      	movs	r1, #64	; 0x40
 802ab32:	f7ff fb97 	bl	802a264 <_malloc_r>
 802ab36:	6028      	str	r0, [r5, #0]
 802ab38:	6128      	str	r0, [r5, #16]
 802ab3a:	b920      	cbnz	r0, 802ab46 <_svfiprintf_r+0x2e>
 802ab3c:	230c      	movs	r3, #12
 802ab3e:	603b      	str	r3, [r7, #0]
 802ab40:	f04f 30ff 	mov.w	r0, #4294967295
 802ab44:	e0d0      	b.n	802ace8 <_svfiprintf_r+0x1d0>
 802ab46:	2340      	movs	r3, #64	; 0x40
 802ab48:	616b      	str	r3, [r5, #20]
 802ab4a:	2300      	movs	r3, #0
 802ab4c:	9309      	str	r3, [sp, #36]	; 0x24
 802ab4e:	2320      	movs	r3, #32
 802ab50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ab54:	f8cd 800c 	str.w	r8, [sp, #12]
 802ab58:	2330      	movs	r3, #48	; 0x30
 802ab5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802ad00 <_svfiprintf_r+0x1e8>
 802ab5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ab62:	f04f 0901 	mov.w	r9, #1
 802ab66:	4623      	mov	r3, r4
 802ab68:	469a      	mov	sl, r3
 802ab6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ab6e:	b10a      	cbz	r2, 802ab74 <_svfiprintf_r+0x5c>
 802ab70:	2a25      	cmp	r2, #37	; 0x25
 802ab72:	d1f9      	bne.n	802ab68 <_svfiprintf_r+0x50>
 802ab74:	ebba 0b04 	subs.w	fp, sl, r4
 802ab78:	d00b      	beq.n	802ab92 <_svfiprintf_r+0x7a>
 802ab7a:	465b      	mov	r3, fp
 802ab7c:	4622      	mov	r2, r4
 802ab7e:	4629      	mov	r1, r5
 802ab80:	4638      	mov	r0, r7
 802ab82:	f7ff ff6f 	bl	802aa64 <__ssputs_r>
 802ab86:	3001      	adds	r0, #1
 802ab88:	f000 80a9 	beq.w	802acde <_svfiprintf_r+0x1c6>
 802ab8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ab8e:	445a      	add	r2, fp
 802ab90:	9209      	str	r2, [sp, #36]	; 0x24
 802ab92:	f89a 3000 	ldrb.w	r3, [sl]
 802ab96:	2b00      	cmp	r3, #0
 802ab98:	f000 80a1 	beq.w	802acde <_svfiprintf_r+0x1c6>
 802ab9c:	2300      	movs	r3, #0
 802ab9e:	f04f 32ff 	mov.w	r2, #4294967295
 802aba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aba6:	f10a 0a01 	add.w	sl, sl, #1
 802abaa:	9304      	str	r3, [sp, #16]
 802abac:	9307      	str	r3, [sp, #28]
 802abae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802abb2:	931a      	str	r3, [sp, #104]	; 0x68
 802abb4:	4654      	mov	r4, sl
 802abb6:	2205      	movs	r2, #5
 802abb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802abbc:	4850      	ldr	r0, [pc, #320]	; (802ad00 <_svfiprintf_r+0x1e8>)
 802abbe:	f7d5 fb27 	bl	8000210 <memchr>
 802abc2:	9a04      	ldr	r2, [sp, #16]
 802abc4:	b9d8      	cbnz	r0, 802abfe <_svfiprintf_r+0xe6>
 802abc6:	06d0      	lsls	r0, r2, #27
 802abc8:	bf44      	itt	mi
 802abca:	2320      	movmi	r3, #32
 802abcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802abd0:	0711      	lsls	r1, r2, #28
 802abd2:	bf44      	itt	mi
 802abd4:	232b      	movmi	r3, #43	; 0x2b
 802abd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802abda:	f89a 3000 	ldrb.w	r3, [sl]
 802abde:	2b2a      	cmp	r3, #42	; 0x2a
 802abe0:	d015      	beq.n	802ac0e <_svfiprintf_r+0xf6>
 802abe2:	9a07      	ldr	r2, [sp, #28]
 802abe4:	4654      	mov	r4, sl
 802abe6:	2000      	movs	r0, #0
 802abe8:	f04f 0c0a 	mov.w	ip, #10
 802abec:	4621      	mov	r1, r4
 802abee:	f811 3b01 	ldrb.w	r3, [r1], #1
 802abf2:	3b30      	subs	r3, #48	; 0x30
 802abf4:	2b09      	cmp	r3, #9
 802abf6:	d94d      	bls.n	802ac94 <_svfiprintf_r+0x17c>
 802abf8:	b1b0      	cbz	r0, 802ac28 <_svfiprintf_r+0x110>
 802abfa:	9207      	str	r2, [sp, #28]
 802abfc:	e014      	b.n	802ac28 <_svfiprintf_r+0x110>
 802abfe:	eba0 0308 	sub.w	r3, r0, r8
 802ac02:	fa09 f303 	lsl.w	r3, r9, r3
 802ac06:	4313      	orrs	r3, r2
 802ac08:	9304      	str	r3, [sp, #16]
 802ac0a:	46a2      	mov	sl, r4
 802ac0c:	e7d2      	b.n	802abb4 <_svfiprintf_r+0x9c>
 802ac0e:	9b03      	ldr	r3, [sp, #12]
 802ac10:	1d19      	adds	r1, r3, #4
 802ac12:	681b      	ldr	r3, [r3, #0]
 802ac14:	9103      	str	r1, [sp, #12]
 802ac16:	2b00      	cmp	r3, #0
 802ac18:	bfbb      	ittet	lt
 802ac1a:	425b      	neglt	r3, r3
 802ac1c:	f042 0202 	orrlt.w	r2, r2, #2
 802ac20:	9307      	strge	r3, [sp, #28]
 802ac22:	9307      	strlt	r3, [sp, #28]
 802ac24:	bfb8      	it	lt
 802ac26:	9204      	strlt	r2, [sp, #16]
 802ac28:	7823      	ldrb	r3, [r4, #0]
 802ac2a:	2b2e      	cmp	r3, #46	; 0x2e
 802ac2c:	d10c      	bne.n	802ac48 <_svfiprintf_r+0x130>
 802ac2e:	7863      	ldrb	r3, [r4, #1]
 802ac30:	2b2a      	cmp	r3, #42	; 0x2a
 802ac32:	d134      	bne.n	802ac9e <_svfiprintf_r+0x186>
 802ac34:	9b03      	ldr	r3, [sp, #12]
 802ac36:	1d1a      	adds	r2, r3, #4
 802ac38:	681b      	ldr	r3, [r3, #0]
 802ac3a:	9203      	str	r2, [sp, #12]
 802ac3c:	2b00      	cmp	r3, #0
 802ac3e:	bfb8      	it	lt
 802ac40:	f04f 33ff 	movlt.w	r3, #4294967295
 802ac44:	3402      	adds	r4, #2
 802ac46:	9305      	str	r3, [sp, #20]
 802ac48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802ad10 <_svfiprintf_r+0x1f8>
 802ac4c:	7821      	ldrb	r1, [r4, #0]
 802ac4e:	2203      	movs	r2, #3
 802ac50:	4650      	mov	r0, sl
 802ac52:	f7d5 fadd 	bl	8000210 <memchr>
 802ac56:	b138      	cbz	r0, 802ac68 <_svfiprintf_r+0x150>
 802ac58:	9b04      	ldr	r3, [sp, #16]
 802ac5a:	eba0 000a 	sub.w	r0, r0, sl
 802ac5e:	2240      	movs	r2, #64	; 0x40
 802ac60:	4082      	lsls	r2, r0
 802ac62:	4313      	orrs	r3, r2
 802ac64:	3401      	adds	r4, #1
 802ac66:	9304      	str	r3, [sp, #16]
 802ac68:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ac6c:	4825      	ldr	r0, [pc, #148]	; (802ad04 <_svfiprintf_r+0x1ec>)
 802ac6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ac72:	2206      	movs	r2, #6
 802ac74:	f7d5 facc 	bl	8000210 <memchr>
 802ac78:	2800      	cmp	r0, #0
 802ac7a:	d038      	beq.n	802acee <_svfiprintf_r+0x1d6>
 802ac7c:	4b22      	ldr	r3, [pc, #136]	; (802ad08 <_svfiprintf_r+0x1f0>)
 802ac7e:	bb1b      	cbnz	r3, 802acc8 <_svfiprintf_r+0x1b0>
 802ac80:	9b03      	ldr	r3, [sp, #12]
 802ac82:	3307      	adds	r3, #7
 802ac84:	f023 0307 	bic.w	r3, r3, #7
 802ac88:	3308      	adds	r3, #8
 802ac8a:	9303      	str	r3, [sp, #12]
 802ac8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac8e:	4433      	add	r3, r6
 802ac90:	9309      	str	r3, [sp, #36]	; 0x24
 802ac92:	e768      	b.n	802ab66 <_svfiprintf_r+0x4e>
 802ac94:	fb0c 3202 	mla	r2, ip, r2, r3
 802ac98:	460c      	mov	r4, r1
 802ac9a:	2001      	movs	r0, #1
 802ac9c:	e7a6      	b.n	802abec <_svfiprintf_r+0xd4>
 802ac9e:	2300      	movs	r3, #0
 802aca0:	3401      	adds	r4, #1
 802aca2:	9305      	str	r3, [sp, #20]
 802aca4:	4619      	mov	r1, r3
 802aca6:	f04f 0c0a 	mov.w	ip, #10
 802acaa:	4620      	mov	r0, r4
 802acac:	f810 2b01 	ldrb.w	r2, [r0], #1
 802acb0:	3a30      	subs	r2, #48	; 0x30
 802acb2:	2a09      	cmp	r2, #9
 802acb4:	d903      	bls.n	802acbe <_svfiprintf_r+0x1a6>
 802acb6:	2b00      	cmp	r3, #0
 802acb8:	d0c6      	beq.n	802ac48 <_svfiprintf_r+0x130>
 802acba:	9105      	str	r1, [sp, #20]
 802acbc:	e7c4      	b.n	802ac48 <_svfiprintf_r+0x130>
 802acbe:	fb0c 2101 	mla	r1, ip, r1, r2
 802acc2:	4604      	mov	r4, r0
 802acc4:	2301      	movs	r3, #1
 802acc6:	e7f0      	b.n	802acaa <_svfiprintf_r+0x192>
 802acc8:	ab03      	add	r3, sp, #12
 802acca:	9300      	str	r3, [sp, #0]
 802accc:	462a      	mov	r2, r5
 802acce:	4b0f      	ldr	r3, [pc, #60]	; (802ad0c <_svfiprintf_r+0x1f4>)
 802acd0:	a904      	add	r1, sp, #16
 802acd2:	4638      	mov	r0, r7
 802acd4:	f3af 8000 	nop.w
 802acd8:	1c42      	adds	r2, r0, #1
 802acda:	4606      	mov	r6, r0
 802acdc:	d1d6      	bne.n	802ac8c <_svfiprintf_r+0x174>
 802acde:	89ab      	ldrh	r3, [r5, #12]
 802ace0:	065b      	lsls	r3, r3, #25
 802ace2:	f53f af2d 	bmi.w	802ab40 <_svfiprintf_r+0x28>
 802ace6:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ace8:	b01d      	add	sp, #116	; 0x74
 802acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acee:	ab03      	add	r3, sp, #12
 802acf0:	9300      	str	r3, [sp, #0]
 802acf2:	462a      	mov	r2, r5
 802acf4:	4b05      	ldr	r3, [pc, #20]	; (802ad0c <_svfiprintf_r+0x1f4>)
 802acf6:	a904      	add	r1, sp, #16
 802acf8:	4638      	mov	r0, r7
 802acfa:	f000 f9bd 	bl	802b078 <_printf_i>
 802acfe:	e7eb      	b.n	802acd8 <_svfiprintf_r+0x1c0>
 802ad00:	0802fd98 	.word	0x0802fd98
 802ad04:	0802fda2 	.word	0x0802fda2
 802ad08:	00000000 	.word	0x00000000
 802ad0c:	0802aa65 	.word	0x0802aa65
 802ad10:	0802fd9e 	.word	0x0802fd9e

0802ad14 <__sfputc_r>:
 802ad14:	6893      	ldr	r3, [r2, #8]
 802ad16:	3b01      	subs	r3, #1
 802ad18:	2b00      	cmp	r3, #0
 802ad1a:	b410      	push	{r4}
 802ad1c:	6093      	str	r3, [r2, #8]
 802ad1e:	da08      	bge.n	802ad32 <__sfputc_r+0x1e>
 802ad20:	6994      	ldr	r4, [r2, #24]
 802ad22:	42a3      	cmp	r3, r4
 802ad24:	db01      	blt.n	802ad2a <__sfputc_r+0x16>
 802ad26:	290a      	cmp	r1, #10
 802ad28:	d103      	bne.n	802ad32 <__sfputc_r+0x1e>
 802ad2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad2e:	f7ff bc6a 	b.w	802a606 <__swbuf_r>
 802ad32:	6813      	ldr	r3, [r2, #0]
 802ad34:	1c58      	adds	r0, r3, #1
 802ad36:	6010      	str	r0, [r2, #0]
 802ad38:	7019      	strb	r1, [r3, #0]
 802ad3a:	4608      	mov	r0, r1
 802ad3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad40:	4770      	bx	lr

0802ad42 <__sfputs_r>:
 802ad42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ad44:	4606      	mov	r6, r0
 802ad46:	460f      	mov	r7, r1
 802ad48:	4614      	mov	r4, r2
 802ad4a:	18d5      	adds	r5, r2, r3
 802ad4c:	42ac      	cmp	r4, r5
 802ad4e:	d101      	bne.n	802ad54 <__sfputs_r+0x12>
 802ad50:	2000      	movs	r0, #0
 802ad52:	e007      	b.n	802ad64 <__sfputs_r+0x22>
 802ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad58:	463a      	mov	r2, r7
 802ad5a:	4630      	mov	r0, r6
 802ad5c:	f7ff ffda 	bl	802ad14 <__sfputc_r>
 802ad60:	1c43      	adds	r3, r0, #1
 802ad62:	d1f3      	bne.n	802ad4c <__sfputs_r+0xa>
 802ad64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ad68 <_vfiprintf_r>:
 802ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad6c:	460d      	mov	r5, r1
 802ad6e:	b09d      	sub	sp, #116	; 0x74
 802ad70:	4614      	mov	r4, r2
 802ad72:	4698      	mov	r8, r3
 802ad74:	4606      	mov	r6, r0
 802ad76:	b118      	cbz	r0, 802ad80 <_vfiprintf_r+0x18>
 802ad78:	6a03      	ldr	r3, [r0, #32]
 802ad7a:	b90b      	cbnz	r3, 802ad80 <_vfiprintf_r+0x18>
 802ad7c:	f7ff fb98 	bl	802a4b0 <__sinit>
 802ad80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ad82:	07d9      	lsls	r1, r3, #31
 802ad84:	d405      	bmi.n	802ad92 <_vfiprintf_r+0x2a>
 802ad86:	89ab      	ldrh	r3, [r5, #12]
 802ad88:	059a      	lsls	r2, r3, #22
 802ad8a:	d402      	bmi.n	802ad92 <_vfiprintf_r+0x2a>
 802ad8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ad8e:	f7ff fdae 	bl	802a8ee <__retarget_lock_acquire_recursive>
 802ad92:	89ab      	ldrh	r3, [r5, #12]
 802ad94:	071b      	lsls	r3, r3, #28
 802ad96:	d501      	bpl.n	802ad9c <_vfiprintf_r+0x34>
 802ad98:	692b      	ldr	r3, [r5, #16]
 802ad9a:	b99b      	cbnz	r3, 802adc4 <_vfiprintf_r+0x5c>
 802ad9c:	4629      	mov	r1, r5
 802ad9e:	4630      	mov	r0, r6
 802ada0:	f7ff fc6e 	bl	802a680 <__swsetup_r>
 802ada4:	b170      	cbz	r0, 802adc4 <_vfiprintf_r+0x5c>
 802ada6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ada8:	07dc      	lsls	r4, r3, #31
 802adaa:	d504      	bpl.n	802adb6 <_vfiprintf_r+0x4e>
 802adac:	f04f 30ff 	mov.w	r0, #4294967295
 802adb0:	b01d      	add	sp, #116	; 0x74
 802adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802adb6:	89ab      	ldrh	r3, [r5, #12]
 802adb8:	0598      	lsls	r0, r3, #22
 802adba:	d4f7      	bmi.n	802adac <_vfiprintf_r+0x44>
 802adbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802adbe:	f7ff fd97 	bl	802a8f0 <__retarget_lock_release_recursive>
 802adc2:	e7f3      	b.n	802adac <_vfiprintf_r+0x44>
 802adc4:	2300      	movs	r3, #0
 802adc6:	9309      	str	r3, [sp, #36]	; 0x24
 802adc8:	2320      	movs	r3, #32
 802adca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802adce:	f8cd 800c 	str.w	r8, [sp, #12]
 802add2:	2330      	movs	r3, #48	; 0x30
 802add4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802af88 <_vfiprintf_r+0x220>
 802add8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802addc:	f04f 0901 	mov.w	r9, #1
 802ade0:	4623      	mov	r3, r4
 802ade2:	469a      	mov	sl, r3
 802ade4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ade8:	b10a      	cbz	r2, 802adee <_vfiprintf_r+0x86>
 802adea:	2a25      	cmp	r2, #37	; 0x25
 802adec:	d1f9      	bne.n	802ade2 <_vfiprintf_r+0x7a>
 802adee:	ebba 0b04 	subs.w	fp, sl, r4
 802adf2:	d00b      	beq.n	802ae0c <_vfiprintf_r+0xa4>
 802adf4:	465b      	mov	r3, fp
 802adf6:	4622      	mov	r2, r4
 802adf8:	4629      	mov	r1, r5
 802adfa:	4630      	mov	r0, r6
 802adfc:	f7ff ffa1 	bl	802ad42 <__sfputs_r>
 802ae00:	3001      	adds	r0, #1
 802ae02:	f000 80a9 	beq.w	802af58 <_vfiprintf_r+0x1f0>
 802ae06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ae08:	445a      	add	r2, fp
 802ae0a:	9209      	str	r2, [sp, #36]	; 0x24
 802ae0c:	f89a 3000 	ldrb.w	r3, [sl]
 802ae10:	2b00      	cmp	r3, #0
 802ae12:	f000 80a1 	beq.w	802af58 <_vfiprintf_r+0x1f0>
 802ae16:	2300      	movs	r3, #0
 802ae18:	f04f 32ff 	mov.w	r2, #4294967295
 802ae1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ae20:	f10a 0a01 	add.w	sl, sl, #1
 802ae24:	9304      	str	r3, [sp, #16]
 802ae26:	9307      	str	r3, [sp, #28]
 802ae28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ae2c:	931a      	str	r3, [sp, #104]	; 0x68
 802ae2e:	4654      	mov	r4, sl
 802ae30:	2205      	movs	r2, #5
 802ae32:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae36:	4854      	ldr	r0, [pc, #336]	; (802af88 <_vfiprintf_r+0x220>)
 802ae38:	f7d5 f9ea 	bl	8000210 <memchr>
 802ae3c:	9a04      	ldr	r2, [sp, #16]
 802ae3e:	b9d8      	cbnz	r0, 802ae78 <_vfiprintf_r+0x110>
 802ae40:	06d1      	lsls	r1, r2, #27
 802ae42:	bf44      	itt	mi
 802ae44:	2320      	movmi	r3, #32
 802ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ae4a:	0713      	lsls	r3, r2, #28
 802ae4c:	bf44      	itt	mi
 802ae4e:	232b      	movmi	r3, #43	; 0x2b
 802ae50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ae54:	f89a 3000 	ldrb.w	r3, [sl]
 802ae58:	2b2a      	cmp	r3, #42	; 0x2a
 802ae5a:	d015      	beq.n	802ae88 <_vfiprintf_r+0x120>
 802ae5c:	9a07      	ldr	r2, [sp, #28]
 802ae5e:	4654      	mov	r4, sl
 802ae60:	2000      	movs	r0, #0
 802ae62:	f04f 0c0a 	mov.w	ip, #10
 802ae66:	4621      	mov	r1, r4
 802ae68:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ae6c:	3b30      	subs	r3, #48	; 0x30
 802ae6e:	2b09      	cmp	r3, #9
 802ae70:	d94d      	bls.n	802af0e <_vfiprintf_r+0x1a6>
 802ae72:	b1b0      	cbz	r0, 802aea2 <_vfiprintf_r+0x13a>
 802ae74:	9207      	str	r2, [sp, #28]
 802ae76:	e014      	b.n	802aea2 <_vfiprintf_r+0x13a>
 802ae78:	eba0 0308 	sub.w	r3, r0, r8
 802ae7c:	fa09 f303 	lsl.w	r3, r9, r3
 802ae80:	4313      	orrs	r3, r2
 802ae82:	9304      	str	r3, [sp, #16]
 802ae84:	46a2      	mov	sl, r4
 802ae86:	e7d2      	b.n	802ae2e <_vfiprintf_r+0xc6>
 802ae88:	9b03      	ldr	r3, [sp, #12]
 802ae8a:	1d19      	adds	r1, r3, #4
 802ae8c:	681b      	ldr	r3, [r3, #0]
 802ae8e:	9103      	str	r1, [sp, #12]
 802ae90:	2b00      	cmp	r3, #0
 802ae92:	bfbb      	ittet	lt
 802ae94:	425b      	neglt	r3, r3
 802ae96:	f042 0202 	orrlt.w	r2, r2, #2
 802ae9a:	9307      	strge	r3, [sp, #28]
 802ae9c:	9307      	strlt	r3, [sp, #28]
 802ae9e:	bfb8      	it	lt
 802aea0:	9204      	strlt	r2, [sp, #16]
 802aea2:	7823      	ldrb	r3, [r4, #0]
 802aea4:	2b2e      	cmp	r3, #46	; 0x2e
 802aea6:	d10c      	bne.n	802aec2 <_vfiprintf_r+0x15a>
 802aea8:	7863      	ldrb	r3, [r4, #1]
 802aeaa:	2b2a      	cmp	r3, #42	; 0x2a
 802aeac:	d134      	bne.n	802af18 <_vfiprintf_r+0x1b0>
 802aeae:	9b03      	ldr	r3, [sp, #12]
 802aeb0:	1d1a      	adds	r2, r3, #4
 802aeb2:	681b      	ldr	r3, [r3, #0]
 802aeb4:	9203      	str	r2, [sp, #12]
 802aeb6:	2b00      	cmp	r3, #0
 802aeb8:	bfb8      	it	lt
 802aeba:	f04f 33ff 	movlt.w	r3, #4294967295
 802aebe:	3402      	adds	r4, #2
 802aec0:	9305      	str	r3, [sp, #20]
 802aec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802af98 <_vfiprintf_r+0x230>
 802aec6:	7821      	ldrb	r1, [r4, #0]
 802aec8:	2203      	movs	r2, #3
 802aeca:	4650      	mov	r0, sl
 802aecc:	f7d5 f9a0 	bl	8000210 <memchr>
 802aed0:	b138      	cbz	r0, 802aee2 <_vfiprintf_r+0x17a>
 802aed2:	9b04      	ldr	r3, [sp, #16]
 802aed4:	eba0 000a 	sub.w	r0, r0, sl
 802aed8:	2240      	movs	r2, #64	; 0x40
 802aeda:	4082      	lsls	r2, r0
 802aedc:	4313      	orrs	r3, r2
 802aede:	3401      	adds	r4, #1
 802aee0:	9304      	str	r3, [sp, #16]
 802aee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aee6:	4829      	ldr	r0, [pc, #164]	; (802af8c <_vfiprintf_r+0x224>)
 802aee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802aeec:	2206      	movs	r2, #6
 802aeee:	f7d5 f98f 	bl	8000210 <memchr>
 802aef2:	2800      	cmp	r0, #0
 802aef4:	d03f      	beq.n	802af76 <_vfiprintf_r+0x20e>
 802aef6:	4b26      	ldr	r3, [pc, #152]	; (802af90 <_vfiprintf_r+0x228>)
 802aef8:	bb1b      	cbnz	r3, 802af42 <_vfiprintf_r+0x1da>
 802aefa:	9b03      	ldr	r3, [sp, #12]
 802aefc:	3307      	adds	r3, #7
 802aefe:	f023 0307 	bic.w	r3, r3, #7
 802af02:	3308      	adds	r3, #8
 802af04:	9303      	str	r3, [sp, #12]
 802af06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af08:	443b      	add	r3, r7
 802af0a:	9309      	str	r3, [sp, #36]	; 0x24
 802af0c:	e768      	b.n	802ade0 <_vfiprintf_r+0x78>
 802af0e:	fb0c 3202 	mla	r2, ip, r2, r3
 802af12:	460c      	mov	r4, r1
 802af14:	2001      	movs	r0, #1
 802af16:	e7a6      	b.n	802ae66 <_vfiprintf_r+0xfe>
 802af18:	2300      	movs	r3, #0
 802af1a:	3401      	adds	r4, #1
 802af1c:	9305      	str	r3, [sp, #20]
 802af1e:	4619      	mov	r1, r3
 802af20:	f04f 0c0a 	mov.w	ip, #10
 802af24:	4620      	mov	r0, r4
 802af26:	f810 2b01 	ldrb.w	r2, [r0], #1
 802af2a:	3a30      	subs	r2, #48	; 0x30
 802af2c:	2a09      	cmp	r2, #9
 802af2e:	d903      	bls.n	802af38 <_vfiprintf_r+0x1d0>
 802af30:	2b00      	cmp	r3, #0
 802af32:	d0c6      	beq.n	802aec2 <_vfiprintf_r+0x15a>
 802af34:	9105      	str	r1, [sp, #20]
 802af36:	e7c4      	b.n	802aec2 <_vfiprintf_r+0x15a>
 802af38:	fb0c 2101 	mla	r1, ip, r1, r2
 802af3c:	4604      	mov	r4, r0
 802af3e:	2301      	movs	r3, #1
 802af40:	e7f0      	b.n	802af24 <_vfiprintf_r+0x1bc>
 802af42:	ab03      	add	r3, sp, #12
 802af44:	9300      	str	r3, [sp, #0]
 802af46:	462a      	mov	r2, r5
 802af48:	4b12      	ldr	r3, [pc, #72]	; (802af94 <_vfiprintf_r+0x22c>)
 802af4a:	a904      	add	r1, sp, #16
 802af4c:	4630      	mov	r0, r6
 802af4e:	f3af 8000 	nop.w
 802af52:	4607      	mov	r7, r0
 802af54:	1c78      	adds	r0, r7, #1
 802af56:	d1d6      	bne.n	802af06 <_vfiprintf_r+0x19e>
 802af58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802af5a:	07d9      	lsls	r1, r3, #31
 802af5c:	d405      	bmi.n	802af6a <_vfiprintf_r+0x202>
 802af5e:	89ab      	ldrh	r3, [r5, #12]
 802af60:	059a      	lsls	r2, r3, #22
 802af62:	d402      	bmi.n	802af6a <_vfiprintf_r+0x202>
 802af64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802af66:	f7ff fcc3 	bl	802a8f0 <__retarget_lock_release_recursive>
 802af6a:	89ab      	ldrh	r3, [r5, #12]
 802af6c:	065b      	lsls	r3, r3, #25
 802af6e:	f53f af1d 	bmi.w	802adac <_vfiprintf_r+0x44>
 802af72:	9809      	ldr	r0, [sp, #36]	; 0x24
 802af74:	e71c      	b.n	802adb0 <_vfiprintf_r+0x48>
 802af76:	ab03      	add	r3, sp, #12
 802af78:	9300      	str	r3, [sp, #0]
 802af7a:	462a      	mov	r2, r5
 802af7c:	4b05      	ldr	r3, [pc, #20]	; (802af94 <_vfiprintf_r+0x22c>)
 802af7e:	a904      	add	r1, sp, #16
 802af80:	4630      	mov	r0, r6
 802af82:	f000 f879 	bl	802b078 <_printf_i>
 802af86:	e7e4      	b.n	802af52 <_vfiprintf_r+0x1ea>
 802af88:	0802fd98 	.word	0x0802fd98
 802af8c:	0802fda2 	.word	0x0802fda2
 802af90:	00000000 	.word	0x00000000
 802af94:	0802ad43 	.word	0x0802ad43
 802af98:	0802fd9e 	.word	0x0802fd9e

0802af9c <_printf_common>:
 802af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802afa0:	4616      	mov	r6, r2
 802afa2:	4699      	mov	r9, r3
 802afa4:	688a      	ldr	r2, [r1, #8]
 802afa6:	690b      	ldr	r3, [r1, #16]
 802afa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802afac:	4293      	cmp	r3, r2
 802afae:	bfb8      	it	lt
 802afb0:	4613      	movlt	r3, r2
 802afb2:	6033      	str	r3, [r6, #0]
 802afb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802afb8:	4607      	mov	r7, r0
 802afba:	460c      	mov	r4, r1
 802afbc:	b10a      	cbz	r2, 802afc2 <_printf_common+0x26>
 802afbe:	3301      	adds	r3, #1
 802afc0:	6033      	str	r3, [r6, #0]
 802afc2:	6823      	ldr	r3, [r4, #0]
 802afc4:	0699      	lsls	r1, r3, #26
 802afc6:	bf42      	ittt	mi
 802afc8:	6833      	ldrmi	r3, [r6, #0]
 802afca:	3302      	addmi	r3, #2
 802afcc:	6033      	strmi	r3, [r6, #0]
 802afce:	6825      	ldr	r5, [r4, #0]
 802afd0:	f015 0506 	ands.w	r5, r5, #6
 802afd4:	d106      	bne.n	802afe4 <_printf_common+0x48>
 802afd6:	f104 0a19 	add.w	sl, r4, #25
 802afda:	68e3      	ldr	r3, [r4, #12]
 802afdc:	6832      	ldr	r2, [r6, #0]
 802afde:	1a9b      	subs	r3, r3, r2
 802afe0:	42ab      	cmp	r3, r5
 802afe2:	dc26      	bgt.n	802b032 <_printf_common+0x96>
 802afe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802afe8:	1e13      	subs	r3, r2, #0
 802afea:	6822      	ldr	r2, [r4, #0]
 802afec:	bf18      	it	ne
 802afee:	2301      	movne	r3, #1
 802aff0:	0692      	lsls	r2, r2, #26
 802aff2:	d42b      	bmi.n	802b04c <_printf_common+0xb0>
 802aff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802aff8:	4649      	mov	r1, r9
 802affa:	4638      	mov	r0, r7
 802affc:	47c0      	blx	r8
 802affe:	3001      	adds	r0, #1
 802b000:	d01e      	beq.n	802b040 <_printf_common+0xa4>
 802b002:	6823      	ldr	r3, [r4, #0]
 802b004:	6922      	ldr	r2, [r4, #16]
 802b006:	f003 0306 	and.w	r3, r3, #6
 802b00a:	2b04      	cmp	r3, #4
 802b00c:	bf02      	ittt	eq
 802b00e:	68e5      	ldreq	r5, [r4, #12]
 802b010:	6833      	ldreq	r3, [r6, #0]
 802b012:	1aed      	subeq	r5, r5, r3
 802b014:	68a3      	ldr	r3, [r4, #8]
 802b016:	bf0c      	ite	eq
 802b018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b01c:	2500      	movne	r5, #0
 802b01e:	4293      	cmp	r3, r2
 802b020:	bfc4      	itt	gt
 802b022:	1a9b      	subgt	r3, r3, r2
 802b024:	18ed      	addgt	r5, r5, r3
 802b026:	2600      	movs	r6, #0
 802b028:	341a      	adds	r4, #26
 802b02a:	42b5      	cmp	r5, r6
 802b02c:	d11a      	bne.n	802b064 <_printf_common+0xc8>
 802b02e:	2000      	movs	r0, #0
 802b030:	e008      	b.n	802b044 <_printf_common+0xa8>
 802b032:	2301      	movs	r3, #1
 802b034:	4652      	mov	r2, sl
 802b036:	4649      	mov	r1, r9
 802b038:	4638      	mov	r0, r7
 802b03a:	47c0      	blx	r8
 802b03c:	3001      	adds	r0, #1
 802b03e:	d103      	bne.n	802b048 <_printf_common+0xac>
 802b040:	f04f 30ff 	mov.w	r0, #4294967295
 802b044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b048:	3501      	adds	r5, #1
 802b04a:	e7c6      	b.n	802afda <_printf_common+0x3e>
 802b04c:	18e1      	adds	r1, r4, r3
 802b04e:	1c5a      	adds	r2, r3, #1
 802b050:	2030      	movs	r0, #48	; 0x30
 802b052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b056:	4422      	add	r2, r4
 802b058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b05c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b060:	3302      	adds	r3, #2
 802b062:	e7c7      	b.n	802aff4 <_printf_common+0x58>
 802b064:	2301      	movs	r3, #1
 802b066:	4622      	mov	r2, r4
 802b068:	4649      	mov	r1, r9
 802b06a:	4638      	mov	r0, r7
 802b06c:	47c0      	blx	r8
 802b06e:	3001      	adds	r0, #1
 802b070:	d0e6      	beq.n	802b040 <_printf_common+0xa4>
 802b072:	3601      	adds	r6, #1
 802b074:	e7d9      	b.n	802b02a <_printf_common+0x8e>
	...

0802b078 <_printf_i>:
 802b078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b07c:	7e0f      	ldrb	r7, [r1, #24]
 802b07e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b080:	2f78      	cmp	r7, #120	; 0x78
 802b082:	4691      	mov	r9, r2
 802b084:	4680      	mov	r8, r0
 802b086:	460c      	mov	r4, r1
 802b088:	469a      	mov	sl, r3
 802b08a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802b08e:	d807      	bhi.n	802b0a0 <_printf_i+0x28>
 802b090:	2f62      	cmp	r7, #98	; 0x62
 802b092:	d80a      	bhi.n	802b0aa <_printf_i+0x32>
 802b094:	2f00      	cmp	r7, #0
 802b096:	f000 80d4 	beq.w	802b242 <_printf_i+0x1ca>
 802b09a:	2f58      	cmp	r7, #88	; 0x58
 802b09c:	f000 80c0 	beq.w	802b220 <_printf_i+0x1a8>
 802b0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b0a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b0a8:	e03a      	b.n	802b120 <_printf_i+0xa8>
 802b0aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b0ae:	2b15      	cmp	r3, #21
 802b0b0:	d8f6      	bhi.n	802b0a0 <_printf_i+0x28>
 802b0b2:	a101      	add	r1, pc, #4	; (adr r1, 802b0b8 <_printf_i+0x40>)
 802b0b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b0b8:	0802b111 	.word	0x0802b111
 802b0bc:	0802b125 	.word	0x0802b125
 802b0c0:	0802b0a1 	.word	0x0802b0a1
 802b0c4:	0802b0a1 	.word	0x0802b0a1
 802b0c8:	0802b0a1 	.word	0x0802b0a1
 802b0cc:	0802b0a1 	.word	0x0802b0a1
 802b0d0:	0802b125 	.word	0x0802b125
 802b0d4:	0802b0a1 	.word	0x0802b0a1
 802b0d8:	0802b0a1 	.word	0x0802b0a1
 802b0dc:	0802b0a1 	.word	0x0802b0a1
 802b0e0:	0802b0a1 	.word	0x0802b0a1
 802b0e4:	0802b229 	.word	0x0802b229
 802b0e8:	0802b151 	.word	0x0802b151
 802b0ec:	0802b1e3 	.word	0x0802b1e3
 802b0f0:	0802b0a1 	.word	0x0802b0a1
 802b0f4:	0802b0a1 	.word	0x0802b0a1
 802b0f8:	0802b24b 	.word	0x0802b24b
 802b0fc:	0802b0a1 	.word	0x0802b0a1
 802b100:	0802b151 	.word	0x0802b151
 802b104:	0802b0a1 	.word	0x0802b0a1
 802b108:	0802b0a1 	.word	0x0802b0a1
 802b10c:	0802b1eb 	.word	0x0802b1eb
 802b110:	682b      	ldr	r3, [r5, #0]
 802b112:	1d1a      	adds	r2, r3, #4
 802b114:	681b      	ldr	r3, [r3, #0]
 802b116:	602a      	str	r2, [r5, #0]
 802b118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b11c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b120:	2301      	movs	r3, #1
 802b122:	e09f      	b.n	802b264 <_printf_i+0x1ec>
 802b124:	6820      	ldr	r0, [r4, #0]
 802b126:	682b      	ldr	r3, [r5, #0]
 802b128:	0607      	lsls	r7, r0, #24
 802b12a:	f103 0104 	add.w	r1, r3, #4
 802b12e:	6029      	str	r1, [r5, #0]
 802b130:	d501      	bpl.n	802b136 <_printf_i+0xbe>
 802b132:	681e      	ldr	r6, [r3, #0]
 802b134:	e003      	b.n	802b13e <_printf_i+0xc6>
 802b136:	0646      	lsls	r6, r0, #25
 802b138:	d5fb      	bpl.n	802b132 <_printf_i+0xba>
 802b13a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802b13e:	2e00      	cmp	r6, #0
 802b140:	da03      	bge.n	802b14a <_printf_i+0xd2>
 802b142:	232d      	movs	r3, #45	; 0x2d
 802b144:	4276      	negs	r6, r6
 802b146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b14a:	485a      	ldr	r0, [pc, #360]	; (802b2b4 <_printf_i+0x23c>)
 802b14c:	230a      	movs	r3, #10
 802b14e:	e012      	b.n	802b176 <_printf_i+0xfe>
 802b150:	682b      	ldr	r3, [r5, #0]
 802b152:	6820      	ldr	r0, [r4, #0]
 802b154:	1d19      	adds	r1, r3, #4
 802b156:	6029      	str	r1, [r5, #0]
 802b158:	0605      	lsls	r5, r0, #24
 802b15a:	d501      	bpl.n	802b160 <_printf_i+0xe8>
 802b15c:	681e      	ldr	r6, [r3, #0]
 802b15e:	e002      	b.n	802b166 <_printf_i+0xee>
 802b160:	0641      	lsls	r1, r0, #25
 802b162:	d5fb      	bpl.n	802b15c <_printf_i+0xe4>
 802b164:	881e      	ldrh	r6, [r3, #0]
 802b166:	4853      	ldr	r0, [pc, #332]	; (802b2b4 <_printf_i+0x23c>)
 802b168:	2f6f      	cmp	r7, #111	; 0x6f
 802b16a:	bf0c      	ite	eq
 802b16c:	2308      	moveq	r3, #8
 802b16e:	230a      	movne	r3, #10
 802b170:	2100      	movs	r1, #0
 802b172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b176:	6865      	ldr	r5, [r4, #4]
 802b178:	60a5      	str	r5, [r4, #8]
 802b17a:	2d00      	cmp	r5, #0
 802b17c:	bfa2      	ittt	ge
 802b17e:	6821      	ldrge	r1, [r4, #0]
 802b180:	f021 0104 	bicge.w	r1, r1, #4
 802b184:	6021      	strge	r1, [r4, #0]
 802b186:	b90e      	cbnz	r6, 802b18c <_printf_i+0x114>
 802b188:	2d00      	cmp	r5, #0
 802b18a:	d04b      	beq.n	802b224 <_printf_i+0x1ac>
 802b18c:	4615      	mov	r5, r2
 802b18e:	fbb6 f1f3 	udiv	r1, r6, r3
 802b192:	fb03 6711 	mls	r7, r3, r1, r6
 802b196:	5dc7      	ldrb	r7, [r0, r7]
 802b198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802b19c:	4637      	mov	r7, r6
 802b19e:	42bb      	cmp	r3, r7
 802b1a0:	460e      	mov	r6, r1
 802b1a2:	d9f4      	bls.n	802b18e <_printf_i+0x116>
 802b1a4:	2b08      	cmp	r3, #8
 802b1a6:	d10b      	bne.n	802b1c0 <_printf_i+0x148>
 802b1a8:	6823      	ldr	r3, [r4, #0]
 802b1aa:	07de      	lsls	r6, r3, #31
 802b1ac:	d508      	bpl.n	802b1c0 <_printf_i+0x148>
 802b1ae:	6923      	ldr	r3, [r4, #16]
 802b1b0:	6861      	ldr	r1, [r4, #4]
 802b1b2:	4299      	cmp	r1, r3
 802b1b4:	bfde      	ittt	le
 802b1b6:	2330      	movle	r3, #48	; 0x30
 802b1b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b1bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b1c0:	1b52      	subs	r2, r2, r5
 802b1c2:	6122      	str	r2, [r4, #16]
 802b1c4:	f8cd a000 	str.w	sl, [sp]
 802b1c8:	464b      	mov	r3, r9
 802b1ca:	aa03      	add	r2, sp, #12
 802b1cc:	4621      	mov	r1, r4
 802b1ce:	4640      	mov	r0, r8
 802b1d0:	f7ff fee4 	bl	802af9c <_printf_common>
 802b1d4:	3001      	adds	r0, #1
 802b1d6:	d14a      	bne.n	802b26e <_printf_i+0x1f6>
 802b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 802b1dc:	b004      	add	sp, #16
 802b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b1e2:	6823      	ldr	r3, [r4, #0]
 802b1e4:	f043 0320 	orr.w	r3, r3, #32
 802b1e8:	6023      	str	r3, [r4, #0]
 802b1ea:	4833      	ldr	r0, [pc, #204]	; (802b2b8 <_printf_i+0x240>)
 802b1ec:	2778      	movs	r7, #120	; 0x78
 802b1ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802b1f2:	6823      	ldr	r3, [r4, #0]
 802b1f4:	6829      	ldr	r1, [r5, #0]
 802b1f6:	061f      	lsls	r7, r3, #24
 802b1f8:	f851 6b04 	ldr.w	r6, [r1], #4
 802b1fc:	d402      	bmi.n	802b204 <_printf_i+0x18c>
 802b1fe:	065f      	lsls	r7, r3, #25
 802b200:	bf48      	it	mi
 802b202:	b2b6      	uxthmi	r6, r6
 802b204:	07df      	lsls	r7, r3, #31
 802b206:	bf48      	it	mi
 802b208:	f043 0320 	orrmi.w	r3, r3, #32
 802b20c:	6029      	str	r1, [r5, #0]
 802b20e:	bf48      	it	mi
 802b210:	6023      	strmi	r3, [r4, #0]
 802b212:	b91e      	cbnz	r6, 802b21c <_printf_i+0x1a4>
 802b214:	6823      	ldr	r3, [r4, #0]
 802b216:	f023 0320 	bic.w	r3, r3, #32
 802b21a:	6023      	str	r3, [r4, #0]
 802b21c:	2310      	movs	r3, #16
 802b21e:	e7a7      	b.n	802b170 <_printf_i+0xf8>
 802b220:	4824      	ldr	r0, [pc, #144]	; (802b2b4 <_printf_i+0x23c>)
 802b222:	e7e4      	b.n	802b1ee <_printf_i+0x176>
 802b224:	4615      	mov	r5, r2
 802b226:	e7bd      	b.n	802b1a4 <_printf_i+0x12c>
 802b228:	682b      	ldr	r3, [r5, #0]
 802b22a:	6826      	ldr	r6, [r4, #0]
 802b22c:	6961      	ldr	r1, [r4, #20]
 802b22e:	1d18      	adds	r0, r3, #4
 802b230:	6028      	str	r0, [r5, #0]
 802b232:	0635      	lsls	r5, r6, #24
 802b234:	681b      	ldr	r3, [r3, #0]
 802b236:	d501      	bpl.n	802b23c <_printf_i+0x1c4>
 802b238:	6019      	str	r1, [r3, #0]
 802b23a:	e002      	b.n	802b242 <_printf_i+0x1ca>
 802b23c:	0670      	lsls	r0, r6, #25
 802b23e:	d5fb      	bpl.n	802b238 <_printf_i+0x1c0>
 802b240:	8019      	strh	r1, [r3, #0]
 802b242:	2300      	movs	r3, #0
 802b244:	6123      	str	r3, [r4, #16]
 802b246:	4615      	mov	r5, r2
 802b248:	e7bc      	b.n	802b1c4 <_printf_i+0x14c>
 802b24a:	682b      	ldr	r3, [r5, #0]
 802b24c:	1d1a      	adds	r2, r3, #4
 802b24e:	602a      	str	r2, [r5, #0]
 802b250:	681d      	ldr	r5, [r3, #0]
 802b252:	6862      	ldr	r2, [r4, #4]
 802b254:	2100      	movs	r1, #0
 802b256:	4628      	mov	r0, r5
 802b258:	f7d4 ffda 	bl	8000210 <memchr>
 802b25c:	b108      	cbz	r0, 802b262 <_printf_i+0x1ea>
 802b25e:	1b40      	subs	r0, r0, r5
 802b260:	6060      	str	r0, [r4, #4]
 802b262:	6863      	ldr	r3, [r4, #4]
 802b264:	6123      	str	r3, [r4, #16]
 802b266:	2300      	movs	r3, #0
 802b268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b26c:	e7aa      	b.n	802b1c4 <_printf_i+0x14c>
 802b26e:	6923      	ldr	r3, [r4, #16]
 802b270:	462a      	mov	r2, r5
 802b272:	4649      	mov	r1, r9
 802b274:	4640      	mov	r0, r8
 802b276:	47d0      	blx	sl
 802b278:	3001      	adds	r0, #1
 802b27a:	d0ad      	beq.n	802b1d8 <_printf_i+0x160>
 802b27c:	6823      	ldr	r3, [r4, #0]
 802b27e:	079b      	lsls	r3, r3, #30
 802b280:	d413      	bmi.n	802b2aa <_printf_i+0x232>
 802b282:	68e0      	ldr	r0, [r4, #12]
 802b284:	9b03      	ldr	r3, [sp, #12]
 802b286:	4298      	cmp	r0, r3
 802b288:	bfb8      	it	lt
 802b28a:	4618      	movlt	r0, r3
 802b28c:	e7a6      	b.n	802b1dc <_printf_i+0x164>
 802b28e:	2301      	movs	r3, #1
 802b290:	4632      	mov	r2, r6
 802b292:	4649      	mov	r1, r9
 802b294:	4640      	mov	r0, r8
 802b296:	47d0      	blx	sl
 802b298:	3001      	adds	r0, #1
 802b29a:	d09d      	beq.n	802b1d8 <_printf_i+0x160>
 802b29c:	3501      	adds	r5, #1
 802b29e:	68e3      	ldr	r3, [r4, #12]
 802b2a0:	9903      	ldr	r1, [sp, #12]
 802b2a2:	1a5b      	subs	r3, r3, r1
 802b2a4:	42ab      	cmp	r3, r5
 802b2a6:	dcf2      	bgt.n	802b28e <_printf_i+0x216>
 802b2a8:	e7eb      	b.n	802b282 <_printf_i+0x20a>
 802b2aa:	2500      	movs	r5, #0
 802b2ac:	f104 0619 	add.w	r6, r4, #25
 802b2b0:	e7f5      	b.n	802b29e <_printf_i+0x226>
 802b2b2:	bf00      	nop
 802b2b4:	0802fda9 	.word	0x0802fda9
 802b2b8:	0802fdba 	.word	0x0802fdba

0802b2bc <__sflush_r>:
 802b2bc:	898a      	ldrh	r2, [r1, #12]
 802b2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b2c2:	4605      	mov	r5, r0
 802b2c4:	0710      	lsls	r0, r2, #28
 802b2c6:	460c      	mov	r4, r1
 802b2c8:	d458      	bmi.n	802b37c <__sflush_r+0xc0>
 802b2ca:	684b      	ldr	r3, [r1, #4]
 802b2cc:	2b00      	cmp	r3, #0
 802b2ce:	dc05      	bgt.n	802b2dc <__sflush_r+0x20>
 802b2d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b2d2:	2b00      	cmp	r3, #0
 802b2d4:	dc02      	bgt.n	802b2dc <__sflush_r+0x20>
 802b2d6:	2000      	movs	r0, #0
 802b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b2dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b2de:	2e00      	cmp	r6, #0
 802b2e0:	d0f9      	beq.n	802b2d6 <__sflush_r+0x1a>
 802b2e2:	2300      	movs	r3, #0
 802b2e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b2e8:	682f      	ldr	r7, [r5, #0]
 802b2ea:	6a21      	ldr	r1, [r4, #32]
 802b2ec:	602b      	str	r3, [r5, #0]
 802b2ee:	d032      	beq.n	802b356 <__sflush_r+0x9a>
 802b2f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b2f2:	89a3      	ldrh	r3, [r4, #12]
 802b2f4:	075a      	lsls	r2, r3, #29
 802b2f6:	d505      	bpl.n	802b304 <__sflush_r+0x48>
 802b2f8:	6863      	ldr	r3, [r4, #4]
 802b2fa:	1ac0      	subs	r0, r0, r3
 802b2fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b2fe:	b10b      	cbz	r3, 802b304 <__sflush_r+0x48>
 802b300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b302:	1ac0      	subs	r0, r0, r3
 802b304:	2300      	movs	r3, #0
 802b306:	4602      	mov	r2, r0
 802b308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b30a:	6a21      	ldr	r1, [r4, #32]
 802b30c:	4628      	mov	r0, r5
 802b30e:	47b0      	blx	r6
 802b310:	1c43      	adds	r3, r0, #1
 802b312:	89a3      	ldrh	r3, [r4, #12]
 802b314:	d106      	bne.n	802b324 <__sflush_r+0x68>
 802b316:	6829      	ldr	r1, [r5, #0]
 802b318:	291d      	cmp	r1, #29
 802b31a:	d82b      	bhi.n	802b374 <__sflush_r+0xb8>
 802b31c:	4a29      	ldr	r2, [pc, #164]	; (802b3c4 <__sflush_r+0x108>)
 802b31e:	410a      	asrs	r2, r1
 802b320:	07d6      	lsls	r6, r2, #31
 802b322:	d427      	bmi.n	802b374 <__sflush_r+0xb8>
 802b324:	2200      	movs	r2, #0
 802b326:	6062      	str	r2, [r4, #4]
 802b328:	04d9      	lsls	r1, r3, #19
 802b32a:	6922      	ldr	r2, [r4, #16]
 802b32c:	6022      	str	r2, [r4, #0]
 802b32e:	d504      	bpl.n	802b33a <__sflush_r+0x7e>
 802b330:	1c42      	adds	r2, r0, #1
 802b332:	d101      	bne.n	802b338 <__sflush_r+0x7c>
 802b334:	682b      	ldr	r3, [r5, #0]
 802b336:	b903      	cbnz	r3, 802b33a <__sflush_r+0x7e>
 802b338:	6560      	str	r0, [r4, #84]	; 0x54
 802b33a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b33c:	602f      	str	r7, [r5, #0]
 802b33e:	2900      	cmp	r1, #0
 802b340:	d0c9      	beq.n	802b2d6 <__sflush_r+0x1a>
 802b342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b346:	4299      	cmp	r1, r3
 802b348:	d002      	beq.n	802b350 <__sflush_r+0x94>
 802b34a:	4628      	mov	r0, r5
 802b34c:	f7ff fb3e 	bl	802a9cc <_free_r>
 802b350:	2000      	movs	r0, #0
 802b352:	6360      	str	r0, [r4, #52]	; 0x34
 802b354:	e7c0      	b.n	802b2d8 <__sflush_r+0x1c>
 802b356:	2301      	movs	r3, #1
 802b358:	4628      	mov	r0, r5
 802b35a:	47b0      	blx	r6
 802b35c:	1c41      	adds	r1, r0, #1
 802b35e:	d1c8      	bne.n	802b2f2 <__sflush_r+0x36>
 802b360:	682b      	ldr	r3, [r5, #0]
 802b362:	2b00      	cmp	r3, #0
 802b364:	d0c5      	beq.n	802b2f2 <__sflush_r+0x36>
 802b366:	2b1d      	cmp	r3, #29
 802b368:	d001      	beq.n	802b36e <__sflush_r+0xb2>
 802b36a:	2b16      	cmp	r3, #22
 802b36c:	d101      	bne.n	802b372 <__sflush_r+0xb6>
 802b36e:	602f      	str	r7, [r5, #0]
 802b370:	e7b1      	b.n	802b2d6 <__sflush_r+0x1a>
 802b372:	89a3      	ldrh	r3, [r4, #12]
 802b374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b378:	81a3      	strh	r3, [r4, #12]
 802b37a:	e7ad      	b.n	802b2d8 <__sflush_r+0x1c>
 802b37c:	690f      	ldr	r7, [r1, #16]
 802b37e:	2f00      	cmp	r7, #0
 802b380:	d0a9      	beq.n	802b2d6 <__sflush_r+0x1a>
 802b382:	0793      	lsls	r3, r2, #30
 802b384:	680e      	ldr	r6, [r1, #0]
 802b386:	bf08      	it	eq
 802b388:	694b      	ldreq	r3, [r1, #20]
 802b38a:	600f      	str	r7, [r1, #0]
 802b38c:	bf18      	it	ne
 802b38e:	2300      	movne	r3, #0
 802b390:	eba6 0807 	sub.w	r8, r6, r7
 802b394:	608b      	str	r3, [r1, #8]
 802b396:	f1b8 0f00 	cmp.w	r8, #0
 802b39a:	dd9c      	ble.n	802b2d6 <__sflush_r+0x1a>
 802b39c:	6a21      	ldr	r1, [r4, #32]
 802b39e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b3a0:	4643      	mov	r3, r8
 802b3a2:	463a      	mov	r2, r7
 802b3a4:	4628      	mov	r0, r5
 802b3a6:	47b0      	blx	r6
 802b3a8:	2800      	cmp	r0, #0
 802b3aa:	dc06      	bgt.n	802b3ba <__sflush_r+0xfe>
 802b3ac:	89a3      	ldrh	r3, [r4, #12]
 802b3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b3b2:	81a3      	strh	r3, [r4, #12]
 802b3b4:	f04f 30ff 	mov.w	r0, #4294967295
 802b3b8:	e78e      	b.n	802b2d8 <__sflush_r+0x1c>
 802b3ba:	4407      	add	r7, r0
 802b3bc:	eba8 0800 	sub.w	r8, r8, r0
 802b3c0:	e7e9      	b.n	802b396 <__sflush_r+0xda>
 802b3c2:	bf00      	nop
 802b3c4:	dfbffffe 	.word	0xdfbffffe

0802b3c8 <_fflush_r>:
 802b3c8:	b538      	push	{r3, r4, r5, lr}
 802b3ca:	690b      	ldr	r3, [r1, #16]
 802b3cc:	4605      	mov	r5, r0
 802b3ce:	460c      	mov	r4, r1
 802b3d0:	b913      	cbnz	r3, 802b3d8 <_fflush_r+0x10>
 802b3d2:	2500      	movs	r5, #0
 802b3d4:	4628      	mov	r0, r5
 802b3d6:	bd38      	pop	{r3, r4, r5, pc}
 802b3d8:	b118      	cbz	r0, 802b3e2 <_fflush_r+0x1a>
 802b3da:	6a03      	ldr	r3, [r0, #32]
 802b3dc:	b90b      	cbnz	r3, 802b3e2 <_fflush_r+0x1a>
 802b3de:	f7ff f867 	bl	802a4b0 <__sinit>
 802b3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b3e6:	2b00      	cmp	r3, #0
 802b3e8:	d0f3      	beq.n	802b3d2 <_fflush_r+0xa>
 802b3ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b3ec:	07d0      	lsls	r0, r2, #31
 802b3ee:	d404      	bmi.n	802b3fa <_fflush_r+0x32>
 802b3f0:	0599      	lsls	r1, r3, #22
 802b3f2:	d402      	bmi.n	802b3fa <_fflush_r+0x32>
 802b3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b3f6:	f7ff fa7a 	bl	802a8ee <__retarget_lock_acquire_recursive>
 802b3fa:	4628      	mov	r0, r5
 802b3fc:	4621      	mov	r1, r4
 802b3fe:	f7ff ff5d 	bl	802b2bc <__sflush_r>
 802b402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b404:	07da      	lsls	r2, r3, #31
 802b406:	4605      	mov	r5, r0
 802b408:	d4e4      	bmi.n	802b3d4 <_fflush_r+0xc>
 802b40a:	89a3      	ldrh	r3, [r4, #12]
 802b40c:	059b      	lsls	r3, r3, #22
 802b40e:	d4e1      	bmi.n	802b3d4 <_fflush_r+0xc>
 802b410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b412:	f7ff fa6d 	bl	802a8f0 <__retarget_lock_release_recursive>
 802b416:	e7dd      	b.n	802b3d4 <_fflush_r+0xc>

0802b418 <__swhatbuf_r>:
 802b418:	b570      	push	{r4, r5, r6, lr}
 802b41a:	460c      	mov	r4, r1
 802b41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b420:	2900      	cmp	r1, #0
 802b422:	b096      	sub	sp, #88	; 0x58
 802b424:	4615      	mov	r5, r2
 802b426:	461e      	mov	r6, r3
 802b428:	da0d      	bge.n	802b446 <__swhatbuf_r+0x2e>
 802b42a:	89a3      	ldrh	r3, [r4, #12]
 802b42c:	f013 0f80 	tst.w	r3, #128	; 0x80
 802b430:	f04f 0100 	mov.w	r1, #0
 802b434:	bf0c      	ite	eq
 802b436:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802b43a:	2340      	movne	r3, #64	; 0x40
 802b43c:	2000      	movs	r0, #0
 802b43e:	6031      	str	r1, [r6, #0]
 802b440:	602b      	str	r3, [r5, #0]
 802b442:	b016      	add	sp, #88	; 0x58
 802b444:	bd70      	pop	{r4, r5, r6, pc}
 802b446:	466a      	mov	r2, sp
 802b448:	f000 f862 	bl	802b510 <_fstat_r>
 802b44c:	2800      	cmp	r0, #0
 802b44e:	dbec      	blt.n	802b42a <__swhatbuf_r+0x12>
 802b450:	9901      	ldr	r1, [sp, #4]
 802b452:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802b456:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802b45a:	4259      	negs	r1, r3
 802b45c:	4159      	adcs	r1, r3
 802b45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b462:	e7eb      	b.n	802b43c <__swhatbuf_r+0x24>

0802b464 <__smakebuf_r>:
 802b464:	898b      	ldrh	r3, [r1, #12]
 802b466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b468:	079d      	lsls	r5, r3, #30
 802b46a:	4606      	mov	r6, r0
 802b46c:	460c      	mov	r4, r1
 802b46e:	d507      	bpl.n	802b480 <__smakebuf_r+0x1c>
 802b470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b474:	6023      	str	r3, [r4, #0]
 802b476:	6123      	str	r3, [r4, #16]
 802b478:	2301      	movs	r3, #1
 802b47a:	6163      	str	r3, [r4, #20]
 802b47c:	b002      	add	sp, #8
 802b47e:	bd70      	pop	{r4, r5, r6, pc}
 802b480:	ab01      	add	r3, sp, #4
 802b482:	466a      	mov	r2, sp
 802b484:	f7ff ffc8 	bl	802b418 <__swhatbuf_r>
 802b488:	9900      	ldr	r1, [sp, #0]
 802b48a:	4605      	mov	r5, r0
 802b48c:	4630      	mov	r0, r6
 802b48e:	f7fe fee9 	bl	802a264 <_malloc_r>
 802b492:	b948      	cbnz	r0, 802b4a8 <__smakebuf_r+0x44>
 802b494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b498:	059a      	lsls	r2, r3, #22
 802b49a:	d4ef      	bmi.n	802b47c <__smakebuf_r+0x18>
 802b49c:	f023 0303 	bic.w	r3, r3, #3
 802b4a0:	f043 0302 	orr.w	r3, r3, #2
 802b4a4:	81a3      	strh	r3, [r4, #12]
 802b4a6:	e7e3      	b.n	802b470 <__smakebuf_r+0xc>
 802b4a8:	89a3      	ldrh	r3, [r4, #12]
 802b4aa:	6020      	str	r0, [r4, #0]
 802b4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b4b0:	81a3      	strh	r3, [r4, #12]
 802b4b2:	9b00      	ldr	r3, [sp, #0]
 802b4b4:	6163      	str	r3, [r4, #20]
 802b4b6:	9b01      	ldr	r3, [sp, #4]
 802b4b8:	6120      	str	r0, [r4, #16]
 802b4ba:	b15b      	cbz	r3, 802b4d4 <__smakebuf_r+0x70>
 802b4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b4c0:	4630      	mov	r0, r6
 802b4c2:	f000 f837 	bl	802b534 <_isatty_r>
 802b4c6:	b128      	cbz	r0, 802b4d4 <__smakebuf_r+0x70>
 802b4c8:	89a3      	ldrh	r3, [r4, #12]
 802b4ca:	f023 0303 	bic.w	r3, r3, #3
 802b4ce:	f043 0301 	orr.w	r3, r3, #1
 802b4d2:	81a3      	strh	r3, [r4, #12]
 802b4d4:	89a3      	ldrh	r3, [r4, #12]
 802b4d6:	431d      	orrs	r5, r3
 802b4d8:	81a5      	strh	r5, [r4, #12]
 802b4da:	e7cf      	b.n	802b47c <__smakebuf_r+0x18>

0802b4dc <memmove>:
 802b4dc:	4288      	cmp	r0, r1
 802b4de:	b510      	push	{r4, lr}
 802b4e0:	eb01 0402 	add.w	r4, r1, r2
 802b4e4:	d902      	bls.n	802b4ec <memmove+0x10>
 802b4e6:	4284      	cmp	r4, r0
 802b4e8:	4623      	mov	r3, r4
 802b4ea:	d807      	bhi.n	802b4fc <memmove+0x20>
 802b4ec:	1e43      	subs	r3, r0, #1
 802b4ee:	42a1      	cmp	r1, r4
 802b4f0:	d008      	beq.n	802b504 <memmove+0x28>
 802b4f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b4f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b4fa:	e7f8      	b.n	802b4ee <memmove+0x12>
 802b4fc:	4402      	add	r2, r0
 802b4fe:	4601      	mov	r1, r0
 802b500:	428a      	cmp	r2, r1
 802b502:	d100      	bne.n	802b506 <memmove+0x2a>
 802b504:	bd10      	pop	{r4, pc}
 802b506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b50a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b50e:	e7f7      	b.n	802b500 <memmove+0x24>

0802b510 <_fstat_r>:
 802b510:	b538      	push	{r3, r4, r5, lr}
 802b512:	4d07      	ldr	r5, [pc, #28]	; (802b530 <_fstat_r+0x20>)
 802b514:	2300      	movs	r3, #0
 802b516:	4604      	mov	r4, r0
 802b518:	4608      	mov	r0, r1
 802b51a:	4611      	mov	r1, r2
 802b51c:	602b      	str	r3, [r5, #0]
 802b51e:	f7d6 fb38 	bl	8001b92 <_fstat>
 802b522:	1c43      	adds	r3, r0, #1
 802b524:	d102      	bne.n	802b52c <_fstat_r+0x1c>
 802b526:	682b      	ldr	r3, [r5, #0]
 802b528:	b103      	cbz	r3, 802b52c <_fstat_r+0x1c>
 802b52a:	6023      	str	r3, [r4, #0]
 802b52c:	bd38      	pop	{r3, r4, r5, pc}
 802b52e:	bf00      	nop
 802b530:	20015bb0 	.word	0x20015bb0

0802b534 <_isatty_r>:
 802b534:	b538      	push	{r3, r4, r5, lr}
 802b536:	4d06      	ldr	r5, [pc, #24]	; (802b550 <_isatty_r+0x1c>)
 802b538:	2300      	movs	r3, #0
 802b53a:	4604      	mov	r4, r0
 802b53c:	4608      	mov	r0, r1
 802b53e:	602b      	str	r3, [r5, #0]
 802b540:	f7d6 fb2c 	bl	8001b9c <_isatty>
 802b544:	1c43      	adds	r3, r0, #1
 802b546:	d102      	bne.n	802b54e <_isatty_r+0x1a>
 802b548:	682b      	ldr	r3, [r5, #0]
 802b54a:	b103      	cbz	r3, 802b54e <_isatty_r+0x1a>
 802b54c:	6023      	str	r3, [r4, #0]
 802b54e:	bd38      	pop	{r3, r4, r5, pc}
 802b550:	20015bb0 	.word	0x20015bb0

0802b554 <_realloc_r>:
 802b554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b558:	4680      	mov	r8, r0
 802b55a:	4614      	mov	r4, r2
 802b55c:	460e      	mov	r6, r1
 802b55e:	b921      	cbnz	r1, 802b56a <_realloc_r+0x16>
 802b560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b564:	4611      	mov	r1, r2
 802b566:	f7fe be7d 	b.w	802a264 <_malloc_r>
 802b56a:	b92a      	cbnz	r2, 802b578 <_realloc_r+0x24>
 802b56c:	f7ff fa2e 	bl	802a9cc <_free_r>
 802b570:	4625      	mov	r5, r4
 802b572:	4628      	mov	r0, r5
 802b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b578:	f000 f81b 	bl	802b5b2 <_malloc_usable_size_r>
 802b57c:	4284      	cmp	r4, r0
 802b57e:	4607      	mov	r7, r0
 802b580:	d802      	bhi.n	802b588 <_realloc_r+0x34>
 802b582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802b586:	d812      	bhi.n	802b5ae <_realloc_r+0x5a>
 802b588:	4621      	mov	r1, r4
 802b58a:	4640      	mov	r0, r8
 802b58c:	f7fe fe6a 	bl	802a264 <_malloc_r>
 802b590:	4605      	mov	r5, r0
 802b592:	2800      	cmp	r0, #0
 802b594:	d0ed      	beq.n	802b572 <_realloc_r+0x1e>
 802b596:	42bc      	cmp	r4, r7
 802b598:	4622      	mov	r2, r4
 802b59a:	4631      	mov	r1, r6
 802b59c:	bf28      	it	cs
 802b59e:	463a      	movcs	r2, r7
 802b5a0:	f7ff f9a7 	bl	802a8f2 <memcpy>
 802b5a4:	4631      	mov	r1, r6
 802b5a6:	4640      	mov	r0, r8
 802b5a8:	f7ff fa10 	bl	802a9cc <_free_r>
 802b5ac:	e7e1      	b.n	802b572 <_realloc_r+0x1e>
 802b5ae:	4635      	mov	r5, r6
 802b5b0:	e7df      	b.n	802b572 <_realloc_r+0x1e>

0802b5b2 <_malloc_usable_size_r>:
 802b5b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b5b6:	1f18      	subs	r0, r3, #4
 802b5b8:	2b00      	cmp	r3, #0
 802b5ba:	bfbc      	itt	lt
 802b5bc:	580b      	ldrlt	r3, [r1, r0]
 802b5be:	18c0      	addlt	r0, r0, r3
 802b5c0:	4770      	bx	lr
	...

0802b5c4 <_init>:
 802b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b5c6:	bf00      	nop
 802b5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b5ca:	bc08      	pop	{r3}
 802b5cc:	469e      	mov	lr, r3
 802b5ce:	4770      	bx	lr

0802b5d0 <_fini>:
 802b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b5d2:	bf00      	nop
 802b5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b5d6:	bc08      	pop	{r3}
 802b5d8:	469e      	mov	lr, r3
 802b5da:	4770      	bx	lr
